
lwipClient.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00019164  08000190  08000190  00010190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000031c8  080192f4  080192f4  000292f4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0801c4bc  0801c4bc  00030178  2**0
                  CONTENTS
  4 .ARM          00000008  0801c4bc  0801c4bc  0002c4bc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0801c4c4  0801c4c4  00030178  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0801c4c4  0801c4c4  0002c4c4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0801c4c8  0801c4c8  0002c4c8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000178  20000000  0801c4cc  00030000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  00030178  2**0
                  CONTENTS
 10 .bss          0000a66c  20000178  20000178  00030178  2**2
                  ALLOC
 11 ._user_heap_stack 00000604  2000a7e4  2000a7e4  00030178  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  00030178  2**0
                  CONTENTS, READONLY
 13 .comment      00000043  00000000  00000000  000301a8  2**0
                  CONTENTS, READONLY
 14 .debug_info   00029b39  00000000  00000000  000301eb  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_abbrev 000075b7  00000000  00000000  00059d24  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_aranges 00001dd0  00000000  00000000  000612e0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_rnglists 00001799  00000000  00000000  000630b0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_macro  000312b1  00000000  00000000  00064849  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_line   00032cfa  00000000  00000000  00095afa  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_str    000e14e6  00000000  00000000  000c87f4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_frame  00008300  00000000  00000000  001a9cdc  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 22 .debug_line_str 00000054  00000000  00000000  001b1fdc  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	; (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	; (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	20000178 	.word	0x20000178
 80001ac:	00000000 	.word	0x00000000
 80001b0:	080192dc 	.word	0x080192dc

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	; (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	; (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	; (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	2000017c 	.word	0x2000017c
 80001cc:	080192dc 	.word	0x080192dc

080001d0 <strlen>:
 80001d0:	4603      	mov	r3, r0
 80001d2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001d6:	2a00      	cmp	r2, #0
 80001d8:	d1fb      	bne.n	80001d2 <strlen+0x2>
 80001da:	1a18      	subs	r0, r3, r0
 80001dc:	3801      	subs	r0, #1
 80001de:	4770      	bx	lr

080001e0 <memchr>:
 80001e0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001e4:	2a10      	cmp	r2, #16
 80001e6:	db2b      	blt.n	8000240 <memchr+0x60>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	d008      	beq.n	8000200 <memchr+0x20>
 80001ee:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001f2:	3a01      	subs	r2, #1
 80001f4:	428b      	cmp	r3, r1
 80001f6:	d02d      	beq.n	8000254 <memchr+0x74>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	b342      	cbz	r2, 8000250 <memchr+0x70>
 80001fe:	d1f6      	bne.n	80001ee <memchr+0xe>
 8000200:	b4f0      	push	{r4, r5, r6, r7}
 8000202:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000206:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800020a:	f022 0407 	bic.w	r4, r2, #7
 800020e:	f07f 0700 	mvns.w	r7, #0
 8000212:	2300      	movs	r3, #0
 8000214:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000218:	3c08      	subs	r4, #8
 800021a:	ea85 0501 	eor.w	r5, r5, r1
 800021e:	ea86 0601 	eor.w	r6, r6, r1
 8000222:	fa85 f547 	uadd8	r5, r5, r7
 8000226:	faa3 f587 	sel	r5, r3, r7
 800022a:	fa86 f647 	uadd8	r6, r6, r7
 800022e:	faa5 f687 	sel	r6, r5, r7
 8000232:	b98e      	cbnz	r6, 8000258 <memchr+0x78>
 8000234:	d1ee      	bne.n	8000214 <memchr+0x34>
 8000236:	bcf0      	pop	{r4, r5, r6, r7}
 8000238:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800023c:	f002 0207 	and.w	r2, r2, #7
 8000240:	b132      	cbz	r2, 8000250 <memchr+0x70>
 8000242:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000246:	3a01      	subs	r2, #1
 8000248:	ea83 0301 	eor.w	r3, r3, r1
 800024c:	b113      	cbz	r3, 8000254 <memchr+0x74>
 800024e:	d1f8      	bne.n	8000242 <memchr+0x62>
 8000250:	2000      	movs	r0, #0
 8000252:	4770      	bx	lr
 8000254:	3801      	subs	r0, #1
 8000256:	4770      	bx	lr
 8000258:	2d00      	cmp	r5, #0
 800025a:	bf06      	itte	eq
 800025c:	4635      	moveq	r5, r6
 800025e:	3803      	subeq	r0, #3
 8000260:	3807      	subne	r0, #7
 8000262:	f015 0f01 	tst.w	r5, #1
 8000266:	d107      	bne.n	8000278 <memchr+0x98>
 8000268:	3001      	adds	r0, #1
 800026a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800026e:	bf02      	ittt	eq
 8000270:	3001      	addeq	r0, #1
 8000272:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000276:	3001      	addeq	r0, #1
 8000278:	bcf0      	pop	{r4, r5, r6, r7}
 800027a:	3801      	subs	r0, #1
 800027c:	4770      	bx	lr
 800027e:	bf00      	nop

08000280 <__aeabi_uldivmod>:
 8000280:	b953      	cbnz	r3, 8000298 <__aeabi_uldivmod+0x18>
 8000282:	b94a      	cbnz	r2, 8000298 <__aeabi_uldivmod+0x18>
 8000284:	2900      	cmp	r1, #0
 8000286:	bf08      	it	eq
 8000288:	2800      	cmpeq	r0, #0
 800028a:	bf1c      	itt	ne
 800028c:	f04f 31ff 	movne.w	r1, #4294967295
 8000290:	f04f 30ff 	movne.w	r0, #4294967295
 8000294:	f000 b970 	b.w	8000578 <__aeabi_idiv0>
 8000298:	f1ad 0c08 	sub.w	ip, sp, #8
 800029c:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80002a0:	f000 f806 	bl	80002b0 <__udivmoddi4>
 80002a4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80002a8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80002ac:	b004      	add	sp, #16
 80002ae:	4770      	bx	lr

080002b0 <__udivmoddi4>:
 80002b0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80002b4:	9e08      	ldr	r6, [sp, #32]
 80002b6:	460d      	mov	r5, r1
 80002b8:	4604      	mov	r4, r0
 80002ba:	460f      	mov	r7, r1
 80002bc:	2b00      	cmp	r3, #0
 80002be:	d14a      	bne.n	8000356 <__udivmoddi4+0xa6>
 80002c0:	428a      	cmp	r2, r1
 80002c2:	4694      	mov	ip, r2
 80002c4:	d965      	bls.n	8000392 <__udivmoddi4+0xe2>
 80002c6:	fab2 f382 	clz	r3, r2
 80002ca:	b143      	cbz	r3, 80002de <__udivmoddi4+0x2e>
 80002cc:	fa02 fc03 	lsl.w	ip, r2, r3
 80002d0:	f1c3 0220 	rsb	r2, r3, #32
 80002d4:	409f      	lsls	r7, r3
 80002d6:	fa20 f202 	lsr.w	r2, r0, r2
 80002da:	4317      	orrs	r7, r2
 80002dc:	409c      	lsls	r4, r3
 80002de:	ea4f 4e1c 	mov.w	lr, ip, lsr #16
 80002e2:	fa1f f58c 	uxth.w	r5, ip
 80002e6:	fbb7 f1fe 	udiv	r1, r7, lr
 80002ea:	0c22      	lsrs	r2, r4, #16
 80002ec:	fb0e 7711 	mls	r7, lr, r1, r7
 80002f0:	ea42 4207 	orr.w	r2, r2, r7, lsl #16
 80002f4:	fb01 f005 	mul.w	r0, r1, r5
 80002f8:	4290      	cmp	r0, r2
 80002fa:	d90a      	bls.n	8000312 <__udivmoddi4+0x62>
 80002fc:	eb1c 0202 	adds.w	r2, ip, r2
 8000300:	f101 37ff 	add.w	r7, r1, #4294967295
 8000304:	f080 811c 	bcs.w	8000540 <__udivmoddi4+0x290>
 8000308:	4290      	cmp	r0, r2
 800030a:	f240 8119 	bls.w	8000540 <__udivmoddi4+0x290>
 800030e:	3902      	subs	r1, #2
 8000310:	4462      	add	r2, ip
 8000312:	1a12      	subs	r2, r2, r0
 8000314:	b2a4      	uxth	r4, r4
 8000316:	fbb2 f0fe 	udiv	r0, r2, lr
 800031a:	fb0e 2210 	mls	r2, lr, r0, r2
 800031e:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8000322:	fb00 f505 	mul.w	r5, r0, r5
 8000326:	42a5      	cmp	r5, r4
 8000328:	d90a      	bls.n	8000340 <__udivmoddi4+0x90>
 800032a:	eb1c 0404 	adds.w	r4, ip, r4
 800032e:	f100 32ff 	add.w	r2, r0, #4294967295
 8000332:	f080 8107 	bcs.w	8000544 <__udivmoddi4+0x294>
 8000336:	42a5      	cmp	r5, r4
 8000338:	f240 8104 	bls.w	8000544 <__udivmoddi4+0x294>
 800033c:	4464      	add	r4, ip
 800033e:	3802      	subs	r0, #2
 8000340:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 8000344:	1b64      	subs	r4, r4, r5
 8000346:	2100      	movs	r1, #0
 8000348:	b11e      	cbz	r6, 8000352 <__udivmoddi4+0xa2>
 800034a:	40dc      	lsrs	r4, r3
 800034c:	2300      	movs	r3, #0
 800034e:	e9c6 4300 	strd	r4, r3, [r6]
 8000352:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000356:	428b      	cmp	r3, r1
 8000358:	d908      	bls.n	800036c <__udivmoddi4+0xbc>
 800035a:	2e00      	cmp	r6, #0
 800035c:	f000 80ed 	beq.w	800053a <__udivmoddi4+0x28a>
 8000360:	2100      	movs	r1, #0
 8000362:	e9c6 0500 	strd	r0, r5, [r6]
 8000366:	4608      	mov	r0, r1
 8000368:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800036c:	fab3 f183 	clz	r1, r3
 8000370:	2900      	cmp	r1, #0
 8000372:	d149      	bne.n	8000408 <__udivmoddi4+0x158>
 8000374:	42ab      	cmp	r3, r5
 8000376:	d302      	bcc.n	800037e <__udivmoddi4+0xce>
 8000378:	4282      	cmp	r2, r0
 800037a:	f200 80f8 	bhi.w	800056e <__udivmoddi4+0x2be>
 800037e:	1a84      	subs	r4, r0, r2
 8000380:	eb65 0203 	sbc.w	r2, r5, r3
 8000384:	2001      	movs	r0, #1
 8000386:	4617      	mov	r7, r2
 8000388:	2e00      	cmp	r6, #0
 800038a:	d0e2      	beq.n	8000352 <__udivmoddi4+0xa2>
 800038c:	e9c6 4700 	strd	r4, r7, [r6]
 8000390:	e7df      	b.n	8000352 <__udivmoddi4+0xa2>
 8000392:	b902      	cbnz	r2, 8000396 <__udivmoddi4+0xe6>
 8000394:	deff      	udf	#255	; 0xff
 8000396:	fab2 f382 	clz	r3, r2
 800039a:	2b00      	cmp	r3, #0
 800039c:	f040 8090 	bne.w	80004c0 <__udivmoddi4+0x210>
 80003a0:	1a8a      	subs	r2, r1, r2
 80003a2:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80003a6:	fa1f fe8c 	uxth.w	lr, ip
 80003aa:	2101      	movs	r1, #1
 80003ac:	fbb2 f5f7 	udiv	r5, r2, r7
 80003b0:	fb07 2015 	mls	r0, r7, r5, r2
 80003b4:	0c22      	lsrs	r2, r4, #16
 80003b6:	ea42 4200 	orr.w	r2, r2, r0, lsl #16
 80003ba:	fb0e f005 	mul.w	r0, lr, r5
 80003be:	4290      	cmp	r0, r2
 80003c0:	d908      	bls.n	80003d4 <__udivmoddi4+0x124>
 80003c2:	eb1c 0202 	adds.w	r2, ip, r2
 80003c6:	f105 38ff 	add.w	r8, r5, #4294967295
 80003ca:	d202      	bcs.n	80003d2 <__udivmoddi4+0x122>
 80003cc:	4290      	cmp	r0, r2
 80003ce:	f200 80cb 	bhi.w	8000568 <__udivmoddi4+0x2b8>
 80003d2:	4645      	mov	r5, r8
 80003d4:	1a12      	subs	r2, r2, r0
 80003d6:	b2a4      	uxth	r4, r4
 80003d8:	fbb2 f0f7 	udiv	r0, r2, r7
 80003dc:	fb07 2210 	mls	r2, r7, r0, r2
 80003e0:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 80003e4:	fb0e fe00 	mul.w	lr, lr, r0
 80003e8:	45a6      	cmp	lr, r4
 80003ea:	d908      	bls.n	80003fe <__udivmoddi4+0x14e>
 80003ec:	eb1c 0404 	adds.w	r4, ip, r4
 80003f0:	f100 32ff 	add.w	r2, r0, #4294967295
 80003f4:	d202      	bcs.n	80003fc <__udivmoddi4+0x14c>
 80003f6:	45a6      	cmp	lr, r4
 80003f8:	f200 80bb 	bhi.w	8000572 <__udivmoddi4+0x2c2>
 80003fc:	4610      	mov	r0, r2
 80003fe:	eba4 040e 	sub.w	r4, r4, lr
 8000402:	ea40 4005 	orr.w	r0, r0, r5, lsl #16
 8000406:	e79f      	b.n	8000348 <__udivmoddi4+0x98>
 8000408:	f1c1 0720 	rsb	r7, r1, #32
 800040c:	408b      	lsls	r3, r1
 800040e:	fa22 fc07 	lsr.w	ip, r2, r7
 8000412:	ea4c 0c03 	orr.w	ip, ip, r3
 8000416:	fa05 f401 	lsl.w	r4, r5, r1
 800041a:	fa20 f307 	lsr.w	r3, r0, r7
 800041e:	40fd      	lsrs	r5, r7
 8000420:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000424:	4323      	orrs	r3, r4
 8000426:	fbb5 f8f9 	udiv	r8, r5, r9
 800042a:	fa1f fe8c 	uxth.w	lr, ip
 800042e:	fb09 5518 	mls	r5, r9, r8, r5
 8000432:	0c1c      	lsrs	r4, r3, #16
 8000434:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
 8000438:	fb08 f50e 	mul.w	r5, r8, lr
 800043c:	42a5      	cmp	r5, r4
 800043e:	fa02 f201 	lsl.w	r2, r2, r1
 8000442:	fa00 f001 	lsl.w	r0, r0, r1
 8000446:	d90b      	bls.n	8000460 <__udivmoddi4+0x1b0>
 8000448:	eb1c 0404 	adds.w	r4, ip, r4
 800044c:	f108 3aff 	add.w	sl, r8, #4294967295
 8000450:	f080 8088 	bcs.w	8000564 <__udivmoddi4+0x2b4>
 8000454:	42a5      	cmp	r5, r4
 8000456:	f240 8085 	bls.w	8000564 <__udivmoddi4+0x2b4>
 800045a:	f1a8 0802 	sub.w	r8, r8, #2
 800045e:	4464      	add	r4, ip
 8000460:	1b64      	subs	r4, r4, r5
 8000462:	b29d      	uxth	r5, r3
 8000464:	fbb4 f3f9 	udiv	r3, r4, r9
 8000468:	fb09 4413 	mls	r4, r9, r3, r4
 800046c:	ea45 4404 	orr.w	r4, r5, r4, lsl #16
 8000470:	fb03 fe0e 	mul.w	lr, r3, lr
 8000474:	45a6      	cmp	lr, r4
 8000476:	d908      	bls.n	800048a <__udivmoddi4+0x1da>
 8000478:	eb1c 0404 	adds.w	r4, ip, r4
 800047c:	f103 35ff 	add.w	r5, r3, #4294967295
 8000480:	d26c      	bcs.n	800055c <__udivmoddi4+0x2ac>
 8000482:	45a6      	cmp	lr, r4
 8000484:	d96a      	bls.n	800055c <__udivmoddi4+0x2ac>
 8000486:	3b02      	subs	r3, #2
 8000488:	4464      	add	r4, ip
 800048a:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 800048e:	fba3 9502 	umull	r9, r5, r3, r2
 8000492:	eba4 040e 	sub.w	r4, r4, lr
 8000496:	42ac      	cmp	r4, r5
 8000498:	46c8      	mov	r8, r9
 800049a:	46ae      	mov	lr, r5
 800049c:	d356      	bcc.n	800054c <__udivmoddi4+0x29c>
 800049e:	d053      	beq.n	8000548 <__udivmoddi4+0x298>
 80004a0:	b156      	cbz	r6, 80004b8 <__udivmoddi4+0x208>
 80004a2:	ebb0 0208 	subs.w	r2, r0, r8
 80004a6:	eb64 040e 	sbc.w	r4, r4, lr
 80004aa:	fa04 f707 	lsl.w	r7, r4, r7
 80004ae:	40ca      	lsrs	r2, r1
 80004b0:	40cc      	lsrs	r4, r1
 80004b2:	4317      	orrs	r7, r2
 80004b4:	e9c6 7400 	strd	r7, r4, [r6]
 80004b8:	4618      	mov	r0, r3
 80004ba:	2100      	movs	r1, #0
 80004bc:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80004c0:	f1c3 0120 	rsb	r1, r3, #32
 80004c4:	fa02 fc03 	lsl.w	ip, r2, r3
 80004c8:	fa20 f201 	lsr.w	r2, r0, r1
 80004cc:	fa25 f101 	lsr.w	r1, r5, r1
 80004d0:	409d      	lsls	r5, r3
 80004d2:	432a      	orrs	r2, r5
 80004d4:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80004d8:	fa1f fe8c 	uxth.w	lr, ip
 80004dc:	fbb1 f0f7 	udiv	r0, r1, r7
 80004e0:	fb07 1510 	mls	r5, r7, r0, r1
 80004e4:	0c11      	lsrs	r1, r2, #16
 80004e6:	ea41 4105 	orr.w	r1, r1, r5, lsl #16
 80004ea:	fb00 f50e 	mul.w	r5, r0, lr
 80004ee:	428d      	cmp	r5, r1
 80004f0:	fa04 f403 	lsl.w	r4, r4, r3
 80004f4:	d908      	bls.n	8000508 <__udivmoddi4+0x258>
 80004f6:	eb1c 0101 	adds.w	r1, ip, r1
 80004fa:	f100 38ff 	add.w	r8, r0, #4294967295
 80004fe:	d22f      	bcs.n	8000560 <__udivmoddi4+0x2b0>
 8000500:	428d      	cmp	r5, r1
 8000502:	d92d      	bls.n	8000560 <__udivmoddi4+0x2b0>
 8000504:	3802      	subs	r0, #2
 8000506:	4461      	add	r1, ip
 8000508:	1b49      	subs	r1, r1, r5
 800050a:	b292      	uxth	r2, r2
 800050c:	fbb1 f5f7 	udiv	r5, r1, r7
 8000510:	fb07 1115 	mls	r1, r7, r5, r1
 8000514:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8000518:	fb05 f10e 	mul.w	r1, r5, lr
 800051c:	4291      	cmp	r1, r2
 800051e:	d908      	bls.n	8000532 <__udivmoddi4+0x282>
 8000520:	eb1c 0202 	adds.w	r2, ip, r2
 8000524:	f105 38ff 	add.w	r8, r5, #4294967295
 8000528:	d216      	bcs.n	8000558 <__udivmoddi4+0x2a8>
 800052a:	4291      	cmp	r1, r2
 800052c:	d914      	bls.n	8000558 <__udivmoddi4+0x2a8>
 800052e:	3d02      	subs	r5, #2
 8000530:	4462      	add	r2, ip
 8000532:	1a52      	subs	r2, r2, r1
 8000534:	ea45 4100 	orr.w	r1, r5, r0, lsl #16
 8000538:	e738      	b.n	80003ac <__udivmoddi4+0xfc>
 800053a:	4631      	mov	r1, r6
 800053c:	4630      	mov	r0, r6
 800053e:	e708      	b.n	8000352 <__udivmoddi4+0xa2>
 8000540:	4639      	mov	r1, r7
 8000542:	e6e6      	b.n	8000312 <__udivmoddi4+0x62>
 8000544:	4610      	mov	r0, r2
 8000546:	e6fb      	b.n	8000340 <__udivmoddi4+0x90>
 8000548:	4548      	cmp	r0, r9
 800054a:	d2a9      	bcs.n	80004a0 <__udivmoddi4+0x1f0>
 800054c:	ebb9 0802 	subs.w	r8, r9, r2
 8000550:	eb65 0e0c 	sbc.w	lr, r5, ip
 8000554:	3b01      	subs	r3, #1
 8000556:	e7a3      	b.n	80004a0 <__udivmoddi4+0x1f0>
 8000558:	4645      	mov	r5, r8
 800055a:	e7ea      	b.n	8000532 <__udivmoddi4+0x282>
 800055c:	462b      	mov	r3, r5
 800055e:	e794      	b.n	800048a <__udivmoddi4+0x1da>
 8000560:	4640      	mov	r0, r8
 8000562:	e7d1      	b.n	8000508 <__udivmoddi4+0x258>
 8000564:	46d0      	mov	r8, sl
 8000566:	e77b      	b.n	8000460 <__udivmoddi4+0x1b0>
 8000568:	3d02      	subs	r5, #2
 800056a:	4462      	add	r2, ip
 800056c:	e732      	b.n	80003d4 <__udivmoddi4+0x124>
 800056e:	4608      	mov	r0, r1
 8000570:	e70a      	b.n	8000388 <__udivmoddi4+0xd8>
 8000572:	4464      	add	r4, ip
 8000574:	3802      	subs	r0, #2
 8000576:	e742      	b.n	80003fe <__udivmoddi4+0x14e>

08000578 <__aeabi_idiv0>:
 8000578:	4770      	bx	lr
 800057a:	bf00      	nop

0800057c <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 800057c:	b580      	push	{r7, lr}
 800057e:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000580:	f000 ffe4 	bl	800154c <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000584:	f000 f818 	bl	80005b8 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000588:	f000 f8d2 	bl	8000730 <MX_GPIO_Init>
  MX_DMA_Init();
 800058c:	f000 f8a8 	bl	80006e0 <MX_DMA_Init>
  MX_USART3_UART_Init();
 8000590:	f000 f87c 	bl	800068c <MX_USART3_UART_Init>
  MX_LWIP_Init();
 8000594:	f007 faaa 	bl	8007aec <MX_LWIP_Init>
  MX_USB_DEVICE_Init();
 8000598:	f017 f8b8 	bl	801770c <MX_USB_DEVICE_Init>

  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while(gnetif.ip_addr.addr == 0)
 800059c:	e001      	b.n	80005a2 <main+0x26>
  {
	  MX_LWIP_Process();
 800059e:	f007 faf7 	bl	8007b90 <MX_LWIP_Process>
  while(gnetif.ip_addr.addr == 0)
 80005a2:	4b04      	ldr	r3, [pc, #16]	; (80005b4 <main+0x38>)
 80005a4:	685b      	ldr	r3, [r3, #4]
 80005a6:	2b00      	cmp	r3, #0
 80005a8:	d0f9      	beq.n	800059e <main+0x22>
  }

  tcp_client_init();
 80005aa:	f000 fceb 	bl	8000f84 <tcp_client_init>
  while (1)
  {
	  MX_LWIP_Process();
 80005ae:	f007 faef 	bl	8007b90 <MX_LWIP_Process>
 80005b2:	e7fc      	b.n	80005ae <main+0x32>
 80005b4:	200002d8 	.word	0x200002d8

080005b8 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80005b8:	b580      	push	{r7, lr}
 80005ba:	b094      	sub	sp, #80	; 0x50
 80005bc:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80005be:	f107 0320 	add.w	r3, r7, #32
 80005c2:	2230      	movs	r2, #48	; 0x30
 80005c4:	2100      	movs	r1, #0
 80005c6:	4618      	mov	r0, r3
 80005c8:	f017 ffc3 	bl	8018552 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80005cc:	f107 030c 	add.w	r3, r7, #12
 80005d0:	2200      	movs	r2, #0
 80005d2:	601a      	str	r2, [r3, #0]
 80005d4:	605a      	str	r2, [r3, #4]
 80005d6:	609a      	str	r2, [r3, #8]
 80005d8:	60da      	str	r2, [r3, #12]
 80005da:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 80005dc:	2300      	movs	r3, #0
 80005de:	60bb      	str	r3, [r7, #8]
 80005e0:	4b28      	ldr	r3, [pc, #160]	; (8000684 <SystemClock_Config+0xcc>)
 80005e2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80005e4:	4a27      	ldr	r2, [pc, #156]	; (8000684 <SystemClock_Config+0xcc>)
 80005e6:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80005ea:	6413      	str	r3, [r2, #64]	; 0x40
 80005ec:	4b25      	ldr	r3, [pc, #148]	; (8000684 <SystemClock_Config+0xcc>)
 80005ee:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80005f0:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80005f4:	60bb      	str	r3, [r7, #8]
 80005f6:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 80005f8:	2300      	movs	r3, #0
 80005fa:	607b      	str	r3, [r7, #4]
 80005fc:	4b22      	ldr	r3, [pc, #136]	; (8000688 <SystemClock_Config+0xd0>)
 80005fe:	681b      	ldr	r3, [r3, #0]
 8000600:	4a21      	ldr	r2, [pc, #132]	; (8000688 <SystemClock_Config+0xd0>)
 8000602:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000606:	6013      	str	r3, [r2, #0]
 8000608:	4b1f      	ldr	r3, [pc, #124]	; (8000688 <SystemClock_Config+0xd0>)
 800060a:	681b      	ldr	r3, [r3, #0]
 800060c:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000610:	607b      	str	r3, [r7, #4]
 8000612:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8000614:	2301      	movs	r3, #1
 8000616:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8000618:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 800061c:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800061e:	2302      	movs	r3, #2
 8000620:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8000622:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8000626:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 25;
 8000628:	2319      	movs	r3, #25
 800062a:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 336;
 800062c:	f44f 73a8 	mov.w	r3, #336	; 0x150
 8000630:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8000632:	2302      	movs	r3, #2
 8000634:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 7;
 8000636:	2307      	movs	r3, #7
 8000638:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800063a:	f107 0320 	add.w	r3, r7, #32
 800063e:	4618      	mov	r0, r3
 8000640:	f004 fa50 	bl	8004ae4 <HAL_RCC_OscConfig>
 8000644:	4603      	mov	r3, r0
 8000646:	2b00      	cmp	r3, #0
 8000648:	d001      	beq.n	800064e <SystemClock_Config+0x96>
  {
    Error_Handler();
 800064a:	f000 f8c3 	bl	80007d4 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800064e:	230f      	movs	r3, #15
 8000650:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000652:	2302      	movs	r3, #2
 8000654:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000656:	2300      	movs	r3, #0
 8000658:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 800065a:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 800065e:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 8000660:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000664:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 8000666:	f107 030c 	add.w	r3, r7, #12
 800066a:	2105      	movs	r1, #5
 800066c:	4618      	mov	r0, r3
 800066e:	f004 fcb1 	bl	8004fd4 <HAL_RCC_ClockConfig>
 8000672:	4603      	mov	r3, r0
 8000674:	2b00      	cmp	r3, #0
 8000676:	d001      	beq.n	800067c <SystemClock_Config+0xc4>
  {
    Error_Handler();
 8000678:	f000 f8ac 	bl	80007d4 <Error_Handler>
  }
}
 800067c:	bf00      	nop
 800067e:	3750      	adds	r7, #80	; 0x50
 8000680:	46bd      	mov	sp, r7
 8000682:	bd80      	pop	{r7, pc}
 8000684:	40023800 	.word	0x40023800
 8000688:	40007000 	.word	0x40007000

0800068c <MX_USART3_UART_Init>:
  * @brief USART3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART3_UART_Init(void)
{
 800068c:	b580      	push	{r7, lr}
 800068e:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 8000690:	4b11      	ldr	r3, [pc, #68]	; (80006d8 <MX_USART3_UART_Init+0x4c>)
 8000692:	4a12      	ldr	r2, [pc, #72]	; (80006dc <MX_USART3_UART_Init+0x50>)
 8000694:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 115200;
 8000696:	4b10      	ldr	r3, [pc, #64]	; (80006d8 <MX_USART3_UART_Init+0x4c>)
 8000698:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 800069c:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 800069e:	4b0e      	ldr	r3, [pc, #56]	; (80006d8 <MX_USART3_UART_Init+0x4c>)
 80006a0:	2200      	movs	r2, #0
 80006a2:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 80006a4:	4b0c      	ldr	r3, [pc, #48]	; (80006d8 <MX_USART3_UART_Init+0x4c>)
 80006a6:	2200      	movs	r2, #0
 80006a8:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 80006aa:	4b0b      	ldr	r3, [pc, #44]	; (80006d8 <MX_USART3_UART_Init+0x4c>)
 80006ac:	2200      	movs	r2, #0
 80006ae:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 80006b0:	4b09      	ldr	r3, [pc, #36]	; (80006d8 <MX_USART3_UART_Init+0x4c>)
 80006b2:	220c      	movs	r2, #12
 80006b4:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80006b6:	4b08      	ldr	r3, [pc, #32]	; (80006d8 <MX_USART3_UART_Init+0x4c>)
 80006b8:	2200      	movs	r2, #0
 80006ba:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 80006bc:	4b06      	ldr	r3, [pc, #24]	; (80006d8 <MX_USART3_UART_Init+0x4c>)
 80006be:	2200      	movs	r2, #0
 80006c0:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart3) != HAL_OK)
 80006c2:	4805      	ldr	r0, [pc, #20]	; (80006d8 <MX_USART3_UART_Init+0x4c>)
 80006c4:	f004 fe66 	bl	8005394 <HAL_UART_Init>
 80006c8:	4603      	mov	r3, r0
 80006ca:	2b00      	cmp	r3, #0
 80006cc:	d001      	beq.n	80006d2 <MX_USART3_UART_Init+0x46>
  {
    Error_Handler();
 80006ce:	f000 f881 	bl	80007d4 <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 80006d2:	bf00      	nop
 80006d4:	bd80      	pop	{r7, pc}
 80006d6:	bf00      	nop
 80006d8:	20000194 	.word	0x20000194
 80006dc:	40004800 	.word	0x40004800

080006e0 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 80006e0:	b580      	push	{r7, lr}
 80006e2:	b082      	sub	sp, #8
 80006e4:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 80006e6:	2300      	movs	r3, #0
 80006e8:	607b      	str	r3, [r7, #4]
 80006ea:	4b10      	ldr	r3, [pc, #64]	; (800072c <MX_DMA_Init+0x4c>)
 80006ec:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80006ee:	4a0f      	ldr	r2, [pc, #60]	; (800072c <MX_DMA_Init+0x4c>)
 80006f0:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 80006f4:	6313      	str	r3, [r2, #48]	; 0x30
 80006f6:	4b0d      	ldr	r3, [pc, #52]	; (800072c <MX_DMA_Init+0x4c>)
 80006f8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80006fa:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80006fe:	607b      	str	r3, [r7, #4]
 8000700:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA1_Stream1_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream1_IRQn, 0, 0);
 8000702:	2200      	movs	r2, #0
 8000704:	2100      	movs	r1, #0
 8000706:	200c      	movs	r0, #12
 8000708:	f001 f891 	bl	800182e <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream1_IRQn);
 800070c:	200c      	movs	r0, #12
 800070e:	f001 f8aa 	bl	8001866 <HAL_NVIC_EnableIRQ>
  /* DMA1_Stream3_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream3_IRQn, 0, 0);
 8000712:	2200      	movs	r2, #0
 8000714:	2100      	movs	r1, #0
 8000716:	200e      	movs	r0, #14
 8000718:	f001 f889 	bl	800182e <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream3_IRQn);
 800071c:	200e      	movs	r0, #14
 800071e:	f001 f8a2 	bl	8001866 <HAL_NVIC_EnableIRQ>

}
 8000722:	bf00      	nop
 8000724:	3708      	adds	r7, #8
 8000726:	46bd      	mov	sp, r7
 8000728:	bd80      	pop	{r7, pc}
 800072a:	bf00      	nop
 800072c:	40023800 	.word	0x40023800

08000730 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000730:	b480      	push	{r7}
 8000732:	b087      	sub	sp, #28
 8000734:	af00      	add	r7, sp, #0
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8000736:	2300      	movs	r3, #0
 8000738:	617b      	str	r3, [r7, #20]
 800073a:	4b25      	ldr	r3, [pc, #148]	; (80007d0 <MX_GPIO_Init+0xa0>)
 800073c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800073e:	4a24      	ldr	r2, [pc, #144]	; (80007d0 <MX_GPIO_Init+0xa0>)
 8000740:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000744:	6313      	str	r3, [r2, #48]	; 0x30
 8000746:	4b22      	ldr	r3, [pc, #136]	; (80007d0 <MX_GPIO_Init+0xa0>)
 8000748:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800074a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800074e:	617b      	str	r3, [r7, #20]
 8000750:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000752:	2300      	movs	r3, #0
 8000754:	613b      	str	r3, [r7, #16]
 8000756:	4b1e      	ldr	r3, [pc, #120]	; (80007d0 <MX_GPIO_Init+0xa0>)
 8000758:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800075a:	4a1d      	ldr	r2, [pc, #116]	; (80007d0 <MX_GPIO_Init+0xa0>)
 800075c:	f043 0304 	orr.w	r3, r3, #4
 8000760:	6313      	str	r3, [r2, #48]	; 0x30
 8000762:	4b1b      	ldr	r3, [pc, #108]	; (80007d0 <MX_GPIO_Init+0xa0>)
 8000764:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000766:	f003 0304 	and.w	r3, r3, #4
 800076a:	613b      	str	r3, [r7, #16]
 800076c:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800076e:	2300      	movs	r3, #0
 8000770:	60fb      	str	r3, [r7, #12]
 8000772:	4b17      	ldr	r3, [pc, #92]	; (80007d0 <MX_GPIO_Init+0xa0>)
 8000774:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000776:	4a16      	ldr	r2, [pc, #88]	; (80007d0 <MX_GPIO_Init+0xa0>)
 8000778:	f043 0301 	orr.w	r3, r3, #1
 800077c:	6313      	str	r3, [r2, #48]	; 0x30
 800077e:	4b14      	ldr	r3, [pc, #80]	; (80007d0 <MX_GPIO_Init+0xa0>)
 8000780:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000782:	f003 0301 	and.w	r3, r3, #1
 8000786:	60fb      	str	r3, [r7, #12]
 8000788:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800078a:	2300      	movs	r3, #0
 800078c:	60bb      	str	r3, [r7, #8]
 800078e:	4b10      	ldr	r3, [pc, #64]	; (80007d0 <MX_GPIO_Init+0xa0>)
 8000790:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000792:	4a0f      	ldr	r2, [pc, #60]	; (80007d0 <MX_GPIO_Init+0xa0>)
 8000794:	f043 0302 	orr.w	r3, r3, #2
 8000798:	6313      	str	r3, [r2, #48]	; 0x30
 800079a:	4b0d      	ldr	r3, [pc, #52]	; (80007d0 <MX_GPIO_Init+0xa0>)
 800079c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800079e:	f003 0302 	and.w	r3, r3, #2
 80007a2:	60bb      	str	r3, [r7, #8]
 80007a4:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 80007a6:	2300      	movs	r3, #0
 80007a8:	607b      	str	r3, [r7, #4]
 80007aa:	4b09      	ldr	r3, [pc, #36]	; (80007d0 <MX_GPIO_Init+0xa0>)
 80007ac:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80007ae:	4a08      	ldr	r2, [pc, #32]	; (80007d0 <MX_GPIO_Init+0xa0>)
 80007b0:	f043 0308 	orr.w	r3, r3, #8
 80007b4:	6313      	str	r3, [r2, #48]	; 0x30
 80007b6:	4b06      	ldr	r3, [pc, #24]	; (80007d0 <MX_GPIO_Init+0xa0>)
 80007b8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80007ba:	f003 0308 	and.w	r3, r3, #8
 80007be:	607b      	str	r3, [r7, #4]
 80007c0:	687b      	ldr	r3, [r7, #4]

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 80007c2:	bf00      	nop
 80007c4:	371c      	adds	r7, #28
 80007c6:	46bd      	mov	sp, r7
 80007c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80007cc:	4770      	bx	lr
 80007ce:	bf00      	nop
 80007d0:	40023800 	.word	0x40023800

080007d4 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80007d4:	b480      	push	{r7}
 80007d6:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting special-purpose register PRIMASK.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80007d8:	b672      	cpsid	i
}
 80007da:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80007dc:	e7fe      	b.n	80007dc <Error_Handler+0x8>
	...

080007e0 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80007e0:	b480      	push	{r7}
 80007e2:	b083      	sub	sp, #12
 80007e4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80007e6:	2300      	movs	r3, #0
 80007e8:	607b      	str	r3, [r7, #4]
 80007ea:	4b10      	ldr	r3, [pc, #64]	; (800082c <HAL_MspInit+0x4c>)
 80007ec:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80007ee:	4a0f      	ldr	r2, [pc, #60]	; (800082c <HAL_MspInit+0x4c>)
 80007f0:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80007f4:	6453      	str	r3, [r2, #68]	; 0x44
 80007f6:	4b0d      	ldr	r3, [pc, #52]	; (800082c <HAL_MspInit+0x4c>)
 80007f8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80007fa:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80007fe:	607b      	str	r3, [r7, #4]
 8000800:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000802:	2300      	movs	r3, #0
 8000804:	603b      	str	r3, [r7, #0]
 8000806:	4b09      	ldr	r3, [pc, #36]	; (800082c <HAL_MspInit+0x4c>)
 8000808:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800080a:	4a08      	ldr	r2, [pc, #32]	; (800082c <HAL_MspInit+0x4c>)
 800080c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000810:	6413      	str	r3, [r2, #64]	; 0x40
 8000812:	4b06      	ldr	r3, [pc, #24]	; (800082c <HAL_MspInit+0x4c>)
 8000814:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000816:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800081a:	603b      	str	r3, [r7, #0]
 800081c:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800081e:	bf00      	nop
 8000820:	370c      	adds	r7, #12
 8000822:	46bd      	mov	sp, r7
 8000824:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000828:	4770      	bx	lr
 800082a:	bf00      	nop
 800082c:	40023800 	.word	0x40023800

08000830 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8000830:	b580      	push	{r7, lr}
 8000832:	b08a      	sub	sp, #40	; 0x28
 8000834:	af00      	add	r7, sp, #0
 8000836:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000838:	f107 0314 	add.w	r3, r7, #20
 800083c:	2200      	movs	r2, #0
 800083e:	601a      	str	r2, [r3, #0]
 8000840:	605a      	str	r2, [r3, #4]
 8000842:	609a      	str	r2, [r3, #8]
 8000844:	60da      	str	r2, [r3, #12]
 8000846:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART3)
 8000848:	687b      	ldr	r3, [r7, #4]
 800084a:	681b      	ldr	r3, [r3, #0]
 800084c:	4a4c      	ldr	r2, [pc, #304]	; (8000980 <HAL_UART_MspInit+0x150>)
 800084e:	4293      	cmp	r3, r2
 8000850:	f040 8091 	bne.w	8000976 <HAL_UART_MspInit+0x146>
  {
  /* USER CODE BEGIN USART3_MspInit 0 */

  /* USER CODE END USART3_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART3_CLK_ENABLE();
 8000854:	2300      	movs	r3, #0
 8000856:	613b      	str	r3, [r7, #16]
 8000858:	4b4a      	ldr	r3, [pc, #296]	; (8000984 <HAL_UART_MspInit+0x154>)
 800085a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800085c:	4a49      	ldr	r2, [pc, #292]	; (8000984 <HAL_UART_MspInit+0x154>)
 800085e:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8000862:	6413      	str	r3, [r2, #64]	; 0x40
 8000864:	4b47      	ldr	r3, [pc, #284]	; (8000984 <HAL_UART_MspInit+0x154>)
 8000866:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000868:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800086c:	613b      	str	r3, [r7, #16]
 800086e:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOD_CLK_ENABLE();
 8000870:	2300      	movs	r3, #0
 8000872:	60fb      	str	r3, [r7, #12]
 8000874:	4b43      	ldr	r3, [pc, #268]	; (8000984 <HAL_UART_MspInit+0x154>)
 8000876:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000878:	4a42      	ldr	r2, [pc, #264]	; (8000984 <HAL_UART_MspInit+0x154>)
 800087a:	f043 0308 	orr.w	r3, r3, #8
 800087e:	6313      	str	r3, [r2, #48]	; 0x30
 8000880:	4b40      	ldr	r3, [pc, #256]	; (8000984 <HAL_UART_MspInit+0x154>)
 8000882:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000884:	f003 0308 	and.w	r3, r3, #8
 8000888:	60fb      	str	r3, [r7, #12]
 800088a:	68fb      	ldr	r3, [r7, #12]
    /**USART3 GPIO Configuration
    PD8     ------> USART3_TX
    PD9     ------> USART3_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 800088c:	f44f 7340 	mov.w	r3, #768	; 0x300
 8000890:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000892:	2302      	movs	r3, #2
 8000894:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000896:	2300      	movs	r3, #0
 8000898:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800089a:	2303      	movs	r3, #3
 800089c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 800089e:	2307      	movs	r3, #7
 80008a0:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 80008a2:	f107 0314 	add.w	r3, r7, #20
 80008a6:	4619      	mov	r1, r3
 80008a8:	4837      	ldr	r0, [pc, #220]	; (8000988 <HAL_UART_MspInit+0x158>)
 80008aa:	f002 fd2d 	bl	8003308 <HAL_GPIO_Init>

    /* USART3 DMA Init */
    /* USART3_RX Init */
    hdma_usart3_rx.Instance = DMA1_Stream1;
 80008ae:	4b37      	ldr	r3, [pc, #220]	; (800098c <HAL_UART_MspInit+0x15c>)
 80008b0:	4a37      	ldr	r2, [pc, #220]	; (8000990 <HAL_UART_MspInit+0x160>)
 80008b2:	601a      	str	r2, [r3, #0]
    hdma_usart3_rx.Init.Channel = DMA_CHANNEL_4;
 80008b4:	4b35      	ldr	r3, [pc, #212]	; (800098c <HAL_UART_MspInit+0x15c>)
 80008b6:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 80008ba:	605a      	str	r2, [r3, #4]
    hdma_usart3_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 80008bc:	4b33      	ldr	r3, [pc, #204]	; (800098c <HAL_UART_MspInit+0x15c>)
 80008be:	2200      	movs	r2, #0
 80008c0:	609a      	str	r2, [r3, #8]
    hdma_usart3_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 80008c2:	4b32      	ldr	r3, [pc, #200]	; (800098c <HAL_UART_MspInit+0x15c>)
 80008c4:	2200      	movs	r2, #0
 80008c6:	60da      	str	r2, [r3, #12]
    hdma_usart3_rx.Init.MemInc = DMA_MINC_ENABLE;
 80008c8:	4b30      	ldr	r3, [pc, #192]	; (800098c <HAL_UART_MspInit+0x15c>)
 80008ca:	f44f 6280 	mov.w	r2, #1024	; 0x400
 80008ce:	611a      	str	r2, [r3, #16]
    hdma_usart3_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 80008d0:	4b2e      	ldr	r3, [pc, #184]	; (800098c <HAL_UART_MspInit+0x15c>)
 80008d2:	2200      	movs	r2, #0
 80008d4:	615a      	str	r2, [r3, #20]
    hdma_usart3_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 80008d6:	4b2d      	ldr	r3, [pc, #180]	; (800098c <HAL_UART_MspInit+0x15c>)
 80008d8:	2200      	movs	r2, #0
 80008da:	619a      	str	r2, [r3, #24]
    hdma_usart3_rx.Init.Mode = DMA_NORMAL;
 80008dc:	4b2b      	ldr	r3, [pc, #172]	; (800098c <HAL_UART_MspInit+0x15c>)
 80008de:	2200      	movs	r2, #0
 80008e0:	61da      	str	r2, [r3, #28]
    hdma_usart3_rx.Init.Priority = DMA_PRIORITY_LOW;
 80008e2:	4b2a      	ldr	r3, [pc, #168]	; (800098c <HAL_UART_MspInit+0x15c>)
 80008e4:	2200      	movs	r2, #0
 80008e6:	621a      	str	r2, [r3, #32]
    hdma_usart3_rx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 80008e8:	4b28      	ldr	r3, [pc, #160]	; (800098c <HAL_UART_MspInit+0x15c>)
 80008ea:	2200      	movs	r2, #0
 80008ec:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_usart3_rx) != HAL_OK)
 80008ee:	4827      	ldr	r0, [pc, #156]	; (800098c <HAL_UART_MspInit+0x15c>)
 80008f0:	f000 ffd4 	bl	800189c <HAL_DMA_Init>
 80008f4:	4603      	mov	r3, r0
 80008f6:	2b00      	cmp	r3, #0
 80008f8:	d001      	beq.n	80008fe <HAL_UART_MspInit+0xce>
    {
      Error_Handler();
 80008fa:	f7ff ff6b 	bl	80007d4 <Error_Handler>
    }

    __HAL_LINKDMA(huart,hdmarx,hdma_usart3_rx);
 80008fe:	687b      	ldr	r3, [r7, #4]
 8000900:	4a22      	ldr	r2, [pc, #136]	; (800098c <HAL_UART_MspInit+0x15c>)
 8000902:	63da      	str	r2, [r3, #60]	; 0x3c
 8000904:	4a21      	ldr	r2, [pc, #132]	; (800098c <HAL_UART_MspInit+0x15c>)
 8000906:	687b      	ldr	r3, [r7, #4]
 8000908:	6393      	str	r3, [r2, #56]	; 0x38

    /* USART3_TX Init */
    hdma_usart3_tx.Instance = DMA1_Stream3;
 800090a:	4b22      	ldr	r3, [pc, #136]	; (8000994 <HAL_UART_MspInit+0x164>)
 800090c:	4a22      	ldr	r2, [pc, #136]	; (8000998 <HAL_UART_MspInit+0x168>)
 800090e:	601a      	str	r2, [r3, #0]
    hdma_usart3_tx.Init.Channel = DMA_CHANNEL_4;
 8000910:	4b20      	ldr	r3, [pc, #128]	; (8000994 <HAL_UART_MspInit+0x164>)
 8000912:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8000916:	605a      	str	r2, [r3, #4]
    hdma_usart3_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8000918:	4b1e      	ldr	r3, [pc, #120]	; (8000994 <HAL_UART_MspInit+0x164>)
 800091a:	2240      	movs	r2, #64	; 0x40
 800091c:	609a      	str	r2, [r3, #8]
    hdma_usart3_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 800091e:	4b1d      	ldr	r3, [pc, #116]	; (8000994 <HAL_UART_MspInit+0x164>)
 8000920:	2200      	movs	r2, #0
 8000922:	60da      	str	r2, [r3, #12]
    hdma_usart3_tx.Init.MemInc = DMA_MINC_ENABLE;
 8000924:	4b1b      	ldr	r3, [pc, #108]	; (8000994 <HAL_UART_MspInit+0x164>)
 8000926:	f44f 6280 	mov.w	r2, #1024	; 0x400
 800092a:	611a      	str	r2, [r3, #16]
    hdma_usart3_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 800092c:	4b19      	ldr	r3, [pc, #100]	; (8000994 <HAL_UART_MspInit+0x164>)
 800092e:	2200      	movs	r2, #0
 8000930:	615a      	str	r2, [r3, #20]
    hdma_usart3_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8000932:	4b18      	ldr	r3, [pc, #96]	; (8000994 <HAL_UART_MspInit+0x164>)
 8000934:	2200      	movs	r2, #0
 8000936:	619a      	str	r2, [r3, #24]
    hdma_usart3_tx.Init.Mode = DMA_NORMAL;
 8000938:	4b16      	ldr	r3, [pc, #88]	; (8000994 <HAL_UART_MspInit+0x164>)
 800093a:	2200      	movs	r2, #0
 800093c:	61da      	str	r2, [r3, #28]
    hdma_usart3_tx.Init.Priority = DMA_PRIORITY_LOW;
 800093e:	4b15      	ldr	r3, [pc, #84]	; (8000994 <HAL_UART_MspInit+0x164>)
 8000940:	2200      	movs	r2, #0
 8000942:	621a      	str	r2, [r3, #32]
    hdma_usart3_tx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8000944:	4b13      	ldr	r3, [pc, #76]	; (8000994 <HAL_UART_MspInit+0x164>)
 8000946:	2200      	movs	r2, #0
 8000948:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_usart3_tx) != HAL_OK)
 800094a:	4812      	ldr	r0, [pc, #72]	; (8000994 <HAL_UART_MspInit+0x164>)
 800094c:	f000 ffa6 	bl	800189c <HAL_DMA_Init>
 8000950:	4603      	mov	r3, r0
 8000952:	2b00      	cmp	r3, #0
 8000954:	d001      	beq.n	800095a <HAL_UART_MspInit+0x12a>
    {
      Error_Handler();
 8000956:	f7ff ff3d 	bl	80007d4 <Error_Handler>
    }

    __HAL_LINKDMA(huart,hdmatx,hdma_usart3_tx);
 800095a:	687b      	ldr	r3, [r7, #4]
 800095c:	4a0d      	ldr	r2, [pc, #52]	; (8000994 <HAL_UART_MspInit+0x164>)
 800095e:	639a      	str	r2, [r3, #56]	; 0x38
 8000960:	4a0c      	ldr	r2, [pc, #48]	; (8000994 <HAL_UART_MspInit+0x164>)
 8000962:	687b      	ldr	r3, [r7, #4]
 8000964:	6393      	str	r3, [r2, #56]	; 0x38

    /* USART3 interrupt Init */
    HAL_NVIC_SetPriority(USART3_IRQn, 0, 0);
 8000966:	2200      	movs	r2, #0
 8000968:	2100      	movs	r1, #0
 800096a:	2027      	movs	r0, #39	; 0x27
 800096c:	f000 ff5f 	bl	800182e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART3_IRQn);
 8000970:	2027      	movs	r0, #39	; 0x27
 8000972:	f000 ff78 	bl	8001866 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }

}
 8000976:	bf00      	nop
 8000978:	3728      	adds	r7, #40	; 0x28
 800097a:	46bd      	mov	sp, r7
 800097c:	bd80      	pop	{r7, pc}
 800097e:	bf00      	nop
 8000980:	40004800 	.word	0x40004800
 8000984:	40023800 	.word	0x40023800
 8000988:	40020c00 	.word	0x40020c00
 800098c:	200001dc 	.word	0x200001dc
 8000990:	40026028 	.word	0x40026028
 8000994:	2000023c 	.word	0x2000023c
 8000998:	40026058 	.word	0x40026058

0800099c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 800099c:	b480      	push	{r7}
 800099e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 80009a0:	e7fe      	b.n	80009a0 <NMI_Handler+0x4>

080009a2 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80009a2:	b480      	push	{r7}
 80009a4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80009a6:	e7fe      	b.n	80009a6 <HardFault_Handler+0x4>

080009a8 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80009a8:	b480      	push	{r7}
 80009aa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80009ac:	e7fe      	b.n	80009ac <MemManage_Handler+0x4>

080009ae <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80009ae:	b480      	push	{r7}
 80009b0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80009b2:	e7fe      	b.n	80009b2 <BusFault_Handler+0x4>

080009b4 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80009b4:	b480      	push	{r7}
 80009b6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80009b8:	e7fe      	b.n	80009b8 <UsageFault_Handler+0x4>

080009ba <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80009ba:	b480      	push	{r7}
 80009bc:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80009be:	bf00      	nop
 80009c0:	46bd      	mov	sp, r7
 80009c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80009c6:	4770      	bx	lr

080009c8 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80009c8:	b480      	push	{r7}
 80009ca:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80009cc:	bf00      	nop
 80009ce:	46bd      	mov	sp, r7
 80009d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80009d4:	4770      	bx	lr

080009d6 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80009d6:	b480      	push	{r7}
 80009d8:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80009da:	bf00      	nop
 80009dc:	46bd      	mov	sp, r7
 80009de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80009e2:	4770      	bx	lr

080009e4 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80009e4:	b580      	push	{r7, lr}
 80009e6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80009e8:	f000 fe02 	bl	80015f0 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80009ec:	bf00      	nop
 80009ee:	bd80      	pop	{r7, pc}

080009f0 <DMA1_Stream1_IRQHandler>:

/**
  * @brief This function handles DMA1 stream1 global interrupt.
  */
void DMA1_Stream1_IRQHandler(void)
{
 80009f0:	b580      	push	{r7, lr}
 80009f2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream1_IRQn 0 */

  /* USER CODE END DMA1_Stream1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart3_rx);
 80009f4:	4802      	ldr	r0, [pc, #8]	; (8000a00 <DMA1_Stream1_IRQHandler+0x10>)
 80009f6:	f001 f8e9 	bl	8001bcc <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream1_IRQn 1 */

  /* USER CODE END DMA1_Stream1_IRQn 1 */
}
 80009fa:	bf00      	nop
 80009fc:	bd80      	pop	{r7, pc}
 80009fe:	bf00      	nop
 8000a00:	200001dc 	.word	0x200001dc

08000a04 <DMA1_Stream3_IRQHandler>:

/**
  * @brief This function handles DMA1 stream3 global interrupt.
  */
void DMA1_Stream3_IRQHandler(void)
{
 8000a04:	b580      	push	{r7, lr}
 8000a06:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream3_IRQn 0 */

  /* USER CODE END DMA1_Stream3_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart3_tx);
 8000a08:	4802      	ldr	r0, [pc, #8]	; (8000a14 <DMA1_Stream3_IRQHandler+0x10>)
 8000a0a:	f001 f8df 	bl	8001bcc <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream3_IRQn 1 */

  /* USER CODE END DMA1_Stream3_IRQn 1 */
}
 8000a0e:	bf00      	nop
 8000a10:	bd80      	pop	{r7, pc}
 8000a12:	bf00      	nop
 8000a14:	2000023c 	.word	0x2000023c

08000a18 <USART3_IRQHandler>:

/**
  * @brief This function handles USART3 global interrupt.
  */
void USART3_IRQHandler(void)
{
 8000a18:	b580      	push	{r7, lr}
 8000a1a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART3_IRQn 0 */

  /* USER CODE END USART3_IRQn 0 */
  HAL_UART_IRQHandler(&huart3);
 8000a1c:	4802      	ldr	r0, [pc, #8]	; (8000a28 <USART3_IRQHandler+0x10>)
 8000a1e:	f004 fd79 	bl	8005514 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART3_IRQn 1 */

  /* USER CODE END USART3_IRQn 1 */
}
 8000a22:	bf00      	nop
 8000a24:	bd80      	pop	{r7, pc}
 8000a26:	bf00      	nop
 8000a28:	20000194 	.word	0x20000194

08000a2c <OTG_FS_IRQHandler>:

/**
  * @brief This function handles USB On The Go FS global interrupt.
  */
void OTG_FS_IRQHandler(void)
{
 8000a2c:	b580      	push	{r7, lr}
 8000a2e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN OTG_FS_IRQn 0 */

  /* USER CODE END OTG_FS_IRQn 0 */
  HAL_PCD_IRQHandler(&hpcd_USB_OTG_FS);
 8000a30:	4802      	ldr	r0, [pc, #8]	; (8000a3c <OTG_FS_IRQHandler+0x10>)
 8000a32:	f002 ff49 	bl	80038c8 <HAL_PCD_IRQHandler>
  /* USER CODE BEGIN OTG_FS_IRQn 1 */

  /* USER CODE END OTG_FS_IRQn 1 */
}
 8000a36:	bf00      	nop
 8000a38:	bd80      	pop	{r7, pc}
 8000a3a:	bf00      	nop
 8000a3c:	20009f94 	.word	0x20009f94

08000a40 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8000a40:	b480      	push	{r7}
 8000a42:	af00      	add	r7, sp, #0
  return 1;
 8000a44:	2301      	movs	r3, #1
}
 8000a46:	4618      	mov	r0, r3
 8000a48:	46bd      	mov	sp, r7
 8000a4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a4e:	4770      	bx	lr

08000a50 <_kill>:

int _kill(int pid, int sig)
{
 8000a50:	b480      	push	{r7}
 8000a52:	b083      	sub	sp, #12
 8000a54:	af00      	add	r7, sp, #0
 8000a56:	6078      	str	r0, [r7, #4]
 8000a58:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 8000a5a:	4b05      	ldr	r3, [pc, #20]	; (8000a70 <_kill+0x20>)
 8000a5c:	2216      	movs	r2, #22
 8000a5e:	601a      	str	r2, [r3, #0]
  return -1;
 8000a60:	f04f 33ff 	mov.w	r3, #4294967295
}
 8000a64:	4618      	mov	r0, r3
 8000a66:	370c      	adds	r7, #12
 8000a68:	46bd      	mov	sp, r7
 8000a6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a6e:	4770      	bx	lr
 8000a70:	2000a7d4 	.word	0x2000a7d4

08000a74 <_exit>:

void _exit (int status)
{
 8000a74:	b580      	push	{r7, lr}
 8000a76:	b082      	sub	sp, #8
 8000a78:	af00      	add	r7, sp, #0
 8000a7a:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 8000a7c:	f04f 31ff 	mov.w	r1, #4294967295
 8000a80:	6878      	ldr	r0, [r7, #4]
 8000a82:	f7ff ffe5 	bl	8000a50 <_kill>
  while (1) {}    /* Make sure we hang here */
 8000a86:	e7fe      	b.n	8000a86 <_exit+0x12>

08000a88 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8000a88:	b580      	push	{r7, lr}
 8000a8a:	b086      	sub	sp, #24
 8000a8c:	af00      	add	r7, sp, #0
 8000a8e:	60f8      	str	r0, [r7, #12]
 8000a90:	60b9      	str	r1, [r7, #8]
 8000a92:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000a94:	2300      	movs	r3, #0
 8000a96:	617b      	str	r3, [r7, #20]
 8000a98:	e00a      	b.n	8000ab0 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 8000a9a:	f3af 8000 	nop.w
 8000a9e:	4601      	mov	r1, r0
 8000aa0:	68bb      	ldr	r3, [r7, #8]
 8000aa2:	1c5a      	adds	r2, r3, #1
 8000aa4:	60ba      	str	r2, [r7, #8]
 8000aa6:	b2ca      	uxtb	r2, r1
 8000aa8:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000aaa:	697b      	ldr	r3, [r7, #20]
 8000aac:	3301      	adds	r3, #1
 8000aae:	617b      	str	r3, [r7, #20]
 8000ab0:	697a      	ldr	r2, [r7, #20]
 8000ab2:	687b      	ldr	r3, [r7, #4]
 8000ab4:	429a      	cmp	r2, r3
 8000ab6:	dbf0      	blt.n	8000a9a <_read+0x12>
  }

  return len;
 8000ab8:	687b      	ldr	r3, [r7, #4]
}
 8000aba:	4618      	mov	r0, r3
 8000abc:	3718      	adds	r7, #24
 8000abe:	46bd      	mov	sp, r7
 8000ac0:	bd80      	pop	{r7, pc}

08000ac2 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8000ac2:	b580      	push	{r7, lr}
 8000ac4:	b086      	sub	sp, #24
 8000ac6:	af00      	add	r7, sp, #0
 8000ac8:	60f8      	str	r0, [r7, #12]
 8000aca:	60b9      	str	r1, [r7, #8]
 8000acc:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000ace:	2300      	movs	r3, #0
 8000ad0:	617b      	str	r3, [r7, #20]
 8000ad2:	e009      	b.n	8000ae8 <_write+0x26>
  {
    __io_putchar(*ptr++);
 8000ad4:	68bb      	ldr	r3, [r7, #8]
 8000ad6:	1c5a      	adds	r2, r3, #1
 8000ad8:	60ba      	str	r2, [r7, #8]
 8000ada:	781b      	ldrb	r3, [r3, #0]
 8000adc:	4618      	mov	r0, r3
 8000ade:	f3af 8000 	nop.w
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000ae2:	697b      	ldr	r3, [r7, #20]
 8000ae4:	3301      	adds	r3, #1
 8000ae6:	617b      	str	r3, [r7, #20]
 8000ae8:	697a      	ldr	r2, [r7, #20]
 8000aea:	687b      	ldr	r3, [r7, #4]
 8000aec:	429a      	cmp	r2, r3
 8000aee:	dbf1      	blt.n	8000ad4 <_write+0x12>
  }
  return len;
 8000af0:	687b      	ldr	r3, [r7, #4]
}
 8000af2:	4618      	mov	r0, r3
 8000af4:	3718      	adds	r7, #24
 8000af6:	46bd      	mov	sp, r7
 8000af8:	bd80      	pop	{r7, pc}

08000afa <_close>:

int _close(int file)
{
 8000afa:	b480      	push	{r7}
 8000afc:	b083      	sub	sp, #12
 8000afe:	af00      	add	r7, sp, #0
 8000b00:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 8000b02:	f04f 33ff 	mov.w	r3, #4294967295
}
 8000b06:	4618      	mov	r0, r3
 8000b08:	370c      	adds	r7, #12
 8000b0a:	46bd      	mov	sp, r7
 8000b0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b10:	4770      	bx	lr

08000b12 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8000b12:	b480      	push	{r7}
 8000b14:	b083      	sub	sp, #12
 8000b16:	af00      	add	r7, sp, #0
 8000b18:	6078      	str	r0, [r7, #4]
 8000b1a:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 8000b1c:	683b      	ldr	r3, [r7, #0]
 8000b1e:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8000b22:	605a      	str	r2, [r3, #4]
  return 0;
 8000b24:	2300      	movs	r3, #0
}
 8000b26:	4618      	mov	r0, r3
 8000b28:	370c      	adds	r7, #12
 8000b2a:	46bd      	mov	sp, r7
 8000b2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b30:	4770      	bx	lr

08000b32 <_isatty>:

int _isatty(int file)
{
 8000b32:	b480      	push	{r7}
 8000b34:	b083      	sub	sp, #12
 8000b36:	af00      	add	r7, sp, #0
 8000b38:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 8000b3a:	2301      	movs	r3, #1
}
 8000b3c:	4618      	mov	r0, r3
 8000b3e:	370c      	adds	r7, #12
 8000b40:	46bd      	mov	sp, r7
 8000b42:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b46:	4770      	bx	lr

08000b48 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8000b48:	b480      	push	{r7}
 8000b4a:	b085      	sub	sp, #20
 8000b4c:	af00      	add	r7, sp, #0
 8000b4e:	60f8      	str	r0, [r7, #12]
 8000b50:	60b9      	str	r1, [r7, #8]
 8000b52:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 8000b54:	2300      	movs	r3, #0
}
 8000b56:	4618      	mov	r0, r3
 8000b58:	3714      	adds	r7, #20
 8000b5a:	46bd      	mov	sp, r7
 8000b5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b60:	4770      	bx	lr
	...

08000b64 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8000b64:	b480      	push	{r7}
 8000b66:	b087      	sub	sp, #28
 8000b68:	af00      	add	r7, sp, #0
 8000b6a:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8000b6c:	4a14      	ldr	r2, [pc, #80]	; (8000bc0 <_sbrk+0x5c>)
 8000b6e:	4b15      	ldr	r3, [pc, #84]	; (8000bc4 <_sbrk+0x60>)
 8000b70:	1ad3      	subs	r3, r2, r3
 8000b72:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8000b74:	697b      	ldr	r3, [r7, #20]
 8000b76:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8000b78:	4b13      	ldr	r3, [pc, #76]	; (8000bc8 <_sbrk+0x64>)
 8000b7a:	681b      	ldr	r3, [r3, #0]
 8000b7c:	2b00      	cmp	r3, #0
 8000b7e:	d102      	bne.n	8000b86 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8000b80:	4b11      	ldr	r3, [pc, #68]	; (8000bc8 <_sbrk+0x64>)
 8000b82:	4a12      	ldr	r2, [pc, #72]	; (8000bcc <_sbrk+0x68>)
 8000b84:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8000b86:	4b10      	ldr	r3, [pc, #64]	; (8000bc8 <_sbrk+0x64>)
 8000b88:	681a      	ldr	r2, [r3, #0]
 8000b8a:	687b      	ldr	r3, [r7, #4]
 8000b8c:	4413      	add	r3, r2
 8000b8e:	693a      	ldr	r2, [r7, #16]
 8000b90:	429a      	cmp	r2, r3
 8000b92:	d205      	bcs.n	8000ba0 <_sbrk+0x3c>
  {
    errno = ENOMEM;
 8000b94:	4b0e      	ldr	r3, [pc, #56]	; (8000bd0 <_sbrk+0x6c>)
 8000b96:	220c      	movs	r2, #12
 8000b98:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8000b9a:	f04f 33ff 	mov.w	r3, #4294967295
 8000b9e:	e009      	b.n	8000bb4 <_sbrk+0x50>
  }

  prev_heap_end = __sbrk_heap_end;
 8000ba0:	4b09      	ldr	r3, [pc, #36]	; (8000bc8 <_sbrk+0x64>)
 8000ba2:	681b      	ldr	r3, [r3, #0]
 8000ba4:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8000ba6:	4b08      	ldr	r3, [pc, #32]	; (8000bc8 <_sbrk+0x64>)
 8000ba8:	681a      	ldr	r2, [r3, #0]
 8000baa:	687b      	ldr	r3, [r7, #4]
 8000bac:	4413      	add	r3, r2
 8000bae:	4a06      	ldr	r2, [pc, #24]	; (8000bc8 <_sbrk+0x64>)
 8000bb0:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8000bb2:	68fb      	ldr	r3, [r7, #12]
}
 8000bb4:	4618      	mov	r0, r3
 8000bb6:	371c      	adds	r7, #28
 8000bb8:	46bd      	mov	sp, r7
 8000bba:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000bbe:	4770      	bx	lr
 8000bc0:	20020000 	.word	0x20020000
 8000bc4:	00000400 	.word	0x00000400
 8000bc8:	200002a4 	.word	0x200002a4
 8000bcc:	2000a7e8 	.word	0x2000a7e8
 8000bd0:	2000a7d4 	.word	0x2000a7d4

08000bd4 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000bd4:	b480      	push	{r7}
 8000bd6:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8000bd8:	4b06      	ldr	r3, [pc, #24]	; (8000bf4 <SystemInit+0x20>)
 8000bda:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8000bde:	4a05      	ldr	r2, [pc, #20]	; (8000bf4 <SystemInit+0x20>)
 8000be0:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8000be4:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000be8:	bf00      	nop
 8000bea:	46bd      	mov	sp, r7
 8000bec:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000bf0:	4770      	bx	lr
 8000bf2:	bf00      	nop
 8000bf4:	e000ed00 	.word	0xe000ed00

08000bf8 <tcp_client_send>:
static void tcp_client_connectin_close(struct tcp_pcb *newpcb, struct tcp_client_struct *es);
static void tcp_client_handler(struct tcp_pcb *newpcb, struct tcp_client_struct *es);
static void input_config_data();

static void tcp_client_send(struct tcp_pcb *newpcb, struct tcp_client_struct *es)
{
 8000bf8:	b580      	push	{r7, lr}
 8000bfa:	b086      	sub	sp, #24
 8000bfc:	af00      	add	r7, sp, #0
 8000bfe:	6078      	str	r0, [r7, #4]
 8000c00:	6039      	str	r1, [r7, #0]
	struct pbuf *ptrBuf;
	err_t wr_err = ERR_OK;
 8000c02:	2300      	movs	r3, #0
 8000c04:	75fb      	strb	r3, [r7, #23]


	while ((wr_err == ERR_OK) && (es->p != NULL) && (es->p->len <= newpcb->snd_buf))
 8000c06:	e02d      	b.n	8000c64 <tcp_client_send+0x6c>
	{
		ptrBuf = es->p;
 8000c08:	683b      	ldr	r3, [r7, #0]
 8000c0a:	685b      	ldr	r3, [r3, #4]
 8000c0c:	613b      	str	r3, [r7, #16]

		wr_err = tcp_write(newpcb, ptrBuf->payload, ptrBuf->len, TCP_WRITE_FLAG_COPY);
 8000c0e:	693b      	ldr	r3, [r7, #16]
 8000c10:	6859      	ldr	r1, [r3, #4]
 8000c12:	693b      	ldr	r3, [r7, #16]
 8000c14:	895a      	ldrh	r2, [r3, #10]
 8000c16:	2301      	movs	r3, #1
 8000c18:	6878      	ldr	r0, [r7, #4]
 8000c1a:	f00f ffeb 	bl	8010bf4 <tcp_write>
 8000c1e:	4603      	mov	r3, r0
 8000c20:	75fb      	strb	r3, [r7, #23]

		if (wr_err == ERR_OK)
 8000c22:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8000c26:	2b00      	cmp	r3, #0
 8000c28:	d11c      	bne.n	8000c64 <tcp_client_send+0x6c>
		{
			u16_t len;
			int cnt;

			len = ptrBuf->len;
 8000c2a:	693b      	ldr	r3, [r7, #16]
 8000c2c:	895b      	ldrh	r3, [r3, #10]
 8000c2e:	81fb      	strh	r3, [r7, #14]

			es->p = ptrBuf->next;
 8000c30:	693b      	ldr	r3, [r7, #16]
 8000c32:	681a      	ldr	r2, [r3, #0]
 8000c34:	683b      	ldr	r3, [r7, #0]
 8000c36:	605a      	str	r2, [r3, #4]

			if (es->p != NULL)
 8000c38:	683b      	ldr	r3, [r7, #0]
 8000c3a:	685b      	ldr	r3, [r3, #4]
 8000c3c:	2b00      	cmp	r3, #0
 8000c3e:	d004      	beq.n	8000c4a <tcp_client_send+0x52>
			{
				pbuf_ref(es->p);
 8000c40:	683b      	ldr	r3, [r7, #0]
 8000c42:	685b      	ldr	r3, [r3, #4]
 8000c44:	4618      	mov	r0, r3
 8000c46:	f00b fa1b 	bl	800c080 <pbuf_ref>

			}

			do
			{
				cnt = pbuf_free(ptrBuf);
 8000c4a:	6938      	ldr	r0, [r7, #16]
 8000c4c:	f00b f978 	bl	800bf40 <pbuf_free>
 8000c50:	4603      	mov	r3, r0
 8000c52:	60bb      	str	r3, [r7, #8]

			}
			while(cnt == 0);
 8000c54:	68bb      	ldr	r3, [r7, #8]
 8000c56:	2b00      	cmp	r3, #0
 8000c58:	d0f7      	beq.n	8000c4a <tcp_client_send+0x52>

			tcp_recved(newpcb, len);
 8000c5a:	89fb      	ldrh	r3, [r7, #14]
 8000c5c:	4619      	mov	r1, r3
 8000c5e:	6878      	ldr	r0, [r7, #4]
 8000c60:	f00c f8c6 	bl	800cdf0 <tcp_recved>
	while ((wr_err == ERR_OK) && (es->p != NULL) && (es->p->len <= newpcb->snd_buf))
 8000c64:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8000c68:	2b00      	cmp	r3, #0
 8000c6a:	d10b      	bne.n	8000c84 <tcp_client_send+0x8c>
 8000c6c:	683b      	ldr	r3, [r7, #0]
 8000c6e:	685b      	ldr	r3, [r3, #4]
 8000c70:	2b00      	cmp	r3, #0
 8000c72:	d007      	beq.n	8000c84 <tcp_client_send+0x8c>
 8000c74:	683b      	ldr	r3, [r7, #0]
 8000c76:	685b      	ldr	r3, [r3, #4]
 8000c78:	895a      	ldrh	r2, [r3, #10]
 8000c7a:	687b      	ldr	r3, [r7, #4]
 8000c7c:	f8b3 3064 	ldrh.w	r3, [r3, #100]	; 0x64
 8000c80:	429a      	cmp	r2, r3
 8000c82:	d9c1      	bls.n	8000c08 <tcp_client_send+0x10>

		}

	}

}
 8000c84:	bf00      	nop
 8000c86:	3718      	adds	r7, #24
 8000c88:	46bd      	mov	sp, r7
 8000c8a:	bd80      	pop	{r7, pc}

08000c8c <tcp_client_handler>:

static void tcp_client_handler(struct tcp_pcb *newpcb, struct tcp_client_struct *es)
{
 8000c8c:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8000c90:	b085      	sub	sp, #20
 8000c92:	af00      	add	r7, sp, #0
 8000c94:	6078      	str	r0, [r7, #4]
 8000c96:	6039      	str	r1, [r7, #0]
 8000c98:	466b      	mov	r3, sp
 8000c9a:	461e      	mov	r6, r3
	//struct tcp_client_struct *esTX;

	char bufRX[es->p->len];
 8000c9c:	683b      	ldr	r3, [r7, #0]
 8000c9e:	685b      	ldr	r3, [r3, #4]
 8000ca0:	8959      	ldrh	r1, [r3, #10]
 8000ca2:	460b      	mov	r3, r1
 8000ca4:	3b01      	subs	r3, #1
 8000ca6:	60fb      	str	r3, [r7, #12]
 8000ca8:	b28b      	uxth	r3, r1
 8000caa:	2200      	movs	r2, #0
 8000cac:	4698      	mov	r8, r3
 8000cae:	4691      	mov	r9, r2
 8000cb0:	f04f 0200 	mov.w	r2, #0
 8000cb4:	f04f 0300 	mov.w	r3, #0
 8000cb8:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8000cbc:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8000cc0:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8000cc4:	b28b      	uxth	r3, r1
 8000cc6:	2200      	movs	r2, #0
 8000cc8:	461c      	mov	r4, r3
 8000cca:	4615      	mov	r5, r2
 8000ccc:	f04f 0200 	mov.w	r2, #0
 8000cd0:	f04f 0300 	mov.w	r3, #0
 8000cd4:	00eb      	lsls	r3, r5, #3
 8000cd6:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8000cda:	00e2      	lsls	r2, r4, #3
 8000cdc:	460b      	mov	r3, r1
 8000cde:	3307      	adds	r3, #7
 8000ce0:	08db      	lsrs	r3, r3, #3
 8000ce2:	00db      	lsls	r3, r3, #3
 8000ce4:	ebad 0d03 	sub.w	sp, sp, r3
 8000ce8:	466b      	mov	r3, sp
 8000cea:	3300      	adds	r3, #0
 8000cec:	60bb      	str	r3, [r7, #8]

	memset((void *)bufRX,'\0', es->p->len);
 8000cee:	683b      	ldr	r3, [r7, #0]
 8000cf0:	685b      	ldr	r3, [r3, #4]
 8000cf2:	895b      	ldrh	r3, [r3, #10]
 8000cf4:	461a      	mov	r2, r3
 8000cf6:	2100      	movs	r1, #0
 8000cf8:	68b8      	ldr	r0, [r7, #8]
 8000cfa:	f017 fc2a 	bl	8018552 <memset>

	strncpy (bufRX, es->p->payload, es->p->len);
 8000cfe:	683b      	ldr	r3, [r7, #0]
 8000d00:	685b      	ldr	r3, [r3, #4]
 8000d02:	6859      	ldr	r1, [r3, #4]
 8000d04:	683b      	ldr	r3, [r7, #0]
 8000d06:	685b      	ldr	r3, [r3, #4]
 8000d08:	895b      	ldrh	r3, [r3, #10]
 8000d0a:	461a      	mov	r2, r3
 8000d0c:	68b8      	ldr	r0, [r7, #8]
 8000d0e:	f017 fc28 	bl	8018562 <strncpy>

	strncpy (tcpRX, es->p->payload, es->p->len);
 8000d12:	683b      	ldr	r3, [r7, #0]
 8000d14:	685b      	ldr	r3, [r3, #4]
 8000d16:	6859      	ldr	r1, [r3, #4]
 8000d18:	683b      	ldr	r3, [r7, #0]
 8000d1a:	685b      	ldr	r3, [r3, #4]
 8000d1c:	895b      	ldrh	r3, [r3, #10]
 8000d1e:	461a      	mov	r2, r3
 8000d20:	4809      	ldr	r0, [pc, #36]	; (8000d48 <tcp_client_handler+0xbc>)
 8000d22:	f017 fc1e 	bl	8018562 <strncpy>

	HAL_UART_Transmit_DMA(&huart3, bufRX, es->p->len);
 8000d26:	683b      	ldr	r3, [r7, #0]
 8000d28:	685b      	ldr	r3, [r3, #4]
 8000d2a:	895b      	ldrh	r3, [r3, #10]
 8000d2c:	461a      	mov	r2, r3
 8000d2e:	68b9      	ldr	r1, [r7, #8]
 8000d30:	4806      	ldr	r0, [pc, #24]	; (8000d4c <tcp_client_handler+0xc0>)
 8000d32:	f004 fb7f 	bl	8005434 <HAL_UART_Transmit_DMA>

	//tcp_client_send(newpcb, es);

	//pbuf_free(es->p);

	esBuff = es;
 8000d36:	4a06      	ldr	r2, [pc, #24]	; (8000d50 <tcp_client_handler+0xc4>)
 8000d38:	683b      	ldr	r3, [r7, #0]
 8000d3a:	6013      	str	r3, [r2, #0]
 8000d3c:	46b5      	mov	sp, r6




}
 8000d3e:	bf00      	nop
 8000d40:	3714      	adds	r7, #20
 8000d42:	46bd      	mov	sp, r7
 8000d44:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8000d48:	200002b0 	.word	0x200002b0
 8000d4c:	20000194 	.word	0x20000194
 8000d50:	200002c4 	.word	0x200002c4

08000d54 <tcp_client_connectin_close>:

static void tcp_client_connectin_close(struct tcp_pcb *newpcb, struct tcp_client_struct *es)
{
 8000d54:	b580      	push	{r7, lr}
 8000d56:	b082      	sub	sp, #8
 8000d58:	af00      	add	r7, sp, #0
 8000d5a:	6078      	str	r0, [r7, #4]
 8000d5c:	6039      	str	r1, [r7, #0]

	tcp_arg(newpcb, NULL);
 8000d5e:	2100      	movs	r1, #0
 8000d60:	6878      	ldr	r0, [r7, #4]
 8000d62:	f00d f81d 	bl	800dda0 <tcp_arg>
	tcp_recv(newpcb, NULL);
 8000d66:	2100      	movs	r1, #0
 8000d68:	6878      	ldr	r0, [r7, #4]
 8000d6a:	f00d f82b 	bl	800ddc4 <tcp_recv>
	tcp_sent(newpcb, NULL);
 8000d6e:	2100      	movs	r1, #0
 8000d70:	6878      	ldr	r0, [r7, #4]
 8000d72:	f00d f849 	bl	800de08 <tcp_sent>
	tcp_poll(newpcb, NULL, 0);
 8000d76:	2200      	movs	r2, #0
 8000d78:	2100      	movs	r1, #0
 8000d7a:	6878      	ldr	r0, [r7, #4]
 8000d7c:	f00d f888 	bl	800de90 <tcp_poll>
	tcp_err(newpcb, NULL);
 8000d80:	2100      	movs	r1, #0
 8000d82:	6878      	ldr	r0, [r7, #4]
 8000d84:	f00d f862 	bl	800de4c <tcp_err>

	mem_free(es);
 8000d88:	6838      	ldr	r0, [r7, #0]
 8000d8a:	f009 fef1 	bl	800ab70 <mem_free>

	tcp_close(newpcb);
 8000d8e:	6878      	ldr	r0, [r7, #4]
 8000d90:	f00b fede 	bl	800cb50 <tcp_close>

}
 8000d94:	bf00      	nop
 8000d96:	3708      	adds	r7, #8
 8000d98:	46bd      	mov	sp, r7
 8000d9a:	bd80      	pop	{r7, pc}

08000d9c <input_config_data>:

static void input_config_data(struct entry_struct *newEntry, char *msg, int msgSize, int del, const int byteN)
{
 8000d9c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000da0:	b08c      	sub	sp, #48	; 0x30
 8000da2:	af00      	add	r7, sp, #0
 8000da4:	60f8      	str	r0, [r7, #12]
 8000da6:	60b9      	str	r1, [r7, #8]
 8000da8:	607a      	str	r2, [r7, #4]
 8000daa:	603b      	str	r3, [r7, #0]
 8000dac:	466b      	mov	r3, sp
 8000dae:	469a      	mov	sl, r3

	char NumStr = newEntry->NumStr;//REMOTE_IP_ADDRESS{Num = 0,Num = 1,Num = 2,Num = 3}, one Num of REMOTE_IP_ADDRESS is three strCnt of UserRxBufferFS
 8000db0:	68fb      	ldr	r3, [r7, #12]
 8000db2:	781b      	ldrb	r3, [r3, #0]
 8000db4:	77bb      	strb	r3, [r7, #30]
	char NumColum = newEntry->NumColum;
 8000db6:	68fb      	ldr	r3, [r7, #12]
 8000db8:	785b      	ldrb	r3, [r3, #1]
 8000dba:	777b      	strb	r3, [r7, #29]
	uint8_t *pStore = newEntry->pstore;
 8000dbc:	68fb      	ldr	r3, [r7, #12]
 8000dbe:	685b      	ldr	r3, [r3, #4]
 8000dc0:	62fb      	str	r3, [r7, #44]	; 0x2c

	int Num = 0;
 8000dc2:	2300      	movs	r3, #0
 8000dc4:	62bb      	str	r3, [r7, #40]	; 0x28
	int strCntRX = 0;//UserRxBufferFS{strCnt = 0,strCnt = 1,strCnt = 2,strCnt = 3,strCnt = ...}
 8000dc6:	2300      	movs	r3, #0
 8000dc8:	627b      	str	r3, [r7, #36]	; 0x24
	char ipBuffchr[NumColum];
 8000dca:	7f7e      	ldrb	r6, [r7, #29]
 8000dcc:	4633      	mov	r3, r6
 8000dce:	3b01      	subs	r3, #1
 8000dd0:	61bb      	str	r3, [r7, #24]
 8000dd2:	b2f3      	uxtb	r3, r6
 8000dd4:	2200      	movs	r2, #0
 8000dd6:	4698      	mov	r8, r3
 8000dd8:	4691      	mov	r9, r2
 8000dda:	f04f 0200 	mov.w	r2, #0
 8000dde:	f04f 0300 	mov.w	r3, #0
 8000de2:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8000de6:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8000dea:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8000dee:	b2f3      	uxtb	r3, r6
 8000df0:	2200      	movs	r2, #0
 8000df2:	461c      	mov	r4, r3
 8000df4:	4615      	mov	r5, r2
 8000df6:	f04f 0200 	mov.w	r2, #0
 8000dfa:	f04f 0300 	mov.w	r3, #0
 8000dfe:	00eb      	lsls	r3, r5, #3
 8000e00:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8000e04:	00e2      	lsls	r2, r4, #3
 8000e06:	4633      	mov	r3, r6
 8000e08:	3307      	adds	r3, #7
 8000e0a:	08db      	lsrs	r3, r3, #3
 8000e0c:	00db      	lsls	r3, r3, #3
 8000e0e:	ebad 0d03 	sub.w	sp, sp, r3
 8000e12:	466b      	mov	r3, sp
 8000e14:	3300      	adds	r3, #0
 8000e16:	617b      	str	r3, [r7, #20]
	int ipBuffint = 0;
 8000e18:	2300      	movs	r3, #0
 8000e1a:	613b      	str	r3, [r7, #16]
	int strCntBuff = 0;
 8000e1c:	2300      	movs	r3, #0
 8000e1e:	623b      	str	r3, [r7, #32]

	memset(pStore, '\0', NumStr);
 8000e20:	7fbb      	ldrb	r3, [r7, #30]
 8000e22:	461a      	mov	r2, r3
 8000e24:	2100      	movs	r1, #0
 8000e26:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8000e28:	f017 fb93 	bl	8018552 <memset>
	memset(ipBuffchr, '\0', NumColum);
 8000e2c:	7f7b      	ldrb	r3, [r7, #29]
 8000e2e:	461a      	mov	r2, r3
 8000e30:	2100      	movs	r1, #0
 8000e32:	6978      	ldr	r0, [r7, #20]
 8000e34:	f017 fb8d 	bl	8018552 <memset>

	HAL_Delay(del*1000);
 8000e38:	683b      	ldr	r3, [r7, #0]
 8000e3a:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8000e3e:	fb02 f303 	mul.w	r3, r2, r3
 8000e42:	4618      	mov	r0, r3
 8000e44:	f000 fbf4 	bl	8001630 <HAL_Delay>

#ifdef COM_PORT
	CDC_Transmit_FS((uint8_t *)msg, (uint16_t)msgSize);
 8000e48:	687b      	ldr	r3, [r7, #4]
 8000e4a:	b29b      	uxth	r3, r3
 8000e4c:	4619      	mov	r1, r3
 8000e4e:	68b8      	ldr	r0, [r7, #8]
 8000e50:	f016 fd2e 	bl	80178b0 <CDC_Transmit_FS>
#else
	HAL_UART_Transmit_DMA(&huart3, (uint8_t *)msg, (uint16_t)msgSize);
#endif

	while (byteNum < byteN + 1)
 8000e54:	bf00      	nop
 8000e56:	4b48      	ldr	r3, [pc, #288]	; (8000f78 <input_config_data+0x1dc>)
 8000e58:	681b      	ldr	r3, [r3, #0]
 8000e5a:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 8000e5c:	429a      	cmp	r2, r3
 8000e5e:	dafa      	bge.n	8000e56 <input_config_data+0xba>
	{
		;
	}

	if (wr)
 8000e60:	4b46      	ldr	r3, [pc, #280]	; (8000f7c <input_config_data+0x1e0>)
 8000e62:	781b      	ldrb	r3, [r3, #0]
 8000e64:	2b00      	cmp	r3, #0
 8000e66:	f000 8081 	beq.w	8000f6c <input_config_data+0x1d0>
	{
		while (Num < NumStr)
 8000e6a:	e054      	b.n	8000f16 <input_config_data+0x17a>
#else
				while ((char)RX_buff[strCntRX] != '.' & (char)RX_buff[strCntRX] != '\0' )
#endif
			{
#ifdef COM_PORT
				ipBuffchr[strCntBuff] = (char)UserRxBufferFS[strCntRX];
 8000e6c:	4a44      	ldr	r2, [pc, #272]	; (8000f80 <input_config_data+0x1e4>)
 8000e6e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000e70:	4413      	add	r3, r2
 8000e72:	7819      	ldrb	r1, [r3, #0]
 8000e74:	697a      	ldr	r2, [r7, #20]
 8000e76:	6a3b      	ldr	r3, [r7, #32]
 8000e78:	4413      	add	r3, r2
 8000e7a:	460a      	mov	r2, r1
 8000e7c:	701a      	strb	r2, [r3, #0]
#else
				ipBuffchr[strCntBuff] = (char)RX_buff[strCntRX];
#endif

				strCntRX++;
 8000e7e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000e80:	3301      	adds	r3, #1
 8000e82:	627b      	str	r3, [r7, #36]	; 0x24
				strCntBuff++;
 8000e84:	6a3b      	ldr	r3, [r7, #32]
 8000e86:	3301      	adds	r3, #1
 8000e88:	623b      	str	r3, [r7, #32]
			while ((char)UserRxBufferFS[strCntRX] != '.' & (char)UserRxBufferFS[strCntRX] != '\0' )
 8000e8a:	4a3d      	ldr	r2, [pc, #244]	; (8000f80 <input_config_data+0x1e4>)
 8000e8c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000e8e:	4413      	add	r3, r2
 8000e90:	781b      	ldrb	r3, [r3, #0]
 8000e92:	2b2e      	cmp	r3, #46	; 0x2e
 8000e94:	bf14      	ite	ne
 8000e96:	2301      	movne	r3, #1
 8000e98:	2300      	moveq	r3, #0
 8000e9a:	b2da      	uxtb	r2, r3
 8000e9c:	4938      	ldr	r1, [pc, #224]	; (8000f80 <input_config_data+0x1e4>)
 8000e9e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000ea0:	440b      	add	r3, r1
 8000ea2:	781b      	ldrb	r3, [r3, #0]
 8000ea4:	2b00      	cmp	r3, #0
 8000ea6:	bf14      	ite	ne
 8000ea8:	2301      	movne	r3, #1
 8000eaa:	2300      	moveq	r3, #0
 8000eac:	b2db      	uxtb	r3, r3
 8000eae:	4013      	ands	r3, r2
 8000eb0:	b2db      	uxtb	r3, r3
 8000eb2:	2b00      	cmp	r3, #0
 8000eb4:	d1da      	bne.n	8000e6c <input_config_data+0xd0>
			}

			strCntBuff = 0;
 8000eb6:	2300      	movs	r3, #0
 8000eb8:	623b      	str	r3, [r7, #32]
			strCntRX++;
 8000eba:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000ebc:	3301      	adds	r3, #1
 8000ebe:	627b      	str	r3, [r7, #36]	; 0x24


			for (char n = 0;n < NumColum;n++)
 8000ec0:	2300      	movs	r3, #0
 8000ec2:	77fb      	strb	r3, [r7, #31]
 8000ec4:	e00c      	b.n	8000ee0 <input_config_data+0x144>
			{
				ipBuffint |= (ipBuffchr[n] << 8*n);
 8000ec6:	7ffb      	ldrb	r3, [r7, #31]
 8000ec8:	697a      	ldr	r2, [r7, #20]
 8000eca:	5cd3      	ldrb	r3, [r2, r3]
 8000ecc:	461a      	mov	r2, r3
 8000ece:	7ffb      	ldrb	r3, [r7, #31]
 8000ed0:	00db      	lsls	r3, r3, #3
 8000ed2:	409a      	lsls	r2, r3
 8000ed4:	693b      	ldr	r3, [r7, #16]
 8000ed6:	4313      	orrs	r3, r2
 8000ed8:	613b      	str	r3, [r7, #16]
			for (char n = 0;n < NumColum;n++)
 8000eda:	7ffb      	ldrb	r3, [r7, #31]
 8000edc:	3301      	adds	r3, #1
 8000ede:	77fb      	strb	r3, [r7, #31]
 8000ee0:	7ffa      	ldrb	r2, [r7, #31]
 8000ee2:	7f7b      	ldrb	r3, [r7, #29]
 8000ee4:	429a      	cmp	r2, r3
 8000ee6:	d3ee      	bcc.n	8000ec6 <input_config_data+0x12a>


			}

			*pStore = atoi((char *)&ipBuffint);
 8000ee8:	f107 0310 	add.w	r3, r7, #16
 8000eec:	4618      	mov	r0, r3
 8000eee:	f017 f93b 	bl	8018168 <atoi>
 8000ef2:	4603      	mov	r3, r0
 8000ef4:	b2da      	uxtb	r2, r3
 8000ef6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8000ef8:	701a      	strb	r2, [r3, #0]

			pStore++;
 8000efa:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8000efc:	3301      	adds	r3, #1
 8000efe:	62fb      	str	r3, [r7, #44]	; 0x2c
			Num++;
 8000f00:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8000f02:	3301      	adds	r3, #1
 8000f04:	62bb      	str	r3, [r7, #40]	; 0x28

			memset(ipBuffchr, '\0', sizeof(ipBuffchr));
 8000f06:	4633      	mov	r3, r6
 8000f08:	461a      	mov	r2, r3
 8000f0a:	2100      	movs	r1, #0
 8000f0c:	6978      	ldr	r0, [r7, #20]
 8000f0e:	f017 fb20 	bl	8018552 <memset>
			ipBuffint = 0;
 8000f12:	2300      	movs	r3, #0
 8000f14:	613b      	str	r3, [r7, #16]
		while (Num < NumStr)
 8000f16:	7fbb      	ldrb	r3, [r7, #30]
 8000f18:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8000f1a:	429a      	cmp	r2, r3
 8000f1c:	dbb5      	blt.n	8000e8a <input_config_data+0xee>
		}

		wr = 0;
 8000f1e:	4b17      	ldr	r3, [pc, #92]	; (8000f7c <input_config_data+0x1e0>)
 8000f20:	2200      	movs	r2, #0
 8000f22:	701a      	strb	r2, [r3, #0]
#ifdef COM_PORT
		UserRxBufferFS[strCntRX-1] = '\n';
 8000f24:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000f26:	3b01      	subs	r3, #1
 8000f28:	4a15      	ldr	r2, [pc, #84]	; (8000f80 <input_config_data+0x1e4>)
 8000f2a:	210a      	movs	r1, #10
 8000f2c:	54d1      	strb	r1, [r2, r3]
		UserRxBufferFS[strCntRX] = '\r';
 8000f2e:	4a14      	ldr	r2, [pc, #80]	; (8000f80 <input_config_data+0x1e4>)
 8000f30:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000f32:	4413      	add	r3, r2
 8000f34:	220d      	movs	r2, #13
 8000f36:	701a      	strb	r2, [r3, #0]
		CDC_Transmit_FS((uint8_t *)UserRxBufferFS, (uint16_t) (strCntRX+2));
 8000f38:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000f3a:	b29b      	uxth	r3, r3
 8000f3c:	3302      	adds	r3, #2
 8000f3e:	b29b      	uxth	r3, r3
 8000f40:	4619      	mov	r1, r3
 8000f42:	480f      	ldr	r0, [pc, #60]	; (8000f80 <input_config_data+0x1e4>)
 8000f44:	f016 fcb4 	bl	80178b0 <CDC_Transmit_FS>
		memset(UserRxBufferFS, '\0', sizeof(UserRxBufferFS));
 8000f48:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8000f4c:	2100      	movs	r1, #0
 8000f4e:	480c      	ldr	r0, [pc, #48]	; (8000f80 <input_config_data+0x1e4>)
 8000f50:	f017 faff 	bl	8018552 <memset>
		HAL_UART_Transmit_DMA(&huart3, (uint8_t *)RX_buff, (uint16_t) (strCntRX+2));
		HAL_Delay(10);
		memset(RX_buff, '\0', sizeof(RX_buff));
#endif

		memset(pStore, '\0', NumStr);
 8000f54:	7fbb      	ldrb	r3, [r7, #30]
 8000f56:	461a      	mov	r2, r3
 8000f58:	2100      	movs	r1, #0
 8000f5a:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8000f5c:	f017 faf9 	bl	8018552 <memset>
		memset(ipBuffchr, '\0', NumColum);
 8000f60:	7f7b      	ldrb	r3, [r7, #29]
 8000f62:	461a      	mov	r2, r3
 8000f64:	2100      	movs	r1, #0
 8000f66:	6978      	ldr	r0, [r7, #20]
 8000f68:	f017 faf3 	bl	8018552 <memset>
 8000f6c:	46d5      	mov	sp, sl

	}
}
 8000f6e:	bf00      	nop
 8000f70:	3730      	adds	r7, #48	; 0x30
 8000f72:	46bd      	mov	sp, r7
 8000f74:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000f78:	2000029c 	.word	0x2000029c
 8000f7c:	200002a0 	.word	0x200002a0
 8000f80:	20008d94 	.word	0x20008d94

08000f84 <tcp_client_init>:




void tcp_client_init(void)
{
 8000f84:	b580      	push	{r7, lr}
 8000f86:	b084      	sub	sp, #16
 8000f88:	af02      	add	r7, sp, #8

//	dhcp_set_struct(&gnetif, sdhcp);
//	dhcp_start(&gnetif);


	entry = (struct entry_struct *) mem_malloc(sizeof(struct entry_struct *));
 8000f8a:	2004      	movs	r0, #4
 8000f8c:	f009 ff56 	bl	800ae3c <mem_malloc>
 8000f90:	4603      	mov	r3, r0
 8000f92:	4a49      	ldr	r2, [pc, #292]	; (80010b8 <tcp_client_init+0x134>)
 8000f94:	6013      	str	r3, [r2, #0]



	entry->NumColum = 3;
 8000f96:	4b48      	ldr	r3, [pc, #288]	; (80010b8 <tcp_client_init+0x134>)
 8000f98:	681b      	ldr	r3, [r3, #0]
 8000f9a:	2203      	movs	r2, #3
 8000f9c:	705a      	strb	r2, [r3, #1]
	entry->NumStr = (char)sizeof(REMOTE_IP_ADDRESS);
 8000f9e:	4b46      	ldr	r3, [pc, #280]	; (80010b8 <tcp_client_init+0x134>)
 8000fa0:	681b      	ldr	r3, [r3, #0]
 8000fa2:	2204      	movs	r2, #4
 8000fa4:	701a      	strb	r2, [r3, #0]
	entry->pstore = (uint8_t *)&REMOTE_IP_ADDRESS;
 8000fa6:	4b44      	ldr	r3, [pc, #272]	; (80010b8 <tcp_client_init+0x134>)
 8000fa8:	681b      	ldr	r3, [r3, #0]
 8000faa:	4a44      	ldr	r2, [pc, #272]	; (80010bc <tcp_client_init+0x138>)
 8000fac:	605a      	str	r2, [r3, #4]


	input_config_data(entry, (char *)"Enter IP address: ", strlen("Enter IP address: "), 7, byteNum);
 8000fae:	4b42      	ldr	r3, [pc, #264]	; (80010b8 <tcp_client_init+0x134>)
 8000fb0:	6818      	ldr	r0, [r3, #0]
 8000fb2:	4b43      	ldr	r3, [pc, #268]	; (80010c0 <tcp_client_init+0x13c>)
 8000fb4:	681b      	ldr	r3, [r3, #0]
 8000fb6:	9300      	str	r3, [sp, #0]
 8000fb8:	2307      	movs	r3, #7
 8000fba:	2212      	movs	r2, #18
 8000fbc:	4941      	ldr	r1, [pc, #260]	; (80010c4 <tcp_client_init+0x140>)
 8000fbe:	f7ff feed 	bl	8000d9c <input_config_data>



	IP4_ADDR(&remote_ipaddr, REMOTE_IP_ADDRESS[0], REMOTE_IP_ADDRESS[1], REMOTE_IP_ADDRESS[2], REMOTE_IP_ADDRESS[3]);
 8000fc2:	4b3e      	ldr	r3, [pc, #248]	; (80010bc <tcp_client_init+0x138>)
 8000fc4:	781b      	ldrb	r3, [r3, #0]
 8000fc6:	061a      	lsls	r2, r3, #24
 8000fc8:	4b3c      	ldr	r3, [pc, #240]	; (80010bc <tcp_client_init+0x138>)
 8000fca:	785b      	ldrb	r3, [r3, #1]
 8000fcc:	041b      	lsls	r3, r3, #16
 8000fce:	431a      	orrs	r2, r3
 8000fd0:	4b3a      	ldr	r3, [pc, #232]	; (80010bc <tcp_client_init+0x138>)
 8000fd2:	789b      	ldrb	r3, [r3, #2]
 8000fd4:	021b      	lsls	r3, r3, #8
 8000fd6:	4313      	orrs	r3, r2
 8000fd8:	4a38      	ldr	r2, [pc, #224]	; (80010bc <tcp_client_init+0x138>)
 8000fda:	78d2      	ldrb	r2, [r2, #3]
 8000fdc:	4313      	orrs	r3, r2
 8000fde:	061a      	lsls	r2, r3, #24
 8000fe0:	4b36      	ldr	r3, [pc, #216]	; (80010bc <tcp_client_init+0x138>)
 8000fe2:	781b      	ldrb	r3, [r3, #0]
 8000fe4:	0619      	lsls	r1, r3, #24
 8000fe6:	4b35      	ldr	r3, [pc, #212]	; (80010bc <tcp_client_init+0x138>)
 8000fe8:	785b      	ldrb	r3, [r3, #1]
 8000fea:	041b      	lsls	r3, r3, #16
 8000fec:	4319      	orrs	r1, r3
 8000fee:	4b33      	ldr	r3, [pc, #204]	; (80010bc <tcp_client_init+0x138>)
 8000ff0:	789b      	ldrb	r3, [r3, #2]
 8000ff2:	021b      	lsls	r3, r3, #8
 8000ff4:	430b      	orrs	r3, r1
 8000ff6:	4931      	ldr	r1, [pc, #196]	; (80010bc <tcp_client_init+0x138>)
 8000ff8:	78c9      	ldrb	r1, [r1, #3]
 8000ffa:	430b      	orrs	r3, r1
 8000ffc:	021b      	lsls	r3, r3, #8
 8000ffe:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 8001002:	431a      	orrs	r2, r3
 8001004:	4b2d      	ldr	r3, [pc, #180]	; (80010bc <tcp_client_init+0x138>)
 8001006:	781b      	ldrb	r3, [r3, #0]
 8001008:	0619      	lsls	r1, r3, #24
 800100a:	4b2c      	ldr	r3, [pc, #176]	; (80010bc <tcp_client_init+0x138>)
 800100c:	785b      	ldrb	r3, [r3, #1]
 800100e:	041b      	lsls	r3, r3, #16
 8001010:	4319      	orrs	r1, r3
 8001012:	4b2a      	ldr	r3, [pc, #168]	; (80010bc <tcp_client_init+0x138>)
 8001014:	789b      	ldrb	r3, [r3, #2]
 8001016:	021b      	lsls	r3, r3, #8
 8001018:	430b      	orrs	r3, r1
 800101a:	4928      	ldr	r1, [pc, #160]	; (80010bc <tcp_client_init+0x138>)
 800101c:	78c9      	ldrb	r1, [r1, #3]
 800101e:	430b      	orrs	r3, r1
 8001020:	0a1b      	lsrs	r3, r3, #8
 8001022:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 8001026:	431a      	orrs	r2, r3
 8001028:	4b24      	ldr	r3, [pc, #144]	; (80010bc <tcp_client_init+0x138>)
 800102a:	781b      	ldrb	r3, [r3, #0]
 800102c:	0619      	lsls	r1, r3, #24
 800102e:	4b23      	ldr	r3, [pc, #140]	; (80010bc <tcp_client_init+0x138>)
 8001030:	785b      	ldrb	r3, [r3, #1]
 8001032:	041b      	lsls	r3, r3, #16
 8001034:	4319      	orrs	r1, r3
 8001036:	4b21      	ldr	r3, [pc, #132]	; (80010bc <tcp_client_init+0x138>)
 8001038:	789b      	ldrb	r3, [r3, #2]
 800103a:	021b      	lsls	r3, r3, #8
 800103c:	430b      	orrs	r3, r1
 800103e:	491f      	ldr	r1, [pc, #124]	; (80010bc <tcp_client_init+0x138>)
 8001040:	78c9      	ldrb	r1, [r1, #3]
 8001042:	430b      	orrs	r3, r1
 8001044:	0e1b      	lsrs	r3, r3, #24
 8001046:	4313      	orrs	r3, r2
 8001048:	4a1f      	ldr	r2, [pc, #124]	; (80010c8 <tcp_client_init+0x144>)
 800104a:	6013      	str	r3, [r2, #0]

	entry->NumColum = 2;
 800104c:	4b1a      	ldr	r3, [pc, #104]	; (80010b8 <tcp_client_init+0x134>)
 800104e:	681b      	ldr	r3, [r3, #0]
 8001050:	2202      	movs	r2, #2
 8001052:	705a      	strb	r2, [r3, #1]
	entry->NumStr = (char)sizeof(REMOTE_PORT);
 8001054:	4b18      	ldr	r3, [pc, #96]	; (80010b8 <tcp_client_init+0x134>)
 8001056:	681b      	ldr	r3, [r3, #0]
 8001058:	2201      	movs	r2, #1
 800105a:	701a      	strb	r2, [r3, #0]
	entry->pstore = (uint8_t *)&REMOTE_PORT;
 800105c:	4b16      	ldr	r3, [pc, #88]	; (80010b8 <tcp_client_init+0x134>)
 800105e:	681b      	ldr	r3, [r3, #0]
 8001060:	4a1a      	ldr	r2, [pc, #104]	; (80010cc <tcp_client_init+0x148>)
 8001062:	605a      	str	r2, [r3, #4]

	input_config_data(entry, (char *)"Enter PORT: ", strlen("Enter PORT: "), 1, byteNum);
 8001064:	4b14      	ldr	r3, [pc, #80]	; (80010b8 <tcp_client_init+0x134>)
 8001066:	6818      	ldr	r0, [r3, #0]
 8001068:	4b15      	ldr	r3, [pc, #84]	; (80010c0 <tcp_client_init+0x13c>)
 800106a:	681b      	ldr	r3, [r3, #0]
 800106c:	9300      	str	r3, [sp, #0]
 800106e:	2301      	movs	r3, #1
 8001070:	220c      	movs	r2, #12
 8001072:	4917      	ldr	r1, [pc, #92]	; (80010d0 <tcp_client_init+0x14c>)
 8001074:	f7ff fe92 	bl	8000d9c <input_config_data>
//	memset(REMOTE_IP_ADDRESS, '\0', 4);
//	IP4_ADDR(&remote_ipaddr, REMOTE_IP_ADDRESS[0], REMOTE_IP_ADDRESS[1], REMOTE_IP_ADDRESS[2], REMOTE_IP_ADDRESS[3]);
//
//	REMOTE_PORT[0] = 0;

	cppcb = tcp_new();
 8001078:	f00c fe8a 	bl	800dd90 <tcp_new>
 800107c:	4603      	mov	r3, r0
 800107e:	4a15      	ldr	r2, [pc, #84]	; (80010d4 <tcp_client_init+0x150>)
 8001080:	6013      	str	r3, [r2, #0]

	if (cppcb != NULL)
 8001082:	4b14      	ldr	r3, [pc, #80]	; (80010d4 <tcp_client_init+0x150>)
 8001084:	681b      	ldr	r3, [r3, #0]
 8001086:	2b00      	cmp	r3, #0
 8001088:	d00b      	beq.n	80010a2 <tcp_client_init+0x11e>
	{
		ret_err = tcp_connect(cppcb, &remote_ipaddr, REMOTE_PORT[0], tcp_client_connect);
 800108a:	4b12      	ldr	r3, [pc, #72]	; (80010d4 <tcp_client_init+0x150>)
 800108c:	6818      	ldr	r0, [r3, #0]
 800108e:	4b0f      	ldr	r3, [pc, #60]	; (80010cc <tcp_client_init+0x148>)
 8001090:	781b      	ldrb	r3, [r3, #0]
 8001092:	b29a      	uxth	r2, r3
 8001094:	4b10      	ldr	r3, [pc, #64]	; (80010d8 <tcp_client_init+0x154>)
 8001096:	490c      	ldr	r1, [pc, #48]	; (80010c8 <tcp_client_init+0x144>)
 8001098:	f00b ff40 	bl	800cf1c <tcp_connect>
 800109c:	4603      	mov	r3, r0
 800109e:	71fb      	strb	r3, [r7, #7]
	else
	{
		memp_free(MEMP_TCP_PCB, cppcb);

	}
}
 80010a0:	e005      	b.n	80010ae <tcp_client_init+0x12a>
		memp_free(MEMP_TCP_PCB, cppcb);
 80010a2:	4b0c      	ldr	r3, [pc, #48]	; (80010d4 <tcp_client_init+0x150>)
 80010a4:	681b      	ldr	r3, [r3, #0]
 80010a6:	4619      	mov	r1, r3
 80010a8:	2001      	movs	r0, #1
 80010aa:	f00a f8c7 	bl	800b23c <memp_free>
}
 80010ae:	bf00      	nop
 80010b0:	3708      	adds	r7, #8
 80010b2:	46bd      	mov	sp, r7
 80010b4:	bd80      	pop	{r7, pc}
 80010b6:	bf00      	nop
 80010b8:	200002c0 	.word	0x200002c0
 80010bc:	200002a8 	.word	0x200002a8
 80010c0:	2000029c 	.word	0x2000029c
 80010c4:	080192f4 	.word	0x080192f4
 80010c8:	200002cc 	.word	0x200002cc
 80010cc:	200002ac 	.word	0x200002ac
 80010d0:	08019308 	.word	0x08019308
 80010d4:	200002c8 	.word	0x200002c8
 80010d8:	080010dd 	.word	0x080010dd

080010dc <tcp_client_connect>:

static err_t tcp_client_connect(void *arg, struct tcp_pcb *newpcb, err_t err)
{
 80010dc:	b580      	push	{r7, lr}
 80010de:	b086      	sub	sp, #24
 80010e0:	af00      	add	r7, sp, #0
 80010e2:	60f8      	str	r0, [r7, #12]
 80010e4:	60b9      	str	r1, [r7, #8]
 80010e6:	4613      	mov	r3, r2
 80010e8:	71fb      	strb	r3, [r7, #7]
	err_t ret_err;

	struct tcp_client_struct *es;

	es = (struct tcp_client_struct *)memp_malloc(sizeof(struct tcp_client_struct *));
 80010ea:	2004      	movs	r0, #4
 80010ec:	f00a f836 	bl	800b15c <memp_malloc>
 80010f0:	6138      	str	r0, [r7, #16]

//	es = (struct tcp_client_struct *)arg;

	if (es != NULL)
 80010f2:	693b      	ldr	r3, [r7, #16]
 80010f4:	2b00      	cmp	r3, #0
 80010f6:	d01f      	beq.n	8001138 <tcp_client_connect+0x5c>
	{

		es->p = NULL;
 80010f8:	693b      	ldr	r3, [r7, #16]
 80010fa:	2200      	movs	r2, #0
 80010fc:	605a      	str	r2, [r3, #4]
		es->pcb = newpcb;
 80010fe:	693b      	ldr	r3, [r7, #16]
 8001100:	68ba      	ldr	r2, [r7, #8]
 8001102:	609a      	str	r2, [r3, #8]
		es->state = ES_C_CONNECT;
 8001104:	693b      	ldr	r3, [r7, #16]
 8001106:	2201      	movs	r2, #1
 8001108:	701a      	strb	r2, [r3, #0]

		//*pwr = 1;

		tcp_arg(newpcb, es);
 800110a:	6939      	ldr	r1, [r7, #16]
 800110c:	68b8      	ldr	r0, [r7, #8]
 800110e:	f00c fe47 	bl	800dda0 <tcp_arg>

		tcp_recv(newpcb, tcp_client_recive);
 8001112:	490f      	ldr	r1, [pc, #60]	; (8001150 <tcp_client_connect+0x74>)
 8001114:	68b8      	ldr	r0, [r7, #8]
 8001116:	f00c fe55 	bl	800ddc4 <tcp_recv>

		tcp_err(newpcb, tcp_client_err);
 800111a:	490e      	ldr	r1, [pc, #56]	; (8001154 <tcp_client_connect+0x78>)
 800111c:	68b8      	ldr	r0, [r7, #8]
 800111e:	f00c fe95 	bl	800de4c <tcp_err>

		tcp_poll(newpcb, tcp_client_poll, 5);
 8001122:	2205      	movs	r2, #5
 8001124:	490c      	ldr	r1, [pc, #48]	; (8001158 <tcp_client_connect+0x7c>)
 8001126:	68b8      	ldr	r0, [r7, #8]
 8001128:	f00c feb2 	bl	800de90 <tcp_poll>

		esBuff = es;
 800112c:	4a0b      	ldr	r2, [pc, #44]	; (800115c <tcp_client_connect+0x80>)
 800112e:	693b      	ldr	r3, [r7, #16]
 8001130:	6013      	str	r3, [r2, #0]

		ret_err = ERR_OK;
 8001132:	2300      	movs	r3, #0
 8001134:	75fb      	strb	r3, [r7, #23]
 8001136:	e005      	b.n	8001144 <tcp_client_connect+0x68>

	}
	else
	{

		tcp_client_connectin_close(newpcb, es);
 8001138:	6939      	ldr	r1, [r7, #16]
 800113a:	68b8      	ldr	r0, [r7, #8]
 800113c:	f7ff fe0a 	bl	8000d54 <tcp_client_connectin_close>

		ret_err = ERR_MEM;
 8001140:	23ff      	movs	r3, #255	; 0xff
 8001142:	75fb      	strb	r3, [r7, #23]
	}

	return ret_err;
 8001144:	f997 3017 	ldrsb.w	r3, [r7, #23]

}
 8001148:	4618      	mov	r0, r3
 800114a:	3718      	adds	r7, #24
 800114c:	46bd      	mov	sp, r7
 800114e:	bd80      	pop	{r7, pc}
 8001150:	08001161 	.word	0x08001161
 8001154:	080012cd 	.word	0x080012cd
 8001158:	0800120d 	.word	0x0800120d
 800115c:	200002c4 	.word	0x200002c4

08001160 <tcp_client_recive>:
	return ret_err;

}

static err_t tcp_client_recive(void *arg, struct tcp_pcb *newpcb, struct pbuf *p, err_t err)
{
 8001160:	b580      	push	{r7, lr}
 8001162:	b086      	sub	sp, #24
 8001164:	af00      	add	r7, sp, #0
 8001166:	60f8      	str	r0, [r7, #12]
 8001168:	60b9      	str	r1, [r7, #8]
 800116a:	607a      	str	r2, [r7, #4]
 800116c:	70fb      	strb	r3, [r7, #3]
	err_t ret_err;
	struct tcp_client_struct *es;

	es = (struct tcp_client_struct *)arg;
 800116e:	68fb      	ldr	r3, [r7, #12]
 8001170:	613b      	str	r3, [r7, #16]

	if (es == NULL)
 8001172:	693b      	ldr	r3, [r7, #16]
 8001174:	2b00      	cmp	r3, #0
 8001176:	d10d      	bne.n	8001194 <tcp_client_recive+0x34>
	{
		es->state = ES_C_CLOSE;
 8001178:	693b      	ldr	r3, [r7, #16]
 800117a:	2204      	movs	r2, #4
 800117c:	701a      	strb	r2, [r3, #0]
		if (es->p == NULL)
 800117e:	693b      	ldr	r3, [r7, #16]
 8001180:	685b      	ldr	r3, [r3, #4]
 8001182:	2b00      	cmp	r3, #0
 8001184:	d103      	bne.n	800118e <tcp_client_recive+0x2e>
		{
			tcp_client_connectin_close(newpcb, es);
 8001186:	6939      	ldr	r1, [r7, #16]
 8001188:	68b8      	ldr	r0, [r7, #8]
 800118a:	f7ff fde3 	bl	8000d54 <tcp_client_connectin_close>

		}

		ret_err = ERR_OK;
 800118e:	2300      	movs	r3, #0
 8001190:	75fb      	strb	r3, [r7, #23]
 8001192:	e034      	b.n	80011fe <tcp_client_recive+0x9e>
	}
	else if (err != ERR_OK)
 8001194:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8001198:	2b00      	cmp	r3, #0
 800119a:	d007      	beq.n	80011ac <tcp_client_recive+0x4c>
	{
		ret_err = err;
 800119c:	78fb      	ldrb	r3, [r7, #3]
 800119e:	75fb      	strb	r3, [r7, #23]

		pbuf_free(es->p);
 80011a0:	693b      	ldr	r3, [r7, #16]
 80011a2:	685b      	ldr	r3, [r3, #4]
 80011a4:	4618      	mov	r0, r3
 80011a6:	f00a fecb 	bl	800bf40 <pbuf_free>
 80011aa:	e028      	b.n	80011fe <tcp_client_recive+0x9e>

	}
	else
	{
		switch (es->state)
 80011ac:	693b      	ldr	r3, [r7, #16]
 80011ae:	781b      	ldrb	r3, [r3, #0]
 80011b0:	2b01      	cmp	r3, #1
 80011b2:	d002      	beq.n	80011ba <tcp_client_recive+0x5a>
 80011b4:	2b04      	cmp	r3, #4
 80011b6:	d013      	beq.n	80011e0 <tcp_client_recive+0x80>
				pbuf_free(p);

				break;

			default:
				break;
 80011b8:	e021      	b.n	80011fe <tcp_client_recive+0x9e>
				es->p = p;
 80011ba:	693b      	ldr	r3, [r7, #16]
 80011bc:	687a      	ldr	r2, [r7, #4]
 80011be:	605a      	str	r2, [r3, #4]
				tcp_recved(newpcb, p->tot_len);
 80011c0:	687b      	ldr	r3, [r7, #4]
 80011c2:	891b      	ldrh	r3, [r3, #8]
 80011c4:	4619      	mov	r1, r3
 80011c6:	68b8      	ldr	r0, [r7, #8]
 80011c8:	f00b fe12 	bl	800cdf0 <tcp_recved>
				tcp_client_handler(newpcb, es);
 80011cc:	6939      	ldr	r1, [r7, #16]
 80011ce:	68b8      	ldr	r0, [r7, #8]
 80011d0:	f7ff fd5c 	bl	8000c8c <tcp_client_handler>
				pbuf_free(p);
 80011d4:	6878      	ldr	r0, [r7, #4]
 80011d6:	f00a feb3 	bl	800bf40 <pbuf_free>
				ret_err = ERR_OK;
 80011da:	2300      	movs	r3, #0
 80011dc:	75fb      	strb	r3, [r7, #23]
				break;
 80011de:	e00e      	b.n	80011fe <tcp_client_recive+0x9e>
				tcp_recved(newpcb, p->tot_len);
 80011e0:	687b      	ldr	r3, [r7, #4]
 80011e2:	891b      	ldrh	r3, [r3, #8]
 80011e4:	4619      	mov	r1, r3
 80011e6:	68b8      	ldr	r0, [r7, #8]
 80011e8:	f00b fe02 	bl	800cdf0 <tcp_recved>
				pbuf_free(es->p);
 80011ec:	693b      	ldr	r3, [r7, #16]
 80011ee:	685b      	ldr	r3, [r3, #4]
 80011f0:	4618      	mov	r0, r3
 80011f2:	f00a fea5 	bl	800bf40 <pbuf_free>
				pbuf_free(p);
 80011f6:	6878      	ldr	r0, [r7, #4]
 80011f8:	f00a fea2 	bl	800bf40 <pbuf_free>
				break;
 80011fc:	bf00      	nop

	}



	return ret_err;
 80011fe:	f997 3017 	ldrsb.w	r3, [r7, #23]

}
 8001202:	4618      	mov	r0, r3
 8001204:	3718      	adds	r7, #24
 8001206:	46bd      	mov	sp, r7
 8001208:	bd80      	pop	{r7, pc}
	...

0800120c <tcp_client_poll>:



static err_t tcp_client_poll(void *arg, struct tcp_pcb *newpcb)
{
 800120c:	b580      	push	{r7, lr}
 800120e:	b084      	sub	sp, #16
 8001210:	af00      	add	r7, sp, #0
 8001212:	6078      	str	r0, [r7, #4]
 8001214:	6039      	str	r1, [r7, #0]
	struct tcp_client_struct *es;

	struct tcp_client_struct *esTX;

	es = (struct tcp_client_struct *) arg;
 8001216:	687b      	ldr	r3, [r7, #4]
 8001218:	60fb      	str	r3, [r7, #12]


	if (es != NULL)
 800121a:	68fb      	ldr	r3, [r7, #12]
 800121c:	2b00      	cmp	r3, #0
 800121e:	d04a      	beq.n	80012b6 <tcp_client_poll+0xaa>
	{
		if (wr == 1)
 8001220:	4b27      	ldr	r3, [pc, #156]	; (80012c0 <tcp_client_poll+0xb4>)
 8001222:	781b      	ldrb	r3, [r3, #0]
 8001224:	2b01      	cmp	r3, #1
 8001226:	d12c      	bne.n	8001282 <tcp_client_poll+0x76>
		{
			esTX = es;
 8001228:	68fb      	ldr	r3, [r7, #12]
 800122a:	60bb      	str	r3, [r7, #8]

			//esTX->p = es->p;

			esTX->p = pbuf_alloc(PBUF_TRANSPORT, sizeof(struct tcp_client_struct), PBUF_POOL);
 800122c:	f44f 72c1 	mov.w	r2, #386	; 0x182
 8001230:	210c      	movs	r1, #12
 8001232:	2036      	movs	r0, #54	; 0x36
 8001234:	f00a fba0 	bl	800b978 <pbuf_alloc>
 8001238:	4602      	mov	r2, r0
 800123a:	68bb      	ldr	r3, [r7, #8]
 800123c:	605a      	str	r2, [r3, #4]

			esTX->p->payload = (void *)"Hello from Client\n\r";
 800123e:	68bb      	ldr	r3, [r7, #8]
 8001240:	685b      	ldr	r3, [r3, #4]
 8001242:	4a20      	ldr	r2, [pc, #128]	; (80012c4 <tcp_client_poll+0xb8>)
 8001244:	605a      	str	r2, [r3, #4]

			esTX->p->len = sizeof("Hello from Client\n\r");
 8001246:	68bb      	ldr	r3, [r7, #8]
 8001248:	685b      	ldr	r3, [r3, #4]
 800124a:	2214      	movs	r2, #20
 800124c:	815a      	strh	r2, [r3, #10]

			esTX->p->tot_len = esTX->p->tot_len - esTX->p->len + sizeof("Hello from Client\n\r");
 800124e:	68bb      	ldr	r3, [r7, #8]
 8001250:	685b      	ldr	r3, [r3, #4]
 8001252:	891a      	ldrh	r2, [r3, #8]
 8001254:	68bb      	ldr	r3, [r7, #8]
 8001256:	685b      	ldr	r3, [r3, #4]
 8001258:	895b      	ldrh	r3, [r3, #10]
 800125a:	1ad3      	subs	r3, r2, r3
 800125c:	b29a      	uxth	r2, r3
 800125e:	68bb      	ldr	r3, [r7, #8]
 8001260:	685b      	ldr	r3, [r3, #4]
 8001262:	3214      	adds	r2, #20
 8001264:	b292      	uxth	r2, r2
 8001266:	811a      	strh	r2, [r3, #8]
			//tcp_sent(newpcb, tcp_client_sent);

			tcp_client_send(newpcb, esTX);
 8001268:	68b9      	ldr	r1, [r7, #8]
 800126a:	6838      	ldr	r0, [r7, #0]
 800126c:	f7ff fcc4 	bl	8000bf8 <tcp_client_send>

			pbuf_free(esTX->p);
 8001270:	68bb      	ldr	r3, [r7, #8]
 8001272:	685b      	ldr	r3, [r3, #4]
 8001274:	4618      	mov	r0, r3
 8001276:	f00a fe63 	bl	800bf40 <pbuf_free>

			esTX->p = NULL;
 800127a:	68bb      	ldr	r3, [r7, #8]
 800127c:	2200      	movs	r2, #0
 800127e:	605a      	str	r2, [r3, #4]
 8001280:	e014      	b.n	80012ac <tcp_client_poll+0xa0>

		}
		else if (es->p != NULL)
 8001282:	68fb      	ldr	r3, [r7, #12]
 8001284:	685b      	ldr	r3, [r3, #4]
 8001286:	2b00      	cmp	r3, #0
 8001288:	d005      	beq.n	8001296 <tcp_client_poll+0x8a>

//			tcp_sent(newpcb, tcp_client_sent);
//
//			tcp_client_send(newpcb, es);

			pbuf_free(es->p);
 800128a:	68fb      	ldr	r3, [r7, #12]
 800128c:	685b      	ldr	r3, [r3, #4]
 800128e:	4618      	mov	r0, r3
 8001290:	f00a fe56 	bl	800bf40 <pbuf_free>
 8001294:	e00a      	b.n	80012ac <tcp_client_poll+0xa0>

		}

		else
		{
			if (es->state == ES_C_CLOSE)
 8001296:	68fb      	ldr	r3, [r7, #12]
 8001298:	781b      	ldrb	r3, [r3, #0]
 800129a:	2b04      	cmp	r3, #4
 800129c:	d106      	bne.n	80012ac <tcp_client_poll+0xa0>
			{
				tcp_client_connectin_close(newpcb, es);
 800129e:	68f9      	ldr	r1, [r7, #12]
 80012a0:	6838      	ldr	r0, [r7, #0]
 80012a2:	f7ff fd57 	bl	8000d54 <tcp_client_connectin_close>

				mem_free(es);
 80012a6:	68f8      	ldr	r0, [r7, #12]
 80012a8:	f009 fc62 	bl	800ab70 <mem_free>

			}
		}

		esBuff->state = es->state;
 80012ac:	4b06      	ldr	r3, [pc, #24]	; (80012c8 <tcp_client_poll+0xbc>)
 80012ae:	681b      	ldr	r3, [r3, #0]
 80012b0:	68fa      	ldr	r2, [r7, #12]
 80012b2:	7812      	ldrb	r2, [r2, #0]
 80012b4:	701a      	strb	r2, [r3, #0]

	}

	return ERR_OK;
 80012b6:	2300      	movs	r3, #0

}
 80012b8:	4618      	mov	r0, r3
 80012ba:	3710      	adds	r7, #16
 80012bc:	46bd      	mov	sp, r7
 80012be:	bd80      	pop	{r7, pc}
 80012c0:	200002a0 	.word	0x200002a0
 80012c4:	08019318 	.word	0x08019318
 80012c8:	200002c4 	.word	0x200002c4

080012cc <tcp_client_err>:
static void tcp_client_err(void *arg, err_t err)
{
 80012cc:	b580      	push	{r7, lr}
 80012ce:	b084      	sub	sp, #16
 80012d0:	af00      	add	r7, sp, #0
 80012d2:	6078      	str	r0, [r7, #4]
 80012d4:	460b      	mov	r3, r1
 80012d6:	70fb      	strb	r3, [r7, #3]
	struct tcp_client_struct *es;

	es = (struct tcp_client_struct *) arg;
 80012d8:	687b      	ldr	r3, [r7, #4]
 80012da:	60fb      	str	r3, [r7, #12]

	mem_free(es);
 80012dc:	68f8      	ldr	r0, [r7, #12]
 80012de:	f009 fc47 	bl	800ab70 <mem_free>

}
 80012e2:	bf00      	nop
 80012e4:	3710      	adds	r7, #16
 80012e6:	46bd      	mov	sp, r7
 80012e8:	bd80      	pop	{r7, pc}
	...

080012ec <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack     /* set stack pointer */
 80012ec:	f8df d034 	ldr.w	sp, [pc, #52]	; 8001324 <LoopFillZerobss+0xe>
  
/* Call the clock system initialization function.*/
  bl  SystemInit  
 80012f0:	f7ff fc70 	bl	8000bd4 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 80012f4:	480c      	ldr	r0, [pc, #48]	; (8001328 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 80012f6:	490d      	ldr	r1, [pc, #52]	; (800132c <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 80012f8:	4a0d      	ldr	r2, [pc, #52]	; (8001330 <LoopFillZerobss+0x1a>)
  movs r3, #0
 80012fa:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80012fc:	e002      	b.n	8001304 <LoopCopyDataInit>

080012fe <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80012fe:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001300:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001302:	3304      	adds	r3, #4

08001304 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001304:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001306:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001308:	d3f9      	bcc.n	80012fe <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800130a:	4a0a      	ldr	r2, [pc, #40]	; (8001334 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 800130c:	4c0a      	ldr	r4, [pc, #40]	; (8001338 <LoopFillZerobss+0x22>)
  movs r3, #0
 800130e:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001310:	e001      	b.n	8001316 <LoopFillZerobss>

08001312 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001312:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001314:	3204      	adds	r2, #4

08001316 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001316:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001318:	d3fb      	bcc.n	8001312 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 800131a:	f017 f981 	bl	8018620 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 800131e:	f7ff f92d 	bl	800057c <main>
  bx  lr    
 8001322:	4770      	bx	lr
  ldr   sp, =_estack     /* set stack pointer */
 8001324:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8001328:	20000000 	.word	0x20000000
  ldr r1, =_edata
 800132c:	20000178 	.word	0x20000178
  ldr r2, =_sidata
 8001330:	0801c4cc 	.word	0x0801c4cc
  ldr r2, =_sbss
 8001334:	20000178 	.word	0x20000178
  ldr r4, =_ebss
 8001338:	2000a7e4 	.word	0x2000a7e4

0800133c <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 800133c:	e7fe      	b.n	800133c <ADC_IRQHandler>

0800133e <DP83848_RegisterBusIO>:
  * @param  ioctx: holds device IO functions.
  * @retval DP83848_STATUS_OK  if OK
  *         DP83848_STATUS_ERROR if missing mandatory function
  */
int32_t  DP83848_RegisterBusIO(dp83848_Object_t *pObj, dp83848_IOCtx_t *ioctx)
{
 800133e:	b480      	push	{r7}
 8001340:	b083      	sub	sp, #12
 8001342:	af00      	add	r7, sp, #0
 8001344:	6078      	str	r0, [r7, #4]
 8001346:	6039      	str	r1, [r7, #0]
  if(!pObj || !ioctx->ReadReg || !ioctx->WriteReg || !ioctx->GetTick)
 8001348:	687b      	ldr	r3, [r7, #4]
 800134a:	2b00      	cmp	r3, #0
 800134c:	d00b      	beq.n	8001366 <DP83848_RegisterBusIO+0x28>
 800134e:	683b      	ldr	r3, [r7, #0]
 8001350:	68db      	ldr	r3, [r3, #12]
 8001352:	2b00      	cmp	r3, #0
 8001354:	d007      	beq.n	8001366 <DP83848_RegisterBusIO+0x28>
 8001356:	683b      	ldr	r3, [r7, #0]
 8001358:	689b      	ldr	r3, [r3, #8]
 800135a:	2b00      	cmp	r3, #0
 800135c:	d003      	beq.n	8001366 <DP83848_RegisterBusIO+0x28>
 800135e:	683b      	ldr	r3, [r7, #0]
 8001360:	691b      	ldr	r3, [r3, #16]
 8001362:	2b00      	cmp	r3, #0
 8001364:	d102      	bne.n	800136c <DP83848_RegisterBusIO+0x2e>
  {
    return DP83848_STATUS_ERROR;
 8001366:	f04f 33ff 	mov.w	r3, #4294967295
 800136a:	e014      	b.n	8001396 <DP83848_RegisterBusIO+0x58>
  }

  pObj->IO.Init = ioctx->Init;
 800136c:	683b      	ldr	r3, [r7, #0]
 800136e:	681a      	ldr	r2, [r3, #0]
 8001370:	687b      	ldr	r3, [r7, #4]
 8001372:	609a      	str	r2, [r3, #8]
  pObj->IO.DeInit = ioctx->DeInit;
 8001374:	683b      	ldr	r3, [r7, #0]
 8001376:	685a      	ldr	r2, [r3, #4]
 8001378:	687b      	ldr	r3, [r7, #4]
 800137a:	60da      	str	r2, [r3, #12]
  pObj->IO.ReadReg = ioctx->ReadReg;
 800137c:	683b      	ldr	r3, [r7, #0]
 800137e:	68da      	ldr	r2, [r3, #12]
 8001380:	687b      	ldr	r3, [r7, #4]
 8001382:	615a      	str	r2, [r3, #20]
  pObj->IO.WriteReg = ioctx->WriteReg;
 8001384:	683b      	ldr	r3, [r7, #0]
 8001386:	689a      	ldr	r2, [r3, #8]
 8001388:	687b      	ldr	r3, [r7, #4]
 800138a:	611a      	str	r2, [r3, #16]
  pObj->IO.GetTick = ioctx->GetTick;
 800138c:	683b      	ldr	r3, [r7, #0]
 800138e:	691a      	ldr	r2, [r3, #16]
 8001390:	687b      	ldr	r3, [r7, #4]
 8001392:	619a      	str	r2, [r3, #24]

  return DP83848_STATUS_OK;
 8001394:	2300      	movs	r3, #0
}
 8001396:	4618      	mov	r0, r3
 8001398:	370c      	adds	r7, #12
 800139a:	46bd      	mov	sp, r7
 800139c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013a0:	4770      	bx	lr

080013a2 <DP83848_Init>:
  * @retval DP83848_STATUS_OK  if OK
  *         DP83848_STATUS_ADDRESS_ERROR if cannot find device address
  *         DP83848_STATUS_READ_ERROR if connot read register
  */
 int32_t DP83848_Init(dp83848_Object_t *pObj)
 {
 80013a2:	b580      	push	{r7, lr}
 80013a4:	b086      	sub	sp, #24
 80013a6:	af00      	add	r7, sp, #0
 80013a8:	6078      	str	r0, [r7, #4]
   uint32_t regvalue = 0, addr = 0;
 80013aa:	2300      	movs	r3, #0
 80013ac:	60fb      	str	r3, [r7, #12]
 80013ae:	2300      	movs	r3, #0
 80013b0:	617b      	str	r3, [r7, #20]
   int32_t status = DP83848_STATUS_OK;
 80013b2:	2300      	movs	r3, #0
 80013b4:	613b      	str	r3, [r7, #16]

   if(pObj->Is_Initialized == 0)
 80013b6:	687b      	ldr	r3, [r7, #4]
 80013b8:	685b      	ldr	r3, [r3, #4]
 80013ba:	2b00      	cmp	r3, #0
 80013bc:	d139      	bne.n	8001432 <DP83848_Init+0x90>
   {
     if(pObj->IO.Init != 0)
 80013be:	687b      	ldr	r3, [r7, #4]
 80013c0:	689b      	ldr	r3, [r3, #8]
 80013c2:	2b00      	cmp	r3, #0
 80013c4:	d002      	beq.n	80013cc <DP83848_Init+0x2a>
     {
       /* GPIO and Clocks initialization */
       pObj->IO.Init();
 80013c6:	687b      	ldr	r3, [r7, #4]
 80013c8:	689b      	ldr	r3, [r3, #8]
 80013ca:	4798      	blx	r3
     }

     /* for later check */
     pObj->DevAddr = DP83848_MAX_DEV_ADDR + 1;
 80013cc:	687b      	ldr	r3, [r7, #4]
 80013ce:	2220      	movs	r2, #32
 80013d0:	601a      	str	r2, [r3, #0]

     /* Get the device address from special mode register */
     for(addr = 0; addr <= DP83848_MAX_DEV_ADDR; addr ++)
 80013d2:	2300      	movs	r3, #0
 80013d4:	617b      	str	r3, [r7, #20]
 80013d6:	e01c      	b.n	8001412 <DP83848_Init+0x70>
     {
       if(pObj->IO.ReadReg(addr, DP83848_SMR, &regvalue) < 0)
 80013d8:	687b      	ldr	r3, [r7, #4]
 80013da:	695b      	ldr	r3, [r3, #20]
 80013dc:	f107 020c 	add.w	r2, r7, #12
 80013e0:	2119      	movs	r1, #25
 80013e2:	6978      	ldr	r0, [r7, #20]
 80013e4:	4798      	blx	r3
 80013e6:	4603      	mov	r3, r0
 80013e8:	2b00      	cmp	r3, #0
 80013ea:	da03      	bge.n	80013f4 <DP83848_Init+0x52>
       {
         status = DP83848_STATUS_READ_ERROR;
 80013ec:	f06f 0304 	mvn.w	r3, #4
 80013f0:	613b      	str	r3, [r7, #16]
         /* Can't read from this device address
            continue with next address */
         continue;
 80013f2:	e00b      	b.n	800140c <DP83848_Init+0x6a>
       }

       if((regvalue & DP83848_SMR_PHY_ADDR) == addr)
 80013f4:	68fb      	ldr	r3, [r7, #12]
 80013f6:	f003 031f 	and.w	r3, r3, #31
 80013fa:	697a      	ldr	r2, [r7, #20]
 80013fc:	429a      	cmp	r2, r3
 80013fe:	d105      	bne.n	800140c <DP83848_Init+0x6a>
       {
         pObj->DevAddr = addr;
 8001400:	687b      	ldr	r3, [r7, #4]
 8001402:	697a      	ldr	r2, [r7, #20]
 8001404:	601a      	str	r2, [r3, #0]
         status = DP83848_STATUS_OK;
 8001406:	2300      	movs	r3, #0
 8001408:	613b      	str	r3, [r7, #16]
         break;
 800140a:	e005      	b.n	8001418 <DP83848_Init+0x76>
     for(addr = 0; addr <= DP83848_MAX_DEV_ADDR; addr ++)
 800140c:	697b      	ldr	r3, [r7, #20]
 800140e:	3301      	adds	r3, #1
 8001410:	617b      	str	r3, [r7, #20]
 8001412:	697b      	ldr	r3, [r7, #20]
 8001414:	2b1f      	cmp	r3, #31
 8001416:	d9df      	bls.n	80013d8 <DP83848_Init+0x36>
       }
     }

     if(pObj->DevAddr > DP83848_MAX_DEV_ADDR)
 8001418:	687b      	ldr	r3, [r7, #4]
 800141a:	681b      	ldr	r3, [r3, #0]
 800141c:	2b1f      	cmp	r3, #31
 800141e:	d902      	bls.n	8001426 <DP83848_Init+0x84>
     {
       status = DP83848_STATUS_ADDRESS_ERROR;
 8001420:	f06f 0302 	mvn.w	r3, #2
 8001424:	613b      	str	r3, [r7, #16]
     }

     /* if device address is matched */
     if(status == DP83848_STATUS_OK)
 8001426:	693b      	ldr	r3, [r7, #16]
 8001428:	2b00      	cmp	r3, #0
 800142a:	d102      	bne.n	8001432 <DP83848_Init+0x90>
     {
       pObj->Is_Initialized = 1;
 800142c:	687b      	ldr	r3, [r7, #4]
 800142e:	2201      	movs	r2, #1
 8001430:	605a      	str	r2, [r3, #4]
     }
   }

   return status;
 8001432:	693b      	ldr	r3, [r7, #16]
 }
 8001434:	4618      	mov	r0, r3
 8001436:	3718      	adds	r7, #24
 8001438:	46bd      	mov	sp, r7
 800143a:	bd80      	pop	{r7, pc}

0800143c <DP83848_GetLinkState>:
  *         DP83848_STATUS_10MBITS_HALFDUPLEX  if 10Mb/s HD
  *         DP83848_STATUS_READ_ERROR if connot read register
  *         DP83848_STATUS_WRITE_ERROR if connot write to register
  */
int32_t DP83848_GetLinkState(dp83848_Object_t *pObj)
{
 800143c:	b580      	push	{r7, lr}
 800143e:	b084      	sub	sp, #16
 8001440:	af00      	add	r7, sp, #0
 8001442:	6078      	str	r0, [r7, #4]
  uint32_t readval = 0;
 8001444:	2300      	movs	r3, #0
 8001446:	60fb      	str	r3, [r7, #12]

  /* Read Status register  */
  if(pObj->IO.ReadReg(pObj->DevAddr, DP83848_BSR, &readval) < 0)
 8001448:	687b      	ldr	r3, [r7, #4]
 800144a:	695b      	ldr	r3, [r3, #20]
 800144c:	687a      	ldr	r2, [r7, #4]
 800144e:	6810      	ldr	r0, [r2, #0]
 8001450:	f107 020c 	add.w	r2, r7, #12
 8001454:	2101      	movs	r1, #1
 8001456:	4798      	blx	r3
 8001458:	4603      	mov	r3, r0
 800145a:	2b00      	cmp	r3, #0
 800145c:	da02      	bge.n	8001464 <DP83848_GetLinkState+0x28>
  {
    return DP83848_STATUS_READ_ERROR;
 800145e:	f06f 0304 	mvn.w	r3, #4
 8001462:	e06e      	b.n	8001542 <DP83848_GetLinkState+0x106>
  }

  /* Read Status register again */
  if(pObj->IO.ReadReg(pObj->DevAddr, DP83848_BSR, &readval) < 0)
 8001464:	687b      	ldr	r3, [r7, #4]
 8001466:	695b      	ldr	r3, [r3, #20]
 8001468:	687a      	ldr	r2, [r7, #4]
 800146a:	6810      	ldr	r0, [r2, #0]
 800146c:	f107 020c 	add.w	r2, r7, #12
 8001470:	2101      	movs	r1, #1
 8001472:	4798      	blx	r3
 8001474:	4603      	mov	r3, r0
 8001476:	2b00      	cmp	r3, #0
 8001478:	da02      	bge.n	8001480 <DP83848_GetLinkState+0x44>
  {
    return DP83848_STATUS_READ_ERROR;
 800147a:	f06f 0304 	mvn.w	r3, #4
 800147e:	e060      	b.n	8001542 <DP83848_GetLinkState+0x106>
  }

  if((readval & DP83848_BSR_LINK_STATUS) == 0)
 8001480:	68fb      	ldr	r3, [r7, #12]
 8001482:	f003 0304 	and.w	r3, r3, #4
 8001486:	2b00      	cmp	r3, #0
 8001488:	d101      	bne.n	800148e <DP83848_GetLinkState+0x52>
  {
    /* Return Link Down status */
    return DP83848_STATUS_LINK_DOWN;
 800148a:	2301      	movs	r3, #1
 800148c:	e059      	b.n	8001542 <DP83848_GetLinkState+0x106>
  }

  /* Check Auto negotiaition */
  if(pObj->IO.ReadReg(pObj->DevAddr, DP83848_BCR, &readval) < 0)
 800148e:	687b      	ldr	r3, [r7, #4]
 8001490:	695b      	ldr	r3, [r3, #20]
 8001492:	687a      	ldr	r2, [r7, #4]
 8001494:	6810      	ldr	r0, [r2, #0]
 8001496:	f107 020c 	add.w	r2, r7, #12
 800149a:	2100      	movs	r1, #0
 800149c:	4798      	blx	r3
 800149e:	4603      	mov	r3, r0
 80014a0:	2b00      	cmp	r3, #0
 80014a2:	da02      	bge.n	80014aa <DP83848_GetLinkState+0x6e>
  {
    return DP83848_STATUS_READ_ERROR;
 80014a4:	f06f 0304 	mvn.w	r3, #4
 80014a8:	e04b      	b.n	8001542 <DP83848_GetLinkState+0x106>
  }

  if((readval & DP83848_BCR_AUTONEGO_EN) != DP83848_BCR_AUTONEGO_EN)
 80014aa:	68fb      	ldr	r3, [r7, #12]
 80014ac:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80014b0:	2b00      	cmp	r3, #0
 80014b2:	d11b      	bne.n	80014ec <DP83848_GetLinkState+0xb0>
  {
    if(((readval & DP83848_BCR_SPEED_SELECT) == DP83848_BCR_SPEED_SELECT) && ((readval & DP83848_BCR_DUPLEX_MODE) == DP83848_BCR_DUPLEX_MODE))
 80014b4:	68fb      	ldr	r3, [r7, #12]
 80014b6:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80014ba:	2b00      	cmp	r3, #0
 80014bc:	d006      	beq.n	80014cc <DP83848_GetLinkState+0x90>
 80014be:	68fb      	ldr	r3, [r7, #12]
 80014c0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80014c4:	2b00      	cmp	r3, #0
 80014c6:	d001      	beq.n	80014cc <DP83848_GetLinkState+0x90>
    {
      return DP83848_STATUS_100MBITS_FULLDUPLEX;
 80014c8:	2302      	movs	r3, #2
 80014ca:	e03a      	b.n	8001542 <DP83848_GetLinkState+0x106>
    }
    else if ((readval & DP83848_BCR_SPEED_SELECT) == DP83848_BCR_SPEED_SELECT)
 80014cc:	68fb      	ldr	r3, [r7, #12]
 80014ce:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80014d2:	2b00      	cmp	r3, #0
 80014d4:	d001      	beq.n	80014da <DP83848_GetLinkState+0x9e>
    {
      return DP83848_STATUS_100MBITS_HALFDUPLEX;
 80014d6:	2303      	movs	r3, #3
 80014d8:	e033      	b.n	8001542 <DP83848_GetLinkState+0x106>
    }
    else if ((readval & DP83848_BCR_DUPLEX_MODE) == DP83848_BCR_DUPLEX_MODE)
 80014da:	68fb      	ldr	r3, [r7, #12]
 80014dc:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80014e0:	2b00      	cmp	r3, #0
 80014e2:	d001      	beq.n	80014e8 <DP83848_GetLinkState+0xac>
    {
      return DP83848_STATUS_10MBITS_FULLDUPLEX;
 80014e4:	2304      	movs	r3, #4
 80014e6:	e02c      	b.n	8001542 <DP83848_GetLinkState+0x106>
    }
    else
    {
      return DP83848_STATUS_10MBITS_HALFDUPLEX;
 80014e8:	2305      	movs	r3, #5
 80014ea:	e02a      	b.n	8001542 <DP83848_GetLinkState+0x106>
    }
  }
  else /* Auto Nego enabled */
  {
    if(pObj->IO.ReadReg(pObj->DevAddr, DP83848_PHYSCSR, &readval) < 0)
 80014ec:	687b      	ldr	r3, [r7, #4]
 80014ee:	695b      	ldr	r3, [r3, #20]
 80014f0:	687a      	ldr	r2, [r7, #4]
 80014f2:	6810      	ldr	r0, [r2, #0]
 80014f4:	f107 020c 	add.w	r2, r7, #12
 80014f8:	2110      	movs	r1, #16
 80014fa:	4798      	blx	r3
 80014fc:	4603      	mov	r3, r0
 80014fe:	2b00      	cmp	r3, #0
 8001500:	da02      	bge.n	8001508 <DP83848_GetLinkState+0xcc>
    {
      return DP83848_STATUS_READ_ERROR;
 8001502:	f06f 0304 	mvn.w	r3, #4
 8001506:	e01c      	b.n	8001542 <DP83848_GetLinkState+0x106>
    }

    /* Check if auto nego not done */
    if((readval & DP83848_PHYSCSR_AUTONEGO_DONE) == 0)
 8001508:	68fb      	ldr	r3, [r7, #12]
 800150a:	f003 0310 	and.w	r3, r3, #16
 800150e:	2b00      	cmp	r3, #0
 8001510:	d101      	bne.n	8001516 <DP83848_GetLinkState+0xda>
    {
      return DP83848_STATUS_AUTONEGO_NOTDONE;
 8001512:	2306      	movs	r3, #6
 8001514:	e015      	b.n	8001542 <DP83848_GetLinkState+0x106>
    }

    if((readval & DP83848_PHYSCSR_HCDSPEEDMASK) == DP83848_PHYSCSR_100BTX_FD)
 8001516:	68fb      	ldr	r3, [r7, #12]
 8001518:	f003 0306 	and.w	r3, r3, #6
 800151c:	2b04      	cmp	r3, #4
 800151e:	d101      	bne.n	8001524 <DP83848_GetLinkState+0xe8>
    {
      return DP83848_STATUS_100MBITS_FULLDUPLEX;
 8001520:	2302      	movs	r3, #2
 8001522:	e00e      	b.n	8001542 <DP83848_GetLinkState+0x106>
    }
    else if ((readval & DP83848_PHYSCSR_HCDSPEEDMASK) == DP83848_PHYSCSR_100BTX_HD)
 8001524:	68fb      	ldr	r3, [r7, #12]
 8001526:	f003 0306 	and.w	r3, r3, #6
 800152a:	2b00      	cmp	r3, #0
 800152c:	d101      	bne.n	8001532 <DP83848_GetLinkState+0xf6>
    {
      return DP83848_STATUS_100MBITS_HALFDUPLEX;
 800152e:	2303      	movs	r3, #3
 8001530:	e007      	b.n	8001542 <DP83848_GetLinkState+0x106>
    }
    else if ((readval & DP83848_PHYSCSR_HCDSPEEDMASK) == DP83848_PHYSCSR_10BT_FD)
 8001532:	68fb      	ldr	r3, [r7, #12]
 8001534:	f003 0306 	and.w	r3, r3, #6
 8001538:	2b06      	cmp	r3, #6
 800153a:	d101      	bne.n	8001540 <DP83848_GetLinkState+0x104>
    {
      return DP83848_STATUS_10MBITS_FULLDUPLEX;
 800153c:	2304      	movs	r3, #4
 800153e:	e000      	b.n	8001542 <DP83848_GetLinkState+0x106>
    }
    else
    {
      return DP83848_STATUS_10MBITS_HALFDUPLEX;
 8001540:	2305      	movs	r3, #5
    }
  }
}
 8001542:	4618      	mov	r0, r3
 8001544:	3710      	adds	r7, #16
 8001546:	46bd      	mov	sp, r7
 8001548:	bd80      	pop	{r7, pc}
	...

0800154c <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 800154c:	b580      	push	{r7, lr}
 800154e:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8001550:	4b0e      	ldr	r3, [pc, #56]	; (800158c <HAL_Init+0x40>)
 8001552:	681b      	ldr	r3, [r3, #0]
 8001554:	4a0d      	ldr	r2, [pc, #52]	; (800158c <HAL_Init+0x40>)
 8001556:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800155a:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 800155c:	4b0b      	ldr	r3, [pc, #44]	; (800158c <HAL_Init+0x40>)
 800155e:	681b      	ldr	r3, [r3, #0]
 8001560:	4a0a      	ldr	r2, [pc, #40]	; (800158c <HAL_Init+0x40>)
 8001562:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8001566:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001568:	4b08      	ldr	r3, [pc, #32]	; (800158c <HAL_Init+0x40>)
 800156a:	681b      	ldr	r3, [r3, #0]
 800156c:	4a07      	ldr	r2, [pc, #28]	; (800158c <HAL_Init+0x40>)
 800156e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001572:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001574:	2003      	movs	r0, #3
 8001576:	f000 f94f 	bl	8001818 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 800157a:	200f      	movs	r0, #15
 800157c:	f000 f808 	bl	8001590 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8001580:	f7ff f92e 	bl	80007e0 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001584:	2300      	movs	r3, #0
}
 8001586:	4618      	mov	r0, r3
 8001588:	bd80      	pop	{r7, pc}
 800158a:	bf00      	nop
 800158c:	40023c00 	.word	0x40023c00

08001590 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001590:	b580      	push	{r7, lr}
 8001592:	b082      	sub	sp, #8
 8001594:	af00      	add	r7, sp, #0
 8001596:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8001598:	4b12      	ldr	r3, [pc, #72]	; (80015e4 <HAL_InitTick+0x54>)
 800159a:	681a      	ldr	r2, [r3, #0]
 800159c:	4b12      	ldr	r3, [pc, #72]	; (80015e8 <HAL_InitTick+0x58>)
 800159e:	781b      	ldrb	r3, [r3, #0]
 80015a0:	4619      	mov	r1, r3
 80015a2:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80015a6:	fbb3 f3f1 	udiv	r3, r3, r1
 80015aa:	fbb2 f3f3 	udiv	r3, r2, r3
 80015ae:	4618      	mov	r0, r3
 80015b0:	f000 f967 	bl	8001882 <HAL_SYSTICK_Config>
 80015b4:	4603      	mov	r3, r0
 80015b6:	2b00      	cmp	r3, #0
 80015b8:	d001      	beq.n	80015be <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 80015ba:	2301      	movs	r3, #1
 80015bc:	e00e      	b.n	80015dc <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80015be:	687b      	ldr	r3, [r7, #4]
 80015c0:	2b0f      	cmp	r3, #15
 80015c2:	d80a      	bhi.n	80015da <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80015c4:	2200      	movs	r2, #0
 80015c6:	6879      	ldr	r1, [r7, #4]
 80015c8:	f04f 30ff 	mov.w	r0, #4294967295
 80015cc:	f000 f92f 	bl	800182e <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80015d0:	4a06      	ldr	r2, [pc, #24]	; (80015ec <HAL_InitTick+0x5c>)
 80015d2:	687b      	ldr	r3, [r7, #4]
 80015d4:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 80015d6:	2300      	movs	r3, #0
 80015d8:	e000      	b.n	80015dc <HAL_InitTick+0x4c>
    return HAL_ERROR;
 80015da:	2301      	movs	r3, #1
}
 80015dc:	4618      	mov	r0, r3
 80015de:	3708      	adds	r7, #8
 80015e0:	46bd      	mov	sp, r7
 80015e2:	bd80      	pop	{r7, pc}
 80015e4:	20000000 	.word	0x20000000
 80015e8:	20000008 	.word	0x20000008
 80015ec:	20000004 	.word	0x20000004

080015f0 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80015f0:	b480      	push	{r7}
 80015f2:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80015f4:	4b06      	ldr	r3, [pc, #24]	; (8001610 <HAL_IncTick+0x20>)
 80015f6:	781b      	ldrb	r3, [r3, #0]
 80015f8:	461a      	mov	r2, r3
 80015fa:	4b06      	ldr	r3, [pc, #24]	; (8001614 <HAL_IncTick+0x24>)
 80015fc:	681b      	ldr	r3, [r3, #0]
 80015fe:	4413      	add	r3, r2
 8001600:	4a04      	ldr	r2, [pc, #16]	; (8001614 <HAL_IncTick+0x24>)
 8001602:	6013      	str	r3, [r2, #0]
}
 8001604:	bf00      	nop
 8001606:	46bd      	mov	sp, r7
 8001608:	f85d 7b04 	ldr.w	r7, [sp], #4
 800160c:	4770      	bx	lr
 800160e:	bf00      	nop
 8001610:	20000008 	.word	0x20000008
 8001614:	200002d0 	.word	0x200002d0

08001618 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001618:	b480      	push	{r7}
 800161a:	af00      	add	r7, sp, #0
  return uwTick;
 800161c:	4b03      	ldr	r3, [pc, #12]	; (800162c <HAL_GetTick+0x14>)
 800161e:	681b      	ldr	r3, [r3, #0]
}
 8001620:	4618      	mov	r0, r3
 8001622:	46bd      	mov	sp, r7
 8001624:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001628:	4770      	bx	lr
 800162a:	bf00      	nop
 800162c:	200002d0 	.word	0x200002d0

08001630 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001630:	b580      	push	{r7, lr}
 8001632:	b084      	sub	sp, #16
 8001634:	af00      	add	r7, sp, #0
 8001636:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001638:	f7ff ffee 	bl	8001618 <HAL_GetTick>
 800163c:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 800163e:	687b      	ldr	r3, [r7, #4]
 8001640:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8001642:	68fb      	ldr	r3, [r7, #12]
 8001644:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001648:	d005      	beq.n	8001656 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 800164a:	4b0a      	ldr	r3, [pc, #40]	; (8001674 <HAL_Delay+0x44>)
 800164c:	781b      	ldrb	r3, [r3, #0]
 800164e:	461a      	mov	r2, r3
 8001650:	68fb      	ldr	r3, [r7, #12]
 8001652:	4413      	add	r3, r2
 8001654:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8001656:	bf00      	nop
 8001658:	f7ff ffde 	bl	8001618 <HAL_GetTick>
 800165c:	4602      	mov	r2, r0
 800165e:	68bb      	ldr	r3, [r7, #8]
 8001660:	1ad3      	subs	r3, r2, r3
 8001662:	68fa      	ldr	r2, [r7, #12]
 8001664:	429a      	cmp	r2, r3
 8001666:	d8f7      	bhi.n	8001658 <HAL_Delay+0x28>
  {
  }
}
 8001668:	bf00      	nop
 800166a:	bf00      	nop
 800166c:	3710      	adds	r7, #16
 800166e:	46bd      	mov	sp, r7
 8001670:	bd80      	pop	{r7, pc}
 8001672:	bf00      	nop
 8001674:	20000008 	.word	0x20000008

08001678 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001678:	b480      	push	{r7}
 800167a:	b085      	sub	sp, #20
 800167c:	af00      	add	r7, sp, #0
 800167e:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001680:	687b      	ldr	r3, [r7, #4]
 8001682:	f003 0307 	and.w	r3, r3, #7
 8001686:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001688:	4b0c      	ldr	r3, [pc, #48]	; (80016bc <__NVIC_SetPriorityGrouping+0x44>)
 800168a:	68db      	ldr	r3, [r3, #12]
 800168c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800168e:	68ba      	ldr	r2, [r7, #8]
 8001690:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8001694:	4013      	ands	r3, r2
 8001696:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001698:	68fb      	ldr	r3, [r7, #12]
 800169a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 800169c:	68bb      	ldr	r3, [r7, #8]
 800169e:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80016a0:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 80016a4:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80016a8:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80016aa:	4a04      	ldr	r2, [pc, #16]	; (80016bc <__NVIC_SetPriorityGrouping+0x44>)
 80016ac:	68bb      	ldr	r3, [r7, #8]
 80016ae:	60d3      	str	r3, [r2, #12]
}
 80016b0:	bf00      	nop
 80016b2:	3714      	adds	r7, #20
 80016b4:	46bd      	mov	sp, r7
 80016b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016ba:	4770      	bx	lr
 80016bc:	e000ed00 	.word	0xe000ed00

080016c0 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80016c0:	b480      	push	{r7}
 80016c2:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80016c4:	4b04      	ldr	r3, [pc, #16]	; (80016d8 <__NVIC_GetPriorityGrouping+0x18>)
 80016c6:	68db      	ldr	r3, [r3, #12]
 80016c8:	0a1b      	lsrs	r3, r3, #8
 80016ca:	f003 0307 	and.w	r3, r3, #7
}
 80016ce:	4618      	mov	r0, r3
 80016d0:	46bd      	mov	sp, r7
 80016d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016d6:	4770      	bx	lr
 80016d8:	e000ed00 	.word	0xe000ed00

080016dc <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80016dc:	b480      	push	{r7}
 80016de:	b083      	sub	sp, #12
 80016e0:	af00      	add	r7, sp, #0
 80016e2:	4603      	mov	r3, r0
 80016e4:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80016e6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80016ea:	2b00      	cmp	r3, #0
 80016ec:	db0b      	blt.n	8001706 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80016ee:	79fb      	ldrb	r3, [r7, #7]
 80016f0:	f003 021f 	and.w	r2, r3, #31
 80016f4:	4907      	ldr	r1, [pc, #28]	; (8001714 <__NVIC_EnableIRQ+0x38>)
 80016f6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80016fa:	095b      	lsrs	r3, r3, #5
 80016fc:	2001      	movs	r0, #1
 80016fe:	fa00 f202 	lsl.w	r2, r0, r2
 8001702:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8001706:	bf00      	nop
 8001708:	370c      	adds	r7, #12
 800170a:	46bd      	mov	sp, r7
 800170c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001710:	4770      	bx	lr
 8001712:	bf00      	nop
 8001714:	e000e100 	.word	0xe000e100

08001718 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001718:	b480      	push	{r7}
 800171a:	b083      	sub	sp, #12
 800171c:	af00      	add	r7, sp, #0
 800171e:	4603      	mov	r3, r0
 8001720:	6039      	str	r1, [r7, #0]
 8001722:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001724:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001728:	2b00      	cmp	r3, #0
 800172a:	db0a      	blt.n	8001742 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800172c:	683b      	ldr	r3, [r7, #0]
 800172e:	b2da      	uxtb	r2, r3
 8001730:	490c      	ldr	r1, [pc, #48]	; (8001764 <__NVIC_SetPriority+0x4c>)
 8001732:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001736:	0112      	lsls	r2, r2, #4
 8001738:	b2d2      	uxtb	r2, r2
 800173a:	440b      	add	r3, r1
 800173c:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001740:	e00a      	b.n	8001758 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001742:	683b      	ldr	r3, [r7, #0]
 8001744:	b2da      	uxtb	r2, r3
 8001746:	4908      	ldr	r1, [pc, #32]	; (8001768 <__NVIC_SetPriority+0x50>)
 8001748:	79fb      	ldrb	r3, [r7, #7]
 800174a:	f003 030f 	and.w	r3, r3, #15
 800174e:	3b04      	subs	r3, #4
 8001750:	0112      	lsls	r2, r2, #4
 8001752:	b2d2      	uxtb	r2, r2
 8001754:	440b      	add	r3, r1
 8001756:	761a      	strb	r2, [r3, #24]
}
 8001758:	bf00      	nop
 800175a:	370c      	adds	r7, #12
 800175c:	46bd      	mov	sp, r7
 800175e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001762:	4770      	bx	lr
 8001764:	e000e100 	.word	0xe000e100
 8001768:	e000ed00 	.word	0xe000ed00

0800176c <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800176c:	b480      	push	{r7}
 800176e:	b089      	sub	sp, #36	; 0x24
 8001770:	af00      	add	r7, sp, #0
 8001772:	60f8      	str	r0, [r7, #12]
 8001774:	60b9      	str	r1, [r7, #8]
 8001776:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001778:	68fb      	ldr	r3, [r7, #12]
 800177a:	f003 0307 	and.w	r3, r3, #7
 800177e:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001780:	69fb      	ldr	r3, [r7, #28]
 8001782:	f1c3 0307 	rsb	r3, r3, #7
 8001786:	2b04      	cmp	r3, #4
 8001788:	bf28      	it	cs
 800178a:	2304      	movcs	r3, #4
 800178c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800178e:	69fb      	ldr	r3, [r7, #28]
 8001790:	3304      	adds	r3, #4
 8001792:	2b06      	cmp	r3, #6
 8001794:	d902      	bls.n	800179c <NVIC_EncodePriority+0x30>
 8001796:	69fb      	ldr	r3, [r7, #28]
 8001798:	3b03      	subs	r3, #3
 800179a:	e000      	b.n	800179e <NVIC_EncodePriority+0x32>
 800179c:	2300      	movs	r3, #0
 800179e:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80017a0:	f04f 32ff 	mov.w	r2, #4294967295
 80017a4:	69bb      	ldr	r3, [r7, #24]
 80017a6:	fa02 f303 	lsl.w	r3, r2, r3
 80017aa:	43da      	mvns	r2, r3
 80017ac:	68bb      	ldr	r3, [r7, #8]
 80017ae:	401a      	ands	r2, r3
 80017b0:	697b      	ldr	r3, [r7, #20]
 80017b2:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80017b4:	f04f 31ff 	mov.w	r1, #4294967295
 80017b8:	697b      	ldr	r3, [r7, #20]
 80017ba:	fa01 f303 	lsl.w	r3, r1, r3
 80017be:	43d9      	mvns	r1, r3
 80017c0:	687b      	ldr	r3, [r7, #4]
 80017c2:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80017c4:	4313      	orrs	r3, r2
         );
}
 80017c6:	4618      	mov	r0, r3
 80017c8:	3724      	adds	r7, #36	; 0x24
 80017ca:	46bd      	mov	sp, r7
 80017cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017d0:	4770      	bx	lr
	...

080017d4 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80017d4:	b580      	push	{r7, lr}
 80017d6:	b082      	sub	sp, #8
 80017d8:	af00      	add	r7, sp, #0
 80017da:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80017dc:	687b      	ldr	r3, [r7, #4]
 80017de:	3b01      	subs	r3, #1
 80017e0:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80017e4:	d301      	bcc.n	80017ea <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80017e6:	2301      	movs	r3, #1
 80017e8:	e00f      	b.n	800180a <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80017ea:	4a0a      	ldr	r2, [pc, #40]	; (8001814 <SysTick_Config+0x40>)
 80017ec:	687b      	ldr	r3, [r7, #4]
 80017ee:	3b01      	subs	r3, #1
 80017f0:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80017f2:	210f      	movs	r1, #15
 80017f4:	f04f 30ff 	mov.w	r0, #4294967295
 80017f8:	f7ff ff8e 	bl	8001718 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80017fc:	4b05      	ldr	r3, [pc, #20]	; (8001814 <SysTick_Config+0x40>)
 80017fe:	2200      	movs	r2, #0
 8001800:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001802:	4b04      	ldr	r3, [pc, #16]	; (8001814 <SysTick_Config+0x40>)
 8001804:	2207      	movs	r2, #7
 8001806:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001808:	2300      	movs	r3, #0
}
 800180a:	4618      	mov	r0, r3
 800180c:	3708      	adds	r7, #8
 800180e:	46bd      	mov	sp, r7
 8001810:	bd80      	pop	{r7, pc}
 8001812:	bf00      	nop
 8001814:	e000e010 	.word	0xe000e010

08001818 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001818:	b580      	push	{r7, lr}
 800181a:	b082      	sub	sp, #8
 800181c:	af00      	add	r7, sp, #0
 800181e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001820:	6878      	ldr	r0, [r7, #4]
 8001822:	f7ff ff29 	bl	8001678 <__NVIC_SetPriorityGrouping>
}
 8001826:	bf00      	nop
 8001828:	3708      	adds	r7, #8
 800182a:	46bd      	mov	sp, r7
 800182c:	bd80      	pop	{r7, pc}

0800182e <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 800182e:	b580      	push	{r7, lr}
 8001830:	b086      	sub	sp, #24
 8001832:	af00      	add	r7, sp, #0
 8001834:	4603      	mov	r3, r0
 8001836:	60b9      	str	r1, [r7, #8]
 8001838:	607a      	str	r2, [r7, #4]
 800183a:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 800183c:	2300      	movs	r3, #0
 800183e:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8001840:	f7ff ff3e 	bl	80016c0 <__NVIC_GetPriorityGrouping>
 8001844:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001846:	687a      	ldr	r2, [r7, #4]
 8001848:	68b9      	ldr	r1, [r7, #8]
 800184a:	6978      	ldr	r0, [r7, #20]
 800184c:	f7ff ff8e 	bl	800176c <NVIC_EncodePriority>
 8001850:	4602      	mov	r2, r0
 8001852:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001856:	4611      	mov	r1, r2
 8001858:	4618      	mov	r0, r3
 800185a:	f7ff ff5d 	bl	8001718 <__NVIC_SetPriority>
}
 800185e:	bf00      	nop
 8001860:	3718      	adds	r7, #24
 8001862:	46bd      	mov	sp, r7
 8001864:	bd80      	pop	{r7, pc}

08001866 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001866:	b580      	push	{r7, lr}
 8001868:	b082      	sub	sp, #8
 800186a:	af00      	add	r7, sp, #0
 800186c:	4603      	mov	r3, r0
 800186e:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001870:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001874:	4618      	mov	r0, r3
 8001876:	f7ff ff31 	bl	80016dc <__NVIC_EnableIRQ>
}
 800187a:	bf00      	nop
 800187c:	3708      	adds	r7, #8
 800187e:	46bd      	mov	sp, r7
 8001880:	bd80      	pop	{r7, pc}

08001882 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001882:	b580      	push	{r7, lr}
 8001884:	b082      	sub	sp, #8
 8001886:	af00      	add	r7, sp, #0
 8001888:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800188a:	6878      	ldr	r0, [r7, #4]
 800188c:	f7ff ffa2 	bl	80017d4 <SysTick_Config>
 8001890:	4603      	mov	r3, r0
}
 8001892:	4618      	mov	r0, r3
 8001894:	3708      	adds	r7, #8
 8001896:	46bd      	mov	sp, r7
 8001898:	bd80      	pop	{r7, pc}
	...

0800189c <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 800189c:	b580      	push	{r7, lr}
 800189e:	b086      	sub	sp, #24
 80018a0:	af00      	add	r7, sp, #0
 80018a2:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 80018a4:	2300      	movs	r3, #0
 80018a6:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = HAL_GetTick();
 80018a8:	f7ff feb6 	bl	8001618 <HAL_GetTick>
 80018ac:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 80018ae:	687b      	ldr	r3, [r7, #4]
 80018b0:	2b00      	cmp	r3, #0
 80018b2:	d101      	bne.n	80018b8 <HAL_DMA_Init+0x1c>
  {
    return HAL_ERROR;
 80018b4:	2301      	movs	r3, #1
 80018b6:	e099      	b.n	80019ec <HAL_DMA_Init+0x150>
    assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
    assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 80018b8:	687b      	ldr	r3, [r7, #4]
 80018ba:	2202      	movs	r2, #2
 80018bc:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 80018c0:	687b      	ldr	r3, [r7, #4]
 80018c2:	2200      	movs	r2, #0
 80018c4:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 80018c8:	687b      	ldr	r3, [r7, #4]
 80018ca:	681b      	ldr	r3, [r3, #0]
 80018cc:	681a      	ldr	r2, [r3, #0]
 80018ce:	687b      	ldr	r3, [r7, #4]
 80018d0:	681b      	ldr	r3, [r3, #0]
 80018d2:	f022 0201 	bic.w	r2, r2, #1
 80018d6:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 80018d8:	e00f      	b.n	80018fa <HAL_DMA_Init+0x5e>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 80018da:	f7ff fe9d 	bl	8001618 <HAL_GetTick>
 80018de:	4602      	mov	r2, r0
 80018e0:	693b      	ldr	r3, [r7, #16]
 80018e2:	1ad3      	subs	r3, r2, r3
 80018e4:	2b05      	cmp	r3, #5
 80018e6:	d908      	bls.n	80018fa <HAL_DMA_Init+0x5e>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 80018e8:	687b      	ldr	r3, [r7, #4]
 80018ea:	2220      	movs	r2, #32
 80018ec:	655a      	str	r2, [r3, #84]	; 0x54
      
      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 80018ee:	687b      	ldr	r3, [r7, #4]
 80018f0:	2203      	movs	r2, #3
 80018f2:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
      
      return HAL_TIMEOUT;
 80018f6:	2303      	movs	r3, #3
 80018f8:	e078      	b.n	80019ec <HAL_DMA_Init+0x150>
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 80018fa:	687b      	ldr	r3, [r7, #4]
 80018fc:	681b      	ldr	r3, [r3, #0]
 80018fe:	681b      	ldr	r3, [r3, #0]
 8001900:	f003 0301 	and.w	r3, r3, #1
 8001904:	2b00      	cmp	r3, #0
 8001906:	d1e8      	bne.n	80018da <HAL_DMA_Init+0x3e>
    }
  }
  
  /* Get the CR register value */
  tmp = hdma->Instance->CR;
 8001908:	687b      	ldr	r3, [r7, #4]
 800190a:	681b      	ldr	r3, [r3, #0]
 800190c:	681b      	ldr	r3, [r3, #0]
 800190e:	617b      	str	r3, [r7, #20]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 8001910:	697a      	ldr	r2, [r7, #20]
 8001912:	4b38      	ldr	r3, [pc, #224]	; (80019f4 <HAL_DMA_Init+0x158>)
 8001914:	4013      	ands	r3, r2
 8001916:	617b      	str	r3, [r7, #20]
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8001918:	687b      	ldr	r3, [r7, #4]
 800191a:	685a      	ldr	r2, [r3, #4]
 800191c:	687b      	ldr	r3, [r7, #4]
 800191e:	689b      	ldr	r3, [r3, #8]
 8001920:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8001922:	687b      	ldr	r3, [r7, #4]
 8001924:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8001926:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8001928:	687b      	ldr	r3, [r7, #4]
 800192a:	691b      	ldr	r3, [r3, #16]
 800192c:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800192e:	687b      	ldr	r3, [r7, #4]
 8001930:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8001932:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8001934:	687b      	ldr	r3, [r7, #4]
 8001936:	699b      	ldr	r3, [r3, #24]
 8001938:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 800193a:	687b      	ldr	r3, [r7, #4]
 800193c:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800193e:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8001940:	687b      	ldr	r3, [r7, #4]
 8001942:	6a1b      	ldr	r3, [r3, #32]
 8001944:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8001946:	697a      	ldr	r2, [r7, #20]
 8001948:	4313      	orrs	r3, r2
 800194a:	617b      	str	r3, [r7, #20]

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 800194c:	687b      	ldr	r3, [r7, #4]
 800194e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001950:	2b04      	cmp	r3, #4
 8001952:	d107      	bne.n	8001964 <HAL_DMA_Init+0xc8>
  {
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 8001954:	687b      	ldr	r3, [r7, #4]
 8001956:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8001958:	687b      	ldr	r3, [r7, #4]
 800195a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800195c:	4313      	orrs	r3, r2
 800195e:	697a      	ldr	r2, [r7, #20]
 8001960:	4313      	orrs	r3, r2
 8001962:	617b      	str	r3, [r7, #20]
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 8001964:	687b      	ldr	r3, [r7, #4]
 8001966:	681b      	ldr	r3, [r3, #0]
 8001968:	697a      	ldr	r2, [r7, #20]
 800196a:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 800196c:	687b      	ldr	r3, [r7, #4]
 800196e:	681b      	ldr	r3, [r3, #0]
 8001970:	695b      	ldr	r3, [r3, #20]
 8001972:	617b      	str	r3, [r7, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 8001974:	697b      	ldr	r3, [r7, #20]
 8001976:	f023 0307 	bic.w	r3, r3, #7
 800197a:	617b      	str	r3, [r7, #20]

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 800197c:	687b      	ldr	r3, [r7, #4]
 800197e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001980:	697a      	ldr	r2, [r7, #20]
 8001982:	4313      	orrs	r3, r2
 8001984:	617b      	str	r3, [r7, #20]

  /* The FIFO threshold is not used when the FIFO mode is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8001986:	687b      	ldr	r3, [r7, #4]
 8001988:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800198a:	2b04      	cmp	r3, #4
 800198c:	d117      	bne.n	80019be <HAL_DMA_Init+0x122>
  {
    /* Get the FIFO threshold */
    tmp |= hdma->Init.FIFOThreshold;
 800198e:	687b      	ldr	r3, [r7, #4]
 8001990:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001992:	697a      	ldr	r2, [r7, #20]
 8001994:	4313      	orrs	r3, r2
 8001996:	617b      	str	r3, [r7, #20]
    
    /* Check compatibility between FIFO threshold level and size of the memory burst */
    /* for INCR4, INCR8, INCR16 bursts */
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 8001998:	687b      	ldr	r3, [r7, #4]
 800199a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800199c:	2b00      	cmp	r3, #0
 800199e:	d00e      	beq.n	80019be <HAL_DMA_Init+0x122>
    {
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 80019a0:	6878      	ldr	r0, [r7, #4]
 80019a2:	f000 fb01 	bl	8001fa8 <DMA_CheckFifoParam>
 80019a6:	4603      	mov	r3, r0
 80019a8:	2b00      	cmp	r3, #0
 80019aa:	d008      	beq.n	80019be <HAL_DMA_Init+0x122>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 80019ac:	687b      	ldr	r3, [r7, #4]
 80019ae:	2240      	movs	r2, #64	; 0x40
 80019b0:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 80019b2:	687b      	ldr	r3, [r7, #4]
 80019b4:	2201      	movs	r2, #1
 80019b6:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        return HAL_ERROR; 
 80019ba:	2301      	movs	r3, #1
 80019bc:	e016      	b.n	80019ec <HAL_DMA_Init+0x150>
      }
    }
  }
  
  /* Write to DMA Stream FCR */
  hdma->Instance->FCR = tmp;
 80019be:	687b      	ldr	r3, [r7, #4]
 80019c0:	681b      	ldr	r3, [r3, #0]
 80019c2:	697a      	ldr	r2, [r7, #20]
 80019c4:	615a      	str	r2, [r3, #20]

  /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
     DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 80019c6:	6878      	ldr	r0, [r7, #4]
 80019c8:	f000 fab8 	bl	8001f3c <DMA_CalcBaseAndBitshift>
 80019cc:	4603      	mov	r3, r0
 80019ce:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 80019d0:	687b      	ldr	r3, [r7, #4]
 80019d2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80019d4:	223f      	movs	r2, #63	; 0x3f
 80019d6:	409a      	lsls	r2, r3
 80019d8:	68fb      	ldr	r3, [r7, #12]
 80019da:	609a      	str	r2, [r3, #8]

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80019dc:	687b      	ldr	r3, [r7, #4]
 80019de:	2200      	movs	r2, #0
 80019e0:	655a      	str	r2, [r3, #84]	; 0x54
                                                                                     
  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 80019e2:	687b      	ldr	r3, [r7, #4]
 80019e4:	2201      	movs	r2, #1
 80019e6:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  return HAL_OK;
 80019ea:	2300      	movs	r3, #0
}
 80019ec:	4618      	mov	r0, r3
 80019ee:	3718      	adds	r7, #24
 80019f0:	46bd      	mov	sp, r7
 80019f2:	bd80      	pop	{r7, pc}
 80019f4:	f010803f 	.word	0xf010803f

080019f8 <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 80019f8:	b580      	push	{r7, lr}
 80019fa:	b086      	sub	sp, #24
 80019fc:	af00      	add	r7, sp, #0
 80019fe:	60f8      	str	r0, [r7, #12]
 8001a00:	60b9      	str	r1, [r7, #8]
 8001a02:	607a      	str	r2, [r7, #4]
 8001a04:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8001a06:	2300      	movs	r3, #0
 8001a08:	75fb      	strb	r3, [r7, #23]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8001a0a:	68fb      	ldr	r3, [r7, #12]
 8001a0c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001a0e:	613b      	str	r3, [r7, #16]
  
  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));
 
  /* Process locked */
  __HAL_LOCK(hdma);
 8001a10:	68fb      	ldr	r3, [r7, #12]
 8001a12:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 8001a16:	2b01      	cmp	r3, #1
 8001a18:	d101      	bne.n	8001a1e <HAL_DMA_Start_IT+0x26>
 8001a1a:	2302      	movs	r3, #2
 8001a1c:	e040      	b.n	8001aa0 <HAL_DMA_Start_IT+0xa8>
 8001a1e:	68fb      	ldr	r3, [r7, #12]
 8001a20:	2201      	movs	r2, #1
 8001a22:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  if(HAL_DMA_STATE_READY == hdma->State)
 8001a26:	68fb      	ldr	r3, [r7, #12]
 8001a28:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8001a2c:	b2db      	uxtb	r3, r3
 8001a2e:	2b01      	cmp	r3, #1
 8001a30:	d12f      	bne.n	8001a92 <HAL_DMA_Start_IT+0x9a>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8001a32:	68fb      	ldr	r3, [r7, #12]
 8001a34:	2202      	movs	r2, #2
 8001a36:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8001a3a:	68fb      	ldr	r3, [r7, #12]
 8001a3c:	2200      	movs	r2, #0
 8001a3e:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8001a40:	683b      	ldr	r3, [r7, #0]
 8001a42:	687a      	ldr	r2, [r7, #4]
 8001a44:	68b9      	ldr	r1, [r7, #8]
 8001a46:	68f8      	ldr	r0, [r7, #12]
 8001a48:	f000 fa4a 	bl	8001ee0 <DMA_SetConfig>
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8001a4c:	68fb      	ldr	r3, [r7, #12]
 8001a4e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001a50:	223f      	movs	r2, #63	; 0x3f
 8001a52:	409a      	lsls	r2, r3
 8001a54:	693b      	ldr	r3, [r7, #16]
 8001a56:	609a      	str	r2, [r3, #8]
    
    /* Enable Common interrupts*/
    hdma->Instance->CR  |= DMA_IT_TC | DMA_IT_TE | DMA_IT_DME;
 8001a58:	68fb      	ldr	r3, [r7, #12]
 8001a5a:	681b      	ldr	r3, [r3, #0]
 8001a5c:	681a      	ldr	r2, [r3, #0]
 8001a5e:	68fb      	ldr	r3, [r7, #12]
 8001a60:	681b      	ldr	r3, [r3, #0]
 8001a62:	f042 0216 	orr.w	r2, r2, #22
 8001a66:	601a      	str	r2, [r3, #0]
    
    if(hdma->XferHalfCpltCallback != NULL)
 8001a68:	68fb      	ldr	r3, [r7, #12]
 8001a6a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001a6c:	2b00      	cmp	r3, #0
 8001a6e:	d007      	beq.n	8001a80 <HAL_DMA_Start_IT+0x88>
    {
      hdma->Instance->CR  |= DMA_IT_HT;
 8001a70:	68fb      	ldr	r3, [r7, #12]
 8001a72:	681b      	ldr	r3, [r3, #0]
 8001a74:	681a      	ldr	r2, [r3, #0]
 8001a76:	68fb      	ldr	r3, [r7, #12]
 8001a78:	681b      	ldr	r3, [r3, #0]
 8001a7a:	f042 0208 	orr.w	r2, r2, #8
 8001a7e:	601a      	str	r2, [r3, #0]
    }
    
    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8001a80:	68fb      	ldr	r3, [r7, #12]
 8001a82:	681b      	ldr	r3, [r3, #0]
 8001a84:	681a      	ldr	r2, [r3, #0]
 8001a86:	68fb      	ldr	r3, [r7, #12]
 8001a88:	681b      	ldr	r3, [r3, #0]
 8001a8a:	f042 0201 	orr.w	r2, r2, #1
 8001a8e:	601a      	str	r2, [r3, #0]
 8001a90:	e005      	b.n	8001a9e <HAL_DMA_Start_IT+0xa6>
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hdma);	  
 8001a92:	68fb      	ldr	r3, [r7, #12]
 8001a94:	2200      	movs	r2, #0
 8001a96:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    /* Return error status */
    status = HAL_BUSY;
 8001a9a:	2302      	movs	r3, #2
 8001a9c:	75fb      	strb	r3, [r7, #23]
  }
  
  return status;
 8001a9e:	7dfb      	ldrb	r3, [r7, #23]
}
 8001aa0:	4618      	mov	r0, r3
 8001aa2:	3718      	adds	r7, #24
 8001aa4:	46bd      	mov	sp, r7
 8001aa6:	bd80      	pop	{r7, pc}

08001aa8 <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8001aa8:	b580      	push	{r7, lr}
 8001aaa:	b084      	sub	sp, #16
 8001aac:	af00      	add	r7, sp, #0
 8001aae:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8001ab0:	687b      	ldr	r3, [r7, #4]
 8001ab2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001ab4:	60fb      	str	r3, [r7, #12]
  
  uint32_t tickstart = HAL_GetTick();
 8001ab6:	f7ff fdaf 	bl	8001618 <HAL_GetTick>
 8001aba:	60b8      	str	r0, [r7, #8]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8001abc:	687b      	ldr	r3, [r7, #4]
 8001abe:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8001ac2:	b2db      	uxtb	r3, r3
 8001ac4:	2b02      	cmp	r3, #2
 8001ac6:	d008      	beq.n	8001ada <HAL_DMA_Abort+0x32>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8001ac8:	687b      	ldr	r3, [r7, #4]
 8001aca:	2280      	movs	r2, #128	; 0x80
 8001acc:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001ace:	687b      	ldr	r3, [r7, #4]
 8001ad0:	2200      	movs	r2, #0
 8001ad2:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    return HAL_ERROR;
 8001ad6:	2301      	movs	r3, #1
 8001ad8:	e052      	b.n	8001b80 <HAL_DMA_Abort+0xd8>
  }
  else
  {
    /* Disable all the transfer interrupts */
    hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8001ada:	687b      	ldr	r3, [r7, #4]
 8001adc:	681b      	ldr	r3, [r3, #0]
 8001ade:	681a      	ldr	r2, [r3, #0]
 8001ae0:	687b      	ldr	r3, [r7, #4]
 8001ae2:	681b      	ldr	r3, [r3, #0]
 8001ae4:	f022 0216 	bic.w	r2, r2, #22
 8001ae8:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR &= ~(DMA_IT_FE);
 8001aea:	687b      	ldr	r3, [r7, #4]
 8001aec:	681b      	ldr	r3, [r3, #0]
 8001aee:	695a      	ldr	r2, [r3, #20]
 8001af0:	687b      	ldr	r3, [r7, #4]
 8001af2:	681b      	ldr	r3, [r3, #0]
 8001af4:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8001af8:	615a      	str	r2, [r3, #20]
    
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8001afa:	687b      	ldr	r3, [r7, #4]
 8001afc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001afe:	2b00      	cmp	r3, #0
 8001b00:	d103      	bne.n	8001b0a <HAL_DMA_Abort+0x62>
 8001b02:	687b      	ldr	r3, [r7, #4]
 8001b04:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8001b06:	2b00      	cmp	r3, #0
 8001b08:	d007      	beq.n	8001b1a <HAL_DMA_Abort+0x72>
    {
      hdma->Instance->CR  &= ~(DMA_IT_HT);
 8001b0a:	687b      	ldr	r3, [r7, #4]
 8001b0c:	681b      	ldr	r3, [r3, #0]
 8001b0e:	681a      	ldr	r2, [r3, #0]
 8001b10:	687b      	ldr	r3, [r7, #4]
 8001b12:	681b      	ldr	r3, [r3, #0]
 8001b14:	f022 0208 	bic.w	r2, r2, #8
 8001b18:	601a      	str	r2, [r3, #0]
    }
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8001b1a:	687b      	ldr	r3, [r7, #4]
 8001b1c:	681b      	ldr	r3, [r3, #0]
 8001b1e:	681a      	ldr	r2, [r3, #0]
 8001b20:	687b      	ldr	r3, [r7, #4]
 8001b22:	681b      	ldr	r3, [r3, #0]
 8001b24:	f022 0201 	bic.w	r2, r2, #1
 8001b28:	601a      	str	r2, [r3, #0]
    
    /* Check if the DMA Stream is effectively disabled */
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8001b2a:	e013      	b.n	8001b54 <HAL_DMA_Abort+0xac>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8001b2c:	f7ff fd74 	bl	8001618 <HAL_GetTick>
 8001b30:	4602      	mov	r2, r0
 8001b32:	68bb      	ldr	r3, [r7, #8]
 8001b34:	1ad3      	subs	r3, r2, r3
 8001b36:	2b05      	cmp	r3, #5
 8001b38:	d90c      	bls.n	8001b54 <HAL_DMA_Abort+0xac>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8001b3a:	687b      	ldr	r3, [r7, #4]
 8001b3c:	2220      	movs	r2, #32
 8001b3e:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_TIMEOUT;
 8001b40:	687b      	ldr	r3, [r7, #4]
 8001b42:	2203      	movs	r2, #3
 8001b44:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8001b48:	687b      	ldr	r3, [r7, #4]
 8001b4a:	2200      	movs	r2, #0
 8001b4c:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        
        return HAL_TIMEOUT;
 8001b50:	2303      	movs	r3, #3
 8001b52:	e015      	b.n	8001b80 <HAL_DMA_Abort+0xd8>
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8001b54:	687b      	ldr	r3, [r7, #4]
 8001b56:	681b      	ldr	r3, [r3, #0]
 8001b58:	681b      	ldr	r3, [r3, #0]
 8001b5a:	f003 0301 	and.w	r3, r3, #1
 8001b5e:	2b00      	cmp	r3, #0
 8001b60:	d1e4      	bne.n	8001b2c <HAL_DMA_Abort+0x84>
      }
    }
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8001b62:	687b      	ldr	r3, [r7, #4]
 8001b64:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001b66:	223f      	movs	r2, #63	; 0x3f
 8001b68:	409a      	lsls	r2, r3
 8001b6a:	68fb      	ldr	r3, [r7, #12]
 8001b6c:	609a      	str	r2, [r3, #8]
    
    /* Change the DMA state*/
    hdma->State = HAL_DMA_STATE_READY;
 8001b6e:	687b      	ldr	r3, [r7, #4]
 8001b70:	2201      	movs	r2, #1
 8001b72:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001b76:	687b      	ldr	r3, [r7, #4]
 8001b78:	2200      	movs	r2, #0
 8001b7a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  }
  return HAL_OK;
 8001b7e:	2300      	movs	r3, #0
}
 8001b80:	4618      	mov	r0, r3
 8001b82:	3710      	adds	r7, #16
 8001b84:	46bd      	mov	sp, r7
 8001b86:	bd80      	pop	{r7, pc}

08001b88 <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8001b88:	b480      	push	{r7}
 8001b8a:	b083      	sub	sp, #12
 8001b8c:	af00      	add	r7, sp, #0
 8001b8e:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8001b90:	687b      	ldr	r3, [r7, #4]
 8001b92:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8001b96:	b2db      	uxtb	r3, r3
 8001b98:	2b02      	cmp	r3, #2
 8001b9a:	d004      	beq.n	8001ba6 <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8001b9c:	687b      	ldr	r3, [r7, #4]
 8001b9e:	2280      	movs	r2, #128	; 0x80
 8001ba0:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 8001ba2:	2301      	movs	r3, #1
 8001ba4:	e00c      	b.n	8001bc0 <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 8001ba6:	687b      	ldr	r3, [r7, #4]
 8001ba8:	2205      	movs	r2, #5
 8001baa:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8001bae:	687b      	ldr	r3, [r7, #4]
 8001bb0:	681b      	ldr	r3, [r3, #0]
 8001bb2:	681a      	ldr	r2, [r3, #0]
 8001bb4:	687b      	ldr	r3, [r7, #4]
 8001bb6:	681b      	ldr	r3, [r3, #0]
 8001bb8:	f022 0201 	bic.w	r2, r2, #1
 8001bbc:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 8001bbe:	2300      	movs	r3, #0
}
 8001bc0:	4618      	mov	r0, r3
 8001bc2:	370c      	adds	r7, #12
 8001bc4:	46bd      	mov	sp, r7
 8001bc6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001bca:	4770      	bx	lr

08001bcc <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8001bcc:	b580      	push	{r7, lr}
 8001bce:	b086      	sub	sp, #24
 8001bd0:	af00      	add	r7, sp, #0
 8001bd2:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr;
  __IO uint32_t count = 0U;
 8001bd4:	2300      	movs	r3, #0
 8001bd6:	60bb      	str	r3, [r7, #8]
  uint32_t timeout = SystemCoreClock / 9600U;
 8001bd8:	4b8e      	ldr	r3, [pc, #568]	; (8001e14 <HAL_DMA_IRQHandler+0x248>)
 8001bda:	681b      	ldr	r3, [r3, #0]
 8001bdc:	4a8e      	ldr	r2, [pc, #568]	; (8001e18 <HAL_DMA_IRQHandler+0x24c>)
 8001bde:	fba2 2303 	umull	r2, r3, r2, r3
 8001be2:	0a9b      	lsrs	r3, r3, #10
 8001be4:	617b      	str	r3, [r7, #20]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8001be6:	687b      	ldr	r3, [r7, #4]
 8001be8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001bea:	613b      	str	r3, [r7, #16]

  tmpisr = regs->ISR;
 8001bec:	693b      	ldr	r3, [r7, #16]
 8001bee:	681b      	ldr	r3, [r3, #0]
 8001bf0:	60fb      	str	r3, [r7, #12]

  /* Transfer Error Interrupt management ***************************************/
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 8001bf2:	687b      	ldr	r3, [r7, #4]
 8001bf4:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001bf6:	2208      	movs	r2, #8
 8001bf8:	409a      	lsls	r2, r3
 8001bfa:	68fb      	ldr	r3, [r7, #12]
 8001bfc:	4013      	ands	r3, r2
 8001bfe:	2b00      	cmp	r3, #0
 8001c00:	d01a      	beq.n	8001c38 <HAL_DMA_IRQHandler+0x6c>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 8001c02:	687b      	ldr	r3, [r7, #4]
 8001c04:	681b      	ldr	r3, [r3, #0]
 8001c06:	681b      	ldr	r3, [r3, #0]
 8001c08:	f003 0304 	and.w	r3, r3, #4
 8001c0c:	2b00      	cmp	r3, #0
 8001c0e:	d013      	beq.n	8001c38 <HAL_DMA_IRQHandler+0x6c>
    {
      /* Disable the transfer error interrupt */
      hdma->Instance->CR  &= ~(DMA_IT_TE);
 8001c10:	687b      	ldr	r3, [r7, #4]
 8001c12:	681b      	ldr	r3, [r3, #0]
 8001c14:	681a      	ldr	r2, [r3, #0]
 8001c16:	687b      	ldr	r3, [r7, #4]
 8001c18:	681b      	ldr	r3, [r3, #0]
 8001c1a:	f022 0204 	bic.w	r2, r2, #4
 8001c1e:	601a      	str	r2, [r3, #0]
      
      /* Clear the transfer error flag */
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 8001c20:	687b      	ldr	r3, [r7, #4]
 8001c22:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001c24:	2208      	movs	r2, #8
 8001c26:	409a      	lsls	r2, r3
 8001c28:	693b      	ldr	r3, [r7, #16]
 8001c2a:	609a      	str	r2, [r3, #8]
      
      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 8001c2c:	687b      	ldr	r3, [r7, #4]
 8001c2e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001c30:	f043 0201 	orr.w	r2, r3, #1
 8001c34:	687b      	ldr	r3, [r7, #4]
 8001c36:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* FIFO Error Interrupt management ******************************************/
  if ((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
 8001c38:	687b      	ldr	r3, [r7, #4]
 8001c3a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001c3c:	2201      	movs	r2, #1
 8001c3e:	409a      	lsls	r2, r3
 8001c40:	68fb      	ldr	r3, [r7, #12]
 8001c42:	4013      	ands	r3, r2
 8001c44:	2b00      	cmp	r3, #0
 8001c46:	d012      	beq.n	8001c6e <HAL_DMA_IRQHandler+0xa2>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != RESET)
 8001c48:	687b      	ldr	r3, [r7, #4]
 8001c4a:	681b      	ldr	r3, [r3, #0]
 8001c4c:	695b      	ldr	r3, [r3, #20]
 8001c4e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001c52:	2b00      	cmp	r3, #0
 8001c54:	d00b      	beq.n	8001c6e <HAL_DMA_IRQHandler+0xa2>
    {
      /* Clear the FIFO error flag */
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 8001c56:	687b      	ldr	r3, [r7, #4]
 8001c58:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001c5a:	2201      	movs	r2, #1
 8001c5c:	409a      	lsls	r2, r3
 8001c5e:	693b      	ldr	r3, [r7, #16]
 8001c60:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 8001c62:	687b      	ldr	r3, [r7, #4]
 8001c64:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001c66:	f043 0202 	orr.w	r2, r3, #2
 8001c6a:	687b      	ldr	r3, [r7, #4]
 8001c6c:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Direct Mode Error Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
 8001c6e:	687b      	ldr	r3, [r7, #4]
 8001c70:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001c72:	2204      	movs	r2, #4
 8001c74:	409a      	lsls	r2, r3
 8001c76:	68fb      	ldr	r3, [r7, #12]
 8001c78:	4013      	ands	r3, r2
 8001c7a:	2b00      	cmp	r3, #0
 8001c7c:	d012      	beq.n	8001ca4 <HAL_DMA_IRQHandler+0xd8>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != RESET)
 8001c7e:	687b      	ldr	r3, [r7, #4]
 8001c80:	681b      	ldr	r3, [r3, #0]
 8001c82:	681b      	ldr	r3, [r3, #0]
 8001c84:	f003 0302 	and.w	r3, r3, #2
 8001c88:	2b00      	cmp	r3, #0
 8001c8a:	d00b      	beq.n	8001ca4 <HAL_DMA_IRQHandler+0xd8>
    {
      /* Clear the direct mode error flag */
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 8001c8c:	687b      	ldr	r3, [r7, #4]
 8001c8e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001c90:	2204      	movs	r2, #4
 8001c92:	409a      	lsls	r2, r3
 8001c94:	693b      	ldr	r3, [r7, #16]
 8001c96:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 8001c98:	687b      	ldr	r3, [r7, #4]
 8001c9a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001c9c:	f043 0204 	orr.w	r2, r3, #4
 8001ca0:	687b      	ldr	r3, [r7, #4]
 8001ca2:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Half Transfer Complete Interrupt management ******************************/
  if ((tmpisr & (DMA_FLAG_HTIF0_4 << hdma->StreamIndex)) != RESET)
 8001ca4:	687b      	ldr	r3, [r7, #4]
 8001ca6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001ca8:	2210      	movs	r2, #16
 8001caa:	409a      	lsls	r2, r3
 8001cac:	68fb      	ldr	r3, [r7, #12]
 8001cae:	4013      	ands	r3, r2
 8001cb0:	2b00      	cmp	r3, #0
 8001cb2:	d043      	beq.n	8001d3c <HAL_DMA_IRQHandler+0x170>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 8001cb4:	687b      	ldr	r3, [r7, #4]
 8001cb6:	681b      	ldr	r3, [r3, #0]
 8001cb8:	681b      	ldr	r3, [r3, #0]
 8001cba:	f003 0308 	and.w	r3, r3, #8
 8001cbe:	2b00      	cmp	r3, #0
 8001cc0:	d03c      	beq.n	8001d3c <HAL_DMA_IRQHandler+0x170>
    {
      /* Clear the half transfer complete flag */
      regs->IFCR = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 8001cc2:	687b      	ldr	r3, [r7, #4]
 8001cc4:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001cc6:	2210      	movs	r2, #16
 8001cc8:	409a      	lsls	r2, r3
 8001cca:	693b      	ldr	r3, [r7, #16]
 8001ccc:	609a      	str	r2, [r3, #8]
      
      /* Multi_Buffering mode enabled */
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8001cce:	687b      	ldr	r3, [r7, #4]
 8001cd0:	681b      	ldr	r3, [r3, #0]
 8001cd2:	681b      	ldr	r3, [r3, #0]
 8001cd4:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8001cd8:	2b00      	cmp	r3, #0
 8001cda:	d018      	beq.n	8001d0e <HAL_DMA_IRQHandler+0x142>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8001cdc:	687b      	ldr	r3, [r7, #4]
 8001cde:	681b      	ldr	r3, [r3, #0]
 8001ce0:	681b      	ldr	r3, [r3, #0]
 8001ce2:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8001ce6:	2b00      	cmp	r3, #0
 8001ce8:	d108      	bne.n	8001cfc <HAL_DMA_IRQHandler+0x130>
        {
          if(hdma->XferHalfCpltCallback != NULL)
 8001cea:	687b      	ldr	r3, [r7, #4]
 8001cec:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001cee:	2b00      	cmp	r3, #0
 8001cf0:	d024      	beq.n	8001d3c <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 8001cf2:	687b      	ldr	r3, [r7, #4]
 8001cf4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001cf6:	6878      	ldr	r0, [r7, #4]
 8001cf8:	4798      	blx	r3
 8001cfa:	e01f      	b.n	8001d3c <HAL_DMA_IRQHandler+0x170>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 8001cfc:	687b      	ldr	r3, [r7, #4]
 8001cfe:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8001d00:	2b00      	cmp	r3, #0
 8001d02:	d01b      	beq.n	8001d3c <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferM1HalfCpltCallback(hdma);
 8001d04:	687b      	ldr	r3, [r7, #4]
 8001d06:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8001d08:	6878      	ldr	r0, [r7, #4]
 8001d0a:	4798      	blx	r3
 8001d0c:	e016      	b.n	8001d3c <HAL_DMA_IRQHandler+0x170>
        }
      }
      else
      {
        /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8001d0e:	687b      	ldr	r3, [r7, #4]
 8001d10:	681b      	ldr	r3, [r3, #0]
 8001d12:	681b      	ldr	r3, [r3, #0]
 8001d14:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001d18:	2b00      	cmp	r3, #0
 8001d1a:	d107      	bne.n	8001d2c <HAL_DMA_IRQHandler+0x160>
        {
          /* Disable the half transfer interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8001d1c:	687b      	ldr	r3, [r7, #4]
 8001d1e:	681b      	ldr	r3, [r3, #0]
 8001d20:	681a      	ldr	r2, [r3, #0]
 8001d22:	687b      	ldr	r3, [r7, #4]
 8001d24:	681b      	ldr	r3, [r3, #0]
 8001d26:	f022 0208 	bic.w	r2, r2, #8
 8001d2a:	601a      	str	r2, [r3, #0]
        }
        
        if(hdma->XferHalfCpltCallback != NULL)
 8001d2c:	687b      	ldr	r3, [r7, #4]
 8001d2e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001d30:	2b00      	cmp	r3, #0
 8001d32:	d003      	beq.n	8001d3c <HAL_DMA_IRQHandler+0x170>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 8001d34:	687b      	ldr	r3, [r7, #4]
 8001d36:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001d38:	6878      	ldr	r0, [r7, #4]
 8001d3a:	4798      	blx	r3
        }
      }
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
 8001d3c:	687b      	ldr	r3, [r7, #4]
 8001d3e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001d40:	2220      	movs	r2, #32
 8001d42:	409a      	lsls	r2, r3
 8001d44:	68fb      	ldr	r3, [r7, #12]
 8001d46:	4013      	ands	r3, r2
 8001d48:	2b00      	cmp	r3, #0
 8001d4a:	f000 808f 	beq.w	8001e6c <HAL_DMA_IRQHandler+0x2a0>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 8001d4e:	687b      	ldr	r3, [r7, #4]
 8001d50:	681b      	ldr	r3, [r3, #0]
 8001d52:	681b      	ldr	r3, [r3, #0]
 8001d54:	f003 0310 	and.w	r3, r3, #16
 8001d58:	2b00      	cmp	r3, #0
 8001d5a:	f000 8087 	beq.w	8001e6c <HAL_DMA_IRQHandler+0x2a0>
    {
      /* Clear the transfer complete flag */
      regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 8001d5e:	687b      	ldr	r3, [r7, #4]
 8001d60:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001d62:	2220      	movs	r2, #32
 8001d64:	409a      	lsls	r2, r3
 8001d66:	693b      	ldr	r3, [r7, #16]
 8001d68:	609a      	str	r2, [r3, #8]
      
      if(HAL_DMA_STATE_ABORT == hdma->State)
 8001d6a:	687b      	ldr	r3, [r7, #4]
 8001d6c:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8001d70:	b2db      	uxtb	r3, r3
 8001d72:	2b05      	cmp	r3, #5
 8001d74:	d136      	bne.n	8001de4 <HAL_DMA_IRQHandler+0x218>
      {
        /* Disable all the transfer interrupts */
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8001d76:	687b      	ldr	r3, [r7, #4]
 8001d78:	681b      	ldr	r3, [r3, #0]
 8001d7a:	681a      	ldr	r2, [r3, #0]
 8001d7c:	687b      	ldr	r3, [r7, #4]
 8001d7e:	681b      	ldr	r3, [r3, #0]
 8001d80:	f022 0216 	bic.w	r2, r2, #22
 8001d84:	601a      	str	r2, [r3, #0]
        hdma->Instance->FCR &= ~(DMA_IT_FE);
 8001d86:	687b      	ldr	r3, [r7, #4]
 8001d88:	681b      	ldr	r3, [r3, #0]
 8001d8a:	695a      	ldr	r2, [r3, #20]
 8001d8c:	687b      	ldr	r3, [r7, #4]
 8001d8e:	681b      	ldr	r3, [r3, #0]
 8001d90:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8001d94:	615a      	str	r2, [r3, #20]
        
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8001d96:	687b      	ldr	r3, [r7, #4]
 8001d98:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001d9a:	2b00      	cmp	r3, #0
 8001d9c:	d103      	bne.n	8001da6 <HAL_DMA_IRQHandler+0x1da>
 8001d9e:	687b      	ldr	r3, [r7, #4]
 8001da0:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8001da2:	2b00      	cmp	r3, #0
 8001da4:	d007      	beq.n	8001db6 <HAL_DMA_IRQHandler+0x1ea>
        {
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8001da6:	687b      	ldr	r3, [r7, #4]
 8001da8:	681b      	ldr	r3, [r3, #0]
 8001daa:	681a      	ldr	r2, [r3, #0]
 8001dac:	687b      	ldr	r3, [r7, #4]
 8001dae:	681b      	ldr	r3, [r3, #0]
 8001db0:	f022 0208 	bic.w	r2, r2, #8
 8001db4:	601a      	str	r2, [r3, #0]
        }

        /* Clear all interrupt flags at correct offset within the register */
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 8001db6:	687b      	ldr	r3, [r7, #4]
 8001db8:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001dba:	223f      	movs	r2, #63	; 0x3f
 8001dbc:	409a      	lsls	r2, r3
 8001dbe:	693b      	ldr	r3, [r7, #16]
 8001dc0:	609a      	str	r2, [r3, #8]

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8001dc2:	687b      	ldr	r3, [r7, #4]
 8001dc4:	2201      	movs	r2, #1
 8001dc6:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8001dca:	687b      	ldr	r3, [r7, #4]
 8001dcc:	2200      	movs	r2, #0
 8001dce:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

        if(hdma->XferAbortCallback != NULL)
 8001dd2:	687b      	ldr	r3, [r7, #4]
 8001dd4:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8001dd6:	2b00      	cmp	r3, #0
 8001dd8:	d07e      	beq.n	8001ed8 <HAL_DMA_IRQHandler+0x30c>
        {
          hdma->XferAbortCallback(hdma);
 8001dda:	687b      	ldr	r3, [r7, #4]
 8001ddc:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8001dde:	6878      	ldr	r0, [r7, #4]
 8001de0:	4798      	blx	r3
        }
        return;
 8001de2:	e079      	b.n	8001ed8 <HAL_DMA_IRQHandler+0x30c>
      }

      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8001de4:	687b      	ldr	r3, [r7, #4]
 8001de6:	681b      	ldr	r3, [r3, #0]
 8001de8:	681b      	ldr	r3, [r3, #0]
 8001dea:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8001dee:	2b00      	cmp	r3, #0
 8001df0:	d01d      	beq.n	8001e2e <HAL_DMA_IRQHandler+0x262>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8001df2:	687b      	ldr	r3, [r7, #4]
 8001df4:	681b      	ldr	r3, [r3, #0]
 8001df6:	681b      	ldr	r3, [r3, #0]
 8001df8:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8001dfc:	2b00      	cmp	r3, #0
 8001dfe:	d10d      	bne.n	8001e1c <HAL_DMA_IRQHandler+0x250>
        {
          if(hdma->XferM1CpltCallback != NULL)
 8001e00:	687b      	ldr	r3, [r7, #4]
 8001e02:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001e04:	2b00      	cmp	r3, #0
 8001e06:	d031      	beq.n	8001e6c <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory1 */
            hdma->XferM1CpltCallback(hdma);
 8001e08:	687b      	ldr	r3, [r7, #4]
 8001e0a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001e0c:	6878      	ldr	r0, [r7, #4]
 8001e0e:	4798      	blx	r3
 8001e10:	e02c      	b.n	8001e6c <HAL_DMA_IRQHandler+0x2a0>
 8001e12:	bf00      	nop
 8001e14:	20000000 	.word	0x20000000
 8001e18:	1b4e81b5 	.word	0x1b4e81b5
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 8001e1c:	687b      	ldr	r3, [r7, #4]
 8001e1e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001e20:	2b00      	cmp	r3, #0
 8001e22:	d023      	beq.n	8001e6c <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory0 */
            hdma->XferCpltCallback(hdma);
 8001e24:	687b      	ldr	r3, [r7, #4]
 8001e26:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001e28:	6878      	ldr	r0, [r7, #4]
 8001e2a:	4798      	blx	r3
 8001e2c:	e01e      	b.n	8001e6c <HAL_DMA_IRQHandler+0x2a0>
        }
      }
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      else
      {
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8001e2e:	687b      	ldr	r3, [r7, #4]
 8001e30:	681b      	ldr	r3, [r3, #0]
 8001e32:	681b      	ldr	r3, [r3, #0]
 8001e34:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001e38:	2b00      	cmp	r3, #0
 8001e3a:	d10f      	bne.n	8001e5c <HAL_DMA_IRQHandler+0x290>
        {
          /* Disable the transfer complete interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 8001e3c:	687b      	ldr	r3, [r7, #4]
 8001e3e:	681b      	ldr	r3, [r3, #0]
 8001e40:	681a      	ldr	r2, [r3, #0]
 8001e42:	687b      	ldr	r3, [r7, #4]
 8001e44:	681b      	ldr	r3, [r3, #0]
 8001e46:	f022 0210 	bic.w	r2, r2, #16
 8001e4a:	601a      	str	r2, [r3, #0]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 8001e4c:	687b      	ldr	r3, [r7, #4]
 8001e4e:	2201      	movs	r2, #1
 8001e50:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 8001e54:	687b      	ldr	r3, [r7, #4]
 8001e56:	2200      	movs	r2, #0
 8001e58:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        }

        if(hdma->XferCpltCallback != NULL)
 8001e5c:	687b      	ldr	r3, [r7, #4]
 8001e5e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001e60:	2b00      	cmp	r3, #0
 8001e62:	d003      	beq.n	8001e6c <HAL_DMA_IRQHandler+0x2a0>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 8001e64:	687b      	ldr	r3, [r7, #4]
 8001e66:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001e68:	6878      	ldr	r0, [r7, #4]
 8001e6a:	4798      	blx	r3
      }
    }
  }
  
  /* manage error case */
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 8001e6c:	687b      	ldr	r3, [r7, #4]
 8001e6e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001e70:	2b00      	cmp	r3, #0
 8001e72:	d032      	beq.n	8001eda <HAL_DMA_IRQHandler+0x30e>
  {
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
 8001e74:	687b      	ldr	r3, [r7, #4]
 8001e76:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001e78:	f003 0301 	and.w	r3, r3, #1
 8001e7c:	2b00      	cmp	r3, #0
 8001e7e:	d022      	beq.n	8001ec6 <HAL_DMA_IRQHandler+0x2fa>
    {
      hdma->State = HAL_DMA_STATE_ABORT;
 8001e80:	687b      	ldr	r3, [r7, #4]
 8001e82:	2205      	movs	r2, #5
 8001e84:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 8001e88:	687b      	ldr	r3, [r7, #4]
 8001e8a:	681b      	ldr	r3, [r3, #0]
 8001e8c:	681a      	ldr	r2, [r3, #0]
 8001e8e:	687b      	ldr	r3, [r7, #4]
 8001e90:	681b      	ldr	r3, [r3, #0]
 8001e92:	f022 0201 	bic.w	r2, r2, #1
 8001e96:	601a      	str	r2, [r3, #0]

      do
      {
        if (++count > timeout)
 8001e98:	68bb      	ldr	r3, [r7, #8]
 8001e9a:	3301      	adds	r3, #1
 8001e9c:	60bb      	str	r3, [r7, #8]
 8001e9e:	697a      	ldr	r2, [r7, #20]
 8001ea0:	429a      	cmp	r2, r3
 8001ea2:	d307      	bcc.n	8001eb4 <HAL_DMA_IRQHandler+0x2e8>
        {
          break;
        }
      }
      while((hdma->Instance->CR & DMA_SxCR_EN) != RESET);
 8001ea4:	687b      	ldr	r3, [r7, #4]
 8001ea6:	681b      	ldr	r3, [r3, #0]
 8001ea8:	681b      	ldr	r3, [r3, #0]
 8001eaa:	f003 0301 	and.w	r3, r3, #1
 8001eae:	2b00      	cmp	r3, #0
 8001eb0:	d1f2      	bne.n	8001e98 <HAL_DMA_IRQHandler+0x2cc>
 8001eb2:	e000      	b.n	8001eb6 <HAL_DMA_IRQHandler+0x2ea>
          break;
 8001eb4:	bf00      	nop

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8001eb6:	687b      	ldr	r3, [r7, #4]
 8001eb8:	2201      	movs	r2, #1
 8001eba:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 8001ebe:	687b      	ldr	r3, [r7, #4]
 8001ec0:	2200      	movs	r2, #0
 8001ec2:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    }

    if(hdma->XferErrorCallback != NULL)
 8001ec6:	687b      	ldr	r3, [r7, #4]
 8001ec8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001eca:	2b00      	cmp	r3, #0
 8001ecc:	d005      	beq.n	8001eda <HAL_DMA_IRQHandler+0x30e>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8001ece:	687b      	ldr	r3, [r7, #4]
 8001ed0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001ed2:	6878      	ldr	r0, [r7, #4]
 8001ed4:	4798      	blx	r3
 8001ed6:	e000      	b.n	8001eda <HAL_DMA_IRQHandler+0x30e>
        return;
 8001ed8:	bf00      	nop
    }
  }
}
 8001eda:	3718      	adds	r7, #24
 8001edc:	46bd      	mov	sp, r7
 8001ede:	bd80      	pop	{r7, pc}

08001ee0 <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8001ee0:	b480      	push	{r7}
 8001ee2:	b085      	sub	sp, #20
 8001ee4:	af00      	add	r7, sp, #0
 8001ee6:	60f8      	str	r0, [r7, #12]
 8001ee8:	60b9      	str	r1, [r7, #8]
 8001eea:	607a      	str	r2, [r7, #4]
 8001eec:	603b      	str	r3, [r7, #0]
  /* Clear DBM bit */
  hdma->Instance->CR &= (uint32_t)(~DMA_SxCR_DBM);
 8001eee:	68fb      	ldr	r3, [r7, #12]
 8001ef0:	681b      	ldr	r3, [r3, #0]
 8001ef2:	681a      	ldr	r2, [r3, #0]
 8001ef4:	68fb      	ldr	r3, [r7, #12]
 8001ef6:	681b      	ldr	r3, [r3, #0]
 8001ef8:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8001efc:	601a      	str	r2, [r3, #0]

  /* Configure DMA Stream data length */
  hdma->Instance->NDTR = DataLength;
 8001efe:	68fb      	ldr	r3, [r7, #12]
 8001f00:	681b      	ldr	r3, [r3, #0]
 8001f02:	683a      	ldr	r2, [r7, #0]
 8001f04:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8001f06:	68fb      	ldr	r3, [r7, #12]
 8001f08:	689b      	ldr	r3, [r3, #8]
 8001f0a:	2b40      	cmp	r3, #64	; 0x40
 8001f0c:	d108      	bne.n	8001f20 <DMA_SetConfig+0x40>
  {
    /* Configure DMA Stream destination address */
    hdma->Instance->PAR = DstAddress;
 8001f0e:	68fb      	ldr	r3, [r7, #12]
 8001f10:	681b      	ldr	r3, [r3, #0]
 8001f12:	687a      	ldr	r2, [r7, #4]
 8001f14:	609a      	str	r2, [r3, #8]

    /* Configure DMA Stream source address */
    hdma->Instance->M0AR = SrcAddress;
 8001f16:	68fb      	ldr	r3, [r7, #12]
 8001f18:	681b      	ldr	r3, [r3, #0]
 8001f1a:	68ba      	ldr	r2, [r7, #8]
 8001f1c:	60da      	str	r2, [r3, #12]
    hdma->Instance->PAR = SrcAddress;

    /* Configure DMA Stream destination address */
    hdma->Instance->M0AR = DstAddress;
  }
}
 8001f1e:	e007      	b.n	8001f30 <DMA_SetConfig+0x50>
    hdma->Instance->PAR = SrcAddress;
 8001f20:	68fb      	ldr	r3, [r7, #12]
 8001f22:	681b      	ldr	r3, [r3, #0]
 8001f24:	68ba      	ldr	r2, [r7, #8]
 8001f26:	609a      	str	r2, [r3, #8]
    hdma->Instance->M0AR = DstAddress;
 8001f28:	68fb      	ldr	r3, [r7, #12]
 8001f2a:	681b      	ldr	r3, [r3, #0]
 8001f2c:	687a      	ldr	r2, [r7, #4]
 8001f2e:	60da      	str	r2, [r3, #12]
}
 8001f30:	bf00      	nop
 8001f32:	3714      	adds	r7, #20
 8001f34:	46bd      	mov	sp, r7
 8001f36:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f3a:	4770      	bx	lr

08001f3c <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 8001f3c:	b480      	push	{r7}
 8001f3e:	b085      	sub	sp, #20
 8001f40:	af00      	add	r7, sp, #0
 8001f42:	6078      	str	r0, [r7, #4]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 8001f44:	687b      	ldr	r3, [r7, #4]
 8001f46:	681b      	ldr	r3, [r3, #0]
 8001f48:	b2db      	uxtb	r3, r3
 8001f4a:	3b10      	subs	r3, #16
 8001f4c:	4a14      	ldr	r2, [pc, #80]	; (8001fa0 <DMA_CalcBaseAndBitshift+0x64>)
 8001f4e:	fba2 2303 	umull	r2, r3, r2, r3
 8001f52:	091b      	lsrs	r3, r3, #4
 8001f54:	60fb      	str	r3, [r7, #12]
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 8001f56:	4a13      	ldr	r2, [pc, #76]	; (8001fa4 <DMA_CalcBaseAndBitshift+0x68>)
 8001f58:	68fb      	ldr	r3, [r7, #12]
 8001f5a:	4413      	add	r3, r2
 8001f5c:	781b      	ldrb	r3, [r3, #0]
 8001f5e:	461a      	mov	r2, r3
 8001f60:	687b      	ldr	r3, [r7, #4]
 8001f62:	65da      	str	r2, [r3, #92]	; 0x5c
  
  if (stream_number > 3U)
 8001f64:	68fb      	ldr	r3, [r7, #12]
 8001f66:	2b03      	cmp	r3, #3
 8001f68:	d909      	bls.n	8001f7e <DMA_CalcBaseAndBitshift+0x42>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 8001f6a:	687b      	ldr	r3, [r7, #4]
 8001f6c:	681b      	ldr	r3, [r3, #0]
 8001f6e:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 8001f72:	f023 0303 	bic.w	r3, r3, #3
 8001f76:	1d1a      	adds	r2, r3, #4
 8001f78:	687b      	ldr	r3, [r7, #4]
 8001f7a:	659a      	str	r2, [r3, #88]	; 0x58
 8001f7c:	e007      	b.n	8001f8e <DMA_CalcBaseAndBitshift+0x52>
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 8001f7e:	687b      	ldr	r3, [r7, #4]
 8001f80:	681b      	ldr	r3, [r3, #0]
 8001f82:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 8001f86:	f023 0303 	bic.w	r3, r3, #3
 8001f8a:	687a      	ldr	r2, [r7, #4]
 8001f8c:	6593      	str	r3, [r2, #88]	; 0x58
  }
  
  return hdma->StreamBaseAddress;
 8001f8e:	687b      	ldr	r3, [r7, #4]
 8001f90:	6d9b      	ldr	r3, [r3, #88]	; 0x58
}
 8001f92:	4618      	mov	r0, r3
 8001f94:	3714      	adds	r7, #20
 8001f96:	46bd      	mov	sp, r7
 8001f98:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f9c:	4770      	bx	lr
 8001f9e:	bf00      	nop
 8001fa0:	aaaaaaab 	.word	0xaaaaaaab
 8001fa4:	0801c1c8 	.word	0x0801c1c8

08001fa8 <DMA_CheckFifoParam>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 8001fa8:	b480      	push	{r7}
 8001faa:	b085      	sub	sp, #20
 8001fac:	af00      	add	r7, sp, #0
 8001fae:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8001fb0:	2300      	movs	r3, #0
 8001fb2:	73fb      	strb	r3, [r7, #15]
  uint32_t tmp = hdma->Init.FIFOThreshold;
 8001fb4:	687b      	ldr	r3, [r7, #4]
 8001fb6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001fb8:	60bb      	str	r3, [r7, #8]
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 8001fba:	687b      	ldr	r3, [r7, #4]
 8001fbc:	699b      	ldr	r3, [r3, #24]
 8001fbe:	2b00      	cmp	r3, #0
 8001fc0:	d11f      	bne.n	8002002 <DMA_CheckFifoParam+0x5a>
  {
    switch (tmp)
 8001fc2:	68bb      	ldr	r3, [r7, #8]
 8001fc4:	2b03      	cmp	r3, #3
 8001fc6:	d856      	bhi.n	8002076 <DMA_CheckFifoParam+0xce>
 8001fc8:	a201      	add	r2, pc, #4	; (adr r2, 8001fd0 <DMA_CheckFifoParam+0x28>)
 8001fca:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001fce:	bf00      	nop
 8001fd0:	08001fe1 	.word	0x08001fe1
 8001fd4:	08001ff3 	.word	0x08001ff3
 8001fd8:	08001fe1 	.word	0x08001fe1
 8001fdc:	08002077 	.word	0x08002077
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8001fe0:	687b      	ldr	r3, [r7, #4]
 8001fe2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001fe4:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8001fe8:	2b00      	cmp	r3, #0
 8001fea:	d046      	beq.n	800207a <DMA_CheckFifoParam+0xd2>
      {
        status = HAL_ERROR;
 8001fec:	2301      	movs	r3, #1
 8001fee:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8001ff0:	e043      	b.n	800207a <DMA_CheckFifoParam+0xd2>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8001ff2:	687b      	ldr	r3, [r7, #4]
 8001ff4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001ff6:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8001ffa:	d140      	bne.n	800207e <DMA_CheckFifoParam+0xd6>
      {
        status = HAL_ERROR;
 8001ffc:	2301      	movs	r3, #1
 8001ffe:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8002000:	e03d      	b.n	800207e <DMA_CheckFifoParam+0xd6>
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 8002002:	687b      	ldr	r3, [r7, #4]
 8002004:	699b      	ldr	r3, [r3, #24]
 8002006:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800200a:	d121      	bne.n	8002050 <DMA_CheckFifoParam+0xa8>
  {
    switch (tmp)
 800200c:	68bb      	ldr	r3, [r7, #8]
 800200e:	2b03      	cmp	r3, #3
 8002010:	d837      	bhi.n	8002082 <DMA_CheckFifoParam+0xda>
 8002012:	a201      	add	r2, pc, #4	; (adr r2, 8002018 <DMA_CheckFifoParam+0x70>)
 8002014:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002018:	08002029 	.word	0x08002029
 800201c:	0800202f 	.word	0x0800202f
 8002020:	08002029 	.word	0x08002029
 8002024:	08002041 	.word	0x08002041
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
 8002028:	2301      	movs	r3, #1
 800202a:	73fb      	strb	r3, [r7, #15]
      break;
 800202c:	e030      	b.n	8002090 <DMA_CheckFifoParam+0xe8>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 800202e:	687b      	ldr	r3, [r7, #4]
 8002030:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002032:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8002036:	2b00      	cmp	r3, #0
 8002038:	d025      	beq.n	8002086 <DMA_CheckFifoParam+0xde>
      {
        status = HAL_ERROR;
 800203a:	2301      	movs	r3, #1
 800203c:	73fb      	strb	r3, [r7, #15]
      }
      break;
 800203e:	e022      	b.n	8002086 <DMA_CheckFifoParam+0xde>
    case DMA_FIFO_THRESHOLD_FULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8002040:	687b      	ldr	r3, [r7, #4]
 8002042:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002044:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8002048:	d11f      	bne.n	800208a <DMA_CheckFifoParam+0xe2>
      {
        status = HAL_ERROR;
 800204a:	2301      	movs	r3, #1
 800204c:	73fb      	strb	r3, [r7, #15]
      }
      break;   
 800204e:	e01c      	b.n	800208a <DMA_CheckFifoParam+0xe2>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 8002050:	68bb      	ldr	r3, [r7, #8]
 8002052:	2b02      	cmp	r3, #2
 8002054:	d903      	bls.n	800205e <DMA_CheckFifoParam+0xb6>
 8002056:	68bb      	ldr	r3, [r7, #8]
 8002058:	2b03      	cmp	r3, #3
 800205a:	d003      	beq.n	8002064 <DMA_CheckFifoParam+0xbc>
      {
        status = HAL_ERROR;
      }
      break;
    default:
      break;
 800205c:	e018      	b.n	8002090 <DMA_CheckFifoParam+0xe8>
      status = HAL_ERROR;
 800205e:	2301      	movs	r3, #1
 8002060:	73fb      	strb	r3, [r7, #15]
      break;
 8002062:	e015      	b.n	8002090 <DMA_CheckFifoParam+0xe8>
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8002064:	687b      	ldr	r3, [r7, #4]
 8002066:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002068:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 800206c:	2b00      	cmp	r3, #0
 800206e:	d00e      	beq.n	800208e <DMA_CheckFifoParam+0xe6>
        status = HAL_ERROR;
 8002070:	2301      	movs	r3, #1
 8002072:	73fb      	strb	r3, [r7, #15]
      break;
 8002074:	e00b      	b.n	800208e <DMA_CheckFifoParam+0xe6>
      break;
 8002076:	bf00      	nop
 8002078:	e00a      	b.n	8002090 <DMA_CheckFifoParam+0xe8>
      break;
 800207a:	bf00      	nop
 800207c:	e008      	b.n	8002090 <DMA_CheckFifoParam+0xe8>
      break;
 800207e:	bf00      	nop
 8002080:	e006      	b.n	8002090 <DMA_CheckFifoParam+0xe8>
      break;
 8002082:	bf00      	nop
 8002084:	e004      	b.n	8002090 <DMA_CheckFifoParam+0xe8>
      break;
 8002086:	bf00      	nop
 8002088:	e002      	b.n	8002090 <DMA_CheckFifoParam+0xe8>
      break;   
 800208a:	bf00      	nop
 800208c:	e000      	b.n	8002090 <DMA_CheckFifoParam+0xe8>
      break;
 800208e:	bf00      	nop
    }
  } 
  
  return status; 
 8002090:	7bfb      	ldrb	r3, [r7, #15]
}
 8002092:	4618      	mov	r0, r3
 8002094:	3714      	adds	r7, #20
 8002096:	46bd      	mov	sp, r7
 8002098:	f85d 7b04 	ldr.w	r7, [sp], #4
 800209c:	4770      	bx	lr
 800209e:	bf00      	nop

080020a0 <HAL_ETH_Init>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_Init(ETH_HandleTypeDef *heth)
{
 80020a0:	b580      	push	{r7, lr}
 80020a2:	b084      	sub	sp, #16
 80020a4:	af00      	add	r7, sp, #0
 80020a6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  if (heth == NULL)
 80020a8:	687b      	ldr	r3, [r7, #4]
 80020aa:	2b00      	cmp	r3, #0
 80020ac:	d101      	bne.n	80020b2 <HAL_ETH_Init+0x12>
  {
    return HAL_ERROR;
 80020ae:	2301      	movs	r3, #1
 80020b0:	e08a      	b.n	80021c8 <HAL_ETH_Init+0x128>
  }
  if (heth->gState == HAL_ETH_STATE_RESET)
 80020b2:	687b      	ldr	r3, [r7, #4]
 80020b4:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80020b8:	2b00      	cmp	r3, #0
 80020ba:	d106      	bne.n	80020ca <HAL_ETH_Init+0x2a>
  {
    heth->gState = HAL_ETH_STATE_BUSY;
 80020bc:	687b      	ldr	r3, [r7, #4]
 80020be:	2223      	movs	r2, #35	; 0x23
 80020c0:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

    /* Init the low level hardware */
    heth->MspInitCallback(heth);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC. */
    HAL_ETH_MspInit(heth);
 80020c4:	6878      	ldr	r0, [r7, #4]
 80020c6:	f005 ff1f 	bl	8007f08 <HAL_ETH_MspInit>

#endif /* (USE_HAL_ETH_REGISTER_CALLBACKS) */
  }

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80020ca:	2300      	movs	r3, #0
 80020cc:	60bb      	str	r3, [r7, #8]
 80020ce:	4b40      	ldr	r3, [pc, #256]	; (80021d0 <HAL_ETH_Init+0x130>)
 80020d0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80020d2:	4a3f      	ldr	r2, [pc, #252]	; (80021d0 <HAL_ETH_Init+0x130>)
 80020d4:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80020d8:	6453      	str	r3, [r2, #68]	; 0x44
 80020da:	4b3d      	ldr	r3, [pc, #244]	; (80021d0 <HAL_ETH_Init+0x130>)
 80020dc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80020de:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80020e2:	60bb      	str	r3, [r7, #8]
 80020e4:	68bb      	ldr	r3, [r7, #8]

  /* Select MII or RMII Mode*/
  SYSCFG->PMC &= ~(SYSCFG_PMC_MII_RMII_SEL);
 80020e6:	4b3b      	ldr	r3, [pc, #236]	; (80021d4 <HAL_ETH_Init+0x134>)
 80020e8:	685b      	ldr	r3, [r3, #4]
 80020ea:	4a3a      	ldr	r2, [pc, #232]	; (80021d4 <HAL_ETH_Init+0x134>)
 80020ec:	f423 0300 	bic.w	r3, r3, #8388608	; 0x800000
 80020f0:	6053      	str	r3, [r2, #4]
  SYSCFG->PMC |= (uint32_t)heth->Init.MediaInterface;
 80020f2:	4b38      	ldr	r3, [pc, #224]	; (80021d4 <HAL_ETH_Init+0x134>)
 80020f4:	685a      	ldr	r2, [r3, #4]
 80020f6:	687b      	ldr	r3, [r7, #4]
 80020f8:	689b      	ldr	r3, [r3, #8]
 80020fa:	4936      	ldr	r1, [pc, #216]	; (80021d4 <HAL_ETH_Init+0x134>)
 80020fc:	4313      	orrs	r3, r2
 80020fe:	604b      	str	r3, [r1, #4]
  /* Dummy read to sync SYSCFG with ETH */
  (void)SYSCFG->PMC;
 8002100:	4b34      	ldr	r3, [pc, #208]	; (80021d4 <HAL_ETH_Init+0x134>)
 8002102:	685b      	ldr	r3, [r3, #4]

  /* Ethernet Software reset */
  /* Set the SWR bit: resets all MAC subsystem internal registers and logic */
  /* After reset all the registers holds their respective reset values */
  SET_BIT(heth->Instance->DMABMR, ETH_DMABMR_SR);
 8002104:	687b      	ldr	r3, [r7, #4]
 8002106:	681b      	ldr	r3, [r3, #0]
 8002108:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800210c:	681b      	ldr	r3, [r3, #0]
 800210e:	687a      	ldr	r2, [r7, #4]
 8002110:	6812      	ldr	r2, [r2, #0]
 8002112:	f043 0301 	orr.w	r3, r3, #1
 8002116:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 800211a:	6013      	str	r3, [r2, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 800211c:	f7ff fa7c 	bl	8001618 <HAL_GetTick>
 8002120:	60f8      	str	r0, [r7, #12]

  /* Wait for software reset */
  while (READ_BIT(heth->Instance->DMABMR, ETH_DMABMR_SR) > 0U)
 8002122:	e011      	b.n	8002148 <HAL_ETH_Init+0xa8>
  {
    if (((HAL_GetTick() - tickstart) > ETH_SWRESET_TIMEOUT))
 8002124:	f7ff fa78 	bl	8001618 <HAL_GetTick>
 8002128:	4602      	mov	r2, r0
 800212a:	68fb      	ldr	r3, [r7, #12]
 800212c:	1ad3      	subs	r3, r2, r3
 800212e:	f5b3 7ffa 	cmp.w	r3, #500	; 0x1f4
 8002132:	d909      	bls.n	8002148 <HAL_ETH_Init+0xa8>
    {
      /* Set Error Code */
      heth->ErrorCode = HAL_ETH_ERROR_TIMEOUT;
 8002134:	687b      	ldr	r3, [r7, #4]
 8002136:	2204      	movs	r2, #4
 8002138:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
      /* Set State as Error */
      heth->gState = HAL_ETH_STATE_ERROR;
 800213c:	687b      	ldr	r3, [r7, #4]
 800213e:	22e0      	movs	r2, #224	; 0xe0
 8002140:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
      /* Return Error */
      return HAL_ERROR;
 8002144:	2301      	movs	r3, #1
 8002146:	e03f      	b.n	80021c8 <HAL_ETH_Init+0x128>
  while (READ_BIT(heth->Instance->DMABMR, ETH_DMABMR_SR) > 0U)
 8002148:	687b      	ldr	r3, [r7, #4]
 800214a:	681b      	ldr	r3, [r3, #0]
 800214c:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8002150:	681b      	ldr	r3, [r3, #0]
 8002152:	f003 0301 	and.w	r3, r3, #1
 8002156:	2b00      	cmp	r3, #0
 8002158:	d1e4      	bne.n	8002124 <HAL_ETH_Init+0x84>
    }
  }


  /*------------------ MAC, MTL and DMA default Configuration ----------------*/
  ETH_MACDMAConfig(heth);
 800215a:	6878      	ldr	r0, [r7, #4]
 800215c:	f000 fe16 	bl	8002d8c <ETH_MACDMAConfig>


  /*------------------ DMA Tx Descriptors Configuration ----------------------*/
  ETH_DMATxDescListInit(heth);
 8002160:	6878      	ldr	r0, [r7, #4]
 8002162:	f000 fec1 	bl	8002ee8 <ETH_DMATxDescListInit>

  /*------------------ DMA Rx Descriptors Configuration ----------------------*/
  ETH_DMARxDescListInit(heth);
 8002166:	6878      	ldr	r0, [r7, #4]
 8002168:	f000 ff17 	bl	8002f9a <ETH_DMARxDescListInit>

  /*--------------------- ETHERNET MAC Address Configuration ------------------*/
  ETH_MACAddressConfig(heth, ETH_MAC_ADDRESS0, heth->Init.MACAddr);
 800216c:	687b      	ldr	r3, [r7, #4]
 800216e:	685b      	ldr	r3, [r3, #4]
 8002170:	461a      	mov	r2, r3
 8002172:	2100      	movs	r1, #0
 8002174:	6878      	ldr	r0, [r7, #4]
 8002176:	f000 fe7f 	bl	8002e78 <ETH_MACAddressConfig>

  /* Disable MMC Interrupts */
  SET_BIT(heth->Instance->MACIMR, ETH_MACIMR_TSTIM | ETH_MACIMR_PMTIM);
 800217a:	687b      	ldr	r3, [r7, #4]
 800217c:	681b      	ldr	r3, [r3, #0]
 800217e:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8002180:	687b      	ldr	r3, [r7, #4]
 8002182:	681b      	ldr	r3, [r3, #0]
 8002184:	f442 7202 	orr.w	r2, r2, #520	; 0x208
 8002188:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Disable Rx MMC Interrupts */
  SET_BIT(heth->Instance->MMCRIMR, ETH_MMCRIMR_RGUFM | ETH_MMCRIMR_RFAEM | \
 800218a:	687b      	ldr	r3, [r7, #4]
 800218c:	681b      	ldr	r3, [r3, #0]
 800218e:	f8d3 310c 	ldr.w	r3, [r3, #268]	; 0x10c
 8002192:	687a      	ldr	r2, [r7, #4]
 8002194:	6812      	ldr	r2, [r2, #0]
 8002196:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800219a:	f043 0360 	orr.w	r3, r3, #96	; 0x60
 800219e:	f8c2 310c 	str.w	r3, [r2, #268]	; 0x10c
          ETH_MMCRIMR_RFCEM);

  /* Disable Tx MMC Interrupts */
  SET_BIT(heth->Instance->MMCTIMR, ETH_MMCTIMR_TGFM | ETH_MMCTIMR_TGFMSCM | \
 80021a2:	687b      	ldr	r3, [r7, #4]
 80021a4:	681b      	ldr	r3, [r3, #0]
 80021a6:	f8d3 2110 	ldr.w	r2, [r3, #272]	; 0x110
 80021aa:	687b      	ldr	r3, [r7, #4]
 80021ac:	681b      	ldr	r3, [r3, #0]
 80021ae:	f442 1203 	orr.w	r2, r2, #2146304	; 0x20c000
 80021b2:	f8c3 2110 	str.w	r2, [r3, #272]	; 0x110
          ETH_MMCTIMR_TGFSCM);

  heth->ErrorCode = HAL_ETH_ERROR_NONE;
 80021b6:	687b      	ldr	r3, [r7, #4]
 80021b8:	2200      	movs	r2, #0
 80021ba:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
  heth->gState = HAL_ETH_STATE_READY;
 80021be:	687b      	ldr	r3, [r7, #4]
 80021c0:	2210      	movs	r2, #16
 80021c2:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 80021c6:	2300      	movs	r3, #0
}
 80021c8:	4618      	mov	r0, r3
 80021ca:	3710      	adds	r7, #16
 80021cc:	46bd      	mov	sp, r7
 80021ce:	bd80      	pop	{r7, pc}
 80021d0:	40023800 	.word	0x40023800
 80021d4:	40013800 	.word	0x40013800

080021d8 <HAL_ETH_Start>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_Start(ETH_HandleTypeDef *heth)
{
 80021d8:	b580      	push	{r7, lr}
 80021da:	b084      	sub	sp, #16
 80021dc:	af00      	add	r7, sp, #0
 80021de:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg1;

  if (heth->gState == HAL_ETH_STATE_READY)
 80021e0:	687b      	ldr	r3, [r7, #4]
 80021e2:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80021e6:	2b10      	cmp	r3, #16
 80021e8:	d150      	bne.n	800228c <HAL_ETH_Start+0xb4>
  {
    heth->gState = HAL_ETH_STATE_BUSY;
 80021ea:	687b      	ldr	r3, [r7, #4]
 80021ec:	2223      	movs	r2, #35	; 0x23
 80021ee:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

    /* Set number of descriptors to build */
    heth->RxDescList.RxBuildDescCnt = ETH_RX_DESC_CNT;
 80021f2:	687b      	ldr	r3, [r7, #4]
 80021f4:	2204      	movs	r2, #4
 80021f6:	66da      	str	r2, [r3, #108]	; 0x6c

    /* Build all descriptors */
    ETH_UpdateDescriptor(heth);
 80021f8:	6878      	ldr	r0, [r7, #4]
 80021fa:	f000 f9f8 	bl	80025ee <ETH_UpdateDescriptor>

    /* Enable the MAC transmission */
    SET_BIT(heth->Instance->MACCR, ETH_MACCR_TE);
 80021fe:	687b      	ldr	r3, [r7, #4]
 8002200:	681b      	ldr	r3, [r3, #0]
 8002202:	681a      	ldr	r2, [r3, #0]
 8002204:	687b      	ldr	r3, [r7, #4]
 8002206:	681b      	ldr	r3, [r3, #0]
 8002208:	f042 0208 	orr.w	r2, r2, #8
 800220c:	601a      	str	r2, [r3, #0]

    /* Wait until the write operation will be taken into account :
    at least four TX_CLK/RX_CLK clock cycles */
    tmpreg1 = (heth->Instance)->MACCR;
 800220e:	687b      	ldr	r3, [r7, #4]
 8002210:	681b      	ldr	r3, [r3, #0]
 8002212:	681b      	ldr	r3, [r3, #0]
 8002214:	60fb      	str	r3, [r7, #12]
    HAL_Delay(ETH_REG_WRITE_DELAY);
 8002216:	2001      	movs	r0, #1
 8002218:	f7ff fa0a 	bl	8001630 <HAL_Delay>
    (heth->Instance)->MACCR = tmpreg1;
 800221c:	687b      	ldr	r3, [r7, #4]
 800221e:	681b      	ldr	r3, [r3, #0]
 8002220:	68fa      	ldr	r2, [r7, #12]
 8002222:	601a      	str	r2, [r3, #0]

    /* Enable the MAC reception */
    SET_BIT(heth->Instance->MACCR, ETH_MACCR_RE);
 8002224:	687b      	ldr	r3, [r7, #4]
 8002226:	681b      	ldr	r3, [r3, #0]
 8002228:	681a      	ldr	r2, [r3, #0]
 800222a:	687b      	ldr	r3, [r7, #4]
 800222c:	681b      	ldr	r3, [r3, #0]
 800222e:	f042 0204 	orr.w	r2, r2, #4
 8002232:	601a      	str	r2, [r3, #0]

    /* Wait until the write operation will be taken into account :
    at least four TX_CLK/RX_CLK clock cycles */
    tmpreg1 = (heth->Instance)->MACCR;
 8002234:	687b      	ldr	r3, [r7, #4]
 8002236:	681b      	ldr	r3, [r3, #0]
 8002238:	681b      	ldr	r3, [r3, #0]
 800223a:	60fb      	str	r3, [r7, #12]
    HAL_Delay(ETH_REG_WRITE_DELAY);
 800223c:	2001      	movs	r0, #1
 800223e:	f7ff f9f7 	bl	8001630 <HAL_Delay>
    (heth->Instance)->MACCR = tmpreg1;
 8002242:	687b      	ldr	r3, [r7, #4]
 8002244:	681b      	ldr	r3, [r3, #0]
 8002246:	68fa      	ldr	r2, [r7, #12]
 8002248:	601a      	str	r2, [r3, #0]

    /* Flush Transmit FIFO */
    ETH_FlushTransmitFIFO(heth);
 800224a:	6878      	ldr	r0, [r7, #4]
 800224c:	f000 fc3a 	bl	8002ac4 <ETH_FlushTransmitFIFO>

    /* Enable the DMA transmission */
    SET_BIT(heth->Instance->DMAOMR, ETH_DMAOMR_ST);
 8002250:	687b      	ldr	r3, [r7, #4]
 8002252:	681b      	ldr	r3, [r3, #0]
 8002254:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8002258:	699b      	ldr	r3, [r3, #24]
 800225a:	687a      	ldr	r2, [r7, #4]
 800225c:	6812      	ldr	r2, [r2, #0]
 800225e:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8002262:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 8002266:	6193      	str	r3, [r2, #24]

    /* Enable the DMA reception */
    SET_BIT(heth->Instance->DMAOMR, ETH_DMAOMR_SR);
 8002268:	687b      	ldr	r3, [r7, #4]
 800226a:	681b      	ldr	r3, [r3, #0]
 800226c:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8002270:	699b      	ldr	r3, [r3, #24]
 8002272:	687a      	ldr	r2, [r7, #4]
 8002274:	6812      	ldr	r2, [r2, #0]
 8002276:	f043 0302 	orr.w	r3, r3, #2
 800227a:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 800227e:	6193      	str	r3, [r2, #24]

    heth->gState = HAL_ETH_STATE_STARTED;
 8002280:	687b      	ldr	r3, [r7, #4]
 8002282:	2223      	movs	r2, #35	; 0x23
 8002284:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

    return HAL_OK;
 8002288:	2300      	movs	r3, #0
 800228a:	e000      	b.n	800228e <HAL_ETH_Start+0xb6>
  }
  else
  {
    return HAL_ERROR;
 800228c:	2301      	movs	r3, #1
  }
}
 800228e:	4618      	mov	r0, r3
 8002290:	3710      	adds	r7, #16
 8002292:	46bd      	mov	sp, r7
 8002294:	bd80      	pop	{r7, pc}

08002296 <HAL_ETH_Stop>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_Stop(ETH_HandleTypeDef *heth)
{
 8002296:	b580      	push	{r7, lr}
 8002298:	b084      	sub	sp, #16
 800229a:	af00      	add	r7, sp, #0
 800229c:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg1;

  if (heth->gState == HAL_ETH_STATE_STARTED)
 800229e:	687b      	ldr	r3, [r7, #4]
 80022a0:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80022a4:	2b23      	cmp	r3, #35	; 0x23
 80022a6:	d14a      	bne.n	800233e <HAL_ETH_Stop+0xa8>
  {
    /* Set the ETH peripheral state to BUSY */
    heth->gState = HAL_ETH_STATE_BUSY;
 80022a8:	687b      	ldr	r3, [r7, #4]
 80022aa:	2223      	movs	r2, #35	; 0x23
 80022ac:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

    /* Disable the DMA transmission */
    CLEAR_BIT(heth->Instance->DMAOMR, ETH_DMAOMR_ST);
 80022b0:	687b      	ldr	r3, [r7, #4]
 80022b2:	681b      	ldr	r3, [r3, #0]
 80022b4:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80022b8:	699b      	ldr	r3, [r3, #24]
 80022ba:	687a      	ldr	r2, [r7, #4]
 80022bc:	6812      	ldr	r2, [r2, #0]
 80022be:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 80022c2:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 80022c6:	6193      	str	r3, [r2, #24]

    /* Disable the DMA reception */
    CLEAR_BIT(heth->Instance->DMAOMR, ETH_DMAOMR_SR);
 80022c8:	687b      	ldr	r3, [r7, #4]
 80022ca:	681b      	ldr	r3, [r3, #0]
 80022cc:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80022d0:	699b      	ldr	r3, [r3, #24]
 80022d2:	687a      	ldr	r2, [r7, #4]
 80022d4:	6812      	ldr	r2, [r2, #0]
 80022d6:	f023 0302 	bic.w	r3, r3, #2
 80022da:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 80022de:	6193      	str	r3, [r2, #24]

    /* Disable the MAC reception */
    CLEAR_BIT(heth->Instance->MACCR, ETH_MACCR_RE);
 80022e0:	687b      	ldr	r3, [r7, #4]
 80022e2:	681b      	ldr	r3, [r3, #0]
 80022e4:	681a      	ldr	r2, [r3, #0]
 80022e6:	687b      	ldr	r3, [r7, #4]
 80022e8:	681b      	ldr	r3, [r3, #0]
 80022ea:	f022 0204 	bic.w	r2, r2, #4
 80022ee:	601a      	str	r2, [r3, #0]

    /* Wait until the write operation will be taken into account :
    at least four TX_CLK/RX_CLK clock cycles */
    tmpreg1 = (heth->Instance)->MACCR;
 80022f0:	687b      	ldr	r3, [r7, #4]
 80022f2:	681b      	ldr	r3, [r3, #0]
 80022f4:	681b      	ldr	r3, [r3, #0]
 80022f6:	60fb      	str	r3, [r7, #12]
    HAL_Delay(ETH_REG_WRITE_DELAY);
 80022f8:	2001      	movs	r0, #1
 80022fa:	f7ff f999 	bl	8001630 <HAL_Delay>
    (heth->Instance)->MACCR = tmpreg1;
 80022fe:	687b      	ldr	r3, [r7, #4]
 8002300:	681b      	ldr	r3, [r3, #0]
 8002302:	68fa      	ldr	r2, [r7, #12]
 8002304:	601a      	str	r2, [r3, #0]

    /* Flush Transmit FIFO */
    ETH_FlushTransmitFIFO(heth);
 8002306:	6878      	ldr	r0, [r7, #4]
 8002308:	f000 fbdc 	bl	8002ac4 <ETH_FlushTransmitFIFO>

    /* Disable the MAC transmission */
    CLEAR_BIT(heth->Instance->MACCR, ETH_MACCR_TE);
 800230c:	687b      	ldr	r3, [r7, #4]
 800230e:	681b      	ldr	r3, [r3, #0]
 8002310:	681a      	ldr	r2, [r3, #0]
 8002312:	687b      	ldr	r3, [r7, #4]
 8002314:	681b      	ldr	r3, [r3, #0]
 8002316:	f022 0208 	bic.w	r2, r2, #8
 800231a:	601a      	str	r2, [r3, #0]

    /* Wait until the write operation will be taken into account :
    at least four TX_CLK/RX_CLK clock cycles */
    tmpreg1 = (heth->Instance)->MACCR;
 800231c:	687b      	ldr	r3, [r7, #4]
 800231e:	681b      	ldr	r3, [r3, #0]
 8002320:	681b      	ldr	r3, [r3, #0]
 8002322:	60fb      	str	r3, [r7, #12]
    HAL_Delay(ETH_REG_WRITE_DELAY);
 8002324:	2001      	movs	r0, #1
 8002326:	f7ff f983 	bl	8001630 <HAL_Delay>
    (heth->Instance)->MACCR = tmpreg1;
 800232a:	687b      	ldr	r3, [r7, #4]
 800232c:	681b      	ldr	r3, [r3, #0]
 800232e:	68fa      	ldr	r2, [r7, #12]
 8002330:	601a      	str	r2, [r3, #0]

    heth->gState = HAL_ETH_STATE_READY;
 8002332:	687b      	ldr	r3, [r7, #4]
 8002334:	2210      	movs	r2, #16
 8002336:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

    /* Return function status */
    return HAL_OK;
 800233a:	2300      	movs	r3, #0
 800233c:	e000      	b.n	8002340 <HAL_ETH_Stop+0xaa>
  }
  else
  {
    return HAL_ERROR;
 800233e:	2301      	movs	r3, #1
  }
}
 8002340:	4618      	mov	r0, r3
 8002342:	3710      	adds	r7, #16
 8002344:	46bd      	mov	sp, r7
 8002346:	bd80      	pop	{r7, pc}

08002348 <HAL_ETH_Transmit>:
  * @param  pTxConfig: Hold the configuration of packet to be transmitted
  * @param  Timeout: timeout value
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_Transmit(ETH_HandleTypeDef *heth, ETH_TxPacketConfigTypeDef *pTxConfig, uint32_t Timeout)
{
 8002348:	b580      	push	{r7, lr}
 800234a:	b086      	sub	sp, #24
 800234c:	af00      	add	r7, sp, #0
 800234e:	60f8      	str	r0, [r7, #12]
 8002350:	60b9      	str	r1, [r7, #8]
 8002352:	607a      	str	r2, [r7, #4]
  uint32_t tickstart;
  ETH_DMADescTypeDef *dmatxdesc;

  if (pTxConfig == NULL)
 8002354:	68bb      	ldr	r3, [r7, #8]
 8002356:	2b00      	cmp	r3, #0
 8002358:	d109      	bne.n	800236e <HAL_ETH_Transmit+0x26>
  {
    heth->ErrorCode |= HAL_ETH_ERROR_PARAM;
 800235a:	68fb      	ldr	r3, [r7, #12]
 800235c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002360:	f043 0201 	orr.w	r2, r3, #1
 8002364:	68fb      	ldr	r3, [r7, #12]
 8002366:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
    return HAL_ERROR;
 800236a:	2301      	movs	r3, #1
 800236c:	e07c      	b.n	8002468 <HAL_ETH_Transmit+0x120>
  }

  if (heth->gState == HAL_ETH_STATE_STARTED)
 800236e:	68fb      	ldr	r3, [r7, #12]
 8002370:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8002374:	2b23      	cmp	r3, #35	; 0x23
 8002376:	d176      	bne.n	8002466 <HAL_ETH_Transmit+0x11e>
  {
    /* Config DMA Tx descriptor by Tx Packet info */
    if (ETH_Prepare_Tx_Descriptors(heth, pTxConfig, 0) != HAL_ETH_ERROR_NONE)
 8002378:	2200      	movs	r2, #0
 800237a:	68b9      	ldr	r1, [r7, #8]
 800237c:	68f8      	ldr	r0, [r7, #12]
 800237e:	f000 fe7b 	bl	8003078 <ETH_Prepare_Tx_Descriptors>
 8002382:	4603      	mov	r3, r0
 8002384:	2b00      	cmp	r3, #0
 8002386:	d009      	beq.n	800239c <HAL_ETH_Transmit+0x54>
    {
      /* Set the ETH error code */
      heth->ErrorCode |= HAL_ETH_ERROR_BUSY;
 8002388:	68fb      	ldr	r3, [r7, #12]
 800238a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800238e:	f043 0202 	orr.w	r2, r3, #2
 8002392:	68fb      	ldr	r3, [r7, #12]
 8002394:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
      return HAL_ERROR;
 8002398:	2301      	movs	r3, #1
 800239a:	e065      	b.n	8002468 <HAL_ETH_Transmit+0x120>
  __ASM volatile ("dsb 0xF":::"memory");
 800239c:	f3bf 8f4f 	dsb	sy
}
 80023a0:	bf00      	nop
    }

    /* Ensure completion of descriptor preparation before transmission start */
    __DSB();

    dmatxdesc = (ETH_DMADescTypeDef *)(&heth->TxDescList)->TxDesc[heth->TxDescList.CurTxDesc];
 80023a2:	68fb      	ldr	r3, [r7, #12]
 80023a4:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80023a6:	68fb      	ldr	r3, [r7, #12]
 80023a8:	3206      	adds	r2, #6
 80023aa:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80023ae:	617b      	str	r3, [r7, #20]

    /* Incr current tx desc index */
    INCR_TX_DESC_INDEX(heth->TxDescList.CurTxDesc, 1U);
 80023b0:	68fb      	ldr	r3, [r7, #12]
 80023b2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80023b4:	1c5a      	adds	r2, r3, #1
 80023b6:	68fb      	ldr	r3, [r7, #12]
 80023b8:	629a      	str	r2, [r3, #40]	; 0x28
 80023ba:	68fb      	ldr	r3, [r7, #12]
 80023bc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80023be:	2b03      	cmp	r3, #3
 80023c0:	d904      	bls.n	80023cc <HAL_ETH_Transmit+0x84>
 80023c2:	68fb      	ldr	r3, [r7, #12]
 80023c4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80023c6:	1f1a      	subs	r2, r3, #4
 80023c8:	68fb      	ldr	r3, [r7, #12]
 80023ca:	629a      	str	r2, [r3, #40]	; 0x28

    /* Start transmission */
    /* issue a poll command to Tx DMA by writing address of next immediate free descriptor */
    WRITE_REG(heth->Instance->DMATPDR, (uint32_t)(heth->TxDescList.TxDesc[heth->TxDescList.CurTxDesc]));
 80023cc:	68fb      	ldr	r3, [r7, #12]
 80023ce:	6a99      	ldr	r1, [r3, #40]	; 0x28
 80023d0:	68fb      	ldr	r3, [r7, #12]
 80023d2:	681a      	ldr	r2, [r3, #0]
 80023d4:	68fb      	ldr	r3, [r7, #12]
 80023d6:	3106      	adds	r1, #6
 80023d8:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 80023dc:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 80023e0:	6053      	str	r3, [r2, #4]

    tickstart = HAL_GetTick();
 80023e2:	f7ff f919 	bl	8001618 <HAL_GetTick>
 80023e6:	6138      	str	r0, [r7, #16]

    /* Wait for data to be transmitted or timeout occurred */
    while ((dmatxdesc->DESC0 & ETH_DMATXDESC_OWN) != (uint32_t)RESET)
 80023e8:	e037      	b.n	800245a <HAL_ETH_Transmit+0x112>
    {
      if ((heth->Instance->DMASR & ETH_DMASR_FBES) != (uint32_t)RESET)
 80023ea:	68fb      	ldr	r3, [r7, #12]
 80023ec:	681b      	ldr	r3, [r3, #0]
 80023ee:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80023f2:	695b      	ldr	r3, [r3, #20]
 80023f4:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80023f8:	2b00      	cmp	r3, #0
 80023fa:	d011      	beq.n	8002420 <HAL_ETH_Transmit+0xd8>
      {
        heth->ErrorCode |= HAL_ETH_ERROR_DMA;
 80023fc:	68fb      	ldr	r3, [r7, #12]
 80023fe:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002402:	f043 0208 	orr.w	r2, r3, #8
 8002406:	68fb      	ldr	r3, [r7, #12]
 8002408:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
        heth->DMAErrorCode = heth->Instance->DMASR;
 800240c:	68fb      	ldr	r3, [r7, #12]
 800240e:	681b      	ldr	r3, [r3, #0]
 8002410:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8002414:	695a      	ldr	r2, [r3, #20]
 8002416:	68fb      	ldr	r3, [r7, #12]
 8002418:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
        /* Return function status */
        return HAL_ERROR;
 800241c:	2301      	movs	r3, #1
 800241e:	e023      	b.n	8002468 <HAL_ETH_Transmit+0x120>
      }

      /* Check for the Timeout */
      if (Timeout != HAL_MAX_DELAY)
 8002420:	687b      	ldr	r3, [r7, #4]
 8002422:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002426:	d018      	beq.n	800245a <HAL_ETH_Transmit+0x112>
      {
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 8002428:	f7ff f8f6 	bl	8001618 <HAL_GetTick>
 800242c:	4602      	mov	r2, r0
 800242e:	693b      	ldr	r3, [r7, #16]
 8002430:	1ad3      	subs	r3, r2, r3
 8002432:	687a      	ldr	r2, [r7, #4]
 8002434:	429a      	cmp	r2, r3
 8002436:	d302      	bcc.n	800243e <HAL_ETH_Transmit+0xf6>
 8002438:	687b      	ldr	r3, [r7, #4]
 800243a:	2b00      	cmp	r3, #0
 800243c:	d10d      	bne.n	800245a <HAL_ETH_Transmit+0x112>
        {
          heth->ErrorCode |= HAL_ETH_ERROR_TIMEOUT;
 800243e:	68fb      	ldr	r3, [r7, #12]
 8002440:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002444:	f043 0204 	orr.w	r2, r3, #4
 8002448:	68fb      	ldr	r3, [r7, #12]
 800244a:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
          /* Clear TX descriptor so that we can proceed */
          dmatxdesc->DESC0 = (ETH_DMATXDESC_FS | ETH_DMATXDESC_LS);
 800244e:	697b      	ldr	r3, [r7, #20]
 8002450:	f04f 5240 	mov.w	r2, #805306368	; 0x30000000
 8002454:	601a      	str	r2, [r3, #0]
          return HAL_ERROR;
 8002456:	2301      	movs	r3, #1
 8002458:	e006      	b.n	8002468 <HAL_ETH_Transmit+0x120>
    while ((dmatxdesc->DESC0 & ETH_DMATXDESC_OWN) != (uint32_t)RESET)
 800245a:	697b      	ldr	r3, [r7, #20]
 800245c:	681b      	ldr	r3, [r3, #0]
 800245e:	2b00      	cmp	r3, #0
 8002460:	dbc3      	blt.n	80023ea <HAL_ETH_Transmit+0xa2>
        }
      }
    }

    /* Return function status */
    return HAL_OK;
 8002462:	2300      	movs	r3, #0
 8002464:	e000      	b.n	8002468 <HAL_ETH_Transmit+0x120>
  }
  else
  {
    return HAL_ERROR;
 8002466:	2301      	movs	r3, #1
  }
}
 8002468:	4618      	mov	r0, r3
 800246a:	3718      	adds	r7, #24
 800246c:	46bd      	mov	sp, r7
 800246e:	bd80      	pop	{r7, pc}

08002470 <HAL_ETH_ReadData>:
  *         the configuration information for ETHERNET module
  * @param  pAppBuff: Pointer to an application buffer to receive the packet.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_ReadData(ETH_HandleTypeDef *heth, void **pAppBuff)
{
 8002470:	b580      	push	{r7, lr}
 8002472:	b088      	sub	sp, #32
 8002474:	af00      	add	r7, sp, #0
 8002476:	6078      	str	r0, [r7, #4]
 8002478:	6039      	str	r1, [r7, #0]
  uint32_t descidx;
  ETH_DMADescTypeDef *dmarxdesc;
  uint32_t desccnt = 0U;
 800247a:	2300      	movs	r3, #0
 800247c:	617b      	str	r3, [r7, #20]
  uint32_t desccntmax;
  uint32_t bufflength;
  uint8_t rxdataready = 0U;
 800247e:	2300      	movs	r3, #0
 8002480:	74fb      	strb	r3, [r7, #19]

  if (pAppBuff == NULL)
 8002482:	683b      	ldr	r3, [r7, #0]
 8002484:	2b00      	cmp	r3, #0
 8002486:	d109      	bne.n	800249c <HAL_ETH_ReadData+0x2c>
  {
    heth->ErrorCode |= HAL_ETH_ERROR_PARAM;
 8002488:	687b      	ldr	r3, [r7, #4]
 800248a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800248e:	f043 0201 	orr.w	r2, r3, #1
 8002492:	687b      	ldr	r3, [r7, #4]
 8002494:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
    return HAL_ERROR;
 8002498:	2301      	movs	r3, #1
 800249a:	e0a4      	b.n	80025e6 <HAL_ETH_ReadData+0x176>
  }

  if (heth->gState != HAL_ETH_STATE_STARTED)
 800249c:	687b      	ldr	r3, [r7, #4]
 800249e:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80024a2:	2b23      	cmp	r3, #35	; 0x23
 80024a4:	d001      	beq.n	80024aa <HAL_ETH_ReadData+0x3a>
  {
    return HAL_ERROR;
 80024a6:	2301      	movs	r3, #1
 80024a8:	e09d      	b.n	80025e6 <HAL_ETH_ReadData+0x176>
  }

  descidx = heth->RxDescList.RxDescIdx;
 80024aa:	687b      	ldr	r3, [r7, #4]
 80024ac:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80024ae:	61fb      	str	r3, [r7, #28]
  dmarxdesc = (ETH_DMADescTypeDef *)heth->RxDescList.RxDesc[descidx];
 80024b0:	687b      	ldr	r3, [r7, #4]
 80024b2:	69fa      	ldr	r2, [r7, #28]
 80024b4:	3212      	adds	r2, #18
 80024b6:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80024ba:	61bb      	str	r3, [r7, #24]
  desccntmax = ETH_RX_DESC_CNT - heth->RxDescList.RxBuildDescCnt;
 80024bc:	687b      	ldr	r3, [r7, #4]
 80024be:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80024c0:	f1c3 0304 	rsb	r3, r3, #4
 80024c4:	60fb      	str	r3, [r7, #12]

  /* Check if descriptor is not owned by DMA */
  while ((READ_BIT(dmarxdesc->DESC0, ETH_DMARXDESC_OWN) == (uint32_t)RESET) && (desccnt < desccntmax)
 80024c6:	e066      	b.n	8002596 <HAL_ETH_ReadData+0x126>
         && (rxdataready == 0U))
  {
    if (READ_BIT(dmarxdesc->DESC0,  ETH_DMARXDESC_LS)  != (uint32_t)RESET)
 80024c8:	69bb      	ldr	r3, [r7, #24]
 80024ca:	681b      	ldr	r3, [r3, #0]
 80024cc:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80024d0:	2b00      	cmp	r3, #0
 80024d2:	d007      	beq.n	80024e4 <HAL_ETH_ReadData+0x74>
    {
      /* Get timestamp high */
      heth->RxDescList.TimeStamp.TimeStampHigh = dmarxdesc->DESC7;
 80024d4:	69bb      	ldr	r3, [r7, #24]
 80024d6:	69da      	ldr	r2, [r3, #28]
 80024d8:	687b      	ldr	r3, [r7, #4]
 80024da:	679a      	str	r2, [r3, #120]	; 0x78
      /* Get timestamp low */
      heth->RxDescList.TimeStamp.TimeStampLow  = dmarxdesc->DESC6;
 80024dc:	69bb      	ldr	r3, [r7, #24]
 80024de:	699a      	ldr	r2, [r3, #24]
 80024e0:	687b      	ldr	r3, [r7, #4]
 80024e2:	675a      	str	r2, [r3, #116]	; 0x74
    }
    if ((READ_BIT(dmarxdesc->DESC0, ETH_DMARXDESC_FS) != (uint32_t)RESET) || (heth->RxDescList.pRxStart != NULL))
 80024e4:	69bb      	ldr	r3, [r7, #24]
 80024e6:	681b      	ldr	r3, [r3, #0]
 80024e8:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80024ec:	2b00      	cmp	r3, #0
 80024ee:	d103      	bne.n	80024f8 <HAL_ETH_ReadData+0x88>
 80024f0:	687b      	ldr	r3, [r7, #4]
 80024f2:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80024f4:	2b00      	cmp	r3, #0
 80024f6:	d03c      	beq.n	8002572 <HAL_ETH_ReadData+0x102>
    {
      /* Check first descriptor */
      if (READ_BIT(dmarxdesc->DESC0, ETH_DMARXDESC_FS) != (uint32_t)RESET)
 80024f8:	69bb      	ldr	r3, [r7, #24]
 80024fa:	681b      	ldr	r3, [r3, #0]
 80024fc:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8002500:	2b00      	cmp	r3, #0
 8002502:	d005      	beq.n	8002510 <HAL_ETH_ReadData+0xa0>
      {
        heth->RxDescList.RxDescCnt = 0;
 8002504:	687b      	ldr	r3, [r7, #4]
 8002506:	2200      	movs	r2, #0
 8002508:	661a      	str	r2, [r3, #96]	; 0x60
        heth->RxDescList.RxDataLength = 0;
 800250a:	687b      	ldr	r3, [r7, #4]
 800250c:	2200      	movs	r2, #0
 800250e:	665a      	str	r2, [r3, #100]	; 0x64
      }

      /* Get the Frame Length of the received packet: substruct 4 bytes of the CRC */
      bufflength = ((dmarxdesc->DESC0 & ETH_DMARXDESC_FL) >> ETH_DMARXDESC_FRAMELENGTHSHIFT);
 8002510:	69bb      	ldr	r3, [r7, #24]
 8002512:	681b      	ldr	r3, [r3, #0]
 8002514:	0c1b      	lsrs	r3, r3, #16
 8002516:	f3c3 030d 	ubfx	r3, r3, #0, #14
 800251a:	60bb      	str	r3, [r7, #8]

      /* Check if last descriptor */
      if (READ_BIT(dmarxdesc->DESC0, ETH_DMARXDESC_LS) != (uint32_t)RESET)
 800251c:	69bb      	ldr	r3, [r7, #24]
 800251e:	681b      	ldr	r3, [r3, #0]
 8002520:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002524:	2b00      	cmp	r3, #0
 8002526:	d005      	beq.n	8002534 <HAL_ETH_ReadData+0xc4>
      {
        /* Save Last descriptor index */
        heth->RxDescList.pRxLastRxDesc = dmarxdesc->DESC0;
 8002528:	69bb      	ldr	r3, [r7, #24]
 800252a:	681a      	ldr	r2, [r3, #0]
 800252c:	687b      	ldr	r3, [r7, #4]
 800252e:	671a      	str	r2, [r3, #112]	; 0x70

        /* Packet ready */
        rxdataready = 1;
 8002530:	2301      	movs	r3, #1
 8002532:	74fb      	strb	r3, [r7, #19]
      }

      /* Link data */
      WRITE_REG(dmarxdesc->BackupAddr0, dmarxdesc->DESC2);
 8002534:	69bb      	ldr	r3, [r7, #24]
 8002536:	689a      	ldr	r2, [r3, #8]
 8002538:	69bb      	ldr	r3, [r7, #24]
 800253a:	621a      	str	r2, [r3, #32]
      /*Call registered Link callback*/
      heth->rxLinkCallback(&heth->RxDescList.pRxStart, &heth->RxDescList.pRxEnd,
                           (uint8_t *)dmarxdesc->BackupAddr0, bufflength);
#else
      /* Link callback */
      HAL_ETH_RxLinkCallback(&heth->RxDescList.pRxStart, &heth->RxDescList.pRxEnd,
 800253c:	687b      	ldr	r3, [r7, #4]
 800253e:	f103 007c 	add.w	r0, r3, #124	; 0x7c
 8002542:	687b      	ldr	r3, [r7, #4]
 8002544:	f103 0180 	add.w	r1, r3, #128	; 0x80
                             (uint8_t *)dmarxdesc->BackupAddr0, (uint16_t) bufflength);
 8002548:	69bb      	ldr	r3, [r7, #24]
 800254a:	6a1b      	ldr	r3, [r3, #32]
      HAL_ETH_RxLinkCallback(&heth->RxDescList.pRxStart, &heth->RxDescList.pRxEnd,
 800254c:	461a      	mov	r2, r3
 800254e:	68bb      	ldr	r3, [r7, #8]
 8002550:	b29b      	uxth	r3, r3
 8002552:	f005 fe89 	bl	8008268 <HAL_ETH_RxLinkCallback>
#endif  /* USE_HAL_ETH_REGISTER_CALLBACKS */
      heth->RxDescList.RxDescCnt++;
 8002556:	687b      	ldr	r3, [r7, #4]
 8002558:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800255a:	1c5a      	adds	r2, r3, #1
 800255c:	687b      	ldr	r3, [r7, #4]
 800255e:	661a      	str	r2, [r3, #96]	; 0x60
      heth->RxDescList.RxDataLength += bufflength;
 8002560:	687b      	ldr	r3, [r7, #4]
 8002562:	6e5a      	ldr	r2, [r3, #100]	; 0x64
 8002564:	68bb      	ldr	r3, [r7, #8]
 8002566:	441a      	add	r2, r3
 8002568:	687b      	ldr	r3, [r7, #4]
 800256a:	665a      	str	r2, [r3, #100]	; 0x64

      /* Clear buffer pointer */
      dmarxdesc->BackupAddr0 = 0;
 800256c:	69bb      	ldr	r3, [r7, #24]
 800256e:	2200      	movs	r2, #0
 8002570:	621a      	str	r2, [r3, #32]
    }

    /* Increment current rx descriptor index */
    INCR_RX_DESC_INDEX(descidx, 1U);
 8002572:	69fb      	ldr	r3, [r7, #28]
 8002574:	3301      	adds	r3, #1
 8002576:	61fb      	str	r3, [r7, #28]
 8002578:	69fb      	ldr	r3, [r7, #28]
 800257a:	2b03      	cmp	r3, #3
 800257c:	d902      	bls.n	8002584 <HAL_ETH_ReadData+0x114>
 800257e:	69fb      	ldr	r3, [r7, #28]
 8002580:	3b04      	subs	r3, #4
 8002582:	61fb      	str	r3, [r7, #28]
    /* Get current descriptor address */
    dmarxdesc = (ETH_DMADescTypeDef *)heth->RxDescList.RxDesc[descidx];
 8002584:	687b      	ldr	r3, [r7, #4]
 8002586:	69fa      	ldr	r2, [r7, #28]
 8002588:	3212      	adds	r2, #18
 800258a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800258e:	61bb      	str	r3, [r7, #24]
    desccnt++;
 8002590:	697b      	ldr	r3, [r7, #20]
 8002592:	3301      	adds	r3, #1
 8002594:	617b      	str	r3, [r7, #20]
  while ((READ_BIT(dmarxdesc->DESC0, ETH_DMARXDESC_OWN) == (uint32_t)RESET) && (desccnt < desccntmax)
 8002596:	69bb      	ldr	r3, [r7, #24]
 8002598:	681b      	ldr	r3, [r3, #0]
         && (rxdataready == 0U))
 800259a:	2b00      	cmp	r3, #0
 800259c:	db06      	blt.n	80025ac <HAL_ETH_ReadData+0x13c>
  while ((READ_BIT(dmarxdesc->DESC0, ETH_DMARXDESC_OWN) == (uint32_t)RESET) && (desccnt < desccntmax)
 800259e:	697a      	ldr	r2, [r7, #20]
 80025a0:	68fb      	ldr	r3, [r7, #12]
 80025a2:	429a      	cmp	r2, r3
 80025a4:	d202      	bcs.n	80025ac <HAL_ETH_ReadData+0x13c>
         && (rxdataready == 0U))
 80025a6:	7cfb      	ldrb	r3, [r7, #19]
 80025a8:	2b00      	cmp	r3, #0
 80025aa:	d08d      	beq.n	80024c8 <HAL_ETH_ReadData+0x58>
  }

  heth->RxDescList.RxBuildDescCnt += desccnt;
 80025ac:	687b      	ldr	r3, [r7, #4]
 80025ae:	6eda      	ldr	r2, [r3, #108]	; 0x6c
 80025b0:	697b      	ldr	r3, [r7, #20]
 80025b2:	441a      	add	r2, r3
 80025b4:	687b      	ldr	r3, [r7, #4]
 80025b6:	66da      	str	r2, [r3, #108]	; 0x6c
  if ((heth->RxDescList.RxBuildDescCnt) != 0U)
 80025b8:	687b      	ldr	r3, [r7, #4]
 80025ba:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80025bc:	2b00      	cmp	r3, #0
 80025be:	d002      	beq.n	80025c6 <HAL_ETH_ReadData+0x156>
  {
    /* Update Descriptors */
    ETH_UpdateDescriptor(heth);
 80025c0:	6878      	ldr	r0, [r7, #4]
 80025c2:	f000 f814 	bl	80025ee <ETH_UpdateDescriptor>
  }

  heth->RxDescList.RxDescIdx = descidx;
 80025c6:	687b      	ldr	r3, [r7, #4]
 80025c8:	69fa      	ldr	r2, [r7, #28]
 80025ca:	65da      	str	r2, [r3, #92]	; 0x5c

  if (rxdataready == 1U)
 80025cc:	7cfb      	ldrb	r3, [r7, #19]
 80025ce:	2b01      	cmp	r3, #1
 80025d0:	d108      	bne.n	80025e4 <HAL_ETH_ReadData+0x174>
  {
    /* Return received packet */
    *pAppBuff = heth->RxDescList.pRxStart;
 80025d2:	687b      	ldr	r3, [r7, #4]
 80025d4:	6fda      	ldr	r2, [r3, #124]	; 0x7c
 80025d6:	683b      	ldr	r3, [r7, #0]
 80025d8:	601a      	str	r2, [r3, #0]
    /* Reset first element */
    heth->RxDescList.pRxStart = NULL;
 80025da:	687b      	ldr	r3, [r7, #4]
 80025dc:	2200      	movs	r2, #0
 80025de:	67da      	str	r2, [r3, #124]	; 0x7c

    return HAL_OK;
 80025e0:	2300      	movs	r3, #0
 80025e2:	e000      	b.n	80025e6 <HAL_ETH_ReadData+0x176>
  }

  /* Packet not ready */
  return HAL_ERROR;
 80025e4:	2301      	movs	r3, #1
}
 80025e6:	4618      	mov	r0, r3
 80025e8:	3720      	adds	r7, #32
 80025ea:	46bd      	mov	sp, r7
 80025ec:	bd80      	pop	{r7, pc}

080025ee <ETH_UpdateDescriptor>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
static void ETH_UpdateDescriptor(ETH_HandleTypeDef *heth)
{
 80025ee:	b580      	push	{r7, lr}
 80025f0:	b088      	sub	sp, #32
 80025f2:	af00      	add	r7, sp, #0
 80025f4:	6078      	str	r0, [r7, #4]
  uint32_t descidx;
  uint32_t tailidx;
  uint32_t desccount;
  ETH_DMADescTypeDef *dmarxdesc;
  uint8_t *buff = NULL;
 80025f6:	2300      	movs	r3, #0
 80025f8:	60bb      	str	r3, [r7, #8]
  uint8_t allocStatus = 1U;
 80025fa:	2301      	movs	r3, #1
 80025fc:	74fb      	strb	r3, [r7, #19]

  descidx = heth->RxDescList.RxBuildDescIdx;
 80025fe:	687b      	ldr	r3, [r7, #4]
 8002600:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8002602:	61fb      	str	r3, [r7, #28]
  dmarxdesc = (ETH_DMADescTypeDef *)heth->RxDescList.RxDesc[descidx];
 8002604:	687b      	ldr	r3, [r7, #4]
 8002606:	69fa      	ldr	r2, [r7, #28]
 8002608:	3212      	adds	r2, #18
 800260a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800260e:	617b      	str	r3, [r7, #20]
  desccount = heth->RxDescList.RxBuildDescCnt;
 8002610:	687b      	ldr	r3, [r7, #4]
 8002612:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8002614:	61bb      	str	r3, [r7, #24]

  while ((desccount > 0U) && (allocStatus != 0U))
 8002616:	e044      	b.n	80026a2 <ETH_UpdateDescriptor+0xb4>
  {
    /* Check if a buffer's attached the descriptor */
    if (READ_REG(dmarxdesc->BackupAddr0) == 0U)
 8002618:	697b      	ldr	r3, [r7, #20]
 800261a:	6a1b      	ldr	r3, [r3, #32]
 800261c:	2b00      	cmp	r3, #0
 800261e:	d112      	bne.n	8002646 <ETH_UpdateDescriptor+0x58>
#if (USE_HAL_ETH_REGISTER_CALLBACKS == 1)
      /*Call registered Allocate callback*/
      heth->rxAllocateCallback(&buff);
#else
      /* Allocate callback */
      HAL_ETH_RxAllocateCallback(&buff);
 8002620:	f107 0308 	add.w	r3, r7, #8
 8002624:	4618      	mov	r0, r3
 8002626:	f005 fdef 	bl	8008208 <HAL_ETH_RxAllocateCallback>
#endif  /* USE_HAL_ETH_REGISTER_CALLBACKS */
      if (buff == NULL)
 800262a:	68bb      	ldr	r3, [r7, #8]
 800262c:	2b00      	cmp	r3, #0
 800262e:	d102      	bne.n	8002636 <ETH_UpdateDescriptor+0x48>
      {
        allocStatus = 0U;
 8002630:	2300      	movs	r3, #0
 8002632:	74fb      	strb	r3, [r7, #19]
 8002634:	e007      	b.n	8002646 <ETH_UpdateDescriptor+0x58>
      }
      else
      {
        WRITE_REG(dmarxdesc->BackupAddr0, (uint32_t)buff);
 8002636:	68bb      	ldr	r3, [r7, #8]
 8002638:	461a      	mov	r2, r3
 800263a:	697b      	ldr	r3, [r7, #20]
 800263c:	621a      	str	r2, [r3, #32]
        WRITE_REG(dmarxdesc->DESC2, (uint32_t)buff);
 800263e:	68bb      	ldr	r3, [r7, #8]
 8002640:	461a      	mov	r2, r3
 8002642:	697b      	ldr	r3, [r7, #20]
 8002644:	609a      	str	r2, [r3, #8]
      }
    }

    if (allocStatus != 0U)
 8002646:	7cfb      	ldrb	r3, [r7, #19]
 8002648:	2b00      	cmp	r3, #0
 800264a:	d02a      	beq.n	80026a2 <ETH_UpdateDescriptor+0xb4>
    {
      if (heth->RxDescList.ItMode == 0U)
 800264c:	687b      	ldr	r3, [r7, #4]
 800264e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002650:	2b00      	cmp	r3, #0
 8002652:	d108      	bne.n	8002666 <ETH_UpdateDescriptor+0x78>
      {
        WRITE_REG(dmarxdesc->DESC1, heth->Init.RxBuffLen | ETH_DMARXDESC_DIC | ETH_DMARXDESC_RCH);
 8002654:	687b      	ldr	r3, [r7, #4]
 8002656:	695b      	ldr	r3, [r3, #20]
 8002658:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 800265c:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8002660:	697a      	ldr	r2, [r7, #20]
 8002662:	6053      	str	r3, [r2, #4]
 8002664:	e005      	b.n	8002672 <ETH_UpdateDescriptor+0x84>
      }
      else
      {
        WRITE_REG(dmarxdesc->DESC1, heth->Init.RxBuffLen | ETH_DMARXDESC_RCH);
 8002666:	687b      	ldr	r3, [r7, #4]
 8002668:	695b      	ldr	r3, [r3, #20]
 800266a:	f443 4280 	orr.w	r2, r3, #16384	; 0x4000
 800266e:	697b      	ldr	r3, [r7, #20]
 8002670:	605a      	str	r2, [r3, #4]
      }

      SET_BIT(dmarxdesc->DESC0, ETH_DMARXDESC_OWN);
 8002672:	697b      	ldr	r3, [r7, #20]
 8002674:	681b      	ldr	r3, [r3, #0]
 8002676:	f043 4200 	orr.w	r2, r3, #2147483648	; 0x80000000
 800267a:	697b      	ldr	r3, [r7, #20]
 800267c:	601a      	str	r2, [r3, #0]

      /* Increment current rx descriptor index */
      INCR_RX_DESC_INDEX(descidx, 1U);
 800267e:	69fb      	ldr	r3, [r7, #28]
 8002680:	3301      	adds	r3, #1
 8002682:	61fb      	str	r3, [r7, #28]
 8002684:	69fb      	ldr	r3, [r7, #28]
 8002686:	2b03      	cmp	r3, #3
 8002688:	d902      	bls.n	8002690 <ETH_UpdateDescriptor+0xa2>
 800268a:	69fb      	ldr	r3, [r7, #28]
 800268c:	3b04      	subs	r3, #4
 800268e:	61fb      	str	r3, [r7, #28]
      /* Get current descriptor address */
      dmarxdesc = (ETH_DMADescTypeDef *)heth->RxDescList.RxDesc[descidx];
 8002690:	687b      	ldr	r3, [r7, #4]
 8002692:	69fa      	ldr	r2, [r7, #28]
 8002694:	3212      	adds	r2, #18
 8002696:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800269a:	617b      	str	r3, [r7, #20]
      desccount--;
 800269c:	69bb      	ldr	r3, [r7, #24]
 800269e:	3b01      	subs	r3, #1
 80026a0:	61bb      	str	r3, [r7, #24]
  while ((desccount > 0U) && (allocStatus != 0U))
 80026a2:	69bb      	ldr	r3, [r7, #24]
 80026a4:	2b00      	cmp	r3, #0
 80026a6:	d002      	beq.n	80026ae <ETH_UpdateDescriptor+0xc0>
 80026a8:	7cfb      	ldrb	r3, [r7, #19]
 80026aa:	2b00      	cmp	r3, #0
 80026ac:	d1b4      	bne.n	8002618 <ETH_UpdateDescriptor+0x2a>
    }
  }

  if (heth->RxDescList.RxBuildDescCnt != desccount)
 80026ae:	687b      	ldr	r3, [r7, #4]
 80026b0:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80026b2:	69ba      	ldr	r2, [r7, #24]
 80026b4:	429a      	cmp	r2, r3
 80026b6:	d01a      	beq.n	80026ee <ETH_UpdateDescriptor+0x100>
  {
    /* Set the tail pointer index */
    tailidx = (descidx + 1U) % ETH_RX_DESC_CNT;
 80026b8:	69fb      	ldr	r3, [r7, #28]
 80026ba:	3301      	adds	r3, #1
 80026bc:	f003 0303 	and.w	r3, r3, #3
 80026c0:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("dmb 0xF":::"memory");
 80026c2:	f3bf 8f5f 	dmb	sy
}
 80026c6:	bf00      	nop

    /* DMB instruction to avoid race condition */
    __DMB();

    /* Set the Tail pointer address */
    WRITE_REG(heth->Instance->DMARPDR, ((uint32_t)(heth->Init.RxDesc + (tailidx))));
 80026c8:	687b      	ldr	r3, [r7, #4]
 80026ca:	6919      	ldr	r1, [r3, #16]
 80026cc:	68fa      	ldr	r2, [r7, #12]
 80026ce:	4613      	mov	r3, r2
 80026d0:	009b      	lsls	r3, r3, #2
 80026d2:	4413      	add	r3, r2
 80026d4:	00db      	lsls	r3, r3, #3
 80026d6:	18ca      	adds	r2, r1, r3
 80026d8:	687b      	ldr	r3, [r7, #4]
 80026da:	681b      	ldr	r3, [r3, #0]
 80026dc:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80026e0:	609a      	str	r2, [r3, #8]

    heth->RxDescList.RxBuildDescIdx = descidx;
 80026e2:	687b      	ldr	r3, [r7, #4]
 80026e4:	69fa      	ldr	r2, [r7, #28]
 80026e6:	669a      	str	r2, [r3, #104]	; 0x68
    heth->RxDescList.RxBuildDescCnt = desccount;
 80026e8:	687b      	ldr	r3, [r7, #4]
 80026ea:	69ba      	ldr	r2, [r7, #24]
 80026ec:	66da      	str	r2, [r3, #108]	; 0x6c
  }
}
 80026ee:	bf00      	nop
 80026f0:	3720      	adds	r7, #32
 80026f2:	46bd      	mov	sp, r7
 80026f4:	bd80      	pop	{r7, pc}

080026f6 <HAL_ETH_ReadPHYRegister>:
  * @param pRegValue: parameter to hold read value
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_ReadPHYRegister(ETH_HandleTypeDef *heth, uint32_t PHYAddr, uint32_t PHYReg,
                                          uint32_t *pRegValue)
{
 80026f6:	b580      	push	{r7, lr}
 80026f8:	b086      	sub	sp, #24
 80026fa:	af00      	add	r7, sp, #0
 80026fc:	60f8      	str	r0, [r7, #12]
 80026fe:	60b9      	str	r1, [r7, #8]
 8002700:	607a      	str	r2, [r7, #4]
 8002702:	603b      	str	r3, [r7, #0]
  uint32_t tmpreg1;
  uint32_t tickstart;

  /* Get the ETHERNET MACMIIAR value */
  tmpreg1 = heth->Instance->MACMIIAR;
 8002704:	68fb      	ldr	r3, [r7, #12]
 8002706:	681b      	ldr	r3, [r3, #0]
 8002708:	691b      	ldr	r3, [r3, #16]
 800270a:	617b      	str	r3, [r7, #20]

  /* Keep only the CSR Clock Range CR[2:0] bits value */
  tmpreg1 &= ~ETH_MACMIIAR_CR_MASK;
 800270c:	697b      	ldr	r3, [r7, #20]
 800270e:	f003 031c 	and.w	r3, r3, #28
 8002712:	617b      	str	r3, [r7, #20]

  /* Prepare the MII address register value */
  tmpreg1 |= ((PHYAddr << 11U) & ETH_MACMIIAR_PA);                        /* Set the PHY device address   */
 8002714:	68bb      	ldr	r3, [r7, #8]
 8002716:	02db      	lsls	r3, r3, #11
 8002718:	b29b      	uxth	r3, r3
 800271a:	697a      	ldr	r2, [r7, #20]
 800271c:	4313      	orrs	r3, r2
 800271e:	617b      	str	r3, [r7, #20]
  tmpreg1 |= (((uint32_t)PHYReg << 6U) & ETH_MACMIIAR_MR);                /* Set the PHY register address */
 8002720:	687b      	ldr	r3, [r7, #4]
 8002722:	019b      	lsls	r3, r3, #6
 8002724:	f403 63f8 	and.w	r3, r3, #1984	; 0x7c0
 8002728:	697a      	ldr	r2, [r7, #20]
 800272a:	4313      	orrs	r3, r2
 800272c:	617b      	str	r3, [r7, #20]
  tmpreg1 &= ~ETH_MACMIIAR_MW;                                            /* Set the read mode            */
 800272e:	697b      	ldr	r3, [r7, #20]
 8002730:	f023 0302 	bic.w	r3, r3, #2
 8002734:	617b      	str	r3, [r7, #20]
  tmpreg1 |= ETH_MACMIIAR_MB;                                             /* Set the MII Busy bit         */
 8002736:	697b      	ldr	r3, [r7, #20]
 8002738:	f043 0301 	orr.w	r3, r3, #1
 800273c:	617b      	str	r3, [r7, #20]

  /* Write the result value into the MII Address register */
  heth->Instance->MACMIIAR = tmpreg1;
 800273e:	68fb      	ldr	r3, [r7, #12]
 8002740:	681b      	ldr	r3, [r3, #0]
 8002742:	697a      	ldr	r2, [r7, #20]
 8002744:	611a      	str	r2, [r3, #16]


  tickstart = HAL_GetTick();
 8002746:	f7fe ff67 	bl	8001618 <HAL_GetTick>
 800274a:	6138      	str	r0, [r7, #16]

  /* Check for the Busy flag */
  while ((tmpreg1 & ETH_MACMIIAR_MB) == ETH_MACMIIAR_MB)
 800274c:	e00d      	b.n	800276a <HAL_ETH_ReadPHYRegister+0x74>
  {
    /* Check for the Timeout */
    if ((HAL_GetTick() - tickstart) > PHY_READ_TO)
 800274e:	f7fe ff63 	bl	8001618 <HAL_GetTick>
 8002752:	4602      	mov	r2, r0
 8002754:	693b      	ldr	r3, [r7, #16]
 8002756:	1ad3      	subs	r3, r2, r3
 8002758:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800275c:	d301      	bcc.n	8002762 <HAL_ETH_ReadPHYRegister+0x6c>
    {
      return HAL_ERROR;
 800275e:	2301      	movs	r3, #1
 8002760:	e010      	b.n	8002784 <HAL_ETH_ReadPHYRegister+0x8e>
    }

    tmpreg1 = heth->Instance->MACMIIAR;
 8002762:	68fb      	ldr	r3, [r7, #12]
 8002764:	681b      	ldr	r3, [r3, #0]
 8002766:	691b      	ldr	r3, [r3, #16]
 8002768:	617b      	str	r3, [r7, #20]
  while ((tmpreg1 & ETH_MACMIIAR_MB) == ETH_MACMIIAR_MB)
 800276a:	697b      	ldr	r3, [r7, #20]
 800276c:	f003 0301 	and.w	r3, r3, #1
 8002770:	2b00      	cmp	r3, #0
 8002772:	d1ec      	bne.n	800274e <HAL_ETH_ReadPHYRegister+0x58>
  }

  /* Get MACMIIDR value */
  *pRegValue = (uint16_t)(heth->Instance->MACMIIDR);
 8002774:	68fb      	ldr	r3, [r7, #12]
 8002776:	681b      	ldr	r3, [r3, #0]
 8002778:	695b      	ldr	r3, [r3, #20]
 800277a:	b29b      	uxth	r3, r3
 800277c:	461a      	mov	r2, r3
 800277e:	683b      	ldr	r3, [r7, #0]
 8002780:	601a      	str	r2, [r3, #0]

  return HAL_OK;
 8002782:	2300      	movs	r3, #0
}
 8002784:	4618      	mov	r0, r3
 8002786:	3718      	adds	r7, #24
 8002788:	46bd      	mov	sp, r7
 800278a:	bd80      	pop	{r7, pc}

0800278c <HAL_ETH_WritePHYRegister>:
  * @param  RegValue: the value to write
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_WritePHYRegister(const ETH_HandleTypeDef *heth, uint32_t PHYAddr, uint32_t PHYReg,
                                           uint32_t RegValue)
{
 800278c:	b580      	push	{r7, lr}
 800278e:	b086      	sub	sp, #24
 8002790:	af00      	add	r7, sp, #0
 8002792:	60f8      	str	r0, [r7, #12]
 8002794:	60b9      	str	r1, [r7, #8]
 8002796:	607a      	str	r2, [r7, #4]
 8002798:	603b      	str	r3, [r7, #0]
  uint32_t tmpreg1;
  uint32_t tickstart;

  /* Get the ETHERNET MACMIIAR value */
  tmpreg1 = heth->Instance->MACMIIAR;
 800279a:	68fb      	ldr	r3, [r7, #12]
 800279c:	681b      	ldr	r3, [r3, #0]
 800279e:	691b      	ldr	r3, [r3, #16]
 80027a0:	617b      	str	r3, [r7, #20]

  /* Keep only the CSR Clock Range CR[2:0] bits value */
  tmpreg1 &= ~ETH_MACMIIAR_CR_MASK;
 80027a2:	697b      	ldr	r3, [r7, #20]
 80027a4:	f003 031c 	and.w	r3, r3, #28
 80027a8:	617b      	str	r3, [r7, #20]

  /* Prepare the MII register address value */
  tmpreg1 |= ((PHYAddr << 11U) & ETH_MACMIIAR_PA);                      /* Set the PHY device address */
 80027aa:	68bb      	ldr	r3, [r7, #8]
 80027ac:	02db      	lsls	r3, r3, #11
 80027ae:	b29b      	uxth	r3, r3
 80027b0:	697a      	ldr	r2, [r7, #20]
 80027b2:	4313      	orrs	r3, r2
 80027b4:	617b      	str	r3, [r7, #20]
  tmpreg1 |= (((uint32_t)PHYReg << 6U) & ETH_MACMIIAR_MR);              /* Set the PHY register address */
 80027b6:	687b      	ldr	r3, [r7, #4]
 80027b8:	019b      	lsls	r3, r3, #6
 80027ba:	f403 63f8 	and.w	r3, r3, #1984	; 0x7c0
 80027be:	697a      	ldr	r2, [r7, #20]
 80027c0:	4313      	orrs	r3, r2
 80027c2:	617b      	str	r3, [r7, #20]
  tmpreg1 |= ETH_MACMIIAR_MW;                                           /* Set the write mode */
 80027c4:	697b      	ldr	r3, [r7, #20]
 80027c6:	f043 0302 	orr.w	r3, r3, #2
 80027ca:	617b      	str	r3, [r7, #20]
  tmpreg1 |= ETH_MACMIIAR_MB;                                           /* Set the MII Busy bit */
 80027cc:	697b      	ldr	r3, [r7, #20]
 80027ce:	f043 0301 	orr.w	r3, r3, #1
 80027d2:	617b      	str	r3, [r7, #20]

  /* Give the value to the MII data register */
  heth->Instance->MACMIIDR = (uint16_t)RegValue;
 80027d4:	683b      	ldr	r3, [r7, #0]
 80027d6:	b29a      	uxth	r2, r3
 80027d8:	68fb      	ldr	r3, [r7, #12]
 80027da:	681b      	ldr	r3, [r3, #0]
 80027dc:	615a      	str	r2, [r3, #20]

  /* Write the result value into the MII Address register */
  heth->Instance->MACMIIAR = tmpreg1;
 80027de:	68fb      	ldr	r3, [r7, #12]
 80027e0:	681b      	ldr	r3, [r3, #0]
 80027e2:	697a      	ldr	r2, [r7, #20]
 80027e4:	611a      	str	r2, [r3, #16]

  /* Get tick */
  tickstart = HAL_GetTick();
 80027e6:	f7fe ff17 	bl	8001618 <HAL_GetTick>
 80027ea:	6138      	str	r0, [r7, #16]

  /* Check for the Busy flag */
  while ((tmpreg1 & ETH_MACMIIAR_MB) == ETH_MACMIIAR_MB)
 80027ec:	e00d      	b.n	800280a <HAL_ETH_WritePHYRegister+0x7e>
  {
    /* Check for the Timeout */
    if ((HAL_GetTick() - tickstart) > PHY_WRITE_TO)
 80027ee:	f7fe ff13 	bl	8001618 <HAL_GetTick>
 80027f2:	4602      	mov	r2, r0
 80027f4:	693b      	ldr	r3, [r7, #16]
 80027f6:	1ad3      	subs	r3, r2, r3
 80027f8:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80027fc:	d301      	bcc.n	8002802 <HAL_ETH_WritePHYRegister+0x76>
    {
      return HAL_ERROR;
 80027fe:	2301      	movs	r3, #1
 8002800:	e009      	b.n	8002816 <HAL_ETH_WritePHYRegister+0x8a>
    }

    tmpreg1 = heth->Instance->MACMIIAR;
 8002802:	68fb      	ldr	r3, [r7, #12]
 8002804:	681b      	ldr	r3, [r3, #0]
 8002806:	691b      	ldr	r3, [r3, #16]
 8002808:	617b      	str	r3, [r7, #20]
  while ((tmpreg1 & ETH_MACMIIAR_MB) == ETH_MACMIIAR_MB)
 800280a:	697b      	ldr	r3, [r7, #20]
 800280c:	f003 0301 	and.w	r3, r3, #1
 8002810:	2b00      	cmp	r3, #0
 8002812:	d1ec      	bne.n	80027ee <HAL_ETH_WritePHYRegister+0x62>
  }

  return HAL_OK;
 8002814:	2300      	movs	r3, #0
}
 8002816:	4618      	mov	r0, r3
 8002818:	3718      	adds	r7, #24
 800281a:	46bd      	mov	sp, r7
 800281c:	bd80      	pop	{r7, pc}

0800281e <HAL_ETH_GetMACConfig>:
  * @param  macconf: pointer to a ETH_MACConfigTypeDef structure that will hold
  *         the configuration of the MAC.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_ETH_GetMACConfig(const ETH_HandleTypeDef *heth, ETH_MACConfigTypeDef *macconf)
{
 800281e:	b480      	push	{r7}
 8002820:	b083      	sub	sp, #12
 8002822:	af00      	add	r7, sp, #0
 8002824:	6078      	str	r0, [r7, #4]
 8002826:	6039      	str	r1, [r7, #0]
  if (macconf == NULL)
 8002828:	683b      	ldr	r3, [r7, #0]
 800282a:	2b00      	cmp	r3, #0
 800282c:	d101      	bne.n	8002832 <HAL_ETH_GetMACConfig+0x14>
  {
    return HAL_ERROR;
 800282e:	2301      	movs	r3, #1
 8002830:	e0e6      	b.n	8002a00 <HAL_ETH_GetMACConfig+0x1e2>
  }

  /* Get MAC parameters */
  macconf->DeferralCheck = ((READ_BIT(heth->Instance->MACCR, ETH_MACCR_DC) >> 4) > 0U) ? ENABLE : DISABLE;
 8002832:	687b      	ldr	r3, [r7, #4]
 8002834:	681b      	ldr	r3, [r3, #0]
 8002836:	681b      	ldr	r3, [r3, #0]
 8002838:	f003 0310 	and.w	r3, r3, #16
 800283c:	2b00      	cmp	r3, #0
 800283e:	bf14      	ite	ne
 8002840:	2301      	movne	r3, #1
 8002842:	2300      	moveq	r3, #0
 8002844:	b2db      	uxtb	r3, r3
 8002846:	461a      	mov	r2, r3
 8002848:	683b      	ldr	r3, [r7, #0]
 800284a:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
  macconf->BackOffLimit = READ_BIT(heth->Instance->MACCR, ETH_MACCR_BL);
 800284e:	687b      	ldr	r3, [r7, #4]
 8002850:	681b      	ldr	r3, [r3, #0]
 8002852:	681b      	ldr	r3, [r3, #0]
 8002854:	f003 0260 	and.w	r2, r3, #96	; 0x60
 8002858:	683b      	ldr	r3, [r7, #0]
 800285a:	625a      	str	r2, [r3, #36]	; 0x24
  macconf->RetryTransmission = ((READ_BIT(heth->Instance->MACCR, ETH_MACCR_RD) >> 9) == 0U) ? ENABLE : DISABLE;
 800285c:	687b      	ldr	r3, [r7, #4]
 800285e:	681b      	ldr	r3, [r3, #0]
 8002860:	681b      	ldr	r3, [r3, #0]
 8002862:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8002866:	2b00      	cmp	r3, #0
 8002868:	bf0c      	ite	eq
 800286a:	2301      	moveq	r3, #1
 800286c:	2300      	movne	r3, #0
 800286e:	b2db      	uxtb	r3, r3
 8002870:	461a      	mov	r2, r3
 8002872:	683b      	ldr	r3, [r7, #0]
 8002874:	f883 2020 	strb.w	r2, [r3, #32]
  macconf->CarrierSenseDuringTransmit = ((READ_BIT(heth->Instance->MACCR, ETH_MACCR_CSD) >> 16) > 0U)
 8002878:	687b      	ldr	r3, [r7, #4]
 800287a:	681b      	ldr	r3, [r3, #0]
 800287c:	681b      	ldr	r3, [r3, #0]
 800287e:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
                                        ? ENABLE : DISABLE;
 8002882:	2b00      	cmp	r3, #0
 8002884:	bf14      	ite	ne
 8002886:	2301      	movne	r3, #1
 8002888:	2300      	moveq	r3, #0
 800288a:	b2db      	uxtb	r3, r3
 800288c:	461a      	mov	r2, r3
  macconf->CarrierSenseDuringTransmit = ((READ_BIT(heth->Instance->MACCR, ETH_MACCR_CSD) >> 16) > 0U)
 800288e:	683b      	ldr	r3, [r7, #0]
 8002890:	77da      	strb	r2, [r3, #31]
  macconf->ReceiveOwn = ((READ_BIT(heth->Instance->MACCR, ETH_MACCR_ROD) >> 13) == 0U) ? ENABLE : DISABLE;
 8002892:	687b      	ldr	r3, [r7, #4]
 8002894:	681b      	ldr	r3, [r3, #0]
 8002896:	681b      	ldr	r3, [r3, #0]
 8002898:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800289c:	2b00      	cmp	r3, #0
 800289e:	bf0c      	ite	eq
 80028a0:	2301      	moveq	r3, #1
 80028a2:	2300      	movne	r3, #0
 80028a4:	b2db      	uxtb	r3, r3
 80028a6:	461a      	mov	r2, r3
 80028a8:	683b      	ldr	r3, [r7, #0]
 80028aa:	779a      	strb	r2, [r3, #30]
  macconf->LoopbackMode = ((READ_BIT(heth->Instance->MACCR, ETH_MACCR_LM) >> 12) > 0U) ? ENABLE : DISABLE;
 80028ac:	687b      	ldr	r3, [r7, #4]
 80028ae:	681b      	ldr	r3, [r3, #0]
 80028b0:	681b      	ldr	r3, [r3, #0]
 80028b2:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80028b6:	2b00      	cmp	r3, #0
 80028b8:	bf14      	ite	ne
 80028ba:	2301      	movne	r3, #1
 80028bc:	2300      	moveq	r3, #0
 80028be:	b2db      	uxtb	r3, r3
 80028c0:	461a      	mov	r2, r3
 80028c2:	683b      	ldr	r3, [r7, #0]
 80028c4:	771a      	strb	r2, [r3, #28]
  macconf->DuplexMode = READ_BIT(heth->Instance->MACCR, ETH_MACCR_DM);
 80028c6:	687b      	ldr	r3, [r7, #4]
 80028c8:	681b      	ldr	r3, [r3, #0]
 80028ca:	681b      	ldr	r3, [r3, #0]
 80028cc:	f403 6200 	and.w	r2, r3, #2048	; 0x800
 80028d0:	683b      	ldr	r3, [r7, #0]
 80028d2:	619a      	str	r2, [r3, #24]
  macconf->Speed = READ_BIT(heth->Instance->MACCR, ETH_MACCR_FES);
 80028d4:	687b      	ldr	r3, [r7, #4]
 80028d6:	681b      	ldr	r3, [r3, #0]
 80028d8:	681b      	ldr	r3, [r3, #0]
 80028da:	f403 4280 	and.w	r2, r3, #16384	; 0x4000
 80028de:	683b      	ldr	r3, [r7, #0]
 80028e0:	615a      	str	r2, [r3, #20]
  macconf->Jabber = ((READ_BIT(heth->Instance->MACCR, ETH_MACCR_JD) >> 22) == 0U) ? ENABLE : DISABLE;
 80028e2:	687b      	ldr	r3, [r7, #4]
 80028e4:	681b      	ldr	r3, [r3, #0]
 80028e6:	681b      	ldr	r3, [r3, #0]
 80028e8:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80028ec:	2b00      	cmp	r3, #0
 80028ee:	bf0c      	ite	eq
 80028f0:	2301      	moveq	r3, #1
 80028f2:	2300      	movne	r3, #0
 80028f4:	b2db      	uxtb	r3, r3
 80028f6:	461a      	mov	r2, r3
 80028f8:	683b      	ldr	r3, [r7, #0]
 80028fa:	745a      	strb	r2, [r3, #17]
  macconf->Watchdog = ((READ_BIT(heth->Instance->MACCR, ETH_MACCR_WD) >> 23) == 0U) ? ENABLE : DISABLE;
 80028fc:	687b      	ldr	r3, [r7, #4]
 80028fe:	681b      	ldr	r3, [r3, #0]
 8002900:	681b      	ldr	r3, [r3, #0]
 8002902:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8002906:	2b00      	cmp	r3, #0
 8002908:	bf0c      	ite	eq
 800290a:	2301      	moveq	r3, #1
 800290c:	2300      	movne	r3, #0
 800290e:	b2db      	uxtb	r3, r3
 8002910:	461a      	mov	r2, r3
 8002912:	683b      	ldr	r3, [r7, #0]
 8002914:	741a      	strb	r2, [r3, #16]
  macconf->AutomaticPadCRCStrip = ((READ_BIT(heth->Instance->MACCR, ETH_MACCR_APCS) >> 7) > 0U) ? ENABLE : DISABLE;
 8002916:	687b      	ldr	r3, [r7, #4]
 8002918:	681b      	ldr	r3, [r3, #0]
 800291a:	681b      	ldr	r3, [r3, #0]
 800291c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002920:	2b00      	cmp	r3, #0
 8002922:	bf14      	ite	ne
 8002924:	2301      	movne	r3, #1
 8002926:	2300      	moveq	r3, #0
 8002928:	b2db      	uxtb	r3, r3
 800292a:	461a      	mov	r2, r3
 800292c:	683b      	ldr	r3, [r7, #0]
 800292e:	73da      	strb	r2, [r3, #15]
  macconf->InterPacketGapVal = READ_BIT(heth->Instance->MACCR, ETH_MACCR_IFG);
 8002930:	687b      	ldr	r3, [r7, #4]
 8002932:	681b      	ldr	r3, [r3, #0]
 8002934:	681b      	ldr	r3, [r3, #0]
 8002936:	f403 2260 	and.w	r2, r3, #917504	; 0xe0000
 800293a:	683b      	ldr	r3, [r7, #0]
 800293c:	609a      	str	r2, [r3, #8]
  macconf->ChecksumOffload = ((READ_BIT(heth->Instance->MACCR, ETH_MACCR_IPCO) >> 10U) > 0U) ? ENABLE : DISABLE;
 800293e:	687b      	ldr	r3, [r7, #4]
 8002940:	681b      	ldr	r3, [r3, #0]
 8002942:	681b      	ldr	r3, [r3, #0]
 8002944:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002948:	2b00      	cmp	r3, #0
 800294a:	bf14      	ite	ne
 800294c:	2301      	movne	r3, #1
 800294e:	2300      	moveq	r3, #0
 8002950:	b2db      	uxtb	r3, r3
 8002952:	461a      	mov	r2, r3
 8002954:	683b      	ldr	r3, [r7, #0]
 8002956:	711a      	strb	r2, [r3, #4]
  macconf->CRCStripTypePacket = ((READ_BIT(heth->Instance->MACCR, ETH_MACCR_CSTF) >> 25U) > 0U) ? ENABLE : DISABLE;
 8002958:	687b      	ldr	r3, [r7, #4]
 800295a:	681b      	ldr	r3, [r3, #0]
 800295c:	681b      	ldr	r3, [r3, #0]
 800295e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002962:	2b00      	cmp	r3, #0
 8002964:	bf14      	ite	ne
 8002966:	2301      	movne	r3, #1
 8002968:	2300      	moveq	r3, #0
 800296a:	b2db      	uxtb	r3, r3
 800296c:	461a      	mov	r2, r3
 800296e:	683b      	ldr	r3, [r7, #0]
 8002970:	739a      	strb	r2, [r3, #14]

  macconf->TransmitFlowControl = ((READ_BIT(heth->Instance->MACFCR, ETH_MACFCR_TFCE) >> 1) > 0U) ? ENABLE : DISABLE;
 8002972:	687b      	ldr	r3, [r7, #4]
 8002974:	681b      	ldr	r3, [r3, #0]
 8002976:	699b      	ldr	r3, [r3, #24]
 8002978:	f003 0302 	and.w	r3, r3, #2
 800297c:	2b00      	cmp	r3, #0
 800297e:	bf14      	ite	ne
 8002980:	2301      	movne	r3, #1
 8002982:	2300      	moveq	r3, #0
 8002984:	b2db      	uxtb	r3, r3
 8002986:	461a      	mov	r2, r3
 8002988:	683b      	ldr	r3, [r7, #0]
 800298a:	f883 2054 	strb.w	r2, [r3, #84]	; 0x54
  macconf->ZeroQuantaPause = ((READ_BIT(heth->Instance->MACFCR, ETH_MACFCR_ZQPD) >> 7) == 0U) ? ENABLE : DISABLE;
 800298e:	687b      	ldr	r3, [r7, #4]
 8002990:	681b      	ldr	r3, [r3, #0]
 8002992:	699b      	ldr	r3, [r3, #24]
 8002994:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002998:	2b00      	cmp	r3, #0
 800299a:	bf0c      	ite	eq
 800299c:	2301      	moveq	r3, #1
 800299e:	2300      	movne	r3, #0
 80029a0:	b2db      	uxtb	r3, r3
 80029a2:	461a      	mov	r2, r3
 80029a4:	683b      	ldr	r3, [r7, #0]
 80029a6:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
  macconf->PauseLowThreshold = READ_BIT(heth->Instance->MACFCR, ETH_MACFCR_PLT);
 80029aa:	687b      	ldr	r3, [r7, #4]
 80029ac:	681b      	ldr	r3, [r3, #0]
 80029ae:	699b      	ldr	r3, [r3, #24]
 80029b0:	f003 0230 	and.w	r2, r3, #48	; 0x30
 80029b4:	683b      	ldr	r3, [r7, #0]
 80029b6:	651a      	str	r2, [r3, #80]	; 0x50
  macconf->PauseTime = (READ_BIT(heth->Instance->MACFCR, ETH_MACFCR_PT) >> 16);
 80029b8:	687b      	ldr	r3, [r7, #4]
 80029ba:	681b      	ldr	r3, [r3, #0]
 80029bc:	699b      	ldr	r3, [r3, #24]
 80029be:	0c1b      	lsrs	r3, r3, #16
 80029c0:	b29a      	uxth	r2, r3
 80029c2:	683b      	ldr	r3, [r7, #0]
 80029c4:	649a      	str	r2, [r3, #72]	; 0x48
  macconf->ReceiveFlowControl = ((READ_BIT(heth->Instance->MACFCR, ETH_MACFCR_RFCE) >> 2U) > 0U) ? ENABLE : DISABLE;
 80029c6:	687b      	ldr	r3, [r7, #4]
 80029c8:	681b      	ldr	r3, [r3, #0]
 80029ca:	699b      	ldr	r3, [r3, #24]
 80029cc:	f003 0304 	and.w	r3, r3, #4
 80029d0:	2b00      	cmp	r3, #0
 80029d2:	bf14      	ite	ne
 80029d4:	2301      	movne	r3, #1
 80029d6:	2300      	moveq	r3, #0
 80029d8:	b2db      	uxtb	r3, r3
 80029da:	461a      	mov	r2, r3
 80029dc:	683b      	ldr	r3, [r7, #0]
 80029de:	f883 2056 	strb.w	r2, [r3, #86]	; 0x56
  macconf->UnicastPausePacketDetect = ((READ_BIT(heth->Instance->MACFCR, ETH_MACFCR_UPFD) >> 3U) > 0U)
 80029e2:	687b      	ldr	r3, [r7, #4]
 80029e4:	681b      	ldr	r3, [r3, #0]
 80029e6:	699b      	ldr	r3, [r3, #24]
 80029e8:	f003 0308 	and.w	r3, r3, #8
                                      ? ENABLE : DISABLE;
 80029ec:	2b00      	cmp	r3, #0
 80029ee:	bf14      	ite	ne
 80029f0:	2301      	movne	r3, #1
 80029f2:	2300      	moveq	r3, #0
 80029f4:	b2db      	uxtb	r3, r3
 80029f6:	461a      	mov	r2, r3
  macconf->UnicastPausePacketDetect = ((READ_BIT(heth->Instance->MACFCR, ETH_MACFCR_UPFD) >> 3U) > 0U)
 80029f8:	683b      	ldr	r3, [r7, #0]
 80029fa:	f883 2055 	strb.w	r2, [r3, #85]	; 0x55

  return HAL_OK;
 80029fe:	2300      	movs	r3, #0
}
 8002a00:	4618      	mov	r0, r3
 8002a02:	370c      	adds	r7, #12
 8002a04:	46bd      	mov	sp, r7
 8002a06:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a0a:	4770      	bx	lr

08002a0c <HAL_ETH_SetMACConfig>:
  * @param  macconf: pointer to a ETH_MACConfigTypeDef structure that contains
  *         the configuration of the MAC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_SetMACConfig(ETH_HandleTypeDef *heth,  ETH_MACConfigTypeDef *macconf)
{
 8002a0c:	b580      	push	{r7, lr}
 8002a0e:	b082      	sub	sp, #8
 8002a10:	af00      	add	r7, sp, #0
 8002a12:	6078      	str	r0, [r7, #4]
 8002a14:	6039      	str	r1, [r7, #0]
  if (macconf == NULL)
 8002a16:	683b      	ldr	r3, [r7, #0]
 8002a18:	2b00      	cmp	r3, #0
 8002a1a:	d101      	bne.n	8002a20 <HAL_ETH_SetMACConfig+0x14>
  {
    return HAL_ERROR;
 8002a1c:	2301      	movs	r3, #1
 8002a1e:	e00b      	b.n	8002a38 <HAL_ETH_SetMACConfig+0x2c>
  }

  if (heth->gState == HAL_ETH_STATE_READY)
 8002a20:	687b      	ldr	r3, [r7, #4]
 8002a22:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8002a26:	2b10      	cmp	r3, #16
 8002a28:	d105      	bne.n	8002a36 <HAL_ETH_SetMACConfig+0x2a>
  {
    ETH_SetMACConfig(heth, macconf);
 8002a2a:	6839      	ldr	r1, [r7, #0]
 8002a2c:	6878      	ldr	r0, [r7, #4]
 8002a2e:	f000 f86f 	bl	8002b10 <ETH_SetMACConfig>

    return HAL_OK;
 8002a32:	2300      	movs	r3, #0
 8002a34:	e000      	b.n	8002a38 <HAL_ETH_SetMACConfig+0x2c>
  }
  else
  {
    return HAL_ERROR;
 8002a36:	2301      	movs	r3, #1
  }
}
 8002a38:	4618      	mov	r0, r3
 8002a3a:	3708      	adds	r7, #8
 8002a3c:	46bd      	mov	sp, r7
 8002a3e:	bd80      	pop	{r7, pc}

08002a40 <HAL_ETH_SetMDIOClockRange>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
void HAL_ETH_SetMDIOClockRange(ETH_HandleTypeDef *heth)
{
 8002a40:	b580      	push	{r7, lr}
 8002a42:	b084      	sub	sp, #16
 8002a44:	af00      	add	r7, sp, #0
 8002a46:	6078      	str	r0, [r7, #4]
  uint32_t hclk;
  uint32_t tmpreg;

  /* Get the ETHERNET MACMIIAR value */
  tmpreg = (heth->Instance)->MACMIIAR;
 8002a48:	687b      	ldr	r3, [r7, #4]
 8002a4a:	681b      	ldr	r3, [r3, #0]
 8002a4c:	691b      	ldr	r3, [r3, #16]
 8002a4e:	60fb      	str	r3, [r7, #12]
  /* Clear CSR Clock Range CR[2:0] bits */
  tmpreg &= ETH_MACMIIAR_CR_MASK;
 8002a50:	68fb      	ldr	r3, [r7, #12]
 8002a52:	f023 031c 	bic.w	r3, r3, #28
 8002a56:	60fb      	str	r3, [r7, #12]

  /* Get hclk frequency value */
  hclk = HAL_RCC_GetHCLKFreq();
 8002a58:	f002 fc68 	bl	800532c <HAL_RCC_GetHCLKFreq>
 8002a5c:	60b8      	str	r0, [r7, #8]

  /* Set CR bits depending on hclk value */
  if (hclk < 35000000U)
 8002a5e:	68bb      	ldr	r3, [r7, #8]
 8002a60:	4a14      	ldr	r2, [pc, #80]	; (8002ab4 <HAL_ETH_SetMDIOClockRange+0x74>)
 8002a62:	4293      	cmp	r3, r2
 8002a64:	d804      	bhi.n	8002a70 <HAL_ETH_SetMDIOClockRange+0x30>
  {
    /* CSR Clock Range between 0-35 MHz */
    tmpreg |= (uint32_t)ETH_MACMIIAR_CR_Div16;
 8002a66:	68fb      	ldr	r3, [r7, #12]
 8002a68:	f043 0308 	orr.w	r3, r3, #8
 8002a6c:	60fb      	str	r3, [r7, #12]
 8002a6e:	e019      	b.n	8002aa4 <HAL_ETH_SetMDIOClockRange+0x64>
  }
  else if (hclk < 60000000U)
 8002a70:	68bb      	ldr	r3, [r7, #8]
 8002a72:	4a11      	ldr	r2, [pc, #68]	; (8002ab8 <HAL_ETH_SetMDIOClockRange+0x78>)
 8002a74:	4293      	cmp	r3, r2
 8002a76:	d204      	bcs.n	8002a82 <HAL_ETH_SetMDIOClockRange+0x42>
  {
    /* CSR Clock Range between 35-60 MHz */
    tmpreg |= (uint32_t)ETH_MACMIIAR_CR_Div26;
 8002a78:	68fb      	ldr	r3, [r7, #12]
 8002a7a:	f043 030c 	orr.w	r3, r3, #12
 8002a7e:	60fb      	str	r3, [r7, #12]
 8002a80:	e010      	b.n	8002aa4 <HAL_ETH_SetMDIOClockRange+0x64>
  }
  else if (hclk < 100000000U)
 8002a82:	68bb      	ldr	r3, [r7, #8]
 8002a84:	4a0d      	ldr	r2, [pc, #52]	; (8002abc <HAL_ETH_SetMDIOClockRange+0x7c>)
 8002a86:	4293      	cmp	r3, r2
 8002a88:	d90c      	bls.n	8002aa4 <HAL_ETH_SetMDIOClockRange+0x64>
  {
    /* CSR Clock Range between 60-100 MHz */
    tmpreg |= (uint32_t)ETH_MACMIIAR_CR_Div42;
  }
  else if (hclk < 150000000U)
 8002a8a:	68bb      	ldr	r3, [r7, #8]
 8002a8c:	4a0c      	ldr	r2, [pc, #48]	; (8002ac0 <HAL_ETH_SetMDIOClockRange+0x80>)
 8002a8e:	4293      	cmp	r3, r2
 8002a90:	d804      	bhi.n	8002a9c <HAL_ETH_SetMDIOClockRange+0x5c>
  {
    /* CSR Clock Range between 100-150 MHz */
    tmpreg |= (uint32_t)ETH_MACMIIAR_CR_Div62;
 8002a92:	68fb      	ldr	r3, [r7, #12]
 8002a94:	f043 0304 	orr.w	r3, r3, #4
 8002a98:	60fb      	str	r3, [r7, #12]
 8002a9a:	e003      	b.n	8002aa4 <HAL_ETH_SetMDIOClockRange+0x64>
  }
  else /* (hclk >= 150000000)  */
  {
    /* CSR Clock >= 150 MHz */
    tmpreg |= (uint32_t)ETH_MACMIIAR_CR_Div102;
 8002a9c:	68fb      	ldr	r3, [r7, #12]
 8002a9e:	f043 0310 	orr.w	r3, r3, #16
 8002aa2:	60fb      	str	r3, [r7, #12]
  }

  /* Write to ETHERNET MAC MIIAR: Configure the ETHERNET CSR Clock Range */
  (heth->Instance)->MACMIIAR = (uint32_t)tmpreg;
 8002aa4:	687b      	ldr	r3, [r7, #4]
 8002aa6:	681b      	ldr	r3, [r3, #0]
 8002aa8:	68fa      	ldr	r2, [r7, #12]
 8002aaa:	611a      	str	r2, [r3, #16]
}
 8002aac:	bf00      	nop
 8002aae:	3710      	adds	r7, #16
 8002ab0:	46bd      	mov	sp, r7
 8002ab2:	bd80      	pop	{r7, pc}
 8002ab4:	02160ebf 	.word	0x02160ebf
 8002ab8:	03938700 	.word	0x03938700
 8002abc:	05f5e0ff 	.word	0x05f5e0ff
 8002ac0:	08f0d17f 	.word	0x08f0d17f

08002ac4 <ETH_FlushTransmitFIFO>:
  * @param  heth pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
static void ETH_FlushTransmitFIFO(ETH_HandleTypeDef *heth)
{
 8002ac4:	b580      	push	{r7, lr}
 8002ac6:	b084      	sub	sp, #16
 8002ac8:	af00      	add	r7, sp, #0
 8002aca:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg = 0;
 8002acc:	2300      	movs	r3, #0
 8002ace:	60fb      	str	r3, [r7, #12]

  /* Set the Flush Transmit FIFO bit */
  (heth->Instance)->DMAOMR |= ETH_DMAOMR_FTF;
 8002ad0:	687b      	ldr	r3, [r7, #4]
 8002ad2:	681b      	ldr	r3, [r3, #0]
 8002ad4:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8002ad8:	699b      	ldr	r3, [r3, #24]
 8002ada:	687a      	ldr	r2, [r7, #4]
 8002adc:	6812      	ldr	r2, [r2, #0]
 8002ade:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8002ae2:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 8002ae6:	6193      	str	r3, [r2, #24]

  /* Wait until the write operation will be taken into account:
     at least four TX_CLK/RX_CLK clock cycles */
  tmpreg = (heth->Instance)->DMAOMR;
 8002ae8:	687b      	ldr	r3, [r7, #4]
 8002aea:	681b      	ldr	r3, [r3, #0]
 8002aec:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8002af0:	699b      	ldr	r3, [r3, #24]
 8002af2:	60fb      	str	r3, [r7, #12]
  HAL_Delay(ETH_REG_WRITE_DELAY);
 8002af4:	2001      	movs	r0, #1
 8002af6:	f7fe fd9b 	bl	8001630 <HAL_Delay>
  (heth->Instance)->DMAOMR = tmpreg;
 8002afa:	687b      	ldr	r3, [r7, #4]
 8002afc:	681a      	ldr	r2, [r3, #0]
 8002afe:	68fb      	ldr	r3, [r7, #12]
 8002b00:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 8002b04:	6193      	str	r3, [r2, #24]
}
 8002b06:	bf00      	nop
 8002b08:	3710      	adds	r7, #16
 8002b0a:	46bd      	mov	sp, r7
 8002b0c:	bd80      	pop	{r7, pc}
	...

08002b10 <ETH_SetMACConfig>:

static void ETH_SetMACConfig(ETH_HandleTypeDef *heth, const ETH_MACConfigTypeDef *macconf)
{
 8002b10:	b580      	push	{r7, lr}
 8002b12:	b084      	sub	sp, #16
 8002b14:	af00      	add	r7, sp, #0
 8002b16:	6078      	str	r0, [r7, #4]
 8002b18:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg1;

  /*------------------------ ETHERNET MACCR Configuration --------------------*/
  /* Get the ETHERNET MACCR value */
  tmpreg1 = (heth->Instance)->MACCR;
 8002b1a:	687b      	ldr	r3, [r7, #4]
 8002b1c:	681b      	ldr	r3, [r3, #0]
 8002b1e:	681b      	ldr	r3, [r3, #0]
 8002b20:	60fb      	str	r3, [r7, #12]
  /* Clear CSTF, WD, PCE, PS, TE and RE bits */
  tmpreg1 &= ETH_MACCR_CLEAR_MASK;
 8002b22:	68fa      	ldr	r2, [r7, #12]
 8002b24:	4b53      	ldr	r3, [pc, #332]	; (8002c74 <ETH_SetMACConfig+0x164>)
 8002b26:	4013      	ands	r3, r2
 8002b28:	60fb      	str	r3, [r7, #12]

  tmpreg1 |= (uint32_t)(((uint32_t)macconf->CRCStripTypePacket << 25U) |
 8002b2a:	683b      	ldr	r3, [r7, #0]
 8002b2c:	7b9b      	ldrb	r3, [r3, #14]
 8002b2e:	065b      	lsls	r3, r3, #25
                        ((uint32_t)((macconf->Watchdog == DISABLE) ? 1U : 0U) << 23U) |
 8002b30:	683a      	ldr	r2, [r7, #0]
 8002b32:	7c12      	ldrb	r2, [r2, #16]
 8002b34:	2a00      	cmp	r2, #0
 8002b36:	d102      	bne.n	8002b3e <ETH_SetMACConfig+0x2e>
 8002b38:	f44f 0200 	mov.w	r2, #8388608	; 0x800000
 8002b3c:	e000      	b.n	8002b40 <ETH_SetMACConfig+0x30>
 8002b3e:	2200      	movs	r2, #0
  tmpreg1 |= (uint32_t)(((uint32_t)macconf->CRCStripTypePacket << 25U) |
 8002b40:	4313      	orrs	r3, r2
                        ((uint32_t)((macconf->Jabber == DISABLE) ? 1U : 0U) << 22U) |
 8002b42:	683a      	ldr	r2, [r7, #0]
 8002b44:	7c52      	ldrb	r2, [r2, #17]
 8002b46:	2a00      	cmp	r2, #0
 8002b48:	d102      	bne.n	8002b50 <ETH_SetMACConfig+0x40>
 8002b4a:	f44f 0280 	mov.w	r2, #4194304	; 0x400000
 8002b4e:	e000      	b.n	8002b52 <ETH_SetMACConfig+0x42>
 8002b50:	2200      	movs	r2, #0
                        ((uint32_t)((macconf->Watchdog == DISABLE) ? 1U : 0U) << 23U) |
 8002b52:	431a      	orrs	r2, r3
                        (uint32_t)macconf->InterPacketGapVal |
 8002b54:	683b      	ldr	r3, [r7, #0]
 8002b56:	689b      	ldr	r3, [r3, #8]
                        ((uint32_t)((macconf->Jabber == DISABLE) ? 1U : 0U) << 22U) |
 8002b58:	431a      	orrs	r2, r3
                        ((uint32_t)macconf->CarrierSenseDuringTransmit << 16U) |
 8002b5a:	683b      	ldr	r3, [r7, #0]
 8002b5c:	7fdb      	ldrb	r3, [r3, #31]
 8002b5e:	041b      	lsls	r3, r3, #16
                        (uint32_t)macconf->InterPacketGapVal |
 8002b60:	431a      	orrs	r2, r3
                        macconf->Speed |
 8002b62:	683b      	ldr	r3, [r7, #0]
 8002b64:	695b      	ldr	r3, [r3, #20]
                        ((uint32_t)macconf->CarrierSenseDuringTransmit << 16U) |
 8002b66:	4313      	orrs	r3, r2
                        ((uint32_t)((macconf->ReceiveOwn == DISABLE) ? 1U : 0U) << 13U) |
 8002b68:	683a      	ldr	r2, [r7, #0]
 8002b6a:	7f92      	ldrb	r2, [r2, #30]
 8002b6c:	2a00      	cmp	r2, #0
 8002b6e:	d102      	bne.n	8002b76 <ETH_SetMACConfig+0x66>
 8002b70:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8002b74:	e000      	b.n	8002b78 <ETH_SetMACConfig+0x68>
 8002b76:	2200      	movs	r2, #0
                        macconf->Speed |
 8002b78:	431a      	orrs	r2, r3
                        ((uint32_t)macconf->LoopbackMode << 12U) |
 8002b7a:	683b      	ldr	r3, [r7, #0]
 8002b7c:	7f1b      	ldrb	r3, [r3, #28]
 8002b7e:	031b      	lsls	r3, r3, #12
                        ((uint32_t)((macconf->ReceiveOwn == DISABLE) ? 1U : 0U) << 13U) |
 8002b80:	431a      	orrs	r2, r3
                        macconf->DuplexMode |
 8002b82:	683b      	ldr	r3, [r7, #0]
 8002b84:	699b      	ldr	r3, [r3, #24]
                        ((uint32_t)macconf->LoopbackMode << 12U) |
 8002b86:	431a      	orrs	r2, r3
                        ((uint32_t)macconf->ChecksumOffload << 10U) |
 8002b88:	683b      	ldr	r3, [r7, #0]
 8002b8a:	791b      	ldrb	r3, [r3, #4]
 8002b8c:	029b      	lsls	r3, r3, #10
                        macconf->DuplexMode |
 8002b8e:	4313      	orrs	r3, r2
                        ((uint32_t)((macconf->RetryTransmission == DISABLE) ? 1U : 0U) << 9U) |
 8002b90:	683a      	ldr	r2, [r7, #0]
 8002b92:	f892 2020 	ldrb.w	r2, [r2, #32]
 8002b96:	2a00      	cmp	r2, #0
 8002b98:	d102      	bne.n	8002ba0 <ETH_SetMACConfig+0x90>
 8002b9a:	f44f 7200 	mov.w	r2, #512	; 0x200
 8002b9e:	e000      	b.n	8002ba2 <ETH_SetMACConfig+0x92>
 8002ba0:	2200      	movs	r2, #0
                        ((uint32_t)macconf->ChecksumOffload << 10U) |
 8002ba2:	431a      	orrs	r2, r3
                        ((uint32_t)macconf->AutomaticPadCRCStrip << 7U) |
 8002ba4:	683b      	ldr	r3, [r7, #0]
 8002ba6:	7bdb      	ldrb	r3, [r3, #15]
 8002ba8:	01db      	lsls	r3, r3, #7
                        ((uint32_t)((macconf->RetryTransmission == DISABLE) ? 1U : 0U) << 9U) |
 8002baa:	431a      	orrs	r2, r3
                        macconf->BackOffLimit |
 8002bac:	683b      	ldr	r3, [r7, #0]
 8002bae:	6a5b      	ldr	r3, [r3, #36]	; 0x24
                        ((uint32_t)macconf->AutomaticPadCRCStrip << 7U) |
 8002bb0:	431a      	orrs	r2, r3
                        ((uint32_t)macconf->DeferralCheck << 4U));
 8002bb2:	683b      	ldr	r3, [r7, #0]
 8002bb4:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8002bb8:	011b      	lsls	r3, r3, #4
  tmpreg1 |= (uint32_t)(((uint32_t)macconf->CRCStripTypePacket << 25U) |
 8002bba:	4313      	orrs	r3, r2
 8002bbc:	68fa      	ldr	r2, [r7, #12]
 8002bbe:	4313      	orrs	r3, r2
 8002bc0:	60fb      	str	r3, [r7, #12]

  /* Write to ETHERNET MACCR */
  (heth->Instance)->MACCR = (uint32_t)tmpreg1;
 8002bc2:	687b      	ldr	r3, [r7, #4]
 8002bc4:	681b      	ldr	r3, [r3, #0]
 8002bc6:	68fa      	ldr	r2, [r7, #12]
 8002bc8:	601a      	str	r2, [r3, #0]

  /* Wait until the write operation will be taken into account :
  at least four TX_CLK/RX_CLK clock cycles */
  tmpreg1 = (heth->Instance)->MACCR;
 8002bca:	687b      	ldr	r3, [r7, #4]
 8002bcc:	681b      	ldr	r3, [r3, #0]
 8002bce:	681b      	ldr	r3, [r3, #0]
 8002bd0:	60fb      	str	r3, [r7, #12]
  HAL_Delay(ETH_REG_WRITE_DELAY);
 8002bd2:	2001      	movs	r0, #1
 8002bd4:	f7fe fd2c 	bl	8001630 <HAL_Delay>
  (heth->Instance)->MACCR = tmpreg1;
 8002bd8:	687b      	ldr	r3, [r7, #4]
 8002bda:	681b      	ldr	r3, [r3, #0]
 8002bdc:	68fa      	ldr	r2, [r7, #12]
 8002bde:	601a      	str	r2, [r3, #0]

  /*----------------------- ETHERNET MACFCR Configuration --------------------*/

  /* Get the ETHERNET MACFCR value */
  tmpreg1 = (heth->Instance)->MACFCR;
 8002be0:	687b      	ldr	r3, [r7, #4]
 8002be2:	681b      	ldr	r3, [r3, #0]
 8002be4:	699b      	ldr	r3, [r3, #24]
 8002be6:	60fb      	str	r3, [r7, #12]
  /* Clear xx bits */
  tmpreg1 &= ETH_MACFCR_CLEAR_MASK;
 8002be8:	68fa      	ldr	r2, [r7, #12]
 8002bea:	f64f 7341 	movw	r3, #65345	; 0xff41
 8002bee:	4013      	ands	r3, r2
 8002bf0:	60fb      	str	r3, [r7, #12]

  tmpreg1 |= (uint32_t)((macconf->PauseTime << 16U) |
 8002bf2:	683b      	ldr	r3, [r7, #0]
 8002bf4:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002bf6:	041b      	lsls	r3, r3, #16
                        ((uint32_t)((macconf->ZeroQuantaPause == DISABLE) ? 1U : 0U) << 7U) |
 8002bf8:	683a      	ldr	r2, [r7, #0]
 8002bfa:	f892 204c 	ldrb.w	r2, [r2, #76]	; 0x4c
 8002bfe:	2a00      	cmp	r2, #0
 8002c00:	d101      	bne.n	8002c06 <ETH_SetMACConfig+0xf6>
 8002c02:	2280      	movs	r2, #128	; 0x80
 8002c04:	e000      	b.n	8002c08 <ETH_SetMACConfig+0xf8>
 8002c06:	2200      	movs	r2, #0
  tmpreg1 |= (uint32_t)((macconf->PauseTime << 16U) |
 8002c08:	431a      	orrs	r2, r3
                        macconf->PauseLowThreshold |
 8002c0a:	683b      	ldr	r3, [r7, #0]
 8002c0c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
                        ((uint32_t)((macconf->ZeroQuantaPause == DISABLE) ? 1U : 0U) << 7U) |
 8002c0e:	4313      	orrs	r3, r2
                        ((uint32_t)((macconf->UnicastPausePacketDetect == ENABLE) ? 1U : 0U) << 3U) |
 8002c10:	683a      	ldr	r2, [r7, #0]
 8002c12:	f892 2055 	ldrb.w	r2, [r2, #85]	; 0x55
 8002c16:	2a01      	cmp	r2, #1
 8002c18:	d101      	bne.n	8002c1e <ETH_SetMACConfig+0x10e>
 8002c1a:	2208      	movs	r2, #8
 8002c1c:	e000      	b.n	8002c20 <ETH_SetMACConfig+0x110>
 8002c1e:	2200      	movs	r2, #0
                        macconf->PauseLowThreshold |
 8002c20:	4313      	orrs	r3, r2
                        ((uint32_t)((macconf->ReceiveFlowControl == ENABLE) ? 1U : 0U) << 2U) |
 8002c22:	683a      	ldr	r2, [r7, #0]
 8002c24:	f892 2056 	ldrb.w	r2, [r2, #86]	; 0x56
 8002c28:	2a01      	cmp	r2, #1
 8002c2a:	d101      	bne.n	8002c30 <ETH_SetMACConfig+0x120>
 8002c2c:	2204      	movs	r2, #4
 8002c2e:	e000      	b.n	8002c32 <ETH_SetMACConfig+0x122>
 8002c30:	2200      	movs	r2, #0
                        ((uint32_t)((macconf->UnicastPausePacketDetect == ENABLE) ? 1U : 0U) << 3U) |
 8002c32:	4313      	orrs	r3, r2
                        ((uint32_t)((macconf->TransmitFlowControl == ENABLE) ? 1U : 0U) << 1U));
 8002c34:	683a      	ldr	r2, [r7, #0]
 8002c36:	f892 2054 	ldrb.w	r2, [r2, #84]	; 0x54
 8002c3a:	2a01      	cmp	r2, #1
 8002c3c:	d101      	bne.n	8002c42 <ETH_SetMACConfig+0x132>
 8002c3e:	2202      	movs	r2, #2
 8002c40:	e000      	b.n	8002c44 <ETH_SetMACConfig+0x134>
 8002c42:	2200      	movs	r2, #0
  tmpreg1 |= (uint32_t)((macconf->PauseTime << 16U) |
 8002c44:	4313      	orrs	r3, r2
 8002c46:	68fa      	ldr	r2, [r7, #12]
 8002c48:	4313      	orrs	r3, r2
 8002c4a:	60fb      	str	r3, [r7, #12]

  /* Write to ETHERNET MACFCR */
  (heth->Instance)->MACFCR = (uint32_t)tmpreg1;
 8002c4c:	687b      	ldr	r3, [r7, #4]
 8002c4e:	681b      	ldr	r3, [r3, #0]
 8002c50:	68fa      	ldr	r2, [r7, #12]
 8002c52:	619a      	str	r2, [r3, #24]

  /* Wait until the write operation will be taken into account :
  at least four TX_CLK/RX_CLK clock cycles */
  tmpreg1 = (heth->Instance)->MACFCR;
 8002c54:	687b      	ldr	r3, [r7, #4]
 8002c56:	681b      	ldr	r3, [r3, #0]
 8002c58:	699b      	ldr	r3, [r3, #24]
 8002c5a:	60fb      	str	r3, [r7, #12]
  HAL_Delay(ETH_REG_WRITE_DELAY);
 8002c5c:	2001      	movs	r0, #1
 8002c5e:	f7fe fce7 	bl	8001630 <HAL_Delay>
  (heth->Instance)->MACFCR = tmpreg1;
 8002c62:	687b      	ldr	r3, [r7, #4]
 8002c64:	681b      	ldr	r3, [r3, #0]
 8002c66:	68fa      	ldr	r2, [r7, #12]
 8002c68:	619a      	str	r2, [r3, #24]
}
 8002c6a:	bf00      	nop
 8002c6c:	3710      	adds	r7, #16
 8002c6e:	46bd      	mov	sp, r7
 8002c70:	bd80      	pop	{r7, pc}
 8002c72:	bf00      	nop
 8002c74:	fd20810f 	.word	0xfd20810f

08002c78 <ETH_SetDMAConfig>:

static void ETH_SetDMAConfig(ETH_HandleTypeDef *heth, const ETH_DMAConfigTypeDef *dmaconf)
{
 8002c78:	b580      	push	{r7, lr}
 8002c7a:	b084      	sub	sp, #16
 8002c7c:	af00      	add	r7, sp, #0
 8002c7e:	6078      	str	r0, [r7, #4]
 8002c80:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg1;

  /*----------------------- ETHERNET DMAOMR Configuration --------------------*/
  /* Get the ETHERNET DMAOMR value */
  tmpreg1 = (heth->Instance)->DMAOMR;
 8002c82:	687b      	ldr	r3, [r7, #4]
 8002c84:	681b      	ldr	r3, [r3, #0]
 8002c86:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8002c8a:	699b      	ldr	r3, [r3, #24]
 8002c8c:	60fb      	str	r3, [r7, #12]
  /* Clear xx bits */
  tmpreg1 &= ETH_DMAOMR_CLEAR_MASK;
 8002c8e:	68fa      	ldr	r2, [r7, #12]
 8002c90:	4b3d      	ldr	r3, [pc, #244]	; (8002d88 <ETH_SetDMAConfig+0x110>)
 8002c92:	4013      	ands	r3, r2
 8002c94:	60fb      	str	r3, [r7, #12]

  tmpreg1 |= (uint32_t)(((uint32_t)((dmaconf->DropTCPIPChecksumErrorFrame == DISABLE) ? 1U : 0U) << 26U) |
 8002c96:	683b      	ldr	r3, [r7, #0]
 8002c98:	7b1b      	ldrb	r3, [r3, #12]
 8002c9a:	2b00      	cmp	r3, #0
 8002c9c:	d102      	bne.n	8002ca4 <ETH_SetDMAConfig+0x2c>
 8002c9e:	f04f 6280 	mov.w	r2, #67108864	; 0x4000000
 8002ca2:	e000      	b.n	8002ca6 <ETH_SetDMAConfig+0x2e>
 8002ca4:	2200      	movs	r2, #0
                        ((uint32_t)dmaconf->ReceiveStoreForward << 25U) |
 8002ca6:	683b      	ldr	r3, [r7, #0]
 8002ca8:	7b5b      	ldrb	r3, [r3, #13]
 8002caa:	065b      	lsls	r3, r3, #25
  tmpreg1 |= (uint32_t)(((uint32_t)((dmaconf->DropTCPIPChecksumErrorFrame == DISABLE) ? 1U : 0U) << 26U) |
 8002cac:	4313      	orrs	r3, r2
                        ((uint32_t)((dmaconf->FlushRxPacket == DISABLE) ? 1U : 0U) << 20U) |
 8002cae:	683a      	ldr	r2, [r7, #0]
 8002cb0:	7f52      	ldrb	r2, [r2, #29]
 8002cb2:	2a00      	cmp	r2, #0
 8002cb4:	d102      	bne.n	8002cbc <ETH_SetDMAConfig+0x44>
 8002cb6:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 8002cba:	e000      	b.n	8002cbe <ETH_SetDMAConfig+0x46>
 8002cbc:	2200      	movs	r2, #0
                        ((uint32_t)dmaconf->ReceiveStoreForward << 25U) |
 8002cbe:	431a      	orrs	r2, r3
                        ((uint32_t)dmaconf->TransmitStoreForward << 21U) |
 8002cc0:	683b      	ldr	r3, [r7, #0]
 8002cc2:	7b9b      	ldrb	r3, [r3, #14]
 8002cc4:	055b      	lsls	r3, r3, #21
                        ((uint32_t)((dmaconf->FlushRxPacket == DISABLE) ? 1U : 0U) << 20U) |
 8002cc6:	431a      	orrs	r2, r3
                        dmaconf->TransmitThresholdControl |
 8002cc8:	683b      	ldr	r3, [r7, #0]
 8002cca:	695b      	ldr	r3, [r3, #20]
                        ((uint32_t)dmaconf->TransmitStoreForward << 21U) |
 8002ccc:	431a      	orrs	r2, r3
                        ((uint32_t)dmaconf->ForwardErrorFrames << 7U) |
 8002cce:	683b      	ldr	r3, [r7, #0]
 8002cd0:	7f1b      	ldrb	r3, [r3, #28]
 8002cd2:	01db      	lsls	r3, r3, #7
                        dmaconf->TransmitThresholdControl |
 8002cd4:	431a      	orrs	r2, r3
                        ((uint32_t)dmaconf->ForwardUndersizedGoodFrames << 6U) |
 8002cd6:	683b      	ldr	r3, [r7, #0]
 8002cd8:	7f9b      	ldrb	r3, [r3, #30]
 8002cda:	019b      	lsls	r3, r3, #6
                        ((uint32_t)dmaconf->ForwardErrorFrames << 7U) |
 8002cdc:	431a      	orrs	r2, r3
                        dmaconf->ReceiveThresholdControl |
 8002cde:	683b      	ldr	r3, [r7, #0]
 8002ce0:	6a1b      	ldr	r3, [r3, #32]
                        ((uint32_t)dmaconf->ForwardUndersizedGoodFrames << 6U) |
 8002ce2:	431a      	orrs	r2, r3
                        ((uint32_t)dmaconf->SecondFrameOperate << 2U));
 8002ce4:	683b      	ldr	r3, [r7, #0]
 8002ce6:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8002cea:	009b      	lsls	r3, r3, #2
  tmpreg1 |= (uint32_t)(((uint32_t)((dmaconf->DropTCPIPChecksumErrorFrame == DISABLE) ? 1U : 0U) << 26U) |
 8002cec:	4313      	orrs	r3, r2
 8002cee:	68fa      	ldr	r2, [r7, #12]
 8002cf0:	4313      	orrs	r3, r2
 8002cf2:	60fb      	str	r3, [r7, #12]

  /* Write to ETHERNET DMAOMR */
  (heth->Instance)->DMAOMR = (uint32_t)tmpreg1;
 8002cf4:	687b      	ldr	r3, [r7, #4]
 8002cf6:	681b      	ldr	r3, [r3, #0]
 8002cf8:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8002cfc:	461a      	mov	r2, r3
 8002cfe:	68fb      	ldr	r3, [r7, #12]
 8002d00:	6193      	str	r3, [r2, #24]

  /* Wait until the write operation will be taken into account:
  at least four TX_CLK/RX_CLK clock cycles */
  tmpreg1 = (heth->Instance)->DMAOMR;
 8002d02:	687b      	ldr	r3, [r7, #4]
 8002d04:	681b      	ldr	r3, [r3, #0]
 8002d06:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8002d0a:	699b      	ldr	r3, [r3, #24]
 8002d0c:	60fb      	str	r3, [r7, #12]
  HAL_Delay(ETH_REG_WRITE_DELAY);
 8002d0e:	2001      	movs	r0, #1
 8002d10:	f7fe fc8e 	bl	8001630 <HAL_Delay>
  (heth->Instance)->DMAOMR = tmpreg1;
 8002d14:	687b      	ldr	r3, [r7, #4]
 8002d16:	681b      	ldr	r3, [r3, #0]
 8002d18:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8002d1c:	461a      	mov	r2, r3
 8002d1e:	68fb      	ldr	r3, [r7, #12]
 8002d20:	6193      	str	r3, [r2, #24]

  /*----------------------- ETHERNET DMABMR Configuration --------------------*/
  (heth->Instance)->DMABMR = (uint32_t)(((uint32_t)dmaconf->AddressAlignedBeats << 25U) |
 8002d22:	683b      	ldr	r3, [r7, #0]
 8002d24:	791b      	ldrb	r3, [r3, #4]
 8002d26:	065a      	lsls	r2, r3, #25
                                        dmaconf->BurstMode |
 8002d28:	683b      	ldr	r3, [r7, #0]
 8002d2a:	689b      	ldr	r3, [r3, #8]
  (heth->Instance)->DMABMR = (uint32_t)(((uint32_t)dmaconf->AddressAlignedBeats << 25U) |
 8002d2c:	431a      	orrs	r2, r3
                                        dmaconf->RxDMABurstLength | /* !! if 4xPBL is selected for Tx or
 8002d2e:	683b      	ldr	r3, [r7, #0]
 8002d30:	699b      	ldr	r3, [r3, #24]
                                        dmaconf->BurstMode |
 8002d32:	431a      	orrs	r2, r3
                                                                       Rx it is applied for the other */
                                        dmaconf->TxDMABurstLength |
 8002d34:	683b      	ldr	r3, [r7, #0]
 8002d36:	691b      	ldr	r3, [r3, #16]
                                        dmaconf->RxDMABurstLength | /* !! if 4xPBL is selected for Tx or
 8002d38:	431a      	orrs	r2, r3
                                        ((uint32_t)dmaconf->EnhancedDescriptorFormat << 7U) |
 8002d3a:	683b      	ldr	r3, [r7, #0]
 8002d3c:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 8002d40:	01db      	lsls	r3, r3, #7
                                        dmaconf->TxDMABurstLength |
 8002d42:	431a      	orrs	r2, r3
                                        (dmaconf->DescriptorSkipLength << 2U) |
 8002d44:	683b      	ldr	r3, [r7, #0]
 8002d46:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002d48:	009b      	lsls	r3, r3, #2
                                        ((uint32_t)dmaconf->EnhancedDescriptorFormat << 7U) |
 8002d4a:	431a      	orrs	r2, r3
                                        dmaconf->DMAArbitration |
 8002d4c:	683b      	ldr	r3, [r7, #0]
 8002d4e:	681b      	ldr	r3, [r3, #0]
                                        (dmaconf->DescriptorSkipLength << 2U) |
 8002d50:	4313      	orrs	r3, r2
  (heth->Instance)->DMABMR = (uint32_t)(((uint32_t)dmaconf->AddressAlignedBeats << 25U) |
 8002d52:	687a      	ldr	r2, [r7, #4]
 8002d54:	6812      	ldr	r2, [r2, #0]
 8002d56:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8002d5a:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 8002d5e:	6013      	str	r3, [r2, #0]
                                        ETH_DMABMR_USP); /* Enable use of separate PBL for Rx and Tx */

  /* Wait until the write operation will be taken into account:
     at least four TX_CLK/RX_CLK clock cycles */
  tmpreg1 = (heth->Instance)->DMABMR;
 8002d60:	687b      	ldr	r3, [r7, #4]
 8002d62:	681b      	ldr	r3, [r3, #0]
 8002d64:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8002d68:	681b      	ldr	r3, [r3, #0]
 8002d6a:	60fb      	str	r3, [r7, #12]
  HAL_Delay(ETH_REG_WRITE_DELAY);
 8002d6c:	2001      	movs	r0, #1
 8002d6e:	f7fe fc5f 	bl	8001630 <HAL_Delay>
  (heth->Instance)->DMABMR = tmpreg1;
 8002d72:	687b      	ldr	r3, [r7, #4]
 8002d74:	681b      	ldr	r3, [r3, #0]
 8002d76:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8002d7a:	461a      	mov	r2, r3
 8002d7c:	68fb      	ldr	r3, [r7, #12]
 8002d7e:	6013      	str	r3, [r2, #0]
}
 8002d80:	bf00      	nop
 8002d82:	3710      	adds	r7, #16
 8002d84:	46bd      	mov	sp, r7
 8002d86:	bd80      	pop	{r7, pc}
 8002d88:	f8de3f23 	.word	0xf8de3f23

08002d8c <ETH_MACDMAConfig>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
static void ETH_MACDMAConfig(ETH_HandleTypeDef *heth)
{
 8002d8c:	b580      	push	{r7, lr}
 8002d8e:	b0a6      	sub	sp, #152	; 0x98
 8002d90:	af00      	add	r7, sp, #0
 8002d92:	6078      	str	r0, [r7, #4]
  ETH_MACConfigTypeDef macDefaultConf;
  ETH_DMAConfigTypeDef dmaDefaultConf;

  /*--------------- ETHERNET MAC registers default Configuration --------------*/
  macDefaultConf.Watchdog = ENABLE;
 8002d94:	2301      	movs	r3, #1
 8002d96:	f887 3044 	strb.w	r3, [r7, #68]	; 0x44
  macDefaultConf.Jabber = ENABLE;
 8002d9a:	2301      	movs	r3, #1
 8002d9c:	f887 3045 	strb.w	r3, [r7, #69]	; 0x45
  macDefaultConf.InterPacketGapVal = ETH_INTERFRAMEGAP_96BIT;
 8002da0:	2300      	movs	r3, #0
 8002da2:	63fb      	str	r3, [r7, #60]	; 0x3c
  macDefaultConf.CarrierSenseDuringTransmit = DISABLE;
 8002da4:	2300      	movs	r3, #0
 8002da6:	f887 3053 	strb.w	r3, [r7, #83]	; 0x53
  macDefaultConf.ReceiveOwn = ENABLE;
 8002daa:	2301      	movs	r3, #1
 8002dac:	f887 3052 	strb.w	r3, [r7, #82]	; 0x52
  macDefaultConf.LoopbackMode = DISABLE;
 8002db0:	2300      	movs	r3, #0
 8002db2:	f887 3050 	strb.w	r3, [r7, #80]	; 0x50
  macDefaultConf.CRCStripTypePacket = ENABLE;
 8002db6:	2301      	movs	r3, #1
 8002db8:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
  macDefaultConf.ChecksumOffload = ENABLE;
 8002dbc:	2301      	movs	r3, #1
 8002dbe:	f887 3038 	strb.w	r3, [r7, #56]	; 0x38
  macDefaultConf.RetryTransmission = DISABLE;
 8002dc2:	2300      	movs	r3, #0
 8002dc4:	f887 3054 	strb.w	r3, [r7, #84]	; 0x54
  macDefaultConf.AutomaticPadCRCStrip = DISABLE;
 8002dc8:	2300      	movs	r3, #0
 8002dca:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
  macDefaultConf.BackOffLimit = ETH_BACKOFFLIMIT_10;
 8002dce:	2300      	movs	r3, #0
 8002dd0:	65bb      	str	r3, [r7, #88]	; 0x58
  macDefaultConf.DeferralCheck = DISABLE;
 8002dd2:	2300      	movs	r3, #0
 8002dd4:	f887 305c 	strb.w	r3, [r7, #92]	; 0x5c
  macDefaultConf.PauseTime = 0x0U;
 8002dd8:	2300      	movs	r3, #0
 8002dda:	67fb      	str	r3, [r7, #124]	; 0x7c
  macDefaultConf.ZeroQuantaPause = DISABLE;
 8002ddc:	2300      	movs	r3, #0
 8002dde:	f887 3080 	strb.w	r3, [r7, #128]	; 0x80
  macDefaultConf.PauseLowThreshold = ETH_PAUSELOWTHRESHOLD_MINUS4;
 8002de2:	2300      	movs	r3, #0
 8002de4:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
  macDefaultConf.ReceiveFlowControl = DISABLE;
 8002de8:	2300      	movs	r3, #0
 8002dea:	f887 308a 	strb.w	r3, [r7, #138]	; 0x8a
  macDefaultConf.TransmitFlowControl = DISABLE;
 8002dee:	2300      	movs	r3, #0
 8002df0:	f887 3088 	strb.w	r3, [r7, #136]	; 0x88
  macDefaultConf.Speed = ETH_SPEED_100M;
 8002df4:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8002df8:	64bb      	str	r3, [r7, #72]	; 0x48
  macDefaultConf.DuplexMode = ETH_FULLDUPLEX_MODE;
 8002dfa:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8002dfe:	64fb      	str	r3, [r7, #76]	; 0x4c
  macDefaultConf.UnicastPausePacketDetect = DISABLE;
 8002e00:	2300      	movs	r3, #0
 8002e02:	f887 3089 	strb.w	r3, [r7, #137]	; 0x89

  /* MAC default configuration */
  ETH_SetMACConfig(heth, &macDefaultConf);
 8002e06:	f107 0334 	add.w	r3, r7, #52	; 0x34
 8002e0a:	4619      	mov	r1, r3
 8002e0c:	6878      	ldr	r0, [r7, #4]
 8002e0e:	f7ff fe7f 	bl	8002b10 <ETH_SetMACConfig>

  /*--------------- ETHERNET DMA registers default Configuration --------------*/
  dmaDefaultConf.DropTCPIPChecksumErrorFrame = ENABLE;
 8002e12:	2301      	movs	r3, #1
 8002e14:	753b      	strb	r3, [r7, #20]
  dmaDefaultConf.ReceiveStoreForward = ENABLE;
 8002e16:	2301      	movs	r3, #1
 8002e18:	757b      	strb	r3, [r7, #21]
  dmaDefaultConf.FlushRxPacket = ENABLE;
 8002e1a:	2301      	movs	r3, #1
 8002e1c:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25
  dmaDefaultConf.TransmitStoreForward = ENABLE;
 8002e20:	2301      	movs	r3, #1
 8002e22:	75bb      	strb	r3, [r7, #22]
  dmaDefaultConf.TransmitThresholdControl = ETH_TRANSMITTHRESHOLDCONTROL_64BYTES;
 8002e24:	2300      	movs	r3, #0
 8002e26:	61fb      	str	r3, [r7, #28]
  dmaDefaultConf.ForwardErrorFrames = DISABLE;
 8002e28:	2300      	movs	r3, #0
 8002e2a:	f887 3024 	strb.w	r3, [r7, #36]	; 0x24
  dmaDefaultConf.ForwardUndersizedGoodFrames = DISABLE;
 8002e2e:	2300      	movs	r3, #0
 8002e30:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
  dmaDefaultConf.ReceiveThresholdControl = ETH_RECEIVEDTHRESHOLDCONTROL_64BYTES;
 8002e34:	2300      	movs	r3, #0
 8002e36:	62bb      	str	r3, [r7, #40]	; 0x28
  dmaDefaultConf.SecondFrameOperate = ENABLE;
 8002e38:	2301      	movs	r3, #1
 8002e3a:	f887 302c 	strb.w	r3, [r7, #44]	; 0x2c
  dmaDefaultConf.AddressAlignedBeats = ENABLE;
 8002e3e:	2301      	movs	r3, #1
 8002e40:	733b      	strb	r3, [r7, #12]
  dmaDefaultConf.BurstMode = ETH_BURSTLENGTH_FIXED;
 8002e42:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8002e46:	613b      	str	r3, [r7, #16]
  dmaDefaultConf.RxDMABurstLength = ETH_RXDMABURSTLENGTH_32BEAT;
 8002e48:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8002e4c:	623b      	str	r3, [r7, #32]
  dmaDefaultConf.TxDMABurstLength = ETH_TXDMABURSTLENGTH_32BEAT;
 8002e4e:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8002e52:	61bb      	str	r3, [r7, #24]
  dmaDefaultConf.EnhancedDescriptorFormat = ENABLE;
 8002e54:	2301      	movs	r3, #1
 8002e56:	f887 302d 	strb.w	r3, [r7, #45]	; 0x2d
  dmaDefaultConf.DescriptorSkipLength = 0x0U;
 8002e5a:	2300      	movs	r3, #0
 8002e5c:	633b      	str	r3, [r7, #48]	; 0x30
  dmaDefaultConf.DMAArbitration = ETH_DMAARBITRATION_ROUNDROBIN_RXTX_1_1;
 8002e5e:	2300      	movs	r3, #0
 8002e60:	60bb      	str	r3, [r7, #8]

  /* DMA default configuration */
  ETH_SetDMAConfig(heth, &dmaDefaultConf);
 8002e62:	f107 0308 	add.w	r3, r7, #8
 8002e66:	4619      	mov	r1, r3
 8002e68:	6878      	ldr	r0, [r7, #4]
 8002e6a:	f7ff ff05 	bl	8002c78 <ETH_SetDMAConfig>
}
 8002e6e:	bf00      	nop
 8002e70:	3798      	adds	r7, #152	; 0x98
 8002e72:	46bd      	mov	sp, r7
 8002e74:	bd80      	pop	{r7, pc}
	...

08002e78 <ETH_MACAddressConfig>:
  *             @arg ETH_MAC_Address3: MAC Address3
  * @param  Addr Pointer to MAC address buffer data (6 bytes)
  * @retval HAL status
  */
static void ETH_MACAddressConfig(ETH_HandleTypeDef *heth, uint32_t MacAddr, uint8_t *Addr)
{
 8002e78:	b480      	push	{r7}
 8002e7a:	b087      	sub	sp, #28
 8002e7c:	af00      	add	r7, sp, #0
 8002e7e:	60f8      	str	r0, [r7, #12]
 8002e80:	60b9      	str	r1, [r7, #8]
 8002e82:	607a      	str	r2, [r7, #4]

  /* Prevent unused argument(s) compilation warning */
  UNUSED(heth);

  /* Calculate the selected MAC address high register */
  tmpreg1 = ((uint32_t)Addr[5U] << 8U) | (uint32_t)Addr[4U];
 8002e84:	687b      	ldr	r3, [r7, #4]
 8002e86:	3305      	adds	r3, #5
 8002e88:	781b      	ldrb	r3, [r3, #0]
 8002e8a:	021b      	lsls	r3, r3, #8
 8002e8c:	687a      	ldr	r2, [r7, #4]
 8002e8e:	3204      	adds	r2, #4
 8002e90:	7812      	ldrb	r2, [r2, #0]
 8002e92:	4313      	orrs	r3, r2
 8002e94:	617b      	str	r3, [r7, #20]
  /* Load the selected MAC address high register */
  (*(__IO uint32_t *)((uint32_t)(ETH_MAC_ADDR_HBASE + MacAddr))) = tmpreg1;
 8002e96:	68ba      	ldr	r2, [r7, #8]
 8002e98:	4b11      	ldr	r3, [pc, #68]	; (8002ee0 <ETH_MACAddressConfig+0x68>)
 8002e9a:	4413      	add	r3, r2
 8002e9c:	461a      	mov	r2, r3
 8002e9e:	697b      	ldr	r3, [r7, #20]
 8002ea0:	6013      	str	r3, [r2, #0]
  /* Calculate the selected MAC address low register */
  tmpreg1 = ((uint32_t)Addr[3U] << 24U) | ((uint32_t)Addr[2U] << 16U) | ((uint32_t)Addr[1U] << 8U) | Addr[0U];
 8002ea2:	687b      	ldr	r3, [r7, #4]
 8002ea4:	3303      	adds	r3, #3
 8002ea6:	781b      	ldrb	r3, [r3, #0]
 8002ea8:	061a      	lsls	r2, r3, #24
 8002eaa:	687b      	ldr	r3, [r7, #4]
 8002eac:	3302      	adds	r3, #2
 8002eae:	781b      	ldrb	r3, [r3, #0]
 8002eb0:	041b      	lsls	r3, r3, #16
 8002eb2:	431a      	orrs	r2, r3
 8002eb4:	687b      	ldr	r3, [r7, #4]
 8002eb6:	3301      	adds	r3, #1
 8002eb8:	781b      	ldrb	r3, [r3, #0]
 8002eba:	021b      	lsls	r3, r3, #8
 8002ebc:	4313      	orrs	r3, r2
 8002ebe:	687a      	ldr	r2, [r7, #4]
 8002ec0:	7812      	ldrb	r2, [r2, #0]
 8002ec2:	4313      	orrs	r3, r2
 8002ec4:	617b      	str	r3, [r7, #20]

  /* Load the selected MAC address low register */
  (*(__IO uint32_t *)((uint32_t)(ETH_MAC_ADDR_LBASE + MacAddr))) = tmpreg1;
 8002ec6:	68ba      	ldr	r2, [r7, #8]
 8002ec8:	4b06      	ldr	r3, [pc, #24]	; (8002ee4 <ETH_MACAddressConfig+0x6c>)
 8002eca:	4413      	add	r3, r2
 8002ecc:	461a      	mov	r2, r3
 8002ece:	697b      	ldr	r3, [r7, #20]
 8002ed0:	6013      	str	r3, [r2, #0]
}
 8002ed2:	bf00      	nop
 8002ed4:	371c      	adds	r7, #28
 8002ed6:	46bd      	mov	sp, r7
 8002ed8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002edc:	4770      	bx	lr
 8002ede:	bf00      	nop
 8002ee0:	40028040 	.word	0x40028040
 8002ee4:	40028044 	.word	0x40028044

08002ee8 <ETH_DMATxDescListInit>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
static void ETH_DMATxDescListInit(ETH_HandleTypeDef *heth)
{
 8002ee8:	b480      	push	{r7}
 8002eea:	b085      	sub	sp, #20
 8002eec:	af00      	add	r7, sp, #0
 8002eee:	6078      	str	r0, [r7, #4]
  ETH_DMADescTypeDef *dmatxdesc;
  uint32_t i;

  /* Fill each DMATxDesc descriptor with the right values */
  for (i = 0; i < (uint32_t)ETH_TX_DESC_CNT; i++)
 8002ef0:	2300      	movs	r3, #0
 8002ef2:	60fb      	str	r3, [r7, #12]
 8002ef4:	e03e      	b.n	8002f74 <ETH_DMATxDescListInit+0x8c>
  {
    dmatxdesc = heth->Init.TxDesc + i;
 8002ef6:	687b      	ldr	r3, [r7, #4]
 8002ef8:	68d9      	ldr	r1, [r3, #12]
 8002efa:	68fa      	ldr	r2, [r7, #12]
 8002efc:	4613      	mov	r3, r2
 8002efe:	009b      	lsls	r3, r3, #2
 8002f00:	4413      	add	r3, r2
 8002f02:	00db      	lsls	r3, r3, #3
 8002f04:	440b      	add	r3, r1
 8002f06:	60bb      	str	r3, [r7, #8]

    WRITE_REG(dmatxdesc->DESC0, 0x0U);
 8002f08:	68bb      	ldr	r3, [r7, #8]
 8002f0a:	2200      	movs	r2, #0
 8002f0c:	601a      	str	r2, [r3, #0]
    WRITE_REG(dmatxdesc->DESC1, 0x0U);
 8002f0e:	68bb      	ldr	r3, [r7, #8]
 8002f10:	2200      	movs	r2, #0
 8002f12:	605a      	str	r2, [r3, #4]
    WRITE_REG(dmatxdesc->DESC2, 0x0U);
 8002f14:	68bb      	ldr	r3, [r7, #8]
 8002f16:	2200      	movs	r2, #0
 8002f18:	609a      	str	r2, [r3, #8]
    WRITE_REG(dmatxdesc->DESC3, 0x0U);
 8002f1a:	68bb      	ldr	r3, [r7, #8]
 8002f1c:	2200      	movs	r2, #0
 8002f1e:	60da      	str	r2, [r3, #12]

    WRITE_REG(heth->TxDescList.TxDesc[i], (uint32_t)dmatxdesc);
 8002f20:	68b9      	ldr	r1, [r7, #8]
 8002f22:	687b      	ldr	r3, [r7, #4]
 8002f24:	68fa      	ldr	r2, [r7, #12]
 8002f26:	3206      	adds	r2, #6
 8002f28:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

    /* Set Second Address Chained bit */
    SET_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_TCH);
 8002f2c:	68bb      	ldr	r3, [r7, #8]
 8002f2e:	681b      	ldr	r3, [r3, #0]
 8002f30:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 8002f34:	68bb      	ldr	r3, [r7, #8]
 8002f36:	601a      	str	r2, [r3, #0]

    if (i < ((uint32_t)ETH_TX_DESC_CNT - 1U))
 8002f38:	68fb      	ldr	r3, [r7, #12]
 8002f3a:	2b02      	cmp	r3, #2
 8002f3c:	d80c      	bhi.n	8002f58 <ETH_DMATxDescListInit+0x70>
    {
      WRITE_REG(dmatxdesc->DESC3, (uint32_t)(heth->Init.TxDesc + i + 1U));
 8002f3e:	687b      	ldr	r3, [r7, #4]
 8002f40:	68d9      	ldr	r1, [r3, #12]
 8002f42:	68fb      	ldr	r3, [r7, #12]
 8002f44:	1c5a      	adds	r2, r3, #1
 8002f46:	4613      	mov	r3, r2
 8002f48:	009b      	lsls	r3, r3, #2
 8002f4a:	4413      	add	r3, r2
 8002f4c:	00db      	lsls	r3, r3, #3
 8002f4e:	440b      	add	r3, r1
 8002f50:	461a      	mov	r2, r3
 8002f52:	68bb      	ldr	r3, [r7, #8]
 8002f54:	60da      	str	r2, [r3, #12]
 8002f56:	e004      	b.n	8002f62 <ETH_DMATxDescListInit+0x7a>
    }
    else
    {
      WRITE_REG(dmatxdesc->DESC3, (uint32_t)(heth->Init.TxDesc));
 8002f58:	687b      	ldr	r3, [r7, #4]
 8002f5a:	68db      	ldr	r3, [r3, #12]
 8002f5c:	461a      	mov	r2, r3
 8002f5e:	68bb      	ldr	r3, [r7, #8]
 8002f60:	60da      	str	r2, [r3, #12]
    }

    /* Set the DMA Tx descriptors checksum insertion */
    SET_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_CHECKSUMTCPUDPICMPFULL);
 8002f62:	68bb      	ldr	r3, [r7, #8]
 8002f64:	681b      	ldr	r3, [r3, #0]
 8002f66:	f443 0240 	orr.w	r2, r3, #12582912	; 0xc00000
 8002f6a:	68bb      	ldr	r3, [r7, #8]
 8002f6c:	601a      	str	r2, [r3, #0]
  for (i = 0; i < (uint32_t)ETH_TX_DESC_CNT; i++)
 8002f6e:	68fb      	ldr	r3, [r7, #12]
 8002f70:	3301      	adds	r3, #1
 8002f72:	60fb      	str	r3, [r7, #12]
 8002f74:	68fb      	ldr	r3, [r7, #12]
 8002f76:	2b03      	cmp	r3, #3
 8002f78:	d9bd      	bls.n	8002ef6 <ETH_DMATxDescListInit+0xe>
  }

  heth->TxDescList.CurTxDesc = 0;
 8002f7a:	687b      	ldr	r3, [r7, #4]
 8002f7c:	2200      	movs	r2, #0
 8002f7e:	629a      	str	r2, [r3, #40]	; 0x28

  /* Set Transmit Descriptor List Address */
  WRITE_REG(heth->Instance->DMATDLAR, (uint32_t) heth->Init.TxDesc);
 8002f80:	687b      	ldr	r3, [r7, #4]
 8002f82:	68da      	ldr	r2, [r3, #12]
 8002f84:	687b      	ldr	r3, [r7, #4]
 8002f86:	681b      	ldr	r3, [r3, #0]
 8002f88:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8002f8c:	611a      	str	r2, [r3, #16]
}
 8002f8e:	bf00      	nop
 8002f90:	3714      	adds	r7, #20
 8002f92:	46bd      	mov	sp, r7
 8002f94:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f98:	4770      	bx	lr

08002f9a <ETH_DMARxDescListInit>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
static void ETH_DMARxDescListInit(ETH_HandleTypeDef *heth)
{
 8002f9a:	b480      	push	{r7}
 8002f9c:	b085      	sub	sp, #20
 8002f9e:	af00      	add	r7, sp, #0
 8002fa0:	6078      	str	r0, [r7, #4]
  ETH_DMADescTypeDef *dmarxdesc;
  uint32_t i;

  for (i = 0; i < (uint32_t)ETH_RX_DESC_CNT; i++)
 8002fa2:	2300      	movs	r3, #0
 8002fa4:	60fb      	str	r3, [r7, #12]
 8002fa6:	e048      	b.n	800303a <ETH_DMARxDescListInit+0xa0>
  {
    dmarxdesc =  heth->Init.RxDesc + i;
 8002fa8:	687b      	ldr	r3, [r7, #4]
 8002faa:	6919      	ldr	r1, [r3, #16]
 8002fac:	68fa      	ldr	r2, [r7, #12]
 8002fae:	4613      	mov	r3, r2
 8002fb0:	009b      	lsls	r3, r3, #2
 8002fb2:	4413      	add	r3, r2
 8002fb4:	00db      	lsls	r3, r3, #3
 8002fb6:	440b      	add	r3, r1
 8002fb8:	60bb      	str	r3, [r7, #8]

    WRITE_REG(dmarxdesc->DESC0, 0x0U);
 8002fba:	68bb      	ldr	r3, [r7, #8]
 8002fbc:	2200      	movs	r2, #0
 8002fbe:	601a      	str	r2, [r3, #0]
    WRITE_REG(dmarxdesc->DESC1, 0x0U);
 8002fc0:	68bb      	ldr	r3, [r7, #8]
 8002fc2:	2200      	movs	r2, #0
 8002fc4:	605a      	str	r2, [r3, #4]
    WRITE_REG(dmarxdesc->DESC2, 0x0U);
 8002fc6:	68bb      	ldr	r3, [r7, #8]
 8002fc8:	2200      	movs	r2, #0
 8002fca:	609a      	str	r2, [r3, #8]
    WRITE_REG(dmarxdesc->DESC3, 0x0U);
 8002fcc:	68bb      	ldr	r3, [r7, #8]
 8002fce:	2200      	movs	r2, #0
 8002fd0:	60da      	str	r2, [r3, #12]
    WRITE_REG(dmarxdesc->BackupAddr0, 0x0U);
 8002fd2:	68bb      	ldr	r3, [r7, #8]
 8002fd4:	2200      	movs	r2, #0
 8002fd6:	621a      	str	r2, [r3, #32]
    WRITE_REG(dmarxdesc->BackupAddr1, 0x0U);
 8002fd8:	68bb      	ldr	r3, [r7, #8]
 8002fda:	2200      	movs	r2, #0
 8002fdc:	625a      	str	r2, [r3, #36]	; 0x24

    /* Set Own bit of the Rx descriptor Status */
    dmarxdesc->DESC0 = ETH_DMARXDESC_OWN;
 8002fde:	68bb      	ldr	r3, [r7, #8]
 8002fe0:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 8002fe4:	601a      	str	r2, [r3, #0]

    /* Set Buffer1 size and Second Address Chained bit */
    dmarxdesc->DESC1 = heth->Init.RxBuffLen | ETH_DMARXDESC_RCH;
 8002fe6:	687b      	ldr	r3, [r7, #4]
 8002fe8:	695b      	ldr	r3, [r3, #20]
 8002fea:	f443 4280 	orr.w	r2, r3, #16384	; 0x4000
 8002fee:	68bb      	ldr	r3, [r7, #8]
 8002ff0:	605a      	str	r2, [r3, #4]

    /* Enable Ethernet DMA Rx Descriptor interrupt */
    dmarxdesc->DESC1 &= ~ETH_DMARXDESC_DIC;
 8002ff2:	68bb      	ldr	r3, [r7, #8]
 8002ff4:	685b      	ldr	r3, [r3, #4]
 8002ff6:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 8002ffa:	68bb      	ldr	r3, [r7, #8]
 8002ffc:	605a      	str	r2, [r3, #4]
    /* Set Rx descritors addresses */
    WRITE_REG(heth->RxDescList.RxDesc[i], (uint32_t)dmarxdesc);
 8002ffe:	68b9      	ldr	r1, [r7, #8]
 8003000:	687b      	ldr	r3, [r7, #4]
 8003002:	68fa      	ldr	r2, [r7, #12]
 8003004:	3212      	adds	r2, #18
 8003006:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

    if (i < ((uint32_t)ETH_RX_DESC_CNT - 1U))
 800300a:	68fb      	ldr	r3, [r7, #12]
 800300c:	2b02      	cmp	r3, #2
 800300e:	d80c      	bhi.n	800302a <ETH_DMARxDescListInit+0x90>
    {
      WRITE_REG(dmarxdesc->DESC3, (uint32_t)(heth->Init.RxDesc + i + 1U));
 8003010:	687b      	ldr	r3, [r7, #4]
 8003012:	6919      	ldr	r1, [r3, #16]
 8003014:	68fb      	ldr	r3, [r7, #12]
 8003016:	1c5a      	adds	r2, r3, #1
 8003018:	4613      	mov	r3, r2
 800301a:	009b      	lsls	r3, r3, #2
 800301c:	4413      	add	r3, r2
 800301e:	00db      	lsls	r3, r3, #3
 8003020:	440b      	add	r3, r1
 8003022:	461a      	mov	r2, r3
 8003024:	68bb      	ldr	r3, [r7, #8]
 8003026:	60da      	str	r2, [r3, #12]
 8003028:	e004      	b.n	8003034 <ETH_DMARxDescListInit+0x9a>
    }
    else
    {
      WRITE_REG(dmarxdesc->DESC3, (uint32_t)(heth->Init.RxDesc));
 800302a:	687b      	ldr	r3, [r7, #4]
 800302c:	691b      	ldr	r3, [r3, #16]
 800302e:	461a      	mov	r2, r3
 8003030:	68bb      	ldr	r3, [r7, #8]
 8003032:	60da      	str	r2, [r3, #12]
  for (i = 0; i < (uint32_t)ETH_RX_DESC_CNT; i++)
 8003034:	68fb      	ldr	r3, [r7, #12]
 8003036:	3301      	adds	r3, #1
 8003038:	60fb      	str	r3, [r7, #12]
 800303a:	68fb      	ldr	r3, [r7, #12]
 800303c:	2b03      	cmp	r3, #3
 800303e:	d9b3      	bls.n	8002fa8 <ETH_DMARxDescListInit+0xe>
    }
  }

  WRITE_REG(heth->RxDescList.RxDescIdx, 0U);
 8003040:	687b      	ldr	r3, [r7, #4]
 8003042:	2200      	movs	r2, #0
 8003044:	65da      	str	r2, [r3, #92]	; 0x5c
  WRITE_REG(heth->RxDescList.RxDescCnt, 0U);
 8003046:	687b      	ldr	r3, [r7, #4]
 8003048:	2200      	movs	r2, #0
 800304a:	661a      	str	r2, [r3, #96]	; 0x60
  WRITE_REG(heth->RxDescList.RxBuildDescIdx, 0U);
 800304c:	687b      	ldr	r3, [r7, #4]
 800304e:	2200      	movs	r2, #0
 8003050:	669a      	str	r2, [r3, #104]	; 0x68
  WRITE_REG(heth->RxDescList.RxBuildDescCnt, 0U);
 8003052:	687b      	ldr	r3, [r7, #4]
 8003054:	2200      	movs	r2, #0
 8003056:	66da      	str	r2, [r3, #108]	; 0x6c
  WRITE_REG(heth->RxDescList.ItMode, 0U);
 8003058:	687b      	ldr	r3, [r7, #4]
 800305a:	2200      	movs	r2, #0
 800305c:	659a      	str	r2, [r3, #88]	; 0x58

  /* Set Receive Descriptor List Address */
  WRITE_REG(heth->Instance->DMARDLAR, (uint32_t) heth->Init.RxDesc);
 800305e:	687b      	ldr	r3, [r7, #4]
 8003060:	691a      	ldr	r2, [r3, #16]
 8003062:	687b      	ldr	r3, [r7, #4]
 8003064:	681b      	ldr	r3, [r3, #0]
 8003066:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800306a:	60da      	str	r2, [r3, #12]
}
 800306c:	bf00      	nop
 800306e:	3714      	adds	r7, #20
 8003070:	46bd      	mov	sp, r7
 8003072:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003076:	4770      	bx	lr

08003078 <ETH_Prepare_Tx_Descriptors>:
  * @param  ItMode: Enable or disable Tx EOT interrept
  * @retval Status
  */
static uint32_t ETH_Prepare_Tx_Descriptors(ETH_HandleTypeDef *heth, const ETH_TxPacketConfigTypeDef *pTxConfig,
                                           uint32_t ItMode)
{
 8003078:	b480      	push	{r7}
 800307a:	b091      	sub	sp, #68	; 0x44
 800307c:	af00      	add	r7, sp, #0
 800307e:	60f8      	str	r0, [r7, #12]
 8003080:	60b9      	str	r1, [r7, #8]
 8003082:	607a      	str	r2, [r7, #4]
  ETH_TxDescListTypeDef *dmatxdesclist = &heth->TxDescList;
 8003084:	68fb      	ldr	r3, [r7, #12]
 8003086:	3318      	adds	r3, #24
 8003088:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t descidx = dmatxdesclist->CurTxDesc;
 800308a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800308c:	691b      	ldr	r3, [r3, #16]
 800308e:	63fb      	str	r3, [r7, #60]	; 0x3c
  uint32_t firstdescidx = dmatxdesclist->CurTxDesc;
 8003090:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003092:	691b      	ldr	r3, [r3, #16]
 8003094:	623b      	str	r3, [r7, #32]
  uint32_t idx;
  uint32_t descnbr = 0;
 8003096:	2300      	movs	r3, #0
 8003098:	637b      	str	r3, [r7, #52]	; 0x34
  ETH_DMADescTypeDef *dmatxdesc = (ETH_DMADescTypeDef *)dmatxdesclist->TxDesc[descidx];
 800309a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800309c:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 800309e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80030a2:	633b      	str	r3, [r7, #48]	; 0x30

  ETH_BufferTypeDef  *txbuffer = pTxConfig->TxBuffer;
 80030a4:	68bb      	ldr	r3, [r7, #8]
 80030a6:	689b      	ldr	r3, [r3, #8]
 80030a8:	62fb      	str	r3, [r7, #44]	; 0x2c
  uint32_t           bd_count = 0;
 80030aa:	2300      	movs	r3, #0
 80030ac:	62bb      	str	r3, [r7, #40]	; 0x28
  uint32_t primask_bit;

  /* Current Tx Descriptor Owned by DMA: cannot be used by the application  */
  if ((READ_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_OWN) == ETH_DMATXDESC_OWN)
 80030ae:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80030b0:	681b      	ldr	r3, [r3, #0]
 80030b2:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 80030b6:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80030ba:	d007      	beq.n	80030cc <ETH_Prepare_Tx_Descriptors+0x54>
      || (dmatxdesclist->PacketAddress[descidx] != NULL))
 80030bc:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80030be:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80030c0:	3304      	adds	r3, #4
 80030c2:	009b      	lsls	r3, r3, #2
 80030c4:	4413      	add	r3, r2
 80030c6:	685b      	ldr	r3, [r3, #4]
 80030c8:	2b00      	cmp	r3, #0
 80030ca:	d001      	beq.n	80030d0 <ETH_Prepare_Tx_Descriptors+0x58>
  {
    return HAL_ETH_ERROR_BUSY;
 80030cc:	2302      	movs	r3, #2
 80030ce:	e115      	b.n	80032fc <ETH_Prepare_Tx_Descriptors+0x284>
  }


  descnbr += 1U;
 80030d0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80030d2:	3301      	adds	r3, #1
 80030d4:	637b      	str	r3, [r7, #52]	; 0x34

  /* Set header or buffer 1 address */
  WRITE_REG(dmatxdesc->DESC2, (uint32_t)txbuffer->buffer);
 80030d6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80030d8:	681b      	ldr	r3, [r3, #0]
 80030da:	461a      	mov	r2, r3
 80030dc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80030de:	609a      	str	r2, [r3, #8]

  /* Set header or buffer 1 Length */
  MODIFY_REG(dmatxdesc->DESC1, ETH_DMATXDESC_TBS1, txbuffer->len);
 80030e0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80030e2:	685b      	ldr	r3, [r3, #4]
 80030e4:	f423 53ff 	bic.w	r3, r3, #8160	; 0x1fe0
 80030e8:	f023 031f 	bic.w	r3, r3, #31
 80030ec:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80030ee:	6852      	ldr	r2, [r2, #4]
 80030f0:	431a      	orrs	r2, r3
 80030f2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80030f4:	605a      	str	r2, [r3, #4]

  if (READ_BIT(pTxConfig->Attributes, ETH_TX_PACKETS_FEATURES_CSUM) != 0U)
 80030f6:	68bb      	ldr	r3, [r7, #8]
 80030f8:	681b      	ldr	r3, [r3, #0]
 80030fa:	f003 0301 	and.w	r3, r3, #1
 80030fe:	2b00      	cmp	r3, #0
 8003100:	d008      	beq.n	8003114 <ETH_Prepare_Tx_Descriptors+0x9c>
  {
    MODIFY_REG(dmatxdesc->DESC0, ETH_DMATXDESC_CIC, pTxConfig->ChecksumCtrl);
 8003102:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003104:	681b      	ldr	r3, [r3, #0]
 8003106:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 800310a:	68bb      	ldr	r3, [r7, #8]
 800310c:	695b      	ldr	r3, [r3, #20]
 800310e:	431a      	orrs	r2, r3
 8003110:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003112:	601a      	str	r2, [r3, #0]
  }

  if (READ_BIT(pTxConfig->Attributes, ETH_TX_PACKETS_FEATURES_CRCPAD) != 0U)
 8003114:	68bb      	ldr	r3, [r7, #8]
 8003116:	681b      	ldr	r3, [r3, #0]
 8003118:	f003 0320 	and.w	r3, r3, #32
 800311c:	2b00      	cmp	r3, #0
 800311e:	d008      	beq.n	8003132 <ETH_Prepare_Tx_Descriptors+0xba>
  {
    MODIFY_REG(dmatxdesc->DESC0, ETH_CRC_PAD_DISABLE, pTxConfig->CRCPadCtrl);
 8003120:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003122:	681b      	ldr	r3, [r3, #0]
 8003124:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8003128:	68bb      	ldr	r3, [r7, #8]
 800312a:	691b      	ldr	r3, [r3, #16]
 800312c:	431a      	orrs	r2, r3
 800312e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003130:	601a      	str	r2, [r3, #0]
  }


  if (READ_BIT(pTxConfig->Attributes, ETH_TX_PACKETS_FEATURES_VLANTAG) != 0U)
 8003132:	68bb      	ldr	r3, [r7, #8]
 8003134:	681b      	ldr	r3, [r3, #0]
 8003136:	f003 0304 	and.w	r3, r3, #4
 800313a:	2b00      	cmp	r3, #0
 800313c:	d005      	beq.n	800314a <ETH_Prepare_Tx_Descriptors+0xd2>
  {
    /* Set Vlan Type */
    SET_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_VF);
 800313e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003140:	681b      	ldr	r3, [r3, #0]
 8003142:	f043 0280 	orr.w	r2, r3, #128	; 0x80
 8003146:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003148:	601a      	str	r2, [r3, #0]
  }

  /* Mark it as First Descriptor */
  SET_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_FS);
 800314a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800314c:	681b      	ldr	r3, [r3, #0]
 800314e:	f043 5280 	orr.w	r2, r3, #268435456	; 0x10000000
 8003152:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003154:	601a      	str	r2, [r3, #0]

  /* only if the packet is split into more than one descriptors > 1 */
  while (txbuffer->next != NULL)
 8003156:	e084      	b.n	8003262 <ETH_Prepare_Tx_Descriptors+0x1ea>
  {
    /* Clear the LD bit of previous descriptor */
    CLEAR_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_LS);
 8003158:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800315a:	681b      	ldr	r3, [r3, #0]
 800315c:	f023 5200 	bic.w	r2, r3, #536870912	; 0x20000000
 8003160:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003162:	601a      	str	r2, [r3, #0]
    if (ItMode != ((uint32_t)RESET))
 8003164:	687b      	ldr	r3, [r7, #4]
 8003166:	2b00      	cmp	r3, #0
 8003168:	d006      	beq.n	8003178 <ETH_Prepare_Tx_Descriptors+0x100>
    {
      /* Set Interrupt on completion bit */
      SET_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_IC);
 800316a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800316c:	681b      	ldr	r3, [r3, #0]
 800316e:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 8003172:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003174:	601a      	str	r2, [r3, #0]
 8003176:	e005      	b.n	8003184 <ETH_Prepare_Tx_Descriptors+0x10c>
    }
    else
    {
      /* Clear Interrupt on completion bit */
      CLEAR_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_IC);
 8003178:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800317a:	681b      	ldr	r3, [r3, #0]
 800317c:	f023 4280 	bic.w	r2, r3, #1073741824	; 0x40000000
 8003180:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003182:	601a      	str	r2, [r3, #0]
    }
    /* Increment current tx descriptor index */
    INCR_TX_DESC_INDEX(descidx, 1U);
 8003184:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8003186:	3301      	adds	r3, #1
 8003188:	63fb      	str	r3, [r7, #60]	; 0x3c
 800318a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800318c:	2b03      	cmp	r3, #3
 800318e:	d902      	bls.n	8003196 <ETH_Prepare_Tx_Descriptors+0x11e>
 8003190:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8003192:	3b04      	subs	r3, #4
 8003194:	63fb      	str	r3, [r7, #60]	; 0x3c
    /* Get current descriptor address */
    dmatxdesc = (ETH_DMADescTypeDef *)dmatxdesclist->TxDesc[descidx];
 8003196:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003198:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 800319a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800319e:	633b      	str	r3, [r7, #48]	; 0x30

    /* Current Tx Descriptor Owned by DMA: cannot be used by the application  */
    if ((READ_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_OWN) == ETH_DMATXDESC_OWN)
 80031a0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80031a2:	681b      	ldr	r3, [r3, #0]
 80031a4:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 80031a8:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80031ac:	d007      	beq.n	80031be <ETH_Prepare_Tx_Descriptors+0x146>
        || (dmatxdesclist->PacketAddress[descidx] != NULL))
 80031ae:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80031b0:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80031b2:	3304      	adds	r3, #4
 80031b4:	009b      	lsls	r3, r3, #2
 80031b6:	4413      	add	r3, r2
 80031b8:	685b      	ldr	r3, [r3, #4]
 80031ba:	2b00      	cmp	r3, #0
 80031bc:	d029      	beq.n	8003212 <ETH_Prepare_Tx_Descriptors+0x19a>
    {
      descidx = firstdescidx;
 80031be:	6a3b      	ldr	r3, [r7, #32]
 80031c0:	63fb      	str	r3, [r7, #60]	; 0x3c
      dmatxdesc = (ETH_DMADescTypeDef *)dmatxdesclist->TxDesc[descidx];
 80031c2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80031c4:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 80031c6:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80031ca:	633b      	str	r3, [r7, #48]	; 0x30

      /* clear previous desc own bit */
      for (idx = 0; idx < descnbr; idx ++)
 80031cc:	2300      	movs	r3, #0
 80031ce:	63bb      	str	r3, [r7, #56]	; 0x38
 80031d0:	e019      	b.n	8003206 <ETH_Prepare_Tx_Descriptors+0x18e>
  __ASM volatile ("dmb 0xF":::"memory");
 80031d2:	f3bf 8f5f 	dmb	sy
}
 80031d6:	bf00      	nop
      {
        /* Ensure rest of descriptor is written to RAM before the OWN bit */
        __DMB();

        CLEAR_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_OWN);
 80031d8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80031da:	681b      	ldr	r3, [r3, #0]
 80031dc:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 80031e0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80031e2:	601a      	str	r2, [r3, #0]

        /* Increment current tx descriptor index */
        INCR_TX_DESC_INDEX(descidx, 1U);
 80031e4:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80031e6:	3301      	adds	r3, #1
 80031e8:	63fb      	str	r3, [r7, #60]	; 0x3c
 80031ea:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80031ec:	2b03      	cmp	r3, #3
 80031ee:	d902      	bls.n	80031f6 <ETH_Prepare_Tx_Descriptors+0x17e>
 80031f0:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80031f2:	3b04      	subs	r3, #4
 80031f4:	63fb      	str	r3, [r7, #60]	; 0x3c
        /* Get current descriptor address */
        dmatxdesc = (ETH_DMADescTypeDef *)dmatxdesclist->TxDesc[descidx];
 80031f6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80031f8:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 80031fa:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80031fe:	633b      	str	r3, [r7, #48]	; 0x30
      for (idx = 0; idx < descnbr; idx ++)
 8003200:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003202:	3301      	adds	r3, #1
 8003204:	63bb      	str	r3, [r7, #56]	; 0x38
 8003206:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8003208:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800320a:	429a      	cmp	r2, r3
 800320c:	d3e1      	bcc.n	80031d2 <ETH_Prepare_Tx_Descriptors+0x15a>
      }

      return HAL_ETH_ERROR_BUSY;
 800320e:	2302      	movs	r3, #2
 8003210:	e074      	b.n	80032fc <ETH_Prepare_Tx_Descriptors+0x284>
    }

    /* Clear the FD bit of new Descriptor */
    CLEAR_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_FS);
 8003212:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003214:	681b      	ldr	r3, [r3, #0]
 8003216:	f023 5280 	bic.w	r2, r3, #268435456	; 0x10000000
 800321a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800321c:	601a      	str	r2, [r3, #0]

    descnbr += 1U;
 800321e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003220:	3301      	adds	r3, #1
 8003222:	637b      	str	r3, [r7, #52]	; 0x34

    /* Get the next Tx buffer in the list */
    txbuffer = txbuffer->next;
 8003224:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003226:	689b      	ldr	r3, [r3, #8]
 8003228:	62fb      	str	r3, [r7, #44]	; 0x2c

    /* Set header or buffer 1 address */
    WRITE_REG(dmatxdesc->DESC2, (uint32_t)txbuffer->buffer);
 800322a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800322c:	681b      	ldr	r3, [r3, #0]
 800322e:	461a      	mov	r2, r3
 8003230:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003232:	609a      	str	r2, [r3, #8]

    /* Set header or buffer 1 Length */
    MODIFY_REG(dmatxdesc->DESC1, ETH_DMATXDESC_TBS1, txbuffer->len);
 8003234:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003236:	685b      	ldr	r3, [r3, #4]
 8003238:	f423 53ff 	bic.w	r3, r3, #8160	; 0x1fe0
 800323c:	f023 031f 	bic.w	r3, r3, #31
 8003240:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8003242:	6852      	ldr	r2, [r2, #4]
 8003244:	431a      	orrs	r2, r3
 8003246:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003248:	605a      	str	r2, [r3, #4]

    bd_count += 1U;
 800324a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800324c:	3301      	adds	r3, #1
 800324e:	62bb      	str	r3, [r7, #40]	; 0x28
  __ASM volatile ("dmb 0xF":::"memory");
 8003250:	f3bf 8f5f 	dmb	sy
}
 8003254:	bf00      	nop

    /* Ensure rest of descriptor is written to RAM before the OWN bit */
    __DMB();
    /* Set Own bit */
    SET_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_OWN);
 8003256:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003258:	681b      	ldr	r3, [r3, #0]
 800325a:	f043 4200 	orr.w	r2, r3, #2147483648	; 0x80000000
 800325e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003260:	601a      	str	r2, [r3, #0]
  while (txbuffer->next != NULL)
 8003262:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003264:	689b      	ldr	r3, [r3, #8]
 8003266:	2b00      	cmp	r3, #0
 8003268:	f47f af76 	bne.w	8003158 <ETH_Prepare_Tx_Descriptors+0xe0>
  }

  if (ItMode != ((uint32_t)RESET))
 800326c:	687b      	ldr	r3, [r7, #4]
 800326e:	2b00      	cmp	r3, #0
 8003270:	d006      	beq.n	8003280 <ETH_Prepare_Tx_Descriptors+0x208>
  {
    /* Set Interrupt on completion bit */
    SET_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_IC);
 8003272:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003274:	681b      	ldr	r3, [r3, #0]
 8003276:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 800327a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800327c:	601a      	str	r2, [r3, #0]
 800327e:	e005      	b.n	800328c <ETH_Prepare_Tx_Descriptors+0x214>
  }
  else
  {
    /* Clear Interrupt on completion bit */
    CLEAR_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_IC);
 8003280:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003282:	681b      	ldr	r3, [r3, #0]
 8003284:	f023 4280 	bic.w	r2, r3, #1073741824	; 0x40000000
 8003288:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800328a:	601a      	str	r2, [r3, #0]
  }

  /* Mark it as LAST descriptor */
  SET_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_LS);
 800328c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800328e:	681b      	ldr	r3, [r3, #0]
 8003290:	f043 5200 	orr.w	r2, r3, #536870912	; 0x20000000
 8003294:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003296:	601a      	str	r2, [r3, #0]

  /* Get address of first descriptor */
  dmatxdesc = (ETH_DMADescTypeDef *)dmatxdesclist->TxDesc[firstdescidx];
 8003298:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800329a:	6a3a      	ldr	r2, [r7, #32]
 800329c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80032a0:	633b      	str	r3, [r7, #48]	; 0x30
  __ASM volatile ("dmb 0xF":::"memory");
 80032a2:	f3bf 8f5f 	dmb	sy
}
 80032a6:	bf00      	nop
  /* Ensure rest of descriptor is written to RAM before the OWN bit */
  __DMB();
  /* set OWN bit of FIRST descriptor */
  SET_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_OWN);
 80032a8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80032aa:	681b      	ldr	r3, [r3, #0]
 80032ac:	f043 4200 	orr.w	r2, r3, #2147483648	; 0x80000000
 80032b0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80032b2:	601a      	str	r2, [r3, #0]
  /* Save the current packet address to expose it to the application */
  dmatxdesclist->PacketAddress[descidx] = dmatxdesclist->CurrentPacketAddress;
 80032b4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80032b6:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80032b8:	6a79      	ldr	r1, [r7, #36]	; 0x24
 80032ba:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80032bc:	3304      	adds	r3, #4
 80032be:	009b      	lsls	r3, r3, #2
 80032c0:	440b      	add	r3, r1
 80032c2:	605a      	str	r2, [r3, #4]

  dmatxdesclist->CurTxDesc = descidx;
 80032c4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80032c6:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 80032c8:	611a      	str	r2, [r3, #16]
 */
__STATIC_FORCEINLINE uint32_t __get_PRIMASK(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, primask" : "=r" (result) );
 80032ca:	f3ef 8310 	mrs	r3, PRIMASK
 80032ce:	613b      	str	r3, [r7, #16]
  return(result);
 80032d0:	693b      	ldr	r3, [r7, #16]

  /* Enter critical section */
  primask_bit = __get_PRIMASK();
 80032d2:	61fb      	str	r3, [r7, #28]
 80032d4:	2301      	movs	r3, #1
 80032d6:	617b      	str	r3, [r7, #20]
  \details Assigns the given value to the Priority Mask Register.
  \param [in]    priMask  Priority Mask
 */
__STATIC_FORCEINLINE void __set_PRIMASK(uint32_t priMask)
{
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80032d8:	697b      	ldr	r3, [r7, #20]
 80032da:	f383 8810 	msr	PRIMASK, r3
}
 80032de:	bf00      	nop
  __set_PRIMASK(1);

  dmatxdesclist->BuffersInUse += bd_count + 1U;
 80032e0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80032e2:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80032e4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80032e6:	4413      	add	r3, r2
 80032e8:	1c5a      	adds	r2, r3, #1
 80032ea:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80032ec:	629a      	str	r2, [r3, #40]	; 0x28
 80032ee:	69fb      	ldr	r3, [r7, #28]
 80032f0:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80032f2:	69bb      	ldr	r3, [r7, #24]
 80032f4:	f383 8810 	msr	PRIMASK, r3
}
 80032f8:	bf00      	nop

  /* Exit critical section: restore previous priority mask */
  __set_PRIMASK(primask_bit);

  /* Return function status */
  return HAL_ETH_ERROR_NONE;
 80032fa:	2300      	movs	r3, #0
}
 80032fc:	4618      	mov	r0, r3
 80032fe:	3744      	adds	r7, #68	; 0x44
 8003300:	46bd      	mov	sp, r7
 8003302:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003306:	4770      	bx	lr

08003308 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8003308:	b480      	push	{r7}
 800330a:	b089      	sub	sp, #36	; 0x24
 800330c:	af00      	add	r7, sp, #0
 800330e:	6078      	str	r0, [r7, #4]
 8003310:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8003312:	2300      	movs	r3, #0
 8003314:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8003316:	2300      	movs	r3, #0
 8003318:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 800331a:	2300      	movs	r3, #0
 800331c:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 800331e:	2300      	movs	r3, #0
 8003320:	61fb      	str	r3, [r7, #28]
 8003322:	e16b      	b.n	80035fc <HAL_GPIO_Init+0x2f4>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8003324:	2201      	movs	r2, #1
 8003326:	69fb      	ldr	r3, [r7, #28]
 8003328:	fa02 f303 	lsl.w	r3, r2, r3
 800332c:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 800332e:	683b      	ldr	r3, [r7, #0]
 8003330:	681b      	ldr	r3, [r3, #0]
 8003332:	697a      	ldr	r2, [r7, #20]
 8003334:	4013      	ands	r3, r2
 8003336:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8003338:	693a      	ldr	r2, [r7, #16]
 800333a:	697b      	ldr	r3, [r7, #20]
 800333c:	429a      	cmp	r2, r3
 800333e:	f040 815a 	bne.w	80035f6 <HAL_GPIO_Init+0x2ee>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8003342:	683b      	ldr	r3, [r7, #0]
 8003344:	685b      	ldr	r3, [r3, #4]
 8003346:	f003 0303 	and.w	r3, r3, #3
 800334a:	2b01      	cmp	r3, #1
 800334c:	d005      	beq.n	800335a <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800334e:	683b      	ldr	r3, [r7, #0]
 8003350:	685b      	ldr	r3, [r3, #4]
 8003352:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8003356:	2b02      	cmp	r3, #2
 8003358:	d130      	bne.n	80033bc <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 800335a:	687b      	ldr	r3, [r7, #4]
 800335c:	689b      	ldr	r3, [r3, #8]
 800335e:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8003360:	69fb      	ldr	r3, [r7, #28]
 8003362:	005b      	lsls	r3, r3, #1
 8003364:	2203      	movs	r2, #3
 8003366:	fa02 f303 	lsl.w	r3, r2, r3
 800336a:	43db      	mvns	r3, r3
 800336c:	69ba      	ldr	r2, [r7, #24]
 800336e:	4013      	ands	r3, r2
 8003370:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8003372:	683b      	ldr	r3, [r7, #0]
 8003374:	68da      	ldr	r2, [r3, #12]
 8003376:	69fb      	ldr	r3, [r7, #28]
 8003378:	005b      	lsls	r3, r3, #1
 800337a:	fa02 f303 	lsl.w	r3, r2, r3
 800337e:	69ba      	ldr	r2, [r7, #24]
 8003380:	4313      	orrs	r3, r2
 8003382:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8003384:	687b      	ldr	r3, [r7, #4]
 8003386:	69ba      	ldr	r2, [r7, #24]
 8003388:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 800338a:	687b      	ldr	r3, [r7, #4]
 800338c:	685b      	ldr	r3, [r3, #4]
 800338e:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8003390:	2201      	movs	r2, #1
 8003392:	69fb      	ldr	r3, [r7, #28]
 8003394:	fa02 f303 	lsl.w	r3, r2, r3
 8003398:	43db      	mvns	r3, r3
 800339a:	69ba      	ldr	r2, [r7, #24]
 800339c:	4013      	ands	r3, r2
 800339e:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80033a0:	683b      	ldr	r3, [r7, #0]
 80033a2:	685b      	ldr	r3, [r3, #4]
 80033a4:	091b      	lsrs	r3, r3, #4
 80033a6:	f003 0201 	and.w	r2, r3, #1
 80033aa:	69fb      	ldr	r3, [r7, #28]
 80033ac:	fa02 f303 	lsl.w	r3, r2, r3
 80033b0:	69ba      	ldr	r2, [r7, #24]
 80033b2:	4313      	orrs	r3, r2
 80033b4:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 80033b6:	687b      	ldr	r3, [r7, #4]
 80033b8:	69ba      	ldr	r2, [r7, #24]
 80033ba:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80033bc:	683b      	ldr	r3, [r7, #0]
 80033be:	685b      	ldr	r3, [r3, #4]
 80033c0:	f003 0303 	and.w	r3, r3, #3
 80033c4:	2b03      	cmp	r3, #3
 80033c6:	d017      	beq.n	80033f8 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 80033c8:	687b      	ldr	r3, [r7, #4]
 80033ca:	68db      	ldr	r3, [r3, #12]
 80033cc:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 80033ce:	69fb      	ldr	r3, [r7, #28]
 80033d0:	005b      	lsls	r3, r3, #1
 80033d2:	2203      	movs	r2, #3
 80033d4:	fa02 f303 	lsl.w	r3, r2, r3
 80033d8:	43db      	mvns	r3, r3
 80033da:	69ba      	ldr	r2, [r7, #24]
 80033dc:	4013      	ands	r3, r2
 80033de:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 80033e0:	683b      	ldr	r3, [r7, #0]
 80033e2:	689a      	ldr	r2, [r3, #8]
 80033e4:	69fb      	ldr	r3, [r7, #28]
 80033e6:	005b      	lsls	r3, r3, #1
 80033e8:	fa02 f303 	lsl.w	r3, r2, r3
 80033ec:	69ba      	ldr	r2, [r7, #24]
 80033ee:	4313      	orrs	r3, r2
 80033f0:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 80033f2:	687b      	ldr	r3, [r7, #4]
 80033f4:	69ba      	ldr	r2, [r7, #24]
 80033f6:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80033f8:	683b      	ldr	r3, [r7, #0]
 80033fa:	685b      	ldr	r3, [r3, #4]
 80033fc:	f003 0303 	and.w	r3, r3, #3
 8003400:	2b02      	cmp	r3, #2
 8003402:	d123      	bne.n	800344c <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8003404:	69fb      	ldr	r3, [r7, #28]
 8003406:	08da      	lsrs	r2, r3, #3
 8003408:	687b      	ldr	r3, [r7, #4]
 800340a:	3208      	adds	r2, #8
 800340c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8003410:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8003412:	69fb      	ldr	r3, [r7, #28]
 8003414:	f003 0307 	and.w	r3, r3, #7
 8003418:	009b      	lsls	r3, r3, #2
 800341a:	220f      	movs	r2, #15
 800341c:	fa02 f303 	lsl.w	r3, r2, r3
 8003420:	43db      	mvns	r3, r3
 8003422:	69ba      	ldr	r2, [r7, #24]
 8003424:	4013      	ands	r3, r2
 8003426:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8003428:	683b      	ldr	r3, [r7, #0]
 800342a:	691a      	ldr	r2, [r3, #16]
 800342c:	69fb      	ldr	r3, [r7, #28]
 800342e:	f003 0307 	and.w	r3, r3, #7
 8003432:	009b      	lsls	r3, r3, #2
 8003434:	fa02 f303 	lsl.w	r3, r2, r3
 8003438:	69ba      	ldr	r2, [r7, #24]
 800343a:	4313      	orrs	r3, r2
 800343c:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 800343e:	69fb      	ldr	r3, [r7, #28]
 8003440:	08da      	lsrs	r2, r3, #3
 8003442:	687b      	ldr	r3, [r7, #4]
 8003444:	3208      	adds	r2, #8
 8003446:	69b9      	ldr	r1, [r7, #24]
 8003448:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 800344c:	687b      	ldr	r3, [r7, #4]
 800344e:	681b      	ldr	r3, [r3, #0]
 8003450:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8003452:	69fb      	ldr	r3, [r7, #28]
 8003454:	005b      	lsls	r3, r3, #1
 8003456:	2203      	movs	r2, #3
 8003458:	fa02 f303 	lsl.w	r3, r2, r3
 800345c:	43db      	mvns	r3, r3
 800345e:	69ba      	ldr	r2, [r7, #24]
 8003460:	4013      	ands	r3, r2
 8003462:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8003464:	683b      	ldr	r3, [r7, #0]
 8003466:	685b      	ldr	r3, [r3, #4]
 8003468:	f003 0203 	and.w	r2, r3, #3
 800346c:	69fb      	ldr	r3, [r7, #28]
 800346e:	005b      	lsls	r3, r3, #1
 8003470:	fa02 f303 	lsl.w	r3, r2, r3
 8003474:	69ba      	ldr	r2, [r7, #24]
 8003476:	4313      	orrs	r3, r2
 8003478:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 800347a:	687b      	ldr	r3, [r7, #4]
 800347c:	69ba      	ldr	r2, [r7, #24]
 800347e:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8003480:	683b      	ldr	r3, [r7, #0]
 8003482:	685b      	ldr	r3, [r3, #4]
 8003484:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8003488:	2b00      	cmp	r3, #0
 800348a:	f000 80b4 	beq.w	80035f6 <HAL_GPIO_Init+0x2ee>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800348e:	2300      	movs	r3, #0
 8003490:	60fb      	str	r3, [r7, #12]
 8003492:	4b60      	ldr	r3, [pc, #384]	; (8003614 <HAL_GPIO_Init+0x30c>)
 8003494:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003496:	4a5f      	ldr	r2, [pc, #380]	; (8003614 <HAL_GPIO_Init+0x30c>)
 8003498:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800349c:	6453      	str	r3, [r2, #68]	; 0x44
 800349e:	4b5d      	ldr	r3, [pc, #372]	; (8003614 <HAL_GPIO_Init+0x30c>)
 80034a0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80034a2:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80034a6:	60fb      	str	r3, [r7, #12]
 80034a8:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 80034aa:	4a5b      	ldr	r2, [pc, #364]	; (8003618 <HAL_GPIO_Init+0x310>)
 80034ac:	69fb      	ldr	r3, [r7, #28]
 80034ae:	089b      	lsrs	r3, r3, #2
 80034b0:	3302      	adds	r3, #2
 80034b2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80034b6:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 80034b8:	69fb      	ldr	r3, [r7, #28]
 80034ba:	f003 0303 	and.w	r3, r3, #3
 80034be:	009b      	lsls	r3, r3, #2
 80034c0:	220f      	movs	r2, #15
 80034c2:	fa02 f303 	lsl.w	r3, r2, r3
 80034c6:	43db      	mvns	r3, r3
 80034c8:	69ba      	ldr	r2, [r7, #24]
 80034ca:	4013      	ands	r3, r2
 80034cc:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 80034ce:	687b      	ldr	r3, [r7, #4]
 80034d0:	4a52      	ldr	r2, [pc, #328]	; (800361c <HAL_GPIO_Init+0x314>)
 80034d2:	4293      	cmp	r3, r2
 80034d4:	d02b      	beq.n	800352e <HAL_GPIO_Init+0x226>
 80034d6:	687b      	ldr	r3, [r7, #4]
 80034d8:	4a51      	ldr	r2, [pc, #324]	; (8003620 <HAL_GPIO_Init+0x318>)
 80034da:	4293      	cmp	r3, r2
 80034dc:	d025      	beq.n	800352a <HAL_GPIO_Init+0x222>
 80034de:	687b      	ldr	r3, [r7, #4]
 80034e0:	4a50      	ldr	r2, [pc, #320]	; (8003624 <HAL_GPIO_Init+0x31c>)
 80034e2:	4293      	cmp	r3, r2
 80034e4:	d01f      	beq.n	8003526 <HAL_GPIO_Init+0x21e>
 80034e6:	687b      	ldr	r3, [r7, #4]
 80034e8:	4a4f      	ldr	r2, [pc, #316]	; (8003628 <HAL_GPIO_Init+0x320>)
 80034ea:	4293      	cmp	r3, r2
 80034ec:	d019      	beq.n	8003522 <HAL_GPIO_Init+0x21a>
 80034ee:	687b      	ldr	r3, [r7, #4]
 80034f0:	4a4e      	ldr	r2, [pc, #312]	; (800362c <HAL_GPIO_Init+0x324>)
 80034f2:	4293      	cmp	r3, r2
 80034f4:	d013      	beq.n	800351e <HAL_GPIO_Init+0x216>
 80034f6:	687b      	ldr	r3, [r7, #4]
 80034f8:	4a4d      	ldr	r2, [pc, #308]	; (8003630 <HAL_GPIO_Init+0x328>)
 80034fa:	4293      	cmp	r3, r2
 80034fc:	d00d      	beq.n	800351a <HAL_GPIO_Init+0x212>
 80034fe:	687b      	ldr	r3, [r7, #4]
 8003500:	4a4c      	ldr	r2, [pc, #304]	; (8003634 <HAL_GPIO_Init+0x32c>)
 8003502:	4293      	cmp	r3, r2
 8003504:	d007      	beq.n	8003516 <HAL_GPIO_Init+0x20e>
 8003506:	687b      	ldr	r3, [r7, #4]
 8003508:	4a4b      	ldr	r2, [pc, #300]	; (8003638 <HAL_GPIO_Init+0x330>)
 800350a:	4293      	cmp	r3, r2
 800350c:	d101      	bne.n	8003512 <HAL_GPIO_Init+0x20a>
 800350e:	2307      	movs	r3, #7
 8003510:	e00e      	b.n	8003530 <HAL_GPIO_Init+0x228>
 8003512:	2308      	movs	r3, #8
 8003514:	e00c      	b.n	8003530 <HAL_GPIO_Init+0x228>
 8003516:	2306      	movs	r3, #6
 8003518:	e00a      	b.n	8003530 <HAL_GPIO_Init+0x228>
 800351a:	2305      	movs	r3, #5
 800351c:	e008      	b.n	8003530 <HAL_GPIO_Init+0x228>
 800351e:	2304      	movs	r3, #4
 8003520:	e006      	b.n	8003530 <HAL_GPIO_Init+0x228>
 8003522:	2303      	movs	r3, #3
 8003524:	e004      	b.n	8003530 <HAL_GPIO_Init+0x228>
 8003526:	2302      	movs	r3, #2
 8003528:	e002      	b.n	8003530 <HAL_GPIO_Init+0x228>
 800352a:	2301      	movs	r3, #1
 800352c:	e000      	b.n	8003530 <HAL_GPIO_Init+0x228>
 800352e:	2300      	movs	r3, #0
 8003530:	69fa      	ldr	r2, [r7, #28]
 8003532:	f002 0203 	and.w	r2, r2, #3
 8003536:	0092      	lsls	r2, r2, #2
 8003538:	4093      	lsls	r3, r2
 800353a:	69ba      	ldr	r2, [r7, #24]
 800353c:	4313      	orrs	r3, r2
 800353e:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8003540:	4935      	ldr	r1, [pc, #212]	; (8003618 <HAL_GPIO_Init+0x310>)
 8003542:	69fb      	ldr	r3, [r7, #28]
 8003544:	089b      	lsrs	r3, r3, #2
 8003546:	3302      	adds	r3, #2
 8003548:	69ba      	ldr	r2, [r7, #24]
 800354a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 800354e:	4b3b      	ldr	r3, [pc, #236]	; (800363c <HAL_GPIO_Init+0x334>)
 8003550:	689b      	ldr	r3, [r3, #8]
 8003552:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003554:	693b      	ldr	r3, [r7, #16]
 8003556:	43db      	mvns	r3, r3
 8003558:	69ba      	ldr	r2, [r7, #24]
 800355a:	4013      	ands	r3, r2
 800355c:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 800355e:	683b      	ldr	r3, [r7, #0]
 8003560:	685b      	ldr	r3, [r3, #4]
 8003562:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8003566:	2b00      	cmp	r3, #0
 8003568:	d003      	beq.n	8003572 <HAL_GPIO_Init+0x26a>
        {
          temp |= iocurrent;
 800356a:	69ba      	ldr	r2, [r7, #24]
 800356c:	693b      	ldr	r3, [r7, #16]
 800356e:	4313      	orrs	r3, r2
 8003570:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8003572:	4a32      	ldr	r2, [pc, #200]	; (800363c <HAL_GPIO_Init+0x334>)
 8003574:	69bb      	ldr	r3, [r7, #24]
 8003576:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8003578:	4b30      	ldr	r3, [pc, #192]	; (800363c <HAL_GPIO_Init+0x334>)
 800357a:	68db      	ldr	r3, [r3, #12]
 800357c:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800357e:	693b      	ldr	r3, [r7, #16]
 8003580:	43db      	mvns	r3, r3
 8003582:	69ba      	ldr	r2, [r7, #24]
 8003584:	4013      	ands	r3, r2
 8003586:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8003588:	683b      	ldr	r3, [r7, #0]
 800358a:	685b      	ldr	r3, [r3, #4]
 800358c:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8003590:	2b00      	cmp	r3, #0
 8003592:	d003      	beq.n	800359c <HAL_GPIO_Init+0x294>
        {
          temp |= iocurrent;
 8003594:	69ba      	ldr	r2, [r7, #24]
 8003596:	693b      	ldr	r3, [r7, #16]
 8003598:	4313      	orrs	r3, r2
 800359a:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 800359c:	4a27      	ldr	r2, [pc, #156]	; (800363c <HAL_GPIO_Init+0x334>)
 800359e:	69bb      	ldr	r3, [r7, #24]
 80035a0:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 80035a2:	4b26      	ldr	r3, [pc, #152]	; (800363c <HAL_GPIO_Init+0x334>)
 80035a4:	685b      	ldr	r3, [r3, #4]
 80035a6:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80035a8:	693b      	ldr	r3, [r7, #16]
 80035aa:	43db      	mvns	r3, r3
 80035ac:	69ba      	ldr	r2, [r7, #24]
 80035ae:	4013      	ands	r3, r2
 80035b0:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 80035b2:	683b      	ldr	r3, [r7, #0]
 80035b4:	685b      	ldr	r3, [r3, #4]
 80035b6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80035ba:	2b00      	cmp	r3, #0
 80035bc:	d003      	beq.n	80035c6 <HAL_GPIO_Init+0x2be>
        {
          temp |= iocurrent;
 80035be:	69ba      	ldr	r2, [r7, #24]
 80035c0:	693b      	ldr	r3, [r7, #16]
 80035c2:	4313      	orrs	r3, r2
 80035c4:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 80035c6:	4a1d      	ldr	r2, [pc, #116]	; (800363c <HAL_GPIO_Init+0x334>)
 80035c8:	69bb      	ldr	r3, [r7, #24]
 80035ca:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 80035cc:	4b1b      	ldr	r3, [pc, #108]	; (800363c <HAL_GPIO_Init+0x334>)
 80035ce:	681b      	ldr	r3, [r3, #0]
 80035d0:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80035d2:	693b      	ldr	r3, [r7, #16]
 80035d4:	43db      	mvns	r3, r3
 80035d6:	69ba      	ldr	r2, [r7, #24]
 80035d8:	4013      	ands	r3, r2
 80035da:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 80035dc:	683b      	ldr	r3, [r7, #0]
 80035de:	685b      	ldr	r3, [r3, #4]
 80035e0:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80035e4:	2b00      	cmp	r3, #0
 80035e6:	d003      	beq.n	80035f0 <HAL_GPIO_Init+0x2e8>
        {
          temp |= iocurrent;
 80035e8:	69ba      	ldr	r2, [r7, #24]
 80035ea:	693b      	ldr	r3, [r7, #16]
 80035ec:	4313      	orrs	r3, r2
 80035ee:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 80035f0:	4a12      	ldr	r2, [pc, #72]	; (800363c <HAL_GPIO_Init+0x334>)
 80035f2:	69bb      	ldr	r3, [r7, #24]
 80035f4:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 80035f6:	69fb      	ldr	r3, [r7, #28]
 80035f8:	3301      	adds	r3, #1
 80035fa:	61fb      	str	r3, [r7, #28]
 80035fc:	69fb      	ldr	r3, [r7, #28]
 80035fe:	2b0f      	cmp	r3, #15
 8003600:	f67f ae90 	bls.w	8003324 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8003604:	bf00      	nop
 8003606:	bf00      	nop
 8003608:	3724      	adds	r7, #36	; 0x24
 800360a:	46bd      	mov	sp, r7
 800360c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003610:	4770      	bx	lr
 8003612:	bf00      	nop
 8003614:	40023800 	.word	0x40023800
 8003618:	40013800 	.word	0x40013800
 800361c:	40020000 	.word	0x40020000
 8003620:	40020400 	.word	0x40020400
 8003624:	40020800 	.word	0x40020800
 8003628:	40020c00 	.word	0x40020c00
 800362c:	40021000 	.word	0x40021000
 8003630:	40021400 	.word	0x40021400
 8003634:	40021800 	.word	0x40021800
 8003638:	40021c00 	.word	0x40021c00
 800363c:	40013c00 	.word	0x40013c00

08003640 <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 8003640:	b580      	push	{r7, lr}
 8003642:	b086      	sub	sp, #24
 8003644:	af02      	add	r7, sp, #8
 8003646:	6078      	str	r0, [r7, #4]
  const USB_OTG_GlobalTypeDef *USBx;
#endif /* defined (USB_OTG_FS) */
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 8003648:	687b      	ldr	r3, [r7, #4]
 800364a:	2b00      	cmp	r3, #0
 800364c:	d101      	bne.n	8003652 <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 800364e:	2301      	movs	r3, #1
 8003650:	e101      	b.n	8003856 <HAL_PCD_Init+0x216>

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

#if defined (USB_OTG_FS)
  USBx = hpcd->Instance;
 8003652:	687b      	ldr	r3, [r7, #4]
 8003654:	681b      	ldr	r3, [r3, #0]
 8003656:	60bb      	str	r3, [r7, #8]
#endif /* defined (USB_OTG_FS) */

  if (hpcd->State == HAL_PCD_STATE_RESET)
 8003658:	687b      	ldr	r3, [r7, #4]
 800365a:	f893 3495 	ldrb.w	r3, [r3, #1173]	; 0x495
 800365e:	b2db      	uxtb	r3, r3
 8003660:	2b00      	cmp	r3, #0
 8003662:	d106      	bne.n	8003672 <HAL_PCD_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 8003664:	687b      	ldr	r3, [r7, #4]
 8003666:	2200      	movs	r2, #0
 8003668:	f883 2494 	strb.w	r2, [r3, #1172]	; 0x494

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 800366c:	6878      	ldr	r0, [r7, #4]
 800366e:	f014 fa67 	bl	8017b40 <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 8003672:	687b      	ldr	r3, [r7, #4]
 8003674:	2203      	movs	r2, #3
 8003676:	f883 2495 	strb.w	r2, [r3, #1173]	; 0x495

#if defined (USB_OTG_FS)
  /* Disable DMA mode for FS instance */
  if (USBx == USB_OTG_FS)
 800367a:	68bb      	ldr	r3, [r7, #8]
 800367c:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8003680:	d102      	bne.n	8003688 <HAL_PCD_Init+0x48>
  {
    hpcd->Init.dma_enable = 0U;
 8003682:	687b      	ldr	r3, [r7, #4]
 8003684:	2200      	movs	r2, #0
 8003686:	719a      	strb	r2, [r3, #6]
  }
#endif /* defined (USB_OTG_FS) */

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 8003688:	687b      	ldr	r3, [r7, #4]
 800368a:	681b      	ldr	r3, [r3, #0]
 800368c:	4618      	mov	r0, r3
 800368e:	f002 fffc 	bl	800668a <USB_DisableGlobalInt>

  /*Init the Core (common init.) */
  if (USB_CoreInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8003692:	687b      	ldr	r3, [r7, #4]
 8003694:	6818      	ldr	r0, [r3, #0]
 8003696:	687b      	ldr	r3, [r7, #4]
 8003698:	7c1a      	ldrb	r2, [r3, #16]
 800369a:	f88d 2000 	strb.w	r2, [sp]
 800369e:	3304      	adds	r3, #4
 80036a0:	cb0e      	ldmia	r3, {r1, r2, r3}
 80036a2:	f002 fedb 	bl	800645c <USB_CoreInit>
 80036a6:	4603      	mov	r3, r0
 80036a8:	2b00      	cmp	r3, #0
 80036aa:	d005      	beq.n	80036b8 <HAL_PCD_Init+0x78>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 80036ac:	687b      	ldr	r3, [r7, #4]
 80036ae:	2202      	movs	r2, #2
 80036b0:	f883 2495 	strb.w	r2, [r3, #1173]	; 0x495
    return HAL_ERROR;
 80036b4:	2301      	movs	r3, #1
 80036b6:	e0ce      	b.n	8003856 <HAL_PCD_Init+0x216>
  }

  /* Force Device Mode */
  if (USB_SetCurrentMode(hpcd->Instance, USB_DEVICE_MODE) != HAL_OK)
 80036b8:	687b      	ldr	r3, [r7, #4]
 80036ba:	681b      	ldr	r3, [r3, #0]
 80036bc:	2100      	movs	r1, #0
 80036be:	4618      	mov	r0, r3
 80036c0:	f002 fff4 	bl	80066ac <USB_SetCurrentMode>
 80036c4:	4603      	mov	r3, r0
 80036c6:	2b00      	cmp	r3, #0
 80036c8:	d005      	beq.n	80036d6 <HAL_PCD_Init+0x96>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 80036ca:	687b      	ldr	r3, [r7, #4]
 80036cc:	2202      	movs	r2, #2
 80036ce:	f883 2495 	strb.w	r2, [r3, #1173]	; 0x495
    return HAL_ERROR;
 80036d2:	2301      	movs	r3, #1
 80036d4:	e0bf      	b.n	8003856 <HAL_PCD_Init+0x216>
  }

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80036d6:	2300      	movs	r3, #0
 80036d8:	73fb      	strb	r3, [r7, #15]
 80036da:	e04a      	b.n	8003772 <HAL_PCD_Init+0x132>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 80036dc:	7bfa      	ldrb	r2, [r7, #15]
 80036de:	6879      	ldr	r1, [r7, #4]
 80036e0:	4613      	mov	r3, r2
 80036e2:	00db      	lsls	r3, r3, #3
 80036e4:	4413      	add	r3, r2
 80036e6:	009b      	lsls	r3, r3, #2
 80036e8:	440b      	add	r3, r1
 80036ea:	3315      	adds	r3, #21
 80036ec:	2201      	movs	r2, #1
 80036ee:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 80036f0:	7bfa      	ldrb	r2, [r7, #15]
 80036f2:	6879      	ldr	r1, [r7, #4]
 80036f4:	4613      	mov	r3, r2
 80036f6:	00db      	lsls	r3, r3, #3
 80036f8:	4413      	add	r3, r2
 80036fa:	009b      	lsls	r3, r3, #2
 80036fc:	440b      	add	r3, r1
 80036fe:	3314      	adds	r3, #20
 8003700:	7bfa      	ldrb	r2, [r7, #15]
 8003702:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].tx_fifo_num = i;
 8003704:	7bfa      	ldrb	r2, [r7, #15]
 8003706:	7bfb      	ldrb	r3, [r7, #15]
 8003708:	b298      	uxth	r0, r3
 800370a:	6879      	ldr	r1, [r7, #4]
 800370c:	4613      	mov	r3, r2
 800370e:	00db      	lsls	r3, r3, #3
 8003710:	4413      	add	r3, r2
 8003712:	009b      	lsls	r3, r3, #2
 8003714:	440b      	add	r3, r1
 8003716:	332e      	adds	r3, #46	; 0x2e
 8003718:	4602      	mov	r2, r0
 800371a:	801a      	strh	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 800371c:	7bfa      	ldrb	r2, [r7, #15]
 800371e:	6879      	ldr	r1, [r7, #4]
 8003720:	4613      	mov	r3, r2
 8003722:	00db      	lsls	r3, r3, #3
 8003724:	4413      	add	r3, r2
 8003726:	009b      	lsls	r3, r3, #2
 8003728:	440b      	add	r3, r1
 800372a:	3318      	adds	r3, #24
 800372c:	2200      	movs	r2, #0
 800372e:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 8003730:	7bfa      	ldrb	r2, [r7, #15]
 8003732:	6879      	ldr	r1, [r7, #4]
 8003734:	4613      	mov	r3, r2
 8003736:	00db      	lsls	r3, r3, #3
 8003738:	4413      	add	r3, r2
 800373a:	009b      	lsls	r3, r3, #2
 800373c:	440b      	add	r3, r1
 800373e:	331c      	adds	r3, #28
 8003740:	2200      	movs	r2, #0
 8003742:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 8003744:	7bfa      	ldrb	r2, [r7, #15]
 8003746:	6879      	ldr	r1, [r7, #4]
 8003748:	4613      	mov	r3, r2
 800374a:	00db      	lsls	r3, r3, #3
 800374c:	4413      	add	r3, r2
 800374e:	009b      	lsls	r3, r3, #2
 8003750:	440b      	add	r3, r1
 8003752:	3320      	adds	r3, #32
 8003754:	2200      	movs	r2, #0
 8003756:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 8003758:	7bfa      	ldrb	r2, [r7, #15]
 800375a:	6879      	ldr	r1, [r7, #4]
 800375c:	4613      	mov	r3, r2
 800375e:	00db      	lsls	r3, r3, #3
 8003760:	4413      	add	r3, r2
 8003762:	009b      	lsls	r3, r3, #2
 8003764:	440b      	add	r3, r1
 8003766:	3324      	adds	r3, #36	; 0x24
 8003768:	2200      	movs	r2, #0
 800376a:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800376c:	7bfb      	ldrb	r3, [r7, #15]
 800376e:	3301      	adds	r3, #1
 8003770:	73fb      	strb	r3, [r7, #15]
 8003772:	687b      	ldr	r3, [r7, #4]
 8003774:	791b      	ldrb	r3, [r3, #4]
 8003776:	7bfa      	ldrb	r2, [r7, #15]
 8003778:	429a      	cmp	r2, r3
 800377a:	d3af      	bcc.n	80036dc <HAL_PCD_Init+0x9c>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800377c:	2300      	movs	r3, #0
 800377e:	73fb      	strb	r3, [r7, #15]
 8003780:	e044      	b.n	800380c <HAL_PCD_Init+0x1cc>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 8003782:	7bfa      	ldrb	r2, [r7, #15]
 8003784:	6879      	ldr	r1, [r7, #4]
 8003786:	4613      	mov	r3, r2
 8003788:	00db      	lsls	r3, r3, #3
 800378a:	4413      	add	r3, r2
 800378c:	009b      	lsls	r3, r3, #2
 800378e:	440b      	add	r3, r1
 8003790:	f203 2355 	addw	r3, r3, #597	; 0x255
 8003794:	2200      	movs	r2, #0
 8003796:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 8003798:	7bfa      	ldrb	r2, [r7, #15]
 800379a:	6879      	ldr	r1, [r7, #4]
 800379c:	4613      	mov	r3, r2
 800379e:	00db      	lsls	r3, r3, #3
 80037a0:	4413      	add	r3, r2
 80037a2:	009b      	lsls	r3, r3, #2
 80037a4:	440b      	add	r3, r1
 80037a6:	f503 7315 	add.w	r3, r3, #596	; 0x254
 80037aa:	7bfa      	ldrb	r2, [r7, #15]
 80037ac:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 80037ae:	7bfa      	ldrb	r2, [r7, #15]
 80037b0:	6879      	ldr	r1, [r7, #4]
 80037b2:	4613      	mov	r3, r2
 80037b4:	00db      	lsls	r3, r3, #3
 80037b6:	4413      	add	r3, r2
 80037b8:	009b      	lsls	r3, r3, #2
 80037ba:	440b      	add	r3, r1
 80037bc:	f503 7316 	add.w	r3, r3, #600	; 0x258
 80037c0:	2200      	movs	r2, #0
 80037c2:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 80037c4:	7bfa      	ldrb	r2, [r7, #15]
 80037c6:	6879      	ldr	r1, [r7, #4]
 80037c8:	4613      	mov	r3, r2
 80037ca:	00db      	lsls	r3, r3, #3
 80037cc:	4413      	add	r3, r2
 80037ce:	009b      	lsls	r3, r3, #2
 80037d0:	440b      	add	r3, r1
 80037d2:	f503 7317 	add.w	r3, r3, #604	; 0x25c
 80037d6:	2200      	movs	r2, #0
 80037d8:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 80037da:	7bfa      	ldrb	r2, [r7, #15]
 80037dc:	6879      	ldr	r1, [r7, #4]
 80037de:	4613      	mov	r3, r2
 80037e0:	00db      	lsls	r3, r3, #3
 80037e2:	4413      	add	r3, r2
 80037e4:	009b      	lsls	r3, r3, #2
 80037e6:	440b      	add	r3, r1
 80037e8:	f503 7318 	add.w	r3, r3, #608	; 0x260
 80037ec:	2200      	movs	r2, #0
 80037ee:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 80037f0:	7bfa      	ldrb	r2, [r7, #15]
 80037f2:	6879      	ldr	r1, [r7, #4]
 80037f4:	4613      	mov	r3, r2
 80037f6:	00db      	lsls	r3, r3, #3
 80037f8:	4413      	add	r3, r2
 80037fa:	009b      	lsls	r3, r3, #2
 80037fc:	440b      	add	r3, r1
 80037fe:	f503 7319 	add.w	r3, r3, #612	; 0x264
 8003802:	2200      	movs	r2, #0
 8003804:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8003806:	7bfb      	ldrb	r3, [r7, #15]
 8003808:	3301      	adds	r3, #1
 800380a:	73fb      	strb	r3, [r7, #15]
 800380c:	687b      	ldr	r3, [r7, #4]
 800380e:	791b      	ldrb	r3, [r3, #4]
 8003810:	7bfa      	ldrb	r2, [r7, #15]
 8003812:	429a      	cmp	r2, r3
 8003814:	d3b5      	bcc.n	8003782 <HAL_PCD_Init+0x142>
  }

  /* Init Device */
  if (USB_DevInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8003816:	687b      	ldr	r3, [r7, #4]
 8003818:	6818      	ldr	r0, [r3, #0]
 800381a:	687b      	ldr	r3, [r7, #4]
 800381c:	7c1a      	ldrb	r2, [r3, #16]
 800381e:	f88d 2000 	strb.w	r2, [sp]
 8003822:	3304      	adds	r3, #4
 8003824:	cb0e      	ldmia	r3, {r1, r2, r3}
 8003826:	f002 ff8d 	bl	8006744 <USB_DevInit>
 800382a:	4603      	mov	r3, r0
 800382c:	2b00      	cmp	r3, #0
 800382e:	d005      	beq.n	800383c <HAL_PCD_Init+0x1fc>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8003830:	687b      	ldr	r3, [r7, #4]
 8003832:	2202      	movs	r2, #2
 8003834:	f883 2495 	strb.w	r2, [r3, #1173]	; 0x495
    return HAL_ERROR;
 8003838:	2301      	movs	r3, #1
 800383a:	e00c      	b.n	8003856 <HAL_PCD_Init+0x216>
  }

  hpcd->USB_Address = 0U;
 800383c:	687b      	ldr	r3, [r7, #4]
 800383e:	2200      	movs	r2, #0
 8003840:	745a      	strb	r2, [r3, #17]
  hpcd->State = HAL_PCD_STATE_READY;
 8003842:	687b      	ldr	r3, [r7, #4]
 8003844:	2201      	movs	r2, #1
 8003846:	f883 2495 	strb.w	r2, [r3, #1173]	; 0x495
    (void)HAL_PCDEx_ActivateLPM(hpcd);
  }
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) ||
          defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) ||
          defined(STM32F423xx) */
  (void)USB_DevDisconnect(hpcd->Instance);
 800384a:	687b      	ldr	r3, [r7, #4]
 800384c:	681b      	ldr	r3, [r3, #0]
 800384e:	4618      	mov	r0, r3
 8003850:	f003 ffd7 	bl	8007802 <USB_DevDisconnect>

  return HAL_OK;
 8003854:	2300      	movs	r3, #0
}
 8003856:	4618      	mov	r0, r3
 8003858:	3710      	adds	r7, #16
 800385a:	46bd      	mov	sp, r7
 800385c:	bd80      	pop	{r7, pc}

0800385e <HAL_PCD_Start>:
  * @brief  Start the USB device
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Start(PCD_HandleTypeDef *hpcd)
{
 800385e:	b580      	push	{r7, lr}
 8003860:	b084      	sub	sp, #16
 8003862:	af00      	add	r7, sp, #0
 8003864:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8003866:	687b      	ldr	r3, [r7, #4]
 8003868:	681b      	ldr	r3, [r3, #0]
 800386a:	60fb      	str	r3, [r7, #12]

  __HAL_LOCK(hpcd);
 800386c:	687b      	ldr	r3, [r7, #4]
 800386e:	f893 3494 	ldrb.w	r3, [r3, #1172]	; 0x494
 8003872:	2b01      	cmp	r3, #1
 8003874:	d101      	bne.n	800387a <HAL_PCD_Start+0x1c>
 8003876:	2302      	movs	r3, #2
 8003878:	e022      	b.n	80038c0 <HAL_PCD_Start+0x62>
 800387a:	687b      	ldr	r3, [r7, #4]
 800387c:	2201      	movs	r2, #1
 800387e:	f883 2494 	strb.w	r2, [r3, #1172]	; 0x494

  if (((USBx->GUSBCFG & USB_OTG_GUSBCFG_PHYSEL) != 0U) &&
 8003882:	68fb      	ldr	r3, [r7, #12]
 8003884:	68db      	ldr	r3, [r3, #12]
 8003886:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800388a:	2b00      	cmp	r3, #0
 800388c:	d009      	beq.n	80038a2 <HAL_PCD_Start+0x44>
      (hpcd->Init.battery_charging_enable == 1U))
 800388e:	687b      	ldr	r3, [r7, #4]
 8003890:	7b5b      	ldrb	r3, [r3, #13]
  if (((USBx->GUSBCFG & USB_OTG_GUSBCFG_PHYSEL) != 0U) &&
 8003892:	2b01      	cmp	r3, #1
 8003894:	d105      	bne.n	80038a2 <HAL_PCD_Start+0x44>
  {
    /* Enable USB Transceiver */
    USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 8003896:	68fb      	ldr	r3, [r7, #12]
 8003898:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800389a:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 800389e:	68fb      	ldr	r3, [r7, #12]
 80038a0:	639a      	str	r2, [r3, #56]	; 0x38
  }

  __HAL_PCD_ENABLE(hpcd);
 80038a2:	687b      	ldr	r3, [r7, #4]
 80038a4:	681b      	ldr	r3, [r3, #0]
 80038a6:	4618      	mov	r0, r3
 80038a8:	f002 fede 	bl	8006668 <USB_EnableGlobalInt>
  (void)USB_DevConnect(hpcd->Instance);
 80038ac:	687b      	ldr	r3, [r7, #4]
 80038ae:	681b      	ldr	r3, [r3, #0]
 80038b0:	4618      	mov	r0, r3
 80038b2:	f003 ff85 	bl	80077c0 <USB_DevConnect>
  __HAL_UNLOCK(hpcd);
 80038b6:	687b      	ldr	r3, [r7, #4]
 80038b8:	2200      	movs	r2, #0
 80038ba:	f883 2494 	strb.w	r2, [r3, #1172]	; 0x494

  return HAL_OK;
 80038be:	2300      	movs	r3, #0
}
 80038c0:	4618      	mov	r0, r3
 80038c2:	3710      	adds	r7, #16
 80038c4:	46bd      	mov	sp, r7
 80038c6:	bd80      	pop	{r7, pc}

080038c8 <HAL_PCD_IRQHandler>:
  * @brief  Handles PCD interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
void HAL_PCD_IRQHandler(PCD_HandleTypeDef *hpcd)
{
 80038c8:	b590      	push	{r4, r7, lr}
 80038ca:	b08d      	sub	sp, #52	; 0x34
 80038cc:	af00      	add	r7, sp, #0
 80038ce:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 80038d0:	687b      	ldr	r3, [r7, #4]
 80038d2:	681b      	ldr	r3, [r3, #0]
 80038d4:	623b      	str	r3, [r7, #32]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80038d6:	6a3b      	ldr	r3, [r7, #32]
 80038d8:	61fb      	str	r3, [r7, #28]
  uint32_t epnum;
  uint32_t fifoemptymsk;
  uint32_t RegVal;

  /* ensure that we are in device mode */
  if (USB_GetMode(hpcd->Instance) == USB_OTG_MODE_DEVICE)
 80038da:	687b      	ldr	r3, [r7, #4]
 80038dc:	681b      	ldr	r3, [r3, #0]
 80038de:	4618      	mov	r0, r3
 80038e0:	f004 f843 	bl	800796a <USB_GetMode>
 80038e4:	4603      	mov	r3, r0
 80038e6:	2b00      	cmp	r3, #0
 80038e8:	f040 848c 	bne.w	8004204 <HAL_PCD_IRQHandler+0x93c>
  {
    /* avoid spurious interrupt */
    if (__HAL_PCD_IS_INVALID_INTERRUPT(hpcd))
 80038ec:	687b      	ldr	r3, [r7, #4]
 80038ee:	681b      	ldr	r3, [r3, #0]
 80038f0:	4618      	mov	r0, r3
 80038f2:	f003 ffa7 	bl	8007844 <USB_ReadInterrupts>
 80038f6:	4603      	mov	r3, r0
 80038f8:	2b00      	cmp	r3, #0
 80038fa:	f000 8482 	beq.w	8004202 <HAL_PCD_IRQHandler+0x93a>
    {
      return;
    }

    /* store current frame number */
    hpcd->FrameNumber = (USBx_DEVICE->DSTS & USB_OTG_DSTS_FNSOF_Msk) >> USB_OTG_DSTS_FNSOF_Pos;
 80038fe:	69fb      	ldr	r3, [r7, #28]
 8003900:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003904:	689b      	ldr	r3, [r3, #8]
 8003906:	0a1b      	lsrs	r3, r3, #8
 8003908:	f3c3 020d 	ubfx	r2, r3, #0, #14
 800390c:	687b      	ldr	r3, [r7, #4]
 800390e:	f8c3 24d4 	str.w	r2, [r3, #1236]	; 0x4d4

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_MMIS))
 8003912:	687b      	ldr	r3, [r7, #4]
 8003914:	681b      	ldr	r3, [r3, #0]
 8003916:	4618      	mov	r0, r3
 8003918:	f003 ff94 	bl	8007844 <USB_ReadInterrupts>
 800391c:	4603      	mov	r3, r0
 800391e:	f003 0302 	and.w	r3, r3, #2
 8003922:	2b02      	cmp	r3, #2
 8003924:	d107      	bne.n	8003936 <HAL_PCD_IRQHandler+0x6e>
    {
      /* incorrect mode, acknowledge the interrupt */
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_MMIS);
 8003926:	687b      	ldr	r3, [r7, #4]
 8003928:	681b      	ldr	r3, [r3, #0]
 800392a:	695a      	ldr	r2, [r3, #20]
 800392c:	687b      	ldr	r3, [r7, #4]
 800392e:	681b      	ldr	r3, [r3, #0]
 8003930:	f002 0202 	and.w	r2, r2, #2
 8003934:	615a      	str	r2, [r3, #20]
    }

    /* Handle RxQLevel Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_RXFLVL))
 8003936:	687b      	ldr	r3, [r7, #4]
 8003938:	681b      	ldr	r3, [r3, #0]
 800393a:	4618      	mov	r0, r3
 800393c:	f003 ff82 	bl	8007844 <USB_ReadInterrupts>
 8003940:	4603      	mov	r3, r0
 8003942:	f003 0310 	and.w	r3, r3, #16
 8003946:	2b10      	cmp	r3, #16
 8003948:	d161      	bne.n	8003a0e <HAL_PCD_IRQHandler+0x146>
    {
      USB_MASK_INTERRUPT(hpcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 800394a:	687b      	ldr	r3, [r7, #4]
 800394c:	681b      	ldr	r3, [r3, #0]
 800394e:	699a      	ldr	r2, [r3, #24]
 8003950:	687b      	ldr	r3, [r7, #4]
 8003952:	681b      	ldr	r3, [r3, #0]
 8003954:	f022 0210 	bic.w	r2, r2, #16
 8003958:	619a      	str	r2, [r3, #24]

      RegVal = USBx->GRXSTSP;
 800395a:	6a3b      	ldr	r3, [r7, #32]
 800395c:	6a1b      	ldr	r3, [r3, #32]
 800395e:	61bb      	str	r3, [r7, #24]

      ep = &hpcd->OUT_ep[RegVal & USB_OTG_GRXSTSP_EPNUM];
 8003960:	69bb      	ldr	r3, [r7, #24]
 8003962:	f003 020f 	and.w	r2, r3, #15
 8003966:	4613      	mov	r3, r2
 8003968:	00db      	lsls	r3, r3, #3
 800396a:	4413      	add	r3, r2
 800396c:	009b      	lsls	r3, r3, #2
 800396e:	f503 7314 	add.w	r3, r3, #592	; 0x250
 8003972:	687a      	ldr	r2, [r7, #4]
 8003974:	4413      	add	r3, r2
 8003976:	3304      	adds	r3, #4
 8003978:	617b      	str	r3, [r7, #20]

      if (((RegVal & USB_OTG_GRXSTSP_PKTSTS) >> 17) ==  STS_DATA_UPDT)
 800397a:	69bb      	ldr	r3, [r7, #24]
 800397c:	0c5b      	lsrs	r3, r3, #17
 800397e:	f003 030f 	and.w	r3, r3, #15
 8003982:	2b02      	cmp	r3, #2
 8003984:	d124      	bne.n	80039d0 <HAL_PCD_IRQHandler+0x108>
      {
        if ((RegVal & USB_OTG_GRXSTSP_BCNT) != 0U)
 8003986:	69ba      	ldr	r2, [r7, #24]
 8003988:	f647 73f0 	movw	r3, #32752	; 0x7ff0
 800398c:	4013      	ands	r3, r2
 800398e:	2b00      	cmp	r3, #0
 8003990:	d035      	beq.n	80039fe <HAL_PCD_IRQHandler+0x136>
        {
          (void)USB_ReadPacket(USBx, ep->xfer_buff,
 8003992:	697b      	ldr	r3, [r7, #20]
 8003994:	68d9      	ldr	r1, [r3, #12]
                               (uint16_t)((RegVal & USB_OTG_GRXSTSP_BCNT) >> 4));
 8003996:	69bb      	ldr	r3, [r7, #24]
 8003998:	091b      	lsrs	r3, r3, #4
 800399a:	b29b      	uxth	r3, r3
          (void)USB_ReadPacket(USBx, ep->xfer_buff,
 800399c:	f3c3 030a 	ubfx	r3, r3, #0, #11
 80039a0:	b29b      	uxth	r3, r3
 80039a2:	461a      	mov	r2, r3
 80039a4:	6a38      	ldr	r0, [r7, #32]
 80039a6:	f003 fdb9 	bl	800751c <USB_ReadPacket>

          ep->xfer_buff += (RegVal & USB_OTG_GRXSTSP_BCNT) >> 4;
 80039aa:	697b      	ldr	r3, [r7, #20]
 80039ac:	68da      	ldr	r2, [r3, #12]
 80039ae:	69bb      	ldr	r3, [r7, #24]
 80039b0:	091b      	lsrs	r3, r3, #4
 80039b2:	f3c3 030a 	ubfx	r3, r3, #0, #11
 80039b6:	441a      	add	r2, r3
 80039b8:	697b      	ldr	r3, [r7, #20]
 80039ba:	60da      	str	r2, [r3, #12]
          ep->xfer_count += (RegVal & USB_OTG_GRXSTSP_BCNT) >> 4;
 80039bc:	697b      	ldr	r3, [r7, #20]
 80039be:	695a      	ldr	r2, [r3, #20]
 80039c0:	69bb      	ldr	r3, [r7, #24]
 80039c2:	091b      	lsrs	r3, r3, #4
 80039c4:	f3c3 030a 	ubfx	r3, r3, #0, #11
 80039c8:	441a      	add	r2, r3
 80039ca:	697b      	ldr	r3, [r7, #20]
 80039cc:	615a      	str	r2, [r3, #20]
 80039ce:	e016      	b.n	80039fe <HAL_PCD_IRQHandler+0x136>
        }
      }
      else if (((RegVal & USB_OTG_GRXSTSP_PKTSTS) >> 17) == STS_SETUP_UPDT)
 80039d0:	69bb      	ldr	r3, [r7, #24]
 80039d2:	0c5b      	lsrs	r3, r3, #17
 80039d4:	f003 030f 	and.w	r3, r3, #15
 80039d8:	2b06      	cmp	r3, #6
 80039da:	d110      	bne.n	80039fe <HAL_PCD_IRQHandler+0x136>
      {
        (void)USB_ReadPacket(USBx, (uint8_t *)hpcd->Setup, 8U);
 80039dc:	687b      	ldr	r3, [r7, #4]
 80039de:	f203 439c 	addw	r3, r3, #1180	; 0x49c
 80039e2:	2208      	movs	r2, #8
 80039e4:	4619      	mov	r1, r3
 80039e6:	6a38      	ldr	r0, [r7, #32]
 80039e8:	f003 fd98 	bl	800751c <USB_ReadPacket>
        ep->xfer_count += (RegVal & USB_OTG_GRXSTSP_BCNT) >> 4;
 80039ec:	697b      	ldr	r3, [r7, #20]
 80039ee:	695a      	ldr	r2, [r3, #20]
 80039f0:	69bb      	ldr	r3, [r7, #24]
 80039f2:	091b      	lsrs	r3, r3, #4
 80039f4:	f3c3 030a 	ubfx	r3, r3, #0, #11
 80039f8:	441a      	add	r2, r3
 80039fa:	697b      	ldr	r3, [r7, #20]
 80039fc:	615a      	str	r2, [r3, #20]
      else
      {
        /* ... */
      }

      USB_UNMASK_INTERRUPT(hpcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 80039fe:	687b      	ldr	r3, [r7, #4]
 8003a00:	681b      	ldr	r3, [r3, #0]
 8003a02:	699a      	ldr	r2, [r3, #24]
 8003a04:	687b      	ldr	r3, [r7, #4]
 8003a06:	681b      	ldr	r3, [r3, #0]
 8003a08:	f042 0210 	orr.w	r2, r2, #16
 8003a0c:	619a      	str	r2, [r3, #24]
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_OEPINT))
 8003a0e:	687b      	ldr	r3, [r7, #4]
 8003a10:	681b      	ldr	r3, [r3, #0]
 8003a12:	4618      	mov	r0, r3
 8003a14:	f003 ff16 	bl	8007844 <USB_ReadInterrupts>
 8003a18:	4603      	mov	r3, r0
 8003a1a:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8003a1e:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 8003a22:	f040 80a7 	bne.w	8003b74 <HAL_PCD_IRQHandler+0x2ac>
    {
      epnum = 0U;
 8003a26:	2300      	movs	r3, #0
 8003a28:	627b      	str	r3, [r7, #36]	; 0x24

      /* Read in the device interrupt bits */
      ep_intr = USB_ReadDevAllOutEpInterrupt(hpcd->Instance);
 8003a2a:	687b      	ldr	r3, [r7, #4]
 8003a2c:	681b      	ldr	r3, [r3, #0]
 8003a2e:	4618      	mov	r0, r3
 8003a30:	f003 ff1b 	bl	800786a <USB_ReadDevAllOutEpInterrupt>
 8003a34:	62b8      	str	r0, [r7, #40]	; 0x28

      while (ep_intr != 0U)
 8003a36:	e099      	b.n	8003b6c <HAL_PCD_IRQHandler+0x2a4>
      {
        if ((ep_intr & 0x1U) != 0U)
 8003a38:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003a3a:	f003 0301 	and.w	r3, r3, #1
 8003a3e:	2b00      	cmp	r3, #0
 8003a40:	f000 808e 	beq.w	8003b60 <HAL_PCD_IRQHandler+0x298>
        {
          epint = USB_ReadDevOutEPInterrupt(hpcd->Instance, (uint8_t)epnum);
 8003a44:	687b      	ldr	r3, [r7, #4]
 8003a46:	681b      	ldr	r3, [r3, #0]
 8003a48:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003a4a:	b2d2      	uxtb	r2, r2
 8003a4c:	4611      	mov	r1, r2
 8003a4e:	4618      	mov	r0, r3
 8003a50:	f003 ff3f 	bl	80078d2 <USB_ReadDevOutEPInterrupt>
 8003a54:	6138      	str	r0, [r7, #16]

          if ((epint & USB_OTG_DOEPINT_XFRC) == USB_OTG_DOEPINT_XFRC)
 8003a56:	693b      	ldr	r3, [r7, #16]
 8003a58:	f003 0301 	and.w	r3, r3, #1
 8003a5c:	2b00      	cmp	r3, #0
 8003a5e:	d00c      	beq.n	8003a7a <HAL_PCD_IRQHandler+0x1b2>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_XFRC);
 8003a60:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003a62:	015a      	lsls	r2, r3, #5
 8003a64:	69fb      	ldr	r3, [r7, #28]
 8003a66:	4413      	add	r3, r2
 8003a68:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003a6c:	461a      	mov	r2, r3
 8003a6e:	2301      	movs	r3, #1
 8003a70:	6093      	str	r3, [r2, #8]
            (void)PCD_EP_OutXfrComplete_int(hpcd, epnum);
 8003a72:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8003a74:	6878      	ldr	r0, [r7, #4]
 8003a76:	f000 fea3 	bl	80047c0 <PCD_EP_OutXfrComplete_int>
          }

          if ((epint & USB_OTG_DOEPINT_STUP) == USB_OTG_DOEPINT_STUP)
 8003a7a:	693b      	ldr	r3, [r7, #16]
 8003a7c:	f003 0308 	and.w	r3, r3, #8
 8003a80:	2b00      	cmp	r3, #0
 8003a82:	d00c      	beq.n	8003a9e <HAL_PCD_IRQHandler+0x1d6>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STUP);
 8003a84:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003a86:	015a      	lsls	r2, r3, #5
 8003a88:	69fb      	ldr	r3, [r7, #28]
 8003a8a:	4413      	add	r3, r2
 8003a8c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003a90:	461a      	mov	r2, r3
 8003a92:	2308      	movs	r3, #8
 8003a94:	6093      	str	r3, [r2, #8]
            /* Class B setup phase done for previous decoded setup */
            (void)PCD_EP_OutSetupPacket_int(hpcd, epnum);
 8003a96:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8003a98:	6878      	ldr	r0, [r7, #4]
 8003a9a:	f000 ff79 	bl	8004990 <PCD_EP_OutSetupPacket_int>
          }

          if ((epint & USB_OTG_DOEPINT_OTEPDIS) == USB_OTG_DOEPINT_OTEPDIS)
 8003a9e:	693b      	ldr	r3, [r7, #16]
 8003aa0:	f003 0310 	and.w	r3, r3, #16
 8003aa4:	2b00      	cmp	r3, #0
 8003aa6:	d008      	beq.n	8003aba <HAL_PCD_IRQHandler+0x1f2>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPDIS);
 8003aa8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003aaa:	015a      	lsls	r2, r3, #5
 8003aac:	69fb      	ldr	r3, [r7, #28]
 8003aae:	4413      	add	r3, r2
 8003ab0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003ab4:	461a      	mov	r2, r3
 8003ab6:	2310      	movs	r3, #16
 8003ab8:	6093      	str	r3, [r2, #8]
          }

          /* Clear OUT Endpoint disable interrupt */
          if ((epint & USB_OTG_DOEPINT_EPDISD) == USB_OTG_DOEPINT_EPDISD)
 8003aba:	693b      	ldr	r3, [r7, #16]
 8003abc:	f003 0302 	and.w	r3, r3, #2
 8003ac0:	2b00      	cmp	r3, #0
 8003ac2:	d030      	beq.n	8003b26 <HAL_PCD_IRQHandler+0x25e>
          {
            if ((USBx->GINTSTS & USB_OTG_GINTSTS_BOUTNAKEFF) == USB_OTG_GINTSTS_BOUTNAKEFF)
 8003ac4:	6a3b      	ldr	r3, [r7, #32]
 8003ac6:	695b      	ldr	r3, [r3, #20]
 8003ac8:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003acc:	2b80      	cmp	r3, #128	; 0x80
 8003ace:	d109      	bne.n	8003ae4 <HAL_PCD_IRQHandler+0x21c>
            {
              USBx_DEVICE->DCTL |= USB_OTG_DCTL_CGONAK;
 8003ad0:	69fb      	ldr	r3, [r7, #28]
 8003ad2:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003ad6:	685b      	ldr	r3, [r3, #4]
 8003ad8:	69fa      	ldr	r2, [r7, #28]
 8003ada:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8003ade:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8003ae2:	6053      	str	r3, [r2, #4]
            }

            ep = &hpcd->OUT_ep[epnum];
 8003ae4:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003ae6:	4613      	mov	r3, r2
 8003ae8:	00db      	lsls	r3, r3, #3
 8003aea:	4413      	add	r3, r2
 8003aec:	009b      	lsls	r3, r3, #2
 8003aee:	f503 7314 	add.w	r3, r3, #592	; 0x250
 8003af2:	687a      	ldr	r2, [r7, #4]
 8003af4:	4413      	add	r3, r2
 8003af6:	3304      	adds	r3, #4
 8003af8:	617b      	str	r3, [r7, #20]

            if (ep->is_iso_incomplete == 1U)
 8003afa:	697b      	ldr	r3, [r7, #20]
 8003afc:	78db      	ldrb	r3, [r3, #3]
 8003afe:	2b01      	cmp	r3, #1
 8003b00:	d108      	bne.n	8003b14 <HAL_PCD_IRQHandler+0x24c>
            {
              ep->is_iso_incomplete = 0U;
 8003b02:	697b      	ldr	r3, [r7, #20]
 8003b04:	2200      	movs	r2, #0
 8003b06:	70da      	strb	r2, [r3, #3]

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
              hpcd->ISOOUTIncompleteCallback(hpcd, (uint8_t)epnum);
#else
              HAL_PCD_ISOOUTIncompleteCallback(hpcd, (uint8_t)epnum);
 8003b08:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003b0a:	b2db      	uxtb	r3, r3
 8003b0c:	4619      	mov	r1, r3
 8003b0e:	6878      	ldr	r0, [r7, #4]
 8003b10:	f014 f91c 	bl	8017d4c <HAL_PCD_ISOOUTIncompleteCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
            }

            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_EPDISD);
 8003b14:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003b16:	015a      	lsls	r2, r3, #5
 8003b18:	69fb      	ldr	r3, [r7, #28]
 8003b1a:	4413      	add	r3, r2
 8003b1c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003b20:	461a      	mov	r2, r3
 8003b22:	2302      	movs	r3, #2
 8003b24:	6093      	str	r3, [r2, #8]
          }

          /* Clear Status Phase Received interrupt */
          if ((epint & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR)
 8003b26:	693b      	ldr	r3, [r7, #16]
 8003b28:	f003 0320 	and.w	r3, r3, #32
 8003b2c:	2b00      	cmp	r3, #0
 8003b2e:	d008      	beq.n	8003b42 <HAL_PCD_IRQHandler+0x27a>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 8003b30:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003b32:	015a      	lsls	r2, r3, #5
 8003b34:	69fb      	ldr	r3, [r7, #28]
 8003b36:	4413      	add	r3, r2
 8003b38:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003b3c:	461a      	mov	r2, r3
 8003b3e:	2320      	movs	r3, #32
 8003b40:	6093      	str	r3, [r2, #8]
          }

          /* Clear OUT NAK interrupt */
          if ((epint & USB_OTG_DOEPINT_NAK) == USB_OTG_DOEPINT_NAK)
 8003b42:	693b      	ldr	r3, [r7, #16]
 8003b44:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8003b48:	2b00      	cmp	r3, #0
 8003b4a:	d009      	beq.n	8003b60 <HAL_PCD_IRQHandler+0x298>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_NAK);
 8003b4c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003b4e:	015a      	lsls	r2, r3, #5
 8003b50:	69fb      	ldr	r3, [r7, #28]
 8003b52:	4413      	add	r3, r2
 8003b54:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003b58:	461a      	mov	r2, r3
 8003b5a:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8003b5e:	6093      	str	r3, [r2, #8]
          }
        }
        epnum++;
 8003b60:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003b62:	3301      	adds	r3, #1
 8003b64:	627b      	str	r3, [r7, #36]	; 0x24
        ep_intr >>= 1U;
 8003b66:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003b68:	085b      	lsrs	r3, r3, #1
 8003b6a:	62bb      	str	r3, [r7, #40]	; 0x28
      while (ep_intr != 0U)
 8003b6c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003b6e:	2b00      	cmp	r3, #0
 8003b70:	f47f af62 	bne.w	8003a38 <HAL_PCD_IRQHandler+0x170>
      }
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_IEPINT))
 8003b74:	687b      	ldr	r3, [r7, #4]
 8003b76:	681b      	ldr	r3, [r3, #0]
 8003b78:	4618      	mov	r0, r3
 8003b7a:	f003 fe63 	bl	8007844 <USB_ReadInterrupts>
 8003b7e:	4603      	mov	r3, r0
 8003b80:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8003b84:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8003b88:	f040 80db 	bne.w	8003d42 <HAL_PCD_IRQHandler+0x47a>
    {
      /* Read in the device interrupt bits */
      ep_intr = USB_ReadDevAllInEpInterrupt(hpcd->Instance);
 8003b8c:	687b      	ldr	r3, [r7, #4]
 8003b8e:	681b      	ldr	r3, [r3, #0]
 8003b90:	4618      	mov	r0, r3
 8003b92:	f003 fe84 	bl	800789e <USB_ReadDevAllInEpInterrupt>
 8003b96:	62b8      	str	r0, [r7, #40]	; 0x28

      epnum = 0U;
 8003b98:	2300      	movs	r3, #0
 8003b9a:	627b      	str	r3, [r7, #36]	; 0x24

      while (ep_intr != 0U)
 8003b9c:	e0cd      	b.n	8003d3a <HAL_PCD_IRQHandler+0x472>
      {
        if ((ep_intr & 0x1U) != 0U) /* In ITR */
 8003b9e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003ba0:	f003 0301 	and.w	r3, r3, #1
 8003ba4:	2b00      	cmp	r3, #0
 8003ba6:	f000 80c2 	beq.w	8003d2e <HAL_PCD_IRQHandler+0x466>
        {
          epint = USB_ReadDevInEPInterrupt(hpcd->Instance, (uint8_t)epnum);
 8003baa:	687b      	ldr	r3, [r7, #4]
 8003bac:	681b      	ldr	r3, [r3, #0]
 8003bae:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003bb0:	b2d2      	uxtb	r2, r2
 8003bb2:	4611      	mov	r1, r2
 8003bb4:	4618      	mov	r0, r3
 8003bb6:	f003 feaa 	bl	800790e <USB_ReadDevInEPInterrupt>
 8003bba:	6138      	str	r0, [r7, #16]

          if ((epint & USB_OTG_DIEPINT_XFRC) == USB_OTG_DIEPINT_XFRC)
 8003bbc:	693b      	ldr	r3, [r7, #16]
 8003bbe:	f003 0301 	and.w	r3, r3, #1
 8003bc2:	2b00      	cmp	r3, #0
 8003bc4:	d057      	beq.n	8003c76 <HAL_PCD_IRQHandler+0x3ae>
          {
            fifoemptymsk = (uint32_t)(0x1UL << (epnum & EP_ADDR_MSK));
 8003bc6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003bc8:	f003 030f 	and.w	r3, r3, #15
 8003bcc:	2201      	movs	r2, #1
 8003bce:	fa02 f303 	lsl.w	r3, r2, r3
 8003bd2:	60fb      	str	r3, [r7, #12]
            USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 8003bd4:	69fb      	ldr	r3, [r7, #28]
 8003bd6:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003bda:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8003bdc:	68fb      	ldr	r3, [r7, #12]
 8003bde:	43db      	mvns	r3, r3
 8003be0:	69f9      	ldr	r1, [r7, #28]
 8003be2:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8003be6:	4013      	ands	r3, r2
 8003be8:	634b      	str	r3, [r1, #52]	; 0x34

            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_XFRC);
 8003bea:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003bec:	015a      	lsls	r2, r3, #5
 8003bee:	69fb      	ldr	r3, [r7, #28]
 8003bf0:	4413      	add	r3, r2
 8003bf2:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003bf6:	461a      	mov	r2, r3
 8003bf8:	2301      	movs	r3, #1
 8003bfa:	6093      	str	r3, [r2, #8]

            if (hpcd->Init.dma_enable == 1U)
 8003bfc:	687b      	ldr	r3, [r7, #4]
 8003bfe:	799b      	ldrb	r3, [r3, #6]
 8003c00:	2b01      	cmp	r3, #1
 8003c02:	d132      	bne.n	8003c6a <HAL_PCD_IRQHandler+0x3a2>
            {
              hpcd->IN_ep[epnum].xfer_buff += hpcd->IN_ep[epnum].maxpacket;
 8003c04:	6879      	ldr	r1, [r7, #4]
 8003c06:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003c08:	4613      	mov	r3, r2
 8003c0a:	00db      	lsls	r3, r3, #3
 8003c0c:	4413      	add	r3, r2
 8003c0e:	009b      	lsls	r3, r3, #2
 8003c10:	440b      	add	r3, r1
 8003c12:	3320      	adds	r3, #32
 8003c14:	6819      	ldr	r1, [r3, #0]
 8003c16:	6878      	ldr	r0, [r7, #4]
 8003c18:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003c1a:	4613      	mov	r3, r2
 8003c1c:	00db      	lsls	r3, r3, #3
 8003c1e:	4413      	add	r3, r2
 8003c20:	009b      	lsls	r3, r3, #2
 8003c22:	4403      	add	r3, r0
 8003c24:	331c      	adds	r3, #28
 8003c26:	681b      	ldr	r3, [r3, #0]
 8003c28:	4419      	add	r1, r3
 8003c2a:	6878      	ldr	r0, [r7, #4]
 8003c2c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003c2e:	4613      	mov	r3, r2
 8003c30:	00db      	lsls	r3, r3, #3
 8003c32:	4413      	add	r3, r2
 8003c34:	009b      	lsls	r3, r3, #2
 8003c36:	4403      	add	r3, r0
 8003c38:	3320      	adds	r3, #32
 8003c3a:	6019      	str	r1, [r3, #0]

              /* this is ZLP, so prepare EP0 for next setup */
              if ((epnum == 0U) && (hpcd->IN_ep[epnum].xfer_len == 0U))
 8003c3c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003c3e:	2b00      	cmp	r3, #0
 8003c40:	d113      	bne.n	8003c6a <HAL_PCD_IRQHandler+0x3a2>
 8003c42:	6879      	ldr	r1, [r7, #4]
 8003c44:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003c46:	4613      	mov	r3, r2
 8003c48:	00db      	lsls	r3, r3, #3
 8003c4a:	4413      	add	r3, r2
 8003c4c:	009b      	lsls	r3, r3, #2
 8003c4e:	440b      	add	r3, r1
 8003c50:	3324      	adds	r3, #36	; 0x24
 8003c52:	681b      	ldr	r3, [r3, #0]
 8003c54:	2b00      	cmp	r3, #0
 8003c56:	d108      	bne.n	8003c6a <HAL_PCD_IRQHandler+0x3a2>
              {
                /* prepare to rx more setup packets */
                (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 8003c58:	687b      	ldr	r3, [r7, #4]
 8003c5a:	6818      	ldr	r0, [r3, #0]
 8003c5c:	687b      	ldr	r3, [r7, #4]
 8003c5e:	f203 439c 	addw	r3, r3, #1180	; 0x49c
 8003c62:	461a      	mov	r2, r3
 8003c64:	2101      	movs	r1, #1
 8003c66:	f003 feb1 	bl	80079cc <USB_EP0_OutStart>
            }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
            hpcd->DataInStageCallback(hpcd, (uint8_t)epnum);
#else
            HAL_PCD_DataInStageCallback(hpcd, (uint8_t)epnum);
 8003c6a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003c6c:	b2db      	uxtb	r3, r3
 8003c6e:	4619      	mov	r1, r3
 8003c70:	6878      	ldr	r0, [r7, #4]
 8003c72:	f013 ffe6 	bl	8017c42 <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
          }
          if ((epint & USB_OTG_DIEPINT_TOC) == USB_OTG_DIEPINT_TOC)
 8003c76:	693b      	ldr	r3, [r7, #16]
 8003c78:	f003 0308 	and.w	r3, r3, #8
 8003c7c:	2b00      	cmp	r3, #0
 8003c7e:	d008      	beq.n	8003c92 <HAL_PCD_IRQHandler+0x3ca>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_TOC);
 8003c80:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003c82:	015a      	lsls	r2, r3, #5
 8003c84:	69fb      	ldr	r3, [r7, #28]
 8003c86:	4413      	add	r3, r2
 8003c88:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003c8c:	461a      	mov	r2, r3
 8003c8e:	2308      	movs	r3, #8
 8003c90:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_ITTXFE) == USB_OTG_DIEPINT_ITTXFE)
 8003c92:	693b      	ldr	r3, [r7, #16]
 8003c94:	f003 0310 	and.w	r3, r3, #16
 8003c98:	2b00      	cmp	r3, #0
 8003c9a:	d008      	beq.n	8003cae <HAL_PCD_IRQHandler+0x3e6>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_ITTXFE);
 8003c9c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003c9e:	015a      	lsls	r2, r3, #5
 8003ca0:	69fb      	ldr	r3, [r7, #28]
 8003ca2:	4413      	add	r3, r2
 8003ca4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003ca8:	461a      	mov	r2, r3
 8003caa:	2310      	movs	r3, #16
 8003cac:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_INEPNE) == USB_OTG_DIEPINT_INEPNE)
 8003cae:	693b      	ldr	r3, [r7, #16]
 8003cb0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003cb4:	2b00      	cmp	r3, #0
 8003cb6:	d008      	beq.n	8003cca <HAL_PCD_IRQHandler+0x402>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_INEPNE);
 8003cb8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003cba:	015a      	lsls	r2, r3, #5
 8003cbc:	69fb      	ldr	r3, [r7, #28]
 8003cbe:	4413      	add	r3, r2
 8003cc0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003cc4:	461a      	mov	r2, r3
 8003cc6:	2340      	movs	r3, #64	; 0x40
 8003cc8:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_EPDISD) == USB_OTG_DIEPINT_EPDISD)
 8003cca:	693b      	ldr	r3, [r7, #16]
 8003ccc:	f003 0302 	and.w	r3, r3, #2
 8003cd0:	2b00      	cmp	r3, #0
 8003cd2:	d023      	beq.n	8003d1c <HAL_PCD_IRQHandler+0x454>
          {
            (void)USB_FlushTxFifo(USBx, epnum);
 8003cd4:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8003cd6:	6a38      	ldr	r0, [r7, #32]
 8003cd8:	f002 fe98 	bl	8006a0c <USB_FlushTxFifo>

            ep = &hpcd->IN_ep[epnum];
 8003cdc:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003cde:	4613      	mov	r3, r2
 8003ce0:	00db      	lsls	r3, r3, #3
 8003ce2:	4413      	add	r3, r2
 8003ce4:	009b      	lsls	r3, r3, #2
 8003ce6:	3310      	adds	r3, #16
 8003ce8:	687a      	ldr	r2, [r7, #4]
 8003cea:	4413      	add	r3, r2
 8003cec:	3304      	adds	r3, #4
 8003cee:	617b      	str	r3, [r7, #20]

            if (ep->is_iso_incomplete == 1U)
 8003cf0:	697b      	ldr	r3, [r7, #20]
 8003cf2:	78db      	ldrb	r3, [r3, #3]
 8003cf4:	2b01      	cmp	r3, #1
 8003cf6:	d108      	bne.n	8003d0a <HAL_PCD_IRQHandler+0x442>
            {
              ep->is_iso_incomplete = 0U;
 8003cf8:	697b      	ldr	r3, [r7, #20]
 8003cfa:	2200      	movs	r2, #0
 8003cfc:	70da      	strb	r2, [r3, #3]

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
              hpcd->ISOINIncompleteCallback(hpcd, (uint8_t)epnum);
#else
              HAL_PCD_ISOINIncompleteCallback(hpcd, (uint8_t)epnum);
 8003cfe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003d00:	b2db      	uxtb	r3, r3
 8003d02:	4619      	mov	r1, r3
 8003d04:	6878      	ldr	r0, [r7, #4]
 8003d06:	f014 f833 	bl	8017d70 <HAL_PCD_ISOINIncompleteCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
            }

            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_EPDISD);
 8003d0a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003d0c:	015a      	lsls	r2, r3, #5
 8003d0e:	69fb      	ldr	r3, [r7, #28]
 8003d10:	4413      	add	r3, r2
 8003d12:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003d16:	461a      	mov	r2, r3
 8003d18:	2302      	movs	r3, #2
 8003d1a:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_TXFE) == USB_OTG_DIEPINT_TXFE)
 8003d1c:	693b      	ldr	r3, [r7, #16]
 8003d1e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003d22:	2b00      	cmp	r3, #0
 8003d24:	d003      	beq.n	8003d2e <HAL_PCD_IRQHandler+0x466>
          {
            (void)PCD_WriteEmptyTxFifo(hpcd, epnum);
 8003d26:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8003d28:	6878      	ldr	r0, [r7, #4]
 8003d2a:	f000 fcbd 	bl	80046a8 <PCD_WriteEmptyTxFifo>
          }
        }
        epnum++;
 8003d2e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003d30:	3301      	adds	r3, #1
 8003d32:	627b      	str	r3, [r7, #36]	; 0x24
        ep_intr >>= 1U;
 8003d34:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003d36:	085b      	lsrs	r3, r3, #1
 8003d38:	62bb      	str	r3, [r7, #40]	; 0x28
      while (ep_intr != 0U)
 8003d3a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003d3c:	2b00      	cmp	r3, #0
 8003d3e:	f47f af2e 	bne.w	8003b9e <HAL_PCD_IRQHandler+0x2d6>
      }
    }

    /* Handle Resume Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_WKUINT))
 8003d42:	687b      	ldr	r3, [r7, #4]
 8003d44:	681b      	ldr	r3, [r3, #0]
 8003d46:	4618      	mov	r0, r3
 8003d48:	f003 fd7c 	bl	8007844 <USB_ReadInterrupts>
 8003d4c:	4603      	mov	r3, r0
 8003d4e:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8003d52:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8003d56:	d122      	bne.n	8003d9e <HAL_PCD_IRQHandler+0x4d6>
    {
      /* Clear the Remote Wake-up Signaling */
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG;
 8003d58:	69fb      	ldr	r3, [r7, #28]
 8003d5a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003d5e:	685b      	ldr	r3, [r3, #4]
 8003d60:	69fa      	ldr	r2, [r7, #28]
 8003d62:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8003d66:	f023 0301 	bic.w	r3, r3, #1
 8003d6a:	6053      	str	r3, [r2, #4]

      if (hpcd->LPM_State == LPM_L1)
 8003d6c:	687b      	ldr	r3, [r7, #4]
 8003d6e:	f893 34cc 	ldrb.w	r3, [r3, #1228]	; 0x4cc
 8003d72:	2b01      	cmp	r3, #1
 8003d74:	d108      	bne.n	8003d88 <HAL_PCD_IRQHandler+0x4c0>
      {
        hpcd->LPM_State = LPM_L0;
 8003d76:	687b      	ldr	r3, [r7, #4]
 8003d78:	2200      	movs	r2, #0
 8003d7a:	f883 24cc 	strb.w	r2, [r3, #1228]	; 0x4cc

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->LPMCallback(hpcd, PCD_LPM_L0_ACTIVE);
#else
        HAL_PCDEx_LPM_Callback(hpcd, PCD_LPM_L0_ACTIVE);
 8003d7e:	2100      	movs	r1, #0
 8003d80:	6878      	ldr	r0, [r7, #4]
 8003d82:	f000 fea3 	bl	8004acc <HAL_PCDEx_LPM_Callback>
 8003d86:	e002      	b.n	8003d8e <HAL_PCD_IRQHandler+0x4c6>
      else
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->ResumeCallback(hpcd);
#else
        HAL_PCD_ResumeCallback(hpcd);
 8003d88:	6878      	ldr	r0, [r7, #4]
 8003d8a:	f013 ffd1 	bl	8017d30 <HAL_PCD_ResumeCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_WKUINT);
 8003d8e:	687b      	ldr	r3, [r7, #4]
 8003d90:	681b      	ldr	r3, [r3, #0]
 8003d92:	695a      	ldr	r2, [r3, #20]
 8003d94:	687b      	ldr	r3, [r7, #4]
 8003d96:	681b      	ldr	r3, [r3, #0]
 8003d98:	f002 4200 	and.w	r2, r2, #2147483648	; 0x80000000
 8003d9c:	615a      	str	r2, [r3, #20]
    }

    /* Handle Suspend Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_USBSUSP))
 8003d9e:	687b      	ldr	r3, [r7, #4]
 8003da0:	681b      	ldr	r3, [r3, #0]
 8003da2:	4618      	mov	r0, r3
 8003da4:	f003 fd4e 	bl	8007844 <USB_ReadInterrupts>
 8003da8:	4603      	mov	r3, r0
 8003daa:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8003dae:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8003db2:	d112      	bne.n	8003dda <HAL_PCD_IRQHandler+0x512>
    {
      if ((USBx_DEVICE->DSTS & USB_OTG_DSTS_SUSPSTS) == USB_OTG_DSTS_SUSPSTS)
 8003db4:	69fb      	ldr	r3, [r7, #28]
 8003db6:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003dba:	689b      	ldr	r3, [r3, #8]
 8003dbc:	f003 0301 	and.w	r3, r3, #1
 8003dc0:	2b01      	cmp	r3, #1
 8003dc2:	d102      	bne.n	8003dca <HAL_PCD_IRQHandler+0x502>
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->SuspendCallback(hpcd);
#else
        HAL_PCD_SuspendCallback(hpcd);
 8003dc4:	6878      	ldr	r0, [r7, #4]
 8003dc6:	f013 ff8d 	bl	8017ce4 <HAL_PCD_SuspendCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_USBSUSP);
 8003dca:	687b      	ldr	r3, [r7, #4]
 8003dcc:	681b      	ldr	r3, [r3, #0]
 8003dce:	695a      	ldr	r2, [r3, #20]
 8003dd0:	687b      	ldr	r3, [r7, #4]
 8003dd2:	681b      	ldr	r3, [r3, #0]
 8003dd4:	f402 6200 	and.w	r2, r2, #2048	; 0x800
 8003dd8:	615a      	str	r2, [r3, #20]
    }
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) ||
          defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) ||
          defined(STM32F423xx) */
    /* Handle Reset Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_USBRST))
 8003dda:	687b      	ldr	r3, [r7, #4]
 8003ddc:	681b      	ldr	r3, [r3, #0]
 8003dde:	4618      	mov	r0, r3
 8003de0:	f003 fd30 	bl	8007844 <USB_ReadInterrupts>
 8003de4:	4603      	mov	r3, r0
 8003de6:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8003dea:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003dee:	f040 80b7 	bne.w	8003f60 <HAL_PCD_IRQHandler+0x698>
    {
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG;
 8003df2:	69fb      	ldr	r3, [r7, #28]
 8003df4:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003df8:	685b      	ldr	r3, [r3, #4]
 8003dfa:	69fa      	ldr	r2, [r7, #28]
 8003dfc:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8003e00:	f023 0301 	bic.w	r3, r3, #1
 8003e04:	6053      	str	r3, [r2, #4]
      (void)USB_FlushTxFifo(hpcd->Instance, 0x10U);
 8003e06:	687b      	ldr	r3, [r7, #4]
 8003e08:	681b      	ldr	r3, [r3, #0]
 8003e0a:	2110      	movs	r1, #16
 8003e0c:	4618      	mov	r0, r3
 8003e0e:	f002 fdfd 	bl	8006a0c <USB_FlushTxFifo>

      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8003e12:	2300      	movs	r3, #0
 8003e14:	62fb      	str	r3, [r7, #44]	; 0x2c
 8003e16:	e046      	b.n	8003ea6 <HAL_PCD_IRQHandler+0x5de>
      {
        USBx_INEP(i)->DIEPINT = 0xFB7FU;
 8003e18:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003e1a:	015a      	lsls	r2, r3, #5
 8003e1c:	69fb      	ldr	r3, [r7, #28]
 8003e1e:	4413      	add	r3, r2
 8003e20:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003e24:	461a      	mov	r2, r3
 8003e26:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 8003e2a:	6093      	str	r3, [r2, #8]
        USBx_INEP(i)->DIEPCTL &= ~USB_OTG_DIEPCTL_STALL;
 8003e2c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003e2e:	015a      	lsls	r2, r3, #5
 8003e30:	69fb      	ldr	r3, [r7, #28]
 8003e32:	4413      	add	r3, r2
 8003e34:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003e38:	681b      	ldr	r3, [r3, #0]
 8003e3a:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8003e3c:	0151      	lsls	r1, r2, #5
 8003e3e:	69fa      	ldr	r2, [r7, #28]
 8003e40:	440a      	add	r2, r1
 8003e42:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8003e46:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8003e4a:	6013      	str	r3, [r2, #0]
        USBx_OUTEP(i)->DOEPINT = 0xFB7FU;
 8003e4c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003e4e:	015a      	lsls	r2, r3, #5
 8003e50:	69fb      	ldr	r3, [r7, #28]
 8003e52:	4413      	add	r3, r2
 8003e54:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003e58:	461a      	mov	r2, r3
 8003e5a:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 8003e5e:	6093      	str	r3, [r2, #8]
        USBx_OUTEP(i)->DOEPCTL &= ~USB_OTG_DOEPCTL_STALL;
 8003e60:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003e62:	015a      	lsls	r2, r3, #5
 8003e64:	69fb      	ldr	r3, [r7, #28]
 8003e66:	4413      	add	r3, r2
 8003e68:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003e6c:	681b      	ldr	r3, [r3, #0]
 8003e6e:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8003e70:	0151      	lsls	r1, r2, #5
 8003e72:	69fa      	ldr	r2, [r7, #28]
 8003e74:	440a      	add	r2, r1
 8003e76:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8003e7a:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8003e7e:	6013      	str	r3, [r2, #0]
        USBx_OUTEP(i)->DOEPCTL |= USB_OTG_DOEPCTL_SNAK;
 8003e80:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003e82:	015a      	lsls	r2, r3, #5
 8003e84:	69fb      	ldr	r3, [r7, #28]
 8003e86:	4413      	add	r3, r2
 8003e88:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003e8c:	681b      	ldr	r3, [r3, #0]
 8003e8e:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8003e90:	0151      	lsls	r1, r2, #5
 8003e92:	69fa      	ldr	r2, [r7, #28]
 8003e94:	440a      	add	r2, r1
 8003e96:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8003e9a:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 8003e9e:	6013      	str	r3, [r2, #0]
      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8003ea0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003ea2:	3301      	adds	r3, #1
 8003ea4:	62fb      	str	r3, [r7, #44]	; 0x2c
 8003ea6:	687b      	ldr	r3, [r7, #4]
 8003ea8:	791b      	ldrb	r3, [r3, #4]
 8003eaa:	461a      	mov	r2, r3
 8003eac:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003eae:	4293      	cmp	r3, r2
 8003eb0:	d3b2      	bcc.n	8003e18 <HAL_PCD_IRQHandler+0x550>
      }
      USBx_DEVICE->DAINTMSK |= 0x10001U;
 8003eb2:	69fb      	ldr	r3, [r7, #28]
 8003eb4:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003eb8:	69db      	ldr	r3, [r3, #28]
 8003eba:	69fa      	ldr	r2, [r7, #28]
 8003ebc:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8003ec0:	f043 1301 	orr.w	r3, r3, #65537	; 0x10001
 8003ec4:	61d3      	str	r3, [r2, #28]

      if (hpcd->Init.use_dedicated_ep1 != 0U)
 8003ec6:	687b      	ldr	r3, [r7, #4]
 8003ec8:	7bdb      	ldrb	r3, [r3, #15]
 8003eca:	2b00      	cmp	r3, #0
 8003ecc:	d016      	beq.n	8003efc <HAL_PCD_IRQHandler+0x634>
      {
        USBx_DEVICE->DOUTEP1MSK |= USB_OTG_DOEPMSK_STUPM |
 8003ece:	69fb      	ldr	r3, [r7, #28]
 8003ed0:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003ed4:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8003ed8:	69fa      	ldr	r2, [r7, #28]
 8003eda:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8003ede:	f043 030b 	orr.w	r3, r3, #11
 8003ee2:	f8c2 3084 	str.w	r3, [r2, #132]	; 0x84
                                   USB_OTG_DOEPMSK_XFRCM |
                                   USB_OTG_DOEPMSK_EPDM;

        USBx_DEVICE->DINEP1MSK |= USB_OTG_DIEPMSK_TOM |
 8003ee6:	69fb      	ldr	r3, [r7, #28]
 8003ee8:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003eec:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003eee:	69fa      	ldr	r2, [r7, #28]
 8003ef0:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8003ef4:	f043 030b 	orr.w	r3, r3, #11
 8003ef8:	6453      	str	r3, [r2, #68]	; 0x44
 8003efa:	e015      	b.n	8003f28 <HAL_PCD_IRQHandler+0x660>
                                  USB_OTG_DIEPMSK_XFRCM |
                                  USB_OTG_DIEPMSK_EPDM;
      }
      else
      {
        USBx_DEVICE->DOEPMSK |= USB_OTG_DOEPMSK_STUPM |
 8003efc:	69fb      	ldr	r3, [r7, #28]
 8003efe:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003f02:	695b      	ldr	r3, [r3, #20]
 8003f04:	69fa      	ldr	r2, [r7, #28]
 8003f06:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8003f0a:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8003f0e:	f043 032b 	orr.w	r3, r3, #43	; 0x2b
 8003f12:	6153      	str	r3, [r2, #20]
                                USB_OTG_DOEPMSK_XFRCM |
                                USB_OTG_DOEPMSK_EPDM |
                                USB_OTG_DOEPMSK_OTEPSPRM |
                                USB_OTG_DOEPMSK_NAKM;

        USBx_DEVICE->DIEPMSK |= USB_OTG_DIEPMSK_TOM |
 8003f14:	69fb      	ldr	r3, [r7, #28]
 8003f16:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003f1a:	691b      	ldr	r3, [r3, #16]
 8003f1c:	69fa      	ldr	r2, [r7, #28]
 8003f1e:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8003f22:	f043 030b 	orr.w	r3, r3, #11
 8003f26:	6113      	str	r3, [r2, #16]
                                USB_OTG_DIEPMSK_XFRCM |
                                USB_OTG_DIEPMSK_EPDM;
      }

      /* Set Default Address to 0 */
      USBx_DEVICE->DCFG &= ~USB_OTG_DCFG_DAD;
 8003f28:	69fb      	ldr	r3, [r7, #28]
 8003f2a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003f2e:	681b      	ldr	r3, [r3, #0]
 8003f30:	69fa      	ldr	r2, [r7, #28]
 8003f32:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8003f36:	f423 63fe 	bic.w	r3, r3, #2032	; 0x7f0
 8003f3a:	6013      	str	r3, [r2, #0]

      /* setup EP0 to receive SETUP packets */
      (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable,
 8003f3c:	687b      	ldr	r3, [r7, #4]
 8003f3e:	6818      	ldr	r0, [r3, #0]
 8003f40:	687b      	ldr	r3, [r7, #4]
 8003f42:	7999      	ldrb	r1, [r3, #6]
                             (uint8_t *)hpcd->Setup);
 8003f44:	687b      	ldr	r3, [r7, #4]
 8003f46:	f203 439c 	addw	r3, r3, #1180	; 0x49c
      (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable,
 8003f4a:	461a      	mov	r2, r3
 8003f4c:	f003 fd3e 	bl	80079cc <USB_EP0_OutStart>

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_USBRST);
 8003f50:	687b      	ldr	r3, [r7, #4]
 8003f52:	681b      	ldr	r3, [r3, #0]
 8003f54:	695a      	ldr	r2, [r3, #20]
 8003f56:	687b      	ldr	r3, [r7, #4]
 8003f58:	681b      	ldr	r3, [r3, #0]
 8003f5a:	f402 5280 	and.w	r2, r2, #4096	; 0x1000
 8003f5e:	615a      	str	r2, [r3, #20]
    }

    /* Handle Enumeration done Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_ENUMDNE))
 8003f60:	687b      	ldr	r3, [r7, #4]
 8003f62:	681b      	ldr	r3, [r3, #0]
 8003f64:	4618      	mov	r0, r3
 8003f66:	f003 fc6d 	bl	8007844 <USB_ReadInterrupts>
 8003f6a:	4603      	mov	r3, r0
 8003f6c:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8003f70:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8003f74:	d123      	bne.n	8003fbe <HAL_PCD_IRQHandler+0x6f6>
    {
      (void)USB_ActivateSetup(hpcd->Instance);
 8003f76:	687b      	ldr	r3, [r7, #4]
 8003f78:	681b      	ldr	r3, [r3, #0]
 8003f7a:	4618      	mov	r0, r3
 8003f7c:	f003 fd03 	bl	8007986 <USB_ActivateSetup>
      hpcd->Init.speed = USB_GetDevSpeed(hpcd->Instance);
 8003f80:	687b      	ldr	r3, [r7, #4]
 8003f82:	681b      	ldr	r3, [r3, #0]
 8003f84:	4618      	mov	r0, r3
 8003f86:	f002 fdba 	bl	8006afe <USB_GetDevSpeed>
 8003f8a:	4603      	mov	r3, r0
 8003f8c:	461a      	mov	r2, r3
 8003f8e:	687b      	ldr	r3, [r7, #4]
 8003f90:	71da      	strb	r2, [r3, #7]

      /* Set USB Turnaround time */
      (void)USB_SetTurnaroundTime(hpcd->Instance,
 8003f92:	687b      	ldr	r3, [r7, #4]
 8003f94:	681c      	ldr	r4, [r3, #0]
 8003f96:	f001 f9c9 	bl	800532c <HAL_RCC_GetHCLKFreq>
 8003f9a:	4601      	mov	r1, r0
                                  HAL_RCC_GetHCLKFreq(),
                                  (uint8_t)hpcd->Init.speed);
 8003f9c:	687b      	ldr	r3, [r7, #4]
 8003f9e:	79db      	ldrb	r3, [r3, #7]
      (void)USB_SetTurnaroundTime(hpcd->Instance,
 8003fa0:	461a      	mov	r2, r3
 8003fa2:	4620      	mov	r0, r4
 8003fa4:	f002 fabe 	bl	8006524 <USB_SetTurnaroundTime>

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ResetCallback(hpcd);
#else
      HAL_PCD_ResetCallback(hpcd);
 8003fa8:	6878      	ldr	r0, [r7, #4]
 8003faa:	f013 fe72 	bl	8017c92 <HAL_PCD_ResetCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_ENUMDNE);
 8003fae:	687b      	ldr	r3, [r7, #4]
 8003fb0:	681b      	ldr	r3, [r3, #0]
 8003fb2:	695a      	ldr	r2, [r3, #20]
 8003fb4:	687b      	ldr	r3, [r7, #4]
 8003fb6:	681b      	ldr	r3, [r3, #0]
 8003fb8:	f402 5200 	and.w	r2, r2, #8192	; 0x2000
 8003fbc:	615a      	str	r2, [r3, #20]
    }

    /* Handle SOF Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_SOF))
 8003fbe:	687b      	ldr	r3, [r7, #4]
 8003fc0:	681b      	ldr	r3, [r3, #0]
 8003fc2:	4618      	mov	r0, r3
 8003fc4:	f003 fc3e 	bl	8007844 <USB_ReadInterrupts>
 8003fc8:	4603      	mov	r3, r0
 8003fca:	f003 0308 	and.w	r3, r3, #8
 8003fce:	2b08      	cmp	r3, #8
 8003fd0:	d10a      	bne.n	8003fe8 <HAL_PCD_IRQHandler+0x720>
    {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->SOFCallback(hpcd);
#else
      HAL_PCD_SOFCallback(hpcd);
 8003fd2:	6878      	ldr	r0, [r7, #4]
 8003fd4:	f013 fe4f 	bl	8017c76 <HAL_PCD_SOFCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_SOF);
 8003fd8:	687b      	ldr	r3, [r7, #4]
 8003fda:	681b      	ldr	r3, [r3, #0]
 8003fdc:	695a      	ldr	r2, [r3, #20]
 8003fde:	687b      	ldr	r3, [r7, #4]
 8003fe0:	681b      	ldr	r3, [r3, #0]
 8003fe2:	f002 0208 	and.w	r2, r2, #8
 8003fe6:	615a      	str	r2, [r3, #20]
    }

    /* Handle Global OUT NAK effective Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_BOUTNAKEFF))
 8003fe8:	687b      	ldr	r3, [r7, #4]
 8003fea:	681b      	ldr	r3, [r3, #0]
 8003fec:	4618      	mov	r0, r3
 8003fee:	f003 fc29 	bl	8007844 <USB_ReadInterrupts>
 8003ff2:	4603      	mov	r3, r0
 8003ff4:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003ff8:	2b80      	cmp	r3, #128	; 0x80
 8003ffa:	d123      	bne.n	8004044 <HAL_PCD_IRQHandler+0x77c>
    {
      USBx->GINTMSK &= ~USB_OTG_GINTMSK_GONAKEFFM;
 8003ffc:	6a3b      	ldr	r3, [r7, #32]
 8003ffe:	699b      	ldr	r3, [r3, #24]
 8004000:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8004004:	6a3b      	ldr	r3, [r7, #32]
 8004006:	619a      	str	r2, [r3, #24]

      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8004008:	2301      	movs	r3, #1
 800400a:	627b      	str	r3, [r7, #36]	; 0x24
 800400c:	e014      	b.n	8004038 <HAL_PCD_IRQHandler+0x770>
      {
        if (hpcd->OUT_ep[epnum].is_iso_incomplete == 1U)
 800400e:	6879      	ldr	r1, [r7, #4]
 8004010:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004012:	4613      	mov	r3, r2
 8004014:	00db      	lsls	r3, r3, #3
 8004016:	4413      	add	r3, r2
 8004018:	009b      	lsls	r3, r3, #2
 800401a:	440b      	add	r3, r1
 800401c:	f203 2357 	addw	r3, r3, #599	; 0x257
 8004020:	781b      	ldrb	r3, [r3, #0]
 8004022:	2b01      	cmp	r3, #1
 8004024:	d105      	bne.n	8004032 <HAL_PCD_IRQHandler+0x76a>
        {
          /* Abort current transaction and disable the EP */
          (void)HAL_PCD_EP_Abort(hpcd, (uint8_t)epnum);
 8004026:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004028:	b2db      	uxtb	r3, r3
 800402a:	4619      	mov	r1, r3
 800402c:	6878      	ldr	r0, [r7, #4]
 800402e:	f000 fb0a 	bl	8004646 <HAL_PCD_EP_Abort>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8004032:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004034:	3301      	adds	r3, #1
 8004036:	627b      	str	r3, [r7, #36]	; 0x24
 8004038:	687b      	ldr	r3, [r7, #4]
 800403a:	791b      	ldrb	r3, [r3, #4]
 800403c:	461a      	mov	r2, r3
 800403e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004040:	4293      	cmp	r3, r2
 8004042:	d3e4      	bcc.n	800400e <HAL_PCD_IRQHandler+0x746>
        }
      }
    }

    /* Handle Incomplete ISO IN Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_IISOIXFR))
 8004044:	687b      	ldr	r3, [r7, #4]
 8004046:	681b      	ldr	r3, [r3, #0]
 8004048:	4618      	mov	r0, r3
 800404a:	f003 fbfb 	bl	8007844 <USB_ReadInterrupts>
 800404e:	4603      	mov	r3, r0
 8004050:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8004054:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8004058:	d13c      	bne.n	80040d4 <HAL_PCD_IRQHandler+0x80c>
    {
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 800405a:	2301      	movs	r3, #1
 800405c:	627b      	str	r3, [r7, #36]	; 0x24
 800405e:	e02b      	b.n	80040b8 <HAL_PCD_IRQHandler+0x7f0>
      {
        RegVal = USBx_INEP(epnum)->DIEPCTL;
 8004060:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004062:	015a      	lsls	r2, r3, #5
 8004064:	69fb      	ldr	r3, [r7, #28]
 8004066:	4413      	add	r3, r2
 8004068:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800406c:	681b      	ldr	r3, [r3, #0]
 800406e:	61bb      	str	r3, [r7, #24]

        if ((hpcd->IN_ep[epnum].type == EP_TYPE_ISOC) &&
 8004070:	6879      	ldr	r1, [r7, #4]
 8004072:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004074:	4613      	mov	r3, r2
 8004076:	00db      	lsls	r3, r3, #3
 8004078:	4413      	add	r3, r2
 800407a:	009b      	lsls	r3, r3, #2
 800407c:	440b      	add	r3, r1
 800407e:	3318      	adds	r3, #24
 8004080:	781b      	ldrb	r3, [r3, #0]
 8004082:	2b01      	cmp	r3, #1
 8004084:	d115      	bne.n	80040b2 <HAL_PCD_IRQHandler+0x7ea>
            ((RegVal & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA))
 8004086:	69bb      	ldr	r3, [r7, #24]
        if ((hpcd->IN_ep[epnum].type == EP_TYPE_ISOC) &&
 8004088:	2b00      	cmp	r3, #0
 800408a:	da12      	bge.n	80040b2 <HAL_PCD_IRQHandler+0x7ea>
        {
          hpcd->IN_ep[epnum].is_iso_incomplete = 1U;
 800408c:	6879      	ldr	r1, [r7, #4]
 800408e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004090:	4613      	mov	r3, r2
 8004092:	00db      	lsls	r3, r3, #3
 8004094:	4413      	add	r3, r2
 8004096:	009b      	lsls	r3, r3, #2
 8004098:	440b      	add	r3, r1
 800409a:	3317      	adds	r3, #23
 800409c:	2201      	movs	r2, #1
 800409e:	701a      	strb	r2, [r3, #0]

          /* Abort current transaction and disable the EP */
          (void)HAL_PCD_EP_Abort(hpcd, (uint8_t)(epnum | 0x80U));
 80040a0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80040a2:	b2db      	uxtb	r3, r3
 80040a4:	f063 037f 	orn	r3, r3, #127	; 0x7f
 80040a8:	b2db      	uxtb	r3, r3
 80040aa:	4619      	mov	r1, r3
 80040ac:	6878      	ldr	r0, [r7, #4]
 80040ae:	f000 faca 	bl	8004646 <HAL_PCD_EP_Abort>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 80040b2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80040b4:	3301      	adds	r3, #1
 80040b6:	627b      	str	r3, [r7, #36]	; 0x24
 80040b8:	687b      	ldr	r3, [r7, #4]
 80040ba:	791b      	ldrb	r3, [r3, #4]
 80040bc:	461a      	mov	r2, r3
 80040be:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80040c0:	4293      	cmp	r3, r2
 80040c2:	d3cd      	bcc.n	8004060 <HAL_PCD_IRQHandler+0x798>
        }
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_IISOIXFR);
 80040c4:	687b      	ldr	r3, [r7, #4]
 80040c6:	681b      	ldr	r3, [r3, #0]
 80040c8:	695a      	ldr	r2, [r3, #20]
 80040ca:	687b      	ldr	r3, [r7, #4]
 80040cc:	681b      	ldr	r3, [r3, #0]
 80040ce:	f402 1280 	and.w	r2, r2, #1048576	; 0x100000
 80040d2:	615a      	str	r2, [r3, #20]
    }

    /* Handle Incomplete ISO OUT Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT))
 80040d4:	687b      	ldr	r3, [r7, #4]
 80040d6:	681b      	ldr	r3, [r3, #0]
 80040d8:	4618      	mov	r0, r3
 80040da:	f003 fbb3 	bl	8007844 <USB_ReadInterrupts>
 80040de:	4603      	mov	r3, r0
 80040e0:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80040e4:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 80040e8:	d156      	bne.n	8004198 <HAL_PCD_IRQHandler+0x8d0>
    {
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 80040ea:	2301      	movs	r3, #1
 80040ec:	627b      	str	r3, [r7, #36]	; 0x24
 80040ee:	e045      	b.n	800417c <HAL_PCD_IRQHandler+0x8b4>
      {
        RegVal = USBx_OUTEP(epnum)->DOEPCTL;
 80040f0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80040f2:	015a      	lsls	r2, r3, #5
 80040f4:	69fb      	ldr	r3, [r7, #28]
 80040f6:	4413      	add	r3, r2
 80040f8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80040fc:	681b      	ldr	r3, [r3, #0]
 80040fe:	61bb      	str	r3, [r7, #24]

        if ((hpcd->OUT_ep[epnum].type == EP_TYPE_ISOC) &&
 8004100:	6879      	ldr	r1, [r7, #4]
 8004102:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004104:	4613      	mov	r3, r2
 8004106:	00db      	lsls	r3, r3, #3
 8004108:	4413      	add	r3, r2
 800410a:	009b      	lsls	r3, r3, #2
 800410c:	440b      	add	r3, r1
 800410e:	f503 7316 	add.w	r3, r3, #600	; 0x258
 8004112:	781b      	ldrb	r3, [r3, #0]
 8004114:	2b01      	cmp	r3, #1
 8004116:	d12e      	bne.n	8004176 <HAL_PCD_IRQHandler+0x8ae>
            ((RegVal & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA) &&
 8004118:	69bb      	ldr	r3, [r7, #24]
        if ((hpcd->OUT_ep[epnum].type == EP_TYPE_ISOC) &&
 800411a:	2b00      	cmp	r3, #0
 800411c:	da2b      	bge.n	8004176 <HAL_PCD_IRQHandler+0x8ae>
            ((RegVal & (0x1U << 16)) == (hpcd->FrameNumber & 0x1U)))
 800411e:	69bb      	ldr	r3, [r7, #24]
 8004120:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 8004124:	687b      	ldr	r3, [r7, #4]
 8004126:	f8d3 34d4 	ldr.w	r3, [r3, #1236]	; 0x4d4
 800412a:	f003 0301 	and.w	r3, r3, #1
            ((RegVal & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA) &&
 800412e:	429a      	cmp	r2, r3
 8004130:	d121      	bne.n	8004176 <HAL_PCD_IRQHandler+0x8ae>
        {
          hpcd->OUT_ep[epnum].is_iso_incomplete = 1U;
 8004132:	6879      	ldr	r1, [r7, #4]
 8004134:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004136:	4613      	mov	r3, r2
 8004138:	00db      	lsls	r3, r3, #3
 800413a:	4413      	add	r3, r2
 800413c:	009b      	lsls	r3, r3, #2
 800413e:	440b      	add	r3, r1
 8004140:	f203 2357 	addw	r3, r3, #599	; 0x257
 8004144:	2201      	movs	r2, #1
 8004146:	701a      	strb	r2, [r3, #0]

          USBx->GINTMSK |= USB_OTG_GINTMSK_GONAKEFFM;
 8004148:	6a3b      	ldr	r3, [r7, #32]
 800414a:	699b      	ldr	r3, [r3, #24]
 800414c:	f043 0280 	orr.w	r2, r3, #128	; 0x80
 8004150:	6a3b      	ldr	r3, [r7, #32]
 8004152:	619a      	str	r2, [r3, #24]

          if ((USBx->GINTSTS & USB_OTG_GINTSTS_BOUTNAKEFF) == 0U)
 8004154:	6a3b      	ldr	r3, [r7, #32]
 8004156:	695b      	ldr	r3, [r3, #20]
 8004158:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800415c:	2b00      	cmp	r3, #0
 800415e:	d10a      	bne.n	8004176 <HAL_PCD_IRQHandler+0x8ae>
          {
            USBx_DEVICE->DCTL |= USB_OTG_DCTL_SGONAK;
 8004160:	69fb      	ldr	r3, [r7, #28]
 8004162:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004166:	685b      	ldr	r3, [r3, #4]
 8004168:	69fa      	ldr	r2, [r7, #28]
 800416a:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800416e:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8004172:	6053      	str	r3, [r2, #4]
            break;
 8004174:	e008      	b.n	8004188 <HAL_PCD_IRQHandler+0x8c0>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8004176:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004178:	3301      	adds	r3, #1
 800417a:	627b      	str	r3, [r7, #36]	; 0x24
 800417c:	687b      	ldr	r3, [r7, #4]
 800417e:	791b      	ldrb	r3, [r3, #4]
 8004180:	461a      	mov	r2, r3
 8004182:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004184:	4293      	cmp	r3, r2
 8004186:	d3b3      	bcc.n	80040f0 <HAL_PCD_IRQHandler+0x828>
          }
        }
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT);
 8004188:	687b      	ldr	r3, [r7, #4]
 800418a:	681b      	ldr	r3, [r3, #0]
 800418c:	695a      	ldr	r2, [r3, #20]
 800418e:	687b      	ldr	r3, [r7, #4]
 8004190:	681b      	ldr	r3, [r3, #0]
 8004192:	f402 1200 	and.w	r2, r2, #2097152	; 0x200000
 8004196:	615a      	str	r2, [r3, #20]
    }

    /* Handle Connection event Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_SRQINT))
 8004198:	687b      	ldr	r3, [r7, #4]
 800419a:	681b      	ldr	r3, [r3, #0]
 800419c:	4618      	mov	r0, r3
 800419e:	f003 fb51 	bl	8007844 <USB_ReadInterrupts>
 80041a2:	4603      	mov	r3, r0
 80041a4:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 80041a8:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80041ac:	d10a      	bne.n	80041c4 <HAL_PCD_IRQHandler+0x8fc>
    {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ConnectCallback(hpcd);
#else
      HAL_PCD_ConnectCallback(hpcd);
 80041ae:	6878      	ldr	r0, [r7, #4]
 80041b0:	f013 fdf0 	bl	8017d94 <HAL_PCD_ConnectCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_SRQINT);
 80041b4:	687b      	ldr	r3, [r7, #4]
 80041b6:	681b      	ldr	r3, [r3, #0]
 80041b8:	695a      	ldr	r2, [r3, #20]
 80041ba:	687b      	ldr	r3, [r7, #4]
 80041bc:	681b      	ldr	r3, [r3, #0]
 80041be:	f002 4280 	and.w	r2, r2, #1073741824	; 0x40000000
 80041c2:	615a      	str	r2, [r3, #20]
    }

    /* Handle Disconnection event Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_OTGINT))
 80041c4:	687b      	ldr	r3, [r7, #4]
 80041c6:	681b      	ldr	r3, [r3, #0]
 80041c8:	4618      	mov	r0, r3
 80041ca:	f003 fb3b 	bl	8007844 <USB_ReadInterrupts>
 80041ce:	4603      	mov	r3, r0
 80041d0:	f003 0304 	and.w	r3, r3, #4
 80041d4:	2b04      	cmp	r3, #4
 80041d6:	d115      	bne.n	8004204 <HAL_PCD_IRQHandler+0x93c>
    {
      RegVal = hpcd->Instance->GOTGINT;
 80041d8:	687b      	ldr	r3, [r7, #4]
 80041da:	681b      	ldr	r3, [r3, #0]
 80041dc:	685b      	ldr	r3, [r3, #4]
 80041de:	61bb      	str	r3, [r7, #24]

      if ((RegVal & USB_OTG_GOTGINT_SEDET) == USB_OTG_GOTGINT_SEDET)
 80041e0:	69bb      	ldr	r3, [r7, #24]
 80041e2:	f003 0304 	and.w	r3, r3, #4
 80041e6:	2b00      	cmp	r3, #0
 80041e8:	d002      	beq.n	80041f0 <HAL_PCD_IRQHandler+0x928>
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DisconnectCallback(hpcd);
#else
        HAL_PCD_DisconnectCallback(hpcd);
 80041ea:	6878      	ldr	r0, [r7, #4]
 80041ec:	f013 fde0 	bl	8017db0 <HAL_PCD_DisconnectCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
      hpcd->Instance->GOTGINT |= RegVal;
 80041f0:	687b      	ldr	r3, [r7, #4]
 80041f2:	681b      	ldr	r3, [r3, #0]
 80041f4:	6859      	ldr	r1, [r3, #4]
 80041f6:	687b      	ldr	r3, [r7, #4]
 80041f8:	681b      	ldr	r3, [r3, #0]
 80041fa:	69ba      	ldr	r2, [r7, #24]
 80041fc:	430a      	orrs	r2, r1
 80041fe:	605a      	str	r2, [r3, #4]
 8004200:	e000      	b.n	8004204 <HAL_PCD_IRQHandler+0x93c>
      return;
 8004202:	bf00      	nop
    }
  }
}
 8004204:	3734      	adds	r7, #52	; 0x34
 8004206:	46bd      	mov	sp, r7
 8004208:	bd90      	pop	{r4, r7, pc}

0800420a <HAL_PCD_SetAddress>:
  * @param  hpcd PCD handle
  * @param  address new device address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_SetAddress(PCD_HandleTypeDef *hpcd, uint8_t address)
{
 800420a:	b580      	push	{r7, lr}
 800420c:	b082      	sub	sp, #8
 800420e:	af00      	add	r7, sp, #0
 8004210:	6078      	str	r0, [r7, #4]
 8004212:	460b      	mov	r3, r1
 8004214:	70fb      	strb	r3, [r7, #3]
  __HAL_LOCK(hpcd);
 8004216:	687b      	ldr	r3, [r7, #4]
 8004218:	f893 3494 	ldrb.w	r3, [r3, #1172]	; 0x494
 800421c:	2b01      	cmp	r3, #1
 800421e:	d101      	bne.n	8004224 <HAL_PCD_SetAddress+0x1a>
 8004220:	2302      	movs	r3, #2
 8004222:	e012      	b.n	800424a <HAL_PCD_SetAddress+0x40>
 8004224:	687b      	ldr	r3, [r7, #4]
 8004226:	2201      	movs	r2, #1
 8004228:	f883 2494 	strb.w	r2, [r3, #1172]	; 0x494
  hpcd->USB_Address = address;
 800422c:	687b      	ldr	r3, [r7, #4]
 800422e:	78fa      	ldrb	r2, [r7, #3]
 8004230:	745a      	strb	r2, [r3, #17]
  (void)USB_SetDevAddress(hpcd->Instance, address);
 8004232:	687b      	ldr	r3, [r7, #4]
 8004234:	681b      	ldr	r3, [r3, #0]
 8004236:	78fa      	ldrb	r2, [r7, #3]
 8004238:	4611      	mov	r1, r2
 800423a:	4618      	mov	r0, r3
 800423c:	f003 fa9a 	bl	8007774 <USB_SetDevAddress>
  __HAL_UNLOCK(hpcd);
 8004240:	687b      	ldr	r3, [r7, #4]
 8004242:	2200      	movs	r2, #0
 8004244:	f883 2494 	strb.w	r2, [r3, #1172]	; 0x494

  return HAL_OK;
 8004248:	2300      	movs	r3, #0
}
 800424a:	4618      	mov	r0, r3
 800424c:	3708      	adds	r7, #8
 800424e:	46bd      	mov	sp, r7
 8004250:	bd80      	pop	{r7, pc}

08004252 <HAL_PCD_EP_Open>:
  * @param  ep_type endpoint type
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Open(PCD_HandleTypeDef *hpcd, uint8_t ep_addr,
                                  uint16_t ep_mps, uint8_t ep_type)
{
 8004252:	b580      	push	{r7, lr}
 8004254:	b084      	sub	sp, #16
 8004256:	af00      	add	r7, sp, #0
 8004258:	6078      	str	r0, [r7, #4]
 800425a:	4608      	mov	r0, r1
 800425c:	4611      	mov	r1, r2
 800425e:	461a      	mov	r2, r3
 8004260:	4603      	mov	r3, r0
 8004262:	70fb      	strb	r3, [r7, #3]
 8004264:	460b      	mov	r3, r1
 8004266:	803b      	strh	r3, [r7, #0]
 8004268:	4613      	mov	r3, r2
 800426a:	70bb      	strb	r3, [r7, #2]
  HAL_StatusTypeDef ret = HAL_OK;
 800426c:	2300      	movs	r3, #0
 800426e:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 8004270:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8004274:	2b00      	cmp	r3, #0
 8004276:	da0f      	bge.n	8004298 <HAL_PCD_EP_Open+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8004278:	78fb      	ldrb	r3, [r7, #3]
 800427a:	f003 020f 	and.w	r2, r3, #15
 800427e:	4613      	mov	r3, r2
 8004280:	00db      	lsls	r3, r3, #3
 8004282:	4413      	add	r3, r2
 8004284:	009b      	lsls	r3, r3, #2
 8004286:	3310      	adds	r3, #16
 8004288:	687a      	ldr	r2, [r7, #4]
 800428a:	4413      	add	r3, r2
 800428c:	3304      	adds	r3, #4
 800428e:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8004290:	68fb      	ldr	r3, [r7, #12]
 8004292:	2201      	movs	r2, #1
 8004294:	705a      	strb	r2, [r3, #1]
 8004296:	e00f      	b.n	80042b8 <HAL_PCD_EP_Open+0x66>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8004298:	78fb      	ldrb	r3, [r7, #3]
 800429a:	f003 020f 	and.w	r2, r3, #15
 800429e:	4613      	mov	r3, r2
 80042a0:	00db      	lsls	r3, r3, #3
 80042a2:	4413      	add	r3, r2
 80042a4:	009b      	lsls	r3, r3, #2
 80042a6:	f503 7314 	add.w	r3, r3, #592	; 0x250
 80042aa:	687a      	ldr	r2, [r7, #4]
 80042ac:	4413      	add	r3, r2
 80042ae:	3304      	adds	r3, #4
 80042b0:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 80042b2:	68fb      	ldr	r3, [r7, #12]
 80042b4:	2200      	movs	r2, #0
 80042b6:	705a      	strb	r2, [r3, #1]
  }

  ep->num = ep_addr & EP_ADDR_MSK;
 80042b8:	78fb      	ldrb	r3, [r7, #3]
 80042ba:	f003 030f 	and.w	r3, r3, #15
 80042be:	b2da      	uxtb	r2, r3
 80042c0:	68fb      	ldr	r3, [r7, #12]
 80042c2:	701a      	strb	r2, [r3, #0]
  ep->maxpacket = (uint32_t)ep_mps & 0x7FFU;
 80042c4:	883b      	ldrh	r3, [r7, #0]
 80042c6:	f3c3 020a 	ubfx	r2, r3, #0, #11
 80042ca:	68fb      	ldr	r3, [r7, #12]
 80042cc:	609a      	str	r2, [r3, #8]
  ep->type = ep_type;
 80042ce:	68fb      	ldr	r3, [r7, #12]
 80042d0:	78ba      	ldrb	r2, [r7, #2]
 80042d2:	711a      	strb	r2, [r3, #4]

  if (ep->is_in != 0U)
 80042d4:	68fb      	ldr	r3, [r7, #12]
 80042d6:	785b      	ldrb	r3, [r3, #1]
 80042d8:	2b00      	cmp	r3, #0
 80042da:	d004      	beq.n	80042e6 <HAL_PCD_EP_Open+0x94>
  {
    /* Assign a Tx FIFO */
    ep->tx_fifo_num = ep->num;
 80042dc:	68fb      	ldr	r3, [r7, #12]
 80042de:	781b      	ldrb	r3, [r3, #0]
 80042e0:	b29a      	uxth	r2, r3
 80042e2:	68fb      	ldr	r3, [r7, #12]
 80042e4:	835a      	strh	r2, [r3, #26]
  }

  /* Set initial data PID. */
  if (ep_type == EP_TYPE_BULK)
 80042e6:	78bb      	ldrb	r3, [r7, #2]
 80042e8:	2b02      	cmp	r3, #2
 80042ea:	d102      	bne.n	80042f2 <HAL_PCD_EP_Open+0xa0>
  {
    ep->data_pid_start = 0U;
 80042ec:	68fb      	ldr	r3, [r7, #12]
 80042ee:	2200      	movs	r2, #0
 80042f0:	715a      	strb	r2, [r3, #5]
  }

  __HAL_LOCK(hpcd);
 80042f2:	687b      	ldr	r3, [r7, #4]
 80042f4:	f893 3494 	ldrb.w	r3, [r3, #1172]	; 0x494
 80042f8:	2b01      	cmp	r3, #1
 80042fa:	d101      	bne.n	8004300 <HAL_PCD_EP_Open+0xae>
 80042fc:	2302      	movs	r3, #2
 80042fe:	e00e      	b.n	800431e <HAL_PCD_EP_Open+0xcc>
 8004300:	687b      	ldr	r3, [r7, #4]
 8004302:	2201      	movs	r2, #1
 8004304:	f883 2494 	strb.w	r2, [r3, #1172]	; 0x494
  (void)USB_ActivateEndpoint(hpcd->Instance, ep);
 8004308:	687b      	ldr	r3, [r7, #4]
 800430a:	681b      	ldr	r3, [r3, #0]
 800430c:	68f9      	ldr	r1, [r7, #12]
 800430e:	4618      	mov	r0, r3
 8004310:	f002 fc1a 	bl	8006b48 <USB_ActivateEndpoint>
  __HAL_UNLOCK(hpcd);
 8004314:	687b      	ldr	r3, [r7, #4]
 8004316:	2200      	movs	r2, #0
 8004318:	f883 2494 	strb.w	r2, [r3, #1172]	; 0x494

  return ret;
 800431c:	7afb      	ldrb	r3, [r7, #11]
}
 800431e:	4618      	mov	r0, r3
 8004320:	3710      	adds	r7, #16
 8004322:	46bd      	mov	sp, r7
 8004324:	bd80      	pop	{r7, pc}

08004326 <HAL_PCD_EP_Close>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Close(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8004326:	b580      	push	{r7, lr}
 8004328:	b084      	sub	sp, #16
 800432a:	af00      	add	r7, sp, #0
 800432c:	6078      	str	r0, [r7, #4]
 800432e:	460b      	mov	r3, r1
 8004330:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 8004332:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8004336:	2b00      	cmp	r3, #0
 8004338:	da0f      	bge.n	800435a <HAL_PCD_EP_Close+0x34>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 800433a:	78fb      	ldrb	r3, [r7, #3]
 800433c:	f003 020f 	and.w	r2, r3, #15
 8004340:	4613      	mov	r3, r2
 8004342:	00db      	lsls	r3, r3, #3
 8004344:	4413      	add	r3, r2
 8004346:	009b      	lsls	r3, r3, #2
 8004348:	3310      	adds	r3, #16
 800434a:	687a      	ldr	r2, [r7, #4]
 800434c:	4413      	add	r3, r2
 800434e:	3304      	adds	r3, #4
 8004350:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8004352:	68fb      	ldr	r3, [r7, #12]
 8004354:	2201      	movs	r2, #1
 8004356:	705a      	strb	r2, [r3, #1]
 8004358:	e00f      	b.n	800437a <HAL_PCD_EP_Close+0x54>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 800435a:	78fb      	ldrb	r3, [r7, #3]
 800435c:	f003 020f 	and.w	r2, r3, #15
 8004360:	4613      	mov	r3, r2
 8004362:	00db      	lsls	r3, r3, #3
 8004364:	4413      	add	r3, r2
 8004366:	009b      	lsls	r3, r3, #2
 8004368:	f503 7314 	add.w	r3, r3, #592	; 0x250
 800436c:	687a      	ldr	r2, [r7, #4]
 800436e:	4413      	add	r3, r2
 8004370:	3304      	adds	r3, #4
 8004372:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8004374:	68fb      	ldr	r3, [r7, #12]
 8004376:	2200      	movs	r2, #0
 8004378:	705a      	strb	r2, [r3, #1]
  }
  ep->num = ep_addr & EP_ADDR_MSK;
 800437a:	78fb      	ldrb	r3, [r7, #3]
 800437c:	f003 030f 	and.w	r3, r3, #15
 8004380:	b2da      	uxtb	r2, r3
 8004382:	68fb      	ldr	r3, [r7, #12]
 8004384:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8004386:	687b      	ldr	r3, [r7, #4]
 8004388:	f893 3494 	ldrb.w	r3, [r3, #1172]	; 0x494
 800438c:	2b01      	cmp	r3, #1
 800438e:	d101      	bne.n	8004394 <HAL_PCD_EP_Close+0x6e>
 8004390:	2302      	movs	r3, #2
 8004392:	e00e      	b.n	80043b2 <HAL_PCD_EP_Close+0x8c>
 8004394:	687b      	ldr	r3, [r7, #4]
 8004396:	2201      	movs	r2, #1
 8004398:	f883 2494 	strb.w	r2, [r3, #1172]	; 0x494
  (void)USB_DeactivateEndpoint(hpcd->Instance, ep);
 800439c:	687b      	ldr	r3, [r7, #4]
 800439e:	681b      	ldr	r3, [r3, #0]
 80043a0:	68f9      	ldr	r1, [r7, #12]
 80043a2:	4618      	mov	r0, r3
 80043a4:	f002 fc58 	bl	8006c58 <USB_DeactivateEndpoint>
  __HAL_UNLOCK(hpcd);
 80043a8:	687b      	ldr	r3, [r7, #4]
 80043aa:	2200      	movs	r2, #0
 80043ac:	f883 2494 	strb.w	r2, [r3, #1172]	; 0x494
  return HAL_OK;
 80043b0:	2300      	movs	r3, #0
}
 80043b2:	4618      	mov	r0, r3
 80043b4:	3710      	adds	r7, #16
 80043b6:	46bd      	mov	sp, r7
 80043b8:	bd80      	pop	{r7, pc}

080043ba <HAL_PCD_EP_Receive>:
  * @param  pBuf pointer to the reception buffer
  * @param  len amount of data to be received
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Receive(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 80043ba:	b580      	push	{r7, lr}
 80043bc:	b086      	sub	sp, #24
 80043be:	af00      	add	r7, sp, #0
 80043c0:	60f8      	str	r0, [r7, #12]
 80043c2:	607a      	str	r2, [r7, #4]
 80043c4:	603b      	str	r3, [r7, #0]
 80043c6:	460b      	mov	r3, r1
 80043c8:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 80043ca:	7afb      	ldrb	r3, [r7, #11]
 80043cc:	f003 020f 	and.w	r2, r3, #15
 80043d0:	4613      	mov	r3, r2
 80043d2:	00db      	lsls	r3, r3, #3
 80043d4:	4413      	add	r3, r2
 80043d6:	009b      	lsls	r3, r3, #2
 80043d8:	f503 7314 	add.w	r3, r3, #592	; 0x250
 80043dc:	68fa      	ldr	r2, [r7, #12]
 80043de:	4413      	add	r3, r2
 80043e0:	3304      	adds	r3, #4
 80043e2:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 80043e4:	697b      	ldr	r3, [r7, #20]
 80043e6:	687a      	ldr	r2, [r7, #4]
 80043e8:	60da      	str	r2, [r3, #12]
  ep->xfer_len = len;
 80043ea:	697b      	ldr	r3, [r7, #20]
 80043ec:	683a      	ldr	r2, [r7, #0]
 80043ee:	611a      	str	r2, [r3, #16]
  ep->xfer_count = 0U;
 80043f0:	697b      	ldr	r3, [r7, #20]
 80043f2:	2200      	movs	r2, #0
 80043f4:	615a      	str	r2, [r3, #20]
  ep->is_in = 0U;
 80043f6:	697b      	ldr	r3, [r7, #20]
 80043f8:	2200      	movs	r2, #0
 80043fa:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 80043fc:	7afb      	ldrb	r3, [r7, #11]
 80043fe:	f003 030f 	and.w	r3, r3, #15
 8004402:	b2da      	uxtb	r2, r3
 8004404:	697b      	ldr	r3, [r7, #20]
 8004406:	701a      	strb	r2, [r3, #0]

  if (hpcd->Init.dma_enable == 1U)
 8004408:	68fb      	ldr	r3, [r7, #12]
 800440a:	799b      	ldrb	r3, [r3, #6]
 800440c:	2b01      	cmp	r3, #1
 800440e:	d102      	bne.n	8004416 <HAL_PCD_EP_Receive+0x5c>
  {
    ep->dma_addr = (uint32_t)pBuf;
 8004410:	687a      	ldr	r2, [r7, #4]
 8004412:	697b      	ldr	r3, [r7, #20]
 8004414:	61da      	str	r2, [r3, #28]
  }

  (void)USB_EPStartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 8004416:	68fb      	ldr	r3, [r7, #12]
 8004418:	6818      	ldr	r0, [r3, #0]
 800441a:	68fb      	ldr	r3, [r7, #12]
 800441c:	799b      	ldrb	r3, [r3, #6]
 800441e:	461a      	mov	r2, r3
 8004420:	6979      	ldr	r1, [r7, #20]
 8004422:	f002 fcf5 	bl	8006e10 <USB_EPStartXfer>

  return HAL_OK;
 8004426:	2300      	movs	r3, #0
}
 8004428:	4618      	mov	r0, r3
 800442a:	3718      	adds	r7, #24
 800442c:	46bd      	mov	sp, r7
 800442e:	bd80      	pop	{r7, pc}

08004430 <HAL_PCD_EP_GetRxCount>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval Data Size
  */
uint32_t HAL_PCD_EP_GetRxCount(PCD_HandleTypeDef const *hpcd, uint8_t ep_addr)
{
 8004430:	b480      	push	{r7}
 8004432:	b083      	sub	sp, #12
 8004434:	af00      	add	r7, sp, #0
 8004436:	6078      	str	r0, [r7, #4]
 8004438:	460b      	mov	r3, r1
 800443a:	70fb      	strb	r3, [r7, #3]
  return hpcd->OUT_ep[ep_addr & EP_ADDR_MSK].xfer_count;
 800443c:	78fb      	ldrb	r3, [r7, #3]
 800443e:	f003 020f 	and.w	r2, r3, #15
 8004442:	6879      	ldr	r1, [r7, #4]
 8004444:	4613      	mov	r3, r2
 8004446:	00db      	lsls	r3, r3, #3
 8004448:	4413      	add	r3, r2
 800444a:	009b      	lsls	r3, r3, #2
 800444c:	440b      	add	r3, r1
 800444e:	f503 731a 	add.w	r3, r3, #616	; 0x268
 8004452:	681b      	ldr	r3, [r3, #0]
}
 8004454:	4618      	mov	r0, r3
 8004456:	370c      	adds	r7, #12
 8004458:	46bd      	mov	sp, r7
 800445a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800445e:	4770      	bx	lr

08004460 <HAL_PCD_EP_Transmit>:
  * @param  pBuf pointer to the transmission buffer
  * @param  len amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Transmit(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 8004460:	b580      	push	{r7, lr}
 8004462:	b086      	sub	sp, #24
 8004464:	af00      	add	r7, sp, #0
 8004466:	60f8      	str	r0, [r7, #12]
 8004468:	607a      	str	r2, [r7, #4]
 800446a:	603b      	str	r3, [r7, #0]
 800446c:	460b      	mov	r3, r1
 800446e:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8004470:	7afb      	ldrb	r3, [r7, #11]
 8004472:	f003 020f 	and.w	r2, r3, #15
 8004476:	4613      	mov	r3, r2
 8004478:	00db      	lsls	r3, r3, #3
 800447a:	4413      	add	r3, r2
 800447c:	009b      	lsls	r3, r3, #2
 800447e:	3310      	adds	r3, #16
 8004480:	68fa      	ldr	r2, [r7, #12]
 8004482:	4413      	add	r3, r2
 8004484:	3304      	adds	r3, #4
 8004486:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 8004488:	697b      	ldr	r3, [r7, #20]
 800448a:	687a      	ldr	r2, [r7, #4]
 800448c:	60da      	str	r2, [r3, #12]
  ep->xfer_len = len;
 800448e:	697b      	ldr	r3, [r7, #20]
 8004490:	683a      	ldr	r2, [r7, #0]
 8004492:	611a      	str	r2, [r3, #16]
  ep->xfer_count = 0U;
 8004494:	697b      	ldr	r3, [r7, #20]
 8004496:	2200      	movs	r2, #0
 8004498:	615a      	str	r2, [r3, #20]
  ep->is_in = 1U;
 800449a:	697b      	ldr	r3, [r7, #20]
 800449c:	2201      	movs	r2, #1
 800449e:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 80044a0:	7afb      	ldrb	r3, [r7, #11]
 80044a2:	f003 030f 	and.w	r3, r3, #15
 80044a6:	b2da      	uxtb	r2, r3
 80044a8:	697b      	ldr	r3, [r7, #20]
 80044aa:	701a      	strb	r2, [r3, #0]

  if (hpcd->Init.dma_enable == 1U)
 80044ac:	68fb      	ldr	r3, [r7, #12]
 80044ae:	799b      	ldrb	r3, [r3, #6]
 80044b0:	2b01      	cmp	r3, #1
 80044b2:	d102      	bne.n	80044ba <HAL_PCD_EP_Transmit+0x5a>
  {
    ep->dma_addr = (uint32_t)pBuf;
 80044b4:	687a      	ldr	r2, [r7, #4]
 80044b6:	697b      	ldr	r3, [r7, #20]
 80044b8:	61da      	str	r2, [r3, #28]
  }

  (void)USB_EPStartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 80044ba:	68fb      	ldr	r3, [r7, #12]
 80044bc:	6818      	ldr	r0, [r3, #0]
 80044be:	68fb      	ldr	r3, [r7, #12]
 80044c0:	799b      	ldrb	r3, [r3, #6]
 80044c2:	461a      	mov	r2, r3
 80044c4:	6979      	ldr	r1, [r7, #20]
 80044c6:	f002 fca3 	bl	8006e10 <USB_EPStartXfer>

  return HAL_OK;
 80044ca:	2300      	movs	r3, #0
}
 80044cc:	4618      	mov	r0, r3
 80044ce:	3718      	adds	r7, #24
 80044d0:	46bd      	mov	sp, r7
 80044d2:	bd80      	pop	{r7, pc}

080044d4 <HAL_PCD_EP_SetStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_SetStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 80044d4:	b580      	push	{r7, lr}
 80044d6:	b084      	sub	sp, #16
 80044d8:	af00      	add	r7, sp, #0
 80044da:	6078      	str	r0, [r7, #4]
 80044dc:	460b      	mov	r3, r1
 80044de:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & EP_ADDR_MSK) > hpcd->Init.dev_endpoints)
 80044e0:	78fb      	ldrb	r3, [r7, #3]
 80044e2:	f003 030f 	and.w	r3, r3, #15
 80044e6:	687a      	ldr	r2, [r7, #4]
 80044e8:	7912      	ldrb	r2, [r2, #4]
 80044ea:	4293      	cmp	r3, r2
 80044ec:	d901      	bls.n	80044f2 <HAL_PCD_EP_SetStall+0x1e>
  {
    return HAL_ERROR;
 80044ee:	2301      	movs	r3, #1
 80044f0:	e04f      	b.n	8004592 <HAL_PCD_EP_SetStall+0xbe>
  }

  if ((0x80U & ep_addr) == 0x80U)
 80044f2:	f997 3003 	ldrsb.w	r3, [r7, #3]
 80044f6:	2b00      	cmp	r3, #0
 80044f8:	da0f      	bge.n	800451a <HAL_PCD_EP_SetStall+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 80044fa:	78fb      	ldrb	r3, [r7, #3]
 80044fc:	f003 020f 	and.w	r2, r3, #15
 8004500:	4613      	mov	r3, r2
 8004502:	00db      	lsls	r3, r3, #3
 8004504:	4413      	add	r3, r2
 8004506:	009b      	lsls	r3, r3, #2
 8004508:	3310      	adds	r3, #16
 800450a:	687a      	ldr	r2, [r7, #4]
 800450c:	4413      	add	r3, r2
 800450e:	3304      	adds	r3, #4
 8004510:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8004512:	68fb      	ldr	r3, [r7, #12]
 8004514:	2201      	movs	r2, #1
 8004516:	705a      	strb	r2, [r3, #1]
 8004518:	e00d      	b.n	8004536 <HAL_PCD_EP_SetStall+0x62>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 800451a:	78fa      	ldrb	r2, [r7, #3]
 800451c:	4613      	mov	r3, r2
 800451e:	00db      	lsls	r3, r3, #3
 8004520:	4413      	add	r3, r2
 8004522:	009b      	lsls	r3, r3, #2
 8004524:	f503 7314 	add.w	r3, r3, #592	; 0x250
 8004528:	687a      	ldr	r2, [r7, #4]
 800452a:	4413      	add	r3, r2
 800452c:	3304      	adds	r3, #4
 800452e:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8004530:	68fb      	ldr	r3, [r7, #12]
 8004532:	2200      	movs	r2, #0
 8004534:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 1U;
 8004536:	68fb      	ldr	r3, [r7, #12]
 8004538:	2201      	movs	r2, #1
 800453a:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 800453c:	78fb      	ldrb	r3, [r7, #3]
 800453e:	f003 030f 	and.w	r3, r3, #15
 8004542:	b2da      	uxtb	r2, r3
 8004544:	68fb      	ldr	r3, [r7, #12]
 8004546:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8004548:	687b      	ldr	r3, [r7, #4]
 800454a:	f893 3494 	ldrb.w	r3, [r3, #1172]	; 0x494
 800454e:	2b01      	cmp	r3, #1
 8004550:	d101      	bne.n	8004556 <HAL_PCD_EP_SetStall+0x82>
 8004552:	2302      	movs	r3, #2
 8004554:	e01d      	b.n	8004592 <HAL_PCD_EP_SetStall+0xbe>
 8004556:	687b      	ldr	r3, [r7, #4]
 8004558:	2201      	movs	r2, #1
 800455a:	f883 2494 	strb.w	r2, [r3, #1172]	; 0x494

  (void)USB_EPSetStall(hpcd->Instance, ep);
 800455e:	687b      	ldr	r3, [r7, #4]
 8004560:	681b      	ldr	r3, [r3, #0]
 8004562:	68f9      	ldr	r1, [r7, #12]
 8004564:	4618      	mov	r0, r3
 8004566:	f003 f831 	bl	80075cc <USB_EPSetStall>

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 800456a:	78fb      	ldrb	r3, [r7, #3]
 800456c:	f003 030f 	and.w	r3, r3, #15
 8004570:	2b00      	cmp	r3, #0
 8004572:	d109      	bne.n	8004588 <HAL_PCD_EP_SetStall+0xb4>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable, (uint8_t *)hpcd->Setup);
 8004574:	687b      	ldr	r3, [r7, #4]
 8004576:	6818      	ldr	r0, [r3, #0]
 8004578:	687b      	ldr	r3, [r7, #4]
 800457a:	7999      	ldrb	r1, [r3, #6]
 800457c:	687b      	ldr	r3, [r7, #4]
 800457e:	f203 439c 	addw	r3, r3, #1180	; 0x49c
 8004582:	461a      	mov	r2, r3
 8004584:	f003 fa22 	bl	80079cc <USB_EP0_OutStart>
  }

  __HAL_UNLOCK(hpcd);
 8004588:	687b      	ldr	r3, [r7, #4]
 800458a:	2200      	movs	r2, #0
 800458c:	f883 2494 	strb.w	r2, [r3, #1172]	; 0x494

  return HAL_OK;
 8004590:	2300      	movs	r3, #0
}
 8004592:	4618      	mov	r0, r3
 8004594:	3710      	adds	r7, #16
 8004596:	46bd      	mov	sp, r7
 8004598:	bd80      	pop	{r7, pc}

0800459a <HAL_PCD_EP_ClrStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_ClrStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 800459a:	b580      	push	{r7, lr}
 800459c:	b084      	sub	sp, #16
 800459e:	af00      	add	r7, sp, #0
 80045a0:	6078      	str	r0, [r7, #4]
 80045a2:	460b      	mov	r3, r1
 80045a4:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & 0x0FU) > hpcd->Init.dev_endpoints)
 80045a6:	78fb      	ldrb	r3, [r7, #3]
 80045a8:	f003 030f 	and.w	r3, r3, #15
 80045ac:	687a      	ldr	r2, [r7, #4]
 80045ae:	7912      	ldrb	r2, [r2, #4]
 80045b0:	4293      	cmp	r3, r2
 80045b2:	d901      	bls.n	80045b8 <HAL_PCD_EP_ClrStall+0x1e>
  {
    return HAL_ERROR;
 80045b4:	2301      	movs	r3, #1
 80045b6:	e042      	b.n	800463e <HAL_PCD_EP_ClrStall+0xa4>
  }

  if ((0x80U & ep_addr) == 0x80U)
 80045b8:	f997 3003 	ldrsb.w	r3, [r7, #3]
 80045bc:	2b00      	cmp	r3, #0
 80045be:	da0f      	bge.n	80045e0 <HAL_PCD_EP_ClrStall+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 80045c0:	78fb      	ldrb	r3, [r7, #3]
 80045c2:	f003 020f 	and.w	r2, r3, #15
 80045c6:	4613      	mov	r3, r2
 80045c8:	00db      	lsls	r3, r3, #3
 80045ca:	4413      	add	r3, r2
 80045cc:	009b      	lsls	r3, r3, #2
 80045ce:	3310      	adds	r3, #16
 80045d0:	687a      	ldr	r2, [r7, #4]
 80045d2:	4413      	add	r3, r2
 80045d4:	3304      	adds	r3, #4
 80045d6:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 80045d8:	68fb      	ldr	r3, [r7, #12]
 80045da:	2201      	movs	r2, #1
 80045dc:	705a      	strb	r2, [r3, #1]
 80045de:	e00f      	b.n	8004600 <HAL_PCD_EP_ClrStall+0x66>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 80045e0:	78fb      	ldrb	r3, [r7, #3]
 80045e2:	f003 020f 	and.w	r2, r3, #15
 80045e6:	4613      	mov	r3, r2
 80045e8:	00db      	lsls	r3, r3, #3
 80045ea:	4413      	add	r3, r2
 80045ec:	009b      	lsls	r3, r3, #2
 80045ee:	f503 7314 	add.w	r3, r3, #592	; 0x250
 80045f2:	687a      	ldr	r2, [r7, #4]
 80045f4:	4413      	add	r3, r2
 80045f6:	3304      	adds	r3, #4
 80045f8:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 80045fa:	68fb      	ldr	r3, [r7, #12]
 80045fc:	2200      	movs	r2, #0
 80045fe:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 0U;
 8004600:	68fb      	ldr	r3, [r7, #12]
 8004602:	2200      	movs	r2, #0
 8004604:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 8004606:	78fb      	ldrb	r3, [r7, #3]
 8004608:	f003 030f 	and.w	r3, r3, #15
 800460c:	b2da      	uxtb	r2, r3
 800460e:	68fb      	ldr	r3, [r7, #12]
 8004610:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8004612:	687b      	ldr	r3, [r7, #4]
 8004614:	f893 3494 	ldrb.w	r3, [r3, #1172]	; 0x494
 8004618:	2b01      	cmp	r3, #1
 800461a:	d101      	bne.n	8004620 <HAL_PCD_EP_ClrStall+0x86>
 800461c:	2302      	movs	r3, #2
 800461e:	e00e      	b.n	800463e <HAL_PCD_EP_ClrStall+0xa4>
 8004620:	687b      	ldr	r3, [r7, #4]
 8004622:	2201      	movs	r2, #1
 8004624:	f883 2494 	strb.w	r2, [r3, #1172]	; 0x494
  (void)USB_EPClearStall(hpcd->Instance, ep);
 8004628:	687b      	ldr	r3, [r7, #4]
 800462a:	681b      	ldr	r3, [r3, #0]
 800462c:	68f9      	ldr	r1, [r7, #12]
 800462e:	4618      	mov	r0, r3
 8004630:	f003 f83a 	bl	80076a8 <USB_EPClearStall>
  __HAL_UNLOCK(hpcd);
 8004634:	687b      	ldr	r3, [r7, #4]
 8004636:	2200      	movs	r2, #0
 8004638:	f883 2494 	strb.w	r2, [r3, #1172]	; 0x494

  return HAL_OK;
 800463c:	2300      	movs	r3, #0
}
 800463e:	4618      	mov	r0, r3
 8004640:	3710      	adds	r7, #16
 8004642:	46bd      	mov	sp, r7
 8004644:	bd80      	pop	{r7, pc}

08004646 <HAL_PCD_EP_Abort>:
   * @param  hpcd PCD handle
   * @param  ep_addr endpoint address
   * @retval HAL status
   */
HAL_StatusTypeDef HAL_PCD_EP_Abort(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8004646:	b580      	push	{r7, lr}
 8004648:	b084      	sub	sp, #16
 800464a:	af00      	add	r7, sp, #0
 800464c:	6078      	str	r0, [r7, #4]
 800464e:	460b      	mov	r3, r1
 8004650:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef ret;
  PCD_EPTypeDef *ep;

  if ((0x80U & ep_addr) == 0x80U)
 8004652:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8004656:	2b00      	cmp	r3, #0
 8004658:	da0c      	bge.n	8004674 <HAL_PCD_EP_Abort+0x2e>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 800465a:	78fb      	ldrb	r3, [r7, #3]
 800465c:	f003 020f 	and.w	r2, r3, #15
 8004660:	4613      	mov	r3, r2
 8004662:	00db      	lsls	r3, r3, #3
 8004664:	4413      	add	r3, r2
 8004666:	009b      	lsls	r3, r3, #2
 8004668:	3310      	adds	r3, #16
 800466a:	687a      	ldr	r2, [r7, #4]
 800466c:	4413      	add	r3, r2
 800466e:	3304      	adds	r3, #4
 8004670:	60fb      	str	r3, [r7, #12]
 8004672:	e00c      	b.n	800468e <HAL_PCD_EP_Abort+0x48>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8004674:	78fb      	ldrb	r3, [r7, #3]
 8004676:	f003 020f 	and.w	r2, r3, #15
 800467a:	4613      	mov	r3, r2
 800467c:	00db      	lsls	r3, r3, #3
 800467e:	4413      	add	r3, r2
 8004680:	009b      	lsls	r3, r3, #2
 8004682:	f503 7314 	add.w	r3, r3, #592	; 0x250
 8004686:	687a      	ldr	r2, [r7, #4]
 8004688:	4413      	add	r3, r2
 800468a:	3304      	adds	r3, #4
 800468c:	60fb      	str	r3, [r7, #12]
  }

  /* Stop Xfer */
  ret = USB_EPStopXfer(hpcd->Instance, ep);
 800468e:	687b      	ldr	r3, [r7, #4]
 8004690:	681b      	ldr	r3, [r3, #0]
 8004692:	68f9      	ldr	r1, [r7, #12]
 8004694:	4618      	mov	r0, r3
 8004696:	f002 fe59 	bl	800734c <USB_EPStopXfer>
 800469a:	4603      	mov	r3, r0
 800469c:	72fb      	strb	r3, [r7, #11]

  return ret;
 800469e:	7afb      	ldrb	r3, [r7, #11]
}
 80046a0:	4618      	mov	r0, r3
 80046a2:	3710      	adds	r7, #16
 80046a4:	46bd      	mov	sp, r7
 80046a6:	bd80      	pop	{r7, pc}

080046a8 <PCD_WriteEmptyTxFifo>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_WriteEmptyTxFifo(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 80046a8:	b580      	push	{r7, lr}
 80046aa:	b08a      	sub	sp, #40	; 0x28
 80046ac:	af02      	add	r7, sp, #8
 80046ae:	6078      	str	r0, [r7, #4]
 80046b0:	6039      	str	r1, [r7, #0]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 80046b2:	687b      	ldr	r3, [r7, #4]
 80046b4:	681b      	ldr	r3, [r3, #0]
 80046b6:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80046b8:	697b      	ldr	r3, [r7, #20]
 80046ba:	613b      	str	r3, [r7, #16]
  USB_OTG_EPTypeDef *ep;
  uint32_t len;
  uint32_t len32b;
  uint32_t fifoemptymsk;

  ep = &hpcd->IN_ep[epnum];
 80046bc:	683a      	ldr	r2, [r7, #0]
 80046be:	4613      	mov	r3, r2
 80046c0:	00db      	lsls	r3, r3, #3
 80046c2:	4413      	add	r3, r2
 80046c4:	009b      	lsls	r3, r3, #2
 80046c6:	3310      	adds	r3, #16
 80046c8:	687a      	ldr	r2, [r7, #4]
 80046ca:	4413      	add	r3, r2
 80046cc:	3304      	adds	r3, #4
 80046ce:	60fb      	str	r3, [r7, #12]

  if (ep->xfer_count > ep->xfer_len)
 80046d0:	68fb      	ldr	r3, [r7, #12]
 80046d2:	695a      	ldr	r2, [r3, #20]
 80046d4:	68fb      	ldr	r3, [r7, #12]
 80046d6:	691b      	ldr	r3, [r3, #16]
 80046d8:	429a      	cmp	r2, r3
 80046da:	d901      	bls.n	80046e0 <PCD_WriteEmptyTxFifo+0x38>
  {
    return HAL_ERROR;
 80046dc:	2301      	movs	r3, #1
 80046de:	e06b      	b.n	80047b8 <PCD_WriteEmptyTxFifo+0x110>
  }

  len = ep->xfer_len - ep->xfer_count;
 80046e0:	68fb      	ldr	r3, [r7, #12]
 80046e2:	691a      	ldr	r2, [r3, #16]
 80046e4:	68fb      	ldr	r3, [r7, #12]
 80046e6:	695b      	ldr	r3, [r3, #20]
 80046e8:	1ad3      	subs	r3, r2, r3
 80046ea:	61fb      	str	r3, [r7, #28]

  if (len > ep->maxpacket)
 80046ec:	68fb      	ldr	r3, [r7, #12]
 80046ee:	689b      	ldr	r3, [r3, #8]
 80046f0:	69fa      	ldr	r2, [r7, #28]
 80046f2:	429a      	cmp	r2, r3
 80046f4:	d902      	bls.n	80046fc <PCD_WriteEmptyTxFifo+0x54>
  {
    len = ep->maxpacket;
 80046f6:	68fb      	ldr	r3, [r7, #12]
 80046f8:	689b      	ldr	r3, [r3, #8]
 80046fa:	61fb      	str	r3, [r7, #28]
  }

  len32b = (len + 3U) / 4U;
 80046fc:	69fb      	ldr	r3, [r7, #28]
 80046fe:	3303      	adds	r3, #3
 8004700:	089b      	lsrs	r3, r3, #2
 8004702:	61bb      	str	r3, [r7, #24]

  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 8004704:	e02a      	b.n	800475c <PCD_WriteEmptyTxFifo+0xb4>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
  {
    /* Write the FIFO */
    len = ep->xfer_len - ep->xfer_count;
 8004706:	68fb      	ldr	r3, [r7, #12]
 8004708:	691a      	ldr	r2, [r3, #16]
 800470a:	68fb      	ldr	r3, [r7, #12]
 800470c:	695b      	ldr	r3, [r3, #20]
 800470e:	1ad3      	subs	r3, r2, r3
 8004710:	61fb      	str	r3, [r7, #28]

    if (len > ep->maxpacket)
 8004712:	68fb      	ldr	r3, [r7, #12]
 8004714:	689b      	ldr	r3, [r3, #8]
 8004716:	69fa      	ldr	r2, [r7, #28]
 8004718:	429a      	cmp	r2, r3
 800471a:	d902      	bls.n	8004722 <PCD_WriteEmptyTxFifo+0x7a>
    {
      len = ep->maxpacket;
 800471c:	68fb      	ldr	r3, [r7, #12]
 800471e:	689b      	ldr	r3, [r3, #8]
 8004720:	61fb      	str	r3, [r7, #28]
    }
    len32b = (len + 3U) / 4U;
 8004722:	69fb      	ldr	r3, [r7, #28]
 8004724:	3303      	adds	r3, #3
 8004726:	089b      	lsrs	r3, r3, #2
 8004728:	61bb      	str	r3, [r7, #24]

    (void)USB_WritePacket(USBx, ep->xfer_buff, (uint8_t)epnum, (uint16_t)len,
 800472a:	68fb      	ldr	r3, [r7, #12]
 800472c:	68d9      	ldr	r1, [r3, #12]
 800472e:	683b      	ldr	r3, [r7, #0]
 8004730:	b2da      	uxtb	r2, r3
 8004732:	69fb      	ldr	r3, [r7, #28]
 8004734:	b298      	uxth	r0, r3
                          (uint8_t)hpcd->Init.dma_enable);
 8004736:	687b      	ldr	r3, [r7, #4]
 8004738:	799b      	ldrb	r3, [r3, #6]
    (void)USB_WritePacket(USBx, ep->xfer_buff, (uint8_t)epnum, (uint16_t)len,
 800473a:	9300      	str	r3, [sp, #0]
 800473c:	4603      	mov	r3, r0
 800473e:	6978      	ldr	r0, [r7, #20]
 8004740:	f002 feae 	bl	80074a0 <USB_WritePacket>

    ep->xfer_buff  += len;
 8004744:	68fb      	ldr	r3, [r7, #12]
 8004746:	68da      	ldr	r2, [r3, #12]
 8004748:	69fb      	ldr	r3, [r7, #28]
 800474a:	441a      	add	r2, r3
 800474c:	68fb      	ldr	r3, [r7, #12]
 800474e:	60da      	str	r2, [r3, #12]
    ep->xfer_count += len;
 8004750:	68fb      	ldr	r3, [r7, #12]
 8004752:	695a      	ldr	r2, [r3, #20]
 8004754:	69fb      	ldr	r3, [r7, #28]
 8004756:	441a      	add	r2, r3
 8004758:	68fb      	ldr	r3, [r7, #12]
 800475a:	615a      	str	r2, [r3, #20]
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 800475c:	683b      	ldr	r3, [r7, #0]
 800475e:	015a      	lsls	r2, r3, #5
 8004760:	693b      	ldr	r3, [r7, #16]
 8004762:	4413      	add	r3, r2
 8004764:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004768:	699b      	ldr	r3, [r3, #24]
 800476a:	b29b      	uxth	r3, r3
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
 800476c:	69ba      	ldr	r2, [r7, #24]
 800476e:	429a      	cmp	r2, r3
 8004770:	d809      	bhi.n	8004786 <PCD_WriteEmptyTxFifo+0xde>
 8004772:	68fb      	ldr	r3, [r7, #12]
 8004774:	695a      	ldr	r2, [r3, #20]
 8004776:	68fb      	ldr	r3, [r7, #12]
 8004778:	691b      	ldr	r3, [r3, #16]
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 800477a:	429a      	cmp	r2, r3
 800477c:	d203      	bcs.n	8004786 <PCD_WriteEmptyTxFifo+0xde>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
 800477e:	68fb      	ldr	r3, [r7, #12]
 8004780:	691b      	ldr	r3, [r3, #16]
 8004782:	2b00      	cmp	r3, #0
 8004784:	d1bf      	bne.n	8004706 <PCD_WriteEmptyTxFifo+0x5e>
  }

  if (ep->xfer_len <= ep->xfer_count)
 8004786:	68fb      	ldr	r3, [r7, #12]
 8004788:	691a      	ldr	r2, [r3, #16]
 800478a:	68fb      	ldr	r3, [r7, #12]
 800478c:	695b      	ldr	r3, [r3, #20]
 800478e:	429a      	cmp	r2, r3
 8004790:	d811      	bhi.n	80047b6 <PCD_WriteEmptyTxFifo+0x10e>
  {
    fifoemptymsk = (uint32_t)(0x1UL << (epnum & EP_ADDR_MSK));
 8004792:	683b      	ldr	r3, [r7, #0]
 8004794:	f003 030f 	and.w	r3, r3, #15
 8004798:	2201      	movs	r2, #1
 800479a:	fa02 f303 	lsl.w	r3, r2, r3
 800479e:	60bb      	str	r3, [r7, #8]
    USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 80047a0:	693b      	ldr	r3, [r7, #16]
 80047a2:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80047a6:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80047a8:	68bb      	ldr	r3, [r7, #8]
 80047aa:	43db      	mvns	r3, r3
 80047ac:	6939      	ldr	r1, [r7, #16]
 80047ae:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 80047b2:	4013      	ands	r3, r2
 80047b4:	634b      	str	r3, [r1, #52]	; 0x34
  }

  return HAL_OK;
 80047b6:	2300      	movs	r3, #0
}
 80047b8:	4618      	mov	r0, r3
 80047ba:	3720      	adds	r7, #32
 80047bc:	46bd      	mov	sp, r7
 80047be:	bd80      	pop	{r7, pc}

080047c0 <PCD_EP_OutXfrComplete_int>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_OutXfrComplete_int(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 80047c0:	b580      	push	{r7, lr}
 80047c2:	b088      	sub	sp, #32
 80047c4:	af00      	add	r7, sp, #0
 80047c6:	6078      	str	r0, [r7, #4]
 80047c8:	6039      	str	r1, [r7, #0]
  USB_OTG_EPTypeDef *ep;
  const USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 80047ca:	687b      	ldr	r3, [r7, #4]
 80047cc:	681b      	ldr	r3, [r3, #0]
 80047ce:	61fb      	str	r3, [r7, #28]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80047d0:	69fb      	ldr	r3, [r7, #28]
 80047d2:	61bb      	str	r3, [r7, #24]
  uint32_t gSNPSiD = *(__IO const uint32_t *)(&USBx->CID + 0x1U);
 80047d4:	69fb      	ldr	r3, [r7, #28]
 80047d6:	333c      	adds	r3, #60	; 0x3c
 80047d8:	3304      	adds	r3, #4
 80047da:	681b      	ldr	r3, [r3, #0]
 80047dc:	617b      	str	r3, [r7, #20]
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;
 80047de:	683b      	ldr	r3, [r7, #0]
 80047e0:	015a      	lsls	r2, r3, #5
 80047e2:	69bb      	ldr	r3, [r7, #24]
 80047e4:	4413      	add	r3, r2
 80047e6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80047ea:	689b      	ldr	r3, [r3, #8]
 80047ec:	613b      	str	r3, [r7, #16]

  if (hpcd->Init.dma_enable == 1U)
 80047ee:	687b      	ldr	r3, [r7, #4]
 80047f0:	799b      	ldrb	r3, [r3, #6]
 80047f2:	2b01      	cmp	r3, #1
 80047f4:	d17b      	bne.n	80048ee <PCD_EP_OutXfrComplete_int+0x12e>
  {
    if ((DoepintReg & USB_OTG_DOEPINT_STUP) == USB_OTG_DOEPINT_STUP) /* Class C */
 80047f6:	693b      	ldr	r3, [r7, #16]
 80047f8:	f003 0308 	and.w	r3, r3, #8
 80047fc:	2b00      	cmp	r3, #0
 80047fe:	d015      	beq.n	800482c <PCD_EP_OutXfrComplete_int+0x6c>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8004800:	697b      	ldr	r3, [r7, #20]
 8004802:	4a61      	ldr	r2, [pc, #388]	; (8004988 <PCD_EP_OutXfrComplete_int+0x1c8>)
 8004804:	4293      	cmp	r3, r2
 8004806:	f240 80b9 	bls.w	800497c <PCD_EP_OutXfrComplete_int+0x1bc>
          ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 800480a:	693b      	ldr	r3, [r7, #16]
 800480c:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8004810:	2b00      	cmp	r3, #0
 8004812:	f000 80b3 	beq.w	800497c <PCD_EP_OutXfrComplete_int+0x1bc>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8004816:	683b      	ldr	r3, [r7, #0]
 8004818:	015a      	lsls	r2, r3, #5
 800481a:	69bb      	ldr	r3, [r7, #24]
 800481c:	4413      	add	r3, r2
 800481e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004822:	461a      	mov	r2, r3
 8004824:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8004828:	6093      	str	r3, [r2, #8]
 800482a:	e0a7      	b.n	800497c <PCD_EP_OutXfrComplete_int+0x1bc>
      }
    }
    else if ((DoepintReg & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR) /* Class E */
 800482c:	693b      	ldr	r3, [r7, #16]
 800482e:	f003 0320 	and.w	r3, r3, #32
 8004832:	2b00      	cmp	r3, #0
 8004834:	d009      	beq.n	800484a <PCD_EP_OutXfrComplete_int+0x8a>
    {
      CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 8004836:	683b      	ldr	r3, [r7, #0]
 8004838:	015a      	lsls	r2, r3, #5
 800483a:	69bb      	ldr	r3, [r7, #24]
 800483c:	4413      	add	r3, r2
 800483e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004842:	461a      	mov	r2, r3
 8004844:	2320      	movs	r3, #32
 8004846:	6093      	str	r3, [r2, #8]
 8004848:	e098      	b.n	800497c <PCD_EP_OutXfrComplete_int+0x1bc>
    }
    else if ((DoepintReg & (USB_OTG_DOEPINT_STUP | USB_OTG_DOEPINT_OTEPSPR)) == 0U)
 800484a:	693b      	ldr	r3, [r7, #16]
 800484c:	f003 0328 	and.w	r3, r3, #40	; 0x28
 8004850:	2b00      	cmp	r3, #0
 8004852:	f040 8093 	bne.w	800497c <PCD_EP_OutXfrComplete_int+0x1bc>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8004856:	697b      	ldr	r3, [r7, #20]
 8004858:	4a4b      	ldr	r2, [pc, #300]	; (8004988 <PCD_EP_OutXfrComplete_int+0x1c8>)
 800485a:	4293      	cmp	r3, r2
 800485c:	d90f      	bls.n	800487e <PCD_EP_OutXfrComplete_int+0xbe>
          ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 800485e:	693b      	ldr	r3, [r7, #16]
 8004860:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8004864:	2b00      	cmp	r3, #0
 8004866:	d00a      	beq.n	800487e <PCD_EP_OutXfrComplete_int+0xbe>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8004868:	683b      	ldr	r3, [r7, #0]
 800486a:	015a      	lsls	r2, r3, #5
 800486c:	69bb      	ldr	r3, [r7, #24]
 800486e:	4413      	add	r3, r2
 8004870:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004874:	461a      	mov	r2, r3
 8004876:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800487a:	6093      	str	r3, [r2, #8]
 800487c:	e07e      	b.n	800497c <PCD_EP_OutXfrComplete_int+0x1bc>
      }
      else
      {
        ep = &hpcd->OUT_ep[epnum];
 800487e:	683a      	ldr	r2, [r7, #0]
 8004880:	4613      	mov	r3, r2
 8004882:	00db      	lsls	r3, r3, #3
 8004884:	4413      	add	r3, r2
 8004886:	009b      	lsls	r3, r3, #2
 8004888:	f503 7314 	add.w	r3, r3, #592	; 0x250
 800488c:	687a      	ldr	r2, [r7, #4]
 800488e:	4413      	add	r3, r2
 8004890:	3304      	adds	r3, #4
 8004892:	60fb      	str	r3, [r7, #12]

        /* out data packet received over EP */
        ep->xfer_count = ep->xfer_size - (USBx_OUTEP(epnum)->DOEPTSIZ & USB_OTG_DOEPTSIZ_XFRSIZ);
 8004894:	68fb      	ldr	r3, [r7, #12]
 8004896:	6a1a      	ldr	r2, [r3, #32]
 8004898:	683b      	ldr	r3, [r7, #0]
 800489a:	0159      	lsls	r1, r3, #5
 800489c:	69bb      	ldr	r3, [r7, #24]
 800489e:	440b      	add	r3, r1
 80048a0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80048a4:	691b      	ldr	r3, [r3, #16]
 80048a6:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80048aa:	1ad2      	subs	r2, r2, r3
 80048ac:	68fb      	ldr	r3, [r7, #12]
 80048ae:	615a      	str	r2, [r3, #20]

        if (epnum == 0U)
 80048b0:	683b      	ldr	r3, [r7, #0]
 80048b2:	2b00      	cmp	r3, #0
 80048b4:	d114      	bne.n	80048e0 <PCD_EP_OutXfrComplete_int+0x120>
        {
          if (ep->xfer_len == 0U)
 80048b6:	68fb      	ldr	r3, [r7, #12]
 80048b8:	691b      	ldr	r3, [r3, #16]
 80048ba:	2b00      	cmp	r3, #0
 80048bc:	d109      	bne.n	80048d2 <PCD_EP_OutXfrComplete_int+0x112>
          {
            /* this is ZLP, so prepare EP0 for next setup */
            (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 80048be:	687b      	ldr	r3, [r7, #4]
 80048c0:	6818      	ldr	r0, [r3, #0]
 80048c2:	687b      	ldr	r3, [r7, #4]
 80048c4:	f203 439c 	addw	r3, r3, #1180	; 0x49c
 80048c8:	461a      	mov	r2, r3
 80048ca:	2101      	movs	r1, #1
 80048cc:	f003 f87e 	bl	80079cc <USB_EP0_OutStart>
 80048d0:	e006      	b.n	80048e0 <PCD_EP_OutXfrComplete_int+0x120>
          }
          else
          {
            ep->xfer_buff += ep->xfer_count;
 80048d2:	68fb      	ldr	r3, [r7, #12]
 80048d4:	68da      	ldr	r2, [r3, #12]
 80048d6:	68fb      	ldr	r3, [r7, #12]
 80048d8:	695b      	ldr	r3, [r3, #20]
 80048da:	441a      	add	r2, r3
 80048dc:	68fb      	ldr	r3, [r7, #12]
 80048de:	60da      	str	r2, [r3, #12]
        }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
        HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 80048e0:	683b      	ldr	r3, [r7, #0]
 80048e2:	b2db      	uxtb	r3, r3
 80048e4:	4619      	mov	r1, r3
 80048e6:	6878      	ldr	r0, [r7, #4]
 80048e8:	f013 f990 	bl	8017c0c <HAL_PCD_DataOutStageCallback>
 80048ec:	e046      	b.n	800497c <PCD_EP_OutXfrComplete_int+0x1bc>
      /* ... */
    }
  }
  else
  {
    if (gSNPSiD == USB_OTG_CORE_ID_310A)
 80048ee:	697b      	ldr	r3, [r7, #20]
 80048f0:	4a26      	ldr	r2, [pc, #152]	; (800498c <PCD_EP_OutXfrComplete_int+0x1cc>)
 80048f2:	4293      	cmp	r3, r2
 80048f4:	d124      	bne.n	8004940 <PCD_EP_OutXfrComplete_int+0x180>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX)
 80048f6:	693b      	ldr	r3, [r7, #16]
 80048f8:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80048fc:	2b00      	cmp	r3, #0
 80048fe:	d00a      	beq.n	8004916 <PCD_EP_OutXfrComplete_int+0x156>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8004900:	683b      	ldr	r3, [r7, #0]
 8004902:	015a      	lsls	r2, r3, #5
 8004904:	69bb      	ldr	r3, [r7, #24]
 8004906:	4413      	add	r3, r2
 8004908:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800490c:	461a      	mov	r2, r3
 800490e:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8004912:	6093      	str	r3, [r2, #8]
 8004914:	e032      	b.n	800497c <PCD_EP_OutXfrComplete_int+0x1bc>
      }
      else
      {
        if ((DoepintReg & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR)
 8004916:	693b      	ldr	r3, [r7, #16]
 8004918:	f003 0320 	and.w	r3, r3, #32
 800491c:	2b00      	cmp	r3, #0
 800491e:	d008      	beq.n	8004932 <PCD_EP_OutXfrComplete_int+0x172>
        {
          CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 8004920:	683b      	ldr	r3, [r7, #0]
 8004922:	015a      	lsls	r2, r3, #5
 8004924:	69bb      	ldr	r3, [r7, #24]
 8004926:	4413      	add	r3, r2
 8004928:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800492c:	461a      	mov	r2, r3
 800492e:	2320      	movs	r3, #32
 8004930:	6093      	str	r3, [r2, #8]
        }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
        HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 8004932:	683b      	ldr	r3, [r7, #0]
 8004934:	b2db      	uxtb	r3, r3
 8004936:	4619      	mov	r1, r3
 8004938:	6878      	ldr	r0, [r7, #4]
 800493a:	f013 f967 	bl	8017c0c <HAL_PCD_DataOutStageCallback>
 800493e:	e01d      	b.n	800497c <PCD_EP_OutXfrComplete_int+0x1bc>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
    }
    else
    {
      if ((epnum == 0U) && (hpcd->OUT_ep[epnum].xfer_len == 0U))
 8004940:	683b      	ldr	r3, [r7, #0]
 8004942:	2b00      	cmp	r3, #0
 8004944:	d114      	bne.n	8004970 <PCD_EP_OutXfrComplete_int+0x1b0>
 8004946:	6879      	ldr	r1, [r7, #4]
 8004948:	683a      	ldr	r2, [r7, #0]
 800494a:	4613      	mov	r3, r2
 800494c:	00db      	lsls	r3, r3, #3
 800494e:	4413      	add	r3, r2
 8004950:	009b      	lsls	r3, r3, #2
 8004952:	440b      	add	r3, r1
 8004954:	f503 7319 	add.w	r3, r3, #612	; 0x264
 8004958:	681b      	ldr	r3, [r3, #0]
 800495a:	2b00      	cmp	r3, #0
 800495c:	d108      	bne.n	8004970 <PCD_EP_OutXfrComplete_int+0x1b0>
      {
        /* this is ZLP, so prepare EP0 for next setup */
        (void)USB_EP0_OutStart(hpcd->Instance, 0U, (uint8_t *)hpcd->Setup);
 800495e:	687b      	ldr	r3, [r7, #4]
 8004960:	6818      	ldr	r0, [r3, #0]
 8004962:	687b      	ldr	r3, [r7, #4]
 8004964:	f203 439c 	addw	r3, r3, #1180	; 0x49c
 8004968:	461a      	mov	r2, r3
 800496a:	2100      	movs	r1, #0
 800496c:	f003 f82e 	bl	80079cc <USB_EP0_OutStart>
      }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
      HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 8004970:	683b      	ldr	r3, [r7, #0]
 8004972:	b2db      	uxtb	r3, r3
 8004974:	4619      	mov	r1, r3
 8004976:	6878      	ldr	r0, [r7, #4]
 8004978:	f013 f948 	bl	8017c0c <HAL_PCD_DataOutStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
    }
  }

  return HAL_OK;
 800497c:	2300      	movs	r3, #0
}
 800497e:	4618      	mov	r0, r3
 8004980:	3720      	adds	r7, #32
 8004982:	46bd      	mov	sp, r7
 8004984:	bd80      	pop	{r7, pc}
 8004986:	bf00      	nop
 8004988:	4f54300a 	.word	0x4f54300a
 800498c:	4f54310a 	.word	0x4f54310a

08004990 <PCD_EP_OutSetupPacket_int>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_OutSetupPacket_int(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 8004990:	b580      	push	{r7, lr}
 8004992:	b086      	sub	sp, #24
 8004994:	af00      	add	r7, sp, #0
 8004996:	6078      	str	r0, [r7, #4]
 8004998:	6039      	str	r1, [r7, #0]
  const USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 800499a:	687b      	ldr	r3, [r7, #4]
 800499c:	681b      	ldr	r3, [r3, #0]
 800499e:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80049a0:	697b      	ldr	r3, [r7, #20]
 80049a2:	613b      	str	r3, [r7, #16]
  uint32_t gSNPSiD = *(__IO const uint32_t *)(&USBx->CID + 0x1U);
 80049a4:	697b      	ldr	r3, [r7, #20]
 80049a6:	333c      	adds	r3, #60	; 0x3c
 80049a8:	3304      	adds	r3, #4
 80049aa:	681b      	ldr	r3, [r3, #0]
 80049ac:	60fb      	str	r3, [r7, #12]
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;
 80049ae:	683b      	ldr	r3, [r7, #0]
 80049b0:	015a      	lsls	r2, r3, #5
 80049b2:	693b      	ldr	r3, [r7, #16]
 80049b4:	4413      	add	r3, r2
 80049b6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80049ba:	689b      	ldr	r3, [r3, #8]
 80049bc:	60bb      	str	r3, [r7, #8]

  if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 80049be:	68fb      	ldr	r3, [r7, #12]
 80049c0:	4a15      	ldr	r2, [pc, #84]	; (8004a18 <PCD_EP_OutSetupPacket_int+0x88>)
 80049c2:	4293      	cmp	r3, r2
 80049c4:	d90e      	bls.n	80049e4 <PCD_EP_OutSetupPacket_int+0x54>
      ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 80049c6:	68bb      	ldr	r3, [r7, #8]
 80049c8:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
  if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 80049cc:	2b00      	cmp	r3, #0
 80049ce:	d009      	beq.n	80049e4 <PCD_EP_OutSetupPacket_int+0x54>
  {
    CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 80049d0:	683b      	ldr	r3, [r7, #0]
 80049d2:	015a      	lsls	r2, r3, #5
 80049d4:	693b      	ldr	r3, [r7, #16]
 80049d6:	4413      	add	r3, r2
 80049d8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80049dc:	461a      	mov	r2, r3
 80049de:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80049e2:	6093      	str	r3, [r2, #8]

  /* Inform the upper layer that a setup packet is available */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
  hpcd->SetupStageCallback(hpcd);
#else
  HAL_PCD_SetupStageCallback(hpcd);
 80049e4:	6878      	ldr	r0, [r7, #4]
 80049e6:	f013 f8ff 	bl	8017be8 <HAL_PCD_SetupStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

  if ((gSNPSiD > USB_OTG_CORE_ID_300A) && (hpcd->Init.dma_enable == 1U))
 80049ea:	68fb      	ldr	r3, [r7, #12]
 80049ec:	4a0a      	ldr	r2, [pc, #40]	; (8004a18 <PCD_EP_OutSetupPacket_int+0x88>)
 80049ee:	4293      	cmp	r3, r2
 80049f0:	d90c      	bls.n	8004a0c <PCD_EP_OutSetupPacket_int+0x7c>
 80049f2:	687b      	ldr	r3, [r7, #4]
 80049f4:	799b      	ldrb	r3, [r3, #6]
 80049f6:	2b01      	cmp	r3, #1
 80049f8:	d108      	bne.n	8004a0c <PCD_EP_OutSetupPacket_int+0x7c>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 80049fa:	687b      	ldr	r3, [r7, #4]
 80049fc:	6818      	ldr	r0, [r3, #0]
 80049fe:	687b      	ldr	r3, [r7, #4]
 8004a00:	f203 439c 	addw	r3, r3, #1180	; 0x49c
 8004a04:	461a      	mov	r2, r3
 8004a06:	2101      	movs	r1, #1
 8004a08:	f002 ffe0 	bl	80079cc <USB_EP0_OutStart>
  }

  return HAL_OK;
 8004a0c:	2300      	movs	r3, #0
}
 8004a0e:	4618      	mov	r0, r3
 8004a10:	3718      	adds	r7, #24
 8004a12:	46bd      	mov	sp, r7
 8004a14:	bd80      	pop	{r7, pc}
 8004a16:	bf00      	nop
 8004a18:	4f54300a 	.word	0x4f54300a

08004a1c <HAL_PCDEx_SetTxFiFo>:
  * @param  fifo The number of Tx fifo
  * @param  size Fifo size
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_SetTxFiFo(PCD_HandleTypeDef *hpcd, uint8_t fifo, uint16_t size)
{
 8004a1c:	b480      	push	{r7}
 8004a1e:	b085      	sub	sp, #20
 8004a20:	af00      	add	r7, sp, #0
 8004a22:	6078      	str	r0, [r7, #4]
 8004a24:	460b      	mov	r3, r1
 8004a26:	70fb      	strb	r3, [r7, #3]
 8004a28:	4613      	mov	r3, r2
 8004a2a:	803b      	strh	r3, [r7, #0]
         --> Txn should be configured with the minimum space of 16 words
     The FIFO is used optimally when used TxFIFOs are allocated in the top
         of the FIFO.Ex: use EP1 and EP2 as IN instead of EP1 and EP3 as IN ones.
     When DMA is used 3n * FIFO locations should be reserved for internal DMA registers */

  Tx_Offset = hpcd->Instance->GRXFSIZ;
 8004a2c:	687b      	ldr	r3, [r7, #4]
 8004a2e:	681b      	ldr	r3, [r3, #0]
 8004a30:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004a32:	60bb      	str	r3, [r7, #8]

  if (fifo == 0U)
 8004a34:	78fb      	ldrb	r3, [r7, #3]
 8004a36:	2b00      	cmp	r3, #0
 8004a38:	d107      	bne.n	8004a4a <HAL_PCDEx_SetTxFiFo+0x2e>
  {
    hpcd->Instance->DIEPTXF0_HNPTXFSIZ = ((uint32_t)size << 16) | Tx_Offset;
 8004a3a:	883b      	ldrh	r3, [r7, #0]
 8004a3c:	0419      	lsls	r1, r3, #16
 8004a3e:	687b      	ldr	r3, [r7, #4]
 8004a40:	681b      	ldr	r3, [r3, #0]
 8004a42:	68ba      	ldr	r2, [r7, #8]
 8004a44:	430a      	orrs	r2, r1
 8004a46:	629a      	str	r2, [r3, #40]	; 0x28
 8004a48:	e028      	b.n	8004a9c <HAL_PCDEx_SetTxFiFo+0x80>
  }
  else
  {
    Tx_Offset += (hpcd->Instance->DIEPTXF0_HNPTXFSIZ) >> 16;
 8004a4a:	687b      	ldr	r3, [r7, #4]
 8004a4c:	681b      	ldr	r3, [r3, #0]
 8004a4e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004a50:	0c1b      	lsrs	r3, r3, #16
 8004a52:	68ba      	ldr	r2, [r7, #8]
 8004a54:	4413      	add	r3, r2
 8004a56:	60bb      	str	r3, [r7, #8]
    for (i = 0U; i < (fifo - 1U); i++)
 8004a58:	2300      	movs	r3, #0
 8004a5a:	73fb      	strb	r3, [r7, #15]
 8004a5c:	e00d      	b.n	8004a7a <HAL_PCDEx_SetTxFiFo+0x5e>
    {
      Tx_Offset += (hpcd->Instance->DIEPTXF[i] >> 16);
 8004a5e:	687b      	ldr	r3, [r7, #4]
 8004a60:	681a      	ldr	r2, [r3, #0]
 8004a62:	7bfb      	ldrb	r3, [r7, #15]
 8004a64:	3340      	adds	r3, #64	; 0x40
 8004a66:	009b      	lsls	r3, r3, #2
 8004a68:	4413      	add	r3, r2
 8004a6a:	685b      	ldr	r3, [r3, #4]
 8004a6c:	0c1b      	lsrs	r3, r3, #16
 8004a6e:	68ba      	ldr	r2, [r7, #8]
 8004a70:	4413      	add	r3, r2
 8004a72:	60bb      	str	r3, [r7, #8]
    for (i = 0U; i < (fifo - 1U); i++)
 8004a74:	7bfb      	ldrb	r3, [r7, #15]
 8004a76:	3301      	adds	r3, #1
 8004a78:	73fb      	strb	r3, [r7, #15]
 8004a7a:	7bfa      	ldrb	r2, [r7, #15]
 8004a7c:	78fb      	ldrb	r3, [r7, #3]
 8004a7e:	3b01      	subs	r3, #1
 8004a80:	429a      	cmp	r2, r3
 8004a82:	d3ec      	bcc.n	8004a5e <HAL_PCDEx_SetTxFiFo+0x42>
    }

    /* Multiply Tx_Size by 2 to get higher performance */
    hpcd->Instance->DIEPTXF[fifo - 1U] = ((uint32_t)size << 16) | Tx_Offset;
 8004a84:	883b      	ldrh	r3, [r7, #0]
 8004a86:	0418      	lsls	r0, r3, #16
 8004a88:	687b      	ldr	r3, [r7, #4]
 8004a8a:	6819      	ldr	r1, [r3, #0]
 8004a8c:	78fb      	ldrb	r3, [r7, #3]
 8004a8e:	3b01      	subs	r3, #1
 8004a90:	68ba      	ldr	r2, [r7, #8]
 8004a92:	4302      	orrs	r2, r0
 8004a94:	3340      	adds	r3, #64	; 0x40
 8004a96:	009b      	lsls	r3, r3, #2
 8004a98:	440b      	add	r3, r1
 8004a9a:	605a      	str	r2, [r3, #4]
  }

  return HAL_OK;
 8004a9c:	2300      	movs	r3, #0
}
 8004a9e:	4618      	mov	r0, r3
 8004aa0:	3714      	adds	r7, #20
 8004aa2:	46bd      	mov	sp, r7
 8004aa4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004aa8:	4770      	bx	lr

08004aaa <HAL_PCDEx_SetRxFiFo>:
  * @param  hpcd PCD handle
  * @param  size Size of Rx fifo
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_SetRxFiFo(PCD_HandleTypeDef *hpcd, uint16_t size)
{
 8004aaa:	b480      	push	{r7}
 8004aac:	b083      	sub	sp, #12
 8004aae:	af00      	add	r7, sp, #0
 8004ab0:	6078      	str	r0, [r7, #4]
 8004ab2:	460b      	mov	r3, r1
 8004ab4:	807b      	strh	r3, [r7, #2]
  hpcd->Instance->GRXFSIZ = size;
 8004ab6:	687b      	ldr	r3, [r7, #4]
 8004ab8:	681b      	ldr	r3, [r3, #0]
 8004aba:	887a      	ldrh	r2, [r7, #2]
 8004abc:	625a      	str	r2, [r3, #36]	; 0x24

  return HAL_OK;
 8004abe:	2300      	movs	r3, #0
}
 8004ac0:	4618      	mov	r0, r3
 8004ac2:	370c      	adds	r7, #12
 8004ac4:	46bd      	mov	sp, r7
 8004ac6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004aca:	4770      	bx	lr

08004acc <HAL_PCDEx_LPM_Callback>:
  * @param  hpcd PCD handle
  * @param  msg LPM message
  * @retval HAL status
  */
__weak void HAL_PCDEx_LPM_Callback(PCD_HandleTypeDef *hpcd, PCD_LPM_MsgTypeDef msg)
{
 8004acc:	b480      	push	{r7}
 8004ace:	b083      	sub	sp, #12
 8004ad0:	af00      	add	r7, sp, #0
 8004ad2:	6078      	str	r0, [r7, #4]
 8004ad4:	460b      	mov	r3, r1
 8004ad6:	70fb      	strb	r3, [r7, #3]
  UNUSED(msg);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_PCDEx_LPM_Callback could be implemented in the user file
   */
}
 8004ad8:	bf00      	nop
 8004ada:	370c      	adds	r7, #12
 8004adc:	46bd      	mov	sp, r7
 8004ade:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ae2:	4770      	bx	lr

08004ae4 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8004ae4:	b580      	push	{r7, lr}
 8004ae6:	b086      	sub	sp, #24
 8004ae8:	af00      	add	r7, sp, #0
 8004aea:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8004aec:	687b      	ldr	r3, [r7, #4]
 8004aee:	2b00      	cmp	r3, #0
 8004af0:	d101      	bne.n	8004af6 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8004af2:	2301      	movs	r3, #1
 8004af4:	e267      	b.n	8004fc6 <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8004af6:	687b      	ldr	r3, [r7, #4]
 8004af8:	681b      	ldr	r3, [r3, #0]
 8004afa:	f003 0301 	and.w	r3, r3, #1
 8004afe:	2b00      	cmp	r3, #0
 8004b00:	d075      	beq.n	8004bee <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) || \
 8004b02:	4b88      	ldr	r3, [pc, #544]	; (8004d24 <HAL_RCC_OscConfig+0x240>)
 8004b04:	689b      	ldr	r3, [r3, #8]
 8004b06:	f003 030c 	and.w	r3, r3, #12
 8004b0a:	2b04      	cmp	r3, #4
 8004b0c:	d00c      	beq.n	8004b28 <HAL_RCC_OscConfig+0x44>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8004b0e:	4b85      	ldr	r3, [pc, #532]	; (8004d24 <HAL_RCC_OscConfig+0x240>)
 8004b10:	689b      	ldr	r3, [r3, #8]
 8004b12:	f003 030c 	and.w	r3, r3, #12
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) || \
 8004b16:	2b08      	cmp	r3, #8
 8004b18:	d112      	bne.n	8004b40 <HAL_RCC_OscConfig+0x5c>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8004b1a:	4b82      	ldr	r3, [pc, #520]	; (8004d24 <HAL_RCC_OscConfig+0x240>)
 8004b1c:	685b      	ldr	r3, [r3, #4]
 8004b1e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8004b22:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8004b26:	d10b      	bne.n	8004b40 <HAL_RCC_OscConfig+0x5c>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004b28:	4b7e      	ldr	r3, [pc, #504]	; (8004d24 <HAL_RCC_OscConfig+0x240>)
 8004b2a:	681b      	ldr	r3, [r3, #0]
 8004b2c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004b30:	2b00      	cmp	r3, #0
 8004b32:	d05b      	beq.n	8004bec <HAL_RCC_OscConfig+0x108>
 8004b34:	687b      	ldr	r3, [r7, #4]
 8004b36:	685b      	ldr	r3, [r3, #4]
 8004b38:	2b00      	cmp	r3, #0
 8004b3a:	d157      	bne.n	8004bec <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8004b3c:	2301      	movs	r3, #1
 8004b3e:	e242      	b.n	8004fc6 <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8004b40:	687b      	ldr	r3, [r7, #4]
 8004b42:	685b      	ldr	r3, [r3, #4]
 8004b44:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004b48:	d106      	bne.n	8004b58 <HAL_RCC_OscConfig+0x74>
 8004b4a:	4b76      	ldr	r3, [pc, #472]	; (8004d24 <HAL_RCC_OscConfig+0x240>)
 8004b4c:	681b      	ldr	r3, [r3, #0]
 8004b4e:	4a75      	ldr	r2, [pc, #468]	; (8004d24 <HAL_RCC_OscConfig+0x240>)
 8004b50:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004b54:	6013      	str	r3, [r2, #0]
 8004b56:	e01d      	b.n	8004b94 <HAL_RCC_OscConfig+0xb0>
 8004b58:	687b      	ldr	r3, [r7, #4]
 8004b5a:	685b      	ldr	r3, [r3, #4]
 8004b5c:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8004b60:	d10c      	bne.n	8004b7c <HAL_RCC_OscConfig+0x98>
 8004b62:	4b70      	ldr	r3, [pc, #448]	; (8004d24 <HAL_RCC_OscConfig+0x240>)
 8004b64:	681b      	ldr	r3, [r3, #0]
 8004b66:	4a6f      	ldr	r2, [pc, #444]	; (8004d24 <HAL_RCC_OscConfig+0x240>)
 8004b68:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8004b6c:	6013      	str	r3, [r2, #0]
 8004b6e:	4b6d      	ldr	r3, [pc, #436]	; (8004d24 <HAL_RCC_OscConfig+0x240>)
 8004b70:	681b      	ldr	r3, [r3, #0]
 8004b72:	4a6c      	ldr	r2, [pc, #432]	; (8004d24 <HAL_RCC_OscConfig+0x240>)
 8004b74:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004b78:	6013      	str	r3, [r2, #0]
 8004b7a:	e00b      	b.n	8004b94 <HAL_RCC_OscConfig+0xb0>
 8004b7c:	4b69      	ldr	r3, [pc, #420]	; (8004d24 <HAL_RCC_OscConfig+0x240>)
 8004b7e:	681b      	ldr	r3, [r3, #0]
 8004b80:	4a68      	ldr	r2, [pc, #416]	; (8004d24 <HAL_RCC_OscConfig+0x240>)
 8004b82:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8004b86:	6013      	str	r3, [r2, #0]
 8004b88:	4b66      	ldr	r3, [pc, #408]	; (8004d24 <HAL_RCC_OscConfig+0x240>)
 8004b8a:	681b      	ldr	r3, [r3, #0]
 8004b8c:	4a65      	ldr	r2, [pc, #404]	; (8004d24 <HAL_RCC_OscConfig+0x240>)
 8004b8e:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8004b92:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if ((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8004b94:	687b      	ldr	r3, [r7, #4]
 8004b96:	685b      	ldr	r3, [r3, #4]
 8004b98:	2b00      	cmp	r3, #0
 8004b9a:	d013      	beq.n	8004bc4 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004b9c:	f7fc fd3c 	bl	8001618 <HAL_GetTick>
 8004ba0:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8004ba2:	e008      	b.n	8004bb6 <HAL_RCC_OscConfig+0xd2>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8004ba4:	f7fc fd38 	bl	8001618 <HAL_GetTick>
 8004ba8:	4602      	mov	r2, r0
 8004baa:	693b      	ldr	r3, [r7, #16]
 8004bac:	1ad3      	subs	r3, r2, r3
 8004bae:	2b64      	cmp	r3, #100	; 0x64
 8004bb0:	d901      	bls.n	8004bb6 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8004bb2:	2303      	movs	r3, #3
 8004bb4:	e207      	b.n	8004fc6 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8004bb6:	4b5b      	ldr	r3, [pc, #364]	; (8004d24 <HAL_RCC_OscConfig+0x240>)
 8004bb8:	681b      	ldr	r3, [r3, #0]
 8004bba:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004bbe:	2b00      	cmp	r3, #0
 8004bc0:	d0f0      	beq.n	8004ba4 <HAL_RCC_OscConfig+0xc0>
 8004bc2:	e014      	b.n	8004bee <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004bc4:	f7fc fd28 	bl	8001618 <HAL_GetTick>
 8004bc8:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8004bca:	e008      	b.n	8004bde <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8004bcc:	f7fc fd24 	bl	8001618 <HAL_GetTick>
 8004bd0:	4602      	mov	r2, r0
 8004bd2:	693b      	ldr	r3, [r7, #16]
 8004bd4:	1ad3      	subs	r3, r2, r3
 8004bd6:	2b64      	cmp	r3, #100	; 0x64
 8004bd8:	d901      	bls.n	8004bde <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8004bda:	2303      	movs	r3, #3
 8004bdc:	e1f3      	b.n	8004fc6 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8004bde:	4b51      	ldr	r3, [pc, #324]	; (8004d24 <HAL_RCC_OscConfig+0x240>)
 8004be0:	681b      	ldr	r3, [r3, #0]
 8004be2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004be6:	2b00      	cmp	r3, #0
 8004be8:	d1f0      	bne.n	8004bcc <HAL_RCC_OscConfig+0xe8>
 8004bea:	e000      	b.n	8004bee <HAL_RCC_OscConfig+0x10a>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004bec:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8004bee:	687b      	ldr	r3, [r7, #4]
 8004bf0:	681b      	ldr	r3, [r3, #0]
 8004bf2:	f003 0302 	and.w	r3, r3, #2
 8004bf6:	2b00      	cmp	r3, #0
 8004bf8:	d063      	beq.n	8004cc2 <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) || \
 8004bfa:	4b4a      	ldr	r3, [pc, #296]	; (8004d24 <HAL_RCC_OscConfig+0x240>)
 8004bfc:	689b      	ldr	r3, [r3, #8]
 8004bfe:	f003 030c 	and.w	r3, r3, #12
 8004c02:	2b00      	cmp	r3, #0
 8004c04:	d00b      	beq.n	8004c1e <HAL_RCC_OscConfig+0x13a>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8004c06:	4b47      	ldr	r3, [pc, #284]	; (8004d24 <HAL_RCC_OscConfig+0x240>)
 8004c08:	689b      	ldr	r3, [r3, #8]
 8004c0a:	f003 030c 	and.w	r3, r3, #12
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) || \
 8004c0e:	2b08      	cmp	r3, #8
 8004c10:	d11c      	bne.n	8004c4c <HAL_RCC_OscConfig+0x168>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8004c12:	4b44      	ldr	r3, [pc, #272]	; (8004d24 <HAL_RCC_OscConfig+0x240>)
 8004c14:	685b      	ldr	r3, [r3, #4]
 8004c16:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8004c1a:	2b00      	cmp	r3, #0
 8004c1c:	d116      	bne.n	8004c4c <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8004c1e:	4b41      	ldr	r3, [pc, #260]	; (8004d24 <HAL_RCC_OscConfig+0x240>)
 8004c20:	681b      	ldr	r3, [r3, #0]
 8004c22:	f003 0302 	and.w	r3, r3, #2
 8004c26:	2b00      	cmp	r3, #0
 8004c28:	d005      	beq.n	8004c36 <HAL_RCC_OscConfig+0x152>
 8004c2a:	687b      	ldr	r3, [r7, #4]
 8004c2c:	68db      	ldr	r3, [r3, #12]
 8004c2e:	2b01      	cmp	r3, #1
 8004c30:	d001      	beq.n	8004c36 <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8004c32:	2301      	movs	r3, #1
 8004c34:	e1c7      	b.n	8004fc6 <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004c36:	4b3b      	ldr	r3, [pc, #236]	; (8004d24 <HAL_RCC_OscConfig+0x240>)
 8004c38:	681b      	ldr	r3, [r3, #0]
 8004c3a:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8004c3e:	687b      	ldr	r3, [r7, #4]
 8004c40:	691b      	ldr	r3, [r3, #16]
 8004c42:	00db      	lsls	r3, r3, #3
 8004c44:	4937      	ldr	r1, [pc, #220]	; (8004d24 <HAL_RCC_OscConfig+0x240>)
 8004c46:	4313      	orrs	r3, r2
 8004c48:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8004c4a:	e03a      	b.n	8004cc2 <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 8004c4c:	687b      	ldr	r3, [r7, #4]
 8004c4e:	68db      	ldr	r3, [r3, #12]
 8004c50:	2b00      	cmp	r3, #0
 8004c52:	d020      	beq.n	8004c96 <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8004c54:	4b34      	ldr	r3, [pc, #208]	; (8004d28 <HAL_RCC_OscConfig+0x244>)
 8004c56:	2201      	movs	r2, #1
 8004c58:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004c5a:	f7fc fcdd 	bl	8001618 <HAL_GetTick>
 8004c5e:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004c60:	e008      	b.n	8004c74 <HAL_RCC_OscConfig+0x190>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8004c62:	f7fc fcd9 	bl	8001618 <HAL_GetTick>
 8004c66:	4602      	mov	r2, r0
 8004c68:	693b      	ldr	r3, [r7, #16]
 8004c6a:	1ad3      	subs	r3, r2, r3
 8004c6c:	2b02      	cmp	r3, #2
 8004c6e:	d901      	bls.n	8004c74 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8004c70:	2303      	movs	r3, #3
 8004c72:	e1a8      	b.n	8004fc6 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004c74:	4b2b      	ldr	r3, [pc, #172]	; (8004d24 <HAL_RCC_OscConfig+0x240>)
 8004c76:	681b      	ldr	r3, [r3, #0]
 8004c78:	f003 0302 	and.w	r3, r3, #2
 8004c7c:	2b00      	cmp	r3, #0
 8004c7e:	d0f0      	beq.n	8004c62 <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004c80:	4b28      	ldr	r3, [pc, #160]	; (8004d24 <HAL_RCC_OscConfig+0x240>)
 8004c82:	681b      	ldr	r3, [r3, #0]
 8004c84:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8004c88:	687b      	ldr	r3, [r7, #4]
 8004c8a:	691b      	ldr	r3, [r3, #16]
 8004c8c:	00db      	lsls	r3, r3, #3
 8004c8e:	4925      	ldr	r1, [pc, #148]	; (8004d24 <HAL_RCC_OscConfig+0x240>)
 8004c90:	4313      	orrs	r3, r2
 8004c92:	600b      	str	r3, [r1, #0]
 8004c94:	e015      	b.n	8004cc2 <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8004c96:	4b24      	ldr	r3, [pc, #144]	; (8004d28 <HAL_RCC_OscConfig+0x244>)
 8004c98:	2200      	movs	r2, #0
 8004c9a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004c9c:	f7fc fcbc 	bl	8001618 <HAL_GetTick>
 8004ca0:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8004ca2:	e008      	b.n	8004cb6 <HAL_RCC_OscConfig+0x1d2>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8004ca4:	f7fc fcb8 	bl	8001618 <HAL_GetTick>
 8004ca8:	4602      	mov	r2, r0
 8004caa:	693b      	ldr	r3, [r7, #16]
 8004cac:	1ad3      	subs	r3, r2, r3
 8004cae:	2b02      	cmp	r3, #2
 8004cb0:	d901      	bls.n	8004cb6 <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8004cb2:	2303      	movs	r3, #3
 8004cb4:	e187      	b.n	8004fc6 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8004cb6:	4b1b      	ldr	r3, [pc, #108]	; (8004d24 <HAL_RCC_OscConfig+0x240>)
 8004cb8:	681b      	ldr	r3, [r3, #0]
 8004cba:	f003 0302 	and.w	r3, r3, #2
 8004cbe:	2b00      	cmp	r3, #0
 8004cc0:	d1f0      	bne.n	8004ca4 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8004cc2:	687b      	ldr	r3, [r7, #4]
 8004cc4:	681b      	ldr	r3, [r3, #0]
 8004cc6:	f003 0308 	and.w	r3, r3, #8
 8004cca:	2b00      	cmp	r3, #0
 8004ccc:	d036      	beq.n	8004d3c <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 8004cce:	687b      	ldr	r3, [r7, #4]
 8004cd0:	695b      	ldr	r3, [r3, #20]
 8004cd2:	2b00      	cmp	r3, #0
 8004cd4:	d016      	beq.n	8004d04 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8004cd6:	4b15      	ldr	r3, [pc, #84]	; (8004d2c <HAL_RCC_OscConfig+0x248>)
 8004cd8:	2201      	movs	r2, #1
 8004cda:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004cdc:	f7fc fc9c 	bl	8001618 <HAL_GetTick>
 8004ce0:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8004ce2:	e008      	b.n	8004cf6 <HAL_RCC_OscConfig+0x212>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8004ce4:	f7fc fc98 	bl	8001618 <HAL_GetTick>
 8004ce8:	4602      	mov	r2, r0
 8004cea:	693b      	ldr	r3, [r7, #16]
 8004cec:	1ad3      	subs	r3, r2, r3
 8004cee:	2b02      	cmp	r3, #2
 8004cf0:	d901      	bls.n	8004cf6 <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8004cf2:	2303      	movs	r3, #3
 8004cf4:	e167      	b.n	8004fc6 <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8004cf6:	4b0b      	ldr	r3, [pc, #44]	; (8004d24 <HAL_RCC_OscConfig+0x240>)
 8004cf8:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8004cfa:	f003 0302 	and.w	r3, r3, #2
 8004cfe:	2b00      	cmp	r3, #0
 8004d00:	d0f0      	beq.n	8004ce4 <HAL_RCC_OscConfig+0x200>
 8004d02:	e01b      	b.n	8004d3c <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8004d04:	4b09      	ldr	r3, [pc, #36]	; (8004d2c <HAL_RCC_OscConfig+0x248>)
 8004d06:	2200      	movs	r2, #0
 8004d08:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8004d0a:	f7fc fc85 	bl	8001618 <HAL_GetTick>
 8004d0e:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8004d10:	e00e      	b.n	8004d30 <HAL_RCC_OscConfig+0x24c>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8004d12:	f7fc fc81 	bl	8001618 <HAL_GetTick>
 8004d16:	4602      	mov	r2, r0
 8004d18:	693b      	ldr	r3, [r7, #16]
 8004d1a:	1ad3      	subs	r3, r2, r3
 8004d1c:	2b02      	cmp	r3, #2
 8004d1e:	d907      	bls.n	8004d30 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8004d20:	2303      	movs	r3, #3
 8004d22:	e150      	b.n	8004fc6 <HAL_RCC_OscConfig+0x4e2>
 8004d24:	40023800 	.word	0x40023800
 8004d28:	42470000 	.word	0x42470000
 8004d2c:	42470e80 	.word	0x42470e80
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8004d30:	4b88      	ldr	r3, [pc, #544]	; (8004f54 <HAL_RCC_OscConfig+0x470>)
 8004d32:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8004d34:	f003 0302 	and.w	r3, r3, #2
 8004d38:	2b00      	cmp	r3, #0
 8004d3a:	d1ea      	bne.n	8004d12 <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8004d3c:	687b      	ldr	r3, [r7, #4]
 8004d3e:	681b      	ldr	r3, [r3, #0]
 8004d40:	f003 0304 	and.w	r3, r3, #4
 8004d44:	2b00      	cmp	r3, #0
 8004d46:	f000 8097 	beq.w	8004e78 <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 8004d4a:	2300      	movs	r3, #0
 8004d4c:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8004d4e:	4b81      	ldr	r3, [pc, #516]	; (8004f54 <HAL_RCC_OscConfig+0x470>)
 8004d50:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004d52:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004d56:	2b00      	cmp	r3, #0
 8004d58:	d10f      	bne.n	8004d7a <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8004d5a:	2300      	movs	r3, #0
 8004d5c:	60bb      	str	r3, [r7, #8]
 8004d5e:	4b7d      	ldr	r3, [pc, #500]	; (8004f54 <HAL_RCC_OscConfig+0x470>)
 8004d60:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004d62:	4a7c      	ldr	r2, [pc, #496]	; (8004f54 <HAL_RCC_OscConfig+0x470>)
 8004d64:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004d68:	6413      	str	r3, [r2, #64]	; 0x40
 8004d6a:	4b7a      	ldr	r3, [pc, #488]	; (8004f54 <HAL_RCC_OscConfig+0x470>)
 8004d6c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004d6e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004d72:	60bb      	str	r3, [r7, #8]
 8004d74:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8004d76:	2301      	movs	r3, #1
 8004d78:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004d7a:	4b77      	ldr	r3, [pc, #476]	; (8004f58 <HAL_RCC_OscConfig+0x474>)
 8004d7c:	681b      	ldr	r3, [r3, #0]
 8004d7e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004d82:	2b00      	cmp	r3, #0
 8004d84:	d118      	bne.n	8004db8 <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8004d86:	4b74      	ldr	r3, [pc, #464]	; (8004f58 <HAL_RCC_OscConfig+0x474>)
 8004d88:	681b      	ldr	r3, [r3, #0]
 8004d8a:	4a73      	ldr	r2, [pc, #460]	; (8004f58 <HAL_RCC_OscConfig+0x474>)
 8004d8c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004d90:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8004d92:	f7fc fc41 	bl	8001618 <HAL_GetTick>
 8004d96:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004d98:	e008      	b.n	8004dac <HAL_RCC_OscConfig+0x2c8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8004d9a:	f7fc fc3d 	bl	8001618 <HAL_GetTick>
 8004d9e:	4602      	mov	r2, r0
 8004da0:	693b      	ldr	r3, [r7, #16]
 8004da2:	1ad3      	subs	r3, r2, r3
 8004da4:	2b02      	cmp	r3, #2
 8004da6:	d901      	bls.n	8004dac <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 8004da8:	2303      	movs	r3, #3
 8004daa:	e10c      	b.n	8004fc6 <HAL_RCC_OscConfig+0x4e2>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004dac:	4b6a      	ldr	r3, [pc, #424]	; (8004f58 <HAL_RCC_OscConfig+0x474>)
 8004dae:	681b      	ldr	r3, [r3, #0]
 8004db0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004db4:	2b00      	cmp	r3, #0
 8004db6:	d0f0      	beq.n	8004d9a <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8004db8:	687b      	ldr	r3, [r7, #4]
 8004dba:	689b      	ldr	r3, [r3, #8]
 8004dbc:	2b01      	cmp	r3, #1
 8004dbe:	d106      	bne.n	8004dce <HAL_RCC_OscConfig+0x2ea>
 8004dc0:	4b64      	ldr	r3, [pc, #400]	; (8004f54 <HAL_RCC_OscConfig+0x470>)
 8004dc2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004dc4:	4a63      	ldr	r2, [pc, #396]	; (8004f54 <HAL_RCC_OscConfig+0x470>)
 8004dc6:	f043 0301 	orr.w	r3, r3, #1
 8004dca:	6713      	str	r3, [r2, #112]	; 0x70
 8004dcc:	e01c      	b.n	8004e08 <HAL_RCC_OscConfig+0x324>
 8004dce:	687b      	ldr	r3, [r7, #4]
 8004dd0:	689b      	ldr	r3, [r3, #8]
 8004dd2:	2b05      	cmp	r3, #5
 8004dd4:	d10c      	bne.n	8004df0 <HAL_RCC_OscConfig+0x30c>
 8004dd6:	4b5f      	ldr	r3, [pc, #380]	; (8004f54 <HAL_RCC_OscConfig+0x470>)
 8004dd8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004dda:	4a5e      	ldr	r2, [pc, #376]	; (8004f54 <HAL_RCC_OscConfig+0x470>)
 8004ddc:	f043 0304 	orr.w	r3, r3, #4
 8004de0:	6713      	str	r3, [r2, #112]	; 0x70
 8004de2:	4b5c      	ldr	r3, [pc, #368]	; (8004f54 <HAL_RCC_OscConfig+0x470>)
 8004de4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004de6:	4a5b      	ldr	r2, [pc, #364]	; (8004f54 <HAL_RCC_OscConfig+0x470>)
 8004de8:	f043 0301 	orr.w	r3, r3, #1
 8004dec:	6713      	str	r3, [r2, #112]	; 0x70
 8004dee:	e00b      	b.n	8004e08 <HAL_RCC_OscConfig+0x324>
 8004df0:	4b58      	ldr	r3, [pc, #352]	; (8004f54 <HAL_RCC_OscConfig+0x470>)
 8004df2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004df4:	4a57      	ldr	r2, [pc, #348]	; (8004f54 <HAL_RCC_OscConfig+0x470>)
 8004df6:	f023 0301 	bic.w	r3, r3, #1
 8004dfa:	6713      	str	r3, [r2, #112]	; 0x70
 8004dfc:	4b55      	ldr	r3, [pc, #340]	; (8004f54 <HAL_RCC_OscConfig+0x470>)
 8004dfe:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004e00:	4a54      	ldr	r2, [pc, #336]	; (8004f54 <HAL_RCC_OscConfig+0x470>)
 8004e02:	f023 0304 	bic.w	r3, r3, #4
 8004e06:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8004e08:	687b      	ldr	r3, [r7, #4]
 8004e0a:	689b      	ldr	r3, [r3, #8]
 8004e0c:	2b00      	cmp	r3, #0
 8004e0e:	d015      	beq.n	8004e3c <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004e10:	f7fc fc02 	bl	8001618 <HAL_GetTick>
 8004e14:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004e16:	e00a      	b.n	8004e2e <HAL_RCC_OscConfig+0x34a>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8004e18:	f7fc fbfe 	bl	8001618 <HAL_GetTick>
 8004e1c:	4602      	mov	r2, r0
 8004e1e:	693b      	ldr	r3, [r7, #16]
 8004e20:	1ad3      	subs	r3, r2, r3
 8004e22:	f241 3288 	movw	r2, #5000	; 0x1388
 8004e26:	4293      	cmp	r3, r2
 8004e28:	d901      	bls.n	8004e2e <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 8004e2a:	2303      	movs	r3, #3
 8004e2c:	e0cb      	b.n	8004fc6 <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004e2e:	4b49      	ldr	r3, [pc, #292]	; (8004f54 <HAL_RCC_OscConfig+0x470>)
 8004e30:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004e32:	f003 0302 	and.w	r3, r3, #2
 8004e36:	2b00      	cmp	r3, #0
 8004e38:	d0ee      	beq.n	8004e18 <HAL_RCC_OscConfig+0x334>
 8004e3a:	e014      	b.n	8004e66 <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8004e3c:	f7fc fbec 	bl	8001618 <HAL_GetTick>
 8004e40:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8004e42:	e00a      	b.n	8004e5a <HAL_RCC_OscConfig+0x376>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8004e44:	f7fc fbe8 	bl	8001618 <HAL_GetTick>
 8004e48:	4602      	mov	r2, r0
 8004e4a:	693b      	ldr	r3, [r7, #16]
 8004e4c:	1ad3      	subs	r3, r2, r3
 8004e4e:	f241 3288 	movw	r2, #5000	; 0x1388
 8004e52:	4293      	cmp	r3, r2
 8004e54:	d901      	bls.n	8004e5a <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 8004e56:	2303      	movs	r3, #3
 8004e58:	e0b5      	b.n	8004fc6 <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8004e5a:	4b3e      	ldr	r3, [pc, #248]	; (8004f54 <HAL_RCC_OscConfig+0x470>)
 8004e5c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004e5e:	f003 0302 	and.w	r3, r3, #2
 8004e62:	2b00      	cmp	r3, #0
 8004e64:	d1ee      	bne.n	8004e44 <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 8004e66:	7dfb      	ldrb	r3, [r7, #23]
 8004e68:	2b01      	cmp	r3, #1
 8004e6a:	d105      	bne.n	8004e78 <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8004e6c:	4b39      	ldr	r3, [pc, #228]	; (8004f54 <HAL_RCC_OscConfig+0x470>)
 8004e6e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004e70:	4a38      	ldr	r2, [pc, #224]	; (8004f54 <HAL_RCC_OscConfig+0x470>)
 8004e72:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8004e76:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8004e78:	687b      	ldr	r3, [r7, #4]
 8004e7a:	699b      	ldr	r3, [r3, #24]
 8004e7c:	2b00      	cmp	r3, #0
 8004e7e:	f000 80a1 	beq.w	8004fc4 <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8004e82:	4b34      	ldr	r3, [pc, #208]	; (8004f54 <HAL_RCC_OscConfig+0x470>)
 8004e84:	689b      	ldr	r3, [r3, #8]
 8004e86:	f003 030c 	and.w	r3, r3, #12
 8004e8a:	2b08      	cmp	r3, #8
 8004e8c:	d05c      	beq.n	8004f48 <HAL_RCC_OscConfig+0x464>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8004e8e:	687b      	ldr	r3, [r7, #4]
 8004e90:	699b      	ldr	r3, [r3, #24]
 8004e92:	2b02      	cmp	r3, #2
 8004e94:	d141      	bne.n	8004f1a <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8004e96:	4b31      	ldr	r3, [pc, #196]	; (8004f5c <HAL_RCC_OscConfig+0x478>)
 8004e98:	2200      	movs	r2, #0
 8004e9a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004e9c:	f7fc fbbc 	bl	8001618 <HAL_GetTick>
 8004ea0:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8004ea2:	e008      	b.n	8004eb6 <HAL_RCC_OscConfig+0x3d2>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004ea4:	f7fc fbb8 	bl	8001618 <HAL_GetTick>
 8004ea8:	4602      	mov	r2, r0
 8004eaa:	693b      	ldr	r3, [r7, #16]
 8004eac:	1ad3      	subs	r3, r2, r3
 8004eae:	2b02      	cmp	r3, #2
 8004eb0:	d901      	bls.n	8004eb6 <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 8004eb2:	2303      	movs	r3, #3
 8004eb4:	e087      	b.n	8004fc6 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8004eb6:	4b27      	ldr	r3, [pc, #156]	; (8004f54 <HAL_RCC_OscConfig+0x470>)
 8004eb8:	681b      	ldr	r3, [r3, #0]
 8004eba:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004ebe:	2b00      	cmp	r3, #0
 8004ec0:	d1f0      	bne.n	8004ea4 <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8004ec2:	687b      	ldr	r3, [r7, #4]
 8004ec4:	69da      	ldr	r2, [r3, #28]
 8004ec6:	687b      	ldr	r3, [r7, #4]
 8004ec8:	6a1b      	ldr	r3, [r3, #32]
 8004eca:	431a      	orrs	r2, r3
 8004ecc:	687b      	ldr	r3, [r7, #4]
 8004ece:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004ed0:	019b      	lsls	r3, r3, #6
 8004ed2:	431a      	orrs	r2, r3
 8004ed4:	687b      	ldr	r3, [r7, #4]
 8004ed6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004ed8:	085b      	lsrs	r3, r3, #1
 8004eda:	3b01      	subs	r3, #1
 8004edc:	041b      	lsls	r3, r3, #16
 8004ede:	431a      	orrs	r2, r3
 8004ee0:	687b      	ldr	r3, [r7, #4]
 8004ee2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004ee4:	061b      	lsls	r3, r3, #24
 8004ee6:	491b      	ldr	r1, [pc, #108]	; (8004f54 <HAL_RCC_OscConfig+0x470>)
 8004ee8:	4313      	orrs	r3, r2
 8004eea:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8004eec:	4b1b      	ldr	r3, [pc, #108]	; (8004f5c <HAL_RCC_OscConfig+0x478>)
 8004eee:	2201      	movs	r2, #1
 8004ef0:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004ef2:	f7fc fb91 	bl	8001618 <HAL_GetTick>
 8004ef6:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8004ef8:	e008      	b.n	8004f0c <HAL_RCC_OscConfig+0x428>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004efa:	f7fc fb8d 	bl	8001618 <HAL_GetTick>
 8004efe:	4602      	mov	r2, r0
 8004f00:	693b      	ldr	r3, [r7, #16]
 8004f02:	1ad3      	subs	r3, r2, r3
 8004f04:	2b02      	cmp	r3, #2
 8004f06:	d901      	bls.n	8004f0c <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 8004f08:	2303      	movs	r3, #3
 8004f0a:	e05c      	b.n	8004fc6 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8004f0c:	4b11      	ldr	r3, [pc, #68]	; (8004f54 <HAL_RCC_OscConfig+0x470>)
 8004f0e:	681b      	ldr	r3, [r3, #0]
 8004f10:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004f14:	2b00      	cmp	r3, #0
 8004f16:	d0f0      	beq.n	8004efa <HAL_RCC_OscConfig+0x416>
 8004f18:	e054      	b.n	8004fc4 <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8004f1a:	4b10      	ldr	r3, [pc, #64]	; (8004f5c <HAL_RCC_OscConfig+0x478>)
 8004f1c:	2200      	movs	r2, #0
 8004f1e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004f20:	f7fc fb7a 	bl	8001618 <HAL_GetTick>
 8004f24:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8004f26:	e008      	b.n	8004f3a <HAL_RCC_OscConfig+0x456>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004f28:	f7fc fb76 	bl	8001618 <HAL_GetTick>
 8004f2c:	4602      	mov	r2, r0
 8004f2e:	693b      	ldr	r3, [r7, #16]
 8004f30:	1ad3      	subs	r3, r2, r3
 8004f32:	2b02      	cmp	r3, #2
 8004f34:	d901      	bls.n	8004f3a <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 8004f36:	2303      	movs	r3, #3
 8004f38:	e045      	b.n	8004fc6 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8004f3a:	4b06      	ldr	r3, [pc, #24]	; (8004f54 <HAL_RCC_OscConfig+0x470>)
 8004f3c:	681b      	ldr	r3, [r3, #0]
 8004f3e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004f42:	2b00      	cmp	r3, #0
 8004f44:	d1f0      	bne.n	8004f28 <HAL_RCC_OscConfig+0x444>
 8004f46:	e03d      	b.n	8004fc4 <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8004f48:	687b      	ldr	r3, [r7, #4]
 8004f4a:	699b      	ldr	r3, [r3, #24]
 8004f4c:	2b01      	cmp	r3, #1
 8004f4e:	d107      	bne.n	8004f60 <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 8004f50:	2301      	movs	r3, #1
 8004f52:	e038      	b.n	8004fc6 <HAL_RCC_OscConfig+0x4e2>
 8004f54:	40023800 	.word	0x40023800
 8004f58:	40007000 	.word	0x40007000
 8004f5c:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8004f60:	4b1b      	ldr	r3, [pc, #108]	; (8004fd0 <HAL_RCC_OscConfig+0x4ec>)
 8004f62:	685b      	ldr	r3, [r3, #4]
 8004f64:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8004f66:	687b      	ldr	r3, [r7, #4]
 8004f68:	699b      	ldr	r3, [r3, #24]
 8004f6a:	2b01      	cmp	r3, #1
 8004f6c:	d028      	beq.n	8004fc0 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8004f6e:	68fb      	ldr	r3, [r7, #12]
 8004f70:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8004f74:	687b      	ldr	r3, [r7, #4]
 8004f76:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8004f78:	429a      	cmp	r2, r3
 8004f7a:	d121      	bne.n	8004fc0 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8004f7c:	68fb      	ldr	r3, [r7, #12]
 8004f7e:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8004f82:	687b      	ldr	r3, [r7, #4]
 8004f84:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8004f86:	429a      	cmp	r2, r3
 8004f88:	d11a      	bne.n	8004fc0 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8004f8a:	68fa      	ldr	r2, [r7, #12]
 8004f8c:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8004f90:	4013      	ands	r3, r2
 8004f92:	687a      	ldr	r2, [r7, #4]
 8004f94:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8004f96:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8004f98:	4293      	cmp	r3, r2
 8004f9a:	d111      	bne.n	8004fc0 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8004f9c:	68fb      	ldr	r3, [r7, #12]
 8004f9e:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8004fa2:	687b      	ldr	r3, [r7, #4]
 8004fa4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004fa6:	085b      	lsrs	r3, r3, #1
 8004fa8:	3b01      	subs	r3, #1
 8004faa:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8004fac:	429a      	cmp	r2, r3
 8004fae:	d107      	bne.n	8004fc0 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8004fb0:	68fb      	ldr	r3, [r7, #12]
 8004fb2:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8004fb6:	687b      	ldr	r3, [r7, #4]
 8004fb8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004fba:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8004fbc:	429a      	cmp	r2, r3
 8004fbe:	d001      	beq.n	8004fc4 <HAL_RCC_OscConfig+0x4e0>
#endif /* RCC_PLLCFGR_PLLR */
        {
          return HAL_ERROR;
 8004fc0:	2301      	movs	r3, #1
 8004fc2:	e000      	b.n	8004fc6 <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 8004fc4:	2300      	movs	r3, #0
}
 8004fc6:	4618      	mov	r0, r3
 8004fc8:	3718      	adds	r7, #24
 8004fca:	46bd      	mov	sp, r7
 8004fcc:	bd80      	pop	{r7, pc}
 8004fce:	bf00      	nop
 8004fd0:	40023800 	.word	0x40023800

08004fd4 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8004fd4:	b580      	push	{r7, lr}
 8004fd6:	b084      	sub	sp, #16
 8004fd8:	af00      	add	r7, sp, #0
 8004fda:	6078      	str	r0, [r7, #4]
 8004fdc:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8004fde:	687b      	ldr	r3, [r7, #4]
 8004fe0:	2b00      	cmp	r3, #0
 8004fe2:	d101      	bne.n	8004fe8 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8004fe4:	2301      	movs	r3, #1
 8004fe6:	e0cc      	b.n	8005182 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8004fe8:	4b68      	ldr	r3, [pc, #416]	; (800518c <HAL_RCC_ClockConfig+0x1b8>)
 8004fea:	681b      	ldr	r3, [r3, #0]
 8004fec:	f003 0307 	and.w	r3, r3, #7
 8004ff0:	683a      	ldr	r2, [r7, #0]
 8004ff2:	429a      	cmp	r2, r3
 8004ff4:	d90c      	bls.n	8005010 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004ff6:	4b65      	ldr	r3, [pc, #404]	; (800518c <HAL_RCC_ClockConfig+0x1b8>)
 8004ff8:	683a      	ldr	r2, [r7, #0]
 8004ffa:	b2d2      	uxtb	r2, r2
 8004ffc:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8004ffe:	4b63      	ldr	r3, [pc, #396]	; (800518c <HAL_RCC_ClockConfig+0x1b8>)
 8005000:	681b      	ldr	r3, [r3, #0]
 8005002:	f003 0307 	and.w	r3, r3, #7
 8005006:	683a      	ldr	r2, [r7, #0]
 8005008:	429a      	cmp	r2, r3
 800500a:	d001      	beq.n	8005010 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 800500c:	2301      	movs	r3, #1
 800500e:	e0b8      	b.n	8005182 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8005010:	687b      	ldr	r3, [r7, #4]
 8005012:	681b      	ldr	r3, [r3, #0]
 8005014:	f003 0302 	and.w	r3, r3, #2
 8005018:	2b00      	cmp	r3, #0
 800501a:	d020      	beq.n	800505e <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800501c:	687b      	ldr	r3, [r7, #4]
 800501e:	681b      	ldr	r3, [r3, #0]
 8005020:	f003 0304 	and.w	r3, r3, #4
 8005024:	2b00      	cmp	r3, #0
 8005026:	d005      	beq.n	8005034 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8005028:	4b59      	ldr	r3, [pc, #356]	; (8005190 <HAL_RCC_ClockConfig+0x1bc>)
 800502a:	689b      	ldr	r3, [r3, #8]
 800502c:	4a58      	ldr	r2, [pc, #352]	; (8005190 <HAL_RCC_ClockConfig+0x1bc>)
 800502e:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8005032:	6093      	str	r3, [r2, #8]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8005034:	687b      	ldr	r3, [r7, #4]
 8005036:	681b      	ldr	r3, [r3, #0]
 8005038:	f003 0308 	and.w	r3, r3, #8
 800503c:	2b00      	cmp	r3, #0
 800503e:	d005      	beq.n	800504c <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8005040:	4b53      	ldr	r3, [pc, #332]	; (8005190 <HAL_RCC_ClockConfig+0x1bc>)
 8005042:	689b      	ldr	r3, [r3, #8]
 8005044:	4a52      	ldr	r2, [pc, #328]	; (8005190 <HAL_RCC_ClockConfig+0x1bc>)
 8005046:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 800504a:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800504c:	4b50      	ldr	r3, [pc, #320]	; (8005190 <HAL_RCC_ClockConfig+0x1bc>)
 800504e:	689b      	ldr	r3, [r3, #8]
 8005050:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8005054:	687b      	ldr	r3, [r7, #4]
 8005056:	689b      	ldr	r3, [r3, #8]
 8005058:	494d      	ldr	r1, [pc, #308]	; (8005190 <HAL_RCC_ClockConfig+0x1bc>)
 800505a:	4313      	orrs	r3, r2
 800505c:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800505e:	687b      	ldr	r3, [r7, #4]
 8005060:	681b      	ldr	r3, [r3, #0]
 8005062:	f003 0301 	and.w	r3, r3, #1
 8005066:	2b00      	cmp	r3, #0
 8005068:	d044      	beq.n	80050f4 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800506a:	687b      	ldr	r3, [r7, #4]
 800506c:	685b      	ldr	r3, [r3, #4]
 800506e:	2b01      	cmp	r3, #1
 8005070:	d107      	bne.n	8005082 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8005072:	4b47      	ldr	r3, [pc, #284]	; (8005190 <HAL_RCC_ClockConfig+0x1bc>)
 8005074:	681b      	ldr	r3, [r3, #0]
 8005076:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800507a:	2b00      	cmp	r3, #0
 800507c:	d119      	bne.n	80050b2 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800507e:	2301      	movs	r3, #1
 8005080:	e07f      	b.n	8005182 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8005082:	687b      	ldr	r3, [r7, #4]
 8005084:	685b      	ldr	r3, [r3, #4]
 8005086:	2b02      	cmp	r3, #2
 8005088:	d003      	beq.n	8005092 <HAL_RCC_ClockConfig+0xbe>
             (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 800508a:	687b      	ldr	r3, [r7, #4]
 800508c:	685b      	ldr	r3, [r3, #4]
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800508e:	2b03      	cmp	r3, #3
 8005090:	d107      	bne.n	80050a2 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8005092:	4b3f      	ldr	r3, [pc, #252]	; (8005190 <HAL_RCC_ClockConfig+0x1bc>)
 8005094:	681b      	ldr	r3, [r3, #0]
 8005096:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800509a:	2b00      	cmp	r3, #0
 800509c:	d109      	bne.n	80050b2 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800509e:	2301      	movs	r3, #1
 80050a0:	e06f      	b.n	8005182 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80050a2:	4b3b      	ldr	r3, [pc, #236]	; (8005190 <HAL_RCC_ClockConfig+0x1bc>)
 80050a4:	681b      	ldr	r3, [r3, #0]
 80050a6:	f003 0302 	and.w	r3, r3, #2
 80050aa:	2b00      	cmp	r3, #0
 80050ac:	d101      	bne.n	80050b2 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80050ae:	2301      	movs	r3, #1
 80050b0:	e067      	b.n	8005182 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80050b2:	4b37      	ldr	r3, [pc, #220]	; (8005190 <HAL_RCC_ClockConfig+0x1bc>)
 80050b4:	689b      	ldr	r3, [r3, #8]
 80050b6:	f023 0203 	bic.w	r2, r3, #3
 80050ba:	687b      	ldr	r3, [r7, #4]
 80050bc:	685b      	ldr	r3, [r3, #4]
 80050be:	4934      	ldr	r1, [pc, #208]	; (8005190 <HAL_RCC_ClockConfig+0x1bc>)
 80050c0:	4313      	orrs	r3, r2
 80050c2:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80050c4:	f7fc faa8 	bl	8001618 <HAL_GetTick>
 80050c8:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80050ca:	e00a      	b.n	80050e2 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80050cc:	f7fc faa4 	bl	8001618 <HAL_GetTick>
 80050d0:	4602      	mov	r2, r0
 80050d2:	68fb      	ldr	r3, [r7, #12]
 80050d4:	1ad3      	subs	r3, r2, r3
 80050d6:	f241 3288 	movw	r2, #5000	; 0x1388
 80050da:	4293      	cmp	r3, r2
 80050dc:	d901      	bls.n	80050e2 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 80050de:	2303      	movs	r3, #3
 80050e0:	e04f      	b.n	8005182 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80050e2:	4b2b      	ldr	r3, [pc, #172]	; (8005190 <HAL_RCC_ClockConfig+0x1bc>)
 80050e4:	689b      	ldr	r3, [r3, #8]
 80050e6:	f003 020c 	and.w	r2, r3, #12
 80050ea:	687b      	ldr	r3, [r7, #4]
 80050ec:	685b      	ldr	r3, [r3, #4]
 80050ee:	009b      	lsls	r3, r3, #2
 80050f0:	429a      	cmp	r2, r3
 80050f2:	d1eb      	bne.n	80050cc <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 80050f4:	4b25      	ldr	r3, [pc, #148]	; (800518c <HAL_RCC_ClockConfig+0x1b8>)
 80050f6:	681b      	ldr	r3, [r3, #0]
 80050f8:	f003 0307 	and.w	r3, r3, #7
 80050fc:	683a      	ldr	r2, [r7, #0]
 80050fe:	429a      	cmp	r2, r3
 8005100:	d20c      	bcs.n	800511c <HAL_RCC_ClockConfig+0x148>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8005102:	4b22      	ldr	r3, [pc, #136]	; (800518c <HAL_RCC_ClockConfig+0x1b8>)
 8005104:	683a      	ldr	r2, [r7, #0]
 8005106:	b2d2      	uxtb	r2, r2
 8005108:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800510a:	4b20      	ldr	r3, [pc, #128]	; (800518c <HAL_RCC_ClockConfig+0x1b8>)
 800510c:	681b      	ldr	r3, [r3, #0]
 800510e:	f003 0307 	and.w	r3, r3, #7
 8005112:	683a      	ldr	r2, [r7, #0]
 8005114:	429a      	cmp	r2, r3
 8005116:	d001      	beq.n	800511c <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8005118:	2301      	movs	r3, #1
 800511a:	e032      	b.n	8005182 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800511c:	687b      	ldr	r3, [r7, #4]
 800511e:	681b      	ldr	r3, [r3, #0]
 8005120:	f003 0304 	and.w	r3, r3, #4
 8005124:	2b00      	cmp	r3, #0
 8005126:	d008      	beq.n	800513a <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8005128:	4b19      	ldr	r3, [pc, #100]	; (8005190 <HAL_RCC_ClockConfig+0x1bc>)
 800512a:	689b      	ldr	r3, [r3, #8]
 800512c:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8005130:	687b      	ldr	r3, [r7, #4]
 8005132:	68db      	ldr	r3, [r3, #12]
 8005134:	4916      	ldr	r1, [pc, #88]	; (8005190 <HAL_RCC_ClockConfig+0x1bc>)
 8005136:	4313      	orrs	r3, r2
 8005138:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800513a:	687b      	ldr	r3, [r7, #4]
 800513c:	681b      	ldr	r3, [r3, #0]
 800513e:	f003 0308 	and.w	r3, r3, #8
 8005142:	2b00      	cmp	r3, #0
 8005144:	d009      	beq.n	800515a <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8005146:	4b12      	ldr	r3, [pc, #72]	; (8005190 <HAL_RCC_ClockConfig+0x1bc>)
 8005148:	689b      	ldr	r3, [r3, #8]
 800514a:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 800514e:	687b      	ldr	r3, [r7, #4]
 8005150:	691b      	ldr	r3, [r3, #16]
 8005152:	00db      	lsls	r3, r3, #3
 8005154:	490e      	ldr	r1, [pc, #56]	; (8005190 <HAL_RCC_ClockConfig+0x1bc>)
 8005156:	4313      	orrs	r3, r2
 8005158:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 800515a:	f000 f821 	bl	80051a0 <HAL_RCC_GetSysClockFreq>
 800515e:	4602      	mov	r2, r0
 8005160:	4b0b      	ldr	r3, [pc, #44]	; (8005190 <HAL_RCC_ClockConfig+0x1bc>)
 8005162:	689b      	ldr	r3, [r3, #8]
 8005164:	091b      	lsrs	r3, r3, #4
 8005166:	f003 030f 	and.w	r3, r3, #15
 800516a:	490a      	ldr	r1, [pc, #40]	; (8005194 <HAL_RCC_ClockConfig+0x1c0>)
 800516c:	5ccb      	ldrb	r3, [r1, r3]
 800516e:	fa22 f303 	lsr.w	r3, r2, r3
 8005172:	4a09      	ldr	r2, [pc, #36]	; (8005198 <HAL_RCC_ClockConfig+0x1c4>)
 8005174:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick(uwTickPrio);
 8005176:	4b09      	ldr	r3, [pc, #36]	; (800519c <HAL_RCC_ClockConfig+0x1c8>)
 8005178:	681b      	ldr	r3, [r3, #0]
 800517a:	4618      	mov	r0, r3
 800517c:	f7fc fa08 	bl	8001590 <HAL_InitTick>

  return HAL_OK;
 8005180:	2300      	movs	r3, #0
}
 8005182:	4618      	mov	r0, r3
 8005184:	3710      	adds	r7, #16
 8005186:	46bd      	mov	sp, r7
 8005188:	bd80      	pop	{r7, pc}
 800518a:	bf00      	nop
 800518c:	40023c00 	.word	0x40023c00
 8005190:	40023800 	.word	0x40023800
 8005194:	0801c1b0 	.word	0x0801c1b0
 8005198:	20000000 	.word	0x20000000
 800519c:	20000004 	.word	0x20000004

080051a0 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80051a0:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80051a4:	b090      	sub	sp, #64	; 0x40
 80051a6:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U;
 80051a8:	2300      	movs	r3, #0
 80051aa:	637b      	str	r3, [r7, #52]	; 0x34
  uint32_t pllvco = 0U;
 80051ac:	2300      	movs	r3, #0
 80051ae:	63fb      	str	r3, [r7, #60]	; 0x3c
  uint32_t pllp = 0U;
 80051b0:	2300      	movs	r3, #0
 80051b2:	633b      	str	r3, [r7, #48]	; 0x30
  uint32_t sysclockfreq = 0U;
 80051b4:	2300      	movs	r3, #0
 80051b6:	63bb      	str	r3, [r7, #56]	; 0x38

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 80051b8:	4b59      	ldr	r3, [pc, #356]	; (8005320 <HAL_RCC_GetSysClockFreq+0x180>)
 80051ba:	689b      	ldr	r3, [r3, #8]
 80051bc:	f003 030c 	and.w	r3, r3, #12
 80051c0:	2b08      	cmp	r3, #8
 80051c2:	d00d      	beq.n	80051e0 <HAL_RCC_GetSysClockFreq+0x40>
 80051c4:	2b08      	cmp	r3, #8
 80051c6:	f200 80a1 	bhi.w	800530c <HAL_RCC_GetSysClockFreq+0x16c>
 80051ca:	2b00      	cmp	r3, #0
 80051cc:	d002      	beq.n	80051d4 <HAL_RCC_GetSysClockFreq+0x34>
 80051ce:	2b04      	cmp	r3, #4
 80051d0:	d003      	beq.n	80051da <HAL_RCC_GetSysClockFreq+0x3a>
 80051d2:	e09b      	b.n	800530c <HAL_RCC_GetSysClockFreq+0x16c>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 80051d4:	4b53      	ldr	r3, [pc, #332]	; (8005324 <HAL_RCC_GetSysClockFreq+0x184>)
 80051d6:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 80051d8:	e09b      	b.n	8005312 <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 80051da:	4b53      	ldr	r3, [pc, #332]	; (8005328 <HAL_RCC_GetSysClockFreq+0x188>)
 80051dc:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 80051de:	e098      	b.n	8005312 <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 80051e0:	4b4f      	ldr	r3, [pc, #316]	; (8005320 <HAL_RCC_GetSysClockFreq+0x180>)
 80051e2:	685b      	ldr	r3, [r3, #4]
 80051e4:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80051e8:	637b      	str	r3, [r7, #52]	; 0x34
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 80051ea:	4b4d      	ldr	r3, [pc, #308]	; (8005320 <HAL_RCC_GetSysClockFreq+0x180>)
 80051ec:	685b      	ldr	r3, [r3, #4]
 80051ee:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80051f2:	2b00      	cmp	r3, #0
 80051f4:	d028      	beq.n	8005248 <HAL_RCC_GetSysClockFreq+0xa8>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80051f6:	4b4a      	ldr	r3, [pc, #296]	; (8005320 <HAL_RCC_GetSysClockFreq+0x180>)
 80051f8:	685b      	ldr	r3, [r3, #4]
 80051fa:	099b      	lsrs	r3, r3, #6
 80051fc:	2200      	movs	r2, #0
 80051fe:	623b      	str	r3, [r7, #32]
 8005200:	627a      	str	r2, [r7, #36]	; 0x24
 8005202:	6a3b      	ldr	r3, [r7, #32]
 8005204:	f3c3 0008 	ubfx	r0, r3, #0, #9
 8005208:	2100      	movs	r1, #0
 800520a:	4b47      	ldr	r3, [pc, #284]	; (8005328 <HAL_RCC_GetSysClockFreq+0x188>)
 800520c:	fb03 f201 	mul.w	r2, r3, r1
 8005210:	2300      	movs	r3, #0
 8005212:	fb00 f303 	mul.w	r3, r0, r3
 8005216:	4413      	add	r3, r2
 8005218:	4a43      	ldr	r2, [pc, #268]	; (8005328 <HAL_RCC_GetSysClockFreq+0x188>)
 800521a:	fba0 1202 	umull	r1, r2, r0, r2
 800521e:	62fa      	str	r2, [r7, #44]	; 0x2c
 8005220:	460a      	mov	r2, r1
 8005222:	62ba      	str	r2, [r7, #40]	; 0x28
 8005224:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8005226:	4413      	add	r3, r2
 8005228:	62fb      	str	r3, [r7, #44]	; 0x2c
 800522a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800522c:	2200      	movs	r2, #0
 800522e:	61bb      	str	r3, [r7, #24]
 8005230:	61fa      	str	r2, [r7, #28]
 8005232:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8005236:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	; 0x28
 800523a:	f7fb f821 	bl	8000280 <__aeabi_uldivmod>
 800523e:	4602      	mov	r2, r0
 8005240:	460b      	mov	r3, r1
 8005242:	4613      	mov	r3, r2
 8005244:	63fb      	str	r3, [r7, #60]	; 0x3c
 8005246:	e053      	b.n	80052f0 <HAL_RCC_GetSysClockFreq+0x150>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8005248:	4b35      	ldr	r3, [pc, #212]	; (8005320 <HAL_RCC_GetSysClockFreq+0x180>)
 800524a:	685b      	ldr	r3, [r3, #4]
 800524c:	099b      	lsrs	r3, r3, #6
 800524e:	2200      	movs	r2, #0
 8005250:	613b      	str	r3, [r7, #16]
 8005252:	617a      	str	r2, [r7, #20]
 8005254:	693b      	ldr	r3, [r7, #16]
 8005256:	f3c3 0a08 	ubfx	sl, r3, #0, #9
 800525a:	f04f 0b00 	mov.w	fp, #0
 800525e:	4652      	mov	r2, sl
 8005260:	465b      	mov	r3, fp
 8005262:	f04f 0000 	mov.w	r0, #0
 8005266:	f04f 0100 	mov.w	r1, #0
 800526a:	0159      	lsls	r1, r3, #5
 800526c:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8005270:	0150      	lsls	r0, r2, #5
 8005272:	4602      	mov	r2, r0
 8005274:	460b      	mov	r3, r1
 8005276:	ebb2 080a 	subs.w	r8, r2, sl
 800527a:	eb63 090b 	sbc.w	r9, r3, fp
 800527e:	f04f 0200 	mov.w	r2, #0
 8005282:	f04f 0300 	mov.w	r3, #0
 8005286:	ea4f 1389 	mov.w	r3, r9, lsl #6
 800528a:	ea43 6398 	orr.w	r3, r3, r8, lsr #26
 800528e:	ea4f 1288 	mov.w	r2, r8, lsl #6
 8005292:	ebb2 0408 	subs.w	r4, r2, r8
 8005296:	eb63 0509 	sbc.w	r5, r3, r9
 800529a:	f04f 0200 	mov.w	r2, #0
 800529e:	f04f 0300 	mov.w	r3, #0
 80052a2:	00eb      	lsls	r3, r5, #3
 80052a4:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 80052a8:	00e2      	lsls	r2, r4, #3
 80052aa:	4614      	mov	r4, r2
 80052ac:	461d      	mov	r5, r3
 80052ae:	eb14 030a 	adds.w	r3, r4, sl
 80052b2:	603b      	str	r3, [r7, #0]
 80052b4:	eb45 030b 	adc.w	r3, r5, fp
 80052b8:	607b      	str	r3, [r7, #4]
 80052ba:	f04f 0200 	mov.w	r2, #0
 80052be:	f04f 0300 	mov.w	r3, #0
 80052c2:	e9d7 4500 	ldrd	r4, r5, [r7]
 80052c6:	4629      	mov	r1, r5
 80052c8:	028b      	lsls	r3, r1, #10
 80052ca:	4621      	mov	r1, r4
 80052cc:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 80052d0:	4621      	mov	r1, r4
 80052d2:	028a      	lsls	r2, r1, #10
 80052d4:	4610      	mov	r0, r2
 80052d6:	4619      	mov	r1, r3
 80052d8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80052da:	2200      	movs	r2, #0
 80052dc:	60bb      	str	r3, [r7, #8]
 80052de:	60fa      	str	r2, [r7, #12]
 80052e0:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 80052e4:	f7fa ffcc 	bl	8000280 <__aeabi_uldivmod>
 80052e8:	4602      	mov	r2, r0
 80052ea:	460b      	mov	r3, r1
 80052ec:	4613      	mov	r3, r2
 80052ee:	63fb      	str	r3, [r7, #60]	; 0x3c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) * 2U);
 80052f0:	4b0b      	ldr	r3, [pc, #44]	; (8005320 <HAL_RCC_GetSysClockFreq+0x180>)
 80052f2:	685b      	ldr	r3, [r3, #4]
 80052f4:	0c1b      	lsrs	r3, r3, #16
 80052f6:	f003 0303 	and.w	r3, r3, #3
 80052fa:	3301      	adds	r3, #1
 80052fc:	005b      	lsls	r3, r3, #1
 80052fe:	633b      	str	r3, [r7, #48]	; 0x30

      sysclockfreq = pllvco / pllp;
 8005300:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8005302:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005304:	fbb2 f3f3 	udiv	r3, r2, r3
 8005308:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 800530a:	e002      	b.n	8005312 <HAL_RCC_GetSysClockFreq+0x172>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 800530c:	4b05      	ldr	r3, [pc, #20]	; (8005324 <HAL_RCC_GetSysClockFreq+0x184>)
 800530e:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 8005310:	bf00      	nop
    }
  }
  return sysclockfreq;
 8005312:	6bbb      	ldr	r3, [r7, #56]	; 0x38
}
 8005314:	4618      	mov	r0, r3
 8005316:	3740      	adds	r7, #64	; 0x40
 8005318:	46bd      	mov	sp, r7
 800531a:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800531e:	bf00      	nop
 8005320:	40023800 	.word	0x40023800
 8005324:	00f42400 	.word	0x00f42400
 8005328:	017d7840 	.word	0x017d7840

0800532c <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 800532c:	b480      	push	{r7}
 800532e:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8005330:	4b03      	ldr	r3, [pc, #12]	; (8005340 <HAL_RCC_GetHCLKFreq+0x14>)
 8005332:	681b      	ldr	r3, [r3, #0]
}
 8005334:	4618      	mov	r0, r3
 8005336:	46bd      	mov	sp, r7
 8005338:	f85d 7b04 	ldr.w	r7, [sp], #4
 800533c:	4770      	bx	lr
 800533e:	bf00      	nop
 8005340:	20000000 	.word	0x20000000

08005344 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8005344:	b580      	push	{r7, lr}
 8005346:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8005348:	f7ff fff0 	bl	800532c <HAL_RCC_GetHCLKFreq>
 800534c:	4602      	mov	r2, r0
 800534e:	4b05      	ldr	r3, [pc, #20]	; (8005364 <HAL_RCC_GetPCLK1Freq+0x20>)
 8005350:	689b      	ldr	r3, [r3, #8]
 8005352:	0a9b      	lsrs	r3, r3, #10
 8005354:	f003 0307 	and.w	r3, r3, #7
 8005358:	4903      	ldr	r1, [pc, #12]	; (8005368 <HAL_RCC_GetPCLK1Freq+0x24>)
 800535a:	5ccb      	ldrb	r3, [r1, r3]
 800535c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8005360:	4618      	mov	r0, r3
 8005362:	bd80      	pop	{r7, pc}
 8005364:	40023800 	.word	0x40023800
 8005368:	0801c1c0 	.word	0x0801c1c0

0800536c <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 800536c:	b580      	push	{r7, lr}
 800536e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8005370:	f7ff ffdc 	bl	800532c <HAL_RCC_GetHCLKFreq>
 8005374:	4602      	mov	r2, r0
 8005376:	4b05      	ldr	r3, [pc, #20]	; (800538c <HAL_RCC_GetPCLK2Freq+0x20>)
 8005378:	689b      	ldr	r3, [r3, #8]
 800537a:	0b5b      	lsrs	r3, r3, #13
 800537c:	f003 0307 	and.w	r3, r3, #7
 8005380:	4903      	ldr	r1, [pc, #12]	; (8005390 <HAL_RCC_GetPCLK2Freq+0x24>)
 8005382:	5ccb      	ldrb	r3, [r1, r3]
 8005384:	fa22 f303 	lsr.w	r3, r2, r3
}
 8005388:	4618      	mov	r0, r3
 800538a:	bd80      	pop	{r7, pc}
 800538c:	40023800 	.word	0x40023800
 8005390:	0801c1c0 	.word	0x0801c1c0

08005394 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8005394:	b580      	push	{r7, lr}
 8005396:	b082      	sub	sp, #8
 8005398:	af00      	add	r7, sp, #0
 800539a:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 800539c:	687b      	ldr	r3, [r7, #4]
 800539e:	2b00      	cmp	r3, #0
 80053a0:	d101      	bne.n	80053a6 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80053a2:	2301      	movs	r3, #1
 80053a4:	e042      	b.n	800542c <HAL_UART_Init+0x98>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 80053a6:	687b      	ldr	r3, [r7, #4]
 80053a8:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80053ac:	b2db      	uxtb	r3, r3
 80053ae:	2b00      	cmp	r3, #0
 80053b0:	d106      	bne.n	80053c0 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80053b2:	687b      	ldr	r3, [r7, #4]
 80053b4:	2200      	movs	r2, #0
 80053b6:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80053ba:	6878      	ldr	r0, [r7, #4]
 80053bc:	f7fb fa38 	bl	8000830 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80053c0:	687b      	ldr	r3, [r7, #4]
 80053c2:	2224      	movs	r2, #36	; 0x24
 80053c4:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 80053c8:	687b      	ldr	r3, [r7, #4]
 80053ca:	681b      	ldr	r3, [r3, #0]
 80053cc:	68da      	ldr	r2, [r3, #12]
 80053ce:	687b      	ldr	r3, [r7, #4]
 80053d0:	681b      	ldr	r3, [r3, #0]
 80053d2:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 80053d6:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 80053d8:	6878      	ldr	r0, [r7, #4]
 80053da:	f000 fdcb 	bl	8005f74 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80053de:	687b      	ldr	r3, [r7, #4]
 80053e0:	681b      	ldr	r3, [r3, #0]
 80053e2:	691a      	ldr	r2, [r3, #16]
 80053e4:	687b      	ldr	r3, [r7, #4]
 80053e6:	681b      	ldr	r3, [r3, #0]
 80053e8:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 80053ec:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80053ee:	687b      	ldr	r3, [r7, #4]
 80053f0:	681b      	ldr	r3, [r3, #0]
 80053f2:	695a      	ldr	r2, [r3, #20]
 80053f4:	687b      	ldr	r3, [r7, #4]
 80053f6:	681b      	ldr	r3, [r3, #0]
 80053f8:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 80053fc:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 80053fe:	687b      	ldr	r3, [r7, #4]
 8005400:	681b      	ldr	r3, [r3, #0]
 8005402:	68da      	ldr	r2, [r3, #12]
 8005404:	687b      	ldr	r3, [r7, #4]
 8005406:	681b      	ldr	r3, [r3, #0]
 8005408:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 800540c:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800540e:	687b      	ldr	r3, [r7, #4]
 8005410:	2200      	movs	r2, #0
 8005412:	645a      	str	r2, [r3, #68]	; 0x44
  huart->gState = HAL_UART_STATE_READY;
 8005414:	687b      	ldr	r3, [r7, #4]
 8005416:	2220      	movs	r2, #32
 8005418:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  huart->RxState = HAL_UART_STATE_READY;
 800541c:	687b      	ldr	r3, [r7, #4]
 800541e:	2220      	movs	r2, #32
 8005420:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8005424:	687b      	ldr	r3, [r7, #4]
 8005426:	2200      	movs	r2, #0
 8005428:	635a      	str	r2, [r3, #52]	; 0x34

  return HAL_OK;
 800542a:	2300      	movs	r3, #0
}
 800542c:	4618      	mov	r0, r3
 800542e:	3708      	adds	r7, #8
 8005430:	46bd      	mov	sp, r7
 8005432:	bd80      	pop	{r7, pc}

08005434 <HAL_UART_Transmit_DMA>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit_DMA(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size)
{
 8005434:	b580      	push	{r7, lr}
 8005436:	b08c      	sub	sp, #48	; 0x30
 8005438:	af00      	add	r7, sp, #0
 800543a:	60f8      	str	r0, [r7, #12]
 800543c:	60b9      	str	r1, [r7, #8]
 800543e:	4613      	mov	r3, r2
 8005440:	80fb      	strh	r3, [r7, #6]
  const uint32_t *tmp;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8005442:	68fb      	ldr	r3, [r7, #12]
 8005444:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8005448:	b2db      	uxtb	r3, r3
 800544a:	2b20      	cmp	r3, #32
 800544c:	d156      	bne.n	80054fc <HAL_UART_Transmit_DMA+0xc8>
  {
    if ((pData == NULL) || (Size == 0U))
 800544e:	68bb      	ldr	r3, [r7, #8]
 8005450:	2b00      	cmp	r3, #0
 8005452:	d002      	beq.n	800545a <HAL_UART_Transmit_DMA+0x26>
 8005454:	88fb      	ldrh	r3, [r7, #6]
 8005456:	2b00      	cmp	r3, #0
 8005458:	d101      	bne.n	800545e <HAL_UART_Transmit_DMA+0x2a>
    {
      return HAL_ERROR;
 800545a:	2301      	movs	r3, #1
 800545c:	e04f      	b.n	80054fe <HAL_UART_Transmit_DMA+0xca>
    }

    huart->pTxBuffPtr = pData;
 800545e:	68ba      	ldr	r2, [r7, #8]
 8005460:	68fb      	ldr	r3, [r7, #12]
 8005462:	621a      	str	r2, [r3, #32]
    huart->TxXferSize = Size;
 8005464:	68fb      	ldr	r3, [r7, #12]
 8005466:	88fa      	ldrh	r2, [r7, #6]
 8005468:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 800546a:	68fb      	ldr	r3, [r7, #12]
 800546c:	88fa      	ldrh	r2, [r7, #6]
 800546e:	84da      	strh	r2, [r3, #38]	; 0x26

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005470:	68fb      	ldr	r3, [r7, #12]
 8005472:	2200      	movs	r2, #0
 8005474:	645a      	str	r2, [r3, #68]	; 0x44
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8005476:	68fb      	ldr	r3, [r7, #12]
 8005478:	2221      	movs	r2, #33	; 0x21
 800547a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Set the UART DMA transfer complete callback */
    huart->hdmatx->XferCpltCallback = UART_DMATransmitCplt;
 800547e:	68fb      	ldr	r3, [r7, #12]
 8005480:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005482:	4a21      	ldr	r2, [pc, #132]	; (8005508 <HAL_UART_Transmit_DMA+0xd4>)
 8005484:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Set the UART DMA Half transfer complete callback */
    huart->hdmatx->XferHalfCpltCallback = UART_DMATxHalfCplt;
 8005486:	68fb      	ldr	r3, [r7, #12]
 8005488:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800548a:	4a20      	ldr	r2, [pc, #128]	; (800550c <HAL_UART_Transmit_DMA+0xd8>)
 800548c:	641a      	str	r2, [r3, #64]	; 0x40

    /* Set the DMA error callback */
    huart->hdmatx->XferErrorCallback = UART_DMAError;
 800548e:	68fb      	ldr	r3, [r7, #12]
 8005490:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005492:	4a1f      	ldr	r2, [pc, #124]	; (8005510 <HAL_UART_Transmit_DMA+0xdc>)
 8005494:	64da      	str	r2, [r3, #76]	; 0x4c

    /* Set the DMA abort callback */
    huart->hdmatx->XferAbortCallback = NULL;
 8005496:	68fb      	ldr	r3, [r7, #12]
 8005498:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800549a:	2200      	movs	r2, #0
 800549c:	651a      	str	r2, [r3, #80]	; 0x50

    /* Enable the UART transmit DMA stream */
    tmp = (const uint32_t *)&pData;
 800549e:	f107 0308 	add.w	r3, r7, #8
 80054a2:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_DMA_Start_IT(huart->hdmatx, *(const uint32_t *)tmp, (uint32_t)&huart->Instance->DR, Size);
 80054a4:	68fb      	ldr	r3, [r7, #12]
 80054a6:	6b98      	ldr	r0, [r3, #56]	; 0x38
 80054a8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80054aa:	6819      	ldr	r1, [r3, #0]
 80054ac:	68fb      	ldr	r3, [r7, #12]
 80054ae:	681b      	ldr	r3, [r3, #0]
 80054b0:	3304      	adds	r3, #4
 80054b2:	461a      	mov	r2, r3
 80054b4:	88fb      	ldrh	r3, [r7, #6]
 80054b6:	f7fc fa9f 	bl	80019f8 <HAL_DMA_Start_IT>

    /* Clear the TC flag in the SR register by writing 0 to it */
    __HAL_UART_CLEAR_FLAG(huart, UART_FLAG_TC);
 80054ba:	68fb      	ldr	r3, [r7, #12]
 80054bc:	681b      	ldr	r3, [r3, #0]
 80054be:	f06f 0240 	mvn.w	r2, #64	; 0x40
 80054c2:	601a      	str	r2, [r3, #0]

    /* Enable the DMA transfer for transmit request by setting the DMAT bit
       in the UART CR3 register */
    ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 80054c4:	68fb      	ldr	r3, [r7, #12]
 80054c6:	681b      	ldr	r3, [r3, #0]
 80054c8:	3314      	adds	r3, #20
 80054ca:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80054cc:	69bb      	ldr	r3, [r7, #24]
 80054ce:	e853 3f00 	ldrex	r3, [r3]
 80054d2:	617b      	str	r3, [r7, #20]
   return(result);
 80054d4:	697b      	ldr	r3, [r7, #20]
 80054d6:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80054da:	62bb      	str	r3, [r7, #40]	; 0x28
 80054dc:	68fb      	ldr	r3, [r7, #12]
 80054de:	681b      	ldr	r3, [r3, #0]
 80054e0:	3314      	adds	r3, #20
 80054e2:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80054e4:	627a      	str	r2, [r7, #36]	; 0x24
 80054e6:	623b      	str	r3, [r7, #32]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80054e8:	6a39      	ldr	r1, [r7, #32]
 80054ea:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80054ec:	e841 2300 	strex	r3, r2, [r1]
 80054f0:	61fb      	str	r3, [r7, #28]
   return(result);
 80054f2:	69fb      	ldr	r3, [r7, #28]
 80054f4:	2b00      	cmp	r3, #0
 80054f6:	d1e5      	bne.n	80054c4 <HAL_UART_Transmit_DMA+0x90>

    return HAL_OK;
 80054f8:	2300      	movs	r3, #0
 80054fa:	e000      	b.n	80054fe <HAL_UART_Transmit_DMA+0xca>
  }
  else
  {
    return HAL_BUSY;
 80054fc:	2302      	movs	r3, #2
  }
}
 80054fe:	4618      	mov	r0, r3
 8005500:	3730      	adds	r7, #48	; 0x30
 8005502:	46bd      	mov	sp, r7
 8005504:	bd80      	pop	{r7, pc}
 8005506:	bf00      	nop
 8005508:	08005aa1 	.word	0x08005aa1
 800550c:	08005b3b 	.word	0x08005b3b
 8005510:	08005b57 	.word	0x08005b57

08005514 <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8005514:	b580      	push	{r7, lr}
 8005516:	b0ba      	sub	sp, #232	; 0xe8
 8005518:	af00      	add	r7, sp, #0
 800551a:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 800551c:	687b      	ldr	r3, [r7, #4]
 800551e:	681b      	ldr	r3, [r3, #0]
 8005520:	681b      	ldr	r3, [r3, #0]
 8005522:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8005526:	687b      	ldr	r3, [r7, #4]
 8005528:	681b      	ldr	r3, [r3, #0]
 800552a:	68db      	ldr	r3, [r3, #12]
 800552c:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8005530:	687b      	ldr	r3, [r7, #4]
 8005532:	681b      	ldr	r3, [r3, #0]
 8005534:	695b      	ldr	r3, [r3, #20]
 8005536:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
  uint32_t errorflags = 0x00U;
 800553a:	2300      	movs	r3, #0
 800553c:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  uint32_t dmarequest = 0x00U;
 8005540:	2300      	movs	r3, #0
 8005542:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 8005546:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800554a:	f003 030f 	and.w	r3, r3, #15
 800554e:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  if (errorflags == RESET)
 8005552:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8005556:	2b00      	cmp	r3, #0
 8005558:	d10f      	bne.n	800557a <HAL_UART_IRQHandler+0x66>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 800555a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800555e:	f003 0320 	and.w	r3, r3, #32
 8005562:	2b00      	cmp	r3, #0
 8005564:	d009      	beq.n	800557a <HAL_UART_IRQHandler+0x66>
 8005566:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800556a:	f003 0320 	and.w	r3, r3, #32
 800556e:	2b00      	cmp	r3, #0
 8005570:	d003      	beq.n	800557a <HAL_UART_IRQHandler+0x66>
    {
      UART_Receive_IT(huart);
 8005572:	6878      	ldr	r0, [r7, #4]
 8005574:	f000 fc40 	bl	8005df8 <UART_Receive_IT>
      return;
 8005578:	e25b      	b.n	8005a32 <HAL_UART_IRQHandler+0x51e>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET)
 800557a:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 800557e:	2b00      	cmp	r3, #0
 8005580:	f000 80de 	beq.w	8005740 <HAL_UART_IRQHandler+0x22c>
 8005584:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8005588:	f003 0301 	and.w	r3, r3, #1
 800558c:	2b00      	cmp	r3, #0
 800558e:	d106      	bne.n	800559e <HAL_UART_IRQHandler+0x8a>
                                || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 8005590:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8005594:	f403 7390 	and.w	r3, r3, #288	; 0x120
 8005598:	2b00      	cmp	r3, #0
 800559a:	f000 80d1 	beq.w	8005740 <HAL_UART_IRQHandler+0x22c>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 800559e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80055a2:	f003 0301 	and.w	r3, r3, #1
 80055a6:	2b00      	cmp	r3, #0
 80055a8:	d00b      	beq.n	80055c2 <HAL_UART_IRQHandler+0xae>
 80055aa:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80055ae:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80055b2:	2b00      	cmp	r3, #0
 80055b4:	d005      	beq.n	80055c2 <HAL_UART_IRQHandler+0xae>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 80055b6:	687b      	ldr	r3, [r7, #4]
 80055b8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80055ba:	f043 0201 	orr.w	r2, r3, #1
 80055be:	687b      	ldr	r3, [r7, #4]
 80055c0:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 80055c2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80055c6:	f003 0304 	and.w	r3, r3, #4
 80055ca:	2b00      	cmp	r3, #0
 80055cc:	d00b      	beq.n	80055e6 <HAL_UART_IRQHandler+0xd2>
 80055ce:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80055d2:	f003 0301 	and.w	r3, r3, #1
 80055d6:	2b00      	cmp	r3, #0
 80055d8:	d005      	beq.n	80055e6 <HAL_UART_IRQHandler+0xd2>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 80055da:	687b      	ldr	r3, [r7, #4]
 80055dc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80055de:	f043 0202 	orr.w	r2, r3, #2
 80055e2:	687b      	ldr	r3, [r7, #4]
 80055e4:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 80055e6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80055ea:	f003 0302 	and.w	r3, r3, #2
 80055ee:	2b00      	cmp	r3, #0
 80055f0:	d00b      	beq.n	800560a <HAL_UART_IRQHandler+0xf6>
 80055f2:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80055f6:	f003 0301 	and.w	r3, r3, #1
 80055fa:	2b00      	cmp	r3, #0
 80055fc:	d005      	beq.n	800560a <HAL_UART_IRQHandler+0xf6>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 80055fe:	687b      	ldr	r3, [r7, #4]
 8005600:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005602:	f043 0204 	orr.w	r2, r3, #4
 8005606:	687b      	ldr	r3, [r7, #4]
 8005608:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET)
 800560a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800560e:	f003 0308 	and.w	r3, r3, #8
 8005612:	2b00      	cmp	r3, #0
 8005614:	d011      	beq.n	800563a <HAL_UART_IRQHandler+0x126>
 8005616:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800561a:	f003 0320 	and.w	r3, r3, #32
 800561e:	2b00      	cmp	r3, #0
 8005620:	d105      	bne.n	800562e <HAL_UART_IRQHandler+0x11a>
                                                 || ((cr3its & USART_CR3_EIE) != RESET)))
 8005622:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8005626:	f003 0301 	and.w	r3, r3, #1
 800562a:	2b00      	cmp	r3, #0
 800562c:	d005      	beq.n	800563a <HAL_UART_IRQHandler+0x126>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 800562e:	687b      	ldr	r3, [r7, #4]
 8005630:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005632:	f043 0208 	orr.w	r2, r3, #8
 8005636:	687b      	ldr	r3, [r7, #4]
 8005638:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 800563a:	687b      	ldr	r3, [r7, #4]
 800563c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800563e:	2b00      	cmp	r3, #0
 8005640:	f000 81f2 	beq.w	8005a28 <HAL_UART_IRQHandler+0x514>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8005644:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8005648:	f003 0320 	and.w	r3, r3, #32
 800564c:	2b00      	cmp	r3, #0
 800564e:	d008      	beq.n	8005662 <HAL_UART_IRQHandler+0x14e>
 8005650:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8005654:	f003 0320 	and.w	r3, r3, #32
 8005658:	2b00      	cmp	r3, #0
 800565a:	d002      	beq.n	8005662 <HAL_UART_IRQHandler+0x14e>
      {
        UART_Receive_IT(huart);
 800565c:	6878      	ldr	r0, [r7, #4]
 800565e:	f000 fbcb 	bl	8005df8 <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 8005662:	687b      	ldr	r3, [r7, #4]
 8005664:	681b      	ldr	r3, [r3, #0]
 8005666:	695b      	ldr	r3, [r3, #20]
 8005668:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800566c:	2b40      	cmp	r3, #64	; 0x40
 800566e:	bf0c      	ite	eq
 8005670:	2301      	moveq	r3, #1
 8005672:	2300      	movne	r3, #0
 8005674:	b2db      	uxtb	r3, r3
 8005676:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 800567a:	687b      	ldr	r3, [r7, #4]
 800567c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800567e:	f003 0308 	and.w	r3, r3, #8
 8005682:	2b00      	cmp	r3, #0
 8005684:	d103      	bne.n	800568e <HAL_UART_IRQHandler+0x17a>
 8005686:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 800568a:	2b00      	cmp	r3, #0
 800568c:	d04f      	beq.n	800572e <HAL_UART_IRQHandler+0x21a>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 800568e:	6878      	ldr	r0, [r7, #4]
 8005690:	f000 fad3 	bl	8005c3a <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005694:	687b      	ldr	r3, [r7, #4]
 8005696:	681b      	ldr	r3, [r3, #0]
 8005698:	695b      	ldr	r3, [r3, #20]
 800569a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800569e:	2b40      	cmp	r3, #64	; 0x40
 80056a0:	d141      	bne.n	8005726 <HAL_UART_IRQHandler+0x212>
        {
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80056a2:	687b      	ldr	r3, [r7, #4]
 80056a4:	681b      	ldr	r3, [r3, #0]
 80056a6:	3314      	adds	r3, #20
 80056a8:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80056ac:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 80056b0:	e853 3f00 	ldrex	r3, [r3]
 80056b4:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   return(result);
 80056b8:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 80056bc:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80056c0:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 80056c4:	687b      	ldr	r3, [r7, #4]
 80056c6:	681b      	ldr	r3, [r3, #0]
 80056c8:	3314      	adds	r3, #20
 80056ca:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 80056ce:	f8c7 20a8 	str.w	r2, [r7, #168]	; 0xa8
 80056d2:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80056d6:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 80056da:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 80056de:	e841 2300 	strex	r3, r2, [r1]
 80056e2:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   return(result);
 80056e6:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 80056ea:	2b00      	cmp	r3, #0
 80056ec:	d1d9      	bne.n	80056a2 <HAL_UART_IRQHandler+0x18e>

          /* Abort the UART DMA Rx stream */
          if (huart->hdmarx != NULL)
 80056ee:	687b      	ldr	r3, [r7, #4]
 80056f0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80056f2:	2b00      	cmp	r3, #0
 80056f4:	d013      	beq.n	800571e <HAL_UART_IRQHandler+0x20a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 80056f6:	687b      	ldr	r3, [r7, #4]
 80056f8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80056fa:	4a7e      	ldr	r2, [pc, #504]	; (80058f4 <HAL_UART_IRQHandler+0x3e0>)
 80056fc:	651a      	str	r2, [r3, #80]	; 0x50
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 80056fe:	687b      	ldr	r3, [r7, #4]
 8005700:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005702:	4618      	mov	r0, r3
 8005704:	f7fc fa40 	bl	8001b88 <HAL_DMA_Abort_IT>
 8005708:	4603      	mov	r3, r0
 800570a:	2b00      	cmp	r3, #0
 800570c:	d016      	beq.n	800573c <HAL_UART_IRQHandler+0x228>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 800570e:	687b      	ldr	r3, [r7, #4]
 8005710:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005712:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8005714:	687a      	ldr	r2, [r7, #4]
 8005716:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 8005718:	4610      	mov	r0, r2
 800571a:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800571c:	e00e      	b.n	800573c <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 800571e:	6878      	ldr	r0, [r7, #4]
 8005720:	f000 f9a8 	bl	8005a74 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005724:	e00a      	b.n	800573c <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8005726:	6878      	ldr	r0, [r7, #4]
 8005728:	f000 f9a4 	bl	8005a74 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800572c:	e006      	b.n	800573c <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 800572e:	6878      	ldr	r0, [r7, #4]
 8005730:	f000 f9a0 	bl	8005a74 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005734:	687b      	ldr	r3, [r7, #4]
 8005736:	2200      	movs	r2, #0
 8005738:	645a      	str	r2, [r3, #68]	; 0x44
      }
    }
    return;
 800573a:	e175      	b.n	8005a28 <HAL_UART_IRQHandler+0x514>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800573c:	bf00      	nop
    return;
 800573e:	e173      	b.n	8005a28 <HAL_UART_IRQHandler+0x514>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8005740:	687b      	ldr	r3, [r7, #4]
 8005742:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005744:	2b01      	cmp	r3, #1
 8005746:	f040 814f 	bne.w	80059e8 <HAL_UART_IRQHandler+0x4d4>
      && ((isrflags & USART_SR_IDLE) != 0U)
 800574a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800574e:	f003 0310 	and.w	r3, r3, #16
 8005752:	2b00      	cmp	r3, #0
 8005754:	f000 8148 	beq.w	80059e8 <HAL_UART_IRQHandler+0x4d4>
      && ((cr1its & USART_SR_IDLE) != 0U))
 8005758:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800575c:	f003 0310 	and.w	r3, r3, #16
 8005760:	2b00      	cmp	r3, #0
 8005762:	f000 8141 	beq.w	80059e8 <HAL_UART_IRQHandler+0x4d4>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 8005766:	2300      	movs	r3, #0
 8005768:	60bb      	str	r3, [r7, #8]
 800576a:	687b      	ldr	r3, [r7, #4]
 800576c:	681b      	ldr	r3, [r3, #0]
 800576e:	681b      	ldr	r3, [r3, #0]
 8005770:	60bb      	str	r3, [r7, #8]
 8005772:	687b      	ldr	r3, [r7, #4]
 8005774:	681b      	ldr	r3, [r3, #0]
 8005776:	685b      	ldr	r3, [r3, #4]
 8005778:	60bb      	str	r3, [r7, #8]
 800577a:	68bb      	ldr	r3, [r7, #8]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800577c:	687b      	ldr	r3, [r7, #4]
 800577e:	681b      	ldr	r3, [r3, #0]
 8005780:	695b      	ldr	r3, [r3, #20]
 8005782:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005786:	2b40      	cmp	r3, #64	; 0x40
 8005788:	f040 80b6 	bne.w	80058f8 <HAL_UART_IRQHandler+0x3e4>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 800578c:	687b      	ldr	r3, [r7, #4]
 800578e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005790:	681b      	ldr	r3, [r3, #0]
 8005792:	685b      	ldr	r3, [r3, #4]
 8005794:	f8a7 30be 	strh.w	r3, [r7, #190]	; 0xbe
      if ((nb_remaining_rx_data > 0U)
 8005798:	f8b7 30be 	ldrh.w	r3, [r7, #190]	; 0xbe
 800579c:	2b00      	cmp	r3, #0
 800579e:	f000 8145 	beq.w	8005a2c <HAL_UART_IRQHandler+0x518>
          && (nb_remaining_rx_data < huart->RxXferSize))
 80057a2:	687b      	ldr	r3, [r7, #4]
 80057a4:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 80057a6:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 80057aa:	429a      	cmp	r2, r3
 80057ac:	f080 813e 	bcs.w	8005a2c <HAL_UART_IRQHandler+0x518>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 80057b0:	687b      	ldr	r3, [r7, #4]
 80057b2:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 80057b6:	85da      	strh	r2, [r3, #46]	; 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 80057b8:	687b      	ldr	r3, [r7, #4]
 80057ba:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80057bc:	69db      	ldr	r3, [r3, #28]
 80057be:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80057c2:	f000 8088 	beq.w	80058d6 <HAL_UART_IRQHandler+0x3c2>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 80057c6:	687b      	ldr	r3, [r7, #4]
 80057c8:	681b      	ldr	r3, [r3, #0]
 80057ca:	330c      	adds	r3, #12
 80057cc:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80057d0:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 80057d4:	e853 3f00 	ldrex	r3, [r3]
 80057d8:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
   return(result);
 80057dc:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 80057e0:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80057e4:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 80057e8:	687b      	ldr	r3, [r7, #4]
 80057ea:	681b      	ldr	r3, [r3, #0]
 80057ec:	330c      	adds	r3, #12
 80057ee:	f8d7 20b8 	ldr.w	r2, [r7, #184]	; 0xb8
 80057f2:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 80057f6:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80057fa:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 80057fe:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 8005802:	e841 2300 	strex	r3, r2, [r1]
 8005806:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   return(result);
 800580a:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800580e:	2b00      	cmp	r3, #0
 8005810:	d1d9      	bne.n	80057c6 <HAL_UART_IRQHandler+0x2b2>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005812:	687b      	ldr	r3, [r7, #4]
 8005814:	681b      	ldr	r3, [r3, #0]
 8005816:	3314      	adds	r3, #20
 8005818:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800581a:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800581c:	e853 3f00 	ldrex	r3, [r3]
 8005820:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 8005822:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8005824:	f023 0301 	bic.w	r3, r3, #1
 8005828:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 800582c:	687b      	ldr	r3, [r7, #4]
 800582e:	681b      	ldr	r3, [r3, #0]
 8005830:	3314      	adds	r3, #20
 8005832:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 8005836:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 800583a:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800583c:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 800583e:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 8005842:	e841 2300 	strex	r3, r2, [r1]
 8005846:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 8005848:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800584a:	2b00      	cmp	r3, #0
 800584c:	d1e1      	bne.n	8005812 <HAL_UART_IRQHandler+0x2fe>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800584e:	687b      	ldr	r3, [r7, #4]
 8005850:	681b      	ldr	r3, [r3, #0]
 8005852:	3314      	adds	r3, #20
 8005854:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005856:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8005858:	e853 3f00 	ldrex	r3, [r3]
 800585c:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 800585e:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8005860:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8005864:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8005868:	687b      	ldr	r3, [r7, #4]
 800586a:	681b      	ldr	r3, [r3, #0]
 800586c:	3314      	adds	r3, #20
 800586e:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 8005872:	66fa      	str	r2, [r7, #108]	; 0x6c
 8005874:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005876:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 8005878:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 800587a:	e841 2300 	strex	r3, r2, [r1]
 800587e:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 8005880:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8005882:	2b00      	cmp	r3, #0
 8005884:	d1e3      	bne.n	800584e <HAL_UART_IRQHandler+0x33a>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8005886:	687b      	ldr	r3, [r7, #4]
 8005888:	2220      	movs	r2, #32
 800588a:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800588e:	687b      	ldr	r3, [r7, #4]
 8005890:	2200      	movs	r2, #0
 8005892:	631a      	str	r2, [r3, #48]	; 0x30

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8005894:	687b      	ldr	r3, [r7, #4]
 8005896:	681b      	ldr	r3, [r3, #0]
 8005898:	330c      	adds	r3, #12
 800589a:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800589c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800589e:	e853 3f00 	ldrex	r3, [r3]
 80058a2:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 80058a4:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80058a6:	f023 0310 	bic.w	r3, r3, #16
 80058aa:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 80058ae:	687b      	ldr	r3, [r7, #4]
 80058b0:	681b      	ldr	r3, [r3, #0]
 80058b2:	330c      	adds	r3, #12
 80058b4:	f8d7 20ac 	ldr.w	r2, [r7, #172]	; 0xac
 80058b8:	65ba      	str	r2, [r7, #88]	; 0x58
 80058ba:	657b      	str	r3, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80058bc:	6d79      	ldr	r1, [r7, #84]	; 0x54
 80058be:	6dba      	ldr	r2, [r7, #88]	; 0x58
 80058c0:	e841 2300 	strex	r3, r2, [r1]
 80058c4:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 80058c6:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80058c8:	2b00      	cmp	r3, #0
 80058ca:	d1e3      	bne.n	8005894 <HAL_UART_IRQHandler+0x380>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 80058cc:	687b      	ldr	r3, [r7, #4]
 80058ce:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80058d0:	4618      	mov	r0, r3
 80058d2:	f7fc f8e9 	bl	8001aa8 <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
        In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 80058d6:	687b      	ldr	r3, [r7, #4]
 80058d8:	2202      	movs	r2, #2
 80058da:	635a      	str	r2, [r3, #52]	; 0x34
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 80058dc:	687b      	ldr	r3, [r7, #4]
 80058de:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 80058e0:	687b      	ldr	r3, [r7, #4]
 80058e2:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 80058e4:	b29b      	uxth	r3, r3
 80058e6:	1ad3      	subs	r3, r2, r3
 80058e8:	b29b      	uxth	r3, r3
 80058ea:	4619      	mov	r1, r3
 80058ec:	6878      	ldr	r0, [r7, #4]
 80058ee:	f000 f8cb 	bl	8005a88 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 80058f2:	e09b      	b.n	8005a2c <HAL_UART_IRQHandler+0x518>
 80058f4:	08005d01 	.word	0x08005d01
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 80058f8:	687b      	ldr	r3, [r7, #4]
 80058fa:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 80058fc:	687b      	ldr	r3, [r7, #4]
 80058fe:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8005900:	b29b      	uxth	r3, r3
 8005902:	1ad3      	subs	r3, r2, r3
 8005904:	f8a7 30ce 	strh.w	r3, [r7, #206]	; 0xce
      if ((huart->RxXferCount > 0U)
 8005908:	687b      	ldr	r3, [r7, #4]
 800590a:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 800590c:	b29b      	uxth	r3, r3
 800590e:	2b00      	cmp	r3, #0
 8005910:	f000 808e 	beq.w	8005a30 <HAL_UART_IRQHandler+0x51c>
          && (nb_rx_data > 0U))
 8005914:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8005918:	2b00      	cmp	r3, #0
 800591a:	f000 8089 	beq.w	8005a30 <HAL_UART_IRQHandler+0x51c>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800591e:	687b      	ldr	r3, [r7, #4]
 8005920:	681b      	ldr	r3, [r3, #0]
 8005922:	330c      	adds	r3, #12
 8005924:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005926:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005928:	e853 3f00 	ldrex	r3, [r3]
 800592c:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 800592e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005930:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8005934:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8005938:	687b      	ldr	r3, [r7, #4]
 800593a:	681b      	ldr	r3, [r3, #0]
 800593c:	330c      	adds	r3, #12
 800593e:	f8d7 20c8 	ldr.w	r2, [r7, #200]	; 0xc8
 8005942:	647a      	str	r2, [r7, #68]	; 0x44
 8005944:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005946:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8005948:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800594a:	e841 2300 	strex	r3, r2, [r1]
 800594e:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8005950:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8005952:	2b00      	cmp	r3, #0
 8005954:	d1e3      	bne.n	800591e <HAL_UART_IRQHandler+0x40a>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005956:	687b      	ldr	r3, [r7, #4]
 8005958:	681b      	ldr	r3, [r3, #0]
 800595a:	3314      	adds	r3, #20
 800595c:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800595e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005960:	e853 3f00 	ldrex	r3, [r3]
 8005964:	623b      	str	r3, [r7, #32]
   return(result);
 8005966:	6a3b      	ldr	r3, [r7, #32]
 8005968:	f023 0301 	bic.w	r3, r3, #1
 800596c:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 8005970:	687b      	ldr	r3, [r7, #4]
 8005972:	681b      	ldr	r3, [r3, #0]
 8005974:	3314      	adds	r3, #20
 8005976:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 800597a:	633a      	str	r2, [r7, #48]	; 0x30
 800597c:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800597e:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8005980:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8005982:	e841 2300 	strex	r3, r2, [r1]
 8005986:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8005988:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800598a:	2b00      	cmp	r3, #0
 800598c:	d1e3      	bne.n	8005956 <HAL_UART_IRQHandler+0x442>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 800598e:	687b      	ldr	r3, [r7, #4]
 8005990:	2220      	movs	r2, #32
 8005992:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005996:	687b      	ldr	r3, [r7, #4]
 8005998:	2200      	movs	r2, #0
 800599a:	631a      	str	r2, [r3, #48]	; 0x30

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800599c:	687b      	ldr	r3, [r7, #4]
 800599e:	681b      	ldr	r3, [r3, #0]
 80059a0:	330c      	adds	r3, #12
 80059a2:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80059a4:	693b      	ldr	r3, [r7, #16]
 80059a6:	e853 3f00 	ldrex	r3, [r3]
 80059aa:	60fb      	str	r3, [r7, #12]
   return(result);
 80059ac:	68fb      	ldr	r3, [r7, #12]
 80059ae:	f023 0310 	bic.w	r3, r3, #16
 80059b2:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 80059b6:	687b      	ldr	r3, [r7, #4]
 80059b8:	681b      	ldr	r3, [r3, #0]
 80059ba:	330c      	adds	r3, #12
 80059bc:	f8d7 20c0 	ldr.w	r2, [r7, #192]	; 0xc0
 80059c0:	61fa      	str	r2, [r7, #28]
 80059c2:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80059c4:	69b9      	ldr	r1, [r7, #24]
 80059c6:	69fa      	ldr	r2, [r7, #28]
 80059c8:	e841 2300 	strex	r3, r2, [r1]
 80059cc:	617b      	str	r3, [r7, #20]
   return(result);
 80059ce:	697b      	ldr	r3, [r7, #20]
 80059d0:	2b00      	cmp	r3, #0
 80059d2:	d1e3      	bne.n	800599c <HAL_UART_IRQHandler+0x488>

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 80059d4:	687b      	ldr	r3, [r7, #4]
 80059d6:	2202      	movs	r2, #2
 80059d8:	635a      	str	r2, [r3, #52]	; 0x34
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 80059da:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 80059de:	4619      	mov	r1, r3
 80059e0:	6878      	ldr	r0, [r7, #4]
 80059e2:	f000 f851 	bl	8005a88 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 80059e6:	e023      	b.n	8005a30 <HAL_UART_IRQHandler+0x51c>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 80059e8:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80059ec:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80059f0:	2b00      	cmp	r3, #0
 80059f2:	d009      	beq.n	8005a08 <HAL_UART_IRQHandler+0x4f4>
 80059f4:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80059f8:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80059fc:	2b00      	cmp	r3, #0
 80059fe:	d003      	beq.n	8005a08 <HAL_UART_IRQHandler+0x4f4>
  {
    UART_Transmit_IT(huart);
 8005a00:	6878      	ldr	r0, [r7, #4]
 8005a02:	f000 f991 	bl	8005d28 <UART_Transmit_IT>
    return;
 8005a06:	e014      	b.n	8005a32 <HAL_UART_IRQHandler+0x51e>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 8005a08:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8005a0c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005a10:	2b00      	cmp	r3, #0
 8005a12:	d00e      	beq.n	8005a32 <HAL_UART_IRQHandler+0x51e>
 8005a14:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8005a18:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005a1c:	2b00      	cmp	r3, #0
 8005a1e:	d008      	beq.n	8005a32 <HAL_UART_IRQHandler+0x51e>
  {
    UART_EndTransmit_IT(huart);
 8005a20:	6878      	ldr	r0, [r7, #4]
 8005a22:	f000 f9d1 	bl	8005dc8 <UART_EndTransmit_IT>
    return;
 8005a26:	e004      	b.n	8005a32 <HAL_UART_IRQHandler+0x51e>
    return;
 8005a28:	bf00      	nop
 8005a2a:	e002      	b.n	8005a32 <HAL_UART_IRQHandler+0x51e>
      return;
 8005a2c:	bf00      	nop
 8005a2e:	e000      	b.n	8005a32 <HAL_UART_IRQHandler+0x51e>
      return;
 8005a30:	bf00      	nop
  }
}
 8005a32:	37e8      	adds	r7, #232	; 0xe8
 8005a34:	46bd      	mov	sp, r7
 8005a36:	bd80      	pop	{r7, pc}

08005a38 <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8005a38:	b480      	push	{r7}
 8005a3a:	b083      	sub	sp, #12
 8005a3c:	af00      	add	r7, sp, #0
 8005a3e:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 8005a40:	bf00      	nop
 8005a42:	370c      	adds	r7, #12
 8005a44:	46bd      	mov	sp, r7
 8005a46:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a4a:	4770      	bx	lr

08005a4c <HAL_UART_TxHalfCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 8005a4c:	b480      	push	{r7}
 8005a4e:	b083      	sub	sp, #12
 8005a50:	af00      	add	r7, sp, #0
 8005a52:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxHalfCpltCallback could be implemented in the user file
   */
}
 8005a54:	bf00      	nop
 8005a56:	370c      	adds	r7, #12
 8005a58:	46bd      	mov	sp, r7
 8005a5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a5e:	4770      	bx	lr

08005a60 <HAL_UART_RxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 8005a60:	b480      	push	{r7}
 8005a62:	b083      	sub	sp, #12
 8005a64:	af00      	add	r7, sp, #0
 8005a66:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxCpltCallback could be implemented in the user file
   */
}
 8005a68:	bf00      	nop
 8005a6a:	370c      	adds	r7, #12
 8005a6c:	46bd      	mov	sp, r7
 8005a6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a72:	4770      	bx	lr

08005a74 <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8005a74:	b480      	push	{r7}
 8005a76:	b083      	sub	sp, #12
 8005a78:	af00      	add	r7, sp, #0
 8005a7a:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 8005a7c:	bf00      	nop
 8005a7e:	370c      	adds	r7, #12
 8005a80:	46bd      	mov	sp, r7
 8005a82:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a86:	4770      	bx	lr

08005a88 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8005a88:	b480      	push	{r7}
 8005a8a:	b083      	sub	sp, #12
 8005a8c:	af00      	add	r7, sp, #0
 8005a8e:	6078      	str	r0, [r7, #4]
 8005a90:	460b      	mov	r3, r1
 8005a92:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8005a94:	bf00      	nop
 8005a96:	370c      	adds	r7, #12
 8005a98:	46bd      	mov	sp, r7
 8005a9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a9e:	4770      	bx	lr

08005aa0 <UART_DMATransmitCplt>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMATransmitCplt(DMA_HandleTypeDef *hdma)
{
 8005aa0:	b580      	push	{r7, lr}
 8005aa2:	b090      	sub	sp, #64	; 0x40
 8005aa4:	af00      	add	r7, sp, #0
 8005aa6:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8005aa8:	687b      	ldr	r3, [r7, #4]
 8005aaa:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005aac:	63fb      	str	r3, [r7, #60]	; 0x3c
  /* DMA Normal mode*/
  if ((hdma->Instance->CR & DMA_SxCR_CIRC) == 0U)
 8005aae:	687b      	ldr	r3, [r7, #4]
 8005ab0:	681b      	ldr	r3, [r3, #0]
 8005ab2:	681b      	ldr	r3, [r3, #0]
 8005ab4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005ab8:	2b00      	cmp	r3, #0
 8005aba:	d137      	bne.n	8005b2c <UART_DMATransmitCplt+0x8c>
  {
    huart->TxXferCount = 0x00U;
 8005abc:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8005abe:	2200      	movs	r2, #0
 8005ac0:	84da      	strh	r2, [r3, #38]	; 0x26

    /* Disable the DMA transfer for transmit request by setting the DMAT bit
       in the UART CR3 register */
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 8005ac2:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8005ac4:	681b      	ldr	r3, [r3, #0]
 8005ac6:	3314      	adds	r3, #20
 8005ac8:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005aca:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005acc:	e853 3f00 	ldrex	r3, [r3]
 8005ad0:	623b      	str	r3, [r7, #32]
   return(result);
 8005ad2:	6a3b      	ldr	r3, [r7, #32]
 8005ad4:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8005ad8:	63bb      	str	r3, [r7, #56]	; 0x38
 8005ada:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8005adc:	681b      	ldr	r3, [r3, #0]
 8005ade:	3314      	adds	r3, #20
 8005ae0:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8005ae2:	633a      	str	r2, [r7, #48]	; 0x30
 8005ae4:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005ae6:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8005ae8:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8005aea:	e841 2300 	strex	r3, r2, [r1]
 8005aee:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8005af0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005af2:	2b00      	cmp	r3, #0
 8005af4:	d1e5      	bne.n	8005ac2 <UART_DMATransmitCplt+0x22>

    /* Enable the UART Transmit Complete Interrupt */
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8005af6:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8005af8:	681b      	ldr	r3, [r3, #0]
 8005afa:	330c      	adds	r3, #12
 8005afc:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005afe:	693b      	ldr	r3, [r7, #16]
 8005b00:	e853 3f00 	ldrex	r3, [r3]
 8005b04:	60fb      	str	r3, [r7, #12]
   return(result);
 8005b06:	68fb      	ldr	r3, [r7, #12]
 8005b08:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8005b0c:	637b      	str	r3, [r7, #52]	; 0x34
 8005b0e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8005b10:	681b      	ldr	r3, [r3, #0]
 8005b12:	330c      	adds	r3, #12
 8005b14:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8005b16:	61fa      	str	r2, [r7, #28]
 8005b18:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005b1a:	69b9      	ldr	r1, [r7, #24]
 8005b1c:	69fa      	ldr	r2, [r7, #28]
 8005b1e:	e841 2300 	strex	r3, r2, [r1]
 8005b22:	617b      	str	r3, [r7, #20]
   return(result);
 8005b24:	697b      	ldr	r3, [r7, #20]
 8005b26:	2b00      	cmp	r3, #0
 8005b28:	d1e5      	bne.n	8005af6 <UART_DMATransmitCplt+0x56>
#else
    /*Call legacy weak Tx complete callback*/
    HAL_UART_TxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 8005b2a:	e002      	b.n	8005b32 <UART_DMATransmitCplt+0x92>
    HAL_UART_TxCpltCallback(huart);
 8005b2c:	6bf8      	ldr	r0, [r7, #60]	; 0x3c
 8005b2e:	f7ff ff83 	bl	8005a38 <HAL_UART_TxCpltCallback>
}
 8005b32:	bf00      	nop
 8005b34:	3740      	adds	r7, #64	; 0x40
 8005b36:	46bd      	mov	sp, r7
 8005b38:	bd80      	pop	{r7, pc}

08005b3a <UART_DMATxHalfCplt>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMATxHalfCplt(DMA_HandleTypeDef *hdma)
{
 8005b3a:	b580      	push	{r7, lr}
 8005b3c:	b084      	sub	sp, #16
 8005b3e:	af00      	add	r7, sp, #0
 8005b40:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8005b42:	687b      	ldr	r3, [r7, #4]
 8005b44:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005b46:	60fb      	str	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxHalfCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxHalfCpltCallback(huart);
 8005b48:	68f8      	ldr	r0, [r7, #12]
 8005b4a:	f7ff ff7f 	bl	8005a4c <HAL_UART_TxHalfCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8005b4e:	bf00      	nop
 8005b50:	3710      	adds	r7, #16
 8005b52:	46bd      	mov	sp, r7
 8005b54:	bd80      	pop	{r7, pc}

08005b56 <UART_DMAError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAError(DMA_HandleTypeDef *hdma)
{
 8005b56:	b580      	push	{r7, lr}
 8005b58:	b084      	sub	sp, #16
 8005b5a:	af00      	add	r7, sp, #0
 8005b5c:	6078      	str	r0, [r7, #4]
  uint32_t dmarequest = 0x00U;
 8005b5e:	2300      	movs	r3, #0
 8005b60:	60fb      	str	r3, [r7, #12]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8005b62:	687b      	ldr	r3, [r7, #4]
 8005b64:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005b66:	60bb      	str	r3, [r7, #8]

  /* Stop UART DMA Tx request if ongoing */
  dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT);
 8005b68:	68bb      	ldr	r3, [r7, #8]
 8005b6a:	681b      	ldr	r3, [r3, #0]
 8005b6c:	695b      	ldr	r3, [r3, #20]
 8005b6e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005b72:	2b80      	cmp	r3, #128	; 0x80
 8005b74:	bf0c      	ite	eq
 8005b76:	2301      	moveq	r3, #1
 8005b78:	2300      	movne	r3, #0
 8005b7a:	b2db      	uxtb	r3, r3
 8005b7c:	60fb      	str	r3, [r7, #12]
  if ((huart->gState == HAL_UART_STATE_BUSY_TX) && dmarequest)
 8005b7e:	68bb      	ldr	r3, [r7, #8]
 8005b80:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8005b84:	b2db      	uxtb	r3, r3
 8005b86:	2b21      	cmp	r3, #33	; 0x21
 8005b88:	d108      	bne.n	8005b9c <UART_DMAError+0x46>
 8005b8a:	68fb      	ldr	r3, [r7, #12]
 8005b8c:	2b00      	cmp	r3, #0
 8005b8e:	d005      	beq.n	8005b9c <UART_DMAError+0x46>
  {
    huart->TxXferCount = 0x00U;
 8005b90:	68bb      	ldr	r3, [r7, #8]
 8005b92:	2200      	movs	r2, #0
 8005b94:	84da      	strh	r2, [r3, #38]	; 0x26
    UART_EndTxTransfer(huart);
 8005b96:	68b8      	ldr	r0, [r7, #8]
 8005b98:	f000 f827 	bl	8005bea <UART_EndTxTransfer>
  }

  /* Stop UART DMA Rx request if ongoing */
  dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 8005b9c:	68bb      	ldr	r3, [r7, #8]
 8005b9e:	681b      	ldr	r3, [r3, #0]
 8005ba0:	695b      	ldr	r3, [r3, #20]
 8005ba2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005ba6:	2b40      	cmp	r3, #64	; 0x40
 8005ba8:	bf0c      	ite	eq
 8005baa:	2301      	moveq	r3, #1
 8005bac:	2300      	movne	r3, #0
 8005bae:	b2db      	uxtb	r3, r3
 8005bb0:	60fb      	str	r3, [r7, #12]
  if ((huart->RxState == HAL_UART_STATE_BUSY_RX) && dmarequest)
 8005bb2:	68bb      	ldr	r3, [r7, #8]
 8005bb4:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8005bb8:	b2db      	uxtb	r3, r3
 8005bba:	2b22      	cmp	r3, #34	; 0x22
 8005bbc:	d108      	bne.n	8005bd0 <UART_DMAError+0x7a>
 8005bbe:	68fb      	ldr	r3, [r7, #12]
 8005bc0:	2b00      	cmp	r3, #0
 8005bc2:	d005      	beq.n	8005bd0 <UART_DMAError+0x7a>
  {
    huart->RxXferCount = 0x00U;
 8005bc4:	68bb      	ldr	r3, [r7, #8]
 8005bc6:	2200      	movs	r2, #0
 8005bc8:	85da      	strh	r2, [r3, #46]	; 0x2e
    UART_EndRxTransfer(huart);
 8005bca:	68b8      	ldr	r0, [r7, #8]
 8005bcc:	f000 f835 	bl	8005c3a <UART_EndRxTransfer>
  }

  huart->ErrorCode |= HAL_UART_ERROR_DMA;
 8005bd0:	68bb      	ldr	r3, [r7, #8]
 8005bd2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005bd4:	f043 0210 	orr.w	r2, r3, #16
 8005bd8:	68bb      	ldr	r3, [r7, #8]
 8005bda:	645a      	str	r2, [r3, #68]	; 0x44
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8005bdc:	68b8      	ldr	r0, [r7, #8]
 8005bde:	f7ff ff49 	bl	8005a74 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8005be2:	bf00      	nop
 8005be4:	3710      	adds	r7, #16
 8005be6:	46bd      	mov	sp, r7
 8005be8:	bd80      	pop	{r7, pc}

08005bea <UART_EndTxTransfer>:
  * @brief  End ongoing Tx transfer on UART peripheral (following error detection or Transmit completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndTxTransfer(UART_HandleTypeDef *huart)
{
 8005bea:	b480      	push	{r7}
 8005bec:	b089      	sub	sp, #36	; 0x24
 8005bee:	af00      	add	r7, sp, #0
 8005bf0:	6078      	str	r0, [r7, #4]
  /* Disable TXEIE and TCIE interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE | USART_CR1_TCIE));
 8005bf2:	687b      	ldr	r3, [r7, #4]
 8005bf4:	681b      	ldr	r3, [r3, #0]
 8005bf6:	330c      	adds	r3, #12
 8005bf8:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005bfa:	68fb      	ldr	r3, [r7, #12]
 8005bfc:	e853 3f00 	ldrex	r3, [r3]
 8005c00:	60bb      	str	r3, [r7, #8]
   return(result);
 8005c02:	68bb      	ldr	r3, [r7, #8]
 8005c04:	f023 03c0 	bic.w	r3, r3, #192	; 0xc0
 8005c08:	61fb      	str	r3, [r7, #28]
 8005c0a:	687b      	ldr	r3, [r7, #4]
 8005c0c:	681b      	ldr	r3, [r3, #0]
 8005c0e:	330c      	adds	r3, #12
 8005c10:	69fa      	ldr	r2, [r7, #28]
 8005c12:	61ba      	str	r2, [r7, #24]
 8005c14:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005c16:	6979      	ldr	r1, [r7, #20]
 8005c18:	69ba      	ldr	r2, [r7, #24]
 8005c1a:	e841 2300 	strex	r3, r2, [r1]
 8005c1e:	613b      	str	r3, [r7, #16]
   return(result);
 8005c20:	693b      	ldr	r3, [r7, #16]
 8005c22:	2b00      	cmp	r3, #0
 8005c24:	d1e5      	bne.n	8005bf2 <UART_EndTxTransfer+0x8>

  /* At end of Tx process, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8005c26:	687b      	ldr	r3, [r7, #4]
 8005c28:	2220      	movs	r2, #32
 8005c2a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
}
 8005c2e:	bf00      	nop
 8005c30:	3724      	adds	r7, #36	; 0x24
 8005c32:	46bd      	mov	sp, r7
 8005c34:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c38:	4770      	bx	lr

08005c3a <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8005c3a:	b480      	push	{r7}
 8005c3c:	b095      	sub	sp, #84	; 0x54
 8005c3e:	af00      	add	r7, sp, #0
 8005c40:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8005c42:	687b      	ldr	r3, [r7, #4]
 8005c44:	681b      	ldr	r3, [r3, #0]
 8005c46:	330c      	adds	r3, #12
 8005c48:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005c4a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005c4c:	e853 3f00 	ldrex	r3, [r3]
 8005c50:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 8005c52:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005c54:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8005c58:	64fb      	str	r3, [r7, #76]	; 0x4c
 8005c5a:	687b      	ldr	r3, [r7, #4]
 8005c5c:	681b      	ldr	r3, [r3, #0]
 8005c5e:	330c      	adds	r3, #12
 8005c60:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8005c62:	643a      	str	r2, [r7, #64]	; 0x40
 8005c64:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005c66:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8005c68:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8005c6a:	e841 2300 	strex	r3, r2, [r1]
 8005c6e:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8005c70:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005c72:	2b00      	cmp	r3, #0
 8005c74:	d1e5      	bne.n	8005c42 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005c76:	687b      	ldr	r3, [r7, #4]
 8005c78:	681b      	ldr	r3, [r3, #0]
 8005c7a:	3314      	adds	r3, #20
 8005c7c:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005c7e:	6a3b      	ldr	r3, [r7, #32]
 8005c80:	e853 3f00 	ldrex	r3, [r3]
 8005c84:	61fb      	str	r3, [r7, #28]
   return(result);
 8005c86:	69fb      	ldr	r3, [r7, #28]
 8005c88:	f023 0301 	bic.w	r3, r3, #1
 8005c8c:	64bb      	str	r3, [r7, #72]	; 0x48
 8005c8e:	687b      	ldr	r3, [r7, #4]
 8005c90:	681b      	ldr	r3, [r3, #0]
 8005c92:	3314      	adds	r3, #20
 8005c94:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8005c96:	62fa      	str	r2, [r7, #44]	; 0x2c
 8005c98:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005c9a:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8005c9c:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8005c9e:	e841 2300 	strex	r3, r2, [r1]
 8005ca2:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8005ca4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005ca6:	2b00      	cmp	r3, #0
 8005ca8:	d1e5      	bne.n	8005c76 <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8005caa:	687b      	ldr	r3, [r7, #4]
 8005cac:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005cae:	2b01      	cmp	r3, #1
 8005cb0:	d119      	bne.n	8005ce6 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8005cb2:	687b      	ldr	r3, [r7, #4]
 8005cb4:	681b      	ldr	r3, [r3, #0]
 8005cb6:	330c      	adds	r3, #12
 8005cb8:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005cba:	68fb      	ldr	r3, [r7, #12]
 8005cbc:	e853 3f00 	ldrex	r3, [r3]
 8005cc0:	60bb      	str	r3, [r7, #8]
   return(result);
 8005cc2:	68bb      	ldr	r3, [r7, #8]
 8005cc4:	f023 0310 	bic.w	r3, r3, #16
 8005cc8:	647b      	str	r3, [r7, #68]	; 0x44
 8005cca:	687b      	ldr	r3, [r7, #4]
 8005ccc:	681b      	ldr	r3, [r3, #0]
 8005cce:	330c      	adds	r3, #12
 8005cd0:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8005cd2:	61ba      	str	r2, [r7, #24]
 8005cd4:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005cd6:	6979      	ldr	r1, [r7, #20]
 8005cd8:	69ba      	ldr	r2, [r7, #24]
 8005cda:	e841 2300 	strex	r3, r2, [r1]
 8005cde:	613b      	str	r3, [r7, #16]
   return(result);
 8005ce0:	693b      	ldr	r3, [r7, #16]
 8005ce2:	2b00      	cmp	r3, #0
 8005ce4:	d1e5      	bne.n	8005cb2 <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8005ce6:	687b      	ldr	r3, [r7, #4]
 8005ce8:	2220      	movs	r2, #32
 8005cea:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005cee:	687b      	ldr	r3, [r7, #4]
 8005cf0:	2200      	movs	r2, #0
 8005cf2:	631a      	str	r2, [r3, #48]	; 0x30
}
 8005cf4:	bf00      	nop
 8005cf6:	3754      	adds	r7, #84	; 0x54
 8005cf8:	46bd      	mov	sp, r7
 8005cfa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005cfe:	4770      	bx	lr

08005d00 <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8005d00:	b580      	push	{r7, lr}
 8005d02:	b084      	sub	sp, #16
 8005d04:	af00      	add	r7, sp, #0
 8005d06:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8005d08:	687b      	ldr	r3, [r7, #4]
 8005d0a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005d0c:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 8005d0e:	68fb      	ldr	r3, [r7, #12]
 8005d10:	2200      	movs	r2, #0
 8005d12:	85da      	strh	r2, [r3, #46]	; 0x2e
  huart->TxXferCount = 0x00U;
 8005d14:	68fb      	ldr	r3, [r7, #12]
 8005d16:	2200      	movs	r2, #0
 8005d18:	84da      	strh	r2, [r3, #38]	; 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8005d1a:	68f8      	ldr	r0, [r7, #12]
 8005d1c:	f7ff feaa 	bl	8005a74 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8005d20:	bf00      	nop
 8005d22:	3710      	adds	r7, #16
 8005d24:	46bd      	mov	sp, r7
 8005d26:	bd80      	pop	{r7, pc}

08005d28 <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 8005d28:	b480      	push	{r7}
 8005d2a:	b085      	sub	sp, #20
 8005d2c:	af00      	add	r7, sp, #0
 8005d2e:	6078      	str	r0, [r7, #4]
  const uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 8005d30:	687b      	ldr	r3, [r7, #4]
 8005d32:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8005d36:	b2db      	uxtb	r3, r3
 8005d38:	2b21      	cmp	r3, #33	; 0x21
 8005d3a:	d13e      	bne.n	8005dba <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8005d3c:	687b      	ldr	r3, [r7, #4]
 8005d3e:	689b      	ldr	r3, [r3, #8]
 8005d40:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8005d44:	d114      	bne.n	8005d70 <UART_Transmit_IT+0x48>
 8005d46:	687b      	ldr	r3, [r7, #4]
 8005d48:	691b      	ldr	r3, [r3, #16]
 8005d4a:	2b00      	cmp	r3, #0
 8005d4c:	d110      	bne.n	8005d70 <UART_Transmit_IT+0x48>
    {
      tmp = (const uint16_t *) huart->pTxBuffPtr;
 8005d4e:	687b      	ldr	r3, [r7, #4]
 8005d50:	6a1b      	ldr	r3, [r3, #32]
 8005d52:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 8005d54:	68fb      	ldr	r3, [r7, #12]
 8005d56:	881b      	ldrh	r3, [r3, #0]
 8005d58:	461a      	mov	r2, r3
 8005d5a:	687b      	ldr	r3, [r7, #4]
 8005d5c:	681b      	ldr	r3, [r3, #0]
 8005d5e:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8005d62:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 8005d64:	687b      	ldr	r3, [r7, #4]
 8005d66:	6a1b      	ldr	r3, [r3, #32]
 8005d68:	1c9a      	adds	r2, r3, #2
 8005d6a:	687b      	ldr	r3, [r7, #4]
 8005d6c:	621a      	str	r2, [r3, #32]
 8005d6e:	e008      	b.n	8005d82 <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 8005d70:	687b      	ldr	r3, [r7, #4]
 8005d72:	6a1b      	ldr	r3, [r3, #32]
 8005d74:	1c59      	adds	r1, r3, #1
 8005d76:	687a      	ldr	r2, [r7, #4]
 8005d78:	6211      	str	r1, [r2, #32]
 8005d7a:	781a      	ldrb	r2, [r3, #0]
 8005d7c:	687b      	ldr	r3, [r7, #4]
 8005d7e:	681b      	ldr	r3, [r3, #0]
 8005d80:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 8005d82:	687b      	ldr	r3, [r7, #4]
 8005d84:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8005d86:	b29b      	uxth	r3, r3
 8005d88:	3b01      	subs	r3, #1
 8005d8a:	b29b      	uxth	r3, r3
 8005d8c:	687a      	ldr	r2, [r7, #4]
 8005d8e:	4619      	mov	r1, r3
 8005d90:	84d1      	strh	r1, [r2, #38]	; 0x26
 8005d92:	2b00      	cmp	r3, #0
 8005d94:	d10f      	bne.n	8005db6 <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 8005d96:	687b      	ldr	r3, [r7, #4]
 8005d98:	681b      	ldr	r3, [r3, #0]
 8005d9a:	68da      	ldr	r2, [r3, #12]
 8005d9c:	687b      	ldr	r3, [r7, #4]
 8005d9e:	681b      	ldr	r3, [r3, #0]
 8005da0:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8005da4:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 8005da6:	687b      	ldr	r3, [r7, #4]
 8005da8:	681b      	ldr	r3, [r3, #0]
 8005daa:	68da      	ldr	r2, [r3, #12]
 8005dac:	687b      	ldr	r3, [r7, #4]
 8005dae:	681b      	ldr	r3, [r3, #0]
 8005db0:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8005db4:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 8005db6:	2300      	movs	r3, #0
 8005db8:	e000      	b.n	8005dbc <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 8005dba:	2302      	movs	r3, #2
  }
}
 8005dbc:	4618      	mov	r0, r3
 8005dbe:	3714      	adds	r7, #20
 8005dc0:	46bd      	mov	sp, r7
 8005dc2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005dc6:	4770      	bx	lr

08005dc8 <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8005dc8:	b580      	push	{r7, lr}
 8005dca:	b082      	sub	sp, #8
 8005dcc:	af00      	add	r7, sp, #0
 8005dce:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 8005dd0:	687b      	ldr	r3, [r7, #4]
 8005dd2:	681b      	ldr	r3, [r3, #0]
 8005dd4:	68da      	ldr	r2, [r3, #12]
 8005dd6:	687b      	ldr	r3, [r7, #4]
 8005dd8:	681b      	ldr	r3, [r3, #0]
 8005dda:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8005dde:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8005de0:	687b      	ldr	r3, [r7, #4]
 8005de2:	2220      	movs	r2, #32
 8005de4:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8005de8:	6878      	ldr	r0, [r7, #4]
 8005dea:	f7ff fe25 	bl	8005a38 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 8005dee:	2300      	movs	r3, #0
}
 8005df0:	4618      	mov	r0, r3
 8005df2:	3708      	adds	r7, #8
 8005df4:	46bd      	mov	sp, r7
 8005df6:	bd80      	pop	{r7, pc}

08005df8 <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 8005df8:	b580      	push	{r7, lr}
 8005dfa:	b08c      	sub	sp, #48	; 0x30
 8005dfc:	af00      	add	r7, sp, #0
 8005dfe:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8005e00:	687b      	ldr	r3, [r7, #4]
 8005e02:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8005e06:	b2db      	uxtb	r3, r3
 8005e08:	2b22      	cmp	r3, #34	; 0x22
 8005e0a:	f040 80ae 	bne.w	8005f6a <UART_Receive_IT+0x172>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8005e0e:	687b      	ldr	r3, [r7, #4]
 8005e10:	689b      	ldr	r3, [r3, #8]
 8005e12:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8005e16:	d117      	bne.n	8005e48 <UART_Receive_IT+0x50>
 8005e18:	687b      	ldr	r3, [r7, #4]
 8005e1a:	691b      	ldr	r3, [r3, #16]
 8005e1c:	2b00      	cmp	r3, #0
 8005e1e:	d113      	bne.n	8005e48 <UART_Receive_IT+0x50>
    {
      pdata8bits  = NULL;
 8005e20:	2300      	movs	r3, #0
 8005e22:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 8005e24:	687b      	ldr	r3, [r7, #4]
 8005e26:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005e28:	62bb      	str	r3, [r7, #40]	; 0x28
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 8005e2a:	687b      	ldr	r3, [r7, #4]
 8005e2c:	681b      	ldr	r3, [r3, #0]
 8005e2e:	685b      	ldr	r3, [r3, #4]
 8005e30:	b29b      	uxth	r3, r3
 8005e32:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8005e36:	b29a      	uxth	r2, r3
 8005e38:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005e3a:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 8005e3c:	687b      	ldr	r3, [r7, #4]
 8005e3e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005e40:	1c9a      	adds	r2, r3, #2
 8005e42:	687b      	ldr	r3, [r7, #4]
 8005e44:	629a      	str	r2, [r3, #40]	; 0x28
 8005e46:	e026      	b.n	8005e96 <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 8005e48:	687b      	ldr	r3, [r7, #4]
 8005e4a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005e4c:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits  = NULL;
 8005e4e:	2300      	movs	r3, #0
 8005e50:	62bb      	str	r3, [r7, #40]	; 0x28

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 8005e52:	687b      	ldr	r3, [r7, #4]
 8005e54:	689b      	ldr	r3, [r3, #8]
 8005e56:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8005e5a:	d007      	beq.n	8005e6c <UART_Receive_IT+0x74>
 8005e5c:	687b      	ldr	r3, [r7, #4]
 8005e5e:	689b      	ldr	r3, [r3, #8]
 8005e60:	2b00      	cmp	r3, #0
 8005e62:	d10a      	bne.n	8005e7a <UART_Receive_IT+0x82>
 8005e64:	687b      	ldr	r3, [r7, #4]
 8005e66:	691b      	ldr	r3, [r3, #16]
 8005e68:	2b00      	cmp	r3, #0
 8005e6a:	d106      	bne.n	8005e7a <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 8005e6c:	687b      	ldr	r3, [r7, #4]
 8005e6e:	681b      	ldr	r3, [r3, #0]
 8005e70:	685b      	ldr	r3, [r3, #4]
 8005e72:	b2da      	uxtb	r2, r3
 8005e74:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005e76:	701a      	strb	r2, [r3, #0]
 8005e78:	e008      	b.n	8005e8c <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 8005e7a:	687b      	ldr	r3, [r7, #4]
 8005e7c:	681b      	ldr	r3, [r3, #0]
 8005e7e:	685b      	ldr	r3, [r3, #4]
 8005e80:	b2db      	uxtb	r3, r3
 8005e82:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8005e86:	b2da      	uxtb	r2, r3
 8005e88:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005e8a:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 8005e8c:	687b      	ldr	r3, [r7, #4]
 8005e8e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005e90:	1c5a      	adds	r2, r3, #1
 8005e92:	687b      	ldr	r3, [r7, #4]
 8005e94:	629a      	str	r2, [r3, #40]	; 0x28
    }

    if (--huart->RxXferCount == 0U)
 8005e96:	687b      	ldr	r3, [r7, #4]
 8005e98:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8005e9a:	b29b      	uxth	r3, r3
 8005e9c:	3b01      	subs	r3, #1
 8005e9e:	b29b      	uxth	r3, r3
 8005ea0:	687a      	ldr	r2, [r7, #4]
 8005ea2:	4619      	mov	r1, r3
 8005ea4:	85d1      	strh	r1, [r2, #46]	; 0x2e
 8005ea6:	2b00      	cmp	r3, #0
 8005ea8:	d15d      	bne.n	8005f66 <UART_Receive_IT+0x16e>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 8005eaa:	687b      	ldr	r3, [r7, #4]
 8005eac:	681b      	ldr	r3, [r3, #0]
 8005eae:	68da      	ldr	r2, [r3, #12]
 8005eb0:	687b      	ldr	r3, [r7, #4]
 8005eb2:	681b      	ldr	r3, [r3, #0]
 8005eb4:	f022 0220 	bic.w	r2, r2, #32
 8005eb8:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 8005eba:	687b      	ldr	r3, [r7, #4]
 8005ebc:	681b      	ldr	r3, [r3, #0]
 8005ebe:	68da      	ldr	r2, [r3, #12]
 8005ec0:	687b      	ldr	r3, [r7, #4]
 8005ec2:	681b      	ldr	r3, [r3, #0]
 8005ec4:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8005ec8:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 8005eca:	687b      	ldr	r3, [r7, #4]
 8005ecc:	681b      	ldr	r3, [r3, #0]
 8005ece:	695a      	ldr	r2, [r3, #20]
 8005ed0:	687b      	ldr	r3, [r7, #4]
 8005ed2:	681b      	ldr	r3, [r3, #0]
 8005ed4:	f022 0201 	bic.w	r2, r2, #1
 8005ed8:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8005eda:	687b      	ldr	r3, [r7, #4]
 8005edc:	2220      	movs	r2, #32
 8005ede:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 8005ee2:	687b      	ldr	r3, [r7, #4]
 8005ee4:	2200      	movs	r2, #0
 8005ee6:	635a      	str	r2, [r3, #52]	; 0x34

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8005ee8:	687b      	ldr	r3, [r7, #4]
 8005eea:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005eec:	2b01      	cmp	r3, #1
 8005eee:	d135      	bne.n	8005f5c <UART_Receive_IT+0x164>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005ef0:	687b      	ldr	r3, [r7, #4]
 8005ef2:	2200      	movs	r2, #0
 8005ef4:	631a      	str	r2, [r3, #48]	; 0x30

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8005ef6:	687b      	ldr	r3, [r7, #4]
 8005ef8:	681b      	ldr	r3, [r3, #0]
 8005efa:	330c      	adds	r3, #12
 8005efc:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005efe:	697b      	ldr	r3, [r7, #20]
 8005f00:	e853 3f00 	ldrex	r3, [r3]
 8005f04:	613b      	str	r3, [r7, #16]
   return(result);
 8005f06:	693b      	ldr	r3, [r7, #16]
 8005f08:	f023 0310 	bic.w	r3, r3, #16
 8005f0c:	627b      	str	r3, [r7, #36]	; 0x24
 8005f0e:	687b      	ldr	r3, [r7, #4]
 8005f10:	681b      	ldr	r3, [r3, #0]
 8005f12:	330c      	adds	r3, #12
 8005f14:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005f16:	623a      	str	r2, [r7, #32]
 8005f18:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005f1a:	69f9      	ldr	r1, [r7, #28]
 8005f1c:	6a3a      	ldr	r2, [r7, #32]
 8005f1e:	e841 2300 	strex	r3, r2, [r1]
 8005f22:	61bb      	str	r3, [r7, #24]
   return(result);
 8005f24:	69bb      	ldr	r3, [r7, #24]
 8005f26:	2b00      	cmp	r3, #0
 8005f28:	d1e5      	bne.n	8005ef6 <UART_Receive_IT+0xfe>

        /* Check if IDLE flag is set */
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 8005f2a:	687b      	ldr	r3, [r7, #4]
 8005f2c:	681b      	ldr	r3, [r3, #0]
 8005f2e:	681b      	ldr	r3, [r3, #0]
 8005f30:	f003 0310 	and.w	r3, r3, #16
 8005f34:	2b10      	cmp	r3, #16
 8005f36:	d10a      	bne.n	8005f4e <UART_Receive_IT+0x156>
        {
          /* Clear IDLE flag in ISR */
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 8005f38:	2300      	movs	r3, #0
 8005f3a:	60fb      	str	r3, [r7, #12]
 8005f3c:	687b      	ldr	r3, [r7, #4]
 8005f3e:	681b      	ldr	r3, [r3, #0]
 8005f40:	681b      	ldr	r3, [r3, #0]
 8005f42:	60fb      	str	r3, [r7, #12]
 8005f44:	687b      	ldr	r3, [r7, #4]
 8005f46:	681b      	ldr	r3, [r3, #0]
 8005f48:	685b      	ldr	r3, [r3, #4]
 8005f4a:	60fb      	str	r3, [r7, #12]
 8005f4c:	68fb      	ldr	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8005f4e:	687b      	ldr	r3, [r7, #4]
 8005f50:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 8005f52:	4619      	mov	r1, r3
 8005f54:	6878      	ldr	r0, [r7, #4]
 8005f56:	f7ff fd97 	bl	8005a88 <HAL_UARTEx_RxEventCallback>
 8005f5a:	e002      	b.n	8005f62 <UART_Receive_IT+0x16a>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxCpltCallback(huart);
#else
        /*Call legacy weak Rx complete callback*/
        HAL_UART_RxCpltCallback(huart);
 8005f5c:	6878      	ldr	r0, [r7, #4]
 8005f5e:	f7ff fd7f 	bl	8005a60 <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }

      return HAL_OK;
 8005f62:	2300      	movs	r3, #0
 8005f64:	e002      	b.n	8005f6c <UART_Receive_IT+0x174>
    }
    return HAL_OK;
 8005f66:	2300      	movs	r3, #0
 8005f68:	e000      	b.n	8005f6c <UART_Receive_IT+0x174>
  }
  else
  {
    return HAL_BUSY;
 8005f6a:	2302      	movs	r3, #2
  }
}
 8005f6c:	4618      	mov	r0, r3
 8005f6e:	3730      	adds	r7, #48	; 0x30
 8005f70:	46bd      	mov	sp, r7
 8005f72:	bd80      	pop	{r7, pc}

08005f74 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8005f74:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8005f78:	b0c0      	sub	sp, #256	; 0x100
 8005f7a:	af00      	add	r7, sp, #0
 8005f7c:	f8c7 00f4 	str.w	r0, [r7, #244]	; 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8005f80:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005f84:	681b      	ldr	r3, [r3, #0]
 8005f86:	691b      	ldr	r3, [r3, #16]
 8005f88:	f423 5040 	bic.w	r0, r3, #12288	; 0x3000
 8005f8c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005f90:	68d9      	ldr	r1, [r3, #12]
 8005f92:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005f96:	681a      	ldr	r2, [r3, #0]
 8005f98:	ea40 0301 	orr.w	r3, r0, r1
 8005f9c:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8005f9e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005fa2:	689a      	ldr	r2, [r3, #8]
 8005fa4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005fa8:	691b      	ldr	r3, [r3, #16]
 8005faa:	431a      	orrs	r2, r3
 8005fac:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005fb0:	695b      	ldr	r3, [r3, #20]
 8005fb2:	431a      	orrs	r2, r3
 8005fb4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005fb8:	69db      	ldr	r3, [r3, #28]
 8005fba:	4313      	orrs	r3, r2
 8005fbc:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
  MODIFY_REG(huart->Instance->CR1,
 8005fc0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005fc4:	681b      	ldr	r3, [r3, #0]
 8005fc6:	68db      	ldr	r3, [r3, #12]
 8005fc8:	f423 4116 	bic.w	r1, r3, #38400	; 0x9600
 8005fcc:	f021 010c 	bic.w	r1, r1, #12
 8005fd0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005fd4:	681a      	ldr	r2, [r3, #0]
 8005fd6:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 8005fda:	430b      	orrs	r3, r1
 8005fdc:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8005fde:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005fe2:	681b      	ldr	r3, [r3, #0]
 8005fe4:	695b      	ldr	r3, [r3, #20]
 8005fe6:	f423 7040 	bic.w	r0, r3, #768	; 0x300
 8005fea:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005fee:	6999      	ldr	r1, [r3, #24]
 8005ff0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005ff4:	681a      	ldr	r2, [r3, #0]
 8005ff6:	ea40 0301 	orr.w	r3, r0, r1
 8005ffa:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8005ffc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006000:	681a      	ldr	r2, [r3, #0]
 8006002:	4b8f      	ldr	r3, [pc, #572]	; (8006240 <UART_SetConfig+0x2cc>)
 8006004:	429a      	cmp	r2, r3
 8006006:	d005      	beq.n	8006014 <UART_SetConfig+0xa0>
 8006008:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800600c:	681a      	ldr	r2, [r3, #0]
 800600e:	4b8d      	ldr	r3, [pc, #564]	; (8006244 <UART_SetConfig+0x2d0>)
 8006010:	429a      	cmp	r2, r3
 8006012:	d104      	bne.n	800601e <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8006014:	f7ff f9aa 	bl	800536c <HAL_RCC_GetPCLK2Freq>
 8006018:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
 800601c:	e003      	b.n	8006026 <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 800601e:	f7ff f991 	bl	8005344 <HAL_RCC_GetPCLK1Freq>
 8006022:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8006026:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800602a:	69db      	ldr	r3, [r3, #28]
 800602c:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8006030:	f040 810c 	bne.w	800624c <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8006034:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8006038:	2200      	movs	r2, #0
 800603a:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 800603e:	f8c7 20ec 	str.w	r2, [r7, #236]	; 0xec
 8006042:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	; 0xe8
 8006046:	4622      	mov	r2, r4
 8006048:	462b      	mov	r3, r5
 800604a:	1891      	adds	r1, r2, r2
 800604c:	65b9      	str	r1, [r7, #88]	; 0x58
 800604e:	415b      	adcs	r3, r3
 8006050:	65fb      	str	r3, [r7, #92]	; 0x5c
 8006052:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 8006056:	4621      	mov	r1, r4
 8006058:	eb12 0801 	adds.w	r8, r2, r1
 800605c:	4629      	mov	r1, r5
 800605e:	eb43 0901 	adc.w	r9, r3, r1
 8006062:	f04f 0200 	mov.w	r2, #0
 8006066:	f04f 0300 	mov.w	r3, #0
 800606a:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 800606e:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8006072:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8006076:	4690      	mov	r8, r2
 8006078:	4699      	mov	r9, r3
 800607a:	4623      	mov	r3, r4
 800607c:	eb18 0303 	adds.w	r3, r8, r3
 8006080:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 8006084:	462b      	mov	r3, r5
 8006086:	eb49 0303 	adc.w	r3, r9, r3
 800608a:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 800608e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006092:	685b      	ldr	r3, [r3, #4]
 8006094:	2200      	movs	r2, #0
 8006096:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 800609a:	f8c7 20dc 	str.w	r2, [r7, #220]	; 0xdc
 800609e:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	; 0xd8
 80060a2:	460b      	mov	r3, r1
 80060a4:	18db      	adds	r3, r3, r3
 80060a6:	653b      	str	r3, [r7, #80]	; 0x50
 80060a8:	4613      	mov	r3, r2
 80060aa:	eb42 0303 	adc.w	r3, r2, r3
 80060ae:	657b      	str	r3, [r7, #84]	; 0x54
 80060b0:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	; 0x50
 80060b4:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	; 0xe0
 80060b8:	f7fa f8e2 	bl	8000280 <__aeabi_uldivmod>
 80060bc:	4602      	mov	r2, r0
 80060be:	460b      	mov	r3, r1
 80060c0:	4b61      	ldr	r3, [pc, #388]	; (8006248 <UART_SetConfig+0x2d4>)
 80060c2:	fba3 2302 	umull	r2, r3, r3, r2
 80060c6:	095b      	lsrs	r3, r3, #5
 80060c8:	011c      	lsls	r4, r3, #4
 80060ca:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80060ce:	2200      	movs	r2, #0
 80060d0:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 80060d4:	f8c7 20d4 	str.w	r2, [r7, #212]	; 0xd4
 80060d8:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	; 0xd0
 80060dc:	4642      	mov	r2, r8
 80060de:	464b      	mov	r3, r9
 80060e0:	1891      	adds	r1, r2, r2
 80060e2:	64b9      	str	r1, [r7, #72]	; 0x48
 80060e4:	415b      	adcs	r3, r3
 80060e6:	64fb      	str	r3, [r7, #76]	; 0x4c
 80060e8:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 80060ec:	4641      	mov	r1, r8
 80060ee:	eb12 0a01 	adds.w	sl, r2, r1
 80060f2:	4649      	mov	r1, r9
 80060f4:	eb43 0b01 	adc.w	fp, r3, r1
 80060f8:	f04f 0200 	mov.w	r2, #0
 80060fc:	f04f 0300 	mov.w	r3, #0
 8006100:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 8006104:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 8006108:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 800610c:	4692      	mov	sl, r2
 800610e:	469b      	mov	fp, r3
 8006110:	4643      	mov	r3, r8
 8006112:	eb1a 0303 	adds.w	r3, sl, r3
 8006116:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 800611a:	464b      	mov	r3, r9
 800611c:	eb4b 0303 	adc.w	r3, fp, r3
 8006120:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 8006124:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006128:	685b      	ldr	r3, [r3, #4]
 800612a:	2200      	movs	r2, #0
 800612c:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8006130:	f8c7 20c4 	str.w	r2, [r7, #196]	; 0xc4
 8006134:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	; 0xc0
 8006138:	460b      	mov	r3, r1
 800613a:	18db      	adds	r3, r3, r3
 800613c:	643b      	str	r3, [r7, #64]	; 0x40
 800613e:	4613      	mov	r3, r2
 8006140:	eb42 0303 	adc.w	r3, r2, r3
 8006144:	647b      	str	r3, [r7, #68]	; 0x44
 8006146:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 800614a:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	; 0xc8
 800614e:	f7fa f897 	bl	8000280 <__aeabi_uldivmod>
 8006152:	4602      	mov	r2, r0
 8006154:	460b      	mov	r3, r1
 8006156:	4611      	mov	r1, r2
 8006158:	4b3b      	ldr	r3, [pc, #236]	; (8006248 <UART_SetConfig+0x2d4>)
 800615a:	fba3 2301 	umull	r2, r3, r3, r1
 800615e:	095b      	lsrs	r3, r3, #5
 8006160:	2264      	movs	r2, #100	; 0x64
 8006162:	fb02 f303 	mul.w	r3, r2, r3
 8006166:	1acb      	subs	r3, r1, r3
 8006168:	00db      	lsls	r3, r3, #3
 800616a:	f103 0232 	add.w	r2, r3, #50	; 0x32
 800616e:	4b36      	ldr	r3, [pc, #216]	; (8006248 <UART_SetConfig+0x2d4>)
 8006170:	fba3 2302 	umull	r2, r3, r3, r2
 8006174:	095b      	lsrs	r3, r3, #5
 8006176:	005b      	lsls	r3, r3, #1
 8006178:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 800617c:	441c      	add	r4, r3
 800617e:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8006182:	2200      	movs	r2, #0
 8006184:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8006188:	f8c7 20bc 	str.w	r2, [r7, #188]	; 0xbc
 800618c:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	; 0xb8
 8006190:	4642      	mov	r2, r8
 8006192:	464b      	mov	r3, r9
 8006194:	1891      	adds	r1, r2, r2
 8006196:	63b9      	str	r1, [r7, #56]	; 0x38
 8006198:	415b      	adcs	r3, r3
 800619a:	63fb      	str	r3, [r7, #60]	; 0x3c
 800619c:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 80061a0:	4641      	mov	r1, r8
 80061a2:	1851      	adds	r1, r2, r1
 80061a4:	6339      	str	r1, [r7, #48]	; 0x30
 80061a6:	4649      	mov	r1, r9
 80061a8:	414b      	adcs	r3, r1
 80061aa:	637b      	str	r3, [r7, #52]	; 0x34
 80061ac:	f04f 0200 	mov.w	r2, #0
 80061b0:	f04f 0300 	mov.w	r3, #0
 80061b4:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	; 0x30
 80061b8:	4659      	mov	r1, fp
 80061ba:	00cb      	lsls	r3, r1, #3
 80061bc:	4651      	mov	r1, sl
 80061be:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 80061c2:	4651      	mov	r1, sl
 80061c4:	00ca      	lsls	r2, r1, #3
 80061c6:	4610      	mov	r0, r2
 80061c8:	4619      	mov	r1, r3
 80061ca:	4603      	mov	r3, r0
 80061cc:	4642      	mov	r2, r8
 80061ce:	189b      	adds	r3, r3, r2
 80061d0:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 80061d4:	464b      	mov	r3, r9
 80061d6:	460a      	mov	r2, r1
 80061d8:	eb42 0303 	adc.w	r3, r2, r3
 80061dc:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 80061e0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80061e4:	685b      	ldr	r3, [r3, #4]
 80061e6:	2200      	movs	r2, #0
 80061e8:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 80061ec:	f8c7 20ac 	str.w	r2, [r7, #172]	; 0xac
 80061f0:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	; 0xa8
 80061f4:	460b      	mov	r3, r1
 80061f6:	18db      	adds	r3, r3, r3
 80061f8:	62bb      	str	r3, [r7, #40]	; 0x28
 80061fa:	4613      	mov	r3, r2
 80061fc:	eb42 0303 	adc.w	r3, r2, r3
 8006200:	62fb      	str	r3, [r7, #44]	; 0x2c
 8006202:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8006206:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	; 0xb0
 800620a:	f7fa f839 	bl	8000280 <__aeabi_uldivmod>
 800620e:	4602      	mov	r2, r0
 8006210:	460b      	mov	r3, r1
 8006212:	4b0d      	ldr	r3, [pc, #52]	; (8006248 <UART_SetConfig+0x2d4>)
 8006214:	fba3 1302 	umull	r1, r3, r3, r2
 8006218:	095b      	lsrs	r3, r3, #5
 800621a:	2164      	movs	r1, #100	; 0x64
 800621c:	fb01 f303 	mul.w	r3, r1, r3
 8006220:	1ad3      	subs	r3, r2, r3
 8006222:	00db      	lsls	r3, r3, #3
 8006224:	3332      	adds	r3, #50	; 0x32
 8006226:	4a08      	ldr	r2, [pc, #32]	; (8006248 <UART_SetConfig+0x2d4>)
 8006228:	fba2 2303 	umull	r2, r3, r2, r3
 800622c:	095b      	lsrs	r3, r3, #5
 800622e:	f003 0207 	and.w	r2, r3, #7
 8006232:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006236:	681b      	ldr	r3, [r3, #0]
 8006238:	4422      	add	r2, r4
 800623a:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 800623c:	e106      	b.n	800644c <UART_SetConfig+0x4d8>
 800623e:	bf00      	nop
 8006240:	40011000 	.word	0x40011000
 8006244:	40011400 	.word	0x40011400
 8006248:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 800624c:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8006250:	2200      	movs	r2, #0
 8006252:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 8006256:	f8c7 20a4 	str.w	r2, [r7, #164]	; 0xa4
 800625a:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	; 0xa0
 800625e:	4642      	mov	r2, r8
 8006260:	464b      	mov	r3, r9
 8006262:	1891      	adds	r1, r2, r2
 8006264:	6239      	str	r1, [r7, #32]
 8006266:	415b      	adcs	r3, r3
 8006268:	627b      	str	r3, [r7, #36]	; 0x24
 800626a:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 800626e:	4641      	mov	r1, r8
 8006270:	1854      	adds	r4, r2, r1
 8006272:	4649      	mov	r1, r9
 8006274:	eb43 0501 	adc.w	r5, r3, r1
 8006278:	f04f 0200 	mov.w	r2, #0
 800627c:	f04f 0300 	mov.w	r3, #0
 8006280:	00eb      	lsls	r3, r5, #3
 8006282:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8006286:	00e2      	lsls	r2, r4, #3
 8006288:	4614      	mov	r4, r2
 800628a:	461d      	mov	r5, r3
 800628c:	4643      	mov	r3, r8
 800628e:	18e3      	adds	r3, r4, r3
 8006290:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 8006294:	464b      	mov	r3, r9
 8006296:	eb45 0303 	adc.w	r3, r5, r3
 800629a:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 800629e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80062a2:	685b      	ldr	r3, [r3, #4]
 80062a4:	2200      	movs	r2, #0
 80062a6:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 80062aa:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 80062ae:	f04f 0200 	mov.w	r2, #0
 80062b2:	f04f 0300 	mov.w	r3, #0
 80062b6:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	; 0x90
 80062ba:	4629      	mov	r1, r5
 80062bc:	008b      	lsls	r3, r1, #2
 80062be:	4621      	mov	r1, r4
 80062c0:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 80062c4:	4621      	mov	r1, r4
 80062c6:	008a      	lsls	r2, r1, #2
 80062c8:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	; 0x98
 80062cc:	f7f9 ffd8 	bl	8000280 <__aeabi_uldivmod>
 80062d0:	4602      	mov	r2, r0
 80062d2:	460b      	mov	r3, r1
 80062d4:	4b60      	ldr	r3, [pc, #384]	; (8006458 <UART_SetConfig+0x4e4>)
 80062d6:	fba3 2302 	umull	r2, r3, r3, r2
 80062da:	095b      	lsrs	r3, r3, #5
 80062dc:	011c      	lsls	r4, r3, #4
 80062de:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80062e2:	2200      	movs	r2, #0
 80062e4:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 80062e8:	f8c7 208c 	str.w	r2, [r7, #140]	; 0x8c
 80062ec:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	; 0x88
 80062f0:	4642      	mov	r2, r8
 80062f2:	464b      	mov	r3, r9
 80062f4:	1891      	adds	r1, r2, r2
 80062f6:	61b9      	str	r1, [r7, #24]
 80062f8:	415b      	adcs	r3, r3
 80062fa:	61fb      	str	r3, [r7, #28]
 80062fc:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8006300:	4641      	mov	r1, r8
 8006302:	1851      	adds	r1, r2, r1
 8006304:	6139      	str	r1, [r7, #16]
 8006306:	4649      	mov	r1, r9
 8006308:	414b      	adcs	r3, r1
 800630a:	617b      	str	r3, [r7, #20]
 800630c:	f04f 0200 	mov.w	r2, #0
 8006310:	f04f 0300 	mov.w	r3, #0
 8006314:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8006318:	4659      	mov	r1, fp
 800631a:	00cb      	lsls	r3, r1, #3
 800631c:	4651      	mov	r1, sl
 800631e:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8006322:	4651      	mov	r1, sl
 8006324:	00ca      	lsls	r2, r1, #3
 8006326:	4610      	mov	r0, r2
 8006328:	4619      	mov	r1, r3
 800632a:	4603      	mov	r3, r0
 800632c:	4642      	mov	r2, r8
 800632e:	189b      	adds	r3, r3, r2
 8006330:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8006334:	464b      	mov	r3, r9
 8006336:	460a      	mov	r2, r1
 8006338:	eb42 0303 	adc.w	r3, r2, r3
 800633c:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 8006340:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006344:	685b      	ldr	r3, [r3, #4]
 8006346:	2200      	movs	r2, #0
 8006348:	67bb      	str	r3, [r7, #120]	; 0x78
 800634a:	67fa      	str	r2, [r7, #124]	; 0x7c
 800634c:	f04f 0200 	mov.w	r2, #0
 8006350:	f04f 0300 	mov.w	r3, #0
 8006354:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	; 0x78
 8006358:	4649      	mov	r1, r9
 800635a:	008b      	lsls	r3, r1, #2
 800635c:	4641      	mov	r1, r8
 800635e:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8006362:	4641      	mov	r1, r8
 8006364:	008a      	lsls	r2, r1, #2
 8006366:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	; 0x80
 800636a:	f7f9 ff89 	bl	8000280 <__aeabi_uldivmod>
 800636e:	4602      	mov	r2, r0
 8006370:	460b      	mov	r3, r1
 8006372:	4611      	mov	r1, r2
 8006374:	4b38      	ldr	r3, [pc, #224]	; (8006458 <UART_SetConfig+0x4e4>)
 8006376:	fba3 2301 	umull	r2, r3, r3, r1
 800637a:	095b      	lsrs	r3, r3, #5
 800637c:	2264      	movs	r2, #100	; 0x64
 800637e:	fb02 f303 	mul.w	r3, r2, r3
 8006382:	1acb      	subs	r3, r1, r3
 8006384:	011b      	lsls	r3, r3, #4
 8006386:	3332      	adds	r3, #50	; 0x32
 8006388:	4a33      	ldr	r2, [pc, #204]	; (8006458 <UART_SetConfig+0x4e4>)
 800638a:	fba2 2303 	umull	r2, r3, r2, r3
 800638e:	095b      	lsrs	r3, r3, #5
 8006390:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8006394:	441c      	add	r4, r3
 8006396:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800639a:	2200      	movs	r2, #0
 800639c:	673b      	str	r3, [r7, #112]	; 0x70
 800639e:	677a      	str	r2, [r7, #116]	; 0x74
 80063a0:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	; 0x70
 80063a4:	4642      	mov	r2, r8
 80063a6:	464b      	mov	r3, r9
 80063a8:	1891      	adds	r1, r2, r2
 80063aa:	60b9      	str	r1, [r7, #8]
 80063ac:	415b      	adcs	r3, r3
 80063ae:	60fb      	str	r3, [r7, #12]
 80063b0:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 80063b4:	4641      	mov	r1, r8
 80063b6:	1851      	adds	r1, r2, r1
 80063b8:	6039      	str	r1, [r7, #0]
 80063ba:	4649      	mov	r1, r9
 80063bc:	414b      	adcs	r3, r1
 80063be:	607b      	str	r3, [r7, #4]
 80063c0:	f04f 0200 	mov.w	r2, #0
 80063c4:	f04f 0300 	mov.w	r3, #0
 80063c8:	e9d7 ab00 	ldrd	sl, fp, [r7]
 80063cc:	4659      	mov	r1, fp
 80063ce:	00cb      	lsls	r3, r1, #3
 80063d0:	4651      	mov	r1, sl
 80063d2:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 80063d6:	4651      	mov	r1, sl
 80063d8:	00ca      	lsls	r2, r1, #3
 80063da:	4610      	mov	r0, r2
 80063dc:	4619      	mov	r1, r3
 80063de:	4603      	mov	r3, r0
 80063e0:	4642      	mov	r2, r8
 80063e2:	189b      	adds	r3, r3, r2
 80063e4:	66bb      	str	r3, [r7, #104]	; 0x68
 80063e6:	464b      	mov	r3, r9
 80063e8:	460a      	mov	r2, r1
 80063ea:	eb42 0303 	adc.w	r3, r2, r3
 80063ee:	66fb      	str	r3, [r7, #108]	; 0x6c
 80063f0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80063f4:	685b      	ldr	r3, [r3, #4]
 80063f6:	2200      	movs	r2, #0
 80063f8:	663b      	str	r3, [r7, #96]	; 0x60
 80063fa:	667a      	str	r2, [r7, #100]	; 0x64
 80063fc:	f04f 0200 	mov.w	r2, #0
 8006400:	f04f 0300 	mov.w	r3, #0
 8006404:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	; 0x60
 8006408:	4649      	mov	r1, r9
 800640a:	008b      	lsls	r3, r1, #2
 800640c:	4641      	mov	r1, r8
 800640e:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8006412:	4641      	mov	r1, r8
 8006414:	008a      	lsls	r2, r1, #2
 8006416:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	; 0x68
 800641a:	f7f9 ff31 	bl	8000280 <__aeabi_uldivmod>
 800641e:	4602      	mov	r2, r0
 8006420:	460b      	mov	r3, r1
 8006422:	4b0d      	ldr	r3, [pc, #52]	; (8006458 <UART_SetConfig+0x4e4>)
 8006424:	fba3 1302 	umull	r1, r3, r3, r2
 8006428:	095b      	lsrs	r3, r3, #5
 800642a:	2164      	movs	r1, #100	; 0x64
 800642c:	fb01 f303 	mul.w	r3, r1, r3
 8006430:	1ad3      	subs	r3, r2, r3
 8006432:	011b      	lsls	r3, r3, #4
 8006434:	3332      	adds	r3, #50	; 0x32
 8006436:	4a08      	ldr	r2, [pc, #32]	; (8006458 <UART_SetConfig+0x4e4>)
 8006438:	fba2 2303 	umull	r2, r3, r2, r3
 800643c:	095b      	lsrs	r3, r3, #5
 800643e:	f003 020f 	and.w	r2, r3, #15
 8006442:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006446:	681b      	ldr	r3, [r3, #0]
 8006448:	4422      	add	r2, r4
 800644a:	609a      	str	r2, [r3, #8]
}
 800644c:	bf00      	nop
 800644e:	f507 7780 	add.w	r7, r7, #256	; 0x100
 8006452:	46bd      	mov	sp, r7
 8006454:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8006458:	51eb851f 	.word	0x51eb851f

0800645c <USB_CoreInit>:
  * @param  cfg pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 800645c:	b084      	sub	sp, #16
 800645e:	b580      	push	{r7, lr}
 8006460:	b084      	sub	sp, #16
 8006462:	af00      	add	r7, sp, #0
 8006464:	6078      	str	r0, [r7, #4]
 8006466:	f107 001c 	add.w	r0, r7, #28
 800646a:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret;
  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 800646e:	f897 3021 	ldrb.w	r3, [r7, #33]	; 0x21
 8006472:	2b01      	cmp	r3, #1
 8006474:	d123      	bne.n	80064be <USB_CoreInit+0x62>
  {
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 8006476:	687b      	ldr	r3, [r7, #4]
 8006478:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800647a:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 800647e:	687b      	ldr	r3, [r7, #4]
 8006480:	639a      	str	r2, [r3, #56]	; 0x38

    /* Init The ULPI Interface */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_TSDPS | USB_OTG_GUSBCFG_ULPIFSLS | USB_OTG_GUSBCFG_PHYSEL);
 8006482:	687b      	ldr	r3, [r7, #4]
 8006484:	68db      	ldr	r3, [r3, #12]
 8006486:	f423 0384 	bic.w	r3, r3, #4325376	; 0x420000
 800648a:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800648e:	687a      	ldr	r2, [r7, #4]
 8006490:	60d3      	str	r3, [r2, #12]

    /* Select vbus source */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_ULPIEVBUSD | USB_OTG_GUSBCFG_ULPIEVBUSI);
 8006492:	687b      	ldr	r3, [r7, #4]
 8006494:	68db      	ldr	r3, [r3, #12]
 8006496:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 800649a:	687b      	ldr	r3, [r7, #4]
 800649c:	60da      	str	r2, [r3, #12]
    if (cfg.use_external_vbus == 1U)
 800649e:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 80064a2:	2b01      	cmp	r3, #1
 80064a4:	d105      	bne.n	80064b2 <USB_CoreInit+0x56>
    {
      USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPIEVBUSD;
 80064a6:	687b      	ldr	r3, [r7, #4]
 80064a8:	68db      	ldr	r3, [r3, #12]
 80064aa:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 80064ae:	687b      	ldr	r3, [r7, #4]
 80064b0:	60da      	str	r2, [r3, #12]
    }

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 80064b2:	6878      	ldr	r0, [r7, #4]
 80064b4:	f001 fae8 	bl	8007a88 <USB_CoreReset>
 80064b8:	4603      	mov	r3, r0
 80064ba:	73fb      	strb	r3, [r7, #15]
 80064bc:	e01b      	b.n	80064f6 <USB_CoreInit+0x9a>
  }
  else /* FS interface (embedded Phy) */
  {
    /* Select FS Embedded PHY */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 80064be:	687b      	ldr	r3, [r7, #4]
 80064c0:	68db      	ldr	r3, [r3, #12]
 80064c2:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 80064c6:	687b      	ldr	r3, [r7, #4]
 80064c8:	60da      	str	r2, [r3, #12]

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 80064ca:	6878      	ldr	r0, [r7, #4]
 80064cc:	f001 fadc 	bl	8007a88 <USB_CoreReset>
 80064d0:	4603      	mov	r3, r0
 80064d2:	73fb      	strb	r3, [r7, #15]

    if (cfg.battery_charging_enable == 0U)
 80064d4:	f897 3025 	ldrb.w	r3, [r7, #37]	; 0x25
 80064d8:	2b00      	cmp	r3, #0
 80064da:	d106      	bne.n	80064ea <USB_CoreInit+0x8e>
    {
      /* Activate the USB Transceiver */
      USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 80064dc:	687b      	ldr	r3, [r7, #4]
 80064de:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80064e0:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 80064e4:	687b      	ldr	r3, [r7, #4]
 80064e6:	639a      	str	r2, [r3, #56]	; 0x38
 80064e8:	e005      	b.n	80064f6 <USB_CoreInit+0x9a>
    }
    else
    {
      /* Deactivate the USB Transceiver */
      USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 80064ea:	687b      	ldr	r3, [r7, #4]
 80064ec:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80064ee:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 80064f2:	687b      	ldr	r3, [r7, #4]
 80064f4:	639a      	str	r2, [r3, #56]	; 0x38
    }
  }

  if (cfg.dma_enable == 1U)
 80064f6:	7fbb      	ldrb	r3, [r7, #30]
 80064f8:	2b01      	cmp	r3, #1
 80064fa:	d10b      	bne.n	8006514 <USB_CoreInit+0xb8>
  {
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_HBSTLEN_2;
 80064fc:	687b      	ldr	r3, [r7, #4]
 80064fe:	689b      	ldr	r3, [r3, #8]
 8006500:	f043 0206 	orr.w	r2, r3, #6
 8006504:	687b      	ldr	r3, [r7, #4]
 8006506:	609a      	str	r2, [r3, #8]
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_DMAEN;
 8006508:	687b      	ldr	r3, [r7, #4]
 800650a:	689b      	ldr	r3, [r3, #8]
 800650c:	f043 0220 	orr.w	r2, r3, #32
 8006510:	687b      	ldr	r3, [r7, #4]
 8006512:	609a      	str	r2, [r3, #8]
  }

  return ret;
 8006514:	7bfb      	ldrb	r3, [r7, #15]
}
 8006516:	4618      	mov	r0, r3
 8006518:	3710      	adds	r7, #16
 800651a:	46bd      	mov	sp, r7
 800651c:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8006520:	b004      	add	sp, #16
 8006522:	4770      	bx	lr

08006524 <USB_SetTurnaroundTime>:
  * @param  hclk: AHB clock frequency
  * @retval USB turnaround time In PHY Clocks number
  */
HAL_StatusTypeDef USB_SetTurnaroundTime(USB_OTG_GlobalTypeDef *USBx,
                                        uint32_t hclk, uint8_t speed)
{
 8006524:	b480      	push	{r7}
 8006526:	b087      	sub	sp, #28
 8006528:	af00      	add	r7, sp, #0
 800652a:	60f8      	str	r0, [r7, #12]
 800652c:	60b9      	str	r1, [r7, #8]
 800652e:	4613      	mov	r3, r2
 8006530:	71fb      	strb	r3, [r7, #7]

  /* The USBTRD is configured according to the tables below, depending on AHB frequency
  used by application. In the low AHB frequency range it is used to stretch enough the USB response
  time to IN tokens, the USB turnaround time, so to compensate for the longer AHB read access
  latency to the Data FIFO */
  if (speed == USBD_FS_SPEED)
 8006532:	79fb      	ldrb	r3, [r7, #7]
 8006534:	2b02      	cmp	r3, #2
 8006536:	d165      	bne.n	8006604 <USB_SetTurnaroundTime+0xe0>
  {
    if ((hclk >= 14200000U) && (hclk < 15000000U))
 8006538:	68bb      	ldr	r3, [r7, #8]
 800653a:	4a41      	ldr	r2, [pc, #260]	; (8006640 <USB_SetTurnaroundTime+0x11c>)
 800653c:	4293      	cmp	r3, r2
 800653e:	d906      	bls.n	800654e <USB_SetTurnaroundTime+0x2a>
 8006540:	68bb      	ldr	r3, [r7, #8]
 8006542:	4a40      	ldr	r2, [pc, #256]	; (8006644 <USB_SetTurnaroundTime+0x120>)
 8006544:	4293      	cmp	r3, r2
 8006546:	d202      	bcs.n	800654e <USB_SetTurnaroundTime+0x2a>
    {
      /* hclk Clock Range between 14.2-15 MHz */
      UsbTrd = 0xFU;
 8006548:	230f      	movs	r3, #15
 800654a:	617b      	str	r3, [r7, #20]
 800654c:	e062      	b.n	8006614 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 15000000U) && (hclk < 16000000U))
 800654e:	68bb      	ldr	r3, [r7, #8]
 8006550:	4a3c      	ldr	r2, [pc, #240]	; (8006644 <USB_SetTurnaroundTime+0x120>)
 8006552:	4293      	cmp	r3, r2
 8006554:	d306      	bcc.n	8006564 <USB_SetTurnaroundTime+0x40>
 8006556:	68bb      	ldr	r3, [r7, #8]
 8006558:	4a3b      	ldr	r2, [pc, #236]	; (8006648 <USB_SetTurnaroundTime+0x124>)
 800655a:	4293      	cmp	r3, r2
 800655c:	d202      	bcs.n	8006564 <USB_SetTurnaroundTime+0x40>
    {
      /* hclk Clock Range between 15-16 MHz */
      UsbTrd = 0xEU;
 800655e:	230e      	movs	r3, #14
 8006560:	617b      	str	r3, [r7, #20]
 8006562:	e057      	b.n	8006614 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 16000000U) && (hclk < 17200000U))
 8006564:	68bb      	ldr	r3, [r7, #8]
 8006566:	4a38      	ldr	r2, [pc, #224]	; (8006648 <USB_SetTurnaroundTime+0x124>)
 8006568:	4293      	cmp	r3, r2
 800656a:	d306      	bcc.n	800657a <USB_SetTurnaroundTime+0x56>
 800656c:	68bb      	ldr	r3, [r7, #8]
 800656e:	4a37      	ldr	r2, [pc, #220]	; (800664c <USB_SetTurnaroundTime+0x128>)
 8006570:	4293      	cmp	r3, r2
 8006572:	d202      	bcs.n	800657a <USB_SetTurnaroundTime+0x56>
    {
      /* hclk Clock Range between 16-17.2 MHz */
      UsbTrd = 0xDU;
 8006574:	230d      	movs	r3, #13
 8006576:	617b      	str	r3, [r7, #20]
 8006578:	e04c      	b.n	8006614 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 17200000U) && (hclk < 18500000U))
 800657a:	68bb      	ldr	r3, [r7, #8]
 800657c:	4a33      	ldr	r2, [pc, #204]	; (800664c <USB_SetTurnaroundTime+0x128>)
 800657e:	4293      	cmp	r3, r2
 8006580:	d306      	bcc.n	8006590 <USB_SetTurnaroundTime+0x6c>
 8006582:	68bb      	ldr	r3, [r7, #8]
 8006584:	4a32      	ldr	r2, [pc, #200]	; (8006650 <USB_SetTurnaroundTime+0x12c>)
 8006586:	4293      	cmp	r3, r2
 8006588:	d802      	bhi.n	8006590 <USB_SetTurnaroundTime+0x6c>
    {
      /* hclk Clock Range between 17.2-18.5 MHz */
      UsbTrd = 0xCU;
 800658a:	230c      	movs	r3, #12
 800658c:	617b      	str	r3, [r7, #20]
 800658e:	e041      	b.n	8006614 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 18500000U) && (hclk < 20000000U))
 8006590:	68bb      	ldr	r3, [r7, #8]
 8006592:	4a2f      	ldr	r2, [pc, #188]	; (8006650 <USB_SetTurnaroundTime+0x12c>)
 8006594:	4293      	cmp	r3, r2
 8006596:	d906      	bls.n	80065a6 <USB_SetTurnaroundTime+0x82>
 8006598:	68bb      	ldr	r3, [r7, #8]
 800659a:	4a2e      	ldr	r2, [pc, #184]	; (8006654 <USB_SetTurnaroundTime+0x130>)
 800659c:	4293      	cmp	r3, r2
 800659e:	d802      	bhi.n	80065a6 <USB_SetTurnaroundTime+0x82>
    {
      /* hclk Clock Range between 18.5-20 MHz */
      UsbTrd = 0xBU;
 80065a0:	230b      	movs	r3, #11
 80065a2:	617b      	str	r3, [r7, #20]
 80065a4:	e036      	b.n	8006614 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 20000000U) && (hclk < 21800000U))
 80065a6:	68bb      	ldr	r3, [r7, #8]
 80065a8:	4a2a      	ldr	r2, [pc, #168]	; (8006654 <USB_SetTurnaroundTime+0x130>)
 80065aa:	4293      	cmp	r3, r2
 80065ac:	d906      	bls.n	80065bc <USB_SetTurnaroundTime+0x98>
 80065ae:	68bb      	ldr	r3, [r7, #8]
 80065b0:	4a29      	ldr	r2, [pc, #164]	; (8006658 <USB_SetTurnaroundTime+0x134>)
 80065b2:	4293      	cmp	r3, r2
 80065b4:	d802      	bhi.n	80065bc <USB_SetTurnaroundTime+0x98>
    {
      /* hclk Clock Range between 20-21.8 MHz */
      UsbTrd = 0xAU;
 80065b6:	230a      	movs	r3, #10
 80065b8:	617b      	str	r3, [r7, #20]
 80065ba:	e02b      	b.n	8006614 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 21800000U) && (hclk < 24000000U))
 80065bc:	68bb      	ldr	r3, [r7, #8]
 80065be:	4a26      	ldr	r2, [pc, #152]	; (8006658 <USB_SetTurnaroundTime+0x134>)
 80065c0:	4293      	cmp	r3, r2
 80065c2:	d906      	bls.n	80065d2 <USB_SetTurnaroundTime+0xae>
 80065c4:	68bb      	ldr	r3, [r7, #8]
 80065c6:	4a25      	ldr	r2, [pc, #148]	; (800665c <USB_SetTurnaroundTime+0x138>)
 80065c8:	4293      	cmp	r3, r2
 80065ca:	d202      	bcs.n	80065d2 <USB_SetTurnaroundTime+0xae>
    {
      /* hclk Clock Range between 21.8-24 MHz */
      UsbTrd = 0x9U;
 80065cc:	2309      	movs	r3, #9
 80065ce:	617b      	str	r3, [r7, #20]
 80065d0:	e020      	b.n	8006614 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 24000000U) && (hclk < 27700000U))
 80065d2:	68bb      	ldr	r3, [r7, #8]
 80065d4:	4a21      	ldr	r2, [pc, #132]	; (800665c <USB_SetTurnaroundTime+0x138>)
 80065d6:	4293      	cmp	r3, r2
 80065d8:	d306      	bcc.n	80065e8 <USB_SetTurnaroundTime+0xc4>
 80065da:	68bb      	ldr	r3, [r7, #8]
 80065dc:	4a20      	ldr	r2, [pc, #128]	; (8006660 <USB_SetTurnaroundTime+0x13c>)
 80065de:	4293      	cmp	r3, r2
 80065e0:	d802      	bhi.n	80065e8 <USB_SetTurnaroundTime+0xc4>
    {
      /* hclk Clock Range between 24-27.7 MHz */
      UsbTrd = 0x8U;
 80065e2:	2308      	movs	r3, #8
 80065e4:	617b      	str	r3, [r7, #20]
 80065e6:	e015      	b.n	8006614 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 27700000U) && (hclk < 32000000U))
 80065e8:	68bb      	ldr	r3, [r7, #8]
 80065ea:	4a1d      	ldr	r2, [pc, #116]	; (8006660 <USB_SetTurnaroundTime+0x13c>)
 80065ec:	4293      	cmp	r3, r2
 80065ee:	d906      	bls.n	80065fe <USB_SetTurnaroundTime+0xda>
 80065f0:	68bb      	ldr	r3, [r7, #8]
 80065f2:	4a1c      	ldr	r2, [pc, #112]	; (8006664 <USB_SetTurnaroundTime+0x140>)
 80065f4:	4293      	cmp	r3, r2
 80065f6:	d202      	bcs.n	80065fe <USB_SetTurnaroundTime+0xda>
    {
      /* hclk Clock Range between 27.7-32 MHz */
      UsbTrd = 0x7U;
 80065f8:	2307      	movs	r3, #7
 80065fa:	617b      	str	r3, [r7, #20]
 80065fc:	e00a      	b.n	8006614 <USB_SetTurnaroundTime+0xf0>
    }
    else /* if(hclk >= 32000000) */
    {
      /* hclk Clock Range between 32-200 MHz */
      UsbTrd = 0x6U;
 80065fe:	2306      	movs	r3, #6
 8006600:	617b      	str	r3, [r7, #20]
 8006602:	e007      	b.n	8006614 <USB_SetTurnaroundTime+0xf0>
    }
  }
  else if (speed == USBD_HS_SPEED)
 8006604:	79fb      	ldrb	r3, [r7, #7]
 8006606:	2b00      	cmp	r3, #0
 8006608:	d102      	bne.n	8006610 <USB_SetTurnaroundTime+0xec>
  {
    UsbTrd = USBD_HS_TRDT_VALUE;
 800660a:	2309      	movs	r3, #9
 800660c:	617b      	str	r3, [r7, #20]
 800660e:	e001      	b.n	8006614 <USB_SetTurnaroundTime+0xf0>
  }
  else
  {
    UsbTrd = USBD_DEFAULT_TRDT_VALUE;
 8006610:	2309      	movs	r3, #9
 8006612:	617b      	str	r3, [r7, #20]
  }

  USBx->GUSBCFG &= ~USB_OTG_GUSBCFG_TRDT;
 8006614:	68fb      	ldr	r3, [r7, #12]
 8006616:	68db      	ldr	r3, [r3, #12]
 8006618:	f423 5270 	bic.w	r2, r3, #15360	; 0x3c00
 800661c:	68fb      	ldr	r3, [r7, #12]
 800661e:	60da      	str	r2, [r3, #12]
  USBx->GUSBCFG |= (uint32_t)((UsbTrd << 10) & USB_OTG_GUSBCFG_TRDT);
 8006620:	68fb      	ldr	r3, [r7, #12]
 8006622:	68da      	ldr	r2, [r3, #12]
 8006624:	697b      	ldr	r3, [r7, #20]
 8006626:	029b      	lsls	r3, r3, #10
 8006628:	f403 5370 	and.w	r3, r3, #15360	; 0x3c00
 800662c:	431a      	orrs	r2, r3
 800662e:	68fb      	ldr	r3, [r7, #12]
 8006630:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 8006632:	2300      	movs	r3, #0
}
 8006634:	4618      	mov	r0, r3
 8006636:	371c      	adds	r7, #28
 8006638:	46bd      	mov	sp, r7
 800663a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800663e:	4770      	bx	lr
 8006640:	00d8acbf 	.word	0x00d8acbf
 8006644:	00e4e1c0 	.word	0x00e4e1c0
 8006648:	00f42400 	.word	0x00f42400
 800664c:	01067380 	.word	0x01067380
 8006650:	011a499f 	.word	0x011a499f
 8006654:	01312cff 	.word	0x01312cff
 8006658:	014ca43f 	.word	0x014ca43f
 800665c:	016e3600 	.word	0x016e3600
 8006660:	01a6ab1f 	.word	0x01a6ab1f
 8006664:	01e84800 	.word	0x01e84800

08006668 <USB_EnableGlobalInt>:
  *         Enables the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EnableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 8006668:	b480      	push	{r7}
 800666a:	b083      	sub	sp, #12
 800666c:	af00      	add	r7, sp, #0
 800666e:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG |= USB_OTG_GAHBCFG_GINT;
 8006670:	687b      	ldr	r3, [r7, #4]
 8006672:	689b      	ldr	r3, [r3, #8]
 8006674:	f043 0201 	orr.w	r2, r3, #1
 8006678:	687b      	ldr	r3, [r7, #4]
 800667a:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 800667c:	2300      	movs	r3, #0
}
 800667e:	4618      	mov	r0, r3
 8006680:	370c      	adds	r7, #12
 8006682:	46bd      	mov	sp, r7
 8006684:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006688:	4770      	bx	lr

0800668a <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 800668a:	b480      	push	{r7}
 800668c:	b083      	sub	sp, #12
 800668e:	af00      	add	r7, sp, #0
 8006690:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 8006692:	687b      	ldr	r3, [r7, #4]
 8006694:	689b      	ldr	r3, [r3, #8]
 8006696:	f023 0201 	bic.w	r2, r3, #1
 800669a:	687b      	ldr	r3, [r7, #4]
 800669c:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 800669e:	2300      	movs	r3, #0
}
 80066a0:	4618      	mov	r0, r3
 80066a2:	370c      	adds	r7, #12
 80066a4:	46bd      	mov	sp, r7
 80066a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80066aa:	4770      	bx	lr

080066ac <USB_SetCurrentMode>:
  *            @arg USB_DEVICE_MODE Peripheral mode
  *            @arg USB_HOST_MODE Host mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_OTG_GlobalTypeDef *USBx, USB_OTG_ModeTypeDef mode)
{
 80066ac:	b580      	push	{r7, lr}
 80066ae:	b084      	sub	sp, #16
 80066b0:	af00      	add	r7, sp, #0
 80066b2:	6078      	str	r0, [r7, #4]
 80066b4:	460b      	mov	r3, r1
 80066b6:	70fb      	strb	r3, [r7, #3]
  uint32_t ms = 0U;
 80066b8:	2300      	movs	r3, #0
 80066ba:	60fb      	str	r3, [r7, #12]

  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 80066bc:	687b      	ldr	r3, [r7, #4]
 80066be:	68db      	ldr	r3, [r3, #12]
 80066c0:	f023 42c0 	bic.w	r2, r3, #1610612736	; 0x60000000
 80066c4:	687b      	ldr	r3, [r7, #4]
 80066c6:	60da      	str	r2, [r3, #12]

  if (mode == USB_HOST_MODE)
 80066c8:	78fb      	ldrb	r3, [r7, #3]
 80066ca:	2b01      	cmp	r3, #1
 80066cc:	d115      	bne.n	80066fa <USB_SetCurrentMode+0x4e>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 80066ce:	687b      	ldr	r3, [r7, #4]
 80066d0:	68db      	ldr	r3, [r3, #12]
 80066d2:	f043 5200 	orr.w	r2, r3, #536870912	; 0x20000000
 80066d6:	687b      	ldr	r3, [r7, #4]
 80066d8:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(10U);
 80066da:	200a      	movs	r0, #10
 80066dc:	f7fa ffa8 	bl	8001630 <HAL_Delay>
      ms += 10U;
 80066e0:	68fb      	ldr	r3, [r7, #12]
 80066e2:	330a      	adds	r3, #10
 80066e4:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_HOST_MODE) && (ms < HAL_USB_CURRENT_MODE_MAX_DELAY_MS));
 80066e6:	6878      	ldr	r0, [r7, #4]
 80066e8:	f001 f93f 	bl	800796a <USB_GetMode>
 80066ec:	4603      	mov	r3, r0
 80066ee:	2b01      	cmp	r3, #1
 80066f0:	d01e      	beq.n	8006730 <USB_SetCurrentMode+0x84>
 80066f2:	68fb      	ldr	r3, [r7, #12]
 80066f4:	2bc7      	cmp	r3, #199	; 0xc7
 80066f6:	d9f0      	bls.n	80066da <USB_SetCurrentMode+0x2e>
 80066f8:	e01a      	b.n	8006730 <USB_SetCurrentMode+0x84>
  }
  else if (mode == USB_DEVICE_MODE)
 80066fa:	78fb      	ldrb	r3, [r7, #3]
 80066fc:	2b00      	cmp	r3, #0
 80066fe:	d115      	bne.n	800672c <USB_SetCurrentMode+0x80>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 8006700:	687b      	ldr	r3, [r7, #4]
 8006702:	68db      	ldr	r3, [r3, #12]
 8006704:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 8006708:	687b      	ldr	r3, [r7, #4]
 800670a:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(10U);
 800670c:	200a      	movs	r0, #10
 800670e:	f7fa ff8f 	bl	8001630 <HAL_Delay>
      ms += 10U;
 8006712:	68fb      	ldr	r3, [r7, #12]
 8006714:	330a      	adds	r3, #10
 8006716:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_DEVICE_MODE) && (ms < HAL_USB_CURRENT_MODE_MAX_DELAY_MS));
 8006718:	6878      	ldr	r0, [r7, #4]
 800671a:	f001 f926 	bl	800796a <USB_GetMode>
 800671e:	4603      	mov	r3, r0
 8006720:	2b00      	cmp	r3, #0
 8006722:	d005      	beq.n	8006730 <USB_SetCurrentMode+0x84>
 8006724:	68fb      	ldr	r3, [r7, #12]
 8006726:	2bc7      	cmp	r3, #199	; 0xc7
 8006728:	d9f0      	bls.n	800670c <USB_SetCurrentMode+0x60>
 800672a:	e001      	b.n	8006730 <USB_SetCurrentMode+0x84>
  }
  else
  {
    return HAL_ERROR;
 800672c:	2301      	movs	r3, #1
 800672e:	e005      	b.n	800673c <USB_SetCurrentMode+0x90>
  }

  if (ms == HAL_USB_CURRENT_MODE_MAX_DELAY_MS)
 8006730:	68fb      	ldr	r3, [r7, #12]
 8006732:	2bc8      	cmp	r3, #200	; 0xc8
 8006734:	d101      	bne.n	800673a <USB_SetCurrentMode+0x8e>
  {
    return HAL_ERROR;
 8006736:	2301      	movs	r3, #1
 8006738:	e000      	b.n	800673c <USB_SetCurrentMode+0x90>
  }

  return HAL_OK;
 800673a:	2300      	movs	r3, #0
}
 800673c:	4618      	mov	r0, r3
 800673e:	3710      	adds	r7, #16
 8006740:	46bd      	mov	sp, r7
 8006742:	bd80      	pop	{r7, pc}

08006744 <USB_DevInit>:
  * @param  cfg   pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8006744:	b084      	sub	sp, #16
 8006746:	b580      	push	{r7, lr}
 8006748:	b086      	sub	sp, #24
 800674a:	af00      	add	r7, sp, #0
 800674c:	6078      	str	r0, [r7, #4]
 800674e:	f107 0024 	add.w	r0, r7, #36	; 0x24
 8006752:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret = HAL_OK;
 8006756:	2300      	movs	r3, #0
 8006758:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800675a:	687b      	ldr	r3, [r7, #4]
 800675c:	60fb      	str	r3, [r7, #12]
  uint32_t i;

  for (i = 0U; i < 15U; i++)
 800675e:	2300      	movs	r3, #0
 8006760:	613b      	str	r3, [r7, #16]
 8006762:	e009      	b.n	8006778 <USB_DevInit+0x34>
  {
    USBx->DIEPTXF[i] = 0U;
 8006764:	687a      	ldr	r2, [r7, #4]
 8006766:	693b      	ldr	r3, [r7, #16]
 8006768:	3340      	adds	r3, #64	; 0x40
 800676a:	009b      	lsls	r3, r3, #2
 800676c:	4413      	add	r3, r2
 800676e:	2200      	movs	r2, #0
 8006770:	605a      	str	r2, [r3, #4]
  for (i = 0U; i < 15U; i++)
 8006772:	693b      	ldr	r3, [r7, #16]
 8006774:	3301      	adds	r3, #1
 8006776:	613b      	str	r3, [r7, #16]
 8006778:	693b      	ldr	r3, [r7, #16]
 800677a:	2b0e      	cmp	r3, #14
 800677c:	d9f2      	bls.n	8006764 <USB_DevInit+0x20>
    /* Enable HW VBUS sensing */
    USBx->GCCFG |= USB_OTG_GCCFG_VBDEN;
  }
#else
  /* VBUS Sensing setup */
  if (cfg.vbus_sensing_enable == 0U)
 800677e:	f897 302e 	ldrb.w	r3, [r7, #46]	; 0x2e
 8006782:	2b00      	cmp	r3, #0
 8006784:	d11c      	bne.n	80067c0 <USB_DevInit+0x7c>
  {
    /*
     * Disable HW VBUS sensing. VBUS is internally considered to be always
     * at VBUS-Valid level (5V).
     */
    USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 8006786:	68fb      	ldr	r3, [r7, #12]
 8006788:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800678c:	685b      	ldr	r3, [r3, #4]
 800678e:	68fa      	ldr	r2, [r7, #12]
 8006790:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8006794:	f043 0302 	orr.w	r3, r3, #2
 8006798:	6053      	str	r3, [r2, #4]
    USBx->GCCFG |= USB_OTG_GCCFG_NOVBUSSENS;
 800679a:	687b      	ldr	r3, [r7, #4]
 800679c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800679e:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 80067a2:	687b      	ldr	r3, [r7, #4]
 80067a4:	639a      	str	r2, [r3, #56]	; 0x38
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSBSEN;
 80067a6:	687b      	ldr	r3, [r7, #4]
 80067a8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80067aa:	f423 2200 	bic.w	r2, r3, #524288	; 0x80000
 80067ae:	687b      	ldr	r3, [r7, #4]
 80067b0:	639a      	str	r2, [r3, #56]	; 0x38
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSASEN;
 80067b2:	687b      	ldr	r3, [r7, #4]
 80067b4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80067b6:	f423 2280 	bic.w	r2, r3, #262144	; 0x40000
 80067ba:	687b      	ldr	r3, [r7, #4]
 80067bc:	639a      	str	r2, [r3, #56]	; 0x38
 80067be:	e00b      	b.n	80067d8 <USB_DevInit+0x94>
  }
  else
  {
    /* Enable HW VBUS sensing */
    USBx->GCCFG &= ~USB_OTG_GCCFG_NOVBUSSENS;
 80067c0:	687b      	ldr	r3, [r7, #4]
 80067c2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80067c4:	f423 1200 	bic.w	r2, r3, #2097152	; 0x200000
 80067c8:	687b      	ldr	r3, [r7, #4]
 80067ca:	639a      	str	r2, [r3, #56]	; 0x38
    USBx->GCCFG |= USB_OTG_GCCFG_VBUSBSEN;
 80067cc:	687b      	ldr	r3, [r7, #4]
 80067ce:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80067d0:	f443 2200 	orr.w	r2, r3, #524288	; 0x80000
 80067d4:	687b      	ldr	r3, [r7, #4]
 80067d6:	639a      	str	r2, [r3, #56]	; 0x38
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) ||
          defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) ||
          defined(STM32F423xx) */

  /* Restart the Phy Clock */
  USBx_PCGCCTL = 0U;
 80067d8:	68fb      	ldr	r3, [r7, #12]
 80067da:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 80067de:	461a      	mov	r2, r3
 80067e0:	2300      	movs	r3, #0
 80067e2:	6013      	str	r3, [r2, #0]

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 80067e4:	f897 3029 	ldrb.w	r3, [r7, #41]	; 0x29
 80067e8:	2b01      	cmp	r3, #1
 80067ea:	d10d      	bne.n	8006808 <USB_DevInit+0xc4>
  {
    if (cfg.speed == USBD_HS_SPEED)
 80067ec:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80067f0:	2b00      	cmp	r3, #0
 80067f2:	d104      	bne.n	80067fe <USB_DevInit+0xba>
    {
      /* Set Core speed to High speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH);
 80067f4:	2100      	movs	r1, #0
 80067f6:	6878      	ldr	r0, [r7, #4]
 80067f8:	f000 f968 	bl	8006acc <USB_SetDevSpeed>
 80067fc:	e008      	b.n	8006810 <USB_DevInit+0xcc>
    }
    else
    {
      /* Set Core speed to Full speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH_IN_FULL);
 80067fe:	2101      	movs	r1, #1
 8006800:	6878      	ldr	r0, [r7, #4]
 8006802:	f000 f963 	bl	8006acc <USB_SetDevSpeed>
 8006806:	e003      	b.n	8006810 <USB_DevInit+0xcc>
    }
  }
  else
  {
    /* Set Core speed to Full speed mode */
    (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_FULL);
 8006808:	2103      	movs	r1, #3
 800680a:	6878      	ldr	r0, [r7, #4]
 800680c:	f000 f95e 	bl	8006acc <USB_SetDevSpeed>
  }

  /* Flush the FIFOs */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 8006810:	2110      	movs	r1, #16
 8006812:	6878      	ldr	r0, [r7, #4]
 8006814:	f000 f8fa 	bl	8006a0c <USB_FlushTxFifo>
 8006818:	4603      	mov	r3, r0
 800681a:	2b00      	cmp	r3, #0
 800681c:	d001      	beq.n	8006822 <USB_DevInit+0xde>
  {
    ret = HAL_ERROR;
 800681e:	2301      	movs	r3, #1
 8006820:	75fb      	strb	r3, [r7, #23]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 8006822:	6878      	ldr	r0, [r7, #4]
 8006824:	f000 f924 	bl	8006a70 <USB_FlushRxFifo>
 8006828:	4603      	mov	r3, r0
 800682a:	2b00      	cmp	r3, #0
 800682c:	d001      	beq.n	8006832 <USB_DevInit+0xee>
  {
    ret = HAL_ERROR;
 800682e:	2301      	movs	r3, #1
 8006830:	75fb      	strb	r3, [r7, #23]
  }

  /* Clear all pending Device Interrupts */
  USBx_DEVICE->DIEPMSK = 0U;
 8006832:	68fb      	ldr	r3, [r7, #12]
 8006834:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006838:	461a      	mov	r2, r3
 800683a:	2300      	movs	r3, #0
 800683c:	6113      	str	r3, [r2, #16]
  USBx_DEVICE->DOEPMSK = 0U;
 800683e:	68fb      	ldr	r3, [r7, #12]
 8006840:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006844:	461a      	mov	r2, r3
 8006846:	2300      	movs	r3, #0
 8006848:	6153      	str	r3, [r2, #20]
  USBx_DEVICE->DAINTMSK = 0U;
 800684a:	68fb      	ldr	r3, [r7, #12]
 800684c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006850:	461a      	mov	r2, r3
 8006852:	2300      	movs	r3, #0
 8006854:	61d3      	str	r3, [r2, #28]

  for (i = 0U; i < cfg.dev_endpoints; i++)
 8006856:	2300      	movs	r3, #0
 8006858:	613b      	str	r3, [r7, #16]
 800685a:	e043      	b.n	80068e4 <USB_DevInit+0x1a0>
  {
    if ((USBx_INEP(i)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 800685c:	693b      	ldr	r3, [r7, #16]
 800685e:	015a      	lsls	r2, r3, #5
 8006860:	68fb      	ldr	r3, [r7, #12]
 8006862:	4413      	add	r3, r2
 8006864:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006868:	681b      	ldr	r3, [r3, #0]
 800686a:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800686e:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8006872:	d118      	bne.n	80068a6 <USB_DevInit+0x162>
    {
      if (i == 0U)
 8006874:	693b      	ldr	r3, [r7, #16]
 8006876:	2b00      	cmp	r3, #0
 8006878:	d10a      	bne.n	8006890 <USB_DevInit+0x14c>
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_SNAK;
 800687a:	693b      	ldr	r3, [r7, #16]
 800687c:	015a      	lsls	r2, r3, #5
 800687e:	68fb      	ldr	r3, [r7, #12]
 8006880:	4413      	add	r3, r2
 8006882:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006886:	461a      	mov	r2, r3
 8006888:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 800688c:	6013      	str	r3, [r2, #0]
 800688e:	e013      	b.n	80068b8 <USB_DevInit+0x174>
      }
      else
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_EPDIS | USB_OTG_DIEPCTL_SNAK;
 8006890:	693b      	ldr	r3, [r7, #16]
 8006892:	015a      	lsls	r2, r3, #5
 8006894:	68fb      	ldr	r3, [r7, #12]
 8006896:	4413      	add	r3, r2
 8006898:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800689c:	461a      	mov	r2, r3
 800689e:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 80068a2:	6013      	str	r3, [r2, #0]
 80068a4:	e008      	b.n	80068b8 <USB_DevInit+0x174>
      }
    }
    else
    {
      USBx_INEP(i)->DIEPCTL = 0U;
 80068a6:	693b      	ldr	r3, [r7, #16]
 80068a8:	015a      	lsls	r2, r3, #5
 80068aa:	68fb      	ldr	r3, [r7, #12]
 80068ac:	4413      	add	r3, r2
 80068ae:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80068b2:	461a      	mov	r2, r3
 80068b4:	2300      	movs	r3, #0
 80068b6:	6013      	str	r3, [r2, #0]
    }

    USBx_INEP(i)->DIEPTSIZ = 0U;
 80068b8:	693b      	ldr	r3, [r7, #16]
 80068ba:	015a      	lsls	r2, r3, #5
 80068bc:	68fb      	ldr	r3, [r7, #12]
 80068be:	4413      	add	r3, r2
 80068c0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80068c4:	461a      	mov	r2, r3
 80068c6:	2300      	movs	r3, #0
 80068c8:	6113      	str	r3, [r2, #16]
    USBx_INEP(i)->DIEPINT  = 0xFB7FU;
 80068ca:	693b      	ldr	r3, [r7, #16]
 80068cc:	015a      	lsls	r2, r3, #5
 80068ce:	68fb      	ldr	r3, [r7, #12]
 80068d0:	4413      	add	r3, r2
 80068d2:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80068d6:	461a      	mov	r2, r3
 80068d8:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 80068dc:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 80068de:	693b      	ldr	r3, [r7, #16]
 80068e0:	3301      	adds	r3, #1
 80068e2:	613b      	str	r3, [r7, #16]
 80068e4:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 80068e8:	461a      	mov	r2, r3
 80068ea:	693b      	ldr	r3, [r7, #16]
 80068ec:	4293      	cmp	r3, r2
 80068ee:	d3b5      	bcc.n	800685c <USB_DevInit+0x118>
  }

  for (i = 0U; i < cfg.dev_endpoints; i++)
 80068f0:	2300      	movs	r3, #0
 80068f2:	613b      	str	r3, [r7, #16]
 80068f4:	e043      	b.n	800697e <USB_DevInit+0x23a>
  {
    if ((USBx_OUTEP(i)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 80068f6:	693b      	ldr	r3, [r7, #16]
 80068f8:	015a      	lsls	r2, r3, #5
 80068fa:	68fb      	ldr	r3, [r7, #12]
 80068fc:	4413      	add	r3, r2
 80068fe:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006902:	681b      	ldr	r3, [r3, #0]
 8006904:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8006908:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800690c:	d118      	bne.n	8006940 <USB_DevInit+0x1fc>
    {
      if (i == 0U)
 800690e:	693b      	ldr	r3, [r7, #16]
 8006910:	2b00      	cmp	r3, #0
 8006912:	d10a      	bne.n	800692a <USB_DevInit+0x1e6>
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_SNAK;
 8006914:	693b      	ldr	r3, [r7, #16]
 8006916:	015a      	lsls	r2, r3, #5
 8006918:	68fb      	ldr	r3, [r7, #12]
 800691a:	4413      	add	r3, r2
 800691c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006920:	461a      	mov	r2, r3
 8006922:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8006926:	6013      	str	r3, [r2, #0]
 8006928:	e013      	b.n	8006952 <USB_DevInit+0x20e>
      }
      else
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_EPDIS | USB_OTG_DOEPCTL_SNAK;
 800692a:	693b      	ldr	r3, [r7, #16]
 800692c:	015a      	lsls	r2, r3, #5
 800692e:	68fb      	ldr	r3, [r7, #12]
 8006930:	4413      	add	r3, r2
 8006932:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006936:	461a      	mov	r2, r3
 8006938:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 800693c:	6013      	str	r3, [r2, #0]
 800693e:	e008      	b.n	8006952 <USB_DevInit+0x20e>
      }
    }
    else
    {
      USBx_OUTEP(i)->DOEPCTL = 0U;
 8006940:	693b      	ldr	r3, [r7, #16]
 8006942:	015a      	lsls	r2, r3, #5
 8006944:	68fb      	ldr	r3, [r7, #12]
 8006946:	4413      	add	r3, r2
 8006948:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800694c:	461a      	mov	r2, r3
 800694e:	2300      	movs	r3, #0
 8006950:	6013      	str	r3, [r2, #0]
    }

    USBx_OUTEP(i)->DOEPTSIZ = 0U;
 8006952:	693b      	ldr	r3, [r7, #16]
 8006954:	015a      	lsls	r2, r3, #5
 8006956:	68fb      	ldr	r3, [r7, #12]
 8006958:	4413      	add	r3, r2
 800695a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800695e:	461a      	mov	r2, r3
 8006960:	2300      	movs	r3, #0
 8006962:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(i)->DOEPINT  = 0xFB7FU;
 8006964:	693b      	ldr	r3, [r7, #16]
 8006966:	015a      	lsls	r2, r3, #5
 8006968:	68fb      	ldr	r3, [r7, #12]
 800696a:	4413      	add	r3, r2
 800696c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006970:	461a      	mov	r2, r3
 8006972:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 8006976:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 8006978:	693b      	ldr	r3, [r7, #16]
 800697a:	3301      	adds	r3, #1
 800697c:	613b      	str	r3, [r7, #16]
 800697e:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 8006982:	461a      	mov	r2, r3
 8006984:	693b      	ldr	r3, [r7, #16]
 8006986:	4293      	cmp	r3, r2
 8006988:	d3b5      	bcc.n	80068f6 <USB_DevInit+0x1b2>
  }

  USBx_DEVICE->DIEPMSK &= ~(USB_OTG_DIEPMSK_TXFURM);
 800698a:	68fb      	ldr	r3, [r7, #12]
 800698c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006990:	691b      	ldr	r3, [r3, #16]
 8006992:	68fa      	ldr	r2, [r7, #12]
 8006994:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8006998:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800699c:	6113      	str	r3, [r2, #16]

  /* Disable all interrupts. */
  USBx->GINTMSK = 0U;
 800699e:	687b      	ldr	r3, [r7, #4]
 80069a0:	2200      	movs	r2, #0
 80069a2:	619a      	str	r2, [r3, #24]

  /* Clear any pending interrupts */
  USBx->GINTSTS = 0xBFFFFFFFU;
 80069a4:	687b      	ldr	r3, [r7, #4]
 80069a6:	f06f 4280 	mvn.w	r2, #1073741824	; 0x40000000
 80069aa:	615a      	str	r2, [r3, #20]

  /* Enable the common interrupts */
  if (cfg.dma_enable == 0U)
 80069ac:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 80069b0:	2b00      	cmp	r3, #0
 80069b2:	d105      	bne.n	80069c0 <USB_DevInit+0x27c>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 80069b4:	687b      	ldr	r3, [r7, #4]
 80069b6:	699b      	ldr	r3, [r3, #24]
 80069b8:	f043 0210 	orr.w	r2, r3, #16
 80069bc:	687b      	ldr	r3, [r7, #4]
 80069be:	619a      	str	r2, [r3, #24]
  }

  /* Enable interrupts matching to the Device mode ONLY */
  USBx->GINTMSK |= USB_OTG_GINTMSK_USBSUSPM | USB_OTG_GINTMSK_USBRST |
 80069c0:	687b      	ldr	r3, [r7, #4]
 80069c2:	699a      	ldr	r2, [r3, #24]
 80069c4:	4b10      	ldr	r3, [pc, #64]	; (8006a08 <USB_DevInit+0x2c4>)
 80069c6:	4313      	orrs	r3, r2
 80069c8:	687a      	ldr	r2, [r7, #4]
 80069ca:	6193      	str	r3, [r2, #24]
                   USB_OTG_GINTMSK_ENUMDNEM | USB_OTG_GINTMSK_IEPINT |
                   USB_OTG_GINTMSK_OEPINT   | USB_OTG_GINTMSK_IISOIXFRM |
                   USB_OTG_GINTMSK_PXFRM_IISOOXFRM | USB_OTG_GINTMSK_WUIM;

  if (cfg.Sof_enable != 0U)
 80069cc:	f897 302a 	ldrb.w	r3, [r7, #42]	; 0x2a
 80069d0:	2b00      	cmp	r3, #0
 80069d2:	d005      	beq.n	80069e0 <USB_DevInit+0x29c>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_SOFM;
 80069d4:	687b      	ldr	r3, [r7, #4]
 80069d6:	699b      	ldr	r3, [r3, #24]
 80069d8:	f043 0208 	orr.w	r2, r3, #8
 80069dc:	687b      	ldr	r3, [r7, #4]
 80069de:	619a      	str	r2, [r3, #24]
  }

  if (cfg.vbus_sensing_enable == 1U)
 80069e0:	f897 302e 	ldrb.w	r3, [r7, #46]	; 0x2e
 80069e4:	2b01      	cmp	r3, #1
 80069e6:	d107      	bne.n	80069f8 <USB_DevInit+0x2b4>
  {
    USBx->GINTMSK |= (USB_OTG_GINTMSK_SRQIM | USB_OTG_GINTMSK_OTGINT);
 80069e8:	687b      	ldr	r3, [r7, #4]
 80069ea:	699b      	ldr	r3, [r3, #24]
 80069ec:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 80069f0:	f043 0304 	orr.w	r3, r3, #4
 80069f4:	687a      	ldr	r2, [r7, #4]
 80069f6:	6193      	str	r3, [r2, #24]
  }

  return ret;
 80069f8:	7dfb      	ldrb	r3, [r7, #23]
}
 80069fa:	4618      	mov	r0, r3
 80069fc:	3718      	adds	r7, #24
 80069fe:	46bd      	mov	sp, r7
 8006a00:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8006a04:	b004      	add	sp, #16
 8006a06:	4770      	bx	lr
 8006a08:	803c3800 	.word	0x803c3800

08006a0c <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 8006a0c:	b480      	push	{r7}
 8006a0e:	b085      	sub	sp, #20
 8006a10:	af00      	add	r7, sp, #0
 8006a12:	6078      	str	r0, [r7, #4]
 8006a14:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 8006a16:	2300      	movs	r3, #0
 8006a18:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8006a1a:	68fb      	ldr	r3, [r7, #12]
 8006a1c:	3301      	adds	r3, #1
 8006a1e:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 8006a20:	68fb      	ldr	r3, [r7, #12]
 8006a22:	f1b3 6f70 	cmp.w	r3, #251658240	; 0xf000000
 8006a26:	d901      	bls.n	8006a2c <USB_FlushTxFifo+0x20>
    {
      return HAL_TIMEOUT;
 8006a28:	2303      	movs	r3, #3
 8006a2a:	e01b      	b.n	8006a64 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8006a2c:	687b      	ldr	r3, [r7, #4]
 8006a2e:	691b      	ldr	r3, [r3, #16]
 8006a30:	2b00      	cmp	r3, #0
 8006a32:	daf2      	bge.n	8006a1a <USB_FlushTxFifo+0xe>

  /* Flush TX Fifo */
  count = 0U;
 8006a34:	2300      	movs	r3, #0
 8006a36:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 8006a38:	683b      	ldr	r3, [r7, #0]
 8006a3a:	019b      	lsls	r3, r3, #6
 8006a3c:	f043 0220 	orr.w	r2, r3, #32
 8006a40:	687b      	ldr	r3, [r7, #4]
 8006a42:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8006a44:	68fb      	ldr	r3, [r7, #12]
 8006a46:	3301      	adds	r3, #1
 8006a48:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 8006a4a:	68fb      	ldr	r3, [r7, #12]
 8006a4c:	f1b3 6f70 	cmp.w	r3, #251658240	; 0xf000000
 8006a50:	d901      	bls.n	8006a56 <USB_FlushTxFifo+0x4a>
    {
      return HAL_TIMEOUT;
 8006a52:	2303      	movs	r3, #3
 8006a54:	e006      	b.n	8006a64 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 8006a56:	687b      	ldr	r3, [r7, #4]
 8006a58:	691b      	ldr	r3, [r3, #16]
 8006a5a:	f003 0320 	and.w	r3, r3, #32
 8006a5e:	2b20      	cmp	r3, #32
 8006a60:	d0f0      	beq.n	8006a44 <USB_FlushTxFifo+0x38>

  return HAL_OK;
 8006a62:	2300      	movs	r3, #0
}
 8006a64:	4618      	mov	r0, r3
 8006a66:	3714      	adds	r7, #20
 8006a68:	46bd      	mov	sp, r7
 8006a6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006a6e:	4770      	bx	lr

08006a70 <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo  Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 8006a70:	b480      	push	{r7}
 8006a72:	b085      	sub	sp, #20
 8006a74:	af00      	add	r7, sp, #0
 8006a76:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8006a78:	2300      	movs	r3, #0
 8006a7a:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8006a7c:	68fb      	ldr	r3, [r7, #12]
 8006a7e:	3301      	adds	r3, #1
 8006a80:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 8006a82:	68fb      	ldr	r3, [r7, #12]
 8006a84:	f1b3 6f70 	cmp.w	r3, #251658240	; 0xf000000
 8006a88:	d901      	bls.n	8006a8e <USB_FlushRxFifo+0x1e>
    {
      return HAL_TIMEOUT;
 8006a8a:	2303      	movs	r3, #3
 8006a8c:	e018      	b.n	8006ac0 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8006a8e:	687b      	ldr	r3, [r7, #4]
 8006a90:	691b      	ldr	r3, [r3, #16]
 8006a92:	2b00      	cmp	r3, #0
 8006a94:	daf2      	bge.n	8006a7c <USB_FlushRxFifo+0xc>

  /* Flush RX Fifo */
  count = 0U;
 8006a96:	2300      	movs	r3, #0
 8006a98:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 8006a9a:	687b      	ldr	r3, [r7, #4]
 8006a9c:	2210      	movs	r2, #16
 8006a9e:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8006aa0:	68fb      	ldr	r3, [r7, #12]
 8006aa2:	3301      	adds	r3, #1
 8006aa4:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 8006aa6:	68fb      	ldr	r3, [r7, #12]
 8006aa8:	f1b3 6f70 	cmp.w	r3, #251658240	; 0xf000000
 8006aac:	d901      	bls.n	8006ab2 <USB_FlushRxFifo+0x42>
    {
      return HAL_TIMEOUT;
 8006aae:	2303      	movs	r3, #3
 8006ab0:	e006      	b.n	8006ac0 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 8006ab2:	687b      	ldr	r3, [r7, #4]
 8006ab4:	691b      	ldr	r3, [r3, #16]
 8006ab6:	f003 0310 	and.w	r3, r3, #16
 8006aba:	2b10      	cmp	r3, #16
 8006abc:	d0f0      	beq.n	8006aa0 <USB_FlushRxFifo+0x30>

  return HAL_OK;
 8006abe:	2300      	movs	r3, #0
}
 8006ac0:	4618      	mov	r0, r3
 8006ac2:	3714      	adds	r7, #20
 8006ac4:	46bd      	mov	sp, r7
 8006ac6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006aca:	4770      	bx	lr

08006acc <USB_SetDevSpeed>:
  *            @arg USB_OTG_SPEED_HIGH_IN_FULL: High speed core in Full Speed mode
  *            @arg USB_OTG_SPEED_FULL: Full speed mode
  * @retval  Hal status
  */
HAL_StatusTypeDef USB_SetDevSpeed(const USB_OTG_GlobalTypeDef *USBx, uint8_t speed)
{
 8006acc:	b480      	push	{r7}
 8006ace:	b085      	sub	sp, #20
 8006ad0:	af00      	add	r7, sp, #0
 8006ad2:	6078      	str	r0, [r7, #4]
 8006ad4:	460b      	mov	r3, r1
 8006ad6:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006ad8:	687b      	ldr	r3, [r7, #4]
 8006ada:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG |= speed;
 8006adc:	68fb      	ldr	r3, [r7, #12]
 8006ade:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006ae2:	681a      	ldr	r2, [r3, #0]
 8006ae4:	78fb      	ldrb	r3, [r7, #3]
 8006ae6:	68f9      	ldr	r1, [r7, #12]
 8006ae8:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8006aec:	4313      	orrs	r3, r2
 8006aee:	600b      	str	r3, [r1, #0]
  return HAL_OK;
 8006af0:	2300      	movs	r3, #0
}
 8006af2:	4618      	mov	r0, r3
 8006af4:	3714      	adds	r7, #20
 8006af6:	46bd      	mov	sp, r7
 8006af8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006afc:	4770      	bx	lr

08006afe <USB_GetDevSpeed>:
  *          This parameter can be one of these values:
  *            @arg USBD_HS_SPEED: High speed mode
  *            @arg USBD_FS_SPEED: Full speed mode
  */
uint8_t USB_GetDevSpeed(const USB_OTG_GlobalTypeDef *USBx)
{
 8006afe:	b480      	push	{r7}
 8006b00:	b087      	sub	sp, #28
 8006b02:	af00      	add	r7, sp, #0
 8006b04:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006b06:	687b      	ldr	r3, [r7, #4]
 8006b08:	613b      	str	r3, [r7, #16]
  uint8_t speed;
  uint32_t DevEnumSpeed = USBx_DEVICE->DSTS & USB_OTG_DSTS_ENUMSPD;
 8006b0a:	693b      	ldr	r3, [r7, #16]
 8006b0c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006b10:	689b      	ldr	r3, [r3, #8]
 8006b12:	f003 0306 	and.w	r3, r3, #6
 8006b16:	60fb      	str	r3, [r7, #12]

  if (DevEnumSpeed == DSTS_ENUMSPD_HS_PHY_30MHZ_OR_60MHZ)
 8006b18:	68fb      	ldr	r3, [r7, #12]
 8006b1a:	2b00      	cmp	r3, #0
 8006b1c:	d102      	bne.n	8006b24 <USB_GetDevSpeed+0x26>
  {
    speed = USBD_HS_SPEED;
 8006b1e:	2300      	movs	r3, #0
 8006b20:	75fb      	strb	r3, [r7, #23]
 8006b22:	e00a      	b.n	8006b3a <USB_GetDevSpeed+0x3c>
  }
  else if ((DevEnumSpeed == DSTS_ENUMSPD_FS_PHY_30MHZ_OR_60MHZ) ||
 8006b24:	68fb      	ldr	r3, [r7, #12]
 8006b26:	2b02      	cmp	r3, #2
 8006b28:	d002      	beq.n	8006b30 <USB_GetDevSpeed+0x32>
 8006b2a:	68fb      	ldr	r3, [r7, #12]
 8006b2c:	2b06      	cmp	r3, #6
 8006b2e:	d102      	bne.n	8006b36 <USB_GetDevSpeed+0x38>
           (DevEnumSpeed == DSTS_ENUMSPD_FS_PHY_48MHZ))
  {
    speed = USBD_FS_SPEED;
 8006b30:	2302      	movs	r3, #2
 8006b32:	75fb      	strb	r3, [r7, #23]
 8006b34:	e001      	b.n	8006b3a <USB_GetDevSpeed+0x3c>
  }
  else
  {
    speed = 0xFU;
 8006b36:	230f      	movs	r3, #15
 8006b38:	75fb      	strb	r3, [r7, #23]
  }

  return speed;
 8006b3a:	7dfb      	ldrb	r3, [r7, #23]
}
 8006b3c:	4618      	mov	r0, r3
 8006b3e:	371c      	adds	r7, #28
 8006b40:	46bd      	mov	sp, r7
 8006b42:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006b46:	4770      	bx	lr

08006b48 <USB_ActivateEndpoint>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_ActivateEndpoint(const USB_OTG_GlobalTypeDef *USBx, const USB_OTG_EPTypeDef *ep)
{
 8006b48:	b480      	push	{r7}
 8006b4a:	b085      	sub	sp, #20
 8006b4c:	af00      	add	r7, sp, #0
 8006b4e:	6078      	str	r0, [r7, #4]
 8006b50:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006b52:	687b      	ldr	r3, [r7, #4]
 8006b54:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 8006b56:	683b      	ldr	r3, [r7, #0]
 8006b58:	781b      	ldrb	r3, [r3, #0]
 8006b5a:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 8006b5c:	683b      	ldr	r3, [r7, #0]
 8006b5e:	785b      	ldrb	r3, [r3, #1]
 8006b60:	2b01      	cmp	r3, #1
 8006b62:	d13a      	bne.n	8006bda <USB_ActivateEndpoint+0x92>
  {
    USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK));
 8006b64:	68fb      	ldr	r3, [r7, #12]
 8006b66:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006b6a:	69da      	ldr	r2, [r3, #28]
 8006b6c:	683b      	ldr	r3, [r7, #0]
 8006b6e:	781b      	ldrb	r3, [r3, #0]
 8006b70:	f003 030f 	and.w	r3, r3, #15
 8006b74:	2101      	movs	r1, #1
 8006b76:	fa01 f303 	lsl.w	r3, r1, r3
 8006b7a:	b29b      	uxth	r3, r3
 8006b7c:	68f9      	ldr	r1, [r7, #12]
 8006b7e:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8006b82:	4313      	orrs	r3, r2
 8006b84:	61cb      	str	r3, [r1, #28]

    if ((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_USBAEP) == 0U)
 8006b86:	68bb      	ldr	r3, [r7, #8]
 8006b88:	015a      	lsls	r2, r3, #5
 8006b8a:	68fb      	ldr	r3, [r7, #12]
 8006b8c:	4413      	add	r3, r2
 8006b8e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006b92:	681b      	ldr	r3, [r3, #0]
 8006b94:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8006b98:	2b00      	cmp	r3, #0
 8006b9a:	d155      	bne.n	8006c48 <USB_ActivateEndpoint+0x100>
    {
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 8006b9c:	68bb      	ldr	r3, [r7, #8]
 8006b9e:	015a      	lsls	r2, r3, #5
 8006ba0:	68fb      	ldr	r3, [r7, #12]
 8006ba2:	4413      	add	r3, r2
 8006ba4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006ba8:	681a      	ldr	r2, [r3, #0]
 8006baa:	683b      	ldr	r3, [r7, #0]
 8006bac:	689b      	ldr	r3, [r3, #8]
 8006bae:	f3c3 010a 	ubfx	r1, r3, #0, #11
                                   ((uint32_t)ep->type << 18) | (epnum << 22) |
 8006bb2:	683b      	ldr	r3, [r7, #0]
 8006bb4:	791b      	ldrb	r3, [r3, #4]
 8006bb6:	049b      	lsls	r3, r3, #18
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 8006bb8:	4319      	orrs	r1, r3
                                   ((uint32_t)ep->type << 18) | (epnum << 22) |
 8006bba:	68bb      	ldr	r3, [r7, #8]
 8006bbc:	059b      	lsls	r3, r3, #22
 8006bbe:	430b      	orrs	r3, r1
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 8006bc0:	4313      	orrs	r3, r2
 8006bc2:	68ba      	ldr	r2, [r7, #8]
 8006bc4:	0151      	lsls	r1, r2, #5
 8006bc6:	68fa      	ldr	r2, [r7, #12]
 8006bc8:	440a      	add	r2, r1
 8006bca:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8006bce:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8006bd2:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8006bd6:	6013      	str	r3, [r2, #0]
 8006bd8:	e036      	b.n	8006c48 <USB_ActivateEndpoint+0x100>
                                   USB_OTG_DIEPCTL_USBAEP;
    }
  }
  else
  {
    USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16);
 8006bda:	68fb      	ldr	r3, [r7, #12]
 8006bdc:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006be0:	69da      	ldr	r2, [r3, #28]
 8006be2:	683b      	ldr	r3, [r7, #0]
 8006be4:	781b      	ldrb	r3, [r3, #0]
 8006be6:	f003 030f 	and.w	r3, r3, #15
 8006bea:	2101      	movs	r1, #1
 8006bec:	fa01 f303 	lsl.w	r3, r1, r3
 8006bf0:	041b      	lsls	r3, r3, #16
 8006bf2:	68f9      	ldr	r1, [r7, #12]
 8006bf4:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8006bf8:	4313      	orrs	r3, r2
 8006bfa:	61cb      	str	r3, [r1, #28]

    if (((USBx_OUTEP(epnum)->DOEPCTL) & USB_OTG_DOEPCTL_USBAEP) == 0U)
 8006bfc:	68bb      	ldr	r3, [r7, #8]
 8006bfe:	015a      	lsls	r2, r3, #5
 8006c00:	68fb      	ldr	r3, [r7, #12]
 8006c02:	4413      	add	r3, r2
 8006c04:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006c08:	681b      	ldr	r3, [r3, #0]
 8006c0a:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8006c0e:	2b00      	cmp	r3, #0
 8006c10:	d11a      	bne.n	8006c48 <USB_ActivateEndpoint+0x100>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= (ep->maxpacket & USB_OTG_DOEPCTL_MPSIZ) |
 8006c12:	68bb      	ldr	r3, [r7, #8]
 8006c14:	015a      	lsls	r2, r3, #5
 8006c16:	68fb      	ldr	r3, [r7, #12]
 8006c18:	4413      	add	r3, r2
 8006c1a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006c1e:	681a      	ldr	r2, [r3, #0]
 8006c20:	683b      	ldr	r3, [r7, #0]
 8006c22:	689b      	ldr	r3, [r3, #8]
 8006c24:	f3c3 010a 	ubfx	r1, r3, #0, #11
                                    ((uint32_t)ep->type << 18) |
 8006c28:	683b      	ldr	r3, [r7, #0]
 8006c2a:	791b      	ldrb	r3, [r3, #4]
 8006c2c:	049b      	lsls	r3, r3, #18
      USBx_OUTEP(epnum)->DOEPCTL |= (ep->maxpacket & USB_OTG_DOEPCTL_MPSIZ) |
 8006c2e:	430b      	orrs	r3, r1
 8006c30:	4313      	orrs	r3, r2
 8006c32:	68ba      	ldr	r2, [r7, #8]
 8006c34:	0151      	lsls	r1, r2, #5
 8006c36:	68fa      	ldr	r2, [r7, #12]
 8006c38:	440a      	add	r2, r1
 8006c3a:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8006c3e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8006c42:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8006c46:	6013      	str	r3, [r2, #0]
                                    USB_OTG_DIEPCTL_SD0PID_SEVNFRM |
                                    USB_OTG_DOEPCTL_USBAEP;
    }
  }
  return HAL_OK;
 8006c48:	2300      	movs	r3, #0
}
 8006c4a:	4618      	mov	r0, r3
 8006c4c:	3714      	adds	r7, #20
 8006c4e:	46bd      	mov	sp, r7
 8006c50:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006c54:	4770      	bx	lr
	...

08006c58 <USB_DeactivateEndpoint>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DeactivateEndpoint(const USB_OTG_GlobalTypeDef *USBx, const USB_OTG_EPTypeDef *ep)
{
 8006c58:	b480      	push	{r7}
 8006c5a:	b085      	sub	sp, #20
 8006c5c:	af00      	add	r7, sp, #0
 8006c5e:	6078      	str	r0, [r7, #4]
 8006c60:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006c62:	687b      	ldr	r3, [r7, #4]
 8006c64:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 8006c66:	683b      	ldr	r3, [r7, #0]
 8006c68:	781b      	ldrb	r3, [r3, #0]
 8006c6a:	60bb      	str	r3, [r7, #8]

  /* Read DEPCTLn register */
  if (ep->is_in == 1U)
 8006c6c:	683b      	ldr	r3, [r7, #0]
 8006c6e:	785b      	ldrb	r3, [r3, #1]
 8006c70:	2b01      	cmp	r3, #1
 8006c72:	d161      	bne.n	8006d38 <USB_DeactivateEndpoint+0xe0>
  {
    if ((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 8006c74:	68bb      	ldr	r3, [r7, #8]
 8006c76:	015a      	lsls	r2, r3, #5
 8006c78:	68fb      	ldr	r3, [r7, #12]
 8006c7a:	4413      	add	r3, r2
 8006c7c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006c80:	681b      	ldr	r3, [r3, #0]
 8006c82:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8006c86:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8006c8a:	d11f      	bne.n	8006ccc <USB_DeactivateEndpoint+0x74>
    {
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SNAK;
 8006c8c:	68bb      	ldr	r3, [r7, #8]
 8006c8e:	015a      	lsls	r2, r3, #5
 8006c90:	68fb      	ldr	r3, [r7, #12]
 8006c92:	4413      	add	r3, r2
 8006c94:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006c98:	681b      	ldr	r3, [r3, #0]
 8006c9a:	68ba      	ldr	r2, [r7, #8]
 8006c9c:	0151      	lsls	r1, r2, #5
 8006c9e:	68fa      	ldr	r2, [r7, #12]
 8006ca0:	440a      	add	r2, r1
 8006ca2:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8006ca6:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 8006caa:	6013      	str	r3, [r2, #0]
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_EPDIS;
 8006cac:	68bb      	ldr	r3, [r7, #8]
 8006cae:	015a      	lsls	r2, r3, #5
 8006cb0:	68fb      	ldr	r3, [r7, #12]
 8006cb2:	4413      	add	r3, r2
 8006cb4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006cb8:	681b      	ldr	r3, [r3, #0]
 8006cba:	68ba      	ldr	r2, [r7, #8]
 8006cbc:	0151      	lsls	r1, r2, #5
 8006cbe:	68fa      	ldr	r2, [r7, #12]
 8006cc0:	440a      	add	r2, r1
 8006cc2:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8006cc6:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8006cca:	6013      	str	r3, [r2, #0]
    }

    USBx_DEVICE->DEACHMSK &= ~(USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK)));
 8006ccc:	68fb      	ldr	r3, [r7, #12]
 8006cce:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006cd2:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8006cd4:	683b      	ldr	r3, [r7, #0]
 8006cd6:	781b      	ldrb	r3, [r3, #0]
 8006cd8:	f003 030f 	and.w	r3, r3, #15
 8006cdc:	2101      	movs	r1, #1
 8006cde:	fa01 f303 	lsl.w	r3, r1, r3
 8006ce2:	b29b      	uxth	r3, r3
 8006ce4:	43db      	mvns	r3, r3
 8006ce6:	68f9      	ldr	r1, [r7, #12]
 8006ce8:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8006cec:	4013      	ands	r3, r2
 8006cee:	63cb      	str	r3, [r1, #60]	; 0x3c
    USBx_DEVICE->DAINTMSK &= ~(USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK)));
 8006cf0:	68fb      	ldr	r3, [r7, #12]
 8006cf2:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006cf6:	69da      	ldr	r2, [r3, #28]
 8006cf8:	683b      	ldr	r3, [r7, #0]
 8006cfa:	781b      	ldrb	r3, [r3, #0]
 8006cfc:	f003 030f 	and.w	r3, r3, #15
 8006d00:	2101      	movs	r1, #1
 8006d02:	fa01 f303 	lsl.w	r3, r1, r3
 8006d06:	b29b      	uxth	r3, r3
 8006d08:	43db      	mvns	r3, r3
 8006d0a:	68f9      	ldr	r1, [r7, #12]
 8006d0c:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8006d10:	4013      	ands	r3, r2
 8006d12:	61cb      	str	r3, [r1, #28]
    USBx_INEP(epnum)->DIEPCTL &= ~(USB_OTG_DIEPCTL_USBAEP |
 8006d14:	68bb      	ldr	r3, [r7, #8]
 8006d16:	015a      	lsls	r2, r3, #5
 8006d18:	68fb      	ldr	r3, [r7, #12]
 8006d1a:	4413      	add	r3, r2
 8006d1c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006d20:	681a      	ldr	r2, [r3, #0]
 8006d22:	68bb      	ldr	r3, [r7, #8]
 8006d24:	0159      	lsls	r1, r3, #5
 8006d26:	68fb      	ldr	r3, [r7, #12]
 8006d28:	440b      	add	r3, r1
 8006d2a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006d2e:	4619      	mov	r1, r3
 8006d30:	4b35      	ldr	r3, [pc, #212]	; (8006e08 <USB_DeactivateEndpoint+0x1b0>)
 8006d32:	4013      	ands	r3, r2
 8006d34:	600b      	str	r3, [r1, #0]
 8006d36:	e060      	b.n	8006dfa <USB_DeactivateEndpoint+0x1a2>
                                   USB_OTG_DIEPCTL_SD0PID_SEVNFRM |
                                   USB_OTG_DIEPCTL_EPTYP);
  }
  else
  {
    if ((USBx_OUTEP(epnum)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8006d38:	68bb      	ldr	r3, [r7, #8]
 8006d3a:	015a      	lsls	r2, r3, #5
 8006d3c:	68fb      	ldr	r3, [r7, #12]
 8006d3e:	4413      	add	r3, r2
 8006d40:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006d44:	681b      	ldr	r3, [r3, #0]
 8006d46:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8006d4a:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8006d4e:	d11f      	bne.n	8006d90 <USB_DeactivateEndpoint+0x138>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SNAK;
 8006d50:	68bb      	ldr	r3, [r7, #8]
 8006d52:	015a      	lsls	r2, r3, #5
 8006d54:	68fb      	ldr	r3, [r7, #12]
 8006d56:	4413      	add	r3, r2
 8006d58:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006d5c:	681b      	ldr	r3, [r3, #0]
 8006d5e:	68ba      	ldr	r2, [r7, #8]
 8006d60:	0151      	lsls	r1, r2, #5
 8006d62:	68fa      	ldr	r2, [r7, #12]
 8006d64:	440a      	add	r2, r1
 8006d66:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8006d6a:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 8006d6e:	6013      	str	r3, [r2, #0]
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_EPDIS;
 8006d70:	68bb      	ldr	r3, [r7, #8]
 8006d72:	015a      	lsls	r2, r3, #5
 8006d74:	68fb      	ldr	r3, [r7, #12]
 8006d76:	4413      	add	r3, r2
 8006d78:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006d7c:	681b      	ldr	r3, [r3, #0]
 8006d7e:	68ba      	ldr	r2, [r7, #8]
 8006d80:	0151      	lsls	r1, r2, #5
 8006d82:	68fa      	ldr	r2, [r7, #12]
 8006d84:	440a      	add	r2, r1
 8006d86:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8006d8a:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8006d8e:	6013      	str	r3, [r2, #0]
    }

    USBx_DEVICE->DEACHMSK &= ~(USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16));
 8006d90:	68fb      	ldr	r3, [r7, #12]
 8006d92:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006d96:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8006d98:	683b      	ldr	r3, [r7, #0]
 8006d9a:	781b      	ldrb	r3, [r3, #0]
 8006d9c:	f003 030f 	and.w	r3, r3, #15
 8006da0:	2101      	movs	r1, #1
 8006da2:	fa01 f303 	lsl.w	r3, r1, r3
 8006da6:	041b      	lsls	r3, r3, #16
 8006da8:	43db      	mvns	r3, r3
 8006daa:	68f9      	ldr	r1, [r7, #12]
 8006dac:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8006db0:	4013      	ands	r3, r2
 8006db2:	63cb      	str	r3, [r1, #60]	; 0x3c
    USBx_DEVICE->DAINTMSK &= ~(USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16));
 8006db4:	68fb      	ldr	r3, [r7, #12]
 8006db6:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006dba:	69da      	ldr	r2, [r3, #28]
 8006dbc:	683b      	ldr	r3, [r7, #0]
 8006dbe:	781b      	ldrb	r3, [r3, #0]
 8006dc0:	f003 030f 	and.w	r3, r3, #15
 8006dc4:	2101      	movs	r1, #1
 8006dc6:	fa01 f303 	lsl.w	r3, r1, r3
 8006dca:	041b      	lsls	r3, r3, #16
 8006dcc:	43db      	mvns	r3, r3
 8006dce:	68f9      	ldr	r1, [r7, #12]
 8006dd0:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8006dd4:	4013      	ands	r3, r2
 8006dd6:	61cb      	str	r3, [r1, #28]
    USBx_OUTEP(epnum)->DOEPCTL &= ~(USB_OTG_DOEPCTL_USBAEP |
 8006dd8:	68bb      	ldr	r3, [r7, #8]
 8006dda:	015a      	lsls	r2, r3, #5
 8006ddc:	68fb      	ldr	r3, [r7, #12]
 8006dde:	4413      	add	r3, r2
 8006de0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006de4:	681a      	ldr	r2, [r3, #0]
 8006de6:	68bb      	ldr	r3, [r7, #8]
 8006de8:	0159      	lsls	r1, r3, #5
 8006dea:	68fb      	ldr	r3, [r7, #12]
 8006dec:	440b      	add	r3, r1
 8006dee:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006df2:	4619      	mov	r1, r3
 8006df4:	4b05      	ldr	r3, [pc, #20]	; (8006e0c <USB_DeactivateEndpoint+0x1b4>)
 8006df6:	4013      	ands	r3, r2
 8006df8:	600b      	str	r3, [r1, #0]
                                    USB_OTG_DOEPCTL_MPSIZ |
                                    USB_OTG_DOEPCTL_SD0PID_SEVNFRM |
                                    USB_OTG_DOEPCTL_EPTYP);
  }

  return HAL_OK;
 8006dfa:	2300      	movs	r3, #0
}
 8006dfc:	4618      	mov	r0, r3
 8006dfe:	3714      	adds	r7, #20
 8006e00:	46bd      	mov	sp, r7
 8006e02:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006e06:	4770      	bx	lr
 8006e08:	ec337800 	.word	0xec337800
 8006e0c:	eff37800 	.word	0xeff37800

08006e10 <USB_EPStartXfer>:
  *           0 : DMA feature not used
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPStartXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep, uint8_t dma)
{
 8006e10:	b580      	push	{r7, lr}
 8006e12:	b08a      	sub	sp, #40	; 0x28
 8006e14:	af02      	add	r7, sp, #8
 8006e16:	60f8      	str	r0, [r7, #12]
 8006e18:	60b9      	str	r1, [r7, #8]
 8006e1a:	4613      	mov	r3, r2
 8006e1c:	71fb      	strb	r3, [r7, #7]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006e1e:	68fb      	ldr	r3, [r7, #12]
 8006e20:	61fb      	str	r3, [r7, #28]
  uint32_t epnum = (uint32_t)ep->num;
 8006e22:	68bb      	ldr	r3, [r7, #8]
 8006e24:	781b      	ldrb	r3, [r3, #0]
 8006e26:	61bb      	str	r3, [r7, #24]
  uint16_t pktcnt;

  /* IN endpoint */
  if (ep->is_in == 1U)
 8006e28:	68bb      	ldr	r3, [r7, #8]
 8006e2a:	785b      	ldrb	r3, [r3, #1]
 8006e2c:	2b01      	cmp	r3, #1
 8006e2e:	f040 8180 	bne.w	8007132 <USB_EPStartXfer+0x322>
  {
    /* Zero Length Packet? */
    if (ep->xfer_len == 0U)
 8006e32:	68bb      	ldr	r3, [r7, #8]
 8006e34:	691b      	ldr	r3, [r3, #16]
 8006e36:	2b00      	cmp	r3, #0
 8006e38:	d132      	bne.n	8006ea0 <USB_EPStartXfer+0x90>
    {
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 8006e3a:	69bb      	ldr	r3, [r7, #24]
 8006e3c:	015a      	lsls	r2, r3, #5
 8006e3e:	69fb      	ldr	r3, [r7, #28]
 8006e40:	4413      	add	r3, r2
 8006e42:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006e46:	691b      	ldr	r3, [r3, #16]
 8006e48:	69ba      	ldr	r2, [r7, #24]
 8006e4a:	0151      	lsls	r1, r2, #5
 8006e4c:	69fa      	ldr	r2, [r7, #28]
 8006e4e:	440a      	add	r2, r1
 8006e50:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8006e54:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 8006e58:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 8006e5c:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 8006e5e:	69bb      	ldr	r3, [r7, #24]
 8006e60:	015a      	lsls	r2, r3, #5
 8006e62:	69fb      	ldr	r3, [r7, #28]
 8006e64:	4413      	add	r3, r2
 8006e66:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006e6a:	691b      	ldr	r3, [r3, #16]
 8006e6c:	69ba      	ldr	r2, [r7, #24]
 8006e6e:	0151      	lsls	r1, r2, #5
 8006e70:	69fa      	ldr	r2, [r7, #28]
 8006e72:	440a      	add	r2, r1
 8006e74:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8006e78:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8006e7c:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 8006e7e:	69bb      	ldr	r3, [r7, #24]
 8006e80:	015a      	lsls	r2, r3, #5
 8006e82:	69fb      	ldr	r3, [r7, #28]
 8006e84:	4413      	add	r3, r2
 8006e86:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006e8a:	691b      	ldr	r3, [r3, #16]
 8006e8c:	69ba      	ldr	r2, [r7, #24]
 8006e8e:	0151      	lsls	r1, r2, #5
 8006e90:	69fa      	ldr	r2, [r7, #28]
 8006e92:	440a      	add	r2, r1
 8006e94:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8006e98:	0cdb      	lsrs	r3, r3, #19
 8006e9a:	04db      	lsls	r3, r3, #19
 8006e9c:	6113      	str	r3, [r2, #16]
 8006e9e:	e098      	b.n	8006fd2 <USB_EPStartXfer+0x1c2>
      /* Program the transfer size and packet count
      * as follows: xfersize = N * maxpacket +
      * short_packet pktcnt = N + (short_packet
      * exist ? 1 : 0)
      */
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 8006ea0:	69bb      	ldr	r3, [r7, #24]
 8006ea2:	015a      	lsls	r2, r3, #5
 8006ea4:	69fb      	ldr	r3, [r7, #28]
 8006ea6:	4413      	add	r3, r2
 8006ea8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006eac:	691b      	ldr	r3, [r3, #16]
 8006eae:	69ba      	ldr	r2, [r7, #24]
 8006eb0:	0151      	lsls	r1, r2, #5
 8006eb2:	69fa      	ldr	r2, [r7, #28]
 8006eb4:	440a      	add	r2, r1
 8006eb6:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8006eba:	0cdb      	lsrs	r3, r3, #19
 8006ebc:	04db      	lsls	r3, r3, #19
 8006ebe:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 8006ec0:	69bb      	ldr	r3, [r7, #24]
 8006ec2:	015a      	lsls	r2, r3, #5
 8006ec4:	69fb      	ldr	r3, [r7, #28]
 8006ec6:	4413      	add	r3, r2
 8006ec8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006ecc:	691b      	ldr	r3, [r3, #16]
 8006ece:	69ba      	ldr	r2, [r7, #24]
 8006ed0:	0151      	lsls	r1, r2, #5
 8006ed2:	69fa      	ldr	r2, [r7, #28]
 8006ed4:	440a      	add	r2, r1
 8006ed6:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8006eda:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 8006ede:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 8006ee2:	6113      	str	r3, [r2, #16]

      if (epnum == 0U)
 8006ee4:	69bb      	ldr	r3, [r7, #24]
 8006ee6:	2b00      	cmp	r3, #0
 8006ee8:	d11a      	bne.n	8006f20 <USB_EPStartXfer+0x110>
      {
        if (ep->xfer_len > ep->maxpacket)
 8006eea:	68bb      	ldr	r3, [r7, #8]
 8006eec:	691a      	ldr	r2, [r3, #16]
 8006eee:	68bb      	ldr	r3, [r7, #8]
 8006ef0:	689b      	ldr	r3, [r3, #8]
 8006ef2:	429a      	cmp	r2, r3
 8006ef4:	d903      	bls.n	8006efe <USB_EPStartXfer+0xee>
        {
          ep->xfer_len = ep->maxpacket;
 8006ef6:	68bb      	ldr	r3, [r7, #8]
 8006ef8:	689a      	ldr	r2, [r3, #8]
 8006efa:	68bb      	ldr	r3, [r7, #8]
 8006efc:	611a      	str	r2, [r3, #16]
        }

        USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 8006efe:	69bb      	ldr	r3, [r7, #24]
 8006f00:	015a      	lsls	r2, r3, #5
 8006f02:	69fb      	ldr	r3, [r7, #28]
 8006f04:	4413      	add	r3, r2
 8006f06:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006f0a:	691b      	ldr	r3, [r3, #16]
 8006f0c:	69ba      	ldr	r2, [r7, #24]
 8006f0e:	0151      	lsls	r1, r2, #5
 8006f10:	69fa      	ldr	r2, [r7, #28]
 8006f12:	440a      	add	r2, r1
 8006f14:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8006f18:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8006f1c:	6113      	str	r3, [r2, #16]
 8006f1e:	e045      	b.n	8006fac <USB_EPStartXfer+0x19c>
      }
      else
      {
        pktcnt = (uint16_t)((ep->xfer_len + ep->maxpacket - 1U) / ep->maxpacket);
 8006f20:	68bb      	ldr	r3, [r7, #8]
 8006f22:	691a      	ldr	r2, [r3, #16]
 8006f24:	68bb      	ldr	r3, [r7, #8]
 8006f26:	689b      	ldr	r3, [r3, #8]
 8006f28:	4413      	add	r3, r2
 8006f2a:	1e5a      	subs	r2, r3, #1
 8006f2c:	68bb      	ldr	r3, [r7, #8]
 8006f2e:	689b      	ldr	r3, [r3, #8]
 8006f30:	fbb2 f3f3 	udiv	r3, r2, r3
 8006f34:	82fb      	strh	r3, [r7, #22]
        USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (pktcnt << 19));
 8006f36:	69bb      	ldr	r3, [r7, #24]
 8006f38:	015a      	lsls	r2, r3, #5
 8006f3a:	69fb      	ldr	r3, [r7, #28]
 8006f3c:	4413      	add	r3, r2
 8006f3e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006f42:	691a      	ldr	r2, [r3, #16]
 8006f44:	8afb      	ldrh	r3, [r7, #22]
 8006f46:	04db      	lsls	r3, r3, #19
 8006f48:	4619      	mov	r1, r3
 8006f4a:	4ba4      	ldr	r3, [pc, #656]	; (80071dc <USB_EPStartXfer+0x3cc>)
 8006f4c:	400b      	ands	r3, r1
 8006f4e:	69b9      	ldr	r1, [r7, #24]
 8006f50:	0148      	lsls	r0, r1, #5
 8006f52:	69f9      	ldr	r1, [r7, #28]
 8006f54:	4401      	add	r1, r0
 8006f56:	f501 6110 	add.w	r1, r1, #2304	; 0x900
 8006f5a:	4313      	orrs	r3, r2
 8006f5c:	610b      	str	r3, [r1, #16]

        if (ep->type == EP_TYPE_ISOC)
 8006f5e:	68bb      	ldr	r3, [r7, #8]
 8006f60:	791b      	ldrb	r3, [r3, #4]
 8006f62:	2b01      	cmp	r3, #1
 8006f64:	d122      	bne.n	8006fac <USB_EPStartXfer+0x19c>
        {
          USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_MULCNT);
 8006f66:	69bb      	ldr	r3, [r7, #24]
 8006f68:	015a      	lsls	r2, r3, #5
 8006f6a:	69fb      	ldr	r3, [r7, #28]
 8006f6c:	4413      	add	r3, r2
 8006f6e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006f72:	691b      	ldr	r3, [r3, #16]
 8006f74:	69ba      	ldr	r2, [r7, #24]
 8006f76:	0151      	lsls	r1, r2, #5
 8006f78:	69fa      	ldr	r2, [r7, #28]
 8006f7a:	440a      	add	r2, r1
 8006f7c:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8006f80:	f023 43c0 	bic.w	r3, r3, #1610612736	; 0x60000000
 8006f84:	6113      	str	r3, [r2, #16]
          USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_MULCNT & (pktcnt << 29));
 8006f86:	69bb      	ldr	r3, [r7, #24]
 8006f88:	015a      	lsls	r2, r3, #5
 8006f8a:	69fb      	ldr	r3, [r7, #28]
 8006f8c:	4413      	add	r3, r2
 8006f8e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006f92:	691a      	ldr	r2, [r3, #16]
 8006f94:	8afb      	ldrh	r3, [r7, #22]
 8006f96:	075b      	lsls	r3, r3, #29
 8006f98:	f003 43c0 	and.w	r3, r3, #1610612736	; 0x60000000
 8006f9c:	69b9      	ldr	r1, [r7, #24]
 8006f9e:	0148      	lsls	r0, r1, #5
 8006fa0:	69f9      	ldr	r1, [r7, #28]
 8006fa2:	4401      	add	r1, r0
 8006fa4:	f501 6110 	add.w	r1, r1, #2304	; 0x900
 8006fa8:	4313      	orrs	r3, r2
 8006faa:	610b      	str	r3, [r1, #16]
        }
      }

      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_XFRSIZ & ep->xfer_len);
 8006fac:	69bb      	ldr	r3, [r7, #24]
 8006fae:	015a      	lsls	r2, r3, #5
 8006fb0:	69fb      	ldr	r3, [r7, #28]
 8006fb2:	4413      	add	r3, r2
 8006fb4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006fb8:	691a      	ldr	r2, [r3, #16]
 8006fba:	68bb      	ldr	r3, [r7, #8]
 8006fbc:	691b      	ldr	r3, [r3, #16]
 8006fbe:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8006fc2:	69b9      	ldr	r1, [r7, #24]
 8006fc4:	0148      	lsls	r0, r1, #5
 8006fc6:	69f9      	ldr	r1, [r7, #28]
 8006fc8:	4401      	add	r1, r0
 8006fca:	f501 6110 	add.w	r1, r1, #2304	; 0x900
 8006fce:	4313      	orrs	r3, r2
 8006fd0:	610b      	str	r3, [r1, #16]
    }

    if (dma == 1U)
 8006fd2:	79fb      	ldrb	r3, [r7, #7]
 8006fd4:	2b01      	cmp	r3, #1
 8006fd6:	d14b      	bne.n	8007070 <USB_EPStartXfer+0x260>
    {
      if ((uint32_t)ep->dma_addr != 0U)
 8006fd8:	68bb      	ldr	r3, [r7, #8]
 8006fda:	69db      	ldr	r3, [r3, #28]
 8006fdc:	2b00      	cmp	r3, #0
 8006fde:	d009      	beq.n	8006ff4 <USB_EPStartXfer+0x1e4>
      {
        USBx_INEP(epnum)->DIEPDMA = (uint32_t)(ep->dma_addr);
 8006fe0:	69bb      	ldr	r3, [r7, #24]
 8006fe2:	015a      	lsls	r2, r3, #5
 8006fe4:	69fb      	ldr	r3, [r7, #28]
 8006fe6:	4413      	add	r3, r2
 8006fe8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006fec:	461a      	mov	r2, r3
 8006fee:	68bb      	ldr	r3, [r7, #8]
 8006ff0:	69db      	ldr	r3, [r3, #28]
 8006ff2:	6153      	str	r3, [r2, #20]
      }

      if (ep->type == EP_TYPE_ISOC)
 8006ff4:	68bb      	ldr	r3, [r7, #8]
 8006ff6:	791b      	ldrb	r3, [r3, #4]
 8006ff8:	2b01      	cmp	r3, #1
 8006ffa:	d128      	bne.n	800704e <USB_EPStartXfer+0x23e>
      {
        if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 8006ffc:	69fb      	ldr	r3, [r7, #28]
 8006ffe:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8007002:	689b      	ldr	r3, [r3, #8]
 8007004:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8007008:	2b00      	cmp	r3, #0
 800700a:	d110      	bne.n	800702e <USB_EPStartXfer+0x21e>
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SODDFRM;
 800700c:	69bb      	ldr	r3, [r7, #24]
 800700e:	015a      	lsls	r2, r3, #5
 8007010:	69fb      	ldr	r3, [r7, #28]
 8007012:	4413      	add	r3, r2
 8007014:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007018:	681b      	ldr	r3, [r3, #0]
 800701a:	69ba      	ldr	r2, [r7, #24]
 800701c:	0151      	lsls	r1, r2, #5
 800701e:	69fa      	ldr	r2, [r7, #28]
 8007020:	440a      	add	r2, r1
 8007022:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8007026:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 800702a:	6013      	str	r3, [r2, #0]
 800702c:	e00f      	b.n	800704e <USB_EPStartXfer+0x23e>
        }
        else
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM;
 800702e:	69bb      	ldr	r3, [r7, #24]
 8007030:	015a      	lsls	r2, r3, #5
 8007032:	69fb      	ldr	r3, [r7, #28]
 8007034:	4413      	add	r3, r2
 8007036:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800703a:	681b      	ldr	r3, [r3, #0]
 800703c:	69ba      	ldr	r2, [r7, #24]
 800703e:	0151      	lsls	r1, r2, #5
 8007040:	69fa      	ldr	r2, [r7, #28]
 8007042:	440a      	add	r2, r1
 8007044:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8007048:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800704c:	6013      	str	r3, [r2, #0]
        }
      }

      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 800704e:	69bb      	ldr	r3, [r7, #24]
 8007050:	015a      	lsls	r2, r3, #5
 8007052:	69fb      	ldr	r3, [r7, #28]
 8007054:	4413      	add	r3, r2
 8007056:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800705a:	681b      	ldr	r3, [r3, #0]
 800705c:	69ba      	ldr	r2, [r7, #24]
 800705e:	0151      	lsls	r1, r2, #5
 8007060:	69fa      	ldr	r2, [r7, #28]
 8007062:	440a      	add	r2, r1
 8007064:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8007068:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 800706c:	6013      	str	r3, [r2, #0]
 800706e:	e165      	b.n	800733c <USB_EPStartXfer+0x52c>
    }
    else
    {
      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 8007070:	69bb      	ldr	r3, [r7, #24]
 8007072:	015a      	lsls	r2, r3, #5
 8007074:	69fb      	ldr	r3, [r7, #28]
 8007076:	4413      	add	r3, r2
 8007078:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800707c:	681b      	ldr	r3, [r3, #0]
 800707e:	69ba      	ldr	r2, [r7, #24]
 8007080:	0151      	lsls	r1, r2, #5
 8007082:	69fa      	ldr	r2, [r7, #28]
 8007084:	440a      	add	r2, r1
 8007086:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800708a:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 800708e:	6013      	str	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 8007090:	68bb      	ldr	r3, [r7, #8]
 8007092:	791b      	ldrb	r3, [r3, #4]
 8007094:	2b01      	cmp	r3, #1
 8007096:	d015      	beq.n	80070c4 <USB_EPStartXfer+0x2b4>
      {
        /* Enable the Tx FIFO Empty Interrupt for this EP */
        if (ep->xfer_len > 0U)
 8007098:	68bb      	ldr	r3, [r7, #8]
 800709a:	691b      	ldr	r3, [r3, #16]
 800709c:	2b00      	cmp	r3, #0
 800709e:	f000 814d 	beq.w	800733c <USB_EPStartXfer+0x52c>
        {
          USBx_DEVICE->DIEPEMPMSK |= 1UL << (ep->num & EP_ADDR_MSK);
 80070a2:	69fb      	ldr	r3, [r7, #28]
 80070a4:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80070a8:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80070aa:	68bb      	ldr	r3, [r7, #8]
 80070ac:	781b      	ldrb	r3, [r3, #0]
 80070ae:	f003 030f 	and.w	r3, r3, #15
 80070b2:	2101      	movs	r1, #1
 80070b4:	fa01 f303 	lsl.w	r3, r1, r3
 80070b8:	69f9      	ldr	r1, [r7, #28]
 80070ba:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 80070be:	4313      	orrs	r3, r2
 80070c0:	634b      	str	r3, [r1, #52]	; 0x34
 80070c2:	e13b      	b.n	800733c <USB_EPStartXfer+0x52c>
        }
      }
      else
      {
        if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 80070c4:	69fb      	ldr	r3, [r7, #28]
 80070c6:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80070ca:	689b      	ldr	r3, [r3, #8]
 80070cc:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80070d0:	2b00      	cmp	r3, #0
 80070d2:	d110      	bne.n	80070f6 <USB_EPStartXfer+0x2e6>
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SODDFRM;
 80070d4:	69bb      	ldr	r3, [r7, #24]
 80070d6:	015a      	lsls	r2, r3, #5
 80070d8:	69fb      	ldr	r3, [r7, #28]
 80070da:	4413      	add	r3, r2
 80070dc:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80070e0:	681b      	ldr	r3, [r3, #0]
 80070e2:	69ba      	ldr	r2, [r7, #24]
 80070e4:	0151      	lsls	r1, r2, #5
 80070e6:	69fa      	ldr	r2, [r7, #28]
 80070e8:	440a      	add	r2, r1
 80070ea:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80070ee:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 80070f2:	6013      	str	r3, [r2, #0]
 80070f4:	e00f      	b.n	8007116 <USB_EPStartXfer+0x306>
        }
        else
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM;
 80070f6:	69bb      	ldr	r3, [r7, #24]
 80070f8:	015a      	lsls	r2, r3, #5
 80070fa:	69fb      	ldr	r3, [r7, #28]
 80070fc:	4413      	add	r3, r2
 80070fe:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007102:	681b      	ldr	r3, [r3, #0]
 8007104:	69ba      	ldr	r2, [r7, #24]
 8007106:	0151      	lsls	r1, r2, #5
 8007108:	69fa      	ldr	r2, [r7, #28]
 800710a:	440a      	add	r2, r1
 800710c:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8007110:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8007114:	6013      	str	r3, [r2, #0]
        }

        (void)USB_WritePacket(USBx, ep->xfer_buff, ep->num, (uint16_t)ep->xfer_len, dma);
 8007116:	68bb      	ldr	r3, [r7, #8]
 8007118:	68d9      	ldr	r1, [r3, #12]
 800711a:	68bb      	ldr	r3, [r7, #8]
 800711c:	781a      	ldrb	r2, [r3, #0]
 800711e:	68bb      	ldr	r3, [r7, #8]
 8007120:	691b      	ldr	r3, [r3, #16]
 8007122:	b298      	uxth	r0, r3
 8007124:	79fb      	ldrb	r3, [r7, #7]
 8007126:	9300      	str	r3, [sp, #0]
 8007128:	4603      	mov	r3, r0
 800712a:	68f8      	ldr	r0, [r7, #12]
 800712c:	f000 f9b8 	bl	80074a0 <USB_WritePacket>
 8007130:	e104      	b.n	800733c <USB_EPStartXfer+0x52c>
  {
    /* Program the transfer size and packet count as follows:
    * pktcnt = N
    * xfersize = N * maxpacket
    */
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_XFRSIZ);
 8007132:	69bb      	ldr	r3, [r7, #24]
 8007134:	015a      	lsls	r2, r3, #5
 8007136:	69fb      	ldr	r3, [r7, #28]
 8007138:	4413      	add	r3, r2
 800713a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800713e:	691b      	ldr	r3, [r3, #16]
 8007140:	69ba      	ldr	r2, [r7, #24]
 8007142:	0151      	lsls	r1, r2, #5
 8007144:	69fa      	ldr	r2, [r7, #28]
 8007146:	440a      	add	r2, r1
 8007148:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800714c:	0cdb      	lsrs	r3, r3, #19
 800714e:	04db      	lsls	r3, r3, #19
 8007150:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_PKTCNT);
 8007152:	69bb      	ldr	r3, [r7, #24]
 8007154:	015a      	lsls	r2, r3, #5
 8007156:	69fb      	ldr	r3, [r7, #28]
 8007158:	4413      	add	r3, r2
 800715a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800715e:	691b      	ldr	r3, [r3, #16]
 8007160:	69ba      	ldr	r2, [r7, #24]
 8007162:	0151      	lsls	r1, r2, #5
 8007164:	69fa      	ldr	r2, [r7, #28]
 8007166:	440a      	add	r2, r1
 8007168:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800716c:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 8007170:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 8007174:	6113      	str	r3, [r2, #16]

    if (epnum == 0U)
 8007176:	69bb      	ldr	r3, [r7, #24]
 8007178:	2b00      	cmp	r3, #0
 800717a:	d131      	bne.n	80071e0 <USB_EPStartXfer+0x3d0>
    {
      if (ep->xfer_len > 0U)
 800717c:	68bb      	ldr	r3, [r7, #8]
 800717e:	691b      	ldr	r3, [r3, #16]
 8007180:	2b00      	cmp	r3, #0
 8007182:	d003      	beq.n	800718c <USB_EPStartXfer+0x37c>
      {
        ep->xfer_len = ep->maxpacket;
 8007184:	68bb      	ldr	r3, [r7, #8]
 8007186:	689a      	ldr	r2, [r3, #8]
 8007188:	68bb      	ldr	r3, [r7, #8]
 800718a:	611a      	str	r2, [r3, #16]
      }

      /* Store transfer size, for EP0 this is equal to endpoint max packet size */
      ep->xfer_size = ep->maxpacket;
 800718c:	68bb      	ldr	r3, [r7, #8]
 800718e:	689a      	ldr	r2, [r3, #8]
 8007190:	68bb      	ldr	r3, [r7, #8]
 8007192:	621a      	str	r2, [r3, #32]

      USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_XFRSIZ & ep->xfer_size);
 8007194:	69bb      	ldr	r3, [r7, #24]
 8007196:	015a      	lsls	r2, r3, #5
 8007198:	69fb      	ldr	r3, [r7, #28]
 800719a:	4413      	add	r3, r2
 800719c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80071a0:	691a      	ldr	r2, [r3, #16]
 80071a2:	68bb      	ldr	r3, [r7, #8]
 80071a4:	6a1b      	ldr	r3, [r3, #32]
 80071a6:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80071aa:	69b9      	ldr	r1, [r7, #24]
 80071ac:	0148      	lsls	r0, r1, #5
 80071ae:	69f9      	ldr	r1, [r7, #28]
 80071b0:	4401      	add	r1, r0
 80071b2:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 80071b6:	4313      	orrs	r3, r2
 80071b8:	610b      	str	r3, [r1, #16]
      USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 80071ba:	69bb      	ldr	r3, [r7, #24]
 80071bc:	015a      	lsls	r2, r3, #5
 80071be:	69fb      	ldr	r3, [r7, #28]
 80071c0:	4413      	add	r3, r2
 80071c2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80071c6:	691b      	ldr	r3, [r3, #16]
 80071c8:	69ba      	ldr	r2, [r7, #24]
 80071ca:	0151      	lsls	r1, r2, #5
 80071cc:	69fa      	ldr	r2, [r7, #28]
 80071ce:	440a      	add	r2, r1
 80071d0:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80071d4:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 80071d8:	6113      	str	r3, [r2, #16]
 80071da:	e061      	b.n	80072a0 <USB_EPStartXfer+0x490>
 80071dc:	1ff80000 	.word	0x1ff80000
    }
    else
    {
      if (ep->xfer_len == 0U)
 80071e0:	68bb      	ldr	r3, [r7, #8]
 80071e2:	691b      	ldr	r3, [r3, #16]
 80071e4:	2b00      	cmp	r3, #0
 80071e6:	d123      	bne.n	8007230 <USB_EPStartXfer+0x420>
      {
        USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_XFRSIZ & ep->maxpacket);
 80071e8:	69bb      	ldr	r3, [r7, #24]
 80071ea:	015a      	lsls	r2, r3, #5
 80071ec:	69fb      	ldr	r3, [r7, #28]
 80071ee:	4413      	add	r3, r2
 80071f0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80071f4:	691a      	ldr	r2, [r3, #16]
 80071f6:	68bb      	ldr	r3, [r7, #8]
 80071f8:	689b      	ldr	r3, [r3, #8]
 80071fa:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80071fe:	69b9      	ldr	r1, [r7, #24]
 8007200:	0148      	lsls	r0, r1, #5
 8007202:	69f9      	ldr	r1, [r7, #28]
 8007204:	4401      	add	r1, r0
 8007206:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 800720a:	4313      	orrs	r3, r2
 800720c:	610b      	str	r3, [r1, #16]
        USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 800720e:	69bb      	ldr	r3, [r7, #24]
 8007210:	015a      	lsls	r2, r3, #5
 8007212:	69fb      	ldr	r3, [r7, #28]
 8007214:	4413      	add	r3, r2
 8007216:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800721a:	691b      	ldr	r3, [r3, #16]
 800721c:	69ba      	ldr	r2, [r7, #24]
 800721e:	0151      	lsls	r1, r2, #5
 8007220:	69fa      	ldr	r2, [r7, #28]
 8007222:	440a      	add	r2, r1
 8007224:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8007228:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 800722c:	6113      	str	r3, [r2, #16]
 800722e:	e037      	b.n	80072a0 <USB_EPStartXfer+0x490>
      }
      else
      {
        pktcnt = (uint16_t)((ep->xfer_len + ep->maxpacket - 1U) / ep->maxpacket);
 8007230:	68bb      	ldr	r3, [r7, #8]
 8007232:	691a      	ldr	r2, [r3, #16]
 8007234:	68bb      	ldr	r3, [r7, #8]
 8007236:	689b      	ldr	r3, [r3, #8]
 8007238:	4413      	add	r3, r2
 800723a:	1e5a      	subs	r2, r3, #1
 800723c:	68bb      	ldr	r3, [r7, #8]
 800723e:	689b      	ldr	r3, [r3, #8]
 8007240:	fbb2 f3f3 	udiv	r3, r2, r3
 8007244:	82fb      	strh	r3, [r7, #22]
        ep->xfer_size = ep->maxpacket * pktcnt;
 8007246:	68bb      	ldr	r3, [r7, #8]
 8007248:	689b      	ldr	r3, [r3, #8]
 800724a:	8afa      	ldrh	r2, [r7, #22]
 800724c:	fb03 f202 	mul.w	r2, r3, r2
 8007250:	68bb      	ldr	r3, [r7, #8]
 8007252:	621a      	str	r2, [r3, #32]

        USBx_OUTEP(epnum)->DOEPTSIZ |= USB_OTG_DOEPTSIZ_PKTCNT & ((uint32_t)pktcnt << 19);
 8007254:	69bb      	ldr	r3, [r7, #24]
 8007256:	015a      	lsls	r2, r3, #5
 8007258:	69fb      	ldr	r3, [r7, #28]
 800725a:	4413      	add	r3, r2
 800725c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007260:	691a      	ldr	r2, [r3, #16]
 8007262:	8afb      	ldrh	r3, [r7, #22]
 8007264:	04d9      	lsls	r1, r3, #19
 8007266:	4b38      	ldr	r3, [pc, #224]	; (8007348 <USB_EPStartXfer+0x538>)
 8007268:	400b      	ands	r3, r1
 800726a:	69b9      	ldr	r1, [r7, #24]
 800726c:	0148      	lsls	r0, r1, #5
 800726e:	69f9      	ldr	r1, [r7, #28]
 8007270:	4401      	add	r1, r0
 8007272:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 8007276:	4313      	orrs	r3, r2
 8007278:	610b      	str	r3, [r1, #16]
        USBx_OUTEP(epnum)->DOEPTSIZ |= USB_OTG_DOEPTSIZ_XFRSIZ & ep->xfer_size;
 800727a:	69bb      	ldr	r3, [r7, #24]
 800727c:	015a      	lsls	r2, r3, #5
 800727e:	69fb      	ldr	r3, [r7, #28]
 8007280:	4413      	add	r3, r2
 8007282:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007286:	691a      	ldr	r2, [r3, #16]
 8007288:	68bb      	ldr	r3, [r7, #8]
 800728a:	6a1b      	ldr	r3, [r3, #32]
 800728c:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8007290:	69b9      	ldr	r1, [r7, #24]
 8007292:	0148      	lsls	r0, r1, #5
 8007294:	69f9      	ldr	r1, [r7, #28]
 8007296:	4401      	add	r1, r0
 8007298:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 800729c:	4313      	orrs	r3, r2
 800729e:	610b      	str	r3, [r1, #16]
      }
    }

    if (dma == 1U)
 80072a0:	79fb      	ldrb	r3, [r7, #7]
 80072a2:	2b01      	cmp	r3, #1
 80072a4:	d10d      	bne.n	80072c2 <USB_EPStartXfer+0x4b2>
    {
      if ((uint32_t)ep->xfer_buff != 0U)
 80072a6:	68bb      	ldr	r3, [r7, #8]
 80072a8:	68db      	ldr	r3, [r3, #12]
 80072aa:	2b00      	cmp	r3, #0
 80072ac:	d009      	beq.n	80072c2 <USB_EPStartXfer+0x4b2>
      {
        USBx_OUTEP(epnum)->DOEPDMA = (uint32_t)(ep->xfer_buff);
 80072ae:	68bb      	ldr	r3, [r7, #8]
 80072b0:	68d9      	ldr	r1, [r3, #12]
 80072b2:	69bb      	ldr	r3, [r7, #24]
 80072b4:	015a      	lsls	r2, r3, #5
 80072b6:	69fb      	ldr	r3, [r7, #28]
 80072b8:	4413      	add	r3, r2
 80072ba:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80072be:	460a      	mov	r2, r1
 80072c0:	615a      	str	r2, [r3, #20]
      }
    }

    if (ep->type == EP_TYPE_ISOC)
 80072c2:	68bb      	ldr	r3, [r7, #8]
 80072c4:	791b      	ldrb	r3, [r3, #4]
 80072c6:	2b01      	cmp	r3, #1
 80072c8:	d128      	bne.n	800731c <USB_EPStartXfer+0x50c>
    {
      if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 80072ca:	69fb      	ldr	r3, [r7, #28]
 80072cc:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80072d0:	689b      	ldr	r3, [r3, #8]
 80072d2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80072d6:	2b00      	cmp	r3, #0
 80072d8:	d110      	bne.n	80072fc <USB_EPStartXfer+0x4ec>
      {
        USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SODDFRM;
 80072da:	69bb      	ldr	r3, [r7, #24]
 80072dc:	015a      	lsls	r2, r3, #5
 80072de:	69fb      	ldr	r3, [r7, #28]
 80072e0:	4413      	add	r3, r2
 80072e2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80072e6:	681b      	ldr	r3, [r3, #0]
 80072e8:	69ba      	ldr	r2, [r7, #24]
 80072ea:	0151      	lsls	r1, r2, #5
 80072ec:	69fa      	ldr	r2, [r7, #28]
 80072ee:	440a      	add	r2, r1
 80072f0:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80072f4:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 80072f8:	6013      	str	r3, [r2, #0]
 80072fa:	e00f      	b.n	800731c <USB_EPStartXfer+0x50c>
      }
      else
      {
        USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SD0PID_SEVNFRM;
 80072fc:	69bb      	ldr	r3, [r7, #24]
 80072fe:	015a      	lsls	r2, r3, #5
 8007300:	69fb      	ldr	r3, [r7, #28]
 8007302:	4413      	add	r3, r2
 8007304:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007308:	681b      	ldr	r3, [r3, #0]
 800730a:	69ba      	ldr	r2, [r7, #24]
 800730c:	0151      	lsls	r1, r2, #5
 800730e:	69fa      	ldr	r2, [r7, #28]
 8007310:	440a      	add	r2, r1
 8007312:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8007316:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800731a:	6013      	str	r3, [r2, #0]
      }
    }
    /* EP enable */
    USBx_OUTEP(epnum)->DOEPCTL |= (USB_OTG_DOEPCTL_CNAK | USB_OTG_DOEPCTL_EPENA);
 800731c:	69bb      	ldr	r3, [r7, #24]
 800731e:	015a      	lsls	r2, r3, #5
 8007320:	69fb      	ldr	r3, [r7, #28]
 8007322:	4413      	add	r3, r2
 8007324:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007328:	681b      	ldr	r3, [r3, #0]
 800732a:	69ba      	ldr	r2, [r7, #24]
 800732c:	0151      	lsls	r1, r2, #5
 800732e:	69fa      	ldr	r2, [r7, #28]
 8007330:	440a      	add	r2, r1
 8007332:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8007336:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 800733a:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 800733c:	2300      	movs	r3, #0
}
 800733e:	4618      	mov	r0, r3
 8007340:	3720      	adds	r7, #32
 8007342:	46bd      	mov	sp, r7
 8007344:	bd80      	pop	{r7, pc}
 8007346:	bf00      	nop
 8007348:	1ff80000 	.word	0x1ff80000

0800734c <USB_EPStopXfer>:
   * @param  USBx  usb device instance
   * @param  ep pointer to endpoint structure
   * @retval HAL status
   */
HAL_StatusTypeDef USB_EPStopXfer(const USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 800734c:	b480      	push	{r7}
 800734e:	b087      	sub	sp, #28
 8007350:	af00      	add	r7, sp, #0
 8007352:	6078      	str	r0, [r7, #4]
 8007354:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 8007356:	2300      	movs	r3, #0
 8007358:	60fb      	str	r3, [r7, #12]
  HAL_StatusTypeDef ret = HAL_OK;
 800735a:	2300      	movs	r3, #0
 800735c:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800735e:	687b      	ldr	r3, [r7, #4]
 8007360:	613b      	str	r3, [r7, #16]

  /* IN endpoint */
  if (ep->is_in == 1U)
 8007362:	683b      	ldr	r3, [r7, #0]
 8007364:	785b      	ldrb	r3, [r3, #1]
 8007366:	2b01      	cmp	r3, #1
 8007368:	d14a      	bne.n	8007400 <USB_EPStopXfer+0xb4>
  {
    /* EP enable, IN data in FIFO */
    if (((USBx_INEP(ep->num)->DIEPCTL) & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 800736a:	683b      	ldr	r3, [r7, #0]
 800736c:	781b      	ldrb	r3, [r3, #0]
 800736e:	015a      	lsls	r2, r3, #5
 8007370:	693b      	ldr	r3, [r7, #16]
 8007372:	4413      	add	r3, r2
 8007374:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007378:	681b      	ldr	r3, [r3, #0]
 800737a:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800737e:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8007382:	f040 8086 	bne.w	8007492 <USB_EPStopXfer+0x146>
    {
      USBx_INEP(ep->num)->DIEPCTL |= (USB_OTG_DIEPCTL_SNAK);
 8007386:	683b      	ldr	r3, [r7, #0]
 8007388:	781b      	ldrb	r3, [r3, #0]
 800738a:	015a      	lsls	r2, r3, #5
 800738c:	693b      	ldr	r3, [r7, #16]
 800738e:	4413      	add	r3, r2
 8007390:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007394:	681b      	ldr	r3, [r3, #0]
 8007396:	683a      	ldr	r2, [r7, #0]
 8007398:	7812      	ldrb	r2, [r2, #0]
 800739a:	0151      	lsls	r1, r2, #5
 800739c:	693a      	ldr	r2, [r7, #16]
 800739e:	440a      	add	r2, r1
 80073a0:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80073a4:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 80073a8:	6013      	str	r3, [r2, #0]
      USBx_INEP(ep->num)->DIEPCTL |= (USB_OTG_DIEPCTL_EPDIS);
 80073aa:	683b      	ldr	r3, [r7, #0]
 80073ac:	781b      	ldrb	r3, [r3, #0]
 80073ae:	015a      	lsls	r2, r3, #5
 80073b0:	693b      	ldr	r3, [r7, #16]
 80073b2:	4413      	add	r3, r2
 80073b4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80073b8:	681b      	ldr	r3, [r3, #0]
 80073ba:	683a      	ldr	r2, [r7, #0]
 80073bc:	7812      	ldrb	r2, [r2, #0]
 80073be:	0151      	lsls	r1, r2, #5
 80073c0:	693a      	ldr	r2, [r7, #16]
 80073c2:	440a      	add	r2, r1
 80073c4:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80073c8:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 80073cc:	6013      	str	r3, [r2, #0]

      do
      {
        count++;
 80073ce:	68fb      	ldr	r3, [r7, #12]
 80073d0:	3301      	adds	r3, #1
 80073d2:	60fb      	str	r3, [r7, #12]

        if (count > 10000U)
 80073d4:	68fb      	ldr	r3, [r7, #12]
 80073d6:	f242 7210 	movw	r2, #10000	; 0x2710
 80073da:	4293      	cmp	r3, r2
 80073dc:	d902      	bls.n	80073e4 <USB_EPStopXfer+0x98>
        {
          ret = HAL_ERROR;
 80073de:	2301      	movs	r3, #1
 80073e0:	75fb      	strb	r3, [r7, #23]
          break;
 80073e2:	e056      	b.n	8007492 <USB_EPStopXfer+0x146>
        }
      } while (((USBx_INEP(ep->num)->DIEPCTL) & USB_OTG_DIEPCTL_EPENA) ==  USB_OTG_DIEPCTL_EPENA);
 80073e4:	683b      	ldr	r3, [r7, #0]
 80073e6:	781b      	ldrb	r3, [r3, #0]
 80073e8:	015a      	lsls	r2, r3, #5
 80073ea:	693b      	ldr	r3, [r7, #16]
 80073ec:	4413      	add	r3, r2
 80073ee:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80073f2:	681b      	ldr	r3, [r3, #0]
 80073f4:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 80073f8:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80073fc:	d0e7      	beq.n	80073ce <USB_EPStopXfer+0x82>
 80073fe:	e048      	b.n	8007492 <USB_EPStopXfer+0x146>
    }
  }
  else /* OUT endpoint */
  {
    if (((USBx_OUTEP(ep->num)->DOEPCTL) & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8007400:	683b      	ldr	r3, [r7, #0]
 8007402:	781b      	ldrb	r3, [r3, #0]
 8007404:	015a      	lsls	r2, r3, #5
 8007406:	693b      	ldr	r3, [r7, #16]
 8007408:	4413      	add	r3, r2
 800740a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800740e:	681b      	ldr	r3, [r3, #0]
 8007410:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8007414:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8007418:	d13b      	bne.n	8007492 <USB_EPStopXfer+0x146>
    {
      USBx_OUTEP(ep->num)->DOEPCTL |= (USB_OTG_DOEPCTL_SNAK);
 800741a:	683b      	ldr	r3, [r7, #0]
 800741c:	781b      	ldrb	r3, [r3, #0]
 800741e:	015a      	lsls	r2, r3, #5
 8007420:	693b      	ldr	r3, [r7, #16]
 8007422:	4413      	add	r3, r2
 8007424:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007428:	681b      	ldr	r3, [r3, #0]
 800742a:	683a      	ldr	r2, [r7, #0]
 800742c:	7812      	ldrb	r2, [r2, #0]
 800742e:	0151      	lsls	r1, r2, #5
 8007430:	693a      	ldr	r2, [r7, #16]
 8007432:	440a      	add	r2, r1
 8007434:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8007438:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 800743c:	6013      	str	r3, [r2, #0]
      USBx_OUTEP(ep->num)->DOEPCTL |= (USB_OTG_DOEPCTL_EPDIS);
 800743e:	683b      	ldr	r3, [r7, #0]
 8007440:	781b      	ldrb	r3, [r3, #0]
 8007442:	015a      	lsls	r2, r3, #5
 8007444:	693b      	ldr	r3, [r7, #16]
 8007446:	4413      	add	r3, r2
 8007448:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800744c:	681b      	ldr	r3, [r3, #0]
 800744e:	683a      	ldr	r2, [r7, #0]
 8007450:	7812      	ldrb	r2, [r2, #0]
 8007452:	0151      	lsls	r1, r2, #5
 8007454:	693a      	ldr	r2, [r7, #16]
 8007456:	440a      	add	r2, r1
 8007458:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800745c:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8007460:	6013      	str	r3, [r2, #0]

      do
      {
        count++;
 8007462:	68fb      	ldr	r3, [r7, #12]
 8007464:	3301      	adds	r3, #1
 8007466:	60fb      	str	r3, [r7, #12]

        if (count > 10000U)
 8007468:	68fb      	ldr	r3, [r7, #12]
 800746a:	f242 7210 	movw	r2, #10000	; 0x2710
 800746e:	4293      	cmp	r3, r2
 8007470:	d902      	bls.n	8007478 <USB_EPStopXfer+0x12c>
        {
          ret = HAL_ERROR;
 8007472:	2301      	movs	r3, #1
 8007474:	75fb      	strb	r3, [r7, #23]
          break;
 8007476:	e00c      	b.n	8007492 <USB_EPStopXfer+0x146>
        }
      } while (((USBx_OUTEP(ep->num)->DOEPCTL) & USB_OTG_DOEPCTL_EPENA) ==  USB_OTG_DOEPCTL_EPENA);
 8007478:	683b      	ldr	r3, [r7, #0]
 800747a:	781b      	ldrb	r3, [r3, #0]
 800747c:	015a      	lsls	r2, r3, #5
 800747e:	693b      	ldr	r3, [r7, #16]
 8007480:	4413      	add	r3, r2
 8007482:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007486:	681b      	ldr	r3, [r3, #0]
 8007488:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800748c:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8007490:	d0e7      	beq.n	8007462 <USB_EPStopXfer+0x116>
    }
  }

  return ret;
 8007492:	7dfb      	ldrb	r3, [r7, #23]
}
 8007494:	4618      	mov	r0, r3
 8007496:	371c      	adds	r7, #28
 8007498:	46bd      	mov	sp, r7
 800749a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800749e:	4770      	bx	lr

080074a0 <USB_WritePacket>:
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_WritePacket(const USB_OTG_GlobalTypeDef *USBx, uint8_t *src,
                                  uint8_t ch_ep_num, uint16_t len, uint8_t dma)
{
 80074a0:	b480      	push	{r7}
 80074a2:	b089      	sub	sp, #36	; 0x24
 80074a4:	af00      	add	r7, sp, #0
 80074a6:	60f8      	str	r0, [r7, #12]
 80074a8:	60b9      	str	r1, [r7, #8]
 80074aa:	4611      	mov	r1, r2
 80074ac:	461a      	mov	r2, r3
 80074ae:	460b      	mov	r3, r1
 80074b0:	71fb      	strb	r3, [r7, #7]
 80074b2:	4613      	mov	r3, r2
 80074b4:	80bb      	strh	r3, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80074b6:	68fb      	ldr	r3, [r7, #12]
 80074b8:	617b      	str	r3, [r7, #20]
  uint8_t *pSrc = src;
 80074ba:	68bb      	ldr	r3, [r7, #8]
 80074bc:	61fb      	str	r3, [r7, #28]
  uint32_t count32b;
  uint32_t i;

  if (dma == 0U)
 80074be:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 80074c2:	2b00      	cmp	r3, #0
 80074c4:	d123      	bne.n	800750e <USB_WritePacket+0x6e>
  {
    count32b = ((uint32_t)len + 3U) / 4U;
 80074c6:	88bb      	ldrh	r3, [r7, #4]
 80074c8:	3303      	adds	r3, #3
 80074ca:	089b      	lsrs	r3, r3, #2
 80074cc:	613b      	str	r3, [r7, #16]
    for (i = 0U; i < count32b; i++)
 80074ce:	2300      	movs	r3, #0
 80074d0:	61bb      	str	r3, [r7, #24]
 80074d2:	e018      	b.n	8007506 <USB_WritePacket+0x66>
    {
      USBx_DFIFO((uint32_t)ch_ep_num) = __UNALIGNED_UINT32_READ(pSrc);
 80074d4:	79fb      	ldrb	r3, [r7, #7]
 80074d6:	031a      	lsls	r2, r3, #12
 80074d8:	697b      	ldr	r3, [r7, #20]
 80074da:	4413      	add	r3, r2
 80074dc:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80074e0:	461a      	mov	r2, r3
 80074e2:	69fb      	ldr	r3, [r7, #28]
 80074e4:	681b      	ldr	r3, [r3, #0]
 80074e6:	6013      	str	r3, [r2, #0]
      pSrc++;
 80074e8:	69fb      	ldr	r3, [r7, #28]
 80074ea:	3301      	adds	r3, #1
 80074ec:	61fb      	str	r3, [r7, #28]
      pSrc++;
 80074ee:	69fb      	ldr	r3, [r7, #28]
 80074f0:	3301      	adds	r3, #1
 80074f2:	61fb      	str	r3, [r7, #28]
      pSrc++;
 80074f4:	69fb      	ldr	r3, [r7, #28]
 80074f6:	3301      	adds	r3, #1
 80074f8:	61fb      	str	r3, [r7, #28]
      pSrc++;
 80074fa:	69fb      	ldr	r3, [r7, #28]
 80074fc:	3301      	adds	r3, #1
 80074fe:	61fb      	str	r3, [r7, #28]
    for (i = 0U; i < count32b; i++)
 8007500:	69bb      	ldr	r3, [r7, #24]
 8007502:	3301      	adds	r3, #1
 8007504:	61bb      	str	r3, [r7, #24]
 8007506:	69ba      	ldr	r2, [r7, #24]
 8007508:	693b      	ldr	r3, [r7, #16]
 800750a:	429a      	cmp	r2, r3
 800750c:	d3e2      	bcc.n	80074d4 <USB_WritePacket+0x34>
    }
  }

  return HAL_OK;
 800750e:	2300      	movs	r3, #0
}
 8007510:	4618      	mov	r0, r3
 8007512:	3724      	adds	r7, #36	; 0x24
 8007514:	46bd      	mov	sp, r7
 8007516:	f85d 7b04 	ldr.w	r7, [sp], #4
 800751a:	4770      	bx	lr

0800751c <USB_ReadPacket>:
  * @param  dest  source pointer
  * @param  len  Number of bytes to read
  * @retval pointer to destination buffer
  */
void *USB_ReadPacket(const USB_OTG_GlobalTypeDef *USBx, uint8_t *dest, uint16_t len)
{
 800751c:	b480      	push	{r7}
 800751e:	b08b      	sub	sp, #44	; 0x2c
 8007520:	af00      	add	r7, sp, #0
 8007522:	60f8      	str	r0, [r7, #12]
 8007524:	60b9      	str	r1, [r7, #8]
 8007526:	4613      	mov	r3, r2
 8007528:	80fb      	strh	r3, [r7, #6]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800752a:	68fb      	ldr	r3, [r7, #12]
 800752c:	61bb      	str	r3, [r7, #24]
  uint8_t *pDest = dest;
 800752e:	68bb      	ldr	r3, [r7, #8]
 8007530:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t pData;
  uint32_t i;
  uint32_t count32b = (uint32_t)len >> 2U;
 8007532:	88fb      	ldrh	r3, [r7, #6]
 8007534:	089b      	lsrs	r3, r3, #2
 8007536:	b29b      	uxth	r3, r3
 8007538:	617b      	str	r3, [r7, #20]
  uint16_t remaining_bytes = len % 4U;
 800753a:	88fb      	ldrh	r3, [r7, #6]
 800753c:	f003 0303 	and.w	r3, r3, #3
 8007540:	83fb      	strh	r3, [r7, #30]

  for (i = 0U; i < count32b; i++)
 8007542:	2300      	movs	r3, #0
 8007544:	623b      	str	r3, [r7, #32]
 8007546:	e014      	b.n	8007572 <USB_ReadPacket+0x56>
  {
    __UNALIGNED_UINT32_WRITE(pDest, USBx_DFIFO(0U));
 8007548:	69bb      	ldr	r3, [r7, #24]
 800754a:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800754e:	681a      	ldr	r2, [r3, #0]
 8007550:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007552:	601a      	str	r2, [r3, #0]
    pDest++;
 8007554:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007556:	3301      	adds	r3, #1
 8007558:	627b      	str	r3, [r7, #36]	; 0x24
    pDest++;
 800755a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800755c:	3301      	adds	r3, #1
 800755e:	627b      	str	r3, [r7, #36]	; 0x24
    pDest++;
 8007560:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007562:	3301      	adds	r3, #1
 8007564:	627b      	str	r3, [r7, #36]	; 0x24
    pDest++;
 8007566:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007568:	3301      	adds	r3, #1
 800756a:	627b      	str	r3, [r7, #36]	; 0x24
  for (i = 0U; i < count32b; i++)
 800756c:	6a3b      	ldr	r3, [r7, #32]
 800756e:	3301      	adds	r3, #1
 8007570:	623b      	str	r3, [r7, #32]
 8007572:	6a3a      	ldr	r2, [r7, #32]
 8007574:	697b      	ldr	r3, [r7, #20]
 8007576:	429a      	cmp	r2, r3
 8007578:	d3e6      	bcc.n	8007548 <USB_ReadPacket+0x2c>
  }

  /* When Number of data is not word aligned, read the remaining byte */
  if (remaining_bytes != 0U)
 800757a:	8bfb      	ldrh	r3, [r7, #30]
 800757c:	2b00      	cmp	r3, #0
 800757e:	d01e      	beq.n	80075be <USB_ReadPacket+0xa2>
  {
    i = 0U;
 8007580:	2300      	movs	r3, #0
 8007582:	623b      	str	r3, [r7, #32]
    __UNALIGNED_UINT32_WRITE(&pData, USBx_DFIFO(0U));
 8007584:	69bb      	ldr	r3, [r7, #24]
 8007586:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800758a:	461a      	mov	r2, r3
 800758c:	f107 0310 	add.w	r3, r7, #16
 8007590:	6812      	ldr	r2, [r2, #0]
 8007592:	601a      	str	r2, [r3, #0]

    do
    {
      *(uint8_t *)pDest = (uint8_t)(pData >> (8U * (uint8_t)(i)));
 8007594:	693a      	ldr	r2, [r7, #16]
 8007596:	6a3b      	ldr	r3, [r7, #32]
 8007598:	b2db      	uxtb	r3, r3
 800759a:	00db      	lsls	r3, r3, #3
 800759c:	fa22 f303 	lsr.w	r3, r2, r3
 80075a0:	b2da      	uxtb	r2, r3
 80075a2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80075a4:	701a      	strb	r2, [r3, #0]
      i++;
 80075a6:	6a3b      	ldr	r3, [r7, #32]
 80075a8:	3301      	adds	r3, #1
 80075aa:	623b      	str	r3, [r7, #32]
      pDest++;
 80075ac:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80075ae:	3301      	adds	r3, #1
 80075b0:	627b      	str	r3, [r7, #36]	; 0x24
      remaining_bytes--;
 80075b2:	8bfb      	ldrh	r3, [r7, #30]
 80075b4:	3b01      	subs	r3, #1
 80075b6:	83fb      	strh	r3, [r7, #30]
    } while (remaining_bytes != 0U);
 80075b8:	8bfb      	ldrh	r3, [r7, #30]
 80075ba:	2b00      	cmp	r3, #0
 80075bc:	d1ea      	bne.n	8007594 <USB_ReadPacket+0x78>
  }

  return ((void *)pDest);
 80075be:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 80075c0:	4618      	mov	r0, r3
 80075c2:	372c      	adds	r7, #44	; 0x2c
 80075c4:	46bd      	mov	sp, r7
 80075c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80075ca:	4770      	bx	lr

080075cc <USB_EPSetStall>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPSetStall(const USB_OTG_GlobalTypeDef *USBx, const USB_OTG_EPTypeDef *ep)
{
 80075cc:	b480      	push	{r7}
 80075ce:	b085      	sub	sp, #20
 80075d0:	af00      	add	r7, sp, #0
 80075d2:	6078      	str	r0, [r7, #4]
 80075d4:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80075d6:	687b      	ldr	r3, [r7, #4]
 80075d8:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 80075da:	683b      	ldr	r3, [r7, #0]
 80075dc:	781b      	ldrb	r3, [r3, #0]
 80075de:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 80075e0:	683b      	ldr	r3, [r7, #0]
 80075e2:	785b      	ldrb	r3, [r3, #1]
 80075e4:	2b01      	cmp	r3, #1
 80075e6:	d12c      	bne.n	8007642 <USB_EPSetStall+0x76>
  {
    if (((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == 0U) && (epnum != 0U))
 80075e8:	68bb      	ldr	r3, [r7, #8]
 80075ea:	015a      	lsls	r2, r3, #5
 80075ec:	68fb      	ldr	r3, [r7, #12]
 80075ee:	4413      	add	r3, r2
 80075f0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80075f4:	681b      	ldr	r3, [r3, #0]
 80075f6:	2b00      	cmp	r3, #0
 80075f8:	db12      	blt.n	8007620 <USB_EPSetStall+0x54>
 80075fa:	68bb      	ldr	r3, [r7, #8]
 80075fc:	2b00      	cmp	r3, #0
 80075fe:	d00f      	beq.n	8007620 <USB_EPSetStall+0x54>
    {
      USBx_INEP(epnum)->DIEPCTL &= ~(USB_OTG_DIEPCTL_EPDIS);
 8007600:	68bb      	ldr	r3, [r7, #8]
 8007602:	015a      	lsls	r2, r3, #5
 8007604:	68fb      	ldr	r3, [r7, #12]
 8007606:	4413      	add	r3, r2
 8007608:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800760c:	681b      	ldr	r3, [r3, #0]
 800760e:	68ba      	ldr	r2, [r7, #8]
 8007610:	0151      	lsls	r1, r2, #5
 8007612:	68fa      	ldr	r2, [r7, #12]
 8007614:	440a      	add	r2, r1
 8007616:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800761a:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 800761e:	6013      	str	r3, [r2, #0]
    }
    USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_STALL;
 8007620:	68bb      	ldr	r3, [r7, #8]
 8007622:	015a      	lsls	r2, r3, #5
 8007624:	68fb      	ldr	r3, [r7, #12]
 8007626:	4413      	add	r3, r2
 8007628:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800762c:	681b      	ldr	r3, [r3, #0]
 800762e:	68ba      	ldr	r2, [r7, #8]
 8007630:	0151      	lsls	r1, r2, #5
 8007632:	68fa      	ldr	r2, [r7, #12]
 8007634:	440a      	add	r2, r1
 8007636:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800763a:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 800763e:	6013      	str	r3, [r2, #0]
 8007640:	e02b      	b.n	800769a <USB_EPSetStall+0xce>
  }
  else
  {
    if (((USBx_OUTEP(epnum)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == 0U) && (epnum != 0U))
 8007642:	68bb      	ldr	r3, [r7, #8]
 8007644:	015a      	lsls	r2, r3, #5
 8007646:	68fb      	ldr	r3, [r7, #12]
 8007648:	4413      	add	r3, r2
 800764a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800764e:	681b      	ldr	r3, [r3, #0]
 8007650:	2b00      	cmp	r3, #0
 8007652:	db12      	blt.n	800767a <USB_EPSetStall+0xae>
 8007654:	68bb      	ldr	r3, [r7, #8]
 8007656:	2b00      	cmp	r3, #0
 8007658:	d00f      	beq.n	800767a <USB_EPSetStall+0xae>
    {
      USBx_OUTEP(epnum)->DOEPCTL &= ~(USB_OTG_DOEPCTL_EPDIS);
 800765a:	68bb      	ldr	r3, [r7, #8]
 800765c:	015a      	lsls	r2, r3, #5
 800765e:	68fb      	ldr	r3, [r7, #12]
 8007660:	4413      	add	r3, r2
 8007662:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007666:	681b      	ldr	r3, [r3, #0]
 8007668:	68ba      	ldr	r2, [r7, #8]
 800766a:	0151      	lsls	r1, r2, #5
 800766c:	68fa      	ldr	r2, [r7, #12]
 800766e:	440a      	add	r2, r1
 8007670:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8007674:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 8007678:	6013      	str	r3, [r2, #0]
    }
    USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_STALL;
 800767a:	68bb      	ldr	r3, [r7, #8]
 800767c:	015a      	lsls	r2, r3, #5
 800767e:	68fb      	ldr	r3, [r7, #12]
 8007680:	4413      	add	r3, r2
 8007682:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007686:	681b      	ldr	r3, [r3, #0]
 8007688:	68ba      	ldr	r2, [r7, #8]
 800768a:	0151      	lsls	r1, r2, #5
 800768c:	68fa      	ldr	r2, [r7, #12]
 800768e:	440a      	add	r2, r1
 8007690:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8007694:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8007698:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 800769a:	2300      	movs	r3, #0
}
 800769c:	4618      	mov	r0, r3
 800769e:	3714      	adds	r7, #20
 80076a0:	46bd      	mov	sp, r7
 80076a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80076a6:	4770      	bx	lr

080076a8 <USB_EPClearStall>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPClearStall(const USB_OTG_GlobalTypeDef *USBx, const USB_OTG_EPTypeDef *ep)
{
 80076a8:	b480      	push	{r7}
 80076aa:	b085      	sub	sp, #20
 80076ac:	af00      	add	r7, sp, #0
 80076ae:	6078      	str	r0, [r7, #4]
 80076b0:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80076b2:	687b      	ldr	r3, [r7, #4]
 80076b4:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 80076b6:	683b      	ldr	r3, [r7, #0]
 80076b8:	781b      	ldrb	r3, [r3, #0]
 80076ba:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 80076bc:	683b      	ldr	r3, [r7, #0]
 80076be:	785b      	ldrb	r3, [r3, #1]
 80076c0:	2b01      	cmp	r3, #1
 80076c2:	d128      	bne.n	8007716 <USB_EPClearStall+0x6e>
  {
    USBx_INEP(epnum)->DIEPCTL &= ~USB_OTG_DIEPCTL_STALL;
 80076c4:	68bb      	ldr	r3, [r7, #8]
 80076c6:	015a      	lsls	r2, r3, #5
 80076c8:	68fb      	ldr	r3, [r7, #12]
 80076ca:	4413      	add	r3, r2
 80076cc:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80076d0:	681b      	ldr	r3, [r3, #0]
 80076d2:	68ba      	ldr	r2, [r7, #8]
 80076d4:	0151      	lsls	r1, r2, #5
 80076d6:	68fa      	ldr	r2, [r7, #12]
 80076d8:	440a      	add	r2, r1
 80076da:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80076de:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 80076e2:	6013      	str	r3, [r2, #0]
    if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_BULK))
 80076e4:	683b      	ldr	r3, [r7, #0]
 80076e6:	791b      	ldrb	r3, [r3, #4]
 80076e8:	2b03      	cmp	r3, #3
 80076ea:	d003      	beq.n	80076f4 <USB_EPClearStall+0x4c>
 80076ec:	683b      	ldr	r3, [r7, #0]
 80076ee:	791b      	ldrb	r3, [r3, #4]
 80076f0:	2b02      	cmp	r3, #2
 80076f2:	d138      	bne.n	8007766 <USB_EPClearStall+0xbe>
    {
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM; /* DATA0 */
 80076f4:	68bb      	ldr	r3, [r7, #8]
 80076f6:	015a      	lsls	r2, r3, #5
 80076f8:	68fb      	ldr	r3, [r7, #12]
 80076fa:	4413      	add	r3, r2
 80076fc:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007700:	681b      	ldr	r3, [r3, #0]
 8007702:	68ba      	ldr	r2, [r7, #8]
 8007704:	0151      	lsls	r1, r2, #5
 8007706:	68fa      	ldr	r2, [r7, #12]
 8007708:	440a      	add	r2, r1
 800770a:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800770e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8007712:	6013      	str	r3, [r2, #0]
 8007714:	e027      	b.n	8007766 <USB_EPClearStall+0xbe>
    }
  }
  else
  {
    USBx_OUTEP(epnum)->DOEPCTL &= ~USB_OTG_DOEPCTL_STALL;
 8007716:	68bb      	ldr	r3, [r7, #8]
 8007718:	015a      	lsls	r2, r3, #5
 800771a:	68fb      	ldr	r3, [r7, #12]
 800771c:	4413      	add	r3, r2
 800771e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007722:	681b      	ldr	r3, [r3, #0]
 8007724:	68ba      	ldr	r2, [r7, #8]
 8007726:	0151      	lsls	r1, r2, #5
 8007728:	68fa      	ldr	r2, [r7, #12]
 800772a:	440a      	add	r2, r1
 800772c:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8007730:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8007734:	6013      	str	r3, [r2, #0]
    if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_BULK))
 8007736:	683b      	ldr	r3, [r7, #0]
 8007738:	791b      	ldrb	r3, [r3, #4]
 800773a:	2b03      	cmp	r3, #3
 800773c:	d003      	beq.n	8007746 <USB_EPClearStall+0x9e>
 800773e:	683b      	ldr	r3, [r7, #0]
 8007740:	791b      	ldrb	r3, [r3, #4]
 8007742:	2b02      	cmp	r3, #2
 8007744:	d10f      	bne.n	8007766 <USB_EPClearStall+0xbe>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SD0PID_SEVNFRM; /* DATA0 */
 8007746:	68bb      	ldr	r3, [r7, #8]
 8007748:	015a      	lsls	r2, r3, #5
 800774a:	68fb      	ldr	r3, [r7, #12]
 800774c:	4413      	add	r3, r2
 800774e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007752:	681b      	ldr	r3, [r3, #0]
 8007754:	68ba      	ldr	r2, [r7, #8]
 8007756:	0151      	lsls	r1, r2, #5
 8007758:	68fa      	ldr	r2, [r7, #12]
 800775a:	440a      	add	r2, r1
 800775c:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8007760:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8007764:	6013      	str	r3, [r2, #0]
    }
  }
  return HAL_OK;
 8007766:	2300      	movs	r3, #0
}
 8007768:	4618      	mov	r0, r3
 800776a:	3714      	adds	r7, #20
 800776c:	46bd      	mov	sp, r7
 800776e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007772:	4770      	bx	lr

08007774 <USB_SetDevAddress>:
  * @param  address  new device address to be assigned
  *          This parameter can be a value from 0 to 255
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetDevAddress(const USB_OTG_GlobalTypeDef *USBx, uint8_t address)
{
 8007774:	b480      	push	{r7}
 8007776:	b085      	sub	sp, #20
 8007778:	af00      	add	r7, sp, #0
 800777a:	6078      	str	r0, [r7, #4]
 800777c:	460b      	mov	r3, r1
 800777e:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8007780:	687b      	ldr	r3, [r7, #4]
 8007782:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG &= ~(USB_OTG_DCFG_DAD);
 8007784:	68fb      	ldr	r3, [r7, #12]
 8007786:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800778a:	681b      	ldr	r3, [r3, #0]
 800778c:	68fa      	ldr	r2, [r7, #12]
 800778e:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8007792:	f423 63fe 	bic.w	r3, r3, #2032	; 0x7f0
 8007796:	6013      	str	r3, [r2, #0]
  USBx_DEVICE->DCFG |= ((uint32_t)address << 4) & USB_OTG_DCFG_DAD;
 8007798:	68fb      	ldr	r3, [r7, #12]
 800779a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800779e:	681a      	ldr	r2, [r3, #0]
 80077a0:	78fb      	ldrb	r3, [r7, #3]
 80077a2:	011b      	lsls	r3, r3, #4
 80077a4:	f403 63fe 	and.w	r3, r3, #2032	; 0x7f0
 80077a8:	68f9      	ldr	r1, [r7, #12]
 80077aa:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 80077ae:	4313      	orrs	r3, r2
 80077b0:	600b      	str	r3, [r1, #0]

  return HAL_OK;
 80077b2:	2300      	movs	r3, #0
}
 80077b4:	4618      	mov	r0, r3
 80077b6:	3714      	adds	r7, #20
 80077b8:	46bd      	mov	sp, r7
 80077ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80077be:	4770      	bx	lr

080077c0 <USB_DevConnect>:
  * @brief  USB_DevConnect : Connect the USB device by enabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevConnect(const USB_OTG_GlobalTypeDef *USBx)
{
 80077c0:	b480      	push	{r7}
 80077c2:	b085      	sub	sp, #20
 80077c4:	af00      	add	r7, sp, #0
 80077c6:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80077c8:	687b      	ldr	r3, [r7, #4]
 80077ca:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 80077cc:	68fb      	ldr	r3, [r7, #12]
 80077ce:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 80077d2:	681b      	ldr	r3, [r3, #0]
 80077d4:	68fa      	ldr	r2, [r7, #12]
 80077d6:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 80077da:	f023 0303 	bic.w	r3, r3, #3
 80077de:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_SDIS;
 80077e0:	68fb      	ldr	r3, [r7, #12]
 80077e2:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80077e6:	685b      	ldr	r3, [r3, #4]
 80077e8:	68fa      	ldr	r2, [r7, #12]
 80077ea:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80077ee:	f023 0302 	bic.w	r3, r3, #2
 80077f2:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 80077f4:	2300      	movs	r3, #0
}
 80077f6:	4618      	mov	r0, r3
 80077f8:	3714      	adds	r7, #20
 80077fa:	46bd      	mov	sp, r7
 80077fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007800:	4770      	bx	lr

08007802 <USB_DevDisconnect>:
  * @brief  USB_DevDisconnect : Disconnect the USB device by disabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevDisconnect(const USB_OTG_GlobalTypeDef *USBx)
{
 8007802:	b480      	push	{r7}
 8007804:	b085      	sub	sp, #20
 8007806:	af00      	add	r7, sp, #0
 8007808:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800780a:	687b      	ldr	r3, [r7, #4]
 800780c:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 800780e:	68fb      	ldr	r3, [r7, #12]
 8007810:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8007814:	681b      	ldr	r3, [r3, #0]
 8007816:	68fa      	ldr	r2, [r7, #12]
 8007818:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 800781c:	f023 0303 	bic.w	r3, r3, #3
 8007820:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 8007822:	68fb      	ldr	r3, [r7, #12]
 8007824:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8007828:	685b      	ldr	r3, [r3, #4]
 800782a:	68fa      	ldr	r2, [r7, #12]
 800782c:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8007830:	f043 0302 	orr.w	r3, r3, #2
 8007834:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 8007836:	2300      	movs	r3, #0
}
 8007838:	4618      	mov	r0, r3
 800783a:	3714      	adds	r7, #20
 800783c:	46bd      	mov	sp, r7
 800783e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007842:	4770      	bx	lr

08007844 <USB_ReadInterrupts>:
  * @brief  USB_ReadInterrupts: return the global USB interrupt status
  * @param  USBx  Selected device
  * @retval USB Global Interrupt status
  */
uint32_t USB_ReadInterrupts(USB_OTG_GlobalTypeDef const *USBx)
{
 8007844:	b480      	push	{r7}
 8007846:	b085      	sub	sp, #20
 8007848:	af00      	add	r7, sp, #0
 800784a:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;

  tmpreg = USBx->GINTSTS;
 800784c:	687b      	ldr	r3, [r7, #4]
 800784e:	695b      	ldr	r3, [r3, #20]
 8007850:	60fb      	str	r3, [r7, #12]
  tmpreg &= USBx->GINTMSK;
 8007852:	687b      	ldr	r3, [r7, #4]
 8007854:	699b      	ldr	r3, [r3, #24]
 8007856:	68fa      	ldr	r2, [r7, #12]
 8007858:	4013      	ands	r3, r2
 800785a:	60fb      	str	r3, [r7, #12]

  return tmpreg;
 800785c:	68fb      	ldr	r3, [r7, #12]
}
 800785e:	4618      	mov	r0, r3
 8007860:	3714      	adds	r7, #20
 8007862:	46bd      	mov	sp, r7
 8007864:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007868:	4770      	bx	lr

0800786a <USB_ReadDevAllOutEpInterrupt>:
  * @brief  USB_ReadDevAllOutEpInterrupt: return the USB device OUT endpoints interrupt status
  * @param  USBx  Selected device
  * @retval USB Device OUT EP interrupt status
  */
uint32_t USB_ReadDevAllOutEpInterrupt(const USB_OTG_GlobalTypeDef *USBx)
{
 800786a:	b480      	push	{r7}
 800786c:	b085      	sub	sp, #20
 800786e:	af00      	add	r7, sp, #0
 8007870:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8007872:	687b      	ldr	r3, [r7, #4]
 8007874:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_DEVICE->DAINT;
 8007876:	68fb      	ldr	r3, [r7, #12]
 8007878:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800787c:	699b      	ldr	r3, [r3, #24]
 800787e:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DAINTMSK;
 8007880:	68fb      	ldr	r3, [r7, #12]
 8007882:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8007886:	69db      	ldr	r3, [r3, #28]
 8007888:	68ba      	ldr	r2, [r7, #8]
 800788a:	4013      	ands	r3, r2
 800788c:	60bb      	str	r3, [r7, #8]

  return ((tmpreg & 0xffff0000U) >> 16);
 800788e:	68bb      	ldr	r3, [r7, #8]
 8007890:	0c1b      	lsrs	r3, r3, #16
}
 8007892:	4618      	mov	r0, r3
 8007894:	3714      	adds	r7, #20
 8007896:	46bd      	mov	sp, r7
 8007898:	f85d 7b04 	ldr.w	r7, [sp], #4
 800789c:	4770      	bx	lr

0800789e <USB_ReadDevAllInEpInterrupt>:
  * @brief  USB_ReadDevAllInEpInterrupt: return the USB device IN endpoints interrupt status
  * @param  USBx  Selected device
  * @retval USB Device IN EP interrupt status
  */
uint32_t USB_ReadDevAllInEpInterrupt(const USB_OTG_GlobalTypeDef *USBx)
{
 800789e:	b480      	push	{r7}
 80078a0:	b085      	sub	sp, #20
 80078a2:	af00      	add	r7, sp, #0
 80078a4:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80078a6:	687b      	ldr	r3, [r7, #4]
 80078a8:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_DEVICE->DAINT;
 80078aa:	68fb      	ldr	r3, [r7, #12]
 80078ac:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80078b0:	699b      	ldr	r3, [r3, #24]
 80078b2:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DAINTMSK;
 80078b4:	68fb      	ldr	r3, [r7, #12]
 80078b6:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80078ba:	69db      	ldr	r3, [r3, #28]
 80078bc:	68ba      	ldr	r2, [r7, #8]
 80078be:	4013      	ands	r3, r2
 80078c0:	60bb      	str	r3, [r7, #8]

  return ((tmpreg & 0xFFFFU));
 80078c2:	68bb      	ldr	r3, [r7, #8]
 80078c4:	b29b      	uxth	r3, r3
}
 80078c6:	4618      	mov	r0, r3
 80078c8:	3714      	adds	r7, #20
 80078ca:	46bd      	mov	sp, r7
 80078cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80078d0:	4770      	bx	lr

080078d2 <USB_ReadDevOutEPInterrupt>:
  * @param  epnum  endpoint number
  *          This parameter can be a value from 0 to 15
  * @retval Device OUT EP Interrupt register
  */
uint32_t USB_ReadDevOutEPInterrupt(const USB_OTG_GlobalTypeDef *USBx, uint8_t epnum)
{
 80078d2:	b480      	push	{r7}
 80078d4:	b085      	sub	sp, #20
 80078d6:	af00      	add	r7, sp, #0
 80078d8:	6078      	str	r0, [r7, #4]
 80078da:	460b      	mov	r3, r1
 80078dc:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80078de:	687b      	ldr	r3, [r7, #4]
 80078e0:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_OUTEP((uint32_t)epnum)->DOEPINT;
 80078e2:	78fb      	ldrb	r3, [r7, #3]
 80078e4:	015a      	lsls	r2, r3, #5
 80078e6:	68fb      	ldr	r3, [r7, #12]
 80078e8:	4413      	add	r3, r2
 80078ea:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80078ee:	689b      	ldr	r3, [r3, #8]
 80078f0:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DOEPMSK;
 80078f2:	68fb      	ldr	r3, [r7, #12]
 80078f4:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80078f8:	695b      	ldr	r3, [r3, #20]
 80078fa:	68ba      	ldr	r2, [r7, #8]
 80078fc:	4013      	ands	r3, r2
 80078fe:	60bb      	str	r3, [r7, #8]

  return tmpreg;
 8007900:	68bb      	ldr	r3, [r7, #8]
}
 8007902:	4618      	mov	r0, r3
 8007904:	3714      	adds	r7, #20
 8007906:	46bd      	mov	sp, r7
 8007908:	f85d 7b04 	ldr.w	r7, [sp], #4
 800790c:	4770      	bx	lr

0800790e <USB_ReadDevInEPInterrupt>:
  * @param  epnum  endpoint number
  *          This parameter can be a value from 0 to 15
  * @retval Device IN EP Interrupt register
  */
uint32_t USB_ReadDevInEPInterrupt(const USB_OTG_GlobalTypeDef *USBx, uint8_t epnum)
{
 800790e:	b480      	push	{r7}
 8007910:	b087      	sub	sp, #28
 8007912:	af00      	add	r7, sp, #0
 8007914:	6078      	str	r0, [r7, #4]
 8007916:	460b      	mov	r3, r1
 8007918:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800791a:	687b      	ldr	r3, [r7, #4]
 800791c:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg;
  uint32_t msk;
  uint32_t emp;

  msk = USBx_DEVICE->DIEPMSK;
 800791e:	697b      	ldr	r3, [r7, #20]
 8007920:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8007924:	691b      	ldr	r3, [r3, #16]
 8007926:	613b      	str	r3, [r7, #16]
  emp = USBx_DEVICE->DIEPEMPMSK;
 8007928:	697b      	ldr	r3, [r7, #20]
 800792a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800792e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007930:	60fb      	str	r3, [r7, #12]
  msk |= ((emp >> (epnum & EP_ADDR_MSK)) & 0x1U) << 7;
 8007932:	78fb      	ldrb	r3, [r7, #3]
 8007934:	f003 030f 	and.w	r3, r3, #15
 8007938:	68fa      	ldr	r2, [r7, #12]
 800793a:	fa22 f303 	lsr.w	r3, r2, r3
 800793e:	01db      	lsls	r3, r3, #7
 8007940:	b2db      	uxtb	r3, r3
 8007942:	693a      	ldr	r2, [r7, #16]
 8007944:	4313      	orrs	r3, r2
 8007946:	613b      	str	r3, [r7, #16]
  tmpreg = USBx_INEP((uint32_t)epnum)->DIEPINT & msk;
 8007948:	78fb      	ldrb	r3, [r7, #3]
 800794a:	015a      	lsls	r2, r3, #5
 800794c:	697b      	ldr	r3, [r7, #20]
 800794e:	4413      	add	r3, r2
 8007950:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007954:	689b      	ldr	r3, [r3, #8]
 8007956:	693a      	ldr	r2, [r7, #16]
 8007958:	4013      	ands	r3, r2
 800795a:	60bb      	str	r3, [r7, #8]

  return tmpreg;
 800795c:	68bb      	ldr	r3, [r7, #8]
}
 800795e:	4618      	mov	r0, r3
 8007960:	371c      	adds	r7, #28
 8007962:	46bd      	mov	sp, r7
 8007964:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007968:	4770      	bx	lr

0800796a <USB_GetMode>:
  *          This parameter can be one of these values:
  *           0 : Host
  *           1 : Device
  */
uint32_t USB_GetMode(const USB_OTG_GlobalTypeDef *USBx)
{
 800796a:	b480      	push	{r7}
 800796c:	b083      	sub	sp, #12
 800796e:	af00      	add	r7, sp, #0
 8007970:	6078      	str	r0, [r7, #4]
  return ((USBx->GINTSTS) & 0x1U);
 8007972:	687b      	ldr	r3, [r7, #4]
 8007974:	695b      	ldr	r3, [r3, #20]
 8007976:	f003 0301 	and.w	r3, r3, #1
}
 800797a:	4618      	mov	r0, r3
 800797c:	370c      	adds	r7, #12
 800797e:	46bd      	mov	sp, r7
 8007980:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007984:	4770      	bx	lr

08007986 <USB_ActivateSetup>:
  * @brief  Activate EP0 for Setup transactions
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_ActivateSetup(const USB_OTG_GlobalTypeDef *USBx)
{
 8007986:	b480      	push	{r7}
 8007988:	b085      	sub	sp, #20
 800798a:	af00      	add	r7, sp, #0
 800798c:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800798e:	687b      	ldr	r3, [r7, #4]
 8007990:	60fb      	str	r3, [r7, #12]

  /* Set the MPS of the IN EP0 to 64 bytes */
  USBx_INEP(0U)->DIEPCTL &= ~USB_OTG_DIEPCTL_MPSIZ;
 8007992:	68fb      	ldr	r3, [r7, #12]
 8007994:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007998:	681b      	ldr	r3, [r3, #0]
 800799a:	68fa      	ldr	r2, [r7, #12]
 800799c:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80079a0:	f423 63ff 	bic.w	r3, r3, #2040	; 0x7f8
 80079a4:	f023 0307 	bic.w	r3, r3, #7
 80079a8:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_CGINAK;
 80079aa:	68fb      	ldr	r3, [r7, #12]
 80079ac:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80079b0:	685b      	ldr	r3, [r3, #4]
 80079b2:	68fa      	ldr	r2, [r7, #12]
 80079b4:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80079b8:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80079bc:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 80079be:	2300      	movs	r3, #0
}
 80079c0:	4618      	mov	r0, r3
 80079c2:	3714      	adds	r7, #20
 80079c4:	46bd      	mov	sp, r7
 80079c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80079ca:	4770      	bx	lr

080079cc <USB_EP0_OutStart>:
  *           1 : DMA feature used
  * @param  psetup  pointer to setup packet
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EP0_OutStart(const USB_OTG_GlobalTypeDef *USBx, uint8_t dma, const uint8_t *psetup)
{
 80079cc:	b480      	push	{r7}
 80079ce:	b087      	sub	sp, #28
 80079d0:	af00      	add	r7, sp, #0
 80079d2:	60f8      	str	r0, [r7, #12]
 80079d4:	460b      	mov	r3, r1
 80079d6:	607a      	str	r2, [r7, #4]
 80079d8:	72fb      	strb	r3, [r7, #11]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80079da:	68fb      	ldr	r3, [r7, #12]
 80079dc:	617b      	str	r3, [r7, #20]
  uint32_t gSNPSiD = *(__IO const uint32_t *)(&USBx->CID + 0x1U);
 80079de:	68fb      	ldr	r3, [r7, #12]
 80079e0:	333c      	adds	r3, #60	; 0x3c
 80079e2:	3304      	adds	r3, #4
 80079e4:	681b      	ldr	r3, [r3, #0]
 80079e6:	613b      	str	r3, [r7, #16]

  if (gSNPSiD > USB_OTG_CORE_ID_300A)
 80079e8:	693b      	ldr	r3, [r7, #16]
 80079ea:	4a26      	ldr	r2, [pc, #152]	; (8007a84 <USB_EP0_OutStart+0xb8>)
 80079ec:	4293      	cmp	r3, r2
 80079ee:	d90a      	bls.n	8007a06 <USB_EP0_OutStart+0x3a>
  {
    if ((USBx_OUTEP(0U)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 80079f0:	697b      	ldr	r3, [r7, #20]
 80079f2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80079f6:	681b      	ldr	r3, [r3, #0]
 80079f8:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 80079fc:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8007a00:	d101      	bne.n	8007a06 <USB_EP0_OutStart+0x3a>
    {
      return HAL_OK;
 8007a02:	2300      	movs	r3, #0
 8007a04:	e037      	b.n	8007a76 <USB_EP0_OutStart+0xaa>
    }
  }

  USBx_OUTEP(0U)->DOEPTSIZ = 0U;
 8007a06:	697b      	ldr	r3, [r7, #20]
 8007a08:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007a0c:	461a      	mov	r2, r3
 8007a0e:	2300      	movs	r3, #0
 8007a10:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 8007a12:	697b      	ldr	r3, [r7, #20]
 8007a14:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007a18:	691b      	ldr	r3, [r3, #16]
 8007a1a:	697a      	ldr	r2, [r7, #20]
 8007a1c:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8007a20:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8007a24:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |= (3U * 8U);
 8007a26:	697b      	ldr	r3, [r7, #20]
 8007a28:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007a2c:	691b      	ldr	r3, [r3, #16]
 8007a2e:	697a      	ldr	r2, [r7, #20]
 8007a30:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8007a34:	f043 0318 	orr.w	r3, r3, #24
 8007a38:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |=  USB_OTG_DOEPTSIZ_STUPCNT;
 8007a3a:	697b      	ldr	r3, [r7, #20]
 8007a3c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007a40:	691b      	ldr	r3, [r3, #16]
 8007a42:	697a      	ldr	r2, [r7, #20]
 8007a44:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8007a48:	f043 43c0 	orr.w	r3, r3, #1610612736	; 0x60000000
 8007a4c:	6113      	str	r3, [r2, #16]

  if (dma == 1U)
 8007a4e:	7afb      	ldrb	r3, [r7, #11]
 8007a50:	2b01      	cmp	r3, #1
 8007a52:	d10f      	bne.n	8007a74 <USB_EP0_OutStart+0xa8>
  {
    USBx_OUTEP(0U)->DOEPDMA = (uint32_t)psetup;
 8007a54:	697b      	ldr	r3, [r7, #20]
 8007a56:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007a5a:	461a      	mov	r2, r3
 8007a5c:	687b      	ldr	r3, [r7, #4]
 8007a5e:	6153      	str	r3, [r2, #20]
    /* EP enable */
    USBx_OUTEP(0U)->DOEPCTL |= USB_OTG_DOEPCTL_EPENA | USB_OTG_DOEPCTL_USBAEP;
 8007a60:	697b      	ldr	r3, [r7, #20]
 8007a62:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007a66:	681b      	ldr	r3, [r3, #0]
 8007a68:	697a      	ldr	r2, [r7, #20]
 8007a6a:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8007a6e:	f043 2380 	orr.w	r3, r3, #2147516416	; 0x80008000
 8007a72:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 8007a74:	2300      	movs	r3, #0
}
 8007a76:	4618      	mov	r0, r3
 8007a78:	371c      	adds	r7, #28
 8007a7a:	46bd      	mov	sp, r7
 8007a7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007a80:	4770      	bx	lr
 8007a82:	bf00      	nop
 8007a84:	4f54300a 	.word	0x4f54300a

08007a88 <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 8007a88:	b480      	push	{r7}
 8007a8a:	b085      	sub	sp, #20
 8007a8c:	af00      	add	r7, sp, #0
 8007a8e:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8007a90:	2300      	movs	r3, #0
 8007a92:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8007a94:	68fb      	ldr	r3, [r7, #12]
 8007a96:	3301      	adds	r3, #1
 8007a98:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 8007a9a:	68fb      	ldr	r3, [r7, #12]
 8007a9c:	f1b3 6f70 	cmp.w	r3, #251658240	; 0xf000000
 8007aa0:	d901      	bls.n	8007aa6 <USB_CoreReset+0x1e>
    {
      return HAL_TIMEOUT;
 8007aa2:	2303      	movs	r3, #3
 8007aa4:	e01b      	b.n	8007ade <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8007aa6:	687b      	ldr	r3, [r7, #4]
 8007aa8:	691b      	ldr	r3, [r3, #16]
 8007aaa:	2b00      	cmp	r3, #0
 8007aac:	daf2      	bge.n	8007a94 <USB_CoreReset+0xc>

  /* Core Soft Reset */
  count = 0U;
 8007aae:	2300      	movs	r3, #0
 8007ab0:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 8007ab2:	687b      	ldr	r3, [r7, #4]
 8007ab4:	691b      	ldr	r3, [r3, #16]
 8007ab6:	f043 0201 	orr.w	r2, r3, #1
 8007aba:	687b      	ldr	r3, [r7, #4]
 8007abc:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8007abe:	68fb      	ldr	r3, [r7, #12]
 8007ac0:	3301      	adds	r3, #1
 8007ac2:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 8007ac4:	68fb      	ldr	r3, [r7, #12]
 8007ac6:	f1b3 6f70 	cmp.w	r3, #251658240	; 0xf000000
 8007aca:	d901      	bls.n	8007ad0 <USB_CoreReset+0x48>
    {
      return HAL_TIMEOUT;
 8007acc:	2303      	movs	r3, #3
 8007ace:	e006      	b.n	8007ade <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 8007ad0:	687b      	ldr	r3, [r7, #4]
 8007ad2:	691b      	ldr	r3, [r3, #16]
 8007ad4:	f003 0301 	and.w	r3, r3, #1
 8007ad8:	2b01      	cmp	r3, #1
 8007ada:	d0f0      	beq.n	8007abe <USB_CoreReset+0x36>

  return HAL_OK;
 8007adc:	2300      	movs	r3, #0
}
 8007ade:	4618      	mov	r0, r3
 8007ae0:	3714      	adds	r7, #20
 8007ae2:	46bd      	mov	sp, r7
 8007ae4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007ae8:	4770      	bx	lr
	...

08007aec <MX_LWIP_Init>:

/**
  * LwIP initialization function
  */
void MX_LWIP_Init(void)
{
 8007aec:	b580      	push	{r7, lr}
 8007aee:	b084      	sub	sp, #16
 8007af0:	af04      	add	r7, sp, #16
  /* Initilialize the LwIP stack without RTOS */
  lwip_init();
 8007af2:	f002 fee8 	bl	800a8c6 <lwip_init>

  /* IP addresses initialization with DHCP (IPv4) */
  ipaddr.addr = 0;
 8007af6:	4b12      	ldr	r3, [pc, #72]	; (8007b40 <MX_LWIP_Init+0x54>)
 8007af8:	2200      	movs	r2, #0
 8007afa:	601a      	str	r2, [r3, #0]
  netmask.addr = 0;
 8007afc:	4b11      	ldr	r3, [pc, #68]	; (8007b44 <MX_LWIP_Init+0x58>)
 8007afe:	2200      	movs	r2, #0
 8007b00:	601a      	str	r2, [r3, #0]
  gw.addr = 0;
 8007b02:	4b11      	ldr	r3, [pc, #68]	; (8007b48 <MX_LWIP_Init+0x5c>)
 8007b04:	2200      	movs	r2, #0
 8007b06:	601a      	str	r2, [r3, #0]

  /* add the network interface (IPv4/IPv6) without RTOS */
  netif_add(&gnetif, &ipaddr, &netmask, &gw, NULL, &ethernetif_init, &ethernet_input);
 8007b08:	4b10      	ldr	r3, [pc, #64]	; (8007b4c <MX_LWIP_Init+0x60>)
 8007b0a:	9302      	str	r3, [sp, #8]
 8007b0c:	4b10      	ldr	r3, [pc, #64]	; (8007b50 <MX_LWIP_Init+0x64>)
 8007b0e:	9301      	str	r3, [sp, #4]
 8007b10:	2300      	movs	r3, #0
 8007b12:	9300      	str	r3, [sp, #0]
 8007b14:	4b0c      	ldr	r3, [pc, #48]	; (8007b48 <MX_LWIP_Init+0x5c>)
 8007b16:	4a0b      	ldr	r2, [pc, #44]	; (8007b44 <MX_LWIP_Init+0x58>)
 8007b18:	4909      	ldr	r1, [pc, #36]	; (8007b40 <MX_LWIP_Init+0x54>)
 8007b1a:	480e      	ldr	r0, [pc, #56]	; (8007b54 <MX_LWIP_Init+0x68>)
 8007b1c:	f003 fbc0 	bl	800b2a0 <netif_add>

  /* Registers the default network interface */
  netif_set_default(&gnetif);
 8007b20:	480c      	ldr	r0, [pc, #48]	; (8007b54 <MX_LWIP_Init+0x68>)
 8007b22:	f003 fd77 	bl	800b614 <netif_set_default>

  /* We must always bring the network interface up connection or not... */
  netif_set_up(&gnetif);
 8007b26:	480b      	ldr	r0, [pc, #44]	; (8007b54 <MX_LWIP_Init+0x68>)
 8007b28:	f003 fd84 	bl	800b634 <netif_set_up>

  /* Set the link callback function, this function is called on change of link status*/
  netif_set_link_callback(&gnetif, ethernet_link_status_updated);
 8007b2c:	490a      	ldr	r1, [pc, #40]	; (8007b58 <MX_LWIP_Init+0x6c>)
 8007b2e:	4809      	ldr	r0, [pc, #36]	; (8007b54 <MX_LWIP_Init+0x68>)
 8007b30:	f003 fe86 	bl	800b840 <netif_set_link_callback>

  /* Create the Ethernet link handler thread */

  /* Start DHCP negotiation for a network interface (IPv4) */
  dhcp_start(&gnetif);
 8007b34:	4807      	ldr	r0, [pc, #28]	; (8007b54 <MX_LWIP_Init+0x68>)
 8007b36:	f00b ffbb 	bl	8013ab0 <dhcp_start>

/* USER CODE BEGIN 3 */

/* USER CODE END 3 */
}
 8007b3a:	bf00      	nop
 8007b3c:	46bd      	mov	sp, r7
 8007b3e:	bd80      	pop	{r7, pc}
 8007b40:	20000310 	.word	0x20000310
 8007b44:	20000314 	.word	0x20000314
 8007b48:	20000318 	.word	0x20000318
 8007b4c:	08017561 	.word	0x08017561
 8007b50:	08007e69 	.word	0x08007e69
 8007b54:	200002d8 	.word	0x200002d8
 8007b58:	08007bad 	.word	0x08007bad

08007b5c <Ethernet_Link_Periodic_Handle>:
  * @brief  Ethernet Link periodic check
  * @param  netif
  * @retval None
  */
static void Ethernet_Link_Periodic_Handle(struct netif *netif)
{
 8007b5c:	b580      	push	{r7, lr}
 8007b5e:	b082      	sub	sp, #8
 8007b60:	af00      	add	r7, sp, #0
 8007b62:	6078      	str	r0, [r7, #4]
/* USER CODE BEGIN 4_4_1 */
/* USER CODE END 4_4_1 */

  /* Ethernet Link every 100ms */
  if (HAL_GetTick() - EthernetLinkTimer >= 100)
 8007b64:	f7f9 fd58 	bl	8001618 <HAL_GetTick>
 8007b68:	4602      	mov	r2, r0
 8007b6a:	4b08      	ldr	r3, [pc, #32]	; (8007b8c <Ethernet_Link_Periodic_Handle+0x30>)
 8007b6c:	681b      	ldr	r3, [r3, #0]
 8007b6e:	1ad3      	subs	r3, r2, r3
 8007b70:	2b63      	cmp	r3, #99	; 0x63
 8007b72:	d907      	bls.n	8007b84 <Ethernet_Link_Periodic_Handle+0x28>
  {
    EthernetLinkTimer = HAL_GetTick();
 8007b74:	f7f9 fd50 	bl	8001618 <HAL_GetTick>
 8007b78:	4603      	mov	r3, r0
 8007b7a:	4a04      	ldr	r2, [pc, #16]	; (8007b8c <Ethernet_Link_Periodic_Handle+0x30>)
 8007b7c:	6013      	str	r3, [r2, #0]
    ethernet_link_check_state(netif);
 8007b7e:	6878      	ldr	r0, [r7, #4]
 8007b80:	f000 fab6 	bl	80080f0 <ethernet_link_check_state>
  }
/* USER CODE BEGIN 4_4 */
/* USER CODE END 4_4 */
}
 8007b84:	bf00      	nop
 8007b86:	3708      	adds	r7, #8
 8007b88:	46bd      	mov	sp, r7
 8007b8a:	bd80      	pop	{r7, pc}
 8007b8c:	200002d4 	.word	0x200002d4

08007b90 <MX_LWIP_Process>:
 * Send it to the lwIP stack for handling
 * Handle timeouts if LWIP_TIMERS is set and without RTOS
 * Handle the llink status if LWIP_NETIF_LINK_CALLBACK is set and without RTOS
 */
void MX_LWIP_Process(void)
{
 8007b90:	b580      	push	{r7, lr}
 8007b92:	af00      	add	r7, sp, #0
/* USER CODE BEGIN 4_1 */
/* USER CODE END 4_1 */
  ethernetif_input(&gnetif);
 8007b94:	4804      	ldr	r0, [pc, #16]	; (8007ba8 <MX_LWIP_Process+0x18>)
 8007b96:	f000 f947 	bl	8007e28 <ethernetif_input>

/* USER CODE BEGIN 4_2 */
/* USER CODE END 4_2 */
  /* Handle timeouts */
  sys_check_timeouts();
 8007b9a:	f00a fe93 	bl	80128c4 <sys_check_timeouts>

  Ethernet_Link_Periodic_Handle(&gnetif);
 8007b9e:	4802      	ldr	r0, [pc, #8]	; (8007ba8 <MX_LWIP_Process+0x18>)
 8007ba0:	f7ff ffdc 	bl	8007b5c <Ethernet_Link_Periodic_Handle>

/* USER CODE BEGIN 4_3 */
/* USER CODE END 4_3 */
}
 8007ba4:	bf00      	nop
 8007ba6:	bd80      	pop	{r7, pc}
 8007ba8:	200002d8 	.word	0x200002d8

08007bac <ethernet_link_status_updated>:
  * @brief  Notify the User about the network interface config status
  * @param  netif: the network interface
  * @retval None
  */
static void ethernet_link_status_updated(struct netif *netif)
{
 8007bac:	b480      	push	{r7}
 8007bae:	b083      	sub	sp, #12
 8007bb0:	af00      	add	r7, sp, #0
 8007bb2:	6078      	str	r0, [r7, #4]
  else /* netif is down */
  {
/* USER CODE BEGIN 6 */
/* USER CODE END 6 */
  }
}
 8007bb4:	bf00      	nop
 8007bb6:	370c      	adds	r7, #12
 8007bb8:	46bd      	mov	sp, r7
 8007bba:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007bbe:	4770      	bx	lr

08007bc0 <low_level_init>:
 *
 * @param netif the already initialized lwip network interface structure
 *        for this ethernetif
 */
static void low_level_init(struct netif *netif)
{
 8007bc0:	b580      	push	{r7, lr}
 8007bc2:	b084      	sub	sp, #16
 8007bc4:	af00      	add	r7, sp, #0
 8007bc6:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_eth_init_status = HAL_OK;
 8007bc8:	2300      	movs	r3, #0
 8007bca:	73fb      	strb	r3, [r7, #15]
  /* Start ETH HAL Init */

   uint8_t MACAddr[6] ;
  heth.Instance = ETH;
 8007bcc:	4b40      	ldr	r3, [pc, #256]	; (8007cd0 <low_level_init+0x110>)
 8007bce:	4a41      	ldr	r2, [pc, #260]	; (8007cd4 <low_level_init+0x114>)
 8007bd0:	601a      	str	r2, [r3, #0]
  MACAddr[0] = 0x00;
 8007bd2:	2300      	movs	r3, #0
 8007bd4:	723b      	strb	r3, [r7, #8]
  MACAddr[1] = 0x80;
 8007bd6:	2380      	movs	r3, #128	; 0x80
 8007bd8:	727b      	strb	r3, [r7, #9]
  MACAddr[2] = 0xE1;
 8007bda:	23e1      	movs	r3, #225	; 0xe1
 8007bdc:	72bb      	strb	r3, [r7, #10]
  MACAddr[3] = 0x00;
 8007bde:	2300      	movs	r3, #0
 8007be0:	72fb      	strb	r3, [r7, #11]
  MACAddr[4] = 0x00;
 8007be2:	2300      	movs	r3, #0
 8007be4:	733b      	strb	r3, [r7, #12]
  MACAddr[5] = 0x00;
 8007be6:	2300      	movs	r3, #0
 8007be8:	737b      	strb	r3, [r7, #13]
  heth.Init.MACAddr = &MACAddr[0];
 8007bea:	4a39      	ldr	r2, [pc, #228]	; (8007cd0 <low_level_init+0x110>)
 8007bec:	f107 0308 	add.w	r3, r7, #8
 8007bf0:	6053      	str	r3, [r2, #4]
  heth.Init.MediaInterface = HAL_ETH_RMII_MODE;
 8007bf2:	4b37      	ldr	r3, [pc, #220]	; (8007cd0 <low_level_init+0x110>)
 8007bf4:	f44f 0200 	mov.w	r2, #8388608	; 0x800000
 8007bf8:	609a      	str	r2, [r3, #8]
  heth.Init.TxDesc = DMATxDscrTab;
 8007bfa:	4b35      	ldr	r3, [pc, #212]	; (8007cd0 <low_level_init+0x110>)
 8007bfc:	4a36      	ldr	r2, [pc, #216]	; (8007cd8 <low_level_init+0x118>)
 8007bfe:	60da      	str	r2, [r3, #12]
  heth.Init.RxDesc = DMARxDscrTab;
 8007c00:	4b33      	ldr	r3, [pc, #204]	; (8007cd0 <low_level_init+0x110>)
 8007c02:	4a36      	ldr	r2, [pc, #216]	; (8007cdc <low_level_init+0x11c>)
 8007c04:	611a      	str	r2, [r3, #16]
  heth.Init.RxBuffLen = 1536;
 8007c06:	4b32      	ldr	r3, [pc, #200]	; (8007cd0 <low_level_init+0x110>)
 8007c08:	f44f 62c0 	mov.w	r2, #1536	; 0x600
 8007c0c:	615a      	str	r2, [r3, #20]

  /* USER CODE BEGIN MACADDRESS */

  /* USER CODE END MACADDRESS */

  hal_eth_init_status = HAL_ETH_Init(&heth);
 8007c0e:	4830      	ldr	r0, [pc, #192]	; (8007cd0 <low_level_init+0x110>)
 8007c10:	f7fa fa46 	bl	80020a0 <HAL_ETH_Init>
 8007c14:	4603      	mov	r3, r0
 8007c16:	73fb      	strb	r3, [r7, #15]

  memset(&TxConfig, 0 , sizeof(ETH_TxPacketConfig));
 8007c18:	2238      	movs	r2, #56	; 0x38
 8007c1a:	2100      	movs	r1, #0
 8007c1c:	4830      	ldr	r0, [pc, #192]	; (8007ce0 <low_level_init+0x120>)
 8007c1e:	f010 fc98 	bl	8018552 <memset>
  TxConfig.Attributes = ETH_TX_PACKETS_FEATURES_CSUM | ETH_TX_PACKETS_FEATURES_CRCPAD;
 8007c22:	4b2f      	ldr	r3, [pc, #188]	; (8007ce0 <low_level_init+0x120>)
 8007c24:	2221      	movs	r2, #33	; 0x21
 8007c26:	601a      	str	r2, [r3, #0]
  TxConfig.ChecksumCtrl = ETH_CHECKSUM_IPHDR_PAYLOAD_INSERT_PHDR_CALC;
 8007c28:	4b2d      	ldr	r3, [pc, #180]	; (8007ce0 <low_level_init+0x120>)
 8007c2a:	f44f 0240 	mov.w	r2, #12582912	; 0xc00000
 8007c2e:	615a      	str	r2, [r3, #20]
  TxConfig.CRCPadCtrl = ETH_CRC_PAD_INSERT;
 8007c30:	4b2b      	ldr	r3, [pc, #172]	; (8007ce0 <low_level_init+0x120>)
 8007c32:	2200      	movs	r2, #0
 8007c34:	611a      	str	r2, [r3, #16]

  /* End ETH HAL Init */

  /* Initialize the RX POOL */
  LWIP_MEMPOOL_INIT(RX_POOL);
 8007c36:	482b      	ldr	r0, [pc, #172]	; (8007ce4 <low_level_init+0x124>)
 8007c38:	f003 f9fa 	bl	800b030 <memp_init_pool>

#if LWIP_ARP || LWIP_ETHERNET

  /* set MAC hardware address length */
  netif->hwaddr_len = ETH_HWADDR_LEN;
 8007c3c:	687b      	ldr	r3, [r7, #4]
 8007c3e:	2206      	movs	r2, #6
 8007c40:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30

  /* set MAC hardware address */
  netif->hwaddr[0] =  heth.Init.MACAddr[0];
 8007c44:	4b22      	ldr	r3, [pc, #136]	; (8007cd0 <low_level_init+0x110>)
 8007c46:	685b      	ldr	r3, [r3, #4]
 8007c48:	781a      	ldrb	r2, [r3, #0]
 8007c4a:	687b      	ldr	r3, [r7, #4]
 8007c4c:	f883 202a 	strb.w	r2, [r3, #42]	; 0x2a
  netif->hwaddr[1] =  heth.Init.MACAddr[1];
 8007c50:	4b1f      	ldr	r3, [pc, #124]	; (8007cd0 <low_level_init+0x110>)
 8007c52:	685b      	ldr	r3, [r3, #4]
 8007c54:	785a      	ldrb	r2, [r3, #1]
 8007c56:	687b      	ldr	r3, [r7, #4]
 8007c58:	f883 202b 	strb.w	r2, [r3, #43]	; 0x2b
  netif->hwaddr[2] =  heth.Init.MACAddr[2];
 8007c5c:	4b1c      	ldr	r3, [pc, #112]	; (8007cd0 <low_level_init+0x110>)
 8007c5e:	685b      	ldr	r3, [r3, #4]
 8007c60:	789a      	ldrb	r2, [r3, #2]
 8007c62:	687b      	ldr	r3, [r7, #4]
 8007c64:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c
  netif->hwaddr[3] =  heth.Init.MACAddr[3];
 8007c68:	4b19      	ldr	r3, [pc, #100]	; (8007cd0 <low_level_init+0x110>)
 8007c6a:	685b      	ldr	r3, [r3, #4]
 8007c6c:	78da      	ldrb	r2, [r3, #3]
 8007c6e:	687b      	ldr	r3, [r7, #4]
 8007c70:	f883 202d 	strb.w	r2, [r3, #45]	; 0x2d
  netif->hwaddr[4] =  heth.Init.MACAddr[4];
 8007c74:	4b16      	ldr	r3, [pc, #88]	; (8007cd0 <low_level_init+0x110>)
 8007c76:	685b      	ldr	r3, [r3, #4]
 8007c78:	791a      	ldrb	r2, [r3, #4]
 8007c7a:	687b      	ldr	r3, [r7, #4]
 8007c7c:	f883 202e 	strb.w	r2, [r3, #46]	; 0x2e
  netif->hwaddr[5] =  heth.Init.MACAddr[5];
 8007c80:	4b13      	ldr	r3, [pc, #76]	; (8007cd0 <low_level_init+0x110>)
 8007c82:	685b      	ldr	r3, [r3, #4]
 8007c84:	795a      	ldrb	r2, [r3, #5]
 8007c86:	687b      	ldr	r3, [r7, #4]
 8007c88:	f883 202f 	strb.w	r2, [r3, #47]	; 0x2f

  /* maximum transfer unit */
  netif->mtu = ETH_MAX_PAYLOAD;
 8007c8c:	687b      	ldr	r3, [r7, #4]
 8007c8e:	f240 52dc 	movw	r2, #1500	; 0x5dc
 8007c92:	851a      	strh	r2, [r3, #40]	; 0x28

  /* Accept broadcast address and ARP traffic */
  /* don't set NETIF_FLAG_ETHARP if this device is not an ethernet one */
  #if LWIP_ARP
    netif->flags |= NETIF_FLAG_BROADCAST | NETIF_FLAG_ETHARP;
 8007c94:	687b      	ldr	r3, [r7, #4]
 8007c96:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 8007c9a:	f043 030a 	orr.w	r3, r3, #10
 8007c9e:	b2da      	uxtb	r2, r3
 8007ca0:	687b      	ldr	r3, [r7, #4]
 8007ca2:	f883 2031 	strb.w	r2, [r3, #49]	; 0x31

/* USER CODE BEGIN PHY_PRE_CONFIG */

/* USER CODE END PHY_PRE_CONFIG */
  /* Set PHY IO functions */
  DP83848_RegisterBusIO(&DP83848, &DP83848_IOCtx);
 8007ca6:	4910      	ldr	r1, [pc, #64]	; (8007ce8 <low_level_init+0x128>)
 8007ca8:	4810      	ldr	r0, [pc, #64]	; (8007cec <low_level_init+0x12c>)
 8007caa:	f7f9 fb48 	bl	800133e <DP83848_RegisterBusIO>

  /* Initialize the DP83848 ETH PHY */
  DP83848_Init(&DP83848);
 8007cae:	480f      	ldr	r0, [pc, #60]	; (8007cec <low_level_init+0x12c>)
 8007cb0:	f7f9 fb77 	bl	80013a2 <DP83848_Init>

  if (hal_eth_init_status == HAL_OK)
 8007cb4:	7bfb      	ldrb	r3, [r7, #15]
 8007cb6:	2b00      	cmp	r3, #0
 8007cb8:	d103      	bne.n	8007cc2 <low_level_init+0x102>
  {
  /* Get link state */
  ethernet_link_check_state(netif);
 8007cba:	6878      	ldr	r0, [r7, #4]
 8007cbc:	f000 fa18 	bl	80080f0 <ethernet_link_check_state>
#endif /* LWIP_ARP || LWIP_ETHERNET */

/* USER CODE BEGIN LOW_LEVEL_INIT */

/* USER CODE END LOW_LEVEL_INIT */
}
 8007cc0:	e001      	b.n	8007cc6 <low_level_init+0x106>
    Error_Handler();
 8007cc2:	f7f8 fd87 	bl	80007d4 <Error_Handler>
}
 8007cc6:	bf00      	nop
 8007cc8:	3710      	adds	r7, #16
 8007cca:	46bd      	mov	sp, r7
 8007ccc:	bd80      	pop	{r7, pc}
 8007cce:	bf00      	nop
 8007cd0:	20004de8 	.word	0x20004de8
 8007cd4:	40028000 	.word	0x40028000
 8007cd8:	20004d48 	.word	0x20004d48
 8007cdc:	20004ca8 	.word	0x20004ca8
 8007ce0:	20004e98 	.word	0x20004e98
 8007ce4:	0801c1d0 	.word	0x0801c1d0
 8007ce8:	2000000c 	.word	0x2000000c
 8007cec:	20004ed0 	.word	0x20004ed0

08007cf0 <low_level_output>:
 *       to become available since the stack doesn't retry to send a packet
 *       dropped because of memory failure (except for the TCP timers).
 */

static err_t low_level_output(struct netif *netif, struct pbuf *p)
{
 8007cf0:	b580      	push	{r7, lr}
 8007cf2:	b092      	sub	sp, #72	; 0x48
 8007cf4:	af00      	add	r7, sp, #0
 8007cf6:	6078      	str	r0, [r7, #4]
 8007cf8:	6039      	str	r1, [r7, #0]
  uint32_t i = 0U;
 8007cfa:	2300      	movs	r3, #0
 8007cfc:	647b      	str	r3, [r7, #68]	; 0x44
  struct pbuf *q = NULL;
 8007cfe:	2300      	movs	r3, #0
 8007d00:	643b      	str	r3, [r7, #64]	; 0x40
  err_t errval = ERR_OK;
 8007d02:	2300      	movs	r3, #0
 8007d04:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
  ETH_BufferTypeDef Txbuffer[ETH_TX_DESC_CNT] = {0};
 8007d08:	f107 030c 	add.w	r3, r7, #12
 8007d0c:	2230      	movs	r2, #48	; 0x30
 8007d0e:	2100      	movs	r1, #0
 8007d10:	4618      	mov	r0, r3
 8007d12:	f010 fc1e 	bl	8018552 <memset>

  memset(Txbuffer, 0 , ETH_TX_DESC_CNT*sizeof(ETH_BufferTypeDef));
 8007d16:	f107 030c 	add.w	r3, r7, #12
 8007d1a:	2230      	movs	r2, #48	; 0x30
 8007d1c:	2100      	movs	r1, #0
 8007d1e:	4618      	mov	r0, r3
 8007d20:	f010 fc17 	bl	8018552 <memset>

  for(q = p; q != NULL; q = q->next)
 8007d24:	683b      	ldr	r3, [r7, #0]
 8007d26:	643b      	str	r3, [r7, #64]	; 0x40
 8007d28:	e045      	b.n	8007db6 <low_level_output+0xc6>
  {
    if(i >= ETH_TX_DESC_CNT)
 8007d2a:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8007d2c:	2b03      	cmp	r3, #3
 8007d2e:	d902      	bls.n	8007d36 <low_level_output+0x46>
      return ERR_IF;
 8007d30:	f06f 030b 	mvn.w	r3, #11
 8007d34:	e055      	b.n	8007de2 <low_level_output+0xf2>

    Txbuffer[i].buffer = q->payload;
 8007d36:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8007d38:	6859      	ldr	r1, [r3, #4]
 8007d3a:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8007d3c:	4613      	mov	r3, r2
 8007d3e:	005b      	lsls	r3, r3, #1
 8007d40:	4413      	add	r3, r2
 8007d42:	009b      	lsls	r3, r3, #2
 8007d44:	3348      	adds	r3, #72	; 0x48
 8007d46:	443b      	add	r3, r7
 8007d48:	3b3c      	subs	r3, #60	; 0x3c
 8007d4a:	6019      	str	r1, [r3, #0]
    Txbuffer[i].len = q->len;
 8007d4c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8007d4e:	895b      	ldrh	r3, [r3, #10]
 8007d50:	4619      	mov	r1, r3
 8007d52:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8007d54:	4613      	mov	r3, r2
 8007d56:	005b      	lsls	r3, r3, #1
 8007d58:	4413      	add	r3, r2
 8007d5a:	009b      	lsls	r3, r3, #2
 8007d5c:	3348      	adds	r3, #72	; 0x48
 8007d5e:	443b      	add	r3, r7
 8007d60:	3b38      	subs	r3, #56	; 0x38
 8007d62:	6019      	str	r1, [r3, #0]

    if(i>0)
 8007d64:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8007d66:	2b00      	cmp	r3, #0
 8007d68:	d011      	beq.n	8007d8e <low_level_output+0x9e>
    {
      Txbuffer[i-1].next = &Txbuffer[i];
 8007d6a:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8007d6c:	1e5a      	subs	r2, r3, #1
 8007d6e:	f107 000c 	add.w	r0, r7, #12
 8007d72:	6c79      	ldr	r1, [r7, #68]	; 0x44
 8007d74:	460b      	mov	r3, r1
 8007d76:	005b      	lsls	r3, r3, #1
 8007d78:	440b      	add	r3, r1
 8007d7a:	009b      	lsls	r3, r3, #2
 8007d7c:	18c1      	adds	r1, r0, r3
 8007d7e:	4613      	mov	r3, r2
 8007d80:	005b      	lsls	r3, r3, #1
 8007d82:	4413      	add	r3, r2
 8007d84:	009b      	lsls	r3, r3, #2
 8007d86:	3348      	adds	r3, #72	; 0x48
 8007d88:	443b      	add	r3, r7
 8007d8a:	3b34      	subs	r3, #52	; 0x34
 8007d8c:	6019      	str	r1, [r3, #0]
    }

    if(q->next == NULL)
 8007d8e:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8007d90:	681b      	ldr	r3, [r3, #0]
 8007d92:	2b00      	cmp	r3, #0
 8007d94:	d109      	bne.n	8007daa <low_level_output+0xba>
    {
      Txbuffer[i].next = NULL;
 8007d96:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8007d98:	4613      	mov	r3, r2
 8007d9a:	005b      	lsls	r3, r3, #1
 8007d9c:	4413      	add	r3, r2
 8007d9e:	009b      	lsls	r3, r3, #2
 8007da0:	3348      	adds	r3, #72	; 0x48
 8007da2:	443b      	add	r3, r7
 8007da4:	3b34      	subs	r3, #52	; 0x34
 8007da6:	2200      	movs	r2, #0
 8007da8:	601a      	str	r2, [r3, #0]
    }

    i++;
 8007daa:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8007dac:	3301      	adds	r3, #1
 8007dae:	647b      	str	r3, [r7, #68]	; 0x44
  for(q = p; q != NULL; q = q->next)
 8007db0:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8007db2:	681b      	ldr	r3, [r3, #0]
 8007db4:	643b      	str	r3, [r7, #64]	; 0x40
 8007db6:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8007db8:	2b00      	cmp	r3, #0
 8007dba:	d1b6      	bne.n	8007d2a <low_level_output+0x3a>
  }

  TxConfig.Length = p->tot_len;
 8007dbc:	683b      	ldr	r3, [r7, #0]
 8007dbe:	891b      	ldrh	r3, [r3, #8]
 8007dc0:	461a      	mov	r2, r3
 8007dc2:	4b0a      	ldr	r3, [pc, #40]	; (8007dec <low_level_output+0xfc>)
 8007dc4:	605a      	str	r2, [r3, #4]
  TxConfig.TxBuffer = Txbuffer;
 8007dc6:	4a09      	ldr	r2, [pc, #36]	; (8007dec <low_level_output+0xfc>)
 8007dc8:	f107 030c 	add.w	r3, r7, #12
 8007dcc:	6093      	str	r3, [r2, #8]
  TxConfig.pData = p;
 8007dce:	4a07      	ldr	r2, [pc, #28]	; (8007dec <low_level_output+0xfc>)
 8007dd0:	683b      	ldr	r3, [r7, #0]
 8007dd2:	6353      	str	r3, [r2, #52]	; 0x34

  HAL_ETH_Transmit(&heth, &TxConfig, ETH_DMA_TRANSMIT_TIMEOUT);
 8007dd4:	2214      	movs	r2, #20
 8007dd6:	4905      	ldr	r1, [pc, #20]	; (8007dec <low_level_output+0xfc>)
 8007dd8:	4805      	ldr	r0, [pc, #20]	; (8007df0 <low_level_output+0x100>)
 8007dda:	f7fa fab5 	bl	8002348 <HAL_ETH_Transmit>

  return errval;
 8007dde:	f997 303f 	ldrsb.w	r3, [r7, #63]	; 0x3f
}
 8007de2:	4618      	mov	r0, r3
 8007de4:	3748      	adds	r7, #72	; 0x48
 8007de6:	46bd      	mov	sp, r7
 8007de8:	bd80      	pop	{r7, pc}
 8007dea:	bf00      	nop
 8007dec:	20004e98 	.word	0x20004e98
 8007df0:	20004de8 	.word	0x20004de8

08007df4 <low_level_input>:
 * @param netif the lwip network interface structure for this ethernetif
 * @return a pbuf filled with the received packet (including MAC header)
 *         NULL on memory error
   */
static struct pbuf * low_level_input(struct netif *netif)
{
 8007df4:	b580      	push	{r7, lr}
 8007df6:	b084      	sub	sp, #16
 8007df8:	af00      	add	r7, sp, #0
 8007dfa:	6078      	str	r0, [r7, #4]
  struct pbuf *p = NULL;
 8007dfc:	2300      	movs	r3, #0
 8007dfe:	60fb      	str	r3, [r7, #12]

  if(RxAllocStatus == RX_ALLOC_OK)
 8007e00:	4b07      	ldr	r3, [pc, #28]	; (8007e20 <low_level_input+0x2c>)
 8007e02:	781b      	ldrb	r3, [r3, #0]
 8007e04:	2b00      	cmp	r3, #0
 8007e06:	d105      	bne.n	8007e14 <low_level_input+0x20>
  {
    HAL_ETH_ReadData(&heth, (void **)&p);
 8007e08:	f107 030c 	add.w	r3, r7, #12
 8007e0c:	4619      	mov	r1, r3
 8007e0e:	4805      	ldr	r0, [pc, #20]	; (8007e24 <low_level_input+0x30>)
 8007e10:	f7fa fb2e 	bl	8002470 <HAL_ETH_ReadData>
  }

  return p;
 8007e14:	68fb      	ldr	r3, [r7, #12]
}
 8007e16:	4618      	mov	r0, r3
 8007e18:	3710      	adds	r7, #16
 8007e1a:	46bd      	mov	sp, r7
 8007e1c:	bd80      	pop	{r7, pc}
 8007e1e:	bf00      	nop
 8007e20:	20004ca4 	.word	0x20004ca4
 8007e24:	20004de8 	.word	0x20004de8

08007e28 <ethernetif_input>:
 * the appropriate input function is called.
 *
 * @param netif the lwip network interface structure for this ethernetif
 */
void ethernetif_input(struct netif *netif)
{
 8007e28:	b580      	push	{r7, lr}
 8007e2a:	b084      	sub	sp, #16
 8007e2c:	af00      	add	r7, sp, #0
 8007e2e:	6078      	str	r0, [r7, #4]
  struct pbuf *p = NULL;
 8007e30:	2300      	movs	r3, #0
 8007e32:	60fb      	str	r3, [r7, #12]

  do
  {
    p = low_level_input( netif );
 8007e34:	6878      	ldr	r0, [r7, #4]
 8007e36:	f7ff ffdd 	bl	8007df4 <low_level_input>
 8007e3a:	60f8      	str	r0, [r7, #12]
    if (p != NULL)
 8007e3c:	68fb      	ldr	r3, [r7, #12]
 8007e3e:	2b00      	cmp	r3, #0
 8007e40:	d00a      	beq.n	8007e58 <ethernetif_input+0x30>
    {
      if (netif->input( p, netif) != ERR_OK )
 8007e42:	687b      	ldr	r3, [r7, #4]
 8007e44:	691b      	ldr	r3, [r3, #16]
 8007e46:	6879      	ldr	r1, [r7, #4]
 8007e48:	68f8      	ldr	r0, [r7, #12]
 8007e4a:	4798      	blx	r3
 8007e4c:	4603      	mov	r3, r0
 8007e4e:	2b00      	cmp	r3, #0
 8007e50:	d002      	beq.n	8007e58 <ethernetif_input+0x30>
      {
        pbuf_free(p);
 8007e52:	68f8      	ldr	r0, [r7, #12]
 8007e54:	f004 f874 	bl	800bf40 <pbuf_free>
      }
    }
  } while(p!=NULL);
 8007e58:	68fb      	ldr	r3, [r7, #12]
 8007e5a:	2b00      	cmp	r3, #0
 8007e5c:	d1ea      	bne.n	8007e34 <ethernetif_input+0xc>
}
 8007e5e:	bf00      	nop
 8007e60:	bf00      	nop
 8007e62:	3710      	adds	r7, #16
 8007e64:	46bd      	mov	sp, r7
 8007e66:	bd80      	pop	{r7, pc}

08007e68 <ethernetif_init>:
 * @return ERR_OK if the loopif is initialized
 *         ERR_MEM if private data couldn't be allocated
 *         any other err_t on error
 */
err_t ethernetif_init(struct netif *netif)
{
 8007e68:	b580      	push	{r7, lr}
 8007e6a:	b082      	sub	sp, #8
 8007e6c:	af00      	add	r7, sp, #0
 8007e6e:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("netif != NULL", (netif != NULL));
 8007e70:	687b      	ldr	r3, [r7, #4]
 8007e72:	2b00      	cmp	r3, #0
 8007e74:	d106      	bne.n	8007e84 <ethernetif_init+0x1c>
 8007e76:	4b0e      	ldr	r3, [pc, #56]	; (8007eb0 <ethernetif_init+0x48>)
 8007e78:	f44f 72b5 	mov.w	r2, #362	; 0x16a
 8007e7c:	490d      	ldr	r1, [pc, #52]	; (8007eb4 <ethernetif_init+0x4c>)
 8007e7e:	480e      	ldr	r0, [pc, #56]	; (8007eb8 <ethernetif_init+0x50>)
 8007e80:	f010 fb02 	bl	8018488 <iprintf>
   * The last argument should be replaced with your link speed, in units
   * of bits per second.
   */
  // MIB2_INIT_NETIF(netif, snmp_ifType_ethernet_csmacd, LINK_SPEED_OF_YOUR_NETIF_IN_BPS);

  netif->name[0] = IFNAME0;
 8007e84:	687b      	ldr	r3, [r7, #4]
 8007e86:	2273      	movs	r2, #115	; 0x73
 8007e88:	f883 2032 	strb.w	r2, [r3, #50]	; 0x32
  netif->name[1] = IFNAME1;
 8007e8c:	687b      	ldr	r3, [r7, #4]
 8007e8e:	2274      	movs	r2, #116	; 0x74
 8007e90:	f883 2033 	strb.w	r2, [r3, #51]	; 0x33
   * is available...) */

#if LWIP_IPV4
#if LWIP_ARP || LWIP_ETHERNET
#if LWIP_ARP
  netif->output = etharp_output;
 8007e94:	687b      	ldr	r3, [r7, #4]
 8007e96:	4a09      	ldr	r2, [pc, #36]	; (8007ebc <ethernetif_init+0x54>)
 8007e98:	615a      	str	r2, [r3, #20]

#if LWIP_IPV6
  netif->output_ip6 = ethip6_output;
#endif /* LWIP_IPV6 */

  netif->linkoutput = low_level_output;
 8007e9a:	687b      	ldr	r3, [r7, #4]
 8007e9c:	4a08      	ldr	r2, [pc, #32]	; (8007ec0 <ethernetif_init+0x58>)
 8007e9e:	619a      	str	r2, [r3, #24]

  /* initialize the hardware */
  low_level_init(netif);
 8007ea0:	6878      	ldr	r0, [r7, #4]
 8007ea2:	f7ff fe8d 	bl	8007bc0 <low_level_init>

  return ERR_OK;
 8007ea6:	2300      	movs	r3, #0
}
 8007ea8:	4618      	mov	r0, r3
 8007eaa:	3708      	adds	r7, #8
 8007eac:	46bd      	mov	sp, r7
 8007eae:	bd80      	pop	{r7, pc}
 8007eb0:	0801932c 	.word	0x0801932c
 8007eb4:	08019348 	.word	0x08019348
 8007eb8:	08019358 	.word	0x08019358
 8007ebc:	080159dd 	.word	0x080159dd
 8007ec0:	08007cf1 	.word	0x08007cf1

08007ec4 <pbuf_free_custom>:
  * @brief  Custom Rx pbuf free callback
  * @param  pbuf: pbuf to be freed
  * @retval None
  */
void pbuf_free_custom(struct pbuf *p)
{
 8007ec4:	b580      	push	{r7, lr}
 8007ec6:	b084      	sub	sp, #16
 8007ec8:	af00      	add	r7, sp, #0
 8007eca:	6078      	str	r0, [r7, #4]
  struct pbuf_custom* custom_pbuf = (struct pbuf_custom*)p;
 8007ecc:	687b      	ldr	r3, [r7, #4]
 8007ece:	60fb      	str	r3, [r7, #12]
  LWIP_MEMPOOL_FREE(RX_POOL, custom_pbuf);
 8007ed0:	68f9      	ldr	r1, [r7, #12]
 8007ed2:	4807      	ldr	r0, [pc, #28]	; (8007ef0 <pbuf_free_custom+0x2c>)
 8007ed4:	f003 f98e 	bl	800b1f4 <memp_free_pool>

  /* If the Rx Buffer Pool was exhausted, signal the ethernetif_input task to
   * call HAL_ETH_GetRxDataBuffer to rebuild the Rx descriptors. */

  if (RxAllocStatus == RX_ALLOC_ERROR)
 8007ed8:	4b06      	ldr	r3, [pc, #24]	; (8007ef4 <pbuf_free_custom+0x30>)
 8007eda:	781b      	ldrb	r3, [r3, #0]
 8007edc:	2b01      	cmp	r3, #1
 8007ede:	d102      	bne.n	8007ee6 <pbuf_free_custom+0x22>
  {
    RxAllocStatus = RX_ALLOC_OK;
 8007ee0:	4b04      	ldr	r3, [pc, #16]	; (8007ef4 <pbuf_free_custom+0x30>)
 8007ee2:	2200      	movs	r2, #0
 8007ee4:	701a      	strb	r2, [r3, #0]
  }
}
 8007ee6:	bf00      	nop
 8007ee8:	3710      	adds	r7, #16
 8007eea:	46bd      	mov	sp, r7
 8007eec:	bd80      	pop	{r7, pc}
 8007eee:	bf00      	nop
 8007ef0:	0801c1d0 	.word	0x0801c1d0
 8007ef4:	20004ca4 	.word	0x20004ca4

08007ef8 <sys_now>:
*         when LWIP_TIMERS == 1 and NO_SYS == 1
* @param  None
* @retval Current Time value
*/
u32_t sys_now(void)
{
 8007ef8:	b580      	push	{r7, lr}
 8007efa:	af00      	add	r7, sp, #0
  return HAL_GetTick();
 8007efc:	f7f9 fb8c 	bl	8001618 <HAL_GetTick>
 8007f00:	4603      	mov	r3, r0
}
 8007f02:	4618      	mov	r0, r3
 8007f04:	bd80      	pop	{r7, pc}
	...

08007f08 <HAL_ETH_MspInit>:
  * @param  ethHandle: ETH handle
  * @retval None
  */

void HAL_ETH_MspInit(ETH_HandleTypeDef* ethHandle)
{
 8007f08:	b580      	push	{r7, lr}
 8007f0a:	b08e      	sub	sp, #56	; 0x38
 8007f0c:	af00      	add	r7, sp, #0
 8007f0e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8007f10:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8007f14:	2200      	movs	r2, #0
 8007f16:	601a      	str	r2, [r3, #0]
 8007f18:	605a      	str	r2, [r3, #4]
 8007f1a:	609a      	str	r2, [r3, #8]
 8007f1c:	60da      	str	r2, [r3, #12]
 8007f1e:	611a      	str	r2, [r3, #16]
  if(ethHandle->Instance==ETH)
 8007f20:	687b      	ldr	r3, [r7, #4]
 8007f22:	681b      	ldr	r3, [r3, #0]
 8007f24:	4a46      	ldr	r2, [pc, #280]	; (8008040 <HAL_ETH_MspInit+0x138>)
 8007f26:	4293      	cmp	r3, r2
 8007f28:	f040 8085 	bne.w	8008036 <HAL_ETH_MspInit+0x12e>
  {
  /* USER CODE BEGIN ETH_MspInit 0 */

  /* USER CODE END ETH_MspInit 0 */
    /* Enable Peripheral clock */
    __HAL_RCC_ETH_CLK_ENABLE();
 8007f2c:	2300      	movs	r3, #0
 8007f2e:	623b      	str	r3, [r7, #32]
 8007f30:	4b44      	ldr	r3, [pc, #272]	; (8008044 <HAL_ETH_MspInit+0x13c>)
 8007f32:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007f34:	4a43      	ldr	r2, [pc, #268]	; (8008044 <HAL_ETH_MspInit+0x13c>)
 8007f36:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8007f3a:	6313      	str	r3, [r2, #48]	; 0x30
 8007f3c:	4b41      	ldr	r3, [pc, #260]	; (8008044 <HAL_ETH_MspInit+0x13c>)
 8007f3e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007f40:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8007f44:	623b      	str	r3, [r7, #32]
 8007f46:	6a3b      	ldr	r3, [r7, #32]
 8007f48:	2300      	movs	r3, #0
 8007f4a:	61fb      	str	r3, [r7, #28]
 8007f4c:	4b3d      	ldr	r3, [pc, #244]	; (8008044 <HAL_ETH_MspInit+0x13c>)
 8007f4e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007f50:	4a3c      	ldr	r2, [pc, #240]	; (8008044 <HAL_ETH_MspInit+0x13c>)
 8007f52:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8007f56:	6313      	str	r3, [r2, #48]	; 0x30
 8007f58:	4b3a      	ldr	r3, [pc, #232]	; (8008044 <HAL_ETH_MspInit+0x13c>)
 8007f5a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007f5c:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8007f60:	61fb      	str	r3, [r7, #28]
 8007f62:	69fb      	ldr	r3, [r7, #28]
 8007f64:	2300      	movs	r3, #0
 8007f66:	61bb      	str	r3, [r7, #24]
 8007f68:	4b36      	ldr	r3, [pc, #216]	; (8008044 <HAL_ETH_MspInit+0x13c>)
 8007f6a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007f6c:	4a35      	ldr	r2, [pc, #212]	; (8008044 <HAL_ETH_MspInit+0x13c>)
 8007f6e:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 8007f72:	6313      	str	r3, [r2, #48]	; 0x30
 8007f74:	4b33      	ldr	r3, [pc, #204]	; (8008044 <HAL_ETH_MspInit+0x13c>)
 8007f76:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007f78:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8007f7c:	61bb      	str	r3, [r7, #24]
 8007f7e:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8007f80:	2300      	movs	r3, #0
 8007f82:	617b      	str	r3, [r7, #20]
 8007f84:	4b2f      	ldr	r3, [pc, #188]	; (8008044 <HAL_ETH_MspInit+0x13c>)
 8007f86:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007f88:	4a2e      	ldr	r2, [pc, #184]	; (8008044 <HAL_ETH_MspInit+0x13c>)
 8007f8a:	f043 0304 	orr.w	r3, r3, #4
 8007f8e:	6313      	str	r3, [r2, #48]	; 0x30
 8007f90:	4b2c      	ldr	r3, [pc, #176]	; (8008044 <HAL_ETH_MspInit+0x13c>)
 8007f92:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007f94:	f003 0304 	and.w	r3, r3, #4
 8007f98:	617b      	str	r3, [r7, #20]
 8007f9a:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8007f9c:	2300      	movs	r3, #0
 8007f9e:	613b      	str	r3, [r7, #16]
 8007fa0:	4b28      	ldr	r3, [pc, #160]	; (8008044 <HAL_ETH_MspInit+0x13c>)
 8007fa2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007fa4:	4a27      	ldr	r2, [pc, #156]	; (8008044 <HAL_ETH_MspInit+0x13c>)
 8007fa6:	f043 0301 	orr.w	r3, r3, #1
 8007faa:	6313      	str	r3, [r2, #48]	; 0x30
 8007fac:	4b25      	ldr	r3, [pc, #148]	; (8008044 <HAL_ETH_MspInit+0x13c>)
 8007fae:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007fb0:	f003 0301 	and.w	r3, r3, #1
 8007fb4:	613b      	str	r3, [r7, #16]
 8007fb6:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8007fb8:	2300      	movs	r3, #0
 8007fba:	60fb      	str	r3, [r7, #12]
 8007fbc:	4b21      	ldr	r3, [pc, #132]	; (8008044 <HAL_ETH_MspInit+0x13c>)
 8007fbe:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007fc0:	4a20      	ldr	r2, [pc, #128]	; (8008044 <HAL_ETH_MspInit+0x13c>)
 8007fc2:	f043 0302 	orr.w	r3, r3, #2
 8007fc6:	6313      	str	r3, [r2, #48]	; 0x30
 8007fc8:	4b1e      	ldr	r3, [pc, #120]	; (8008044 <HAL_ETH_MspInit+0x13c>)
 8007fca:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007fcc:	f003 0302 	and.w	r3, r3, #2
 8007fd0:	60fb      	str	r3, [r7, #12]
 8007fd2:	68fb      	ldr	r3, [r7, #12]
    PC5     ------> ETH_RXD1
    PB11     ------> ETH_TX_EN
    PB12     ------> ETH_TXD0
    PB13     ------> ETH_TXD1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_1|GPIO_PIN_4|GPIO_PIN_5;
 8007fd4:	2332      	movs	r3, #50	; 0x32
 8007fd6:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8007fd8:	2302      	movs	r3, #2
 8007fda:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8007fdc:	2300      	movs	r3, #0
 8007fde:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8007fe0:	2303      	movs	r3, #3
 8007fe2:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8007fe4:	230b      	movs	r3, #11
 8007fe6:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8007fe8:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8007fec:	4619      	mov	r1, r3
 8007fee:	4816      	ldr	r0, [pc, #88]	; (8008048 <HAL_ETH_MspInit+0x140>)
 8007ff0:	f7fb f98a 	bl	8003308 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_7;
 8007ff4:	2386      	movs	r3, #134	; 0x86
 8007ff6:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8007ff8:	2302      	movs	r3, #2
 8007ffa:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8007ffc:	2300      	movs	r3, #0
 8007ffe:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8008000:	2303      	movs	r3, #3
 8008002:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8008004:	230b      	movs	r3, #11
 8008006:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8008008:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800800c:	4619      	mov	r1, r3
 800800e:	480f      	ldr	r0, [pc, #60]	; (800804c <HAL_ETH_MspInit+0x144>)
 8008010:	f7fb f97a 	bl	8003308 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_12|GPIO_PIN_13;
 8008014:	f44f 5360 	mov.w	r3, #14336	; 0x3800
 8008018:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800801a:	2302      	movs	r3, #2
 800801c:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800801e:	2300      	movs	r3, #0
 8008020:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8008022:	2303      	movs	r3, #3
 8008024:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8008026:	230b      	movs	r3, #11
 8008028:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800802a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800802e:	4619      	mov	r1, r3
 8008030:	4807      	ldr	r0, [pc, #28]	; (8008050 <HAL_ETH_MspInit+0x148>)
 8008032:	f7fb f969 	bl	8003308 <HAL_GPIO_Init>

  /* USER CODE BEGIN ETH_MspInit 1 */

  /* USER CODE END ETH_MspInit 1 */
  }
}
 8008036:	bf00      	nop
 8008038:	3738      	adds	r7, #56	; 0x38
 800803a:	46bd      	mov	sp, r7
 800803c:	bd80      	pop	{r7, pc}
 800803e:	bf00      	nop
 8008040:	40028000 	.word	0x40028000
 8008044:	40023800 	.word	0x40023800
 8008048:	40020800 	.word	0x40020800
 800804c:	40020000 	.word	0x40020000
 8008050:	40020400 	.word	0x40020400

08008054 <ETH_PHY_IO_Init>:
  * @brief  Initializes the MDIO interface GPIO and clocks.
  * @param  None
  * @retval 0 if OK, -1 if ERROR
  */
int32_t ETH_PHY_IO_Init(void)
{
 8008054:	b580      	push	{r7, lr}
 8008056:	af00      	add	r7, sp, #0
  /* We assume that MDIO GPIO configuration is already done
     in the ETH_MspInit() else it should be done here
  */

  /* Configure the MDIO Clock */
  HAL_ETH_SetMDIOClockRange(&heth);
 8008058:	4802      	ldr	r0, [pc, #8]	; (8008064 <ETH_PHY_IO_Init+0x10>)
 800805a:	f7fa fcf1 	bl	8002a40 <HAL_ETH_SetMDIOClockRange>

  return 0;
 800805e:	2300      	movs	r3, #0
}
 8008060:	4618      	mov	r0, r3
 8008062:	bd80      	pop	{r7, pc}
 8008064:	20004de8 	.word	0x20004de8

08008068 <ETH_PHY_IO_DeInit>:
  * @brief  De-Initializes the MDIO interface .
  * @param  None
  * @retval 0 if OK, -1 if ERROR
  */
int32_t ETH_PHY_IO_DeInit (void)
{
 8008068:	b480      	push	{r7}
 800806a:	af00      	add	r7, sp, #0
  return 0;
 800806c:	2300      	movs	r3, #0
}
 800806e:	4618      	mov	r0, r3
 8008070:	46bd      	mov	sp, r7
 8008072:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008076:	4770      	bx	lr

08008078 <ETH_PHY_IO_ReadReg>:
  * @param  RegAddr: PHY register address
  * @param  pRegVal: pointer to hold the register value
  * @retval 0 if OK -1 if Error
  */
int32_t ETH_PHY_IO_ReadReg(uint32_t DevAddr, uint32_t RegAddr, uint32_t *pRegVal)
{
 8008078:	b580      	push	{r7, lr}
 800807a:	b084      	sub	sp, #16
 800807c:	af00      	add	r7, sp, #0
 800807e:	60f8      	str	r0, [r7, #12]
 8008080:	60b9      	str	r1, [r7, #8]
 8008082:	607a      	str	r2, [r7, #4]
  if(HAL_ETH_ReadPHYRegister(&heth, DevAddr, RegAddr, pRegVal) != HAL_OK)
 8008084:	687b      	ldr	r3, [r7, #4]
 8008086:	68ba      	ldr	r2, [r7, #8]
 8008088:	68f9      	ldr	r1, [r7, #12]
 800808a:	4807      	ldr	r0, [pc, #28]	; (80080a8 <ETH_PHY_IO_ReadReg+0x30>)
 800808c:	f7fa fb33 	bl	80026f6 <HAL_ETH_ReadPHYRegister>
 8008090:	4603      	mov	r3, r0
 8008092:	2b00      	cmp	r3, #0
 8008094:	d002      	beq.n	800809c <ETH_PHY_IO_ReadReg+0x24>
  {
    return -1;
 8008096:	f04f 33ff 	mov.w	r3, #4294967295
 800809a:	e000      	b.n	800809e <ETH_PHY_IO_ReadReg+0x26>
  }

  return 0;
 800809c:	2300      	movs	r3, #0
}
 800809e:	4618      	mov	r0, r3
 80080a0:	3710      	adds	r7, #16
 80080a2:	46bd      	mov	sp, r7
 80080a4:	bd80      	pop	{r7, pc}
 80080a6:	bf00      	nop
 80080a8:	20004de8 	.word	0x20004de8

080080ac <ETH_PHY_IO_WriteReg>:
  * @param  RegAddr: PHY register address
  * @param  RegVal: Value to be written
  * @retval 0 if OK -1 if Error
  */
int32_t ETH_PHY_IO_WriteReg(uint32_t DevAddr, uint32_t RegAddr, uint32_t RegVal)
{
 80080ac:	b580      	push	{r7, lr}
 80080ae:	b084      	sub	sp, #16
 80080b0:	af00      	add	r7, sp, #0
 80080b2:	60f8      	str	r0, [r7, #12]
 80080b4:	60b9      	str	r1, [r7, #8]
 80080b6:	607a      	str	r2, [r7, #4]
  if(HAL_ETH_WritePHYRegister(&heth, DevAddr, RegAddr, RegVal) != HAL_OK)
 80080b8:	687b      	ldr	r3, [r7, #4]
 80080ba:	68ba      	ldr	r2, [r7, #8]
 80080bc:	68f9      	ldr	r1, [r7, #12]
 80080be:	4807      	ldr	r0, [pc, #28]	; (80080dc <ETH_PHY_IO_WriteReg+0x30>)
 80080c0:	f7fa fb64 	bl	800278c <HAL_ETH_WritePHYRegister>
 80080c4:	4603      	mov	r3, r0
 80080c6:	2b00      	cmp	r3, #0
 80080c8:	d002      	beq.n	80080d0 <ETH_PHY_IO_WriteReg+0x24>
  {
    return -1;
 80080ca:	f04f 33ff 	mov.w	r3, #4294967295
 80080ce:	e000      	b.n	80080d2 <ETH_PHY_IO_WriteReg+0x26>
  }

  return 0;
 80080d0:	2300      	movs	r3, #0
}
 80080d2:	4618      	mov	r0, r3
 80080d4:	3710      	adds	r7, #16
 80080d6:	46bd      	mov	sp, r7
 80080d8:	bd80      	pop	{r7, pc}
 80080da:	bf00      	nop
 80080dc:	20004de8 	.word	0x20004de8

080080e0 <ETH_PHY_IO_GetTick>:
/**
  * @brief  Get the time in millisecons used for internal PHY driver process.
  * @retval Time value
  */
int32_t ETH_PHY_IO_GetTick(void)
{
 80080e0:	b580      	push	{r7, lr}
 80080e2:	af00      	add	r7, sp, #0
  return HAL_GetTick();
 80080e4:	f7f9 fa98 	bl	8001618 <HAL_GetTick>
 80080e8:	4603      	mov	r3, r0
}
 80080ea:	4618      	mov	r0, r3
 80080ec:	bd80      	pop	{r7, pc}
	...

080080f0 <ethernet_link_check_state>:
/**
  * @brief  Check the ETH link state then update ETH driver and netif link accordingly.
  * @retval None
  */
void ethernet_link_check_state(struct netif *netif)
{
 80080f0:	b580      	push	{r7, lr}
 80080f2:	b0a0      	sub	sp, #128	; 0x80
 80080f4:	af00      	add	r7, sp, #0
 80080f6:	6078      	str	r0, [r7, #4]
  ETH_MACConfigTypeDef MACConf = {0};
 80080f8:	f107 030c 	add.w	r3, r7, #12
 80080fc:	2264      	movs	r2, #100	; 0x64
 80080fe:	2100      	movs	r1, #0
 8008100:	4618      	mov	r0, r3
 8008102:	f010 fa26 	bl	8018552 <memset>
  int32_t PHYLinkState = 0;
 8008106:	2300      	movs	r3, #0
 8008108:	673b      	str	r3, [r7, #112]	; 0x70
  uint32_t linkchanged = 0U, speed = 0U, duplex = 0U;
 800810a:	2300      	movs	r3, #0
 800810c:	67fb      	str	r3, [r7, #124]	; 0x7c
 800810e:	2300      	movs	r3, #0
 8008110:	67bb      	str	r3, [r7, #120]	; 0x78
 8008112:	2300      	movs	r3, #0
 8008114:	677b      	str	r3, [r7, #116]	; 0x74

  PHYLinkState = DP83848_GetLinkState(&DP83848);
 8008116:	483a      	ldr	r0, [pc, #232]	; (8008200 <ethernet_link_check_state+0x110>)
 8008118:	f7f9 f990 	bl	800143c <DP83848_GetLinkState>
 800811c:	6738      	str	r0, [r7, #112]	; 0x70

  if(netif_is_link_up(netif) && (PHYLinkState <= DP83848_STATUS_LINK_DOWN))
 800811e:	687b      	ldr	r3, [r7, #4]
 8008120:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 8008124:	089b      	lsrs	r3, r3, #2
 8008126:	f003 0301 	and.w	r3, r3, #1
 800812a:	b2db      	uxtb	r3, r3
 800812c:	2b00      	cmp	r3, #0
 800812e:	d00c      	beq.n	800814a <ethernet_link_check_state+0x5a>
 8008130:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8008132:	2b01      	cmp	r3, #1
 8008134:	dc09      	bgt.n	800814a <ethernet_link_check_state+0x5a>
  {
    HAL_ETH_Stop(&heth);
 8008136:	4833      	ldr	r0, [pc, #204]	; (8008204 <ethernet_link_check_state+0x114>)
 8008138:	f7fa f8ad 	bl	8002296 <HAL_ETH_Stop>
    netif_set_down(netif);
 800813c:	6878      	ldr	r0, [r7, #4]
 800813e:	f003 fae5 	bl	800b70c <netif_set_down>
    netif_set_link_down(netif);
 8008142:	6878      	ldr	r0, [r7, #4]
 8008144:	f003 fb4c 	bl	800b7e0 <netif_set_link_down>
      netif_set_up(netif);
      netif_set_link_up(netif);
    }
  }

}
 8008148:	e055      	b.n	80081f6 <ethernet_link_check_state+0x106>
  else if(!netif_is_link_up(netif) && (PHYLinkState > DP83848_STATUS_LINK_DOWN))
 800814a:	687b      	ldr	r3, [r7, #4]
 800814c:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 8008150:	f003 0304 	and.w	r3, r3, #4
 8008154:	2b00      	cmp	r3, #0
 8008156:	d14e      	bne.n	80081f6 <ethernet_link_check_state+0x106>
 8008158:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 800815a:	2b01      	cmp	r3, #1
 800815c:	dd4b      	ble.n	80081f6 <ethernet_link_check_state+0x106>
    switch (PHYLinkState)
 800815e:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8008160:	3b02      	subs	r3, #2
 8008162:	2b03      	cmp	r3, #3
 8008164:	d82a      	bhi.n	80081bc <ethernet_link_check_state+0xcc>
 8008166:	a201      	add	r2, pc, #4	; (adr r2, 800816c <ethernet_link_check_state+0x7c>)
 8008168:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800816c:	0800817d 	.word	0x0800817d
 8008170:	0800818f 	.word	0x0800818f
 8008174:	0800819f 	.word	0x0800819f
 8008178:	080081af 	.word	0x080081af
      duplex = ETH_FULLDUPLEX_MODE;
 800817c:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8008180:	677b      	str	r3, [r7, #116]	; 0x74
      speed = ETH_SPEED_100M;
 8008182:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8008186:	67bb      	str	r3, [r7, #120]	; 0x78
      linkchanged = 1;
 8008188:	2301      	movs	r3, #1
 800818a:	67fb      	str	r3, [r7, #124]	; 0x7c
      break;
 800818c:	e017      	b.n	80081be <ethernet_link_check_state+0xce>
      duplex = ETH_HALFDUPLEX_MODE;
 800818e:	2300      	movs	r3, #0
 8008190:	677b      	str	r3, [r7, #116]	; 0x74
      speed = ETH_SPEED_100M;
 8008192:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8008196:	67bb      	str	r3, [r7, #120]	; 0x78
      linkchanged = 1;
 8008198:	2301      	movs	r3, #1
 800819a:	67fb      	str	r3, [r7, #124]	; 0x7c
      break;
 800819c:	e00f      	b.n	80081be <ethernet_link_check_state+0xce>
      duplex = ETH_FULLDUPLEX_MODE;
 800819e:	f44f 6300 	mov.w	r3, #2048	; 0x800
 80081a2:	677b      	str	r3, [r7, #116]	; 0x74
      speed = ETH_SPEED_10M;
 80081a4:	2300      	movs	r3, #0
 80081a6:	67bb      	str	r3, [r7, #120]	; 0x78
      linkchanged = 1;
 80081a8:	2301      	movs	r3, #1
 80081aa:	67fb      	str	r3, [r7, #124]	; 0x7c
      break;
 80081ac:	e007      	b.n	80081be <ethernet_link_check_state+0xce>
      duplex = ETH_HALFDUPLEX_MODE;
 80081ae:	2300      	movs	r3, #0
 80081b0:	677b      	str	r3, [r7, #116]	; 0x74
      speed = ETH_SPEED_10M;
 80081b2:	2300      	movs	r3, #0
 80081b4:	67bb      	str	r3, [r7, #120]	; 0x78
      linkchanged = 1;
 80081b6:	2301      	movs	r3, #1
 80081b8:	67fb      	str	r3, [r7, #124]	; 0x7c
      break;
 80081ba:	e000      	b.n	80081be <ethernet_link_check_state+0xce>
      break;
 80081bc:	bf00      	nop
    if(linkchanged)
 80081be:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 80081c0:	2b00      	cmp	r3, #0
 80081c2:	d018      	beq.n	80081f6 <ethernet_link_check_state+0x106>
      HAL_ETH_GetMACConfig(&heth, &MACConf);
 80081c4:	f107 030c 	add.w	r3, r7, #12
 80081c8:	4619      	mov	r1, r3
 80081ca:	480e      	ldr	r0, [pc, #56]	; (8008204 <ethernet_link_check_state+0x114>)
 80081cc:	f7fa fb27 	bl	800281e <HAL_ETH_GetMACConfig>
      MACConf.DuplexMode = duplex;
 80081d0:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80081d2:	627b      	str	r3, [r7, #36]	; 0x24
      MACConf.Speed = speed;
 80081d4:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80081d6:	623b      	str	r3, [r7, #32]
      HAL_ETH_SetMACConfig(&heth, &MACConf);
 80081d8:	f107 030c 	add.w	r3, r7, #12
 80081dc:	4619      	mov	r1, r3
 80081de:	4809      	ldr	r0, [pc, #36]	; (8008204 <ethernet_link_check_state+0x114>)
 80081e0:	f7fa fc14 	bl	8002a0c <HAL_ETH_SetMACConfig>
      HAL_ETH_Start(&heth);
 80081e4:	4807      	ldr	r0, [pc, #28]	; (8008204 <ethernet_link_check_state+0x114>)
 80081e6:	f7f9 fff7 	bl	80021d8 <HAL_ETH_Start>
      netif_set_up(netif);
 80081ea:	6878      	ldr	r0, [r7, #4]
 80081ec:	f003 fa22 	bl	800b634 <netif_set_up>
      netif_set_link_up(netif);
 80081f0:	6878      	ldr	r0, [r7, #4]
 80081f2:	f003 fabd 	bl	800b770 <netif_set_link_up>
}
 80081f6:	bf00      	nop
 80081f8:	3780      	adds	r7, #128	; 0x80
 80081fa:	46bd      	mov	sp, r7
 80081fc:	bd80      	pop	{r7, pc}
 80081fe:	bf00      	nop
 8008200:	20004ed0 	.word	0x20004ed0
 8008204:	20004de8 	.word	0x20004de8

08008208 <HAL_ETH_RxAllocateCallback>:

void HAL_ETH_RxAllocateCallback(uint8_t **buff)
{
 8008208:	b580      	push	{r7, lr}
 800820a:	b086      	sub	sp, #24
 800820c:	af02      	add	r7, sp, #8
 800820e:	6078      	str	r0, [r7, #4]
/* USER CODE BEGIN HAL ETH RxAllocateCallback */
  struct pbuf_custom *p = LWIP_MEMPOOL_ALLOC(RX_POOL);
 8008210:	4812      	ldr	r0, [pc, #72]	; (800825c <HAL_ETH_RxAllocateCallback+0x54>)
 8008212:	f002 ff81 	bl	800b118 <memp_malloc_pool>
 8008216:	60f8      	str	r0, [r7, #12]
  if (p)
 8008218:	68fb      	ldr	r3, [r7, #12]
 800821a:	2b00      	cmp	r3, #0
 800821c:	d014      	beq.n	8008248 <HAL_ETH_RxAllocateCallback+0x40>
  {
    /* Get the buff from the struct pbuf address. */
    *buff = (uint8_t *)p + offsetof(RxBuff_t, buff);
 800821e:	68fb      	ldr	r3, [r7, #12]
 8008220:	f103 0220 	add.w	r2, r3, #32
 8008224:	687b      	ldr	r3, [r7, #4]
 8008226:	601a      	str	r2, [r3, #0]
    p->custom_free_function = pbuf_free_custom;
 8008228:	68fb      	ldr	r3, [r7, #12]
 800822a:	4a0d      	ldr	r2, [pc, #52]	; (8008260 <HAL_ETH_RxAllocateCallback+0x58>)
 800822c:	611a      	str	r2, [r3, #16]
    /* Initialize the struct pbuf.
    * This must be performed whenever a buffer's allocated because it may be
    * changed by lwIP or the app, e.g., pbuf_free decrements ref. */
    pbuf_alloced_custom(PBUF_RAW, 0, PBUF_REF, p, *buff, ETH_RX_BUF_SIZE);
 800822e:	687b      	ldr	r3, [r7, #4]
 8008230:	681b      	ldr	r3, [r3, #0]
 8008232:	f44f 62c0 	mov.w	r2, #1536	; 0x600
 8008236:	9201      	str	r2, [sp, #4]
 8008238:	9300      	str	r3, [sp, #0]
 800823a:	68fb      	ldr	r3, [r7, #12]
 800823c:	2241      	movs	r2, #65	; 0x41
 800823e:	2100      	movs	r1, #0
 8008240:	2000      	movs	r0, #0
 8008242:	f003 fcc3 	bl	800bbcc <pbuf_alloced_custom>
  {
    RxAllocStatus = RX_ALLOC_ERROR;
    *buff = NULL;
  }
/* USER CODE END HAL ETH RxAllocateCallback */
}
 8008246:	e005      	b.n	8008254 <HAL_ETH_RxAllocateCallback+0x4c>
    RxAllocStatus = RX_ALLOC_ERROR;
 8008248:	4b06      	ldr	r3, [pc, #24]	; (8008264 <HAL_ETH_RxAllocateCallback+0x5c>)
 800824a:	2201      	movs	r2, #1
 800824c:	701a      	strb	r2, [r3, #0]
    *buff = NULL;
 800824e:	687b      	ldr	r3, [r7, #4]
 8008250:	2200      	movs	r2, #0
 8008252:	601a      	str	r2, [r3, #0]
}
 8008254:	bf00      	nop
 8008256:	3710      	adds	r7, #16
 8008258:	46bd      	mov	sp, r7
 800825a:	bd80      	pop	{r7, pc}
 800825c:	0801c1d0 	.word	0x0801c1d0
 8008260:	08007ec5 	.word	0x08007ec5
 8008264:	20004ca4 	.word	0x20004ca4

08008268 <HAL_ETH_RxLinkCallback>:

void HAL_ETH_RxLinkCallback(void **pStart, void **pEnd, uint8_t *buff, uint16_t Length)
{
 8008268:	b480      	push	{r7}
 800826a:	b089      	sub	sp, #36	; 0x24
 800826c:	af00      	add	r7, sp, #0
 800826e:	60f8      	str	r0, [r7, #12]
 8008270:	60b9      	str	r1, [r7, #8]
 8008272:	607a      	str	r2, [r7, #4]
 8008274:	807b      	strh	r3, [r7, #2]
/* USER CODE BEGIN HAL ETH RxLinkCallback */

  struct pbuf **ppStart = (struct pbuf **)pStart;
 8008276:	68fb      	ldr	r3, [r7, #12]
 8008278:	61bb      	str	r3, [r7, #24]
  struct pbuf **ppEnd = (struct pbuf **)pEnd;
 800827a:	68bb      	ldr	r3, [r7, #8]
 800827c:	617b      	str	r3, [r7, #20]
  struct pbuf *p = NULL;
 800827e:	2300      	movs	r3, #0
 8008280:	61fb      	str	r3, [r7, #28]

  /* Get the struct pbuf from the buff address. */
  p = (struct pbuf *)(buff - offsetof(RxBuff_t, buff));
 8008282:	687b      	ldr	r3, [r7, #4]
 8008284:	3b20      	subs	r3, #32
 8008286:	61fb      	str	r3, [r7, #28]
  p->next = NULL;
 8008288:	69fb      	ldr	r3, [r7, #28]
 800828a:	2200      	movs	r2, #0
 800828c:	601a      	str	r2, [r3, #0]
  p->tot_len = 0;
 800828e:	69fb      	ldr	r3, [r7, #28]
 8008290:	2200      	movs	r2, #0
 8008292:	811a      	strh	r2, [r3, #8]
  p->len = Length;
 8008294:	69fb      	ldr	r3, [r7, #28]
 8008296:	887a      	ldrh	r2, [r7, #2]
 8008298:	815a      	strh	r2, [r3, #10]

  /* Chain the buffer. */
  if (!*ppStart)
 800829a:	69bb      	ldr	r3, [r7, #24]
 800829c:	681b      	ldr	r3, [r3, #0]
 800829e:	2b00      	cmp	r3, #0
 80082a0:	d103      	bne.n	80082aa <HAL_ETH_RxLinkCallback+0x42>
  {
    /* The first buffer of the packet. */
    *ppStart = p;
 80082a2:	69bb      	ldr	r3, [r7, #24]
 80082a4:	69fa      	ldr	r2, [r7, #28]
 80082a6:	601a      	str	r2, [r3, #0]
 80082a8:	e003      	b.n	80082b2 <HAL_ETH_RxLinkCallback+0x4a>
  }
  else
  {
    /* Chain the buffer to the end of the packet. */
    (*ppEnd)->next = p;
 80082aa:	697b      	ldr	r3, [r7, #20]
 80082ac:	681b      	ldr	r3, [r3, #0]
 80082ae:	69fa      	ldr	r2, [r7, #28]
 80082b0:	601a      	str	r2, [r3, #0]
  }
  *ppEnd  = p;
 80082b2:	697b      	ldr	r3, [r7, #20]
 80082b4:	69fa      	ldr	r2, [r7, #28]
 80082b6:	601a      	str	r2, [r3, #0]

  /* Update the total length of all the buffers of the chain. Each pbuf in the chain should have its tot_len
   * set to its own length, plus the length of all the following pbufs in the chain. */
  for (p = *ppStart; p != NULL; p = p->next)
 80082b8:	69bb      	ldr	r3, [r7, #24]
 80082ba:	681b      	ldr	r3, [r3, #0]
 80082bc:	61fb      	str	r3, [r7, #28]
 80082be:	e009      	b.n	80082d4 <HAL_ETH_RxLinkCallback+0x6c>
  {
    p->tot_len += Length;
 80082c0:	69fb      	ldr	r3, [r7, #28]
 80082c2:	891a      	ldrh	r2, [r3, #8]
 80082c4:	887b      	ldrh	r3, [r7, #2]
 80082c6:	4413      	add	r3, r2
 80082c8:	b29a      	uxth	r2, r3
 80082ca:	69fb      	ldr	r3, [r7, #28]
 80082cc:	811a      	strh	r2, [r3, #8]
  for (p = *ppStart; p != NULL; p = p->next)
 80082ce:	69fb      	ldr	r3, [r7, #28]
 80082d0:	681b      	ldr	r3, [r3, #0]
 80082d2:	61fb      	str	r3, [r7, #28]
 80082d4:	69fb      	ldr	r3, [r7, #28]
 80082d6:	2b00      	cmp	r3, #0
 80082d8:	d1f2      	bne.n	80082c0 <HAL_ETH_RxLinkCallback+0x58>
  }

/* USER CODE END HAL ETH RxLinkCallback */
}
 80082da:	bf00      	nop
 80082dc:	bf00      	nop
 80082de:	3724      	adds	r7, #36	; 0x24
 80082e0:	46bd      	mov	sp, r7
 80082e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80082e6:	4770      	bx	lr

080082e8 <USBD_CDC_Init>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t USBD_CDC_Init(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 80082e8:	b580      	push	{r7, lr}
 80082ea:	b084      	sub	sp, #16
 80082ec:	af00      	add	r7, sp, #0
 80082ee:	6078      	str	r0, [r7, #4]
 80082f0:	460b      	mov	r3, r1
 80082f2:	70fb      	strb	r3, [r7, #3]
  UNUSED(cfgidx);
  USBD_CDC_HandleTypeDef *hcdc;

  hcdc = (USBD_CDC_HandleTypeDef *)USBD_malloc(sizeof(USBD_CDC_HandleTypeDef));
 80082f4:	f44f 7007 	mov.w	r0, #540	; 0x21c
 80082f8:	f00f fef2 	bl	80180e0 <USBD_static_malloc>
 80082fc:	60f8      	str	r0, [r7, #12]

  if (hcdc == NULL)
 80082fe:	68fb      	ldr	r3, [r7, #12]
 8008300:	2b00      	cmp	r3, #0
 8008302:	d109      	bne.n	8008318 <USBD_CDC_Init+0x30>
  {
    pdev->pClassDataCmsit[pdev->classId] = NULL;
 8008304:	687b      	ldr	r3, [r7, #4]
 8008306:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800830a:	687b      	ldr	r3, [r7, #4]
 800830c:	32b0      	adds	r2, #176	; 0xb0
 800830e:	2100      	movs	r1, #0
 8008310:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
    return (uint8_t)USBD_EMEM;
 8008314:	2302      	movs	r3, #2
 8008316:	e0d4      	b.n	80084c2 <USBD_CDC_Init+0x1da>
  }

  (void)USBD_memset(hcdc, 0, sizeof(USBD_CDC_HandleTypeDef));
 8008318:	f44f 7207 	mov.w	r2, #540	; 0x21c
 800831c:	2100      	movs	r1, #0
 800831e:	68f8      	ldr	r0, [r7, #12]
 8008320:	f010 f917 	bl	8018552 <memset>

  pdev->pClassDataCmsit[pdev->classId] = (void *)hcdc;
 8008324:	687b      	ldr	r3, [r7, #4]
 8008326:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800832a:	687b      	ldr	r3, [r7, #4]
 800832c:	32b0      	adds	r2, #176	; 0xb0
 800832e:	68f9      	ldr	r1, [r7, #12]
 8008330:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
  pdev->pClassData = pdev->pClassDataCmsit[pdev->classId];
 8008334:	687b      	ldr	r3, [r7, #4]
 8008336:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800833a:	687b      	ldr	r3, [r7, #4]
 800833c:	32b0      	adds	r2, #176	; 0xb0
 800833e:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 8008342:	687b      	ldr	r3, [r7, #4]
 8008344:	f8c3 22bc 	str.w	r2, [r3, #700]	; 0x2bc
  CDCInEpAdd  = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_BULK, (uint8_t)pdev->classId);
  CDCOutEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_OUT, USBD_EP_TYPE_BULK, (uint8_t)pdev->classId);
  CDCCmdEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_INTR, (uint8_t)pdev->classId);
#endif /* USE_USBD_COMPOSITE */

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 8008348:	687b      	ldr	r3, [r7, #4]
 800834a:	7c1b      	ldrb	r3, [r3, #16]
 800834c:	2b00      	cmp	r3, #0
 800834e:	d138      	bne.n	80083c2 <USBD_CDC_Init+0xda>
  {
    /* Open EP IN */
    (void)USBD_LL_OpenEP(pdev, CDCInEpAdd, USBD_EP_TYPE_BULK,
 8008350:	4b5e      	ldr	r3, [pc, #376]	; (80084cc <USBD_CDC_Init+0x1e4>)
 8008352:	7819      	ldrb	r1, [r3, #0]
 8008354:	f44f 7300 	mov.w	r3, #512	; 0x200
 8008358:	2202      	movs	r2, #2
 800835a:	6878      	ldr	r0, [r7, #4]
 800835c:	f00f fd9d 	bl	8017e9a <USBD_LL_OpenEP>
                         CDC_DATA_HS_IN_PACKET_SIZE);

    pdev->ep_in[CDCInEpAdd & 0xFU].is_used = 1U;
 8008360:	4b5a      	ldr	r3, [pc, #360]	; (80084cc <USBD_CDC_Init+0x1e4>)
 8008362:	781b      	ldrb	r3, [r3, #0]
 8008364:	f003 020f 	and.w	r2, r3, #15
 8008368:	6879      	ldr	r1, [r7, #4]
 800836a:	4613      	mov	r3, r2
 800836c:	009b      	lsls	r3, r3, #2
 800836e:	4413      	add	r3, r2
 8008370:	009b      	lsls	r3, r3, #2
 8008372:	440b      	add	r3, r1
 8008374:	3324      	adds	r3, #36	; 0x24
 8008376:	2201      	movs	r2, #1
 8008378:	801a      	strh	r2, [r3, #0]

    /* Open EP OUT */
    (void)USBD_LL_OpenEP(pdev, CDCOutEpAdd, USBD_EP_TYPE_BULK,
 800837a:	4b55      	ldr	r3, [pc, #340]	; (80084d0 <USBD_CDC_Init+0x1e8>)
 800837c:	7819      	ldrb	r1, [r3, #0]
 800837e:	f44f 7300 	mov.w	r3, #512	; 0x200
 8008382:	2202      	movs	r2, #2
 8008384:	6878      	ldr	r0, [r7, #4]
 8008386:	f00f fd88 	bl	8017e9a <USBD_LL_OpenEP>
                         CDC_DATA_HS_OUT_PACKET_SIZE);

    pdev->ep_out[CDCOutEpAdd & 0xFU].is_used = 1U;
 800838a:	4b51      	ldr	r3, [pc, #324]	; (80084d0 <USBD_CDC_Init+0x1e8>)
 800838c:	781b      	ldrb	r3, [r3, #0]
 800838e:	f003 020f 	and.w	r2, r3, #15
 8008392:	6879      	ldr	r1, [r7, #4]
 8008394:	4613      	mov	r3, r2
 8008396:	009b      	lsls	r3, r3, #2
 8008398:	4413      	add	r3, r2
 800839a:	009b      	lsls	r3, r3, #2
 800839c:	440b      	add	r3, r1
 800839e:	f503 73b2 	add.w	r3, r3, #356	; 0x164
 80083a2:	2201      	movs	r2, #1
 80083a4:	801a      	strh	r2, [r3, #0]

    /* Set bInterval for CDC CMD Endpoint */
    pdev->ep_in[CDCCmdEpAdd & 0xFU].bInterval = CDC_HS_BINTERVAL;
 80083a6:	4b4b      	ldr	r3, [pc, #300]	; (80084d4 <USBD_CDC_Init+0x1ec>)
 80083a8:	781b      	ldrb	r3, [r3, #0]
 80083aa:	f003 020f 	and.w	r2, r3, #15
 80083ae:	6879      	ldr	r1, [r7, #4]
 80083b0:	4613      	mov	r3, r2
 80083b2:	009b      	lsls	r3, r3, #2
 80083b4:	4413      	add	r3, r2
 80083b6:	009b      	lsls	r3, r3, #2
 80083b8:	440b      	add	r3, r1
 80083ba:	3326      	adds	r3, #38	; 0x26
 80083bc:	2210      	movs	r2, #16
 80083be:	801a      	strh	r2, [r3, #0]
 80083c0:	e035      	b.n	800842e <USBD_CDC_Init+0x146>
  }
  else
  {
    /* Open EP IN */
    (void)USBD_LL_OpenEP(pdev, CDCInEpAdd, USBD_EP_TYPE_BULK,
 80083c2:	4b42      	ldr	r3, [pc, #264]	; (80084cc <USBD_CDC_Init+0x1e4>)
 80083c4:	7819      	ldrb	r1, [r3, #0]
 80083c6:	2340      	movs	r3, #64	; 0x40
 80083c8:	2202      	movs	r2, #2
 80083ca:	6878      	ldr	r0, [r7, #4]
 80083cc:	f00f fd65 	bl	8017e9a <USBD_LL_OpenEP>
                         CDC_DATA_FS_IN_PACKET_SIZE);

    pdev->ep_in[CDCInEpAdd & 0xFU].is_used = 1U;
 80083d0:	4b3e      	ldr	r3, [pc, #248]	; (80084cc <USBD_CDC_Init+0x1e4>)
 80083d2:	781b      	ldrb	r3, [r3, #0]
 80083d4:	f003 020f 	and.w	r2, r3, #15
 80083d8:	6879      	ldr	r1, [r7, #4]
 80083da:	4613      	mov	r3, r2
 80083dc:	009b      	lsls	r3, r3, #2
 80083de:	4413      	add	r3, r2
 80083e0:	009b      	lsls	r3, r3, #2
 80083e2:	440b      	add	r3, r1
 80083e4:	3324      	adds	r3, #36	; 0x24
 80083e6:	2201      	movs	r2, #1
 80083e8:	801a      	strh	r2, [r3, #0]

    /* Open EP OUT */
    (void)USBD_LL_OpenEP(pdev, CDCOutEpAdd, USBD_EP_TYPE_BULK,
 80083ea:	4b39      	ldr	r3, [pc, #228]	; (80084d0 <USBD_CDC_Init+0x1e8>)
 80083ec:	7819      	ldrb	r1, [r3, #0]
 80083ee:	2340      	movs	r3, #64	; 0x40
 80083f0:	2202      	movs	r2, #2
 80083f2:	6878      	ldr	r0, [r7, #4]
 80083f4:	f00f fd51 	bl	8017e9a <USBD_LL_OpenEP>
                         CDC_DATA_FS_OUT_PACKET_SIZE);

    pdev->ep_out[CDCOutEpAdd & 0xFU].is_used = 1U;
 80083f8:	4b35      	ldr	r3, [pc, #212]	; (80084d0 <USBD_CDC_Init+0x1e8>)
 80083fa:	781b      	ldrb	r3, [r3, #0]
 80083fc:	f003 020f 	and.w	r2, r3, #15
 8008400:	6879      	ldr	r1, [r7, #4]
 8008402:	4613      	mov	r3, r2
 8008404:	009b      	lsls	r3, r3, #2
 8008406:	4413      	add	r3, r2
 8008408:	009b      	lsls	r3, r3, #2
 800840a:	440b      	add	r3, r1
 800840c:	f503 73b2 	add.w	r3, r3, #356	; 0x164
 8008410:	2201      	movs	r2, #1
 8008412:	801a      	strh	r2, [r3, #0]

    /* Set bInterval for CMD Endpoint */
    pdev->ep_in[CDCCmdEpAdd & 0xFU].bInterval = CDC_FS_BINTERVAL;
 8008414:	4b2f      	ldr	r3, [pc, #188]	; (80084d4 <USBD_CDC_Init+0x1ec>)
 8008416:	781b      	ldrb	r3, [r3, #0]
 8008418:	f003 020f 	and.w	r2, r3, #15
 800841c:	6879      	ldr	r1, [r7, #4]
 800841e:	4613      	mov	r3, r2
 8008420:	009b      	lsls	r3, r3, #2
 8008422:	4413      	add	r3, r2
 8008424:	009b      	lsls	r3, r3, #2
 8008426:	440b      	add	r3, r1
 8008428:	3326      	adds	r3, #38	; 0x26
 800842a:	2210      	movs	r2, #16
 800842c:	801a      	strh	r2, [r3, #0]
  }

  /* Open Command IN EP */
  (void)USBD_LL_OpenEP(pdev, CDCCmdEpAdd, USBD_EP_TYPE_INTR, CDC_CMD_PACKET_SIZE);
 800842e:	4b29      	ldr	r3, [pc, #164]	; (80084d4 <USBD_CDC_Init+0x1ec>)
 8008430:	7819      	ldrb	r1, [r3, #0]
 8008432:	2308      	movs	r3, #8
 8008434:	2203      	movs	r2, #3
 8008436:	6878      	ldr	r0, [r7, #4]
 8008438:	f00f fd2f 	bl	8017e9a <USBD_LL_OpenEP>
  pdev->ep_in[CDCCmdEpAdd & 0xFU].is_used = 1U;
 800843c:	4b25      	ldr	r3, [pc, #148]	; (80084d4 <USBD_CDC_Init+0x1ec>)
 800843e:	781b      	ldrb	r3, [r3, #0]
 8008440:	f003 020f 	and.w	r2, r3, #15
 8008444:	6879      	ldr	r1, [r7, #4]
 8008446:	4613      	mov	r3, r2
 8008448:	009b      	lsls	r3, r3, #2
 800844a:	4413      	add	r3, r2
 800844c:	009b      	lsls	r3, r3, #2
 800844e:	440b      	add	r3, r1
 8008450:	3324      	adds	r3, #36	; 0x24
 8008452:	2201      	movs	r2, #1
 8008454:	801a      	strh	r2, [r3, #0]

  hcdc->RxBuffer = NULL;
 8008456:	68fb      	ldr	r3, [r7, #12]
 8008458:	2200      	movs	r2, #0
 800845a:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204

  /* Init  physical Interface components */
  ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Init();
 800845e:	687b      	ldr	r3, [r7, #4]
 8008460:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 8008464:	687a      	ldr	r2, [r7, #4]
 8008466:	33b0      	adds	r3, #176	; 0xb0
 8008468:	009b      	lsls	r3, r3, #2
 800846a:	4413      	add	r3, r2
 800846c:	685b      	ldr	r3, [r3, #4]
 800846e:	681b      	ldr	r3, [r3, #0]
 8008470:	4798      	blx	r3

  /* Init Xfer states */
  hcdc->TxState = 0U;
 8008472:	68fb      	ldr	r3, [r7, #12]
 8008474:	2200      	movs	r2, #0
 8008476:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
  hcdc->RxState = 0U;
 800847a:	68fb      	ldr	r3, [r7, #12]
 800847c:	2200      	movs	r2, #0
 800847e:	f8c3 2218 	str.w	r2, [r3, #536]	; 0x218

  if (hcdc->RxBuffer == NULL)
 8008482:	68fb      	ldr	r3, [r7, #12]
 8008484:	f8d3 3204 	ldr.w	r3, [r3, #516]	; 0x204
 8008488:	2b00      	cmp	r3, #0
 800848a:	d101      	bne.n	8008490 <USBD_CDC_Init+0x1a8>
  {
    return (uint8_t)USBD_EMEM;
 800848c:	2302      	movs	r3, #2
 800848e:	e018      	b.n	80084c2 <USBD_CDC_Init+0x1da>
  }

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 8008490:	687b      	ldr	r3, [r7, #4]
 8008492:	7c1b      	ldrb	r3, [r3, #16]
 8008494:	2b00      	cmp	r3, #0
 8008496:	d10a      	bne.n	80084ae <USBD_CDC_Init+0x1c6>
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 8008498:	4b0d      	ldr	r3, [pc, #52]	; (80084d0 <USBD_CDC_Init+0x1e8>)
 800849a:	7819      	ldrb	r1, [r3, #0]
 800849c:	68fb      	ldr	r3, [r7, #12]
 800849e:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 80084a2:	f44f 7300 	mov.w	r3, #512	; 0x200
 80084a6:	6878      	ldr	r0, [r7, #4]
 80084a8:	f00f fde6 	bl	8018078 <USBD_LL_PrepareReceive>
 80084ac:	e008      	b.n	80084c0 <USBD_CDC_Init+0x1d8>
                                 CDC_DATA_HS_OUT_PACKET_SIZE);
  }
  else
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 80084ae:	4b08      	ldr	r3, [pc, #32]	; (80084d0 <USBD_CDC_Init+0x1e8>)
 80084b0:	7819      	ldrb	r1, [r3, #0]
 80084b2:	68fb      	ldr	r3, [r7, #12]
 80084b4:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 80084b8:	2340      	movs	r3, #64	; 0x40
 80084ba:	6878      	ldr	r0, [r7, #4]
 80084bc:	f00f fddc 	bl	8018078 <USBD_LL_PrepareReceive>
                                 CDC_DATA_FS_OUT_PACKET_SIZE);
  }

  return (uint8_t)USBD_OK;
 80084c0:	2300      	movs	r3, #0
}
 80084c2:	4618      	mov	r0, r3
 80084c4:	3710      	adds	r7, #16
 80084c6:	46bd      	mov	sp, r7
 80084c8:	bd80      	pop	{r7, pc}
 80084ca:	bf00      	nop
 80084cc:	200000a7 	.word	0x200000a7
 80084d0:	200000a8 	.word	0x200000a8
 80084d4:	200000a9 	.word	0x200000a9

080084d8 <USBD_CDC_DeInit>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t USBD_CDC_DeInit(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 80084d8:	b580      	push	{r7, lr}
 80084da:	b082      	sub	sp, #8
 80084dc:	af00      	add	r7, sp, #0
 80084de:	6078      	str	r0, [r7, #4]
 80084e0:	460b      	mov	r3, r1
 80084e2:	70fb      	strb	r3, [r7, #3]
  CDCOutEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_OUT, USBD_EP_TYPE_BULK, (uint8_t)pdev->classId);
  CDCCmdEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_INTR, (uint8_t)pdev->classId);
#endif /* USE_USBD_COMPOSITE */

  /* Close EP IN */
  (void)USBD_LL_CloseEP(pdev, CDCInEpAdd);
 80084e4:	4b3a      	ldr	r3, [pc, #232]	; (80085d0 <USBD_CDC_DeInit+0xf8>)
 80084e6:	781b      	ldrb	r3, [r3, #0]
 80084e8:	4619      	mov	r1, r3
 80084ea:	6878      	ldr	r0, [r7, #4]
 80084ec:	f00f fcfb 	bl	8017ee6 <USBD_LL_CloseEP>
  pdev->ep_in[CDCInEpAdd & 0xFU].is_used = 0U;
 80084f0:	4b37      	ldr	r3, [pc, #220]	; (80085d0 <USBD_CDC_DeInit+0xf8>)
 80084f2:	781b      	ldrb	r3, [r3, #0]
 80084f4:	f003 020f 	and.w	r2, r3, #15
 80084f8:	6879      	ldr	r1, [r7, #4]
 80084fa:	4613      	mov	r3, r2
 80084fc:	009b      	lsls	r3, r3, #2
 80084fe:	4413      	add	r3, r2
 8008500:	009b      	lsls	r3, r3, #2
 8008502:	440b      	add	r3, r1
 8008504:	3324      	adds	r3, #36	; 0x24
 8008506:	2200      	movs	r2, #0
 8008508:	801a      	strh	r2, [r3, #0]

  /* Close EP OUT */
  (void)USBD_LL_CloseEP(pdev, CDCOutEpAdd);
 800850a:	4b32      	ldr	r3, [pc, #200]	; (80085d4 <USBD_CDC_DeInit+0xfc>)
 800850c:	781b      	ldrb	r3, [r3, #0]
 800850e:	4619      	mov	r1, r3
 8008510:	6878      	ldr	r0, [r7, #4]
 8008512:	f00f fce8 	bl	8017ee6 <USBD_LL_CloseEP>
  pdev->ep_out[CDCOutEpAdd & 0xFU].is_used = 0U;
 8008516:	4b2f      	ldr	r3, [pc, #188]	; (80085d4 <USBD_CDC_DeInit+0xfc>)
 8008518:	781b      	ldrb	r3, [r3, #0]
 800851a:	f003 020f 	and.w	r2, r3, #15
 800851e:	6879      	ldr	r1, [r7, #4]
 8008520:	4613      	mov	r3, r2
 8008522:	009b      	lsls	r3, r3, #2
 8008524:	4413      	add	r3, r2
 8008526:	009b      	lsls	r3, r3, #2
 8008528:	440b      	add	r3, r1
 800852a:	f503 73b2 	add.w	r3, r3, #356	; 0x164
 800852e:	2200      	movs	r2, #0
 8008530:	801a      	strh	r2, [r3, #0]

  /* Close Command IN EP */
  (void)USBD_LL_CloseEP(pdev, CDCCmdEpAdd);
 8008532:	4b29      	ldr	r3, [pc, #164]	; (80085d8 <USBD_CDC_DeInit+0x100>)
 8008534:	781b      	ldrb	r3, [r3, #0]
 8008536:	4619      	mov	r1, r3
 8008538:	6878      	ldr	r0, [r7, #4]
 800853a:	f00f fcd4 	bl	8017ee6 <USBD_LL_CloseEP>
  pdev->ep_in[CDCCmdEpAdd & 0xFU].is_used = 0U;
 800853e:	4b26      	ldr	r3, [pc, #152]	; (80085d8 <USBD_CDC_DeInit+0x100>)
 8008540:	781b      	ldrb	r3, [r3, #0]
 8008542:	f003 020f 	and.w	r2, r3, #15
 8008546:	6879      	ldr	r1, [r7, #4]
 8008548:	4613      	mov	r3, r2
 800854a:	009b      	lsls	r3, r3, #2
 800854c:	4413      	add	r3, r2
 800854e:	009b      	lsls	r3, r3, #2
 8008550:	440b      	add	r3, r1
 8008552:	3324      	adds	r3, #36	; 0x24
 8008554:	2200      	movs	r2, #0
 8008556:	801a      	strh	r2, [r3, #0]
  pdev->ep_in[CDCCmdEpAdd & 0xFU].bInterval = 0U;
 8008558:	4b1f      	ldr	r3, [pc, #124]	; (80085d8 <USBD_CDC_DeInit+0x100>)
 800855a:	781b      	ldrb	r3, [r3, #0]
 800855c:	f003 020f 	and.w	r2, r3, #15
 8008560:	6879      	ldr	r1, [r7, #4]
 8008562:	4613      	mov	r3, r2
 8008564:	009b      	lsls	r3, r3, #2
 8008566:	4413      	add	r3, r2
 8008568:	009b      	lsls	r3, r3, #2
 800856a:	440b      	add	r3, r1
 800856c:	3326      	adds	r3, #38	; 0x26
 800856e:	2200      	movs	r2, #0
 8008570:	801a      	strh	r2, [r3, #0]

  /* DeInit  physical Interface components */
  if (pdev->pClassDataCmsit[pdev->classId] != NULL)
 8008572:	687b      	ldr	r3, [r7, #4]
 8008574:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8008578:	687b      	ldr	r3, [r7, #4]
 800857a:	32b0      	adds	r2, #176	; 0xb0
 800857c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8008580:	2b00      	cmp	r3, #0
 8008582:	d01f      	beq.n	80085c4 <USBD_CDC_DeInit+0xec>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->DeInit();
 8008584:	687b      	ldr	r3, [r7, #4]
 8008586:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 800858a:	687a      	ldr	r2, [r7, #4]
 800858c:	33b0      	adds	r3, #176	; 0xb0
 800858e:	009b      	lsls	r3, r3, #2
 8008590:	4413      	add	r3, r2
 8008592:	685b      	ldr	r3, [r3, #4]
 8008594:	685b      	ldr	r3, [r3, #4]
 8008596:	4798      	blx	r3
    (void)USBD_free(pdev->pClassDataCmsit[pdev->classId]);
 8008598:	687b      	ldr	r3, [r7, #4]
 800859a:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800859e:	687b      	ldr	r3, [r7, #4]
 80085a0:	32b0      	adds	r2, #176	; 0xb0
 80085a2:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80085a6:	4618      	mov	r0, r3
 80085a8:	f00f fda8 	bl	80180fc <USBD_static_free>
    pdev->pClassDataCmsit[pdev->classId] = NULL;
 80085ac:	687b      	ldr	r3, [r7, #4]
 80085ae:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 80085b2:	687b      	ldr	r3, [r7, #4]
 80085b4:	32b0      	adds	r2, #176	; 0xb0
 80085b6:	2100      	movs	r1, #0
 80085b8:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
    pdev->pClassData = NULL;
 80085bc:	687b      	ldr	r3, [r7, #4]
 80085be:	2200      	movs	r2, #0
 80085c0:	f8c3 22bc 	str.w	r2, [r3, #700]	; 0x2bc
  }

  return (uint8_t)USBD_OK;
 80085c4:	2300      	movs	r3, #0
}
 80085c6:	4618      	mov	r0, r3
 80085c8:	3708      	adds	r7, #8
 80085ca:	46bd      	mov	sp, r7
 80085cc:	bd80      	pop	{r7, pc}
 80085ce:	bf00      	nop
 80085d0:	200000a7 	.word	0x200000a7
 80085d4:	200000a8 	.word	0x200000a8
 80085d8:	200000a9 	.word	0x200000a9

080085dc <USBD_CDC_Setup>:
  * @param  req: usb requests
  * @retval status
  */
static uint8_t USBD_CDC_Setup(USBD_HandleTypeDef *pdev,
                              USBD_SetupReqTypedef *req)
{
 80085dc:	b580      	push	{r7, lr}
 80085de:	b086      	sub	sp, #24
 80085e0:	af00      	add	r7, sp, #0
 80085e2:	6078      	str	r0, [r7, #4]
 80085e4:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 80085e6:	687b      	ldr	r3, [r7, #4]
 80085e8:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 80085ec:	687b      	ldr	r3, [r7, #4]
 80085ee:	32b0      	adds	r2, #176	; 0xb0
 80085f0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80085f4:	613b      	str	r3, [r7, #16]
  uint16_t len;
  uint8_t ifalt = 0U;
 80085f6:	2300      	movs	r3, #0
 80085f8:	737b      	strb	r3, [r7, #13]
  uint16_t status_info = 0U;
 80085fa:	2300      	movs	r3, #0
 80085fc:	817b      	strh	r3, [r7, #10]
  USBD_StatusTypeDef ret = USBD_OK;
 80085fe:	2300      	movs	r3, #0
 8008600:	75fb      	strb	r3, [r7, #23]

  if (hcdc == NULL)
 8008602:	693b      	ldr	r3, [r7, #16]
 8008604:	2b00      	cmp	r3, #0
 8008606:	d101      	bne.n	800860c <USBD_CDC_Setup+0x30>
  {
    return (uint8_t)USBD_FAIL;
 8008608:	2303      	movs	r3, #3
 800860a:	e0bf      	b.n	800878c <USBD_CDC_Setup+0x1b0>
  }

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800860c:	683b      	ldr	r3, [r7, #0]
 800860e:	781b      	ldrb	r3, [r3, #0]
 8008610:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8008614:	2b00      	cmp	r3, #0
 8008616:	d050      	beq.n	80086ba <USBD_CDC_Setup+0xde>
 8008618:	2b20      	cmp	r3, #32
 800861a:	f040 80af 	bne.w	800877c <USBD_CDC_Setup+0x1a0>
  {
    case USB_REQ_TYPE_CLASS:
      if (req->wLength != 0U)
 800861e:	683b      	ldr	r3, [r7, #0]
 8008620:	88db      	ldrh	r3, [r3, #6]
 8008622:	2b00      	cmp	r3, #0
 8008624:	d03a      	beq.n	800869c <USBD_CDC_Setup+0xc0>
      {
        if ((req->bmRequest & 0x80U) != 0U)
 8008626:	683b      	ldr	r3, [r7, #0]
 8008628:	781b      	ldrb	r3, [r3, #0]
 800862a:	b25b      	sxtb	r3, r3
 800862c:	2b00      	cmp	r3, #0
 800862e:	da1b      	bge.n	8008668 <USBD_CDC_Setup+0x8c>
        {
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
 8008630:	687b      	ldr	r3, [r7, #4]
 8008632:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 8008636:	687a      	ldr	r2, [r7, #4]
 8008638:	33b0      	adds	r3, #176	; 0xb0
 800863a:	009b      	lsls	r3, r3, #2
 800863c:	4413      	add	r3, r2
 800863e:	685b      	ldr	r3, [r3, #4]
 8008640:	689b      	ldr	r3, [r3, #8]
 8008642:	683a      	ldr	r2, [r7, #0]
 8008644:	7850      	ldrb	r0, [r2, #1]
                                                                           (uint8_t *)hcdc->data,
 8008646:	6939      	ldr	r1, [r7, #16]
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
 8008648:	683a      	ldr	r2, [r7, #0]
 800864a:	88d2      	ldrh	r2, [r2, #6]
 800864c:	4798      	blx	r3
                                                                           req->wLength);

          len = MIN(CDC_REQ_MAX_DATA_SIZE, req->wLength);
 800864e:	683b      	ldr	r3, [r7, #0]
 8008650:	88db      	ldrh	r3, [r3, #6]
 8008652:	2b07      	cmp	r3, #7
 8008654:	bf28      	it	cs
 8008656:	2307      	movcs	r3, #7
 8008658:	81fb      	strh	r3, [r7, #14]
          (void)USBD_CtlSendData(pdev, (uint8_t *)hcdc->data, len);
 800865a:	693b      	ldr	r3, [r7, #16]
 800865c:	89fa      	ldrh	r2, [r7, #14]
 800865e:	4619      	mov	r1, r3
 8008660:	6878      	ldr	r0, [r7, #4]
 8008662:	f001 fd95 	bl	800a190 <USBD_CtlSendData>
      else
      {
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
                                                                         (uint8_t *)req, 0U);
      }
      break;
 8008666:	e090      	b.n	800878a <USBD_CDC_Setup+0x1ae>
          hcdc->CmdOpCode = req->bRequest;
 8008668:	683b      	ldr	r3, [r7, #0]
 800866a:	785a      	ldrb	r2, [r3, #1]
 800866c:	693b      	ldr	r3, [r7, #16]
 800866e:	f883 2200 	strb.w	r2, [r3, #512]	; 0x200
          hcdc->CmdLength = (uint8_t)MIN(req->wLength, USB_MAX_EP0_SIZE);
 8008672:	683b      	ldr	r3, [r7, #0]
 8008674:	88db      	ldrh	r3, [r3, #6]
 8008676:	2b3f      	cmp	r3, #63	; 0x3f
 8008678:	d803      	bhi.n	8008682 <USBD_CDC_Setup+0xa6>
 800867a:	683b      	ldr	r3, [r7, #0]
 800867c:	88db      	ldrh	r3, [r3, #6]
 800867e:	b2da      	uxtb	r2, r3
 8008680:	e000      	b.n	8008684 <USBD_CDC_Setup+0xa8>
 8008682:	2240      	movs	r2, #64	; 0x40
 8008684:	693b      	ldr	r3, [r7, #16]
 8008686:	f883 2201 	strb.w	r2, [r3, #513]	; 0x201
          (void)USBD_CtlPrepareRx(pdev, (uint8_t *)hcdc->data, hcdc->CmdLength);
 800868a:	6939      	ldr	r1, [r7, #16]
 800868c:	693b      	ldr	r3, [r7, #16]
 800868e:	f893 3201 	ldrb.w	r3, [r3, #513]	; 0x201
 8008692:	461a      	mov	r2, r3
 8008694:	6878      	ldr	r0, [r7, #4]
 8008696:	f001 fda7 	bl	800a1e8 <USBD_CtlPrepareRx>
      break;
 800869a:	e076      	b.n	800878a <USBD_CDC_Setup+0x1ae>
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
 800869c:	687b      	ldr	r3, [r7, #4]
 800869e:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 80086a2:	687a      	ldr	r2, [r7, #4]
 80086a4:	33b0      	adds	r3, #176	; 0xb0
 80086a6:	009b      	lsls	r3, r3, #2
 80086a8:	4413      	add	r3, r2
 80086aa:	685b      	ldr	r3, [r3, #4]
 80086ac:	689b      	ldr	r3, [r3, #8]
 80086ae:	683a      	ldr	r2, [r7, #0]
 80086b0:	7850      	ldrb	r0, [r2, #1]
 80086b2:	2200      	movs	r2, #0
 80086b4:	6839      	ldr	r1, [r7, #0]
 80086b6:	4798      	blx	r3
      break;
 80086b8:	e067      	b.n	800878a <USBD_CDC_Setup+0x1ae>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 80086ba:	683b      	ldr	r3, [r7, #0]
 80086bc:	785b      	ldrb	r3, [r3, #1]
 80086be:	2b0b      	cmp	r3, #11
 80086c0:	d851      	bhi.n	8008766 <USBD_CDC_Setup+0x18a>
 80086c2:	a201      	add	r2, pc, #4	; (adr r2, 80086c8 <USBD_CDC_Setup+0xec>)
 80086c4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80086c8:	080086f9 	.word	0x080086f9
 80086cc:	08008775 	.word	0x08008775
 80086d0:	08008767 	.word	0x08008767
 80086d4:	08008767 	.word	0x08008767
 80086d8:	08008767 	.word	0x08008767
 80086dc:	08008767 	.word	0x08008767
 80086e0:	08008767 	.word	0x08008767
 80086e4:	08008767 	.word	0x08008767
 80086e8:	08008767 	.word	0x08008767
 80086ec:	08008767 	.word	0x08008767
 80086f0:	08008723 	.word	0x08008723
 80086f4:	0800874d 	.word	0x0800874d
      {
        case USB_REQ_GET_STATUS:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80086f8:	687b      	ldr	r3, [r7, #4]
 80086fa:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80086fe:	b2db      	uxtb	r3, r3
 8008700:	2b03      	cmp	r3, #3
 8008702:	d107      	bne.n	8008714 <USBD_CDC_Setup+0x138>
          {
            (void)USBD_CtlSendData(pdev, (uint8_t *)&status_info, 2U);
 8008704:	f107 030a 	add.w	r3, r7, #10
 8008708:	2202      	movs	r2, #2
 800870a:	4619      	mov	r1, r3
 800870c:	6878      	ldr	r0, [r7, #4]
 800870e:	f001 fd3f 	bl	800a190 <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 8008712:	e032      	b.n	800877a <USBD_CDC_Setup+0x19e>
            USBD_CtlError(pdev, req);
 8008714:	6839      	ldr	r1, [r7, #0]
 8008716:	6878      	ldr	r0, [r7, #4]
 8008718:	f001 fcbd 	bl	800a096 <USBD_CtlError>
            ret = USBD_FAIL;
 800871c:	2303      	movs	r3, #3
 800871e:	75fb      	strb	r3, [r7, #23]
          break;
 8008720:	e02b      	b.n	800877a <USBD_CDC_Setup+0x19e>

        case USB_REQ_GET_INTERFACE:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8008722:	687b      	ldr	r3, [r7, #4]
 8008724:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8008728:	b2db      	uxtb	r3, r3
 800872a:	2b03      	cmp	r3, #3
 800872c:	d107      	bne.n	800873e <USBD_CDC_Setup+0x162>
          {
            (void)USBD_CtlSendData(pdev, &ifalt, 1U);
 800872e:	f107 030d 	add.w	r3, r7, #13
 8008732:	2201      	movs	r2, #1
 8008734:	4619      	mov	r1, r3
 8008736:	6878      	ldr	r0, [r7, #4]
 8008738:	f001 fd2a 	bl	800a190 <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 800873c:	e01d      	b.n	800877a <USBD_CDC_Setup+0x19e>
            USBD_CtlError(pdev, req);
 800873e:	6839      	ldr	r1, [r7, #0]
 8008740:	6878      	ldr	r0, [r7, #4]
 8008742:	f001 fca8 	bl	800a096 <USBD_CtlError>
            ret = USBD_FAIL;
 8008746:	2303      	movs	r3, #3
 8008748:	75fb      	strb	r3, [r7, #23]
          break;
 800874a:	e016      	b.n	800877a <USBD_CDC_Setup+0x19e>

        case USB_REQ_SET_INTERFACE:
          if (pdev->dev_state != USBD_STATE_CONFIGURED)
 800874c:	687b      	ldr	r3, [r7, #4]
 800874e:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8008752:	b2db      	uxtb	r3, r3
 8008754:	2b03      	cmp	r3, #3
 8008756:	d00f      	beq.n	8008778 <USBD_CDC_Setup+0x19c>
          {
            USBD_CtlError(pdev, req);
 8008758:	6839      	ldr	r1, [r7, #0]
 800875a:	6878      	ldr	r0, [r7, #4]
 800875c:	f001 fc9b 	bl	800a096 <USBD_CtlError>
            ret = USBD_FAIL;
 8008760:	2303      	movs	r3, #3
 8008762:	75fb      	strb	r3, [r7, #23]
          }
          break;
 8008764:	e008      	b.n	8008778 <USBD_CDC_Setup+0x19c>

        case USB_REQ_CLEAR_FEATURE:
          break;

        default:
          USBD_CtlError(pdev, req);
 8008766:	6839      	ldr	r1, [r7, #0]
 8008768:	6878      	ldr	r0, [r7, #4]
 800876a:	f001 fc94 	bl	800a096 <USBD_CtlError>
          ret = USBD_FAIL;
 800876e:	2303      	movs	r3, #3
 8008770:	75fb      	strb	r3, [r7, #23]
          break;
 8008772:	e002      	b.n	800877a <USBD_CDC_Setup+0x19e>
          break;
 8008774:	bf00      	nop
 8008776:	e008      	b.n	800878a <USBD_CDC_Setup+0x1ae>
          break;
 8008778:	bf00      	nop
      }
      break;
 800877a:	e006      	b.n	800878a <USBD_CDC_Setup+0x1ae>

    default:
      USBD_CtlError(pdev, req);
 800877c:	6839      	ldr	r1, [r7, #0]
 800877e:	6878      	ldr	r0, [r7, #4]
 8008780:	f001 fc89 	bl	800a096 <USBD_CtlError>
      ret = USBD_FAIL;
 8008784:	2303      	movs	r3, #3
 8008786:	75fb      	strb	r3, [r7, #23]
      break;
 8008788:	bf00      	nop
  }

  return (uint8_t)ret;
 800878a:	7dfb      	ldrb	r3, [r7, #23]
}
 800878c:	4618      	mov	r0, r3
 800878e:	3718      	adds	r7, #24
 8008790:	46bd      	mov	sp, r7
 8008792:	bd80      	pop	{r7, pc}

08008794 <USBD_CDC_DataIn>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t USBD_CDC_DataIn(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 8008794:	b580      	push	{r7, lr}
 8008796:	b084      	sub	sp, #16
 8008798:	af00      	add	r7, sp, #0
 800879a:	6078      	str	r0, [r7, #4]
 800879c:	460b      	mov	r3, r1
 800879e:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef *hcdc;
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef *)pdev->pData;
 80087a0:	687b      	ldr	r3, [r7, #4]
 80087a2:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 80087a6:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassDataCmsit[pdev->classId] == NULL)
 80087a8:	687b      	ldr	r3, [r7, #4]
 80087aa:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 80087ae:	687b      	ldr	r3, [r7, #4]
 80087b0:	32b0      	adds	r2, #176	; 0xb0
 80087b2:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80087b6:	2b00      	cmp	r3, #0
 80087b8:	d101      	bne.n	80087be <USBD_CDC_DataIn+0x2a>
  {
    return (uint8_t)USBD_FAIL;
 80087ba:	2303      	movs	r3, #3
 80087bc:	e065      	b.n	800888a <USBD_CDC_DataIn+0xf6>
  }

  hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 80087be:	687b      	ldr	r3, [r7, #4]
 80087c0:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 80087c4:	687b      	ldr	r3, [r7, #4]
 80087c6:	32b0      	adds	r2, #176	; 0xb0
 80087c8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80087cc:	60bb      	str	r3, [r7, #8]

  if ((pdev->ep_in[epnum & 0xFU].total_length > 0U) &&
 80087ce:	78fb      	ldrb	r3, [r7, #3]
 80087d0:	f003 020f 	and.w	r2, r3, #15
 80087d4:	6879      	ldr	r1, [r7, #4]
 80087d6:	4613      	mov	r3, r2
 80087d8:	009b      	lsls	r3, r3, #2
 80087da:	4413      	add	r3, r2
 80087dc:	009b      	lsls	r3, r3, #2
 80087de:	440b      	add	r3, r1
 80087e0:	3318      	adds	r3, #24
 80087e2:	681b      	ldr	r3, [r3, #0]
 80087e4:	2b00      	cmp	r3, #0
 80087e6:	d02f      	beq.n	8008848 <USBD_CDC_DataIn+0xb4>
      ((pdev->ep_in[epnum & 0xFU].total_length % hpcd->IN_ep[epnum & 0xFU].maxpacket) == 0U))
 80087e8:	78fb      	ldrb	r3, [r7, #3]
 80087ea:	f003 020f 	and.w	r2, r3, #15
 80087ee:	6879      	ldr	r1, [r7, #4]
 80087f0:	4613      	mov	r3, r2
 80087f2:	009b      	lsls	r3, r3, #2
 80087f4:	4413      	add	r3, r2
 80087f6:	009b      	lsls	r3, r3, #2
 80087f8:	440b      	add	r3, r1
 80087fa:	3318      	adds	r3, #24
 80087fc:	681a      	ldr	r2, [r3, #0]
 80087fe:	78fb      	ldrb	r3, [r7, #3]
 8008800:	f003 010f 	and.w	r1, r3, #15
 8008804:	68f8      	ldr	r0, [r7, #12]
 8008806:	460b      	mov	r3, r1
 8008808:	00db      	lsls	r3, r3, #3
 800880a:	440b      	add	r3, r1
 800880c:	009b      	lsls	r3, r3, #2
 800880e:	4403      	add	r3, r0
 8008810:	331c      	adds	r3, #28
 8008812:	681b      	ldr	r3, [r3, #0]
 8008814:	fbb2 f1f3 	udiv	r1, r2, r3
 8008818:	fb01 f303 	mul.w	r3, r1, r3
 800881c:	1ad3      	subs	r3, r2, r3
  if ((pdev->ep_in[epnum & 0xFU].total_length > 0U) &&
 800881e:	2b00      	cmp	r3, #0
 8008820:	d112      	bne.n	8008848 <USBD_CDC_DataIn+0xb4>
  {
    /* Update the packet total length */
    pdev->ep_in[epnum & 0xFU].total_length = 0U;
 8008822:	78fb      	ldrb	r3, [r7, #3]
 8008824:	f003 020f 	and.w	r2, r3, #15
 8008828:	6879      	ldr	r1, [r7, #4]
 800882a:	4613      	mov	r3, r2
 800882c:	009b      	lsls	r3, r3, #2
 800882e:	4413      	add	r3, r2
 8008830:	009b      	lsls	r3, r3, #2
 8008832:	440b      	add	r3, r1
 8008834:	3318      	adds	r3, #24
 8008836:	2200      	movs	r2, #0
 8008838:	601a      	str	r2, [r3, #0]

    /* Send ZLP */
    (void)USBD_LL_Transmit(pdev, epnum, NULL, 0U);
 800883a:	78f9      	ldrb	r1, [r7, #3]
 800883c:	2300      	movs	r3, #0
 800883e:	2200      	movs	r2, #0
 8008840:	6878      	ldr	r0, [r7, #4]
 8008842:	f00f fbf8 	bl	8018036 <USBD_LL_Transmit>
 8008846:	e01f      	b.n	8008888 <USBD_CDC_DataIn+0xf4>
  }
  else
  {
    hcdc->TxState = 0U;
 8008848:	68bb      	ldr	r3, [r7, #8]
 800884a:	2200      	movs	r2, #0
 800884c:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214

    if (((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->TransmitCplt != NULL)
 8008850:	687b      	ldr	r3, [r7, #4]
 8008852:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 8008856:	687a      	ldr	r2, [r7, #4]
 8008858:	33b0      	adds	r3, #176	; 0xb0
 800885a:	009b      	lsls	r3, r3, #2
 800885c:	4413      	add	r3, r2
 800885e:	685b      	ldr	r3, [r3, #4]
 8008860:	691b      	ldr	r3, [r3, #16]
 8008862:	2b00      	cmp	r3, #0
 8008864:	d010      	beq.n	8008888 <USBD_CDC_DataIn+0xf4>
    {
      ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->TransmitCplt(hcdc->TxBuffer, &hcdc->TxLength, epnum);
 8008866:	687b      	ldr	r3, [r7, #4]
 8008868:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 800886c:	687a      	ldr	r2, [r7, #4]
 800886e:	33b0      	adds	r3, #176	; 0xb0
 8008870:	009b      	lsls	r3, r3, #2
 8008872:	4413      	add	r3, r2
 8008874:	685b      	ldr	r3, [r3, #4]
 8008876:	691b      	ldr	r3, [r3, #16]
 8008878:	68ba      	ldr	r2, [r7, #8]
 800887a:	f8d2 0208 	ldr.w	r0, [r2, #520]	; 0x208
 800887e:	68ba      	ldr	r2, [r7, #8]
 8008880:	f502 7104 	add.w	r1, r2, #528	; 0x210
 8008884:	78fa      	ldrb	r2, [r7, #3]
 8008886:	4798      	blx	r3
    }
  }

  return (uint8_t)USBD_OK;
 8008888:	2300      	movs	r3, #0
}
 800888a:	4618      	mov	r0, r3
 800888c:	3710      	adds	r7, #16
 800888e:	46bd      	mov	sp, r7
 8008890:	bd80      	pop	{r7, pc}

08008892 <USBD_CDC_DataOut>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t USBD_CDC_DataOut(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 8008892:	b580      	push	{r7, lr}
 8008894:	b084      	sub	sp, #16
 8008896:	af00      	add	r7, sp, #0
 8008898:	6078      	str	r0, [r7, #4]
 800889a:	460b      	mov	r3, r1
 800889c:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 800889e:	687b      	ldr	r3, [r7, #4]
 80088a0:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 80088a4:	687b      	ldr	r3, [r7, #4]
 80088a6:	32b0      	adds	r2, #176	; 0xb0
 80088a8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80088ac:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassDataCmsit[pdev->classId] == NULL)
 80088ae:	687b      	ldr	r3, [r7, #4]
 80088b0:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 80088b4:	687b      	ldr	r3, [r7, #4]
 80088b6:	32b0      	adds	r2, #176	; 0xb0
 80088b8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80088bc:	2b00      	cmp	r3, #0
 80088be:	d101      	bne.n	80088c4 <USBD_CDC_DataOut+0x32>
  {
    return (uint8_t)USBD_FAIL;
 80088c0:	2303      	movs	r3, #3
 80088c2:	e01a      	b.n	80088fa <USBD_CDC_DataOut+0x68>
  }

  /* Get the received data length */
  hcdc->RxLength = USBD_LL_GetRxDataSize(pdev, epnum);
 80088c4:	78fb      	ldrb	r3, [r7, #3]
 80088c6:	4619      	mov	r1, r3
 80088c8:	6878      	ldr	r0, [r7, #4]
 80088ca:	f00f fbf6 	bl	80180ba <USBD_LL_GetRxDataSize>
 80088ce:	4602      	mov	r2, r0
 80088d0:	68fb      	ldr	r3, [r7, #12]
 80088d2:	f8c3 220c 	str.w	r2, [r3, #524]	; 0x20c

  /* USB data will be immediately processed, this allow next USB traffic being
  NAKed till the end of the application Xfer */

  ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Receive(hcdc->RxBuffer, &hcdc->RxLength);
 80088d6:	687b      	ldr	r3, [r7, #4]
 80088d8:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 80088dc:	687a      	ldr	r2, [r7, #4]
 80088de:	33b0      	adds	r3, #176	; 0xb0
 80088e0:	009b      	lsls	r3, r3, #2
 80088e2:	4413      	add	r3, r2
 80088e4:	685b      	ldr	r3, [r3, #4]
 80088e6:	68db      	ldr	r3, [r3, #12]
 80088e8:	68fa      	ldr	r2, [r7, #12]
 80088ea:	f8d2 0204 	ldr.w	r0, [r2, #516]	; 0x204
 80088ee:	68fa      	ldr	r2, [r7, #12]
 80088f0:	f502 7203 	add.w	r2, r2, #524	; 0x20c
 80088f4:	4611      	mov	r1, r2
 80088f6:	4798      	blx	r3

  return (uint8_t)USBD_OK;
 80088f8:	2300      	movs	r3, #0
}
 80088fa:	4618      	mov	r0, r3
 80088fc:	3710      	adds	r7, #16
 80088fe:	46bd      	mov	sp, r7
 8008900:	bd80      	pop	{r7, pc}

08008902 <USBD_CDC_EP0_RxReady>:
  *         Handle EP0 Rx Ready event
  * @param  pdev: device instance
  * @retval status
  */
static uint8_t USBD_CDC_EP0_RxReady(USBD_HandleTypeDef *pdev)
{
 8008902:	b580      	push	{r7, lr}
 8008904:	b084      	sub	sp, #16
 8008906:	af00      	add	r7, sp, #0
 8008908:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 800890a:	687b      	ldr	r3, [r7, #4]
 800890c:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8008910:	687b      	ldr	r3, [r7, #4]
 8008912:	32b0      	adds	r2, #176	; 0xb0
 8008914:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8008918:	60fb      	str	r3, [r7, #12]

  if (hcdc == NULL)
 800891a:	68fb      	ldr	r3, [r7, #12]
 800891c:	2b00      	cmp	r3, #0
 800891e:	d101      	bne.n	8008924 <USBD_CDC_EP0_RxReady+0x22>
  {
    return (uint8_t)USBD_FAIL;
 8008920:	2303      	movs	r3, #3
 8008922:	e025      	b.n	8008970 <USBD_CDC_EP0_RxReady+0x6e>
  }

  if ((pdev->pUserData[pdev->classId] != NULL) && (hcdc->CmdOpCode != 0xFFU))
 8008924:	687b      	ldr	r3, [r7, #4]
 8008926:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 800892a:	687a      	ldr	r2, [r7, #4]
 800892c:	33b0      	adds	r3, #176	; 0xb0
 800892e:	009b      	lsls	r3, r3, #2
 8008930:	4413      	add	r3, r2
 8008932:	685b      	ldr	r3, [r3, #4]
 8008934:	2b00      	cmp	r3, #0
 8008936:	d01a      	beq.n	800896e <USBD_CDC_EP0_RxReady+0x6c>
 8008938:	68fb      	ldr	r3, [r7, #12]
 800893a:	f893 3200 	ldrb.w	r3, [r3, #512]	; 0x200
 800893e:	2bff      	cmp	r3, #255	; 0xff
 8008940:	d015      	beq.n	800896e <USBD_CDC_EP0_RxReady+0x6c>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(hcdc->CmdOpCode,
 8008942:	687b      	ldr	r3, [r7, #4]
 8008944:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 8008948:	687a      	ldr	r2, [r7, #4]
 800894a:	33b0      	adds	r3, #176	; 0xb0
 800894c:	009b      	lsls	r3, r3, #2
 800894e:	4413      	add	r3, r2
 8008950:	685b      	ldr	r3, [r3, #4]
 8008952:	689b      	ldr	r3, [r3, #8]
 8008954:	68fa      	ldr	r2, [r7, #12]
 8008956:	f892 0200 	ldrb.w	r0, [r2, #512]	; 0x200
                                                                     (uint8_t *)hcdc->data,
 800895a:	68f9      	ldr	r1, [r7, #12]
                                                                     (uint16_t)hcdc->CmdLength);
 800895c:	68fa      	ldr	r2, [r7, #12]
 800895e:	f892 2201 	ldrb.w	r2, [r2, #513]	; 0x201
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(hcdc->CmdOpCode,
 8008962:	b292      	uxth	r2, r2
 8008964:	4798      	blx	r3
    hcdc->CmdOpCode = 0xFFU;
 8008966:	68fb      	ldr	r3, [r7, #12]
 8008968:	22ff      	movs	r2, #255	; 0xff
 800896a:	f883 2200 	strb.w	r2, [r3, #512]	; 0x200
  }

  return (uint8_t)USBD_OK;
 800896e:	2300      	movs	r3, #0
}
 8008970:	4618      	mov	r0, r3
 8008972:	3710      	adds	r7, #16
 8008974:	46bd      	mov	sp, r7
 8008976:	bd80      	pop	{r7, pc}

08008978 <USBD_CDC_GetFSCfgDesc>:
  *         Return configuration descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetFSCfgDesc(uint16_t *length)
{
 8008978:	b580      	push	{r7, lr}
 800897a:	b086      	sub	sp, #24
 800897c:	af00      	add	r7, sp, #0
 800897e:	6078      	str	r0, [r7, #4]
  USBD_EpDescTypeDef *pEpCmdDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_CMD_EP);
 8008980:	2182      	movs	r1, #130	; 0x82
 8008982:	4818      	ldr	r0, [pc, #96]	; (80089e4 <USBD_CDC_GetFSCfgDesc+0x6c>)
 8008984:	f000 fd4f 	bl	8009426 <USBD_GetEpDesc>
 8008988:	6178      	str	r0, [r7, #20]
  USBD_EpDescTypeDef *pEpOutDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_OUT_EP);
 800898a:	2101      	movs	r1, #1
 800898c:	4815      	ldr	r0, [pc, #84]	; (80089e4 <USBD_CDC_GetFSCfgDesc+0x6c>)
 800898e:	f000 fd4a 	bl	8009426 <USBD_GetEpDesc>
 8008992:	6138      	str	r0, [r7, #16]
  USBD_EpDescTypeDef *pEpInDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_IN_EP);
 8008994:	2181      	movs	r1, #129	; 0x81
 8008996:	4813      	ldr	r0, [pc, #76]	; (80089e4 <USBD_CDC_GetFSCfgDesc+0x6c>)
 8008998:	f000 fd45 	bl	8009426 <USBD_GetEpDesc>
 800899c:	60f8      	str	r0, [r7, #12]

  if (pEpCmdDesc != NULL)
 800899e:	697b      	ldr	r3, [r7, #20]
 80089a0:	2b00      	cmp	r3, #0
 80089a2:	d002      	beq.n	80089aa <USBD_CDC_GetFSCfgDesc+0x32>
  {
    pEpCmdDesc->bInterval = CDC_FS_BINTERVAL;
 80089a4:	697b      	ldr	r3, [r7, #20]
 80089a6:	2210      	movs	r2, #16
 80089a8:	719a      	strb	r2, [r3, #6]
  }

  if (pEpOutDesc != NULL)
 80089aa:	693b      	ldr	r3, [r7, #16]
 80089ac:	2b00      	cmp	r3, #0
 80089ae:	d006      	beq.n	80089be <USBD_CDC_GetFSCfgDesc+0x46>
  {
    pEpOutDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 80089b0:	693b      	ldr	r3, [r7, #16]
 80089b2:	2200      	movs	r2, #0
 80089b4:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80089b8:	711a      	strb	r2, [r3, #4]
 80089ba:	2200      	movs	r2, #0
 80089bc:	715a      	strb	r2, [r3, #5]
  }

  if (pEpInDesc != NULL)
 80089be:	68fb      	ldr	r3, [r7, #12]
 80089c0:	2b00      	cmp	r3, #0
 80089c2:	d006      	beq.n	80089d2 <USBD_CDC_GetFSCfgDesc+0x5a>
  {
    pEpInDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 80089c4:	68fb      	ldr	r3, [r7, #12]
 80089c6:	2200      	movs	r2, #0
 80089c8:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80089cc:	711a      	strb	r2, [r3, #4]
 80089ce:	2200      	movs	r2, #0
 80089d0:	715a      	strb	r2, [r3, #5]
  }

  *length = (uint16_t)sizeof(USBD_CDC_CfgDesc);
 80089d2:	687b      	ldr	r3, [r7, #4]
 80089d4:	2243      	movs	r2, #67	; 0x43
 80089d6:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgDesc;
 80089d8:	4b02      	ldr	r3, [pc, #8]	; (80089e4 <USBD_CDC_GetFSCfgDesc+0x6c>)
}
 80089da:	4618      	mov	r0, r3
 80089dc:	3718      	adds	r7, #24
 80089de:	46bd      	mov	sp, r7
 80089e0:	bd80      	pop	{r7, pc}
 80089e2:	bf00      	nop
 80089e4:	20000064 	.word	0x20000064

080089e8 <USBD_CDC_GetHSCfgDesc>:
  *         Return configuration descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetHSCfgDesc(uint16_t *length)
{
 80089e8:	b580      	push	{r7, lr}
 80089ea:	b086      	sub	sp, #24
 80089ec:	af00      	add	r7, sp, #0
 80089ee:	6078      	str	r0, [r7, #4]
  USBD_EpDescTypeDef *pEpCmdDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_CMD_EP);
 80089f0:	2182      	movs	r1, #130	; 0x82
 80089f2:	4818      	ldr	r0, [pc, #96]	; (8008a54 <USBD_CDC_GetHSCfgDesc+0x6c>)
 80089f4:	f000 fd17 	bl	8009426 <USBD_GetEpDesc>
 80089f8:	6178      	str	r0, [r7, #20]
  USBD_EpDescTypeDef *pEpOutDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_OUT_EP);
 80089fa:	2101      	movs	r1, #1
 80089fc:	4815      	ldr	r0, [pc, #84]	; (8008a54 <USBD_CDC_GetHSCfgDesc+0x6c>)
 80089fe:	f000 fd12 	bl	8009426 <USBD_GetEpDesc>
 8008a02:	6138      	str	r0, [r7, #16]
  USBD_EpDescTypeDef *pEpInDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_IN_EP);
 8008a04:	2181      	movs	r1, #129	; 0x81
 8008a06:	4813      	ldr	r0, [pc, #76]	; (8008a54 <USBD_CDC_GetHSCfgDesc+0x6c>)
 8008a08:	f000 fd0d 	bl	8009426 <USBD_GetEpDesc>
 8008a0c:	60f8      	str	r0, [r7, #12]

  if (pEpCmdDesc != NULL)
 8008a0e:	697b      	ldr	r3, [r7, #20]
 8008a10:	2b00      	cmp	r3, #0
 8008a12:	d002      	beq.n	8008a1a <USBD_CDC_GetHSCfgDesc+0x32>
  {
    pEpCmdDesc->bInterval = CDC_HS_BINTERVAL;
 8008a14:	697b      	ldr	r3, [r7, #20]
 8008a16:	2210      	movs	r2, #16
 8008a18:	719a      	strb	r2, [r3, #6]
  }

  if (pEpOutDesc != NULL)
 8008a1a:	693b      	ldr	r3, [r7, #16]
 8008a1c:	2b00      	cmp	r3, #0
 8008a1e:	d006      	beq.n	8008a2e <USBD_CDC_GetHSCfgDesc+0x46>
  {
    pEpOutDesc->wMaxPacketSize = CDC_DATA_HS_MAX_PACKET_SIZE;
 8008a20:	693b      	ldr	r3, [r7, #16]
 8008a22:	2200      	movs	r2, #0
 8008a24:	711a      	strb	r2, [r3, #4]
 8008a26:	2200      	movs	r2, #0
 8008a28:	f042 0202 	orr.w	r2, r2, #2
 8008a2c:	715a      	strb	r2, [r3, #5]
  }

  if (pEpInDesc != NULL)
 8008a2e:	68fb      	ldr	r3, [r7, #12]
 8008a30:	2b00      	cmp	r3, #0
 8008a32:	d006      	beq.n	8008a42 <USBD_CDC_GetHSCfgDesc+0x5a>
  {
    pEpInDesc->wMaxPacketSize = CDC_DATA_HS_MAX_PACKET_SIZE;
 8008a34:	68fb      	ldr	r3, [r7, #12]
 8008a36:	2200      	movs	r2, #0
 8008a38:	711a      	strb	r2, [r3, #4]
 8008a3a:	2200      	movs	r2, #0
 8008a3c:	f042 0202 	orr.w	r2, r2, #2
 8008a40:	715a      	strb	r2, [r3, #5]
  }

  *length = (uint16_t)sizeof(USBD_CDC_CfgDesc);
 8008a42:	687b      	ldr	r3, [r7, #4]
 8008a44:	2243      	movs	r2, #67	; 0x43
 8008a46:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgDesc;
 8008a48:	4b02      	ldr	r3, [pc, #8]	; (8008a54 <USBD_CDC_GetHSCfgDesc+0x6c>)
}
 8008a4a:	4618      	mov	r0, r3
 8008a4c:	3718      	adds	r7, #24
 8008a4e:	46bd      	mov	sp, r7
 8008a50:	bd80      	pop	{r7, pc}
 8008a52:	bf00      	nop
 8008a54:	20000064 	.word	0x20000064

08008a58 <USBD_CDC_GetOtherSpeedCfgDesc>:
  *         Return configuration descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetOtherSpeedCfgDesc(uint16_t *length)
{
 8008a58:	b580      	push	{r7, lr}
 8008a5a:	b086      	sub	sp, #24
 8008a5c:	af00      	add	r7, sp, #0
 8008a5e:	6078      	str	r0, [r7, #4]
  USBD_EpDescTypeDef *pEpCmdDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_CMD_EP);
 8008a60:	2182      	movs	r1, #130	; 0x82
 8008a62:	4818      	ldr	r0, [pc, #96]	; (8008ac4 <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
 8008a64:	f000 fcdf 	bl	8009426 <USBD_GetEpDesc>
 8008a68:	6178      	str	r0, [r7, #20]
  USBD_EpDescTypeDef *pEpOutDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_OUT_EP);
 8008a6a:	2101      	movs	r1, #1
 8008a6c:	4815      	ldr	r0, [pc, #84]	; (8008ac4 <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
 8008a6e:	f000 fcda 	bl	8009426 <USBD_GetEpDesc>
 8008a72:	6138      	str	r0, [r7, #16]
  USBD_EpDescTypeDef *pEpInDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_IN_EP);
 8008a74:	2181      	movs	r1, #129	; 0x81
 8008a76:	4813      	ldr	r0, [pc, #76]	; (8008ac4 <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
 8008a78:	f000 fcd5 	bl	8009426 <USBD_GetEpDesc>
 8008a7c:	60f8      	str	r0, [r7, #12]

  if (pEpCmdDesc != NULL)
 8008a7e:	697b      	ldr	r3, [r7, #20]
 8008a80:	2b00      	cmp	r3, #0
 8008a82:	d002      	beq.n	8008a8a <USBD_CDC_GetOtherSpeedCfgDesc+0x32>
  {
    pEpCmdDesc->bInterval = CDC_FS_BINTERVAL;
 8008a84:	697b      	ldr	r3, [r7, #20]
 8008a86:	2210      	movs	r2, #16
 8008a88:	719a      	strb	r2, [r3, #6]
  }

  if (pEpOutDesc != NULL)
 8008a8a:	693b      	ldr	r3, [r7, #16]
 8008a8c:	2b00      	cmp	r3, #0
 8008a8e:	d006      	beq.n	8008a9e <USBD_CDC_GetOtherSpeedCfgDesc+0x46>
  {
    pEpOutDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 8008a90:	693b      	ldr	r3, [r7, #16]
 8008a92:	2200      	movs	r2, #0
 8008a94:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8008a98:	711a      	strb	r2, [r3, #4]
 8008a9a:	2200      	movs	r2, #0
 8008a9c:	715a      	strb	r2, [r3, #5]
  }

  if (pEpInDesc != NULL)
 8008a9e:	68fb      	ldr	r3, [r7, #12]
 8008aa0:	2b00      	cmp	r3, #0
 8008aa2:	d006      	beq.n	8008ab2 <USBD_CDC_GetOtherSpeedCfgDesc+0x5a>
  {
    pEpInDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 8008aa4:	68fb      	ldr	r3, [r7, #12]
 8008aa6:	2200      	movs	r2, #0
 8008aa8:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8008aac:	711a      	strb	r2, [r3, #4]
 8008aae:	2200      	movs	r2, #0
 8008ab0:	715a      	strb	r2, [r3, #5]
  }

  *length = (uint16_t)sizeof(USBD_CDC_CfgDesc);
 8008ab2:	687b      	ldr	r3, [r7, #4]
 8008ab4:	2243      	movs	r2, #67	; 0x43
 8008ab6:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgDesc;
 8008ab8:	4b02      	ldr	r3, [pc, #8]	; (8008ac4 <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
}
 8008aba:	4618      	mov	r0, r3
 8008abc:	3718      	adds	r7, #24
 8008abe:	46bd      	mov	sp, r7
 8008ac0:	bd80      	pop	{r7, pc}
 8008ac2:	bf00      	nop
 8008ac4:	20000064 	.word	0x20000064

08008ac8 <USBD_CDC_GetDeviceQualifierDescriptor>:
  *         return Device Qualifier descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
uint8_t *USBD_CDC_GetDeviceQualifierDescriptor(uint16_t *length)
{
 8008ac8:	b480      	push	{r7}
 8008aca:	b083      	sub	sp, #12
 8008acc:	af00      	add	r7, sp, #0
 8008ace:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_CDC_DeviceQualifierDesc);
 8008ad0:	687b      	ldr	r3, [r7, #4]
 8008ad2:	220a      	movs	r2, #10
 8008ad4:	801a      	strh	r2, [r3, #0]

  return USBD_CDC_DeviceQualifierDesc;
 8008ad6:	4b03      	ldr	r3, [pc, #12]	; (8008ae4 <USBD_CDC_GetDeviceQualifierDescriptor+0x1c>)
}
 8008ad8:	4618      	mov	r0, r3
 8008ada:	370c      	adds	r7, #12
 8008adc:	46bd      	mov	sp, r7
 8008ade:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008ae2:	4770      	bx	lr
 8008ae4:	20000020 	.word	0x20000020

08008ae8 <USBD_CDC_RegisterInterface>:
  * @param  fops: CD  Interface callback
  * @retval status
  */
uint8_t USBD_CDC_RegisterInterface(USBD_HandleTypeDef *pdev,
                                   USBD_CDC_ItfTypeDef *fops)
{
 8008ae8:	b480      	push	{r7}
 8008aea:	b083      	sub	sp, #12
 8008aec:	af00      	add	r7, sp, #0
 8008aee:	6078      	str	r0, [r7, #4]
 8008af0:	6039      	str	r1, [r7, #0]
  if (fops == NULL)
 8008af2:	683b      	ldr	r3, [r7, #0]
 8008af4:	2b00      	cmp	r3, #0
 8008af6:	d101      	bne.n	8008afc <USBD_CDC_RegisterInterface+0x14>
  {
    return (uint8_t)USBD_FAIL;
 8008af8:	2303      	movs	r3, #3
 8008afa:	e009      	b.n	8008b10 <USBD_CDC_RegisterInterface+0x28>
  }

  pdev->pUserData[pdev->classId] = fops;
 8008afc:	687b      	ldr	r3, [r7, #4]
 8008afe:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 8008b02:	687a      	ldr	r2, [r7, #4]
 8008b04:	33b0      	adds	r3, #176	; 0xb0
 8008b06:	009b      	lsls	r3, r3, #2
 8008b08:	4413      	add	r3, r2
 8008b0a:	683a      	ldr	r2, [r7, #0]
 8008b0c:	605a      	str	r2, [r3, #4]

  return (uint8_t)USBD_OK;
 8008b0e:	2300      	movs	r3, #0
}
 8008b10:	4618      	mov	r0, r3
 8008b12:	370c      	adds	r7, #12
 8008b14:	46bd      	mov	sp, r7
 8008b16:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008b1a:	4770      	bx	lr

08008b1c <USBD_CDC_SetTxBuffer>:
{
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[ClassId];
#else
uint8_t USBD_CDC_SetTxBuffer(USBD_HandleTypeDef *pdev,
                             uint8_t *pbuff, uint32_t length)
{
 8008b1c:	b480      	push	{r7}
 8008b1e:	b087      	sub	sp, #28
 8008b20:	af00      	add	r7, sp, #0
 8008b22:	60f8      	str	r0, [r7, #12]
 8008b24:	60b9      	str	r1, [r7, #8]
 8008b26:	607a      	str	r2, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8008b28:	68fb      	ldr	r3, [r7, #12]
 8008b2a:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8008b2e:	68fb      	ldr	r3, [r7, #12]
 8008b30:	32b0      	adds	r2, #176	; 0xb0
 8008b32:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8008b36:	617b      	str	r3, [r7, #20]
#endif /* USE_USBD_COMPOSITE */

  if (hcdc == NULL)
 8008b38:	697b      	ldr	r3, [r7, #20]
 8008b3a:	2b00      	cmp	r3, #0
 8008b3c:	d101      	bne.n	8008b42 <USBD_CDC_SetTxBuffer+0x26>
  {
    return (uint8_t)USBD_FAIL;
 8008b3e:	2303      	movs	r3, #3
 8008b40:	e008      	b.n	8008b54 <USBD_CDC_SetTxBuffer+0x38>
  }

  hcdc->TxBuffer = pbuff;
 8008b42:	697b      	ldr	r3, [r7, #20]
 8008b44:	68ba      	ldr	r2, [r7, #8]
 8008b46:	f8c3 2208 	str.w	r2, [r3, #520]	; 0x208
  hcdc->TxLength = length;
 8008b4a:	697b      	ldr	r3, [r7, #20]
 8008b4c:	687a      	ldr	r2, [r7, #4]
 8008b4e:	f8c3 2210 	str.w	r2, [r3, #528]	; 0x210

  return (uint8_t)USBD_OK;
 8008b52:	2300      	movs	r3, #0
}
 8008b54:	4618      	mov	r0, r3
 8008b56:	371c      	adds	r7, #28
 8008b58:	46bd      	mov	sp, r7
 8008b5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008b5e:	4770      	bx	lr

08008b60 <USBD_CDC_SetRxBuffer>:
  * @param  pdev: device instance
  * @param  pbuff: Rx Buffer
  * @retval status
  */
uint8_t USBD_CDC_SetRxBuffer(USBD_HandleTypeDef *pdev, uint8_t *pbuff)
{
 8008b60:	b480      	push	{r7}
 8008b62:	b085      	sub	sp, #20
 8008b64:	af00      	add	r7, sp, #0
 8008b66:	6078      	str	r0, [r7, #4]
 8008b68:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8008b6a:	687b      	ldr	r3, [r7, #4]
 8008b6c:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8008b70:	687b      	ldr	r3, [r7, #4]
 8008b72:	32b0      	adds	r2, #176	; 0xb0
 8008b74:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8008b78:	60fb      	str	r3, [r7, #12]

  if (hcdc == NULL)
 8008b7a:	68fb      	ldr	r3, [r7, #12]
 8008b7c:	2b00      	cmp	r3, #0
 8008b7e:	d101      	bne.n	8008b84 <USBD_CDC_SetRxBuffer+0x24>
  {
    return (uint8_t)USBD_FAIL;
 8008b80:	2303      	movs	r3, #3
 8008b82:	e004      	b.n	8008b8e <USBD_CDC_SetRxBuffer+0x2e>
  }

  hcdc->RxBuffer = pbuff;
 8008b84:	68fb      	ldr	r3, [r7, #12]
 8008b86:	683a      	ldr	r2, [r7, #0]
 8008b88:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204

  return (uint8_t)USBD_OK;
 8008b8c:	2300      	movs	r3, #0
}
 8008b8e:	4618      	mov	r0, r3
 8008b90:	3714      	adds	r7, #20
 8008b92:	46bd      	mov	sp, r7
 8008b94:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008b98:	4770      	bx	lr
	...

08008b9c <USBD_CDC_TransmitPacket>:
uint8_t USBD_CDC_TransmitPacket(USBD_HandleTypeDef *pdev, uint8_t ClassId)
{
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[ClassId];
#else
uint8_t USBD_CDC_TransmitPacket(USBD_HandleTypeDef *pdev)
{
 8008b9c:	b580      	push	{r7, lr}
 8008b9e:	b084      	sub	sp, #16
 8008ba0:	af00      	add	r7, sp, #0
 8008ba2:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8008ba4:	687b      	ldr	r3, [r7, #4]
 8008ba6:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8008baa:	687b      	ldr	r3, [r7, #4]
 8008bac:	32b0      	adds	r2, #176	; 0xb0
 8008bae:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8008bb2:	60bb      	str	r3, [r7, #8]
#endif  /* USE_USBD_COMPOSITE */

  USBD_StatusTypeDef ret = USBD_BUSY;
 8008bb4:	2301      	movs	r3, #1
 8008bb6:	73fb      	strb	r3, [r7, #15]
#ifdef USE_USBD_COMPOSITE
  /* Get the Endpoints addresses allocated for this class instance */
  CDCInEpAdd  = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_BULK, ClassId);
#endif  /* USE_USBD_COMPOSITE */

  if (hcdc == NULL)
 8008bb8:	68bb      	ldr	r3, [r7, #8]
 8008bba:	2b00      	cmp	r3, #0
 8008bbc:	d101      	bne.n	8008bc2 <USBD_CDC_TransmitPacket+0x26>
  {
    return (uint8_t)USBD_FAIL;
 8008bbe:	2303      	movs	r3, #3
 8008bc0:	e025      	b.n	8008c0e <USBD_CDC_TransmitPacket+0x72>
  }

  if (hcdc->TxState == 0U)
 8008bc2:	68bb      	ldr	r3, [r7, #8]
 8008bc4:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 8008bc8:	2b00      	cmp	r3, #0
 8008bca:	d11f      	bne.n	8008c0c <USBD_CDC_TransmitPacket+0x70>
  {
    /* Tx Transfer in progress */
    hcdc->TxState = 1U;
 8008bcc:	68bb      	ldr	r3, [r7, #8]
 8008bce:	2201      	movs	r2, #1
 8008bd0:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214

    /* Update the packet total length */
    pdev->ep_in[CDCInEpAdd & 0xFU].total_length = hcdc->TxLength;
 8008bd4:	4b10      	ldr	r3, [pc, #64]	; (8008c18 <USBD_CDC_TransmitPacket+0x7c>)
 8008bd6:	781b      	ldrb	r3, [r3, #0]
 8008bd8:	f003 020f 	and.w	r2, r3, #15
 8008bdc:	68bb      	ldr	r3, [r7, #8]
 8008bde:	f8d3 1210 	ldr.w	r1, [r3, #528]	; 0x210
 8008be2:	6878      	ldr	r0, [r7, #4]
 8008be4:	4613      	mov	r3, r2
 8008be6:	009b      	lsls	r3, r3, #2
 8008be8:	4413      	add	r3, r2
 8008bea:	009b      	lsls	r3, r3, #2
 8008bec:	4403      	add	r3, r0
 8008bee:	3318      	adds	r3, #24
 8008bf0:	6019      	str	r1, [r3, #0]

    /* Transmit next packet */
    (void)USBD_LL_Transmit(pdev, CDCInEpAdd, hcdc->TxBuffer, hcdc->TxLength);
 8008bf2:	4b09      	ldr	r3, [pc, #36]	; (8008c18 <USBD_CDC_TransmitPacket+0x7c>)
 8008bf4:	7819      	ldrb	r1, [r3, #0]
 8008bf6:	68bb      	ldr	r3, [r7, #8]
 8008bf8:	f8d3 2208 	ldr.w	r2, [r3, #520]	; 0x208
 8008bfc:	68bb      	ldr	r3, [r7, #8]
 8008bfe:	f8d3 3210 	ldr.w	r3, [r3, #528]	; 0x210
 8008c02:	6878      	ldr	r0, [r7, #4]
 8008c04:	f00f fa17 	bl	8018036 <USBD_LL_Transmit>

    ret = USBD_OK;
 8008c08:	2300      	movs	r3, #0
 8008c0a:	73fb      	strb	r3, [r7, #15]
  }

  return (uint8_t)ret;
 8008c0c:	7bfb      	ldrb	r3, [r7, #15]
}
 8008c0e:	4618      	mov	r0, r3
 8008c10:	3710      	adds	r7, #16
 8008c12:	46bd      	mov	sp, r7
 8008c14:	bd80      	pop	{r7, pc}
 8008c16:	bf00      	nop
 8008c18:	200000a7 	.word	0x200000a7

08008c1c <USBD_CDC_ReceivePacket>:
  *         prepare OUT Endpoint for reception
  * @param  pdev: device instance
  * @retval status
  */
uint8_t USBD_CDC_ReceivePacket(USBD_HandleTypeDef *pdev)
{
 8008c1c:	b580      	push	{r7, lr}
 8008c1e:	b084      	sub	sp, #16
 8008c20:	af00      	add	r7, sp, #0
 8008c22:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8008c24:	687b      	ldr	r3, [r7, #4]
 8008c26:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8008c2a:	687b      	ldr	r3, [r7, #4]
 8008c2c:	32b0      	adds	r2, #176	; 0xb0
 8008c2e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8008c32:	60fb      	str	r3, [r7, #12]
#ifdef USE_USBD_COMPOSITE
  /* Get the Endpoints addresses allocated for this class instance */
  CDCOutEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_OUT, USBD_EP_TYPE_BULK, (uint8_t)pdev->classId);
#endif /* USE_USBD_COMPOSITE */

  if (pdev->pClassDataCmsit[pdev->classId] == NULL)
 8008c34:	687b      	ldr	r3, [r7, #4]
 8008c36:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8008c3a:	687b      	ldr	r3, [r7, #4]
 8008c3c:	32b0      	adds	r2, #176	; 0xb0
 8008c3e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8008c42:	2b00      	cmp	r3, #0
 8008c44:	d101      	bne.n	8008c4a <USBD_CDC_ReceivePacket+0x2e>
  {
    return (uint8_t)USBD_FAIL;
 8008c46:	2303      	movs	r3, #3
 8008c48:	e018      	b.n	8008c7c <USBD_CDC_ReceivePacket+0x60>
  }

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 8008c4a:	687b      	ldr	r3, [r7, #4]
 8008c4c:	7c1b      	ldrb	r3, [r3, #16]
 8008c4e:	2b00      	cmp	r3, #0
 8008c50:	d10a      	bne.n	8008c68 <USBD_CDC_ReceivePacket+0x4c>
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 8008c52:	4b0c      	ldr	r3, [pc, #48]	; (8008c84 <USBD_CDC_ReceivePacket+0x68>)
 8008c54:	7819      	ldrb	r1, [r3, #0]
 8008c56:	68fb      	ldr	r3, [r7, #12]
 8008c58:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8008c5c:	f44f 7300 	mov.w	r3, #512	; 0x200
 8008c60:	6878      	ldr	r0, [r7, #4]
 8008c62:	f00f fa09 	bl	8018078 <USBD_LL_PrepareReceive>
 8008c66:	e008      	b.n	8008c7a <USBD_CDC_ReceivePacket+0x5e>
                                 CDC_DATA_HS_OUT_PACKET_SIZE);
  }
  else
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 8008c68:	4b06      	ldr	r3, [pc, #24]	; (8008c84 <USBD_CDC_ReceivePacket+0x68>)
 8008c6a:	7819      	ldrb	r1, [r3, #0]
 8008c6c:	68fb      	ldr	r3, [r7, #12]
 8008c6e:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8008c72:	2340      	movs	r3, #64	; 0x40
 8008c74:	6878      	ldr	r0, [r7, #4]
 8008c76:	f00f f9ff 	bl	8018078 <USBD_LL_PrepareReceive>
                                 CDC_DATA_FS_OUT_PACKET_SIZE);
  }

  return (uint8_t)USBD_OK;
 8008c7a:	2300      	movs	r3, #0
}
 8008c7c:	4618      	mov	r0, r3
 8008c7e:	3710      	adds	r7, #16
 8008c80:	46bd      	mov	sp, r7
 8008c82:	bd80      	pop	{r7, pc}
 8008c84:	200000a8 	.word	0x200000a8

08008c88 <USBD_Init>:
  * @param  id: Low level core index
  * @retval status: USBD Status
  */
USBD_StatusTypeDef USBD_Init(USBD_HandleTypeDef *pdev,
                             USBD_DescriptorsTypeDef *pdesc, uint8_t id)
{
 8008c88:	b580      	push	{r7, lr}
 8008c8a:	b086      	sub	sp, #24
 8008c8c:	af00      	add	r7, sp, #0
 8008c8e:	60f8      	str	r0, [r7, #12]
 8008c90:	60b9      	str	r1, [r7, #8]
 8008c92:	4613      	mov	r3, r2
 8008c94:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef ret;

  /* Check whether the USB Host handle is valid */
  if (pdev == NULL)
 8008c96:	68fb      	ldr	r3, [r7, #12]
 8008c98:	2b00      	cmp	r3, #0
 8008c9a:	d101      	bne.n	8008ca0 <USBD_Init+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Device handle");
#endif /* (USBD_DEBUG_LEVEL > 1U) */
    return USBD_FAIL;
 8008c9c:	2303      	movs	r3, #3
 8008c9e:	e01f      	b.n	8008ce0 <USBD_Init+0x58>
    pdev->NumClasses = 0;
    pdev->classId = 0;
  }
#else
  /* Unlink previous class*/
  pdev->pClass[0] = NULL;
 8008ca0:	68fb      	ldr	r3, [r7, #12]
 8008ca2:	2200      	movs	r2, #0
 8008ca4:	f8c3 22b8 	str.w	r2, [r3, #696]	; 0x2b8
  pdev->pUserData[0] = NULL;
 8008ca8:	68fb      	ldr	r3, [r7, #12]
 8008caa:	2200      	movs	r2, #0
 8008cac:	f8c3 22c4 	str.w	r2, [r3, #708]	; 0x2c4
#endif /* USE_USBD_COMPOSITE */

  pdev->pConfDesc = NULL;
 8008cb0:	68fb      	ldr	r3, [r7, #12]
 8008cb2:	2200      	movs	r2, #0
 8008cb4:	f8c3 22d0 	str.w	r2, [r3, #720]	; 0x2d0

  /* Assign USBD Descriptors */
  if (pdesc != NULL)
 8008cb8:	68bb      	ldr	r3, [r7, #8]
 8008cba:	2b00      	cmp	r3, #0
 8008cbc:	d003      	beq.n	8008cc6 <USBD_Init+0x3e>
  {
    pdev->pDesc = pdesc;
 8008cbe:	68fb      	ldr	r3, [r7, #12]
 8008cc0:	68ba      	ldr	r2, [r7, #8]
 8008cc2:	f8c3 22b4 	str.w	r2, [r3, #692]	; 0x2b4
  }

  /* Set Device initial State */
  pdev->dev_state = USBD_STATE_DEFAULT;
 8008cc6:	68fb      	ldr	r3, [r7, #12]
 8008cc8:	2201      	movs	r2, #1
 8008cca:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  pdev->id = id;
 8008cce:	68fb      	ldr	r3, [r7, #12]
 8008cd0:	79fa      	ldrb	r2, [r7, #7]
 8008cd2:	701a      	strb	r2, [r3, #0]

  /* Initialize low level driver */
  ret = USBD_LL_Init(pdev);
 8008cd4:	68f8      	ldr	r0, [r7, #12]
 8008cd6:	f00f f879 	bl	8017dcc <USBD_LL_Init>
 8008cda:	4603      	mov	r3, r0
 8008cdc:	75fb      	strb	r3, [r7, #23]

  return ret;
 8008cde:	7dfb      	ldrb	r3, [r7, #23]
}
 8008ce0:	4618      	mov	r0, r3
 8008ce2:	3718      	adds	r7, #24
 8008ce4:	46bd      	mov	sp, r7
 8008ce6:	bd80      	pop	{r7, pc}

08008ce8 <USBD_RegisterClass>:
  * @param  pdev: Device Handle
  * @param  pclass: Class handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_RegisterClass(USBD_HandleTypeDef *pdev, USBD_ClassTypeDef *pclass)
{
 8008ce8:	b580      	push	{r7, lr}
 8008cea:	b084      	sub	sp, #16
 8008cec:	af00      	add	r7, sp, #0
 8008cee:	6078      	str	r0, [r7, #4]
 8008cf0:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 8008cf2:	2300      	movs	r3, #0
 8008cf4:	81fb      	strh	r3, [r7, #14]

  if (pclass == NULL)
 8008cf6:	683b      	ldr	r3, [r7, #0]
 8008cf8:	2b00      	cmp	r3, #0
 8008cfa:	d101      	bne.n	8008d00 <USBD_RegisterClass+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Class handle");
#endif /* (USBD_DEBUG_LEVEL > 1U) */
    return USBD_FAIL;
 8008cfc:	2303      	movs	r3, #3
 8008cfe:	e025      	b.n	8008d4c <USBD_RegisterClass+0x64>
  }

  /* link the class to the USB Device handle */
  pdev->pClass[0] = pclass;
 8008d00:	687b      	ldr	r3, [r7, #4]
 8008d02:	683a      	ldr	r2, [r7, #0]
 8008d04:	f8c3 22b8 	str.w	r2, [r3, #696]	; 0x2b8
  if (pdev->pClass[pdev->classId]->GetHSConfigDescriptor != NULL)
  {
    pdev->pConfDesc = (void *)pdev->pClass[pdev->classId]->GetHSConfigDescriptor(&len);
  }
#else /* Default USE_USB_FS */
  if (pdev->pClass[pdev->classId]->GetFSConfigDescriptor != NULL)
 8008d08:	687b      	ldr	r3, [r7, #4]
 8008d0a:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8008d0e:	687b      	ldr	r3, [r7, #4]
 8008d10:	32ae      	adds	r2, #174	; 0xae
 8008d12:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8008d16:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008d18:	2b00      	cmp	r3, #0
 8008d1a:	d00f      	beq.n	8008d3c <USBD_RegisterClass+0x54>
  {
    pdev->pConfDesc = (void *)pdev->pClass[pdev->classId]->GetFSConfigDescriptor(&len);
 8008d1c:	687b      	ldr	r3, [r7, #4]
 8008d1e:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8008d22:	687b      	ldr	r3, [r7, #4]
 8008d24:	32ae      	adds	r2, #174	; 0xae
 8008d26:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8008d2a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008d2c:	f107 020e 	add.w	r2, r7, #14
 8008d30:	4610      	mov	r0, r2
 8008d32:	4798      	blx	r3
 8008d34:	4602      	mov	r2, r0
 8008d36:	687b      	ldr	r3, [r7, #4]
 8008d38:	f8c3 22d0 	str.w	r2, [r3, #720]	; 0x2d0
  }
#endif /* USE_USB_FS */

  /* Increment the NumClasses */
  pdev->NumClasses++;
 8008d3c:	687b      	ldr	r3, [r7, #4]
 8008d3e:	f8d3 32d8 	ldr.w	r3, [r3, #728]	; 0x2d8
 8008d42:	1c5a      	adds	r2, r3, #1
 8008d44:	687b      	ldr	r3, [r7, #4]
 8008d46:	f8c3 22d8 	str.w	r2, [r3, #728]	; 0x2d8

  return USBD_OK;
 8008d4a:	2300      	movs	r3, #0
}
 8008d4c:	4618      	mov	r0, r3
 8008d4e:	3710      	adds	r7, #16
 8008d50:	46bd      	mov	sp, r7
 8008d52:	bd80      	pop	{r7, pc}

08008d54 <USBD_Start>:
  *         Start the USB Device Core.
  * @param  pdev: Device Handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_Start(USBD_HandleTypeDef *pdev)
{
 8008d54:	b580      	push	{r7, lr}
 8008d56:	b082      	sub	sp, #8
 8008d58:	af00      	add	r7, sp, #0
 8008d5a:	6078      	str	r0, [r7, #4]
#ifdef USE_USBD_COMPOSITE
  pdev->classId = 0U;
#endif /* USE_USBD_COMPOSITE */

  /* Start the low level driver  */
  return USBD_LL_Start(pdev);
 8008d5c:	6878      	ldr	r0, [r7, #4]
 8008d5e:	f00f f881 	bl	8017e64 <USBD_LL_Start>
 8008d62:	4603      	mov	r3, r0
}
 8008d64:	4618      	mov	r0, r3
 8008d66:	3708      	adds	r7, #8
 8008d68:	46bd      	mov	sp, r7
 8008d6a:	bd80      	pop	{r7, pc}

08008d6c <USBD_RunTestMode>:
  *         Launch test mode process
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_RunTestMode(USBD_HandleTypeDef *pdev)
{
 8008d6c:	b480      	push	{r7}
 8008d6e:	b083      	sub	sp, #12
 8008d70:	af00      	add	r7, sp, #0
 8008d72:	6078      	str	r0, [r7, #4]
  return ret;
#else
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 8008d74:	2300      	movs	r3, #0
#endif /* USBD_HS_TESTMODE_ENABLE */
}
 8008d76:	4618      	mov	r0, r3
 8008d78:	370c      	adds	r7, #12
 8008d7a:	46bd      	mov	sp, r7
 8008d7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008d80:	4770      	bx	lr

08008d82 <USBD_SetClassConfig>:
  * @param  cfgidx: configuration index
  * @retval status
  */

USBD_StatusTypeDef USBD_SetClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8008d82:	b580      	push	{r7, lr}
 8008d84:	b084      	sub	sp, #16
 8008d86:	af00      	add	r7, sp, #0
 8008d88:	6078      	str	r0, [r7, #4]
 8008d8a:	460b      	mov	r3, r1
 8008d8c:	70fb      	strb	r3, [r7, #3]
  USBD_StatusTypeDef ret = USBD_OK;
 8008d8e:	2300      	movs	r3, #0
 8008d90:	73fb      	strb	r3, [r7, #15]
        }
      }
    }
  }
#else
  if (pdev->pClass[0] != NULL)
 8008d92:	687b      	ldr	r3, [r7, #4]
 8008d94:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8008d98:	2b00      	cmp	r3, #0
 8008d9a:	d009      	beq.n	8008db0 <USBD_SetClassConfig+0x2e>
  {
    /* Set configuration and Start the Class */
    ret = (USBD_StatusTypeDef)pdev->pClass[0]->Init(pdev, cfgidx);
 8008d9c:	687b      	ldr	r3, [r7, #4]
 8008d9e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8008da2:	681b      	ldr	r3, [r3, #0]
 8008da4:	78fa      	ldrb	r2, [r7, #3]
 8008da6:	4611      	mov	r1, r2
 8008da8:	6878      	ldr	r0, [r7, #4]
 8008daa:	4798      	blx	r3
 8008dac:	4603      	mov	r3, r0
 8008dae:	73fb      	strb	r3, [r7, #15]
  }
#endif /* USE_USBD_COMPOSITE */

  return ret;
 8008db0:	7bfb      	ldrb	r3, [r7, #15]
}
 8008db2:	4618      	mov	r0, r3
 8008db4:	3710      	adds	r7, #16
 8008db6:	46bd      	mov	sp, r7
 8008db8:	bd80      	pop	{r7, pc}

08008dba <USBD_ClrClassConfig>:
  * @param  pdev: device instance
  * @param  cfgidx: configuration index
  * @retval status
  */
USBD_StatusTypeDef USBD_ClrClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8008dba:	b580      	push	{r7, lr}
 8008dbc:	b084      	sub	sp, #16
 8008dbe:	af00      	add	r7, sp, #0
 8008dc0:	6078      	str	r0, [r7, #4]
 8008dc2:	460b      	mov	r3, r1
 8008dc4:	70fb      	strb	r3, [r7, #3]
  USBD_StatusTypeDef ret = USBD_OK;
 8008dc6:	2300      	movs	r3, #0
 8008dc8:	73fb      	strb	r3, [r7, #15]
      }
    }
  }
#else
  /* Clear configuration  and De-initialize the Class process */
  if (pdev->pClass[0]->DeInit(pdev, cfgidx) != 0U)
 8008dca:	687b      	ldr	r3, [r7, #4]
 8008dcc:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8008dd0:	685b      	ldr	r3, [r3, #4]
 8008dd2:	78fa      	ldrb	r2, [r7, #3]
 8008dd4:	4611      	mov	r1, r2
 8008dd6:	6878      	ldr	r0, [r7, #4]
 8008dd8:	4798      	blx	r3
 8008dda:	4603      	mov	r3, r0
 8008ddc:	2b00      	cmp	r3, #0
 8008dde:	d001      	beq.n	8008de4 <USBD_ClrClassConfig+0x2a>
  {
    ret = USBD_FAIL;
 8008de0:	2303      	movs	r3, #3
 8008de2:	73fb      	strb	r3, [r7, #15]
  }
#endif /* USE_USBD_COMPOSITE */

  return ret;
 8008de4:	7bfb      	ldrb	r3, [r7, #15]
}
 8008de6:	4618      	mov	r0, r3
 8008de8:	3710      	adds	r7, #16
 8008dea:	46bd      	mov	sp, r7
 8008dec:	bd80      	pop	{r7, pc}

08008dee <USBD_LL_SetupStage>:
  * @param  pdev: device instance
  * @param  psetup: setup packet buffer pointer
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SetupStage(USBD_HandleTypeDef *pdev, uint8_t *psetup)
{
 8008dee:	b580      	push	{r7, lr}
 8008df0:	b084      	sub	sp, #16
 8008df2:	af00      	add	r7, sp, #0
 8008df4:	6078      	str	r0, [r7, #4]
 8008df6:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret;

  USBD_ParseSetupRequest(&pdev->request, psetup);
 8008df8:	687b      	ldr	r3, [r7, #4]
 8008dfa:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 8008dfe:	6839      	ldr	r1, [r7, #0]
 8008e00:	4618      	mov	r0, r3
 8008e02:	f001 f90e 	bl	800a022 <USBD_ParseSetupRequest>

  pdev->ep0_state = USBD_EP0_SETUP;
 8008e06:	687b      	ldr	r3, [r7, #4]
 8008e08:	2201      	movs	r2, #1
 8008e0a:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  pdev->ep0_data_len = pdev->request.wLength;
 8008e0e:	687b      	ldr	r3, [r7, #4]
 8008e10:	f8b3 32b0 	ldrh.w	r3, [r3, #688]	; 0x2b0
 8008e14:	461a      	mov	r2, r3
 8008e16:	687b      	ldr	r3, [r7, #4]
 8008e18:	f8c3 2298 	str.w	r2, [r3, #664]	; 0x298

  switch (pdev->request.bmRequest & 0x1FU)
 8008e1c:	687b      	ldr	r3, [r7, #4]
 8008e1e:	f893 32aa 	ldrb.w	r3, [r3, #682]	; 0x2aa
 8008e22:	f003 031f 	and.w	r3, r3, #31
 8008e26:	2b02      	cmp	r3, #2
 8008e28:	d01a      	beq.n	8008e60 <USBD_LL_SetupStage+0x72>
 8008e2a:	2b02      	cmp	r3, #2
 8008e2c:	d822      	bhi.n	8008e74 <USBD_LL_SetupStage+0x86>
 8008e2e:	2b00      	cmp	r3, #0
 8008e30:	d002      	beq.n	8008e38 <USBD_LL_SetupStage+0x4a>
 8008e32:	2b01      	cmp	r3, #1
 8008e34:	d00a      	beq.n	8008e4c <USBD_LL_SetupStage+0x5e>
 8008e36:	e01d      	b.n	8008e74 <USBD_LL_SetupStage+0x86>
  {
    case USB_REQ_RECIPIENT_DEVICE:
      ret = USBD_StdDevReq(pdev, &pdev->request);
 8008e38:	687b      	ldr	r3, [r7, #4]
 8008e3a:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 8008e3e:	4619      	mov	r1, r3
 8008e40:	6878      	ldr	r0, [r7, #4]
 8008e42:	f000 fb65 	bl	8009510 <USBD_StdDevReq>
 8008e46:	4603      	mov	r3, r0
 8008e48:	73fb      	strb	r3, [r7, #15]
      break;
 8008e4a:	e020      	b.n	8008e8e <USBD_LL_SetupStage+0xa0>

    case USB_REQ_RECIPIENT_INTERFACE:
      ret = USBD_StdItfReq(pdev, &pdev->request);
 8008e4c:	687b      	ldr	r3, [r7, #4]
 8008e4e:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 8008e52:	4619      	mov	r1, r3
 8008e54:	6878      	ldr	r0, [r7, #4]
 8008e56:	f000 fbcd 	bl	80095f4 <USBD_StdItfReq>
 8008e5a:	4603      	mov	r3, r0
 8008e5c:	73fb      	strb	r3, [r7, #15]
      break;
 8008e5e:	e016      	b.n	8008e8e <USBD_LL_SetupStage+0xa0>

    case USB_REQ_RECIPIENT_ENDPOINT:
      ret = USBD_StdEPReq(pdev, &pdev->request);
 8008e60:	687b      	ldr	r3, [r7, #4]
 8008e62:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 8008e66:	4619      	mov	r1, r3
 8008e68:	6878      	ldr	r0, [r7, #4]
 8008e6a:	f000 fc2f 	bl	80096cc <USBD_StdEPReq>
 8008e6e:	4603      	mov	r3, r0
 8008e70:	73fb      	strb	r3, [r7, #15]
      break;
 8008e72:	e00c      	b.n	8008e8e <USBD_LL_SetupStage+0xa0>

    default:
      ret = USBD_LL_StallEP(pdev, (pdev->request.bmRequest & 0x80U));
 8008e74:	687b      	ldr	r3, [r7, #4]
 8008e76:	f893 32aa 	ldrb.w	r3, [r3, #682]	; 0x2aa
 8008e7a:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 8008e7e:	b2db      	uxtb	r3, r3
 8008e80:	4619      	mov	r1, r3
 8008e82:	6878      	ldr	r0, [r7, #4]
 8008e84:	f00f f84e 	bl	8017f24 <USBD_LL_StallEP>
 8008e88:	4603      	mov	r3, r0
 8008e8a:	73fb      	strb	r3, [r7, #15]
      break;
 8008e8c:	bf00      	nop
  }

  return ret;
 8008e8e:	7bfb      	ldrb	r3, [r7, #15]
}
 8008e90:	4618      	mov	r0, r3
 8008e92:	3710      	adds	r7, #16
 8008e94:	46bd      	mov	sp, r7
 8008e96:	bd80      	pop	{r7, pc}

08008e98 <USBD_LL_DataOutStage>:
  * @param  pdata: data pointer
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DataOutStage(USBD_HandleTypeDef *pdev,
                                        uint8_t epnum, uint8_t *pdata)
{
 8008e98:	b580      	push	{r7, lr}
 8008e9a:	b086      	sub	sp, #24
 8008e9c:	af00      	add	r7, sp, #0
 8008e9e:	60f8      	str	r0, [r7, #12]
 8008ea0:	460b      	mov	r3, r1
 8008ea2:	607a      	str	r2, [r7, #4]
 8008ea4:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret = USBD_OK;
 8008ea6:	2300      	movs	r3, #0
 8008ea8:	75fb      	strb	r3, [r7, #23]
  uint8_t idx;

  if (epnum == 0U)
 8008eaa:	7afb      	ldrb	r3, [r7, #11]
 8008eac:	2b00      	cmp	r3, #0
 8008eae:	d16e      	bne.n	8008f8e <USBD_LL_DataOutStage+0xf6>
  {
    pep = &pdev->ep_out[0];
 8008eb0:	68fb      	ldr	r3, [r7, #12]
 8008eb2:	f503 73aa 	add.w	r3, r3, #340	; 0x154
 8008eb6:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_OUT)
 8008eb8:	68fb      	ldr	r3, [r7, #12]
 8008eba:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 8008ebe:	2b03      	cmp	r3, #3
 8008ec0:	f040 8098 	bne.w	8008ff4 <USBD_LL_DataOutStage+0x15c>
    {
      if (pep->rem_length > pep->maxpacket)
 8008ec4:	693b      	ldr	r3, [r7, #16]
 8008ec6:	689a      	ldr	r2, [r3, #8]
 8008ec8:	693b      	ldr	r3, [r7, #16]
 8008eca:	68db      	ldr	r3, [r3, #12]
 8008ecc:	429a      	cmp	r2, r3
 8008ece:	d913      	bls.n	8008ef8 <USBD_LL_DataOutStage+0x60>
      {
        pep->rem_length -= pep->maxpacket;
 8008ed0:	693b      	ldr	r3, [r7, #16]
 8008ed2:	689a      	ldr	r2, [r3, #8]
 8008ed4:	693b      	ldr	r3, [r7, #16]
 8008ed6:	68db      	ldr	r3, [r3, #12]
 8008ed8:	1ad2      	subs	r2, r2, r3
 8008eda:	693b      	ldr	r3, [r7, #16]
 8008edc:	609a      	str	r2, [r3, #8]

        (void)USBD_CtlContinueRx(pdev, pdata, MIN(pep->rem_length, pep->maxpacket));
 8008ede:	693b      	ldr	r3, [r7, #16]
 8008ee0:	68da      	ldr	r2, [r3, #12]
 8008ee2:	693b      	ldr	r3, [r7, #16]
 8008ee4:	689b      	ldr	r3, [r3, #8]
 8008ee6:	4293      	cmp	r3, r2
 8008ee8:	bf28      	it	cs
 8008eea:	4613      	movcs	r3, r2
 8008eec:	461a      	mov	r2, r3
 8008eee:	6879      	ldr	r1, [r7, #4]
 8008ef0:	68f8      	ldr	r0, [r7, #12]
 8008ef2:	f001 f996 	bl	800a222 <USBD_CtlContinueRx>
 8008ef6:	e07d      	b.n	8008ff4 <USBD_LL_DataOutStage+0x15c>
      }
      else
      {
        /* Find the class ID relative to the current request */
        switch (pdev->request.bmRequest & 0x1FU)
 8008ef8:	68fb      	ldr	r3, [r7, #12]
 8008efa:	f893 32aa 	ldrb.w	r3, [r3, #682]	; 0x2aa
 8008efe:	f003 031f 	and.w	r3, r3, #31
 8008f02:	2b02      	cmp	r3, #2
 8008f04:	d014      	beq.n	8008f30 <USBD_LL_DataOutStage+0x98>
 8008f06:	2b02      	cmp	r3, #2
 8008f08:	d81d      	bhi.n	8008f46 <USBD_LL_DataOutStage+0xae>
 8008f0a:	2b00      	cmp	r3, #0
 8008f0c:	d002      	beq.n	8008f14 <USBD_LL_DataOutStage+0x7c>
 8008f0e:	2b01      	cmp	r3, #1
 8008f10:	d003      	beq.n	8008f1a <USBD_LL_DataOutStage+0x82>
 8008f12:	e018      	b.n	8008f46 <USBD_LL_DataOutStage+0xae>
        {
          case USB_REQ_RECIPIENT_DEVICE:
            /* Device requests must be managed by the first instantiated class
               (or duplicated by all classes for simplicity) */
            idx = 0U;
 8008f14:	2300      	movs	r3, #0
 8008f16:	75bb      	strb	r3, [r7, #22]
            break;
 8008f18:	e018      	b.n	8008f4c <USBD_LL_DataOutStage+0xb4>

          case USB_REQ_RECIPIENT_INTERFACE:
            idx = USBD_CoreFindIF(pdev, LOBYTE(pdev->request.wIndex));
 8008f1a:	68fb      	ldr	r3, [r7, #12]
 8008f1c:	f8b3 32ae 	ldrh.w	r3, [r3, #686]	; 0x2ae
 8008f20:	b2db      	uxtb	r3, r3
 8008f22:	4619      	mov	r1, r3
 8008f24:	68f8      	ldr	r0, [r7, #12]
 8008f26:	f000 fa64 	bl	80093f2 <USBD_CoreFindIF>
 8008f2a:	4603      	mov	r3, r0
 8008f2c:	75bb      	strb	r3, [r7, #22]
            break;
 8008f2e:	e00d      	b.n	8008f4c <USBD_LL_DataOutStage+0xb4>

          case USB_REQ_RECIPIENT_ENDPOINT:
            idx = USBD_CoreFindEP(pdev, LOBYTE(pdev->request.wIndex));
 8008f30:	68fb      	ldr	r3, [r7, #12]
 8008f32:	f8b3 32ae 	ldrh.w	r3, [r3, #686]	; 0x2ae
 8008f36:	b2db      	uxtb	r3, r3
 8008f38:	4619      	mov	r1, r3
 8008f3a:	68f8      	ldr	r0, [r7, #12]
 8008f3c:	f000 fa66 	bl	800940c <USBD_CoreFindEP>
 8008f40:	4603      	mov	r3, r0
 8008f42:	75bb      	strb	r3, [r7, #22]
            break;
 8008f44:	e002      	b.n	8008f4c <USBD_LL_DataOutStage+0xb4>

          default:
            /* Back to the first class in case of doubt */
            idx = 0U;
 8008f46:	2300      	movs	r3, #0
 8008f48:	75bb      	strb	r3, [r7, #22]
            break;
 8008f4a:	bf00      	nop
        }

        if (idx < USBD_MAX_SUPPORTED_CLASS)
 8008f4c:	7dbb      	ldrb	r3, [r7, #22]
 8008f4e:	2b00      	cmp	r3, #0
 8008f50:	d119      	bne.n	8008f86 <USBD_LL_DataOutStage+0xee>
        {
          /* Setup the class ID and route the request to the relative class function */
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8008f52:	68fb      	ldr	r3, [r7, #12]
 8008f54:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8008f58:	b2db      	uxtb	r3, r3
 8008f5a:	2b03      	cmp	r3, #3
 8008f5c:	d113      	bne.n	8008f86 <USBD_LL_DataOutStage+0xee>
          {
            if (pdev->pClass[idx]->EP0_RxReady != NULL)
 8008f5e:	7dba      	ldrb	r2, [r7, #22]
 8008f60:	68fb      	ldr	r3, [r7, #12]
 8008f62:	32ae      	adds	r2, #174	; 0xae
 8008f64:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8008f68:	691b      	ldr	r3, [r3, #16]
 8008f6a:	2b00      	cmp	r3, #0
 8008f6c:	d00b      	beq.n	8008f86 <USBD_LL_DataOutStage+0xee>
            {
              pdev->classId = idx;
 8008f6e:	7dba      	ldrb	r2, [r7, #22]
 8008f70:	68fb      	ldr	r3, [r7, #12]
 8008f72:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
              pdev->pClass[idx]->EP0_RxReady(pdev);
 8008f76:	7dba      	ldrb	r2, [r7, #22]
 8008f78:	68fb      	ldr	r3, [r7, #12]
 8008f7a:	32ae      	adds	r2, #174	; 0xae
 8008f7c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8008f80:	691b      	ldr	r3, [r3, #16]
 8008f82:	68f8      	ldr	r0, [r7, #12]
 8008f84:	4798      	blx	r3
            }
          }
        }

        (void)USBD_CtlSendStatus(pdev);
 8008f86:	68f8      	ldr	r0, [r7, #12]
 8008f88:	f001 f95c 	bl	800a244 <USBD_CtlSendStatus>
 8008f8c:	e032      	b.n	8008ff4 <USBD_LL_DataOutStage+0x15c>
    }
  }
  else
  {
    /* Get the class index relative to this interface */
    idx = USBD_CoreFindEP(pdev, (epnum & 0x7FU));
 8008f8e:	7afb      	ldrb	r3, [r7, #11]
 8008f90:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8008f94:	b2db      	uxtb	r3, r3
 8008f96:	4619      	mov	r1, r3
 8008f98:	68f8      	ldr	r0, [r7, #12]
 8008f9a:	f000 fa37 	bl	800940c <USBD_CoreFindEP>
 8008f9e:	4603      	mov	r3, r0
 8008fa0:	75bb      	strb	r3, [r7, #22]

    if (((uint16_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 8008fa2:	7dbb      	ldrb	r3, [r7, #22]
 8008fa4:	2bff      	cmp	r3, #255	; 0xff
 8008fa6:	d025      	beq.n	8008ff4 <USBD_LL_DataOutStage+0x15c>
 8008fa8:	7dbb      	ldrb	r3, [r7, #22]
 8008faa:	2b00      	cmp	r3, #0
 8008fac:	d122      	bne.n	8008ff4 <USBD_LL_DataOutStage+0x15c>
    {
      /* Call the class data out function to manage the request */
      if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8008fae:	68fb      	ldr	r3, [r7, #12]
 8008fb0:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8008fb4:	b2db      	uxtb	r3, r3
 8008fb6:	2b03      	cmp	r3, #3
 8008fb8:	d117      	bne.n	8008fea <USBD_LL_DataOutStage+0x152>
      {
        if (pdev->pClass[idx]->DataOut != NULL)
 8008fba:	7dba      	ldrb	r2, [r7, #22]
 8008fbc:	68fb      	ldr	r3, [r7, #12]
 8008fbe:	32ae      	adds	r2, #174	; 0xae
 8008fc0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8008fc4:	699b      	ldr	r3, [r3, #24]
 8008fc6:	2b00      	cmp	r3, #0
 8008fc8:	d00f      	beq.n	8008fea <USBD_LL_DataOutStage+0x152>
        {
          pdev->classId = idx;
 8008fca:	7dba      	ldrb	r2, [r7, #22]
 8008fcc:	68fb      	ldr	r3, [r7, #12]
 8008fce:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
          ret = (USBD_StatusTypeDef)pdev->pClass[idx]->DataOut(pdev, epnum);
 8008fd2:	7dba      	ldrb	r2, [r7, #22]
 8008fd4:	68fb      	ldr	r3, [r7, #12]
 8008fd6:	32ae      	adds	r2, #174	; 0xae
 8008fd8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8008fdc:	699b      	ldr	r3, [r3, #24]
 8008fde:	7afa      	ldrb	r2, [r7, #11]
 8008fe0:	4611      	mov	r1, r2
 8008fe2:	68f8      	ldr	r0, [r7, #12]
 8008fe4:	4798      	blx	r3
 8008fe6:	4603      	mov	r3, r0
 8008fe8:	75fb      	strb	r3, [r7, #23]
        }
      }
      if (ret != USBD_OK)
 8008fea:	7dfb      	ldrb	r3, [r7, #23]
 8008fec:	2b00      	cmp	r3, #0
 8008fee:	d001      	beq.n	8008ff4 <USBD_LL_DataOutStage+0x15c>
      {
        return ret;
 8008ff0:	7dfb      	ldrb	r3, [r7, #23]
 8008ff2:	e000      	b.n	8008ff6 <USBD_LL_DataOutStage+0x15e>
      }
    }
  }

  return USBD_OK;
 8008ff4:	2300      	movs	r3, #0
}
 8008ff6:	4618      	mov	r0, r3
 8008ff8:	3718      	adds	r7, #24
 8008ffa:	46bd      	mov	sp, r7
 8008ffc:	bd80      	pop	{r7, pc}

08008ffe <USBD_LL_DataInStage>:
  * @param  pdata: data pointer
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DataInStage(USBD_HandleTypeDef *pdev,
                                       uint8_t epnum, uint8_t *pdata)
{
 8008ffe:	b580      	push	{r7, lr}
 8009000:	b086      	sub	sp, #24
 8009002:	af00      	add	r7, sp, #0
 8009004:	60f8      	str	r0, [r7, #12]
 8009006:	460b      	mov	r3, r1
 8009008:	607a      	str	r2, [r7, #4]
 800900a:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret;
  uint8_t idx;

  if (epnum == 0U)
 800900c:	7afb      	ldrb	r3, [r7, #11]
 800900e:	2b00      	cmp	r3, #0
 8009010:	d16f      	bne.n	80090f2 <USBD_LL_DataInStage+0xf4>
  {
    pep = &pdev->ep_in[0];
 8009012:	68fb      	ldr	r3, [r7, #12]
 8009014:	3314      	adds	r3, #20
 8009016:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_IN)
 8009018:	68fb      	ldr	r3, [r7, #12]
 800901a:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 800901e:	2b02      	cmp	r3, #2
 8009020:	d15a      	bne.n	80090d8 <USBD_LL_DataInStage+0xda>
    {
      if (pep->rem_length > pep->maxpacket)
 8009022:	693b      	ldr	r3, [r7, #16]
 8009024:	689a      	ldr	r2, [r3, #8]
 8009026:	693b      	ldr	r3, [r7, #16]
 8009028:	68db      	ldr	r3, [r3, #12]
 800902a:	429a      	cmp	r2, r3
 800902c:	d914      	bls.n	8009058 <USBD_LL_DataInStage+0x5a>
      {
        pep->rem_length -= pep->maxpacket;
 800902e:	693b      	ldr	r3, [r7, #16]
 8009030:	689a      	ldr	r2, [r3, #8]
 8009032:	693b      	ldr	r3, [r7, #16]
 8009034:	68db      	ldr	r3, [r3, #12]
 8009036:	1ad2      	subs	r2, r2, r3
 8009038:	693b      	ldr	r3, [r7, #16]
 800903a:	609a      	str	r2, [r3, #8]

        (void)USBD_CtlContinueSendData(pdev, pdata, pep->rem_length);
 800903c:	693b      	ldr	r3, [r7, #16]
 800903e:	689b      	ldr	r3, [r3, #8]
 8009040:	461a      	mov	r2, r3
 8009042:	6879      	ldr	r1, [r7, #4]
 8009044:	68f8      	ldr	r0, [r7, #12]
 8009046:	f001 f8be 	bl	800a1c6 <USBD_CtlContinueSendData>

        /* Prepare endpoint for premature end of transfer */
        (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 800904a:	2300      	movs	r3, #0
 800904c:	2200      	movs	r2, #0
 800904e:	2100      	movs	r1, #0
 8009050:	68f8      	ldr	r0, [r7, #12]
 8009052:	f00f f811 	bl	8018078 <USBD_LL_PrepareReceive>
 8009056:	e03f      	b.n	80090d8 <USBD_LL_DataInStage+0xda>
      }
      else
      {
        /* last packet is MPS multiple, so send ZLP packet */
        if ((pep->maxpacket == pep->rem_length) &&
 8009058:	693b      	ldr	r3, [r7, #16]
 800905a:	68da      	ldr	r2, [r3, #12]
 800905c:	693b      	ldr	r3, [r7, #16]
 800905e:	689b      	ldr	r3, [r3, #8]
 8009060:	429a      	cmp	r2, r3
 8009062:	d11c      	bne.n	800909e <USBD_LL_DataInStage+0xa0>
            (pep->total_length >= pep->maxpacket) &&
 8009064:	693b      	ldr	r3, [r7, #16]
 8009066:	685a      	ldr	r2, [r3, #4]
 8009068:	693b      	ldr	r3, [r7, #16]
 800906a:	68db      	ldr	r3, [r3, #12]
        if ((pep->maxpacket == pep->rem_length) &&
 800906c:	429a      	cmp	r2, r3
 800906e:	d316      	bcc.n	800909e <USBD_LL_DataInStage+0xa0>
            (pep->total_length < pdev->ep0_data_len))
 8009070:	693b      	ldr	r3, [r7, #16]
 8009072:	685a      	ldr	r2, [r3, #4]
 8009074:	68fb      	ldr	r3, [r7, #12]
 8009076:	f8d3 3298 	ldr.w	r3, [r3, #664]	; 0x298
            (pep->total_length >= pep->maxpacket) &&
 800907a:	429a      	cmp	r2, r3
 800907c:	d20f      	bcs.n	800909e <USBD_LL_DataInStage+0xa0>
        {
          (void)USBD_CtlContinueSendData(pdev, NULL, 0U);
 800907e:	2200      	movs	r2, #0
 8009080:	2100      	movs	r1, #0
 8009082:	68f8      	ldr	r0, [r7, #12]
 8009084:	f001 f89f 	bl	800a1c6 <USBD_CtlContinueSendData>
          pdev->ep0_data_len = 0U;
 8009088:	68fb      	ldr	r3, [r7, #12]
 800908a:	2200      	movs	r2, #0
 800908c:	f8c3 2298 	str.w	r2, [r3, #664]	; 0x298

          /* Prepare endpoint for premature end of transfer */
          (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 8009090:	2300      	movs	r3, #0
 8009092:	2200      	movs	r2, #0
 8009094:	2100      	movs	r1, #0
 8009096:	68f8      	ldr	r0, [r7, #12]
 8009098:	f00e ffee 	bl	8018078 <USBD_LL_PrepareReceive>
 800909c:	e01c      	b.n	80090d8 <USBD_LL_DataInStage+0xda>
        }
        else
        {
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800909e:	68fb      	ldr	r3, [r7, #12]
 80090a0:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80090a4:	b2db      	uxtb	r3, r3
 80090a6:	2b03      	cmp	r3, #3
 80090a8:	d10f      	bne.n	80090ca <USBD_LL_DataInStage+0xcc>
          {
            if (pdev->pClass[0]->EP0_TxSent != NULL)
 80090aa:	68fb      	ldr	r3, [r7, #12]
 80090ac:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80090b0:	68db      	ldr	r3, [r3, #12]
 80090b2:	2b00      	cmp	r3, #0
 80090b4:	d009      	beq.n	80090ca <USBD_LL_DataInStage+0xcc>
            {
              pdev->classId = 0U;
 80090b6:	68fb      	ldr	r3, [r7, #12]
 80090b8:	2200      	movs	r2, #0
 80090ba:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
              pdev->pClass[0]->EP0_TxSent(pdev);
 80090be:	68fb      	ldr	r3, [r7, #12]
 80090c0:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80090c4:	68db      	ldr	r3, [r3, #12]
 80090c6:	68f8      	ldr	r0, [r7, #12]
 80090c8:	4798      	blx	r3
            }
          }
          (void)USBD_LL_StallEP(pdev, 0x80U);
 80090ca:	2180      	movs	r1, #128	; 0x80
 80090cc:	68f8      	ldr	r0, [r7, #12]
 80090ce:	f00e ff29 	bl	8017f24 <USBD_LL_StallEP>
          (void)USBD_CtlReceiveStatus(pdev);
 80090d2:	68f8      	ldr	r0, [r7, #12]
 80090d4:	f001 f8c9 	bl	800a26a <USBD_CtlReceiveStatus>
        }
      }
    }

    if (pdev->dev_test_mode != 0U)
 80090d8:	68fb      	ldr	r3, [r7, #12]
 80090da:	f893 32a0 	ldrb.w	r3, [r3, #672]	; 0x2a0
 80090de:	2b00      	cmp	r3, #0
 80090e0:	d03a      	beq.n	8009158 <USBD_LL_DataInStage+0x15a>
    {
      (void)USBD_RunTestMode(pdev);
 80090e2:	68f8      	ldr	r0, [r7, #12]
 80090e4:	f7ff fe42 	bl	8008d6c <USBD_RunTestMode>
      pdev->dev_test_mode = 0U;
 80090e8:	68fb      	ldr	r3, [r7, #12]
 80090ea:	2200      	movs	r2, #0
 80090ec:	f883 22a0 	strb.w	r2, [r3, #672]	; 0x2a0
 80090f0:	e032      	b.n	8009158 <USBD_LL_DataInStage+0x15a>
    }
  }
  else
  {
    /* Get the class index relative to this interface */
    idx = USBD_CoreFindEP(pdev, ((uint8_t)epnum | 0x80U));
 80090f2:	7afb      	ldrb	r3, [r7, #11]
 80090f4:	f063 037f 	orn	r3, r3, #127	; 0x7f
 80090f8:	b2db      	uxtb	r3, r3
 80090fa:	4619      	mov	r1, r3
 80090fc:	68f8      	ldr	r0, [r7, #12]
 80090fe:	f000 f985 	bl	800940c <USBD_CoreFindEP>
 8009102:	4603      	mov	r3, r0
 8009104:	75fb      	strb	r3, [r7, #23]

    if (((uint16_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 8009106:	7dfb      	ldrb	r3, [r7, #23]
 8009108:	2bff      	cmp	r3, #255	; 0xff
 800910a:	d025      	beq.n	8009158 <USBD_LL_DataInStage+0x15a>
 800910c:	7dfb      	ldrb	r3, [r7, #23]
 800910e:	2b00      	cmp	r3, #0
 8009110:	d122      	bne.n	8009158 <USBD_LL_DataInStage+0x15a>
    {
      /* Call the class data out function to manage the request */
      if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8009112:	68fb      	ldr	r3, [r7, #12]
 8009114:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8009118:	b2db      	uxtb	r3, r3
 800911a:	2b03      	cmp	r3, #3
 800911c:	d11c      	bne.n	8009158 <USBD_LL_DataInStage+0x15a>
      {
        if (pdev->pClass[idx]->DataIn != NULL)
 800911e:	7dfa      	ldrb	r2, [r7, #23]
 8009120:	68fb      	ldr	r3, [r7, #12]
 8009122:	32ae      	adds	r2, #174	; 0xae
 8009124:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8009128:	695b      	ldr	r3, [r3, #20]
 800912a:	2b00      	cmp	r3, #0
 800912c:	d014      	beq.n	8009158 <USBD_LL_DataInStage+0x15a>
        {
          pdev->classId = idx;
 800912e:	7dfa      	ldrb	r2, [r7, #23]
 8009130:	68fb      	ldr	r3, [r7, #12]
 8009132:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
          ret = (USBD_StatusTypeDef)pdev->pClass[idx]->DataIn(pdev, epnum);
 8009136:	7dfa      	ldrb	r2, [r7, #23]
 8009138:	68fb      	ldr	r3, [r7, #12]
 800913a:	32ae      	adds	r2, #174	; 0xae
 800913c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8009140:	695b      	ldr	r3, [r3, #20]
 8009142:	7afa      	ldrb	r2, [r7, #11]
 8009144:	4611      	mov	r1, r2
 8009146:	68f8      	ldr	r0, [r7, #12]
 8009148:	4798      	blx	r3
 800914a:	4603      	mov	r3, r0
 800914c:	75bb      	strb	r3, [r7, #22]

          if (ret != USBD_OK)
 800914e:	7dbb      	ldrb	r3, [r7, #22]
 8009150:	2b00      	cmp	r3, #0
 8009152:	d001      	beq.n	8009158 <USBD_LL_DataInStage+0x15a>
          {
            return ret;
 8009154:	7dbb      	ldrb	r3, [r7, #22]
 8009156:	e000      	b.n	800915a <USBD_LL_DataInStage+0x15c>
        }
      }
    }
  }

  return USBD_OK;
 8009158:	2300      	movs	r3, #0
}
 800915a:	4618      	mov	r0, r3
 800915c:	3718      	adds	r7, #24
 800915e:	46bd      	mov	sp, r7
 8009160:	bd80      	pop	{r7, pc}

08009162 <USBD_LL_Reset>:
  *         Handle Reset event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_Reset(USBD_HandleTypeDef *pdev)
{
 8009162:	b580      	push	{r7, lr}
 8009164:	b084      	sub	sp, #16
 8009166:	af00      	add	r7, sp, #0
 8009168:	6078      	str	r0, [r7, #4]
  USBD_StatusTypeDef ret = USBD_OK;
 800916a:	2300      	movs	r3, #0
 800916c:	73fb      	strb	r3, [r7, #15]

  /* Upon Reset call user call back */
  pdev->dev_state = USBD_STATE_DEFAULT;
 800916e:	687b      	ldr	r3, [r7, #4]
 8009170:	2201      	movs	r2, #1
 8009172:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  pdev->ep0_state = USBD_EP0_IDLE;
 8009176:	687b      	ldr	r3, [r7, #4]
 8009178:	2200      	movs	r2, #0
 800917a:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->dev_config = 0U;
 800917e:	687b      	ldr	r3, [r7, #4]
 8009180:	2200      	movs	r2, #0
 8009182:	605a      	str	r2, [r3, #4]
  pdev->dev_remote_wakeup = 0U;
 8009184:	687b      	ldr	r3, [r7, #4]
 8009186:	2200      	movs	r2, #0
 8009188:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
  pdev->dev_test_mode = 0U;
 800918c:	687b      	ldr	r3, [r7, #4]
 800918e:	2200      	movs	r2, #0
 8009190:	f883 22a0 	strb.w	r2, [r3, #672]	; 0x2a0
      }
    }
  }
#else

  if (pdev->pClass[0] != NULL)
 8009194:	687b      	ldr	r3, [r7, #4]
 8009196:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800919a:	2b00      	cmp	r3, #0
 800919c:	d014      	beq.n	80091c8 <USBD_LL_Reset+0x66>
  {
    if (pdev->pClass[0]->DeInit != NULL)
 800919e:	687b      	ldr	r3, [r7, #4]
 80091a0:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80091a4:	685b      	ldr	r3, [r3, #4]
 80091a6:	2b00      	cmp	r3, #0
 80091a8:	d00e      	beq.n	80091c8 <USBD_LL_Reset+0x66>
    {
      if (pdev->pClass[0]->DeInit(pdev, (uint8_t)pdev->dev_config) != USBD_OK)
 80091aa:	687b      	ldr	r3, [r7, #4]
 80091ac:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80091b0:	685b      	ldr	r3, [r3, #4]
 80091b2:	687a      	ldr	r2, [r7, #4]
 80091b4:	6852      	ldr	r2, [r2, #4]
 80091b6:	b2d2      	uxtb	r2, r2
 80091b8:	4611      	mov	r1, r2
 80091ba:	6878      	ldr	r0, [r7, #4]
 80091bc:	4798      	blx	r3
 80091be:	4603      	mov	r3, r0
 80091c0:	2b00      	cmp	r3, #0
 80091c2:	d001      	beq.n	80091c8 <USBD_LL_Reset+0x66>
      {
        ret = USBD_FAIL;
 80091c4:	2303      	movs	r3, #3
 80091c6:	73fb      	strb	r3, [r7, #15]
    }
  }
#endif /* USE_USBD_COMPOSITE */

  /* Open EP0 OUT */
  (void)USBD_LL_OpenEP(pdev, 0x00U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 80091c8:	2340      	movs	r3, #64	; 0x40
 80091ca:	2200      	movs	r2, #0
 80091cc:	2100      	movs	r1, #0
 80091ce:	6878      	ldr	r0, [r7, #4]
 80091d0:	f00e fe63 	bl	8017e9a <USBD_LL_OpenEP>
  pdev->ep_out[0x00U & 0xFU].is_used = 1U;
 80091d4:	687b      	ldr	r3, [r7, #4]
 80091d6:	2201      	movs	r2, #1
 80091d8:	f8a3 2164 	strh.w	r2, [r3, #356]	; 0x164

  pdev->ep_out[0].maxpacket = USB_MAX_EP0_SIZE;
 80091dc:	687b      	ldr	r3, [r7, #4]
 80091de:	2240      	movs	r2, #64	; 0x40
 80091e0:	f8c3 2160 	str.w	r2, [r3, #352]	; 0x160

  /* Open EP0 IN */
  (void)USBD_LL_OpenEP(pdev, 0x80U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 80091e4:	2340      	movs	r3, #64	; 0x40
 80091e6:	2200      	movs	r2, #0
 80091e8:	2180      	movs	r1, #128	; 0x80
 80091ea:	6878      	ldr	r0, [r7, #4]
 80091ec:	f00e fe55 	bl	8017e9a <USBD_LL_OpenEP>
  pdev->ep_in[0x80U & 0xFU].is_used = 1U;
 80091f0:	687b      	ldr	r3, [r7, #4]
 80091f2:	2201      	movs	r2, #1
 80091f4:	849a      	strh	r2, [r3, #36]	; 0x24

  pdev->ep_in[0].maxpacket = USB_MAX_EP0_SIZE;
 80091f6:	687b      	ldr	r3, [r7, #4]
 80091f8:	2240      	movs	r2, #64	; 0x40
 80091fa:	621a      	str	r2, [r3, #32]

  return ret;
 80091fc:	7bfb      	ldrb	r3, [r7, #15]
}
 80091fe:	4618      	mov	r0, r3
 8009200:	3710      	adds	r7, #16
 8009202:	46bd      	mov	sp, r7
 8009204:	bd80      	pop	{r7, pc}

08009206 <USBD_LL_SetSpeed>:
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SetSpeed(USBD_HandleTypeDef *pdev,
                                    USBD_SpeedTypeDef speed)
{
 8009206:	b480      	push	{r7}
 8009208:	b083      	sub	sp, #12
 800920a:	af00      	add	r7, sp, #0
 800920c:	6078      	str	r0, [r7, #4]
 800920e:	460b      	mov	r3, r1
 8009210:	70fb      	strb	r3, [r7, #3]
  pdev->dev_speed = speed;
 8009212:	687b      	ldr	r3, [r7, #4]
 8009214:	78fa      	ldrb	r2, [r7, #3]
 8009216:	741a      	strb	r2, [r3, #16]

  return USBD_OK;
 8009218:	2300      	movs	r3, #0
}
 800921a:	4618      	mov	r0, r3
 800921c:	370c      	adds	r7, #12
 800921e:	46bd      	mov	sp, r7
 8009220:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009224:	4770      	bx	lr

08009226 <USBD_LL_Suspend>:
  *         Handle Suspend event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_Suspend(USBD_HandleTypeDef *pdev)
{
 8009226:	b480      	push	{r7}
 8009228:	b083      	sub	sp, #12
 800922a:	af00      	add	r7, sp, #0
 800922c:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state != USBD_STATE_SUSPENDED)
 800922e:	687b      	ldr	r3, [r7, #4]
 8009230:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8009234:	b2db      	uxtb	r3, r3
 8009236:	2b04      	cmp	r3, #4
 8009238:	d006      	beq.n	8009248 <USBD_LL_Suspend+0x22>
  {
    pdev->dev_old_state = pdev->dev_state;
 800923a:	687b      	ldr	r3, [r7, #4]
 800923c:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8009240:	b2da      	uxtb	r2, r3
 8009242:	687b      	ldr	r3, [r7, #4]
 8009244:	f883 229d 	strb.w	r2, [r3, #669]	; 0x29d
  }

  pdev->dev_state = USBD_STATE_SUSPENDED;
 8009248:	687b      	ldr	r3, [r7, #4]
 800924a:	2204      	movs	r2, #4
 800924c:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c

  return USBD_OK;
 8009250:	2300      	movs	r3, #0
}
 8009252:	4618      	mov	r0, r3
 8009254:	370c      	adds	r7, #12
 8009256:	46bd      	mov	sp, r7
 8009258:	f85d 7b04 	ldr.w	r7, [sp], #4
 800925c:	4770      	bx	lr

0800925e <USBD_LL_Resume>:
  *         Handle Resume event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_Resume(USBD_HandleTypeDef *pdev)
{
 800925e:	b480      	push	{r7}
 8009260:	b083      	sub	sp, #12
 8009262:	af00      	add	r7, sp, #0
 8009264:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state == USBD_STATE_SUSPENDED)
 8009266:	687b      	ldr	r3, [r7, #4]
 8009268:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800926c:	b2db      	uxtb	r3, r3
 800926e:	2b04      	cmp	r3, #4
 8009270:	d106      	bne.n	8009280 <USBD_LL_Resume+0x22>
  {
    pdev->dev_state = pdev->dev_old_state;
 8009272:	687b      	ldr	r3, [r7, #4]
 8009274:	f893 329d 	ldrb.w	r3, [r3, #669]	; 0x29d
 8009278:	b2da      	uxtb	r2, r3
 800927a:	687b      	ldr	r3, [r7, #4]
 800927c:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  }

  return USBD_OK;
 8009280:	2300      	movs	r3, #0
}
 8009282:	4618      	mov	r0, r3
 8009284:	370c      	adds	r7, #12
 8009286:	46bd      	mov	sp, r7
 8009288:	f85d 7b04 	ldr.w	r7, [sp], #4
 800928c:	4770      	bx	lr

0800928e <USBD_LL_SOF>:
  *         Handle SOF event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SOF(USBD_HandleTypeDef *pdev)
{
 800928e:	b580      	push	{r7, lr}
 8009290:	b082      	sub	sp, #8
 8009292:	af00      	add	r7, sp, #0
 8009294:	6078      	str	r0, [r7, #4]
  /* The SOF event can be distributed for all classes that support it */
  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8009296:	687b      	ldr	r3, [r7, #4]
 8009298:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800929c:	b2db      	uxtb	r3, r3
 800929e:	2b03      	cmp	r3, #3
 80092a0:	d110      	bne.n	80092c4 <USBD_LL_SOF+0x36>
          }
        }
      }
    }
#else
    if (pdev->pClass[0] != NULL)
 80092a2:	687b      	ldr	r3, [r7, #4]
 80092a4:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80092a8:	2b00      	cmp	r3, #0
 80092aa:	d00b      	beq.n	80092c4 <USBD_LL_SOF+0x36>
    {
      if (pdev->pClass[0]->SOF != NULL)
 80092ac:	687b      	ldr	r3, [r7, #4]
 80092ae:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80092b2:	69db      	ldr	r3, [r3, #28]
 80092b4:	2b00      	cmp	r3, #0
 80092b6:	d005      	beq.n	80092c4 <USBD_LL_SOF+0x36>
      {
        (void)pdev->pClass[0]->SOF(pdev);
 80092b8:	687b      	ldr	r3, [r7, #4]
 80092ba:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80092be:	69db      	ldr	r3, [r3, #28]
 80092c0:	6878      	ldr	r0, [r7, #4]
 80092c2:	4798      	blx	r3
      }
    }
#endif /* USE_USBD_COMPOSITE */
  }

  return USBD_OK;
 80092c4:	2300      	movs	r3, #0
}
 80092c6:	4618      	mov	r0, r3
 80092c8:	3708      	adds	r7, #8
 80092ca:	46bd      	mov	sp, r7
 80092cc:	bd80      	pop	{r7, pc}

080092ce <USBD_LL_IsoINIncomplete>:
  * @param  epnum: Endpoint number
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_IsoINIncomplete(USBD_HandleTypeDef *pdev,
                                           uint8_t epnum)
{
 80092ce:	b580      	push	{r7, lr}
 80092d0:	b082      	sub	sp, #8
 80092d2:	af00      	add	r7, sp, #0
 80092d4:	6078      	str	r0, [r7, #4]
 80092d6:	460b      	mov	r3, r1
 80092d8:	70fb      	strb	r3, [r7, #3]
  if (pdev->pClass[pdev->classId] == NULL)
 80092da:	687b      	ldr	r3, [r7, #4]
 80092dc:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 80092e0:	687b      	ldr	r3, [r7, #4]
 80092e2:	32ae      	adds	r2, #174	; 0xae
 80092e4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80092e8:	2b00      	cmp	r3, #0
 80092ea:	d101      	bne.n	80092f0 <USBD_LL_IsoINIncomplete+0x22>
  {
    return USBD_FAIL;
 80092ec:	2303      	movs	r3, #3
 80092ee:	e01c      	b.n	800932a <USBD_LL_IsoINIncomplete+0x5c>
  }

  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80092f0:	687b      	ldr	r3, [r7, #4]
 80092f2:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80092f6:	b2db      	uxtb	r3, r3
 80092f8:	2b03      	cmp	r3, #3
 80092fa:	d115      	bne.n	8009328 <USBD_LL_IsoINIncomplete+0x5a>
  {
    if (pdev->pClass[pdev->classId]->IsoINIncomplete != NULL)
 80092fc:	687b      	ldr	r3, [r7, #4]
 80092fe:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8009302:	687b      	ldr	r3, [r7, #4]
 8009304:	32ae      	adds	r2, #174	; 0xae
 8009306:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800930a:	6a1b      	ldr	r3, [r3, #32]
 800930c:	2b00      	cmp	r3, #0
 800930e:	d00b      	beq.n	8009328 <USBD_LL_IsoINIncomplete+0x5a>
    {
      (void)pdev->pClass[pdev->classId]->IsoINIncomplete(pdev, epnum);
 8009310:	687b      	ldr	r3, [r7, #4]
 8009312:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8009316:	687b      	ldr	r3, [r7, #4]
 8009318:	32ae      	adds	r2, #174	; 0xae
 800931a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800931e:	6a1b      	ldr	r3, [r3, #32]
 8009320:	78fa      	ldrb	r2, [r7, #3]
 8009322:	4611      	mov	r1, r2
 8009324:	6878      	ldr	r0, [r7, #4]
 8009326:	4798      	blx	r3
    }
  }

  return USBD_OK;
 8009328:	2300      	movs	r3, #0
}
 800932a:	4618      	mov	r0, r3
 800932c:	3708      	adds	r7, #8
 800932e:	46bd      	mov	sp, r7
 8009330:	bd80      	pop	{r7, pc}

08009332 <USBD_LL_IsoOUTIncomplete>:
  * @param  epnum: Endpoint number
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_IsoOUTIncomplete(USBD_HandleTypeDef *pdev,
                                            uint8_t epnum)
{
 8009332:	b580      	push	{r7, lr}
 8009334:	b082      	sub	sp, #8
 8009336:	af00      	add	r7, sp, #0
 8009338:	6078      	str	r0, [r7, #4]
 800933a:	460b      	mov	r3, r1
 800933c:	70fb      	strb	r3, [r7, #3]
  if (pdev->pClass[pdev->classId] == NULL)
 800933e:	687b      	ldr	r3, [r7, #4]
 8009340:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8009344:	687b      	ldr	r3, [r7, #4]
 8009346:	32ae      	adds	r2, #174	; 0xae
 8009348:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800934c:	2b00      	cmp	r3, #0
 800934e:	d101      	bne.n	8009354 <USBD_LL_IsoOUTIncomplete+0x22>
  {
    return USBD_FAIL;
 8009350:	2303      	movs	r3, #3
 8009352:	e01c      	b.n	800938e <USBD_LL_IsoOUTIncomplete+0x5c>
  }

  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8009354:	687b      	ldr	r3, [r7, #4]
 8009356:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800935a:	b2db      	uxtb	r3, r3
 800935c:	2b03      	cmp	r3, #3
 800935e:	d115      	bne.n	800938c <USBD_LL_IsoOUTIncomplete+0x5a>
  {
    if (pdev->pClass[pdev->classId]->IsoOUTIncomplete != NULL)
 8009360:	687b      	ldr	r3, [r7, #4]
 8009362:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8009366:	687b      	ldr	r3, [r7, #4]
 8009368:	32ae      	adds	r2, #174	; 0xae
 800936a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800936e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009370:	2b00      	cmp	r3, #0
 8009372:	d00b      	beq.n	800938c <USBD_LL_IsoOUTIncomplete+0x5a>
    {
      (void)pdev->pClass[pdev->classId]->IsoOUTIncomplete(pdev, epnum);
 8009374:	687b      	ldr	r3, [r7, #4]
 8009376:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800937a:	687b      	ldr	r3, [r7, #4]
 800937c:	32ae      	adds	r2, #174	; 0xae
 800937e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8009382:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009384:	78fa      	ldrb	r2, [r7, #3]
 8009386:	4611      	mov	r1, r2
 8009388:	6878      	ldr	r0, [r7, #4]
 800938a:	4798      	blx	r3
    }
  }

  return USBD_OK;
 800938c:	2300      	movs	r3, #0
}
 800938e:	4618      	mov	r0, r3
 8009390:	3708      	adds	r7, #8
 8009392:	46bd      	mov	sp, r7
 8009394:	bd80      	pop	{r7, pc}

08009396 <USBD_LL_DevConnected>:
  *         Handle device connection event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DevConnected(USBD_HandleTypeDef *pdev)
{
 8009396:	b480      	push	{r7}
 8009398:	b083      	sub	sp, #12
 800939a:	af00      	add	r7, sp, #0
 800939c:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 800939e:	2300      	movs	r3, #0
}
 80093a0:	4618      	mov	r0, r3
 80093a2:	370c      	adds	r7, #12
 80093a4:	46bd      	mov	sp, r7
 80093a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80093aa:	4770      	bx	lr

080093ac <USBD_LL_DevDisconnected>:
  *         Handle device disconnection event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DevDisconnected(USBD_HandleTypeDef *pdev)
{
 80093ac:	b580      	push	{r7, lr}
 80093ae:	b084      	sub	sp, #16
 80093b0:	af00      	add	r7, sp, #0
 80093b2:	6078      	str	r0, [r7, #4]
  USBD_StatusTypeDef   ret = USBD_OK;
 80093b4:	2300      	movs	r3, #0
 80093b6:	73fb      	strb	r3, [r7, #15]

  /* Free Class Resources */
  pdev->dev_state = USBD_STATE_DEFAULT;
 80093b8:	687b      	ldr	r3, [r7, #4]
 80093ba:	2201      	movs	r2, #1
 80093bc:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
        }
      }
    }
  }
#else
  if (pdev->pClass[0] != NULL)
 80093c0:	687b      	ldr	r3, [r7, #4]
 80093c2:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80093c6:	2b00      	cmp	r3, #0
 80093c8:	d00e      	beq.n	80093e8 <USBD_LL_DevDisconnected+0x3c>
  {
    if (pdev->pClass[0]->DeInit(pdev, (uint8_t)pdev->dev_config) != 0U)
 80093ca:	687b      	ldr	r3, [r7, #4]
 80093cc:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80093d0:	685b      	ldr	r3, [r3, #4]
 80093d2:	687a      	ldr	r2, [r7, #4]
 80093d4:	6852      	ldr	r2, [r2, #4]
 80093d6:	b2d2      	uxtb	r2, r2
 80093d8:	4611      	mov	r1, r2
 80093da:	6878      	ldr	r0, [r7, #4]
 80093dc:	4798      	blx	r3
 80093de:	4603      	mov	r3, r0
 80093e0:	2b00      	cmp	r3, #0
 80093e2:	d001      	beq.n	80093e8 <USBD_LL_DevDisconnected+0x3c>
    {
      ret = USBD_FAIL;
 80093e4:	2303      	movs	r3, #3
 80093e6:	73fb      	strb	r3, [r7, #15]
    }
  }
#endif /* USE_USBD_COMPOSITE */

  return ret;
 80093e8:	7bfb      	ldrb	r3, [r7, #15]
}
 80093ea:	4618      	mov	r0, r3
 80093ec:	3710      	adds	r7, #16
 80093ee:	46bd      	mov	sp, r7
 80093f0:	bd80      	pop	{r7, pc}

080093f2 <USBD_CoreFindIF>:
  * @param  pdev: device instance
  * @param  index : selected interface number
  * @retval index of the class using the selected interface number. OxFF if no class found.
  */
uint8_t USBD_CoreFindIF(USBD_HandleTypeDef *pdev, uint8_t index)
{
 80093f2:	b480      	push	{r7}
 80093f4:	b083      	sub	sp, #12
 80093f6:	af00      	add	r7, sp, #0
 80093f8:	6078      	str	r0, [r7, #4]
 80093fa:	460b      	mov	r3, r1
 80093fc:	70fb      	strb	r3, [r7, #3]
  return 0xFFU;
#else
  UNUSED(pdev);
  UNUSED(index);

  return 0x00U;
 80093fe:	2300      	movs	r3, #0
#endif /* USE_USBD_COMPOSITE */
}
 8009400:	4618      	mov	r0, r3
 8009402:	370c      	adds	r7, #12
 8009404:	46bd      	mov	sp, r7
 8009406:	f85d 7b04 	ldr.w	r7, [sp], #4
 800940a:	4770      	bx	lr

0800940c <USBD_CoreFindEP>:
  * @param  pdev: device instance
  * @param  index : selected endpoint number
  * @retval index of the class using the selected endpoint number. 0xFF if no class found.
  */
uint8_t USBD_CoreFindEP(USBD_HandleTypeDef *pdev, uint8_t index)
{
 800940c:	b480      	push	{r7}
 800940e:	b083      	sub	sp, #12
 8009410:	af00      	add	r7, sp, #0
 8009412:	6078      	str	r0, [r7, #4]
 8009414:	460b      	mov	r3, r1
 8009416:	70fb      	strb	r3, [r7, #3]
  return 0xFFU;
#else
  UNUSED(pdev);
  UNUSED(index);

  return 0x00U;
 8009418:	2300      	movs	r3, #0
#endif /* USE_USBD_COMPOSITE */
}
 800941a:	4618      	mov	r0, r3
 800941c:	370c      	adds	r7, #12
 800941e:	46bd      	mov	sp, r7
 8009420:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009424:	4770      	bx	lr

08009426 <USBD_GetEpDesc>:
  * @param  pConfDesc:  pointer to Bos descriptor
  * @param  EpAddr:  endpoint address
  * @retval pointer to video endpoint descriptor
  */
void *USBD_GetEpDesc(uint8_t *pConfDesc, uint8_t EpAddr)
{
 8009426:	b580      	push	{r7, lr}
 8009428:	b086      	sub	sp, #24
 800942a:	af00      	add	r7, sp, #0
 800942c:	6078      	str	r0, [r7, #4]
 800942e:	460b      	mov	r3, r1
 8009430:	70fb      	strb	r3, [r7, #3]
  USBD_DescHeaderTypeDef *pdesc = (USBD_DescHeaderTypeDef *)(void *)pConfDesc;
 8009432:	687b      	ldr	r3, [r7, #4]
 8009434:	617b      	str	r3, [r7, #20]
  USBD_ConfigDescTypeDef *desc = (USBD_ConfigDescTypeDef *)(void *)pConfDesc;
 8009436:	687b      	ldr	r3, [r7, #4]
 8009438:	60fb      	str	r3, [r7, #12]
  USBD_EpDescTypeDef *pEpDesc = NULL;
 800943a:	2300      	movs	r3, #0
 800943c:	613b      	str	r3, [r7, #16]
  uint16_t ptr;

  if (desc->wTotalLength > desc->bLength)
 800943e:	68fb      	ldr	r3, [r7, #12]
 8009440:	885b      	ldrh	r3, [r3, #2]
 8009442:	b29a      	uxth	r2, r3
 8009444:	68fb      	ldr	r3, [r7, #12]
 8009446:	781b      	ldrb	r3, [r3, #0]
 8009448:	b29b      	uxth	r3, r3
 800944a:	429a      	cmp	r2, r3
 800944c:	d920      	bls.n	8009490 <USBD_GetEpDesc+0x6a>
  {
    ptr = desc->bLength;
 800944e:	68fb      	ldr	r3, [r7, #12]
 8009450:	781b      	ldrb	r3, [r3, #0]
 8009452:	b29b      	uxth	r3, r3
 8009454:	817b      	strh	r3, [r7, #10]

    while (ptr < desc->wTotalLength)
 8009456:	e013      	b.n	8009480 <USBD_GetEpDesc+0x5a>
    {
      pdesc = USBD_GetNextDesc((uint8_t *)pdesc, &ptr);
 8009458:	f107 030a 	add.w	r3, r7, #10
 800945c:	4619      	mov	r1, r3
 800945e:	6978      	ldr	r0, [r7, #20]
 8009460:	f000 f81b 	bl	800949a <USBD_GetNextDesc>
 8009464:	6178      	str	r0, [r7, #20]

      if (pdesc->bDescriptorType == USB_DESC_TYPE_ENDPOINT)
 8009466:	697b      	ldr	r3, [r7, #20]
 8009468:	785b      	ldrb	r3, [r3, #1]
 800946a:	2b05      	cmp	r3, #5
 800946c:	d108      	bne.n	8009480 <USBD_GetEpDesc+0x5a>
      {
        pEpDesc = (USBD_EpDescTypeDef *)(void *)pdesc;
 800946e:	697b      	ldr	r3, [r7, #20]
 8009470:	613b      	str	r3, [r7, #16]

        if (pEpDesc->bEndpointAddress == EpAddr)
 8009472:	693b      	ldr	r3, [r7, #16]
 8009474:	789b      	ldrb	r3, [r3, #2]
 8009476:	78fa      	ldrb	r2, [r7, #3]
 8009478:	429a      	cmp	r2, r3
 800947a:	d008      	beq.n	800948e <USBD_GetEpDesc+0x68>
        {
          break;
        }
        else
        {
          pEpDesc = NULL;
 800947c:	2300      	movs	r3, #0
 800947e:	613b      	str	r3, [r7, #16]
    while (ptr < desc->wTotalLength)
 8009480:	68fb      	ldr	r3, [r7, #12]
 8009482:	885b      	ldrh	r3, [r3, #2]
 8009484:	b29a      	uxth	r2, r3
 8009486:	897b      	ldrh	r3, [r7, #10]
 8009488:	429a      	cmp	r2, r3
 800948a:	d8e5      	bhi.n	8009458 <USBD_GetEpDesc+0x32>
 800948c:	e000      	b.n	8009490 <USBD_GetEpDesc+0x6a>
          break;
 800948e:	bf00      	nop
        }
      }
    }
  }

  return (void *)pEpDesc;
 8009490:	693b      	ldr	r3, [r7, #16]
}
 8009492:	4618      	mov	r0, r3
 8009494:	3718      	adds	r7, #24
 8009496:	46bd      	mov	sp, r7
 8009498:	bd80      	pop	{r7, pc}

0800949a <USBD_GetNextDesc>:
  * @param  buf: Buffer where the descriptor is available
  * @param  ptr: data pointer inside the descriptor
  * @retval next header
  */
USBD_DescHeaderTypeDef *USBD_GetNextDesc(uint8_t *pbuf, uint16_t *ptr)
{
 800949a:	b480      	push	{r7}
 800949c:	b085      	sub	sp, #20
 800949e:	af00      	add	r7, sp, #0
 80094a0:	6078      	str	r0, [r7, #4]
 80094a2:	6039      	str	r1, [r7, #0]
  USBD_DescHeaderTypeDef *pnext = (USBD_DescHeaderTypeDef *)(void *)pbuf;
 80094a4:	687b      	ldr	r3, [r7, #4]
 80094a6:	60fb      	str	r3, [r7, #12]

  *ptr += pnext->bLength;
 80094a8:	683b      	ldr	r3, [r7, #0]
 80094aa:	881a      	ldrh	r2, [r3, #0]
 80094ac:	68fb      	ldr	r3, [r7, #12]
 80094ae:	781b      	ldrb	r3, [r3, #0]
 80094b0:	b29b      	uxth	r3, r3
 80094b2:	4413      	add	r3, r2
 80094b4:	b29a      	uxth	r2, r3
 80094b6:	683b      	ldr	r3, [r7, #0]
 80094b8:	801a      	strh	r2, [r3, #0]
  pnext = (USBD_DescHeaderTypeDef *)(void *)(pbuf + pnext->bLength);
 80094ba:	68fb      	ldr	r3, [r7, #12]
 80094bc:	781b      	ldrb	r3, [r3, #0]
 80094be:	461a      	mov	r2, r3
 80094c0:	687b      	ldr	r3, [r7, #4]
 80094c2:	4413      	add	r3, r2
 80094c4:	60fb      	str	r3, [r7, #12]

  return (pnext);
 80094c6:	68fb      	ldr	r3, [r7, #12]
}
 80094c8:	4618      	mov	r0, r3
 80094ca:	3714      	adds	r7, #20
 80094cc:	46bd      	mov	sp, r7
 80094ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80094d2:	4770      	bx	lr

080094d4 <SWAPBYTE>:

/** @defgroup USBD_DEF_Exported_Macros
  * @{
  */
__STATIC_INLINE uint16_t SWAPBYTE(uint8_t *addr)
{
 80094d4:	b480      	push	{r7}
 80094d6:	b087      	sub	sp, #28
 80094d8:	af00      	add	r7, sp, #0
 80094da:	6078      	str	r0, [r7, #4]
  uint16_t _SwapVal;
  uint16_t _Byte1;
  uint16_t _Byte2;
  uint8_t *_pbuff = addr;
 80094dc:	687b      	ldr	r3, [r7, #4]
 80094de:	617b      	str	r3, [r7, #20]

  _Byte1 = *(uint8_t *)_pbuff;
 80094e0:	697b      	ldr	r3, [r7, #20]
 80094e2:	781b      	ldrb	r3, [r3, #0]
 80094e4:	827b      	strh	r3, [r7, #18]
  _pbuff++;
 80094e6:	697b      	ldr	r3, [r7, #20]
 80094e8:	3301      	adds	r3, #1
 80094ea:	617b      	str	r3, [r7, #20]
  _Byte2 = *(uint8_t *)_pbuff;
 80094ec:	697b      	ldr	r3, [r7, #20]
 80094ee:	781b      	ldrb	r3, [r3, #0]
 80094f0:	823b      	strh	r3, [r7, #16]

  _SwapVal = (_Byte2 << 8) | _Byte1;
 80094f2:	8a3b      	ldrh	r3, [r7, #16]
 80094f4:	021b      	lsls	r3, r3, #8
 80094f6:	b21a      	sxth	r2, r3
 80094f8:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 80094fc:	4313      	orrs	r3, r2
 80094fe:	b21b      	sxth	r3, r3
 8009500:	81fb      	strh	r3, [r7, #14]

  return _SwapVal;
 8009502:	89fb      	ldrh	r3, [r7, #14]
}
 8009504:	4618      	mov	r0, r3
 8009506:	371c      	adds	r7, #28
 8009508:	46bd      	mov	sp, r7
 800950a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800950e:	4770      	bx	lr

08009510 <USBD_StdDevReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdDevReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8009510:	b580      	push	{r7, lr}
 8009512:	b084      	sub	sp, #16
 8009514:	af00      	add	r7, sp, #0
 8009516:	6078      	str	r0, [r7, #4]
 8009518:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 800951a:	2300      	movs	r3, #0
 800951c:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800951e:	683b      	ldr	r3, [r7, #0]
 8009520:	781b      	ldrb	r3, [r3, #0]
 8009522:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8009526:	2b40      	cmp	r3, #64	; 0x40
 8009528:	d005      	beq.n	8009536 <USBD_StdDevReq+0x26>
 800952a:	2b40      	cmp	r3, #64	; 0x40
 800952c:	d857      	bhi.n	80095de <USBD_StdDevReq+0xce>
 800952e:	2b00      	cmp	r3, #0
 8009530:	d00f      	beq.n	8009552 <USBD_StdDevReq+0x42>
 8009532:	2b20      	cmp	r3, #32
 8009534:	d153      	bne.n	80095de <USBD_StdDevReq+0xce>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      ret = (USBD_StatusTypeDef)pdev->pClass[pdev->classId]->Setup(pdev, req);
 8009536:	687b      	ldr	r3, [r7, #4]
 8009538:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800953c:	687b      	ldr	r3, [r7, #4]
 800953e:	32ae      	adds	r2, #174	; 0xae
 8009540:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8009544:	689b      	ldr	r3, [r3, #8]
 8009546:	6839      	ldr	r1, [r7, #0]
 8009548:	6878      	ldr	r0, [r7, #4]
 800954a:	4798      	blx	r3
 800954c:	4603      	mov	r3, r0
 800954e:	73fb      	strb	r3, [r7, #15]
      break;
 8009550:	e04a      	b.n	80095e8 <USBD_StdDevReq+0xd8>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 8009552:	683b      	ldr	r3, [r7, #0]
 8009554:	785b      	ldrb	r3, [r3, #1]
 8009556:	2b09      	cmp	r3, #9
 8009558:	d83b      	bhi.n	80095d2 <USBD_StdDevReq+0xc2>
 800955a:	a201      	add	r2, pc, #4	; (adr r2, 8009560 <USBD_StdDevReq+0x50>)
 800955c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009560:	080095b5 	.word	0x080095b5
 8009564:	080095c9 	.word	0x080095c9
 8009568:	080095d3 	.word	0x080095d3
 800956c:	080095bf 	.word	0x080095bf
 8009570:	080095d3 	.word	0x080095d3
 8009574:	08009593 	.word	0x08009593
 8009578:	08009589 	.word	0x08009589
 800957c:	080095d3 	.word	0x080095d3
 8009580:	080095ab 	.word	0x080095ab
 8009584:	0800959d 	.word	0x0800959d
      {
        case USB_REQ_GET_DESCRIPTOR:
          USBD_GetDescriptor(pdev, req);
 8009588:	6839      	ldr	r1, [r7, #0]
 800958a:	6878      	ldr	r0, [r7, #4]
 800958c:	f000 fa3c 	bl	8009a08 <USBD_GetDescriptor>
          break;
 8009590:	e024      	b.n	80095dc <USBD_StdDevReq+0xcc>

        case USB_REQ_SET_ADDRESS:
          USBD_SetAddress(pdev, req);
 8009592:	6839      	ldr	r1, [r7, #0]
 8009594:	6878      	ldr	r0, [r7, #4]
 8009596:	f000 fba1 	bl	8009cdc <USBD_SetAddress>
          break;
 800959a:	e01f      	b.n	80095dc <USBD_StdDevReq+0xcc>

        case USB_REQ_SET_CONFIGURATION:
          ret = USBD_SetConfig(pdev, req);
 800959c:	6839      	ldr	r1, [r7, #0]
 800959e:	6878      	ldr	r0, [r7, #4]
 80095a0:	f000 fbe0 	bl	8009d64 <USBD_SetConfig>
 80095a4:	4603      	mov	r3, r0
 80095a6:	73fb      	strb	r3, [r7, #15]
          break;
 80095a8:	e018      	b.n	80095dc <USBD_StdDevReq+0xcc>

        case USB_REQ_GET_CONFIGURATION:
          USBD_GetConfig(pdev, req);
 80095aa:	6839      	ldr	r1, [r7, #0]
 80095ac:	6878      	ldr	r0, [r7, #4]
 80095ae:	f000 fc83 	bl	8009eb8 <USBD_GetConfig>
          break;
 80095b2:	e013      	b.n	80095dc <USBD_StdDevReq+0xcc>

        case USB_REQ_GET_STATUS:
          USBD_GetStatus(pdev, req);
 80095b4:	6839      	ldr	r1, [r7, #0]
 80095b6:	6878      	ldr	r0, [r7, #4]
 80095b8:	f000 fcb4 	bl	8009f24 <USBD_GetStatus>
          break;
 80095bc:	e00e      	b.n	80095dc <USBD_StdDevReq+0xcc>

        case USB_REQ_SET_FEATURE:
          USBD_SetFeature(pdev, req);
 80095be:	6839      	ldr	r1, [r7, #0]
 80095c0:	6878      	ldr	r0, [r7, #4]
 80095c2:	f000 fce3 	bl	8009f8c <USBD_SetFeature>
          break;
 80095c6:	e009      	b.n	80095dc <USBD_StdDevReq+0xcc>

        case USB_REQ_CLEAR_FEATURE:
          USBD_ClrFeature(pdev, req);
 80095c8:	6839      	ldr	r1, [r7, #0]
 80095ca:	6878      	ldr	r0, [r7, #4]
 80095cc:	f000 fd07 	bl	8009fde <USBD_ClrFeature>
          break;
 80095d0:	e004      	b.n	80095dc <USBD_StdDevReq+0xcc>

        default:
          USBD_CtlError(pdev, req);
 80095d2:	6839      	ldr	r1, [r7, #0]
 80095d4:	6878      	ldr	r0, [r7, #4]
 80095d6:	f000 fd5e 	bl	800a096 <USBD_CtlError>
          break;
 80095da:	bf00      	nop
      }
      break;
 80095dc:	e004      	b.n	80095e8 <USBD_StdDevReq+0xd8>

    default:
      USBD_CtlError(pdev, req);
 80095de:	6839      	ldr	r1, [r7, #0]
 80095e0:	6878      	ldr	r0, [r7, #4]
 80095e2:	f000 fd58 	bl	800a096 <USBD_CtlError>
      break;
 80095e6:	bf00      	nop
  }

  return ret;
 80095e8:	7bfb      	ldrb	r3, [r7, #15]
}
 80095ea:	4618      	mov	r0, r3
 80095ec:	3710      	adds	r7, #16
 80095ee:	46bd      	mov	sp, r7
 80095f0:	bd80      	pop	{r7, pc}
 80095f2:	bf00      	nop

080095f4 <USBD_StdItfReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdItfReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 80095f4:	b580      	push	{r7, lr}
 80095f6:	b084      	sub	sp, #16
 80095f8:	af00      	add	r7, sp, #0
 80095fa:	6078      	str	r0, [r7, #4]
 80095fc:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 80095fe:	2300      	movs	r3, #0
 8009600:	73fb      	strb	r3, [r7, #15]
  uint8_t idx;

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8009602:	683b      	ldr	r3, [r7, #0]
 8009604:	781b      	ldrb	r3, [r3, #0]
 8009606:	f003 0360 	and.w	r3, r3, #96	; 0x60
 800960a:	2b40      	cmp	r3, #64	; 0x40
 800960c:	d005      	beq.n	800961a <USBD_StdItfReq+0x26>
 800960e:	2b40      	cmp	r3, #64	; 0x40
 8009610:	d852      	bhi.n	80096b8 <USBD_StdItfReq+0xc4>
 8009612:	2b00      	cmp	r3, #0
 8009614:	d001      	beq.n	800961a <USBD_StdItfReq+0x26>
 8009616:	2b20      	cmp	r3, #32
 8009618:	d14e      	bne.n	80096b8 <USBD_StdItfReq+0xc4>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
    case USB_REQ_TYPE_STANDARD:
      switch (pdev->dev_state)
 800961a:	687b      	ldr	r3, [r7, #4]
 800961c:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8009620:	b2db      	uxtb	r3, r3
 8009622:	3b01      	subs	r3, #1
 8009624:	2b02      	cmp	r3, #2
 8009626:	d840      	bhi.n	80096aa <USBD_StdItfReq+0xb6>
      {
        case USBD_STATE_DEFAULT:
        case USBD_STATE_ADDRESSED:
        case USBD_STATE_CONFIGURED:

          if (LOBYTE(req->wIndex) <= USBD_MAX_NUM_INTERFACES)
 8009628:	683b      	ldr	r3, [r7, #0]
 800962a:	889b      	ldrh	r3, [r3, #4]
 800962c:	b2db      	uxtb	r3, r3
 800962e:	2b01      	cmp	r3, #1
 8009630:	d836      	bhi.n	80096a0 <USBD_StdItfReq+0xac>
          {
            /* Get the class index relative to this interface */
            idx = USBD_CoreFindIF(pdev, LOBYTE(req->wIndex));
 8009632:	683b      	ldr	r3, [r7, #0]
 8009634:	889b      	ldrh	r3, [r3, #4]
 8009636:	b2db      	uxtb	r3, r3
 8009638:	4619      	mov	r1, r3
 800963a:	6878      	ldr	r0, [r7, #4]
 800963c:	f7ff fed9 	bl	80093f2 <USBD_CoreFindIF>
 8009640:	4603      	mov	r3, r0
 8009642:	73bb      	strb	r3, [r7, #14]
            if (((uint8_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 8009644:	7bbb      	ldrb	r3, [r7, #14]
 8009646:	2bff      	cmp	r3, #255	; 0xff
 8009648:	d01d      	beq.n	8009686 <USBD_StdItfReq+0x92>
 800964a:	7bbb      	ldrb	r3, [r7, #14]
 800964c:	2b00      	cmp	r3, #0
 800964e:	d11a      	bne.n	8009686 <USBD_StdItfReq+0x92>
            {
              /* Call the class data out function to manage the request */
              if (pdev->pClass[idx]->Setup != NULL)
 8009650:	7bba      	ldrb	r2, [r7, #14]
 8009652:	687b      	ldr	r3, [r7, #4]
 8009654:	32ae      	adds	r2, #174	; 0xae
 8009656:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800965a:	689b      	ldr	r3, [r3, #8]
 800965c:	2b00      	cmp	r3, #0
 800965e:	d00f      	beq.n	8009680 <USBD_StdItfReq+0x8c>
              {
                pdev->classId = idx;
 8009660:	7bba      	ldrb	r2, [r7, #14]
 8009662:	687b      	ldr	r3, [r7, #4]
 8009664:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
                ret = (USBD_StatusTypeDef)(pdev->pClass[idx]->Setup(pdev, req));
 8009668:	7bba      	ldrb	r2, [r7, #14]
 800966a:	687b      	ldr	r3, [r7, #4]
 800966c:	32ae      	adds	r2, #174	; 0xae
 800966e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8009672:	689b      	ldr	r3, [r3, #8]
 8009674:	6839      	ldr	r1, [r7, #0]
 8009676:	6878      	ldr	r0, [r7, #4]
 8009678:	4798      	blx	r3
 800967a:	4603      	mov	r3, r0
 800967c:	73fb      	strb	r3, [r7, #15]
              if (pdev->pClass[idx]->Setup != NULL)
 800967e:	e004      	b.n	800968a <USBD_StdItfReq+0x96>
              }
              else
              {
                /* should never reach this condition */
                ret = USBD_FAIL;
 8009680:	2303      	movs	r3, #3
 8009682:	73fb      	strb	r3, [r7, #15]
              if (pdev->pClass[idx]->Setup != NULL)
 8009684:	e001      	b.n	800968a <USBD_StdItfReq+0x96>
              }
            }
            else
            {
              /* No relative interface found */
              ret = USBD_FAIL;
 8009686:	2303      	movs	r3, #3
 8009688:	73fb      	strb	r3, [r7, #15]
            }

            if ((req->wLength == 0U) && (ret == USBD_OK))
 800968a:	683b      	ldr	r3, [r7, #0]
 800968c:	88db      	ldrh	r3, [r3, #6]
 800968e:	2b00      	cmp	r3, #0
 8009690:	d110      	bne.n	80096b4 <USBD_StdItfReq+0xc0>
 8009692:	7bfb      	ldrb	r3, [r7, #15]
 8009694:	2b00      	cmp	r3, #0
 8009696:	d10d      	bne.n	80096b4 <USBD_StdItfReq+0xc0>
            {
              (void)USBD_CtlSendStatus(pdev);
 8009698:	6878      	ldr	r0, [r7, #4]
 800969a:	f000 fdd3 	bl	800a244 <USBD_CtlSendStatus>
          }
          else
          {
            USBD_CtlError(pdev, req);
          }
          break;
 800969e:	e009      	b.n	80096b4 <USBD_StdItfReq+0xc0>
            USBD_CtlError(pdev, req);
 80096a0:	6839      	ldr	r1, [r7, #0]
 80096a2:	6878      	ldr	r0, [r7, #4]
 80096a4:	f000 fcf7 	bl	800a096 <USBD_CtlError>
          break;
 80096a8:	e004      	b.n	80096b4 <USBD_StdItfReq+0xc0>

        default:
          USBD_CtlError(pdev, req);
 80096aa:	6839      	ldr	r1, [r7, #0]
 80096ac:	6878      	ldr	r0, [r7, #4]
 80096ae:	f000 fcf2 	bl	800a096 <USBD_CtlError>
          break;
 80096b2:	e000      	b.n	80096b6 <USBD_StdItfReq+0xc2>
          break;
 80096b4:	bf00      	nop
      }
      break;
 80096b6:	e004      	b.n	80096c2 <USBD_StdItfReq+0xce>

    default:
      USBD_CtlError(pdev, req);
 80096b8:	6839      	ldr	r1, [r7, #0]
 80096ba:	6878      	ldr	r0, [r7, #4]
 80096bc:	f000 fceb 	bl	800a096 <USBD_CtlError>
      break;
 80096c0:	bf00      	nop
  }

  return ret;
 80096c2:	7bfb      	ldrb	r3, [r7, #15]
}
 80096c4:	4618      	mov	r0, r3
 80096c6:	3710      	adds	r7, #16
 80096c8:	46bd      	mov	sp, r7
 80096ca:	bd80      	pop	{r7, pc}

080096cc <USBD_StdEPReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdEPReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 80096cc:	b580      	push	{r7, lr}
 80096ce:	b084      	sub	sp, #16
 80096d0:	af00      	add	r7, sp, #0
 80096d2:	6078      	str	r0, [r7, #4]
 80096d4:	6039      	str	r1, [r7, #0]
  USBD_EndpointTypeDef *pep;
  uint8_t ep_addr;
  uint8_t idx;
  USBD_StatusTypeDef ret = USBD_OK;
 80096d6:	2300      	movs	r3, #0
 80096d8:	73fb      	strb	r3, [r7, #15]

  ep_addr = LOBYTE(req->wIndex);
 80096da:	683b      	ldr	r3, [r7, #0]
 80096dc:	889b      	ldrh	r3, [r3, #4]
 80096de:	73bb      	strb	r3, [r7, #14]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 80096e0:	683b      	ldr	r3, [r7, #0]
 80096e2:	781b      	ldrb	r3, [r3, #0]
 80096e4:	f003 0360 	and.w	r3, r3, #96	; 0x60
 80096e8:	2b40      	cmp	r3, #64	; 0x40
 80096ea:	d007      	beq.n	80096fc <USBD_StdEPReq+0x30>
 80096ec:	2b40      	cmp	r3, #64	; 0x40
 80096ee:	f200 817f 	bhi.w	80099f0 <USBD_StdEPReq+0x324>
 80096f2:	2b00      	cmp	r3, #0
 80096f4:	d02a      	beq.n	800974c <USBD_StdEPReq+0x80>
 80096f6:	2b20      	cmp	r3, #32
 80096f8:	f040 817a 	bne.w	80099f0 <USBD_StdEPReq+0x324>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      /* Get the class index relative to this endpoint */
      idx = USBD_CoreFindEP(pdev, ep_addr);
 80096fc:	7bbb      	ldrb	r3, [r7, #14]
 80096fe:	4619      	mov	r1, r3
 8009700:	6878      	ldr	r0, [r7, #4]
 8009702:	f7ff fe83 	bl	800940c <USBD_CoreFindEP>
 8009706:	4603      	mov	r3, r0
 8009708:	737b      	strb	r3, [r7, #13]
      if (((uint8_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 800970a:	7b7b      	ldrb	r3, [r7, #13]
 800970c:	2bff      	cmp	r3, #255	; 0xff
 800970e:	f000 8174 	beq.w	80099fa <USBD_StdEPReq+0x32e>
 8009712:	7b7b      	ldrb	r3, [r7, #13]
 8009714:	2b00      	cmp	r3, #0
 8009716:	f040 8170 	bne.w	80099fa <USBD_StdEPReq+0x32e>
      {
        pdev->classId = idx;
 800971a:	7b7a      	ldrb	r2, [r7, #13]
 800971c:	687b      	ldr	r3, [r7, #4]
 800971e:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
        /* Call the class data out function to manage the request */
        if (pdev->pClass[idx]->Setup != NULL)
 8009722:	7b7a      	ldrb	r2, [r7, #13]
 8009724:	687b      	ldr	r3, [r7, #4]
 8009726:	32ae      	adds	r2, #174	; 0xae
 8009728:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800972c:	689b      	ldr	r3, [r3, #8]
 800972e:	2b00      	cmp	r3, #0
 8009730:	f000 8163 	beq.w	80099fa <USBD_StdEPReq+0x32e>
        {
          ret = (USBD_StatusTypeDef)pdev->pClass[idx]->Setup(pdev, req);
 8009734:	7b7a      	ldrb	r2, [r7, #13]
 8009736:	687b      	ldr	r3, [r7, #4]
 8009738:	32ae      	adds	r2, #174	; 0xae
 800973a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800973e:	689b      	ldr	r3, [r3, #8]
 8009740:	6839      	ldr	r1, [r7, #0]
 8009742:	6878      	ldr	r0, [r7, #4]
 8009744:	4798      	blx	r3
 8009746:	4603      	mov	r3, r0
 8009748:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 800974a:	e156      	b.n	80099fa <USBD_StdEPReq+0x32e>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 800974c:	683b      	ldr	r3, [r7, #0]
 800974e:	785b      	ldrb	r3, [r3, #1]
 8009750:	2b03      	cmp	r3, #3
 8009752:	d008      	beq.n	8009766 <USBD_StdEPReq+0x9a>
 8009754:	2b03      	cmp	r3, #3
 8009756:	f300 8145 	bgt.w	80099e4 <USBD_StdEPReq+0x318>
 800975a:	2b00      	cmp	r3, #0
 800975c:	f000 809b 	beq.w	8009896 <USBD_StdEPReq+0x1ca>
 8009760:	2b01      	cmp	r3, #1
 8009762:	d03c      	beq.n	80097de <USBD_StdEPReq+0x112>
 8009764:	e13e      	b.n	80099e4 <USBD_StdEPReq+0x318>
      {
        case USB_REQ_SET_FEATURE:
          switch (pdev->dev_state)
 8009766:	687b      	ldr	r3, [r7, #4]
 8009768:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800976c:	b2db      	uxtb	r3, r3
 800976e:	2b02      	cmp	r3, #2
 8009770:	d002      	beq.n	8009778 <USBD_StdEPReq+0xac>
 8009772:	2b03      	cmp	r3, #3
 8009774:	d016      	beq.n	80097a4 <USBD_StdEPReq+0xd8>
 8009776:	e02c      	b.n	80097d2 <USBD_StdEPReq+0x106>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 8009778:	7bbb      	ldrb	r3, [r7, #14]
 800977a:	2b00      	cmp	r3, #0
 800977c:	d00d      	beq.n	800979a <USBD_StdEPReq+0xce>
 800977e:	7bbb      	ldrb	r3, [r7, #14]
 8009780:	2b80      	cmp	r3, #128	; 0x80
 8009782:	d00a      	beq.n	800979a <USBD_StdEPReq+0xce>
              {
                (void)USBD_LL_StallEP(pdev, ep_addr);
 8009784:	7bbb      	ldrb	r3, [r7, #14]
 8009786:	4619      	mov	r1, r3
 8009788:	6878      	ldr	r0, [r7, #4]
 800978a:	f00e fbcb 	bl	8017f24 <USBD_LL_StallEP>
                (void)USBD_LL_StallEP(pdev, 0x80U);
 800978e:	2180      	movs	r1, #128	; 0x80
 8009790:	6878      	ldr	r0, [r7, #4]
 8009792:	f00e fbc7 	bl	8017f24 <USBD_LL_StallEP>
 8009796:	bf00      	nop
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 8009798:	e020      	b.n	80097dc <USBD_StdEPReq+0x110>
                USBD_CtlError(pdev, req);
 800979a:	6839      	ldr	r1, [r7, #0]
 800979c:	6878      	ldr	r0, [r7, #4]
 800979e:	f000 fc7a 	bl	800a096 <USBD_CtlError>
              break;
 80097a2:	e01b      	b.n	80097dc <USBD_StdEPReq+0x110>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 80097a4:	683b      	ldr	r3, [r7, #0]
 80097a6:	885b      	ldrh	r3, [r3, #2]
 80097a8:	2b00      	cmp	r3, #0
 80097aa:	d10e      	bne.n	80097ca <USBD_StdEPReq+0xfe>
              {
                if ((ep_addr != 0x00U) && (ep_addr != 0x80U) && (req->wLength == 0x00U))
 80097ac:	7bbb      	ldrb	r3, [r7, #14]
 80097ae:	2b00      	cmp	r3, #0
 80097b0:	d00b      	beq.n	80097ca <USBD_StdEPReq+0xfe>
 80097b2:	7bbb      	ldrb	r3, [r7, #14]
 80097b4:	2b80      	cmp	r3, #128	; 0x80
 80097b6:	d008      	beq.n	80097ca <USBD_StdEPReq+0xfe>
 80097b8:	683b      	ldr	r3, [r7, #0]
 80097ba:	88db      	ldrh	r3, [r3, #6]
 80097bc:	2b00      	cmp	r3, #0
 80097be:	d104      	bne.n	80097ca <USBD_StdEPReq+0xfe>
                {
                  (void)USBD_LL_StallEP(pdev, ep_addr);
 80097c0:	7bbb      	ldrb	r3, [r7, #14]
 80097c2:	4619      	mov	r1, r3
 80097c4:	6878      	ldr	r0, [r7, #4]
 80097c6:	f00e fbad 	bl	8017f24 <USBD_LL_StallEP>
                }
              }
              (void)USBD_CtlSendStatus(pdev);
 80097ca:	6878      	ldr	r0, [r7, #4]
 80097cc:	f000 fd3a 	bl	800a244 <USBD_CtlSendStatus>

              break;
 80097d0:	e004      	b.n	80097dc <USBD_StdEPReq+0x110>

            default:
              USBD_CtlError(pdev, req);
 80097d2:	6839      	ldr	r1, [r7, #0]
 80097d4:	6878      	ldr	r0, [r7, #4]
 80097d6:	f000 fc5e 	bl	800a096 <USBD_CtlError>
              break;
 80097da:	bf00      	nop
          }
          break;
 80097dc:	e107      	b.n	80099ee <USBD_StdEPReq+0x322>

        case USB_REQ_CLEAR_FEATURE:

          switch (pdev->dev_state)
 80097de:	687b      	ldr	r3, [r7, #4]
 80097e0:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80097e4:	b2db      	uxtb	r3, r3
 80097e6:	2b02      	cmp	r3, #2
 80097e8:	d002      	beq.n	80097f0 <USBD_StdEPReq+0x124>
 80097ea:	2b03      	cmp	r3, #3
 80097ec:	d016      	beq.n	800981c <USBD_StdEPReq+0x150>
 80097ee:	e04b      	b.n	8009888 <USBD_StdEPReq+0x1bc>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 80097f0:	7bbb      	ldrb	r3, [r7, #14]
 80097f2:	2b00      	cmp	r3, #0
 80097f4:	d00d      	beq.n	8009812 <USBD_StdEPReq+0x146>
 80097f6:	7bbb      	ldrb	r3, [r7, #14]
 80097f8:	2b80      	cmp	r3, #128	; 0x80
 80097fa:	d00a      	beq.n	8009812 <USBD_StdEPReq+0x146>
              {
                (void)USBD_LL_StallEP(pdev, ep_addr);
 80097fc:	7bbb      	ldrb	r3, [r7, #14]
 80097fe:	4619      	mov	r1, r3
 8009800:	6878      	ldr	r0, [r7, #4]
 8009802:	f00e fb8f 	bl	8017f24 <USBD_LL_StallEP>
                (void)USBD_LL_StallEP(pdev, 0x80U);
 8009806:	2180      	movs	r1, #128	; 0x80
 8009808:	6878      	ldr	r0, [r7, #4]
 800980a:	f00e fb8b 	bl	8017f24 <USBD_LL_StallEP>
 800980e:	bf00      	nop
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 8009810:	e040      	b.n	8009894 <USBD_StdEPReq+0x1c8>
                USBD_CtlError(pdev, req);
 8009812:	6839      	ldr	r1, [r7, #0]
 8009814:	6878      	ldr	r0, [r7, #4]
 8009816:	f000 fc3e 	bl	800a096 <USBD_CtlError>
              break;
 800981a:	e03b      	b.n	8009894 <USBD_StdEPReq+0x1c8>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 800981c:	683b      	ldr	r3, [r7, #0]
 800981e:	885b      	ldrh	r3, [r3, #2]
 8009820:	2b00      	cmp	r3, #0
 8009822:	d136      	bne.n	8009892 <USBD_StdEPReq+0x1c6>
              {
                if ((ep_addr & 0x7FU) != 0x00U)
 8009824:	7bbb      	ldrb	r3, [r7, #14]
 8009826:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800982a:	2b00      	cmp	r3, #0
 800982c:	d004      	beq.n	8009838 <USBD_StdEPReq+0x16c>
                {
                  (void)USBD_LL_ClearStallEP(pdev, ep_addr);
 800982e:	7bbb      	ldrb	r3, [r7, #14]
 8009830:	4619      	mov	r1, r3
 8009832:	6878      	ldr	r0, [r7, #4]
 8009834:	f00e fb95 	bl	8017f62 <USBD_LL_ClearStallEP>
                }
                (void)USBD_CtlSendStatus(pdev);
 8009838:	6878      	ldr	r0, [r7, #4]
 800983a:	f000 fd03 	bl	800a244 <USBD_CtlSendStatus>

                /* Get the class index relative to this interface */
                idx = USBD_CoreFindEP(pdev, ep_addr);
 800983e:	7bbb      	ldrb	r3, [r7, #14]
 8009840:	4619      	mov	r1, r3
 8009842:	6878      	ldr	r0, [r7, #4]
 8009844:	f7ff fde2 	bl	800940c <USBD_CoreFindEP>
 8009848:	4603      	mov	r3, r0
 800984a:	737b      	strb	r3, [r7, #13]
                if (((uint8_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 800984c:	7b7b      	ldrb	r3, [r7, #13]
 800984e:	2bff      	cmp	r3, #255	; 0xff
 8009850:	d01f      	beq.n	8009892 <USBD_StdEPReq+0x1c6>
 8009852:	7b7b      	ldrb	r3, [r7, #13]
 8009854:	2b00      	cmp	r3, #0
 8009856:	d11c      	bne.n	8009892 <USBD_StdEPReq+0x1c6>
                {
                  pdev->classId = idx;
 8009858:	7b7a      	ldrb	r2, [r7, #13]
 800985a:	687b      	ldr	r3, [r7, #4]
 800985c:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
                  /* Call the class data out function to manage the request */
                  if (pdev->pClass[idx]->Setup != NULL)
 8009860:	7b7a      	ldrb	r2, [r7, #13]
 8009862:	687b      	ldr	r3, [r7, #4]
 8009864:	32ae      	adds	r2, #174	; 0xae
 8009866:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800986a:	689b      	ldr	r3, [r3, #8]
 800986c:	2b00      	cmp	r3, #0
 800986e:	d010      	beq.n	8009892 <USBD_StdEPReq+0x1c6>
                  {
                    ret = (USBD_StatusTypeDef)(pdev->pClass[idx]->Setup(pdev, req));
 8009870:	7b7a      	ldrb	r2, [r7, #13]
 8009872:	687b      	ldr	r3, [r7, #4]
 8009874:	32ae      	adds	r2, #174	; 0xae
 8009876:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800987a:	689b      	ldr	r3, [r3, #8]
 800987c:	6839      	ldr	r1, [r7, #0]
 800987e:	6878      	ldr	r0, [r7, #4]
 8009880:	4798      	blx	r3
 8009882:	4603      	mov	r3, r0
 8009884:	73fb      	strb	r3, [r7, #15]
                  }
                }
              }
              break;
 8009886:	e004      	b.n	8009892 <USBD_StdEPReq+0x1c6>

            default:
              USBD_CtlError(pdev, req);
 8009888:	6839      	ldr	r1, [r7, #0]
 800988a:	6878      	ldr	r0, [r7, #4]
 800988c:	f000 fc03 	bl	800a096 <USBD_CtlError>
              break;
 8009890:	e000      	b.n	8009894 <USBD_StdEPReq+0x1c8>
              break;
 8009892:	bf00      	nop
          }
          break;
 8009894:	e0ab      	b.n	80099ee <USBD_StdEPReq+0x322>

        case USB_REQ_GET_STATUS:
          switch (pdev->dev_state)
 8009896:	687b      	ldr	r3, [r7, #4]
 8009898:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800989c:	b2db      	uxtb	r3, r3
 800989e:	2b02      	cmp	r3, #2
 80098a0:	d002      	beq.n	80098a8 <USBD_StdEPReq+0x1dc>
 80098a2:	2b03      	cmp	r3, #3
 80098a4:	d032      	beq.n	800990c <USBD_StdEPReq+0x240>
 80098a6:	e097      	b.n	80099d8 <USBD_StdEPReq+0x30c>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 80098a8:	7bbb      	ldrb	r3, [r7, #14]
 80098aa:	2b00      	cmp	r3, #0
 80098ac:	d007      	beq.n	80098be <USBD_StdEPReq+0x1f2>
 80098ae:	7bbb      	ldrb	r3, [r7, #14]
 80098b0:	2b80      	cmp	r3, #128	; 0x80
 80098b2:	d004      	beq.n	80098be <USBD_StdEPReq+0x1f2>
              {
                USBD_CtlError(pdev, req);
 80098b4:	6839      	ldr	r1, [r7, #0]
 80098b6:	6878      	ldr	r0, [r7, #4]
 80098b8:	f000 fbed 	bl	800a096 <USBD_CtlError>
                break;
 80098bc:	e091      	b.n	80099e2 <USBD_StdEPReq+0x316>
              }
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 80098be:	f997 300e 	ldrsb.w	r3, [r7, #14]
 80098c2:	2b00      	cmp	r3, #0
 80098c4:	da0b      	bge.n	80098de <USBD_StdEPReq+0x212>
 80098c6:	7bbb      	ldrb	r3, [r7, #14]
 80098c8:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 80098cc:	4613      	mov	r3, r2
 80098ce:	009b      	lsls	r3, r3, #2
 80098d0:	4413      	add	r3, r2
 80098d2:	009b      	lsls	r3, r3, #2
 80098d4:	3310      	adds	r3, #16
 80098d6:	687a      	ldr	r2, [r7, #4]
 80098d8:	4413      	add	r3, r2
 80098da:	3304      	adds	r3, #4
 80098dc:	e00b      	b.n	80098f6 <USBD_StdEPReq+0x22a>
                    &pdev->ep_out[ep_addr & 0x7FU];
 80098de:	7bbb      	ldrb	r3, [r7, #14]
 80098e0:	f003 027f 	and.w	r2, r3, #127	; 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 80098e4:	4613      	mov	r3, r2
 80098e6:	009b      	lsls	r3, r3, #2
 80098e8:	4413      	add	r3, r2
 80098ea:	009b      	lsls	r3, r3, #2
 80098ec:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 80098f0:	687a      	ldr	r2, [r7, #4]
 80098f2:	4413      	add	r3, r2
 80098f4:	3304      	adds	r3, #4
 80098f6:	60bb      	str	r3, [r7, #8]

              pep->status = 0x0000U;
 80098f8:	68bb      	ldr	r3, [r7, #8]
 80098fa:	2200      	movs	r2, #0
 80098fc:	601a      	str	r2, [r3, #0]

              (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 80098fe:	68bb      	ldr	r3, [r7, #8]
 8009900:	2202      	movs	r2, #2
 8009902:	4619      	mov	r1, r3
 8009904:	6878      	ldr	r0, [r7, #4]
 8009906:	f000 fc43 	bl	800a190 <USBD_CtlSendData>
              break;
 800990a:	e06a      	b.n	80099e2 <USBD_StdEPReq+0x316>

            case USBD_STATE_CONFIGURED:
              if ((ep_addr & 0x80U) == 0x80U)
 800990c:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8009910:	2b00      	cmp	r3, #0
 8009912:	da11      	bge.n	8009938 <USBD_StdEPReq+0x26c>
              {
                if (pdev->ep_in[ep_addr & 0xFU].is_used == 0U)
 8009914:	7bbb      	ldrb	r3, [r7, #14]
 8009916:	f003 020f 	and.w	r2, r3, #15
 800991a:	6879      	ldr	r1, [r7, #4]
 800991c:	4613      	mov	r3, r2
 800991e:	009b      	lsls	r3, r3, #2
 8009920:	4413      	add	r3, r2
 8009922:	009b      	lsls	r3, r3, #2
 8009924:	440b      	add	r3, r1
 8009926:	3324      	adds	r3, #36	; 0x24
 8009928:	881b      	ldrh	r3, [r3, #0]
 800992a:	2b00      	cmp	r3, #0
 800992c:	d117      	bne.n	800995e <USBD_StdEPReq+0x292>
                {
                  USBD_CtlError(pdev, req);
 800992e:	6839      	ldr	r1, [r7, #0]
 8009930:	6878      	ldr	r0, [r7, #4]
 8009932:	f000 fbb0 	bl	800a096 <USBD_CtlError>
                  break;
 8009936:	e054      	b.n	80099e2 <USBD_StdEPReq+0x316>
                }
              }
              else
              {
                if (pdev->ep_out[ep_addr & 0xFU].is_used == 0U)
 8009938:	7bbb      	ldrb	r3, [r7, #14]
 800993a:	f003 020f 	and.w	r2, r3, #15
 800993e:	6879      	ldr	r1, [r7, #4]
 8009940:	4613      	mov	r3, r2
 8009942:	009b      	lsls	r3, r3, #2
 8009944:	4413      	add	r3, r2
 8009946:	009b      	lsls	r3, r3, #2
 8009948:	440b      	add	r3, r1
 800994a:	f503 73b2 	add.w	r3, r3, #356	; 0x164
 800994e:	881b      	ldrh	r3, [r3, #0]
 8009950:	2b00      	cmp	r3, #0
 8009952:	d104      	bne.n	800995e <USBD_StdEPReq+0x292>
                {
                  USBD_CtlError(pdev, req);
 8009954:	6839      	ldr	r1, [r7, #0]
 8009956:	6878      	ldr	r0, [r7, #4]
 8009958:	f000 fb9d 	bl	800a096 <USBD_CtlError>
                  break;
 800995c:	e041      	b.n	80099e2 <USBD_StdEPReq+0x316>
                }
              }

              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800995e:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8009962:	2b00      	cmp	r3, #0
 8009964:	da0b      	bge.n	800997e <USBD_StdEPReq+0x2b2>
 8009966:	7bbb      	ldrb	r3, [r7, #14]
 8009968:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 800996c:	4613      	mov	r3, r2
 800996e:	009b      	lsls	r3, r3, #2
 8009970:	4413      	add	r3, r2
 8009972:	009b      	lsls	r3, r3, #2
 8009974:	3310      	adds	r3, #16
 8009976:	687a      	ldr	r2, [r7, #4]
 8009978:	4413      	add	r3, r2
 800997a:	3304      	adds	r3, #4
 800997c:	e00b      	b.n	8009996 <USBD_StdEPReq+0x2ca>
                    &pdev->ep_out[ep_addr & 0x7FU];
 800997e:	7bbb      	ldrb	r3, [r7, #14]
 8009980:	f003 027f 	and.w	r2, r3, #127	; 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8009984:	4613      	mov	r3, r2
 8009986:	009b      	lsls	r3, r3, #2
 8009988:	4413      	add	r3, r2
 800998a:	009b      	lsls	r3, r3, #2
 800998c:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 8009990:	687a      	ldr	r2, [r7, #4]
 8009992:	4413      	add	r3, r2
 8009994:	3304      	adds	r3, #4
 8009996:	60bb      	str	r3, [r7, #8]

              if ((ep_addr == 0x00U) || (ep_addr == 0x80U))
 8009998:	7bbb      	ldrb	r3, [r7, #14]
 800999a:	2b00      	cmp	r3, #0
 800999c:	d002      	beq.n	80099a4 <USBD_StdEPReq+0x2d8>
 800999e:	7bbb      	ldrb	r3, [r7, #14]
 80099a0:	2b80      	cmp	r3, #128	; 0x80
 80099a2:	d103      	bne.n	80099ac <USBD_StdEPReq+0x2e0>
              {
                pep->status = 0x0000U;
 80099a4:	68bb      	ldr	r3, [r7, #8]
 80099a6:	2200      	movs	r2, #0
 80099a8:	601a      	str	r2, [r3, #0]
 80099aa:	e00e      	b.n	80099ca <USBD_StdEPReq+0x2fe>
              }
              else if (USBD_LL_IsStallEP(pdev, ep_addr) != 0U)
 80099ac:	7bbb      	ldrb	r3, [r7, #14]
 80099ae:	4619      	mov	r1, r3
 80099b0:	6878      	ldr	r0, [r7, #4]
 80099b2:	f00e faf5 	bl	8017fa0 <USBD_LL_IsStallEP>
 80099b6:	4603      	mov	r3, r0
 80099b8:	2b00      	cmp	r3, #0
 80099ba:	d003      	beq.n	80099c4 <USBD_StdEPReq+0x2f8>
              {
                pep->status = 0x0001U;
 80099bc:	68bb      	ldr	r3, [r7, #8]
 80099be:	2201      	movs	r2, #1
 80099c0:	601a      	str	r2, [r3, #0]
 80099c2:	e002      	b.n	80099ca <USBD_StdEPReq+0x2fe>
              }
              else
              {
                pep->status = 0x0000U;
 80099c4:	68bb      	ldr	r3, [r7, #8]
 80099c6:	2200      	movs	r2, #0
 80099c8:	601a      	str	r2, [r3, #0]
              }

              (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 80099ca:	68bb      	ldr	r3, [r7, #8]
 80099cc:	2202      	movs	r2, #2
 80099ce:	4619      	mov	r1, r3
 80099d0:	6878      	ldr	r0, [r7, #4]
 80099d2:	f000 fbdd 	bl	800a190 <USBD_CtlSendData>
              break;
 80099d6:	e004      	b.n	80099e2 <USBD_StdEPReq+0x316>

            default:
              USBD_CtlError(pdev, req);
 80099d8:	6839      	ldr	r1, [r7, #0]
 80099da:	6878      	ldr	r0, [r7, #4]
 80099dc:	f000 fb5b 	bl	800a096 <USBD_CtlError>
              break;
 80099e0:	bf00      	nop
          }
          break;
 80099e2:	e004      	b.n	80099ee <USBD_StdEPReq+0x322>

        default:
          USBD_CtlError(pdev, req);
 80099e4:	6839      	ldr	r1, [r7, #0]
 80099e6:	6878      	ldr	r0, [r7, #4]
 80099e8:	f000 fb55 	bl	800a096 <USBD_CtlError>
          break;
 80099ec:	bf00      	nop
      }
      break;
 80099ee:	e005      	b.n	80099fc <USBD_StdEPReq+0x330>

    default:
      USBD_CtlError(pdev, req);
 80099f0:	6839      	ldr	r1, [r7, #0]
 80099f2:	6878      	ldr	r0, [r7, #4]
 80099f4:	f000 fb4f 	bl	800a096 <USBD_CtlError>
      break;
 80099f8:	e000      	b.n	80099fc <USBD_StdEPReq+0x330>
      break;
 80099fa:	bf00      	nop
  }

  return ret;
 80099fc:	7bfb      	ldrb	r3, [r7, #15]
}
 80099fe:	4618      	mov	r0, r3
 8009a00:	3710      	adds	r7, #16
 8009a02:	46bd      	mov	sp, r7
 8009a04:	bd80      	pop	{r7, pc}
	...

08009a08 <USBD_GetDescriptor>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
static void USBD_GetDescriptor(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8009a08:	b580      	push	{r7, lr}
 8009a0a:	b084      	sub	sp, #16
 8009a0c:	af00      	add	r7, sp, #0
 8009a0e:	6078      	str	r0, [r7, #4]
 8009a10:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 8009a12:	2300      	movs	r3, #0
 8009a14:	813b      	strh	r3, [r7, #8]
  uint8_t *pbuf = NULL;
 8009a16:	2300      	movs	r3, #0
 8009a18:	60fb      	str	r3, [r7, #12]
  uint8_t err = 0U;
 8009a1a:	2300      	movs	r3, #0
 8009a1c:	72fb      	strb	r3, [r7, #11]

  switch (req->wValue >> 8)
 8009a1e:	683b      	ldr	r3, [r7, #0]
 8009a20:	885b      	ldrh	r3, [r3, #2]
 8009a22:	0a1b      	lsrs	r3, r3, #8
 8009a24:	b29b      	uxth	r3, r3
 8009a26:	3b01      	subs	r3, #1
 8009a28:	2b06      	cmp	r3, #6
 8009a2a:	f200 8128 	bhi.w	8009c7e <USBD_GetDescriptor+0x276>
 8009a2e:	a201      	add	r2, pc, #4	; (adr r2, 8009a34 <USBD_GetDescriptor+0x2c>)
 8009a30:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009a34:	08009a51 	.word	0x08009a51
 8009a38:	08009a69 	.word	0x08009a69
 8009a3c:	08009aa9 	.word	0x08009aa9
 8009a40:	08009c7f 	.word	0x08009c7f
 8009a44:	08009c7f 	.word	0x08009c7f
 8009a48:	08009c1f 	.word	0x08009c1f
 8009a4c:	08009c4b 	.word	0x08009c4b
        err++;
      }
      break;
#endif /* (USBD_LPM_ENABLED == 1U) || (USBD_CLASS_BOS_ENABLED == 1U) */
    case USB_DESC_TYPE_DEVICE:
      pbuf = pdev->pDesc->GetDeviceDescriptor(pdev->dev_speed, &len);
 8009a50:	687b      	ldr	r3, [r7, #4]
 8009a52:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8009a56:	681b      	ldr	r3, [r3, #0]
 8009a58:	687a      	ldr	r2, [r7, #4]
 8009a5a:	7c12      	ldrb	r2, [r2, #16]
 8009a5c:	f107 0108 	add.w	r1, r7, #8
 8009a60:	4610      	mov	r0, r2
 8009a62:	4798      	blx	r3
 8009a64:	60f8      	str	r0, [r7, #12]
      break;
 8009a66:	e112      	b.n	8009c8e <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 8009a68:	687b      	ldr	r3, [r7, #4]
 8009a6a:	7c1b      	ldrb	r3, [r3, #16]
 8009a6c:	2b00      	cmp	r3, #0
 8009a6e:	d10d      	bne.n	8009a8c <USBD_GetDescriptor+0x84>
          pbuf = (uint8_t *)USBD_CMPSIT.GetHSConfigDescriptor(&len);
        }
        else
#endif /* USE_USBD_COMPOSITE */
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetHSConfigDescriptor(&len);
 8009a70:	687b      	ldr	r3, [r7, #4]
 8009a72:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8009a76:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009a78:	f107 0208 	add.w	r2, r7, #8
 8009a7c:	4610      	mov	r0, r2
 8009a7e:	4798      	blx	r3
 8009a80:	60f8      	str	r0, [r7, #12]
        }
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 8009a82:	68fb      	ldr	r3, [r7, #12]
 8009a84:	3301      	adds	r3, #1
 8009a86:	2202      	movs	r2, #2
 8009a88:	701a      	strb	r2, [r3, #0]
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetFSConfigDescriptor(&len);
        }
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
      }
      break;
 8009a8a:	e100      	b.n	8009c8e <USBD_GetDescriptor+0x286>
          pbuf = (uint8_t *)pdev->pClass[0]->GetFSConfigDescriptor(&len);
 8009a8c:	687b      	ldr	r3, [r7, #4]
 8009a8e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8009a92:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009a94:	f107 0208 	add.w	r2, r7, #8
 8009a98:	4610      	mov	r0, r2
 8009a9a:	4798      	blx	r3
 8009a9c:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 8009a9e:	68fb      	ldr	r3, [r7, #12]
 8009aa0:	3301      	adds	r3, #1
 8009aa2:	2202      	movs	r2, #2
 8009aa4:	701a      	strb	r2, [r3, #0]
      break;
 8009aa6:	e0f2      	b.n	8009c8e <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_STRING:
      switch ((uint8_t)(req->wValue))
 8009aa8:	683b      	ldr	r3, [r7, #0]
 8009aaa:	885b      	ldrh	r3, [r3, #2]
 8009aac:	b2db      	uxtb	r3, r3
 8009aae:	2b05      	cmp	r3, #5
 8009ab0:	f200 80ac 	bhi.w	8009c0c <USBD_GetDescriptor+0x204>
 8009ab4:	a201      	add	r2, pc, #4	; (adr r2, 8009abc <USBD_GetDescriptor+0xb4>)
 8009ab6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009aba:	bf00      	nop
 8009abc:	08009ad5 	.word	0x08009ad5
 8009ac0:	08009b09 	.word	0x08009b09
 8009ac4:	08009b3d 	.word	0x08009b3d
 8009ac8:	08009b71 	.word	0x08009b71
 8009acc:	08009ba5 	.word	0x08009ba5
 8009ad0:	08009bd9 	.word	0x08009bd9
      {
        case USBD_IDX_LANGID_STR:
          if (pdev->pDesc->GetLangIDStrDescriptor != NULL)
 8009ad4:	687b      	ldr	r3, [r7, #4]
 8009ad6:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8009ada:	685b      	ldr	r3, [r3, #4]
 8009adc:	2b00      	cmp	r3, #0
 8009ade:	d00b      	beq.n	8009af8 <USBD_GetDescriptor+0xf0>
          {
            pbuf = pdev->pDesc->GetLangIDStrDescriptor(pdev->dev_speed, &len);
 8009ae0:	687b      	ldr	r3, [r7, #4]
 8009ae2:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8009ae6:	685b      	ldr	r3, [r3, #4]
 8009ae8:	687a      	ldr	r2, [r7, #4]
 8009aea:	7c12      	ldrb	r2, [r2, #16]
 8009aec:	f107 0108 	add.w	r1, r7, #8
 8009af0:	4610      	mov	r0, r2
 8009af2:	4798      	blx	r3
 8009af4:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8009af6:	e091      	b.n	8009c1c <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8009af8:	6839      	ldr	r1, [r7, #0]
 8009afa:	6878      	ldr	r0, [r7, #4]
 8009afc:	f000 facb 	bl	800a096 <USBD_CtlError>
            err++;
 8009b00:	7afb      	ldrb	r3, [r7, #11]
 8009b02:	3301      	adds	r3, #1
 8009b04:	72fb      	strb	r3, [r7, #11]
          break;
 8009b06:	e089      	b.n	8009c1c <USBD_GetDescriptor+0x214>

        case USBD_IDX_MFC_STR:
          if (pdev->pDesc->GetManufacturerStrDescriptor != NULL)
 8009b08:	687b      	ldr	r3, [r7, #4]
 8009b0a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8009b0e:	689b      	ldr	r3, [r3, #8]
 8009b10:	2b00      	cmp	r3, #0
 8009b12:	d00b      	beq.n	8009b2c <USBD_GetDescriptor+0x124>
          {
            pbuf = pdev->pDesc->GetManufacturerStrDescriptor(pdev->dev_speed, &len);
 8009b14:	687b      	ldr	r3, [r7, #4]
 8009b16:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8009b1a:	689b      	ldr	r3, [r3, #8]
 8009b1c:	687a      	ldr	r2, [r7, #4]
 8009b1e:	7c12      	ldrb	r2, [r2, #16]
 8009b20:	f107 0108 	add.w	r1, r7, #8
 8009b24:	4610      	mov	r0, r2
 8009b26:	4798      	blx	r3
 8009b28:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8009b2a:	e077      	b.n	8009c1c <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8009b2c:	6839      	ldr	r1, [r7, #0]
 8009b2e:	6878      	ldr	r0, [r7, #4]
 8009b30:	f000 fab1 	bl	800a096 <USBD_CtlError>
            err++;
 8009b34:	7afb      	ldrb	r3, [r7, #11]
 8009b36:	3301      	adds	r3, #1
 8009b38:	72fb      	strb	r3, [r7, #11]
          break;
 8009b3a:	e06f      	b.n	8009c1c <USBD_GetDescriptor+0x214>

        case USBD_IDX_PRODUCT_STR:
          if (pdev->pDesc->GetProductStrDescriptor != NULL)
 8009b3c:	687b      	ldr	r3, [r7, #4]
 8009b3e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8009b42:	68db      	ldr	r3, [r3, #12]
 8009b44:	2b00      	cmp	r3, #0
 8009b46:	d00b      	beq.n	8009b60 <USBD_GetDescriptor+0x158>
          {
            pbuf = pdev->pDesc->GetProductStrDescriptor(pdev->dev_speed, &len);
 8009b48:	687b      	ldr	r3, [r7, #4]
 8009b4a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8009b4e:	68db      	ldr	r3, [r3, #12]
 8009b50:	687a      	ldr	r2, [r7, #4]
 8009b52:	7c12      	ldrb	r2, [r2, #16]
 8009b54:	f107 0108 	add.w	r1, r7, #8
 8009b58:	4610      	mov	r0, r2
 8009b5a:	4798      	blx	r3
 8009b5c:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8009b5e:	e05d      	b.n	8009c1c <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8009b60:	6839      	ldr	r1, [r7, #0]
 8009b62:	6878      	ldr	r0, [r7, #4]
 8009b64:	f000 fa97 	bl	800a096 <USBD_CtlError>
            err++;
 8009b68:	7afb      	ldrb	r3, [r7, #11]
 8009b6a:	3301      	adds	r3, #1
 8009b6c:	72fb      	strb	r3, [r7, #11]
          break;
 8009b6e:	e055      	b.n	8009c1c <USBD_GetDescriptor+0x214>

        case USBD_IDX_SERIAL_STR:
          if (pdev->pDesc->GetSerialStrDescriptor != NULL)
 8009b70:	687b      	ldr	r3, [r7, #4]
 8009b72:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8009b76:	691b      	ldr	r3, [r3, #16]
 8009b78:	2b00      	cmp	r3, #0
 8009b7a:	d00b      	beq.n	8009b94 <USBD_GetDescriptor+0x18c>
          {
            pbuf = pdev->pDesc->GetSerialStrDescriptor(pdev->dev_speed, &len);
 8009b7c:	687b      	ldr	r3, [r7, #4]
 8009b7e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8009b82:	691b      	ldr	r3, [r3, #16]
 8009b84:	687a      	ldr	r2, [r7, #4]
 8009b86:	7c12      	ldrb	r2, [r2, #16]
 8009b88:	f107 0108 	add.w	r1, r7, #8
 8009b8c:	4610      	mov	r0, r2
 8009b8e:	4798      	blx	r3
 8009b90:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8009b92:	e043      	b.n	8009c1c <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8009b94:	6839      	ldr	r1, [r7, #0]
 8009b96:	6878      	ldr	r0, [r7, #4]
 8009b98:	f000 fa7d 	bl	800a096 <USBD_CtlError>
            err++;
 8009b9c:	7afb      	ldrb	r3, [r7, #11]
 8009b9e:	3301      	adds	r3, #1
 8009ba0:	72fb      	strb	r3, [r7, #11]
          break;
 8009ba2:	e03b      	b.n	8009c1c <USBD_GetDescriptor+0x214>

        case USBD_IDX_CONFIG_STR:
          if (pdev->pDesc->GetConfigurationStrDescriptor != NULL)
 8009ba4:	687b      	ldr	r3, [r7, #4]
 8009ba6:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8009baa:	695b      	ldr	r3, [r3, #20]
 8009bac:	2b00      	cmp	r3, #0
 8009bae:	d00b      	beq.n	8009bc8 <USBD_GetDescriptor+0x1c0>
          {
            pbuf = pdev->pDesc->GetConfigurationStrDescriptor(pdev->dev_speed, &len);
 8009bb0:	687b      	ldr	r3, [r7, #4]
 8009bb2:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8009bb6:	695b      	ldr	r3, [r3, #20]
 8009bb8:	687a      	ldr	r2, [r7, #4]
 8009bba:	7c12      	ldrb	r2, [r2, #16]
 8009bbc:	f107 0108 	add.w	r1, r7, #8
 8009bc0:	4610      	mov	r0, r2
 8009bc2:	4798      	blx	r3
 8009bc4:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8009bc6:	e029      	b.n	8009c1c <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8009bc8:	6839      	ldr	r1, [r7, #0]
 8009bca:	6878      	ldr	r0, [r7, #4]
 8009bcc:	f000 fa63 	bl	800a096 <USBD_CtlError>
            err++;
 8009bd0:	7afb      	ldrb	r3, [r7, #11]
 8009bd2:	3301      	adds	r3, #1
 8009bd4:	72fb      	strb	r3, [r7, #11]
          break;
 8009bd6:	e021      	b.n	8009c1c <USBD_GetDescriptor+0x214>

        case USBD_IDX_INTERFACE_STR:
          if (pdev->pDesc->GetInterfaceStrDescriptor != NULL)
 8009bd8:	687b      	ldr	r3, [r7, #4]
 8009bda:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8009bde:	699b      	ldr	r3, [r3, #24]
 8009be0:	2b00      	cmp	r3, #0
 8009be2:	d00b      	beq.n	8009bfc <USBD_GetDescriptor+0x1f4>
          {
            pbuf = pdev->pDesc->GetInterfaceStrDescriptor(pdev->dev_speed, &len);
 8009be4:	687b      	ldr	r3, [r7, #4]
 8009be6:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8009bea:	699b      	ldr	r3, [r3, #24]
 8009bec:	687a      	ldr	r2, [r7, #4]
 8009bee:	7c12      	ldrb	r2, [r2, #16]
 8009bf0:	f107 0108 	add.w	r1, r7, #8
 8009bf4:	4610      	mov	r0, r2
 8009bf6:	4798      	blx	r3
 8009bf8:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8009bfa:	e00f      	b.n	8009c1c <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8009bfc:	6839      	ldr	r1, [r7, #0]
 8009bfe:	6878      	ldr	r0, [r7, #4]
 8009c00:	f000 fa49 	bl	800a096 <USBD_CtlError>
            err++;
 8009c04:	7afb      	ldrb	r3, [r7, #11]
 8009c06:	3301      	adds	r3, #1
 8009c08:	72fb      	strb	r3, [r7, #11]
          break;
 8009c0a:	e007      	b.n	8009c1c <USBD_GetDescriptor+0x214>
            err++;
          }
#endif /* USBD_SUPPORT_USER_STRING_DESC  */

#if ((USBD_CLASS_USER_STRING_DESC == 0U) && (USBD_SUPPORT_USER_STRING_DESC == 0U))
          USBD_CtlError(pdev, req);
 8009c0c:	6839      	ldr	r1, [r7, #0]
 8009c0e:	6878      	ldr	r0, [r7, #4]
 8009c10:	f000 fa41 	bl	800a096 <USBD_CtlError>
          err++;
 8009c14:	7afb      	ldrb	r3, [r7, #11]
 8009c16:	3301      	adds	r3, #1
 8009c18:	72fb      	strb	r3, [r7, #11]
#endif /* (USBD_CLASS_USER_STRING_DESC == 0U) && (USBD_SUPPORT_USER_STRING_DESC == 0U) */
          break;
 8009c1a:	bf00      	nop
      }
      break;
 8009c1c:	e037      	b.n	8009c8e <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_DEVICE_QUALIFIER:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 8009c1e:	687b      	ldr	r3, [r7, #4]
 8009c20:	7c1b      	ldrb	r3, [r3, #16]
 8009c22:	2b00      	cmp	r3, #0
 8009c24:	d109      	bne.n	8009c3a <USBD_GetDescriptor+0x232>
          pbuf = (uint8_t *)USBD_CMPSIT.GetDeviceQualifierDescriptor(&len);
        }
        else
#endif /* USE_USBD_COMPOSITE */
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetDeviceQualifierDescriptor(&len);
 8009c26:	687b      	ldr	r3, [r7, #4]
 8009c28:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8009c2c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8009c2e:	f107 0208 	add.w	r2, r7, #8
 8009c32:	4610      	mov	r0, r2
 8009c34:	4798      	blx	r3
 8009c36:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 8009c38:	e029      	b.n	8009c8e <USBD_GetDescriptor+0x286>
        USBD_CtlError(pdev, req);
 8009c3a:	6839      	ldr	r1, [r7, #0]
 8009c3c:	6878      	ldr	r0, [r7, #4]
 8009c3e:	f000 fa2a 	bl	800a096 <USBD_CtlError>
        err++;
 8009c42:	7afb      	ldrb	r3, [r7, #11]
 8009c44:	3301      	adds	r3, #1
 8009c46:	72fb      	strb	r3, [r7, #11]
      break;
 8009c48:	e021      	b.n	8009c8e <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 8009c4a:	687b      	ldr	r3, [r7, #4]
 8009c4c:	7c1b      	ldrb	r3, [r3, #16]
 8009c4e:	2b00      	cmp	r3, #0
 8009c50:	d10d      	bne.n	8009c6e <USBD_GetDescriptor+0x266>
          pbuf = (uint8_t *)USBD_CMPSIT.GetOtherSpeedConfigDescriptor(&len);
        }
        else
#endif /* USE_USBD_COMPOSITE */
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetOtherSpeedConfigDescriptor(&len);
 8009c52:	687b      	ldr	r3, [r7, #4]
 8009c54:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8009c58:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8009c5a:	f107 0208 	add.w	r2, r7, #8
 8009c5e:	4610      	mov	r0, r2
 8009c60:	4798      	blx	r3
 8009c62:	60f8      	str	r0, [r7, #12]
        }
        pbuf[1] = USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION;
 8009c64:	68fb      	ldr	r3, [r7, #12]
 8009c66:	3301      	adds	r3, #1
 8009c68:	2207      	movs	r2, #7
 8009c6a:	701a      	strb	r2, [r3, #0]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 8009c6c:	e00f      	b.n	8009c8e <USBD_GetDescriptor+0x286>
        USBD_CtlError(pdev, req);
 8009c6e:	6839      	ldr	r1, [r7, #0]
 8009c70:	6878      	ldr	r0, [r7, #4]
 8009c72:	f000 fa10 	bl	800a096 <USBD_CtlError>
        err++;
 8009c76:	7afb      	ldrb	r3, [r7, #11]
 8009c78:	3301      	adds	r3, #1
 8009c7a:	72fb      	strb	r3, [r7, #11]
      break;
 8009c7c:	e007      	b.n	8009c8e <USBD_GetDescriptor+0x286>

    default:
      USBD_CtlError(pdev, req);
 8009c7e:	6839      	ldr	r1, [r7, #0]
 8009c80:	6878      	ldr	r0, [r7, #4]
 8009c82:	f000 fa08 	bl	800a096 <USBD_CtlError>
      err++;
 8009c86:	7afb      	ldrb	r3, [r7, #11]
 8009c88:	3301      	adds	r3, #1
 8009c8a:	72fb      	strb	r3, [r7, #11]
      break;
 8009c8c:	bf00      	nop
  }

  if (err != 0U)
 8009c8e:	7afb      	ldrb	r3, [r7, #11]
 8009c90:	2b00      	cmp	r3, #0
 8009c92:	d11e      	bne.n	8009cd2 <USBD_GetDescriptor+0x2ca>
  {
    return;
  }

  if (req->wLength != 0U)
 8009c94:	683b      	ldr	r3, [r7, #0]
 8009c96:	88db      	ldrh	r3, [r3, #6]
 8009c98:	2b00      	cmp	r3, #0
 8009c9a:	d016      	beq.n	8009cca <USBD_GetDescriptor+0x2c2>
  {
    if (len != 0U)
 8009c9c:	893b      	ldrh	r3, [r7, #8]
 8009c9e:	2b00      	cmp	r3, #0
 8009ca0:	d00e      	beq.n	8009cc0 <USBD_GetDescriptor+0x2b8>
    {
      len = MIN(len, req->wLength);
 8009ca2:	683b      	ldr	r3, [r7, #0]
 8009ca4:	88da      	ldrh	r2, [r3, #6]
 8009ca6:	893b      	ldrh	r3, [r7, #8]
 8009ca8:	4293      	cmp	r3, r2
 8009caa:	bf28      	it	cs
 8009cac:	4613      	movcs	r3, r2
 8009cae:	b29b      	uxth	r3, r3
 8009cb0:	813b      	strh	r3, [r7, #8]
      (void)USBD_CtlSendData(pdev, pbuf, len);
 8009cb2:	893b      	ldrh	r3, [r7, #8]
 8009cb4:	461a      	mov	r2, r3
 8009cb6:	68f9      	ldr	r1, [r7, #12]
 8009cb8:	6878      	ldr	r0, [r7, #4]
 8009cba:	f000 fa69 	bl	800a190 <USBD_CtlSendData>
 8009cbe:	e009      	b.n	8009cd4 <USBD_GetDescriptor+0x2cc>
    }
    else
    {
      USBD_CtlError(pdev, req);
 8009cc0:	6839      	ldr	r1, [r7, #0]
 8009cc2:	6878      	ldr	r0, [r7, #4]
 8009cc4:	f000 f9e7 	bl	800a096 <USBD_CtlError>
 8009cc8:	e004      	b.n	8009cd4 <USBD_GetDescriptor+0x2cc>
    }
  }
  else
  {
    (void)USBD_CtlSendStatus(pdev);
 8009cca:	6878      	ldr	r0, [r7, #4]
 8009ccc:	f000 faba 	bl	800a244 <USBD_CtlSendStatus>
 8009cd0:	e000      	b.n	8009cd4 <USBD_GetDescriptor+0x2cc>
    return;
 8009cd2:	bf00      	nop
  }
}
 8009cd4:	3710      	adds	r7, #16
 8009cd6:	46bd      	mov	sp, r7
 8009cd8:	bd80      	pop	{r7, pc}
 8009cda:	bf00      	nop

08009cdc <USBD_SetAddress>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
static void USBD_SetAddress(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8009cdc:	b580      	push	{r7, lr}
 8009cde:	b084      	sub	sp, #16
 8009ce0:	af00      	add	r7, sp, #0
 8009ce2:	6078      	str	r0, [r7, #4]
 8009ce4:	6039      	str	r1, [r7, #0]
  uint8_t  dev_addr;

  if ((req->wIndex == 0U) && (req->wLength == 0U) && (req->wValue < 128U))
 8009ce6:	683b      	ldr	r3, [r7, #0]
 8009ce8:	889b      	ldrh	r3, [r3, #4]
 8009cea:	2b00      	cmp	r3, #0
 8009cec:	d131      	bne.n	8009d52 <USBD_SetAddress+0x76>
 8009cee:	683b      	ldr	r3, [r7, #0]
 8009cf0:	88db      	ldrh	r3, [r3, #6]
 8009cf2:	2b00      	cmp	r3, #0
 8009cf4:	d12d      	bne.n	8009d52 <USBD_SetAddress+0x76>
 8009cf6:	683b      	ldr	r3, [r7, #0]
 8009cf8:	885b      	ldrh	r3, [r3, #2]
 8009cfa:	2b7f      	cmp	r3, #127	; 0x7f
 8009cfc:	d829      	bhi.n	8009d52 <USBD_SetAddress+0x76>
  {
    dev_addr = (uint8_t)(req->wValue) & 0x7FU;
 8009cfe:	683b      	ldr	r3, [r7, #0]
 8009d00:	885b      	ldrh	r3, [r3, #2]
 8009d02:	b2db      	uxtb	r3, r3
 8009d04:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8009d08:	73fb      	strb	r3, [r7, #15]

    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8009d0a:	687b      	ldr	r3, [r7, #4]
 8009d0c:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8009d10:	b2db      	uxtb	r3, r3
 8009d12:	2b03      	cmp	r3, #3
 8009d14:	d104      	bne.n	8009d20 <USBD_SetAddress+0x44>
    {
      USBD_CtlError(pdev, req);
 8009d16:	6839      	ldr	r1, [r7, #0]
 8009d18:	6878      	ldr	r0, [r7, #4]
 8009d1a:	f000 f9bc 	bl	800a096 <USBD_CtlError>
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8009d1e:	e01d      	b.n	8009d5c <USBD_SetAddress+0x80>
    }
    else
    {
      pdev->dev_address = dev_addr;
 8009d20:	687b      	ldr	r3, [r7, #4]
 8009d22:	7bfa      	ldrb	r2, [r7, #15]
 8009d24:	f883 229e 	strb.w	r2, [r3, #670]	; 0x29e
      (void)USBD_LL_SetUSBAddress(pdev, dev_addr);
 8009d28:	7bfb      	ldrb	r3, [r7, #15]
 8009d2a:	4619      	mov	r1, r3
 8009d2c:	6878      	ldr	r0, [r7, #4]
 8009d2e:	f00e f963 	bl	8017ff8 <USBD_LL_SetUSBAddress>
      (void)USBD_CtlSendStatus(pdev);
 8009d32:	6878      	ldr	r0, [r7, #4]
 8009d34:	f000 fa86 	bl	800a244 <USBD_CtlSendStatus>

      if (dev_addr != 0U)
 8009d38:	7bfb      	ldrb	r3, [r7, #15]
 8009d3a:	2b00      	cmp	r3, #0
 8009d3c:	d004      	beq.n	8009d48 <USBD_SetAddress+0x6c>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 8009d3e:	687b      	ldr	r3, [r7, #4]
 8009d40:	2202      	movs	r2, #2
 8009d42:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8009d46:	e009      	b.n	8009d5c <USBD_SetAddress+0x80>
      }
      else
      {
        pdev->dev_state = USBD_STATE_DEFAULT;
 8009d48:	687b      	ldr	r3, [r7, #4]
 8009d4a:	2201      	movs	r2, #1
 8009d4c:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8009d50:	e004      	b.n	8009d5c <USBD_SetAddress+0x80>
      }
    }
  }
  else
  {
    USBD_CtlError(pdev, req);
 8009d52:	6839      	ldr	r1, [r7, #0]
 8009d54:	6878      	ldr	r0, [r7, #4]
 8009d56:	f000 f99e 	bl	800a096 <USBD_CtlError>
  }
}
 8009d5a:	bf00      	nop
 8009d5c:	bf00      	nop
 8009d5e:	3710      	adds	r7, #16
 8009d60:	46bd      	mov	sp, r7
 8009d62:	bd80      	pop	{r7, pc}

08009d64 <USBD_SetConfig>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static USBD_StatusTypeDef USBD_SetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8009d64:	b580      	push	{r7, lr}
 8009d66:	b084      	sub	sp, #16
 8009d68:	af00      	add	r7, sp, #0
 8009d6a:	6078      	str	r0, [r7, #4]
 8009d6c:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 8009d6e:	2300      	movs	r3, #0
 8009d70:	73fb      	strb	r3, [r7, #15]
  static uint8_t cfgidx;

  cfgidx = (uint8_t)(req->wValue);
 8009d72:	683b      	ldr	r3, [r7, #0]
 8009d74:	885b      	ldrh	r3, [r3, #2]
 8009d76:	b2da      	uxtb	r2, r3
 8009d78:	4b4e      	ldr	r3, [pc, #312]	; (8009eb4 <USBD_SetConfig+0x150>)
 8009d7a:	701a      	strb	r2, [r3, #0]

  if (cfgidx > USBD_MAX_NUM_CONFIGURATION)
 8009d7c:	4b4d      	ldr	r3, [pc, #308]	; (8009eb4 <USBD_SetConfig+0x150>)
 8009d7e:	781b      	ldrb	r3, [r3, #0]
 8009d80:	2b01      	cmp	r3, #1
 8009d82:	d905      	bls.n	8009d90 <USBD_SetConfig+0x2c>
  {
    USBD_CtlError(pdev, req);
 8009d84:	6839      	ldr	r1, [r7, #0]
 8009d86:	6878      	ldr	r0, [r7, #4]
 8009d88:	f000 f985 	bl	800a096 <USBD_CtlError>
    return USBD_FAIL;
 8009d8c:	2303      	movs	r3, #3
 8009d8e:	e08c      	b.n	8009eaa <USBD_SetConfig+0x146>
  }

  switch (pdev->dev_state)
 8009d90:	687b      	ldr	r3, [r7, #4]
 8009d92:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8009d96:	b2db      	uxtb	r3, r3
 8009d98:	2b02      	cmp	r3, #2
 8009d9a:	d002      	beq.n	8009da2 <USBD_SetConfig+0x3e>
 8009d9c:	2b03      	cmp	r3, #3
 8009d9e:	d029      	beq.n	8009df4 <USBD_SetConfig+0x90>
 8009da0:	e075      	b.n	8009e8e <USBD_SetConfig+0x12a>
  {
    case USBD_STATE_ADDRESSED:
      if (cfgidx != 0U)
 8009da2:	4b44      	ldr	r3, [pc, #272]	; (8009eb4 <USBD_SetConfig+0x150>)
 8009da4:	781b      	ldrb	r3, [r3, #0]
 8009da6:	2b00      	cmp	r3, #0
 8009da8:	d020      	beq.n	8009dec <USBD_SetConfig+0x88>
      {
        pdev->dev_config = cfgidx;
 8009daa:	4b42      	ldr	r3, [pc, #264]	; (8009eb4 <USBD_SetConfig+0x150>)
 8009dac:	781b      	ldrb	r3, [r3, #0]
 8009dae:	461a      	mov	r2, r3
 8009db0:	687b      	ldr	r3, [r7, #4]
 8009db2:	605a      	str	r2, [r3, #4]

        ret = USBD_SetClassConfig(pdev, cfgidx);
 8009db4:	4b3f      	ldr	r3, [pc, #252]	; (8009eb4 <USBD_SetConfig+0x150>)
 8009db6:	781b      	ldrb	r3, [r3, #0]
 8009db8:	4619      	mov	r1, r3
 8009dba:	6878      	ldr	r0, [r7, #4]
 8009dbc:	f7fe ffe1 	bl	8008d82 <USBD_SetClassConfig>
 8009dc0:	4603      	mov	r3, r0
 8009dc2:	73fb      	strb	r3, [r7, #15]

        if (ret != USBD_OK)
 8009dc4:	7bfb      	ldrb	r3, [r7, #15]
 8009dc6:	2b00      	cmp	r3, #0
 8009dc8:	d008      	beq.n	8009ddc <USBD_SetConfig+0x78>
        {
          USBD_CtlError(pdev, req);
 8009dca:	6839      	ldr	r1, [r7, #0]
 8009dcc:	6878      	ldr	r0, [r7, #4]
 8009dce:	f000 f962 	bl	800a096 <USBD_CtlError>
          pdev->dev_state = USBD_STATE_ADDRESSED;
 8009dd2:	687b      	ldr	r3, [r7, #4]
 8009dd4:	2202      	movs	r2, #2
 8009dd6:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
      }
      else
      {
        (void)USBD_CtlSendStatus(pdev);
      }
      break;
 8009dda:	e065      	b.n	8009ea8 <USBD_SetConfig+0x144>
          (void)USBD_CtlSendStatus(pdev);
 8009ddc:	6878      	ldr	r0, [r7, #4]
 8009dde:	f000 fa31 	bl	800a244 <USBD_CtlSendStatus>
          pdev->dev_state = USBD_STATE_CONFIGURED;
 8009de2:	687b      	ldr	r3, [r7, #4]
 8009de4:	2203      	movs	r2, #3
 8009de6:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
      break;
 8009dea:	e05d      	b.n	8009ea8 <USBD_SetConfig+0x144>
        (void)USBD_CtlSendStatus(pdev);
 8009dec:	6878      	ldr	r0, [r7, #4]
 8009dee:	f000 fa29 	bl	800a244 <USBD_CtlSendStatus>
      break;
 8009df2:	e059      	b.n	8009ea8 <USBD_SetConfig+0x144>

    case USBD_STATE_CONFIGURED:
      if (cfgidx == 0U)
 8009df4:	4b2f      	ldr	r3, [pc, #188]	; (8009eb4 <USBD_SetConfig+0x150>)
 8009df6:	781b      	ldrb	r3, [r3, #0]
 8009df8:	2b00      	cmp	r3, #0
 8009dfa:	d112      	bne.n	8009e22 <USBD_SetConfig+0xbe>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 8009dfc:	687b      	ldr	r3, [r7, #4]
 8009dfe:	2202      	movs	r2, #2
 8009e00:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
        pdev->dev_config = cfgidx;
 8009e04:	4b2b      	ldr	r3, [pc, #172]	; (8009eb4 <USBD_SetConfig+0x150>)
 8009e06:	781b      	ldrb	r3, [r3, #0]
 8009e08:	461a      	mov	r2, r3
 8009e0a:	687b      	ldr	r3, [r7, #4]
 8009e0c:	605a      	str	r2, [r3, #4]
        (void)USBD_ClrClassConfig(pdev, cfgidx);
 8009e0e:	4b29      	ldr	r3, [pc, #164]	; (8009eb4 <USBD_SetConfig+0x150>)
 8009e10:	781b      	ldrb	r3, [r3, #0]
 8009e12:	4619      	mov	r1, r3
 8009e14:	6878      	ldr	r0, [r7, #4]
 8009e16:	f7fe ffd0 	bl	8008dba <USBD_ClrClassConfig>
        (void)USBD_CtlSendStatus(pdev);
 8009e1a:	6878      	ldr	r0, [r7, #4]
 8009e1c:	f000 fa12 	bl	800a244 <USBD_CtlSendStatus>
      }
      else
      {
        (void)USBD_CtlSendStatus(pdev);
      }
      break;
 8009e20:	e042      	b.n	8009ea8 <USBD_SetConfig+0x144>
      else if (cfgidx != pdev->dev_config)
 8009e22:	4b24      	ldr	r3, [pc, #144]	; (8009eb4 <USBD_SetConfig+0x150>)
 8009e24:	781b      	ldrb	r3, [r3, #0]
 8009e26:	461a      	mov	r2, r3
 8009e28:	687b      	ldr	r3, [r7, #4]
 8009e2a:	685b      	ldr	r3, [r3, #4]
 8009e2c:	429a      	cmp	r2, r3
 8009e2e:	d02a      	beq.n	8009e86 <USBD_SetConfig+0x122>
        (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 8009e30:	687b      	ldr	r3, [r7, #4]
 8009e32:	685b      	ldr	r3, [r3, #4]
 8009e34:	b2db      	uxtb	r3, r3
 8009e36:	4619      	mov	r1, r3
 8009e38:	6878      	ldr	r0, [r7, #4]
 8009e3a:	f7fe ffbe 	bl	8008dba <USBD_ClrClassConfig>
        pdev->dev_config = cfgidx;
 8009e3e:	4b1d      	ldr	r3, [pc, #116]	; (8009eb4 <USBD_SetConfig+0x150>)
 8009e40:	781b      	ldrb	r3, [r3, #0]
 8009e42:	461a      	mov	r2, r3
 8009e44:	687b      	ldr	r3, [r7, #4]
 8009e46:	605a      	str	r2, [r3, #4]
        ret = USBD_SetClassConfig(pdev, cfgidx);
 8009e48:	4b1a      	ldr	r3, [pc, #104]	; (8009eb4 <USBD_SetConfig+0x150>)
 8009e4a:	781b      	ldrb	r3, [r3, #0]
 8009e4c:	4619      	mov	r1, r3
 8009e4e:	6878      	ldr	r0, [r7, #4]
 8009e50:	f7fe ff97 	bl	8008d82 <USBD_SetClassConfig>
 8009e54:	4603      	mov	r3, r0
 8009e56:	73fb      	strb	r3, [r7, #15]
        if (ret != USBD_OK)
 8009e58:	7bfb      	ldrb	r3, [r7, #15]
 8009e5a:	2b00      	cmp	r3, #0
 8009e5c:	d00f      	beq.n	8009e7e <USBD_SetConfig+0x11a>
          USBD_CtlError(pdev, req);
 8009e5e:	6839      	ldr	r1, [r7, #0]
 8009e60:	6878      	ldr	r0, [r7, #4]
 8009e62:	f000 f918 	bl	800a096 <USBD_CtlError>
          (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 8009e66:	687b      	ldr	r3, [r7, #4]
 8009e68:	685b      	ldr	r3, [r3, #4]
 8009e6a:	b2db      	uxtb	r3, r3
 8009e6c:	4619      	mov	r1, r3
 8009e6e:	6878      	ldr	r0, [r7, #4]
 8009e70:	f7fe ffa3 	bl	8008dba <USBD_ClrClassConfig>
          pdev->dev_state = USBD_STATE_ADDRESSED;
 8009e74:	687b      	ldr	r3, [r7, #4]
 8009e76:	2202      	movs	r2, #2
 8009e78:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
      break;
 8009e7c:	e014      	b.n	8009ea8 <USBD_SetConfig+0x144>
          (void)USBD_CtlSendStatus(pdev);
 8009e7e:	6878      	ldr	r0, [r7, #4]
 8009e80:	f000 f9e0 	bl	800a244 <USBD_CtlSendStatus>
      break;
 8009e84:	e010      	b.n	8009ea8 <USBD_SetConfig+0x144>
        (void)USBD_CtlSendStatus(pdev);
 8009e86:	6878      	ldr	r0, [r7, #4]
 8009e88:	f000 f9dc 	bl	800a244 <USBD_CtlSendStatus>
      break;
 8009e8c:	e00c      	b.n	8009ea8 <USBD_SetConfig+0x144>

    default:
      USBD_CtlError(pdev, req);
 8009e8e:	6839      	ldr	r1, [r7, #0]
 8009e90:	6878      	ldr	r0, [r7, #4]
 8009e92:	f000 f900 	bl	800a096 <USBD_CtlError>
      (void)USBD_ClrClassConfig(pdev, cfgidx);
 8009e96:	4b07      	ldr	r3, [pc, #28]	; (8009eb4 <USBD_SetConfig+0x150>)
 8009e98:	781b      	ldrb	r3, [r3, #0]
 8009e9a:	4619      	mov	r1, r3
 8009e9c:	6878      	ldr	r0, [r7, #4]
 8009e9e:	f7fe ff8c 	bl	8008dba <USBD_ClrClassConfig>
      ret = USBD_FAIL;
 8009ea2:	2303      	movs	r3, #3
 8009ea4:	73fb      	strb	r3, [r7, #15]
      break;
 8009ea6:	bf00      	nop
  }

  return ret;
 8009ea8:	7bfb      	ldrb	r3, [r7, #15]
}
 8009eaa:	4618      	mov	r0, r3
 8009eac:	3710      	adds	r7, #16
 8009eae:	46bd      	mov	sp, r7
 8009eb0:	bd80      	pop	{r7, pc}
 8009eb2:	bf00      	nop
 8009eb4:	20004ef0 	.word	0x20004ef0

08009eb8 <USBD_GetConfig>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
static void USBD_GetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8009eb8:	b580      	push	{r7, lr}
 8009eba:	b082      	sub	sp, #8
 8009ebc:	af00      	add	r7, sp, #0
 8009ebe:	6078      	str	r0, [r7, #4]
 8009ec0:	6039      	str	r1, [r7, #0]
  if (req->wLength != 1U)
 8009ec2:	683b      	ldr	r3, [r7, #0]
 8009ec4:	88db      	ldrh	r3, [r3, #6]
 8009ec6:	2b01      	cmp	r3, #1
 8009ec8:	d004      	beq.n	8009ed4 <USBD_GetConfig+0x1c>
  {
    USBD_CtlError(pdev, req);
 8009eca:	6839      	ldr	r1, [r7, #0]
 8009ecc:	6878      	ldr	r0, [r7, #4]
 8009ece:	f000 f8e2 	bl	800a096 <USBD_CtlError>
      default:
        USBD_CtlError(pdev, req);
        break;
    }
  }
}
 8009ed2:	e023      	b.n	8009f1c <USBD_GetConfig+0x64>
    switch (pdev->dev_state)
 8009ed4:	687b      	ldr	r3, [r7, #4]
 8009ed6:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8009eda:	b2db      	uxtb	r3, r3
 8009edc:	2b02      	cmp	r3, #2
 8009ede:	dc02      	bgt.n	8009ee6 <USBD_GetConfig+0x2e>
 8009ee0:	2b00      	cmp	r3, #0
 8009ee2:	dc03      	bgt.n	8009eec <USBD_GetConfig+0x34>
 8009ee4:	e015      	b.n	8009f12 <USBD_GetConfig+0x5a>
 8009ee6:	2b03      	cmp	r3, #3
 8009ee8:	d00b      	beq.n	8009f02 <USBD_GetConfig+0x4a>
 8009eea:	e012      	b.n	8009f12 <USBD_GetConfig+0x5a>
        pdev->dev_default_config = 0U;
 8009eec:	687b      	ldr	r3, [r7, #4]
 8009eee:	2200      	movs	r2, #0
 8009ef0:	609a      	str	r2, [r3, #8]
        (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_default_config, 1U);
 8009ef2:	687b      	ldr	r3, [r7, #4]
 8009ef4:	3308      	adds	r3, #8
 8009ef6:	2201      	movs	r2, #1
 8009ef8:	4619      	mov	r1, r3
 8009efa:	6878      	ldr	r0, [r7, #4]
 8009efc:	f000 f948 	bl	800a190 <USBD_CtlSendData>
        break;
 8009f00:	e00c      	b.n	8009f1c <USBD_GetConfig+0x64>
        (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config, 1U);
 8009f02:	687b      	ldr	r3, [r7, #4]
 8009f04:	3304      	adds	r3, #4
 8009f06:	2201      	movs	r2, #1
 8009f08:	4619      	mov	r1, r3
 8009f0a:	6878      	ldr	r0, [r7, #4]
 8009f0c:	f000 f940 	bl	800a190 <USBD_CtlSendData>
        break;
 8009f10:	e004      	b.n	8009f1c <USBD_GetConfig+0x64>
        USBD_CtlError(pdev, req);
 8009f12:	6839      	ldr	r1, [r7, #0]
 8009f14:	6878      	ldr	r0, [r7, #4]
 8009f16:	f000 f8be 	bl	800a096 <USBD_CtlError>
        break;
 8009f1a:	bf00      	nop
}
 8009f1c:	bf00      	nop
 8009f1e:	3708      	adds	r7, #8
 8009f20:	46bd      	mov	sp, r7
 8009f22:	bd80      	pop	{r7, pc}

08009f24 <USBD_GetStatus>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
static void USBD_GetStatus(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8009f24:	b580      	push	{r7, lr}
 8009f26:	b082      	sub	sp, #8
 8009f28:	af00      	add	r7, sp, #0
 8009f2a:	6078      	str	r0, [r7, #4]
 8009f2c:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 8009f2e:	687b      	ldr	r3, [r7, #4]
 8009f30:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8009f34:	b2db      	uxtb	r3, r3
 8009f36:	3b01      	subs	r3, #1
 8009f38:	2b02      	cmp	r3, #2
 8009f3a:	d81e      	bhi.n	8009f7a <USBD_GetStatus+0x56>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wLength != 0x2U)
 8009f3c:	683b      	ldr	r3, [r7, #0]
 8009f3e:	88db      	ldrh	r3, [r3, #6]
 8009f40:	2b02      	cmp	r3, #2
 8009f42:	d004      	beq.n	8009f4e <USBD_GetStatus+0x2a>
      {
        USBD_CtlError(pdev, req);
 8009f44:	6839      	ldr	r1, [r7, #0]
 8009f46:	6878      	ldr	r0, [r7, #4]
 8009f48:	f000 f8a5 	bl	800a096 <USBD_CtlError>
        break;
 8009f4c:	e01a      	b.n	8009f84 <USBD_GetStatus+0x60>
      }

#if (USBD_SELF_POWERED == 1U)
      pdev->dev_config_status = USB_CONFIG_SELF_POWERED;
 8009f4e:	687b      	ldr	r3, [r7, #4]
 8009f50:	2201      	movs	r2, #1
 8009f52:	60da      	str	r2, [r3, #12]
#else
      pdev->dev_config_status = 0U;
#endif /* USBD_SELF_POWERED */

      if (pdev->dev_remote_wakeup != 0U)
 8009f54:	687b      	ldr	r3, [r7, #4]
 8009f56:	f8d3 32a4 	ldr.w	r3, [r3, #676]	; 0x2a4
 8009f5a:	2b00      	cmp	r3, #0
 8009f5c:	d005      	beq.n	8009f6a <USBD_GetStatus+0x46>
      {
        pdev->dev_config_status |= USB_CONFIG_REMOTE_WAKEUP;
 8009f5e:	687b      	ldr	r3, [r7, #4]
 8009f60:	68db      	ldr	r3, [r3, #12]
 8009f62:	f043 0202 	orr.w	r2, r3, #2
 8009f66:	687b      	ldr	r3, [r7, #4]
 8009f68:	60da      	str	r2, [r3, #12]
      }

      (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config_status, 2U);
 8009f6a:	687b      	ldr	r3, [r7, #4]
 8009f6c:	330c      	adds	r3, #12
 8009f6e:	2202      	movs	r2, #2
 8009f70:	4619      	mov	r1, r3
 8009f72:	6878      	ldr	r0, [r7, #4]
 8009f74:	f000 f90c 	bl	800a190 <USBD_CtlSendData>
      break;
 8009f78:	e004      	b.n	8009f84 <USBD_GetStatus+0x60>

    default:
      USBD_CtlError(pdev, req);
 8009f7a:	6839      	ldr	r1, [r7, #0]
 8009f7c:	6878      	ldr	r0, [r7, #4]
 8009f7e:	f000 f88a 	bl	800a096 <USBD_CtlError>
      break;
 8009f82:	bf00      	nop
  }
}
 8009f84:	bf00      	nop
 8009f86:	3708      	adds	r7, #8
 8009f88:	46bd      	mov	sp, r7
 8009f8a:	bd80      	pop	{r7, pc}

08009f8c <USBD_SetFeature>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
static void USBD_SetFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8009f8c:	b580      	push	{r7, lr}
 8009f8e:	b082      	sub	sp, #8
 8009f90:	af00      	add	r7, sp, #0
 8009f92:	6078      	str	r0, [r7, #4]
 8009f94:	6039      	str	r1, [r7, #0]
  if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 8009f96:	683b      	ldr	r3, [r7, #0]
 8009f98:	885b      	ldrh	r3, [r3, #2]
 8009f9a:	2b01      	cmp	r3, #1
 8009f9c:	d107      	bne.n	8009fae <USBD_SetFeature+0x22>
  {
    pdev->dev_remote_wakeup = 1U;
 8009f9e:	687b      	ldr	r3, [r7, #4]
 8009fa0:	2201      	movs	r2, #1
 8009fa2:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
    (void)USBD_CtlSendStatus(pdev);
 8009fa6:	6878      	ldr	r0, [r7, #4]
 8009fa8:	f000 f94c 	bl	800a244 <USBD_CtlSendStatus>
  }
  else
  {
    USBD_CtlError(pdev, req);
  }
}
 8009fac:	e013      	b.n	8009fd6 <USBD_SetFeature+0x4a>
  else if (req->wValue == USB_FEATURE_TEST_MODE)
 8009fae:	683b      	ldr	r3, [r7, #0]
 8009fb0:	885b      	ldrh	r3, [r3, #2]
 8009fb2:	2b02      	cmp	r3, #2
 8009fb4:	d10b      	bne.n	8009fce <USBD_SetFeature+0x42>
    pdev->dev_test_mode = (uint8_t)(req->wIndex >> 8);
 8009fb6:	683b      	ldr	r3, [r7, #0]
 8009fb8:	889b      	ldrh	r3, [r3, #4]
 8009fba:	0a1b      	lsrs	r3, r3, #8
 8009fbc:	b29b      	uxth	r3, r3
 8009fbe:	b2da      	uxtb	r2, r3
 8009fc0:	687b      	ldr	r3, [r7, #4]
 8009fc2:	f883 22a0 	strb.w	r2, [r3, #672]	; 0x2a0
    (void)USBD_CtlSendStatus(pdev);
 8009fc6:	6878      	ldr	r0, [r7, #4]
 8009fc8:	f000 f93c 	bl	800a244 <USBD_CtlSendStatus>
}
 8009fcc:	e003      	b.n	8009fd6 <USBD_SetFeature+0x4a>
    USBD_CtlError(pdev, req);
 8009fce:	6839      	ldr	r1, [r7, #0]
 8009fd0:	6878      	ldr	r0, [r7, #4]
 8009fd2:	f000 f860 	bl	800a096 <USBD_CtlError>
}
 8009fd6:	bf00      	nop
 8009fd8:	3708      	adds	r7, #8
 8009fda:	46bd      	mov	sp, r7
 8009fdc:	bd80      	pop	{r7, pc}

08009fde <USBD_ClrFeature>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
static void USBD_ClrFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8009fde:	b580      	push	{r7, lr}
 8009fe0:	b082      	sub	sp, #8
 8009fe2:	af00      	add	r7, sp, #0
 8009fe4:	6078      	str	r0, [r7, #4]
 8009fe6:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 8009fe8:	687b      	ldr	r3, [r7, #4]
 8009fea:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8009fee:	b2db      	uxtb	r3, r3
 8009ff0:	3b01      	subs	r3, #1
 8009ff2:	2b02      	cmp	r3, #2
 8009ff4:	d80b      	bhi.n	800a00e <USBD_ClrFeature+0x30>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 8009ff6:	683b      	ldr	r3, [r7, #0]
 8009ff8:	885b      	ldrh	r3, [r3, #2]
 8009ffa:	2b01      	cmp	r3, #1
 8009ffc:	d10c      	bne.n	800a018 <USBD_ClrFeature+0x3a>
      {
        pdev->dev_remote_wakeup = 0U;
 8009ffe:	687b      	ldr	r3, [r7, #4]
 800a000:	2200      	movs	r2, #0
 800a002:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
        (void)USBD_CtlSendStatus(pdev);
 800a006:	6878      	ldr	r0, [r7, #4]
 800a008:	f000 f91c 	bl	800a244 <USBD_CtlSendStatus>
      }
      break;
 800a00c:	e004      	b.n	800a018 <USBD_ClrFeature+0x3a>

    default:
      USBD_CtlError(pdev, req);
 800a00e:	6839      	ldr	r1, [r7, #0]
 800a010:	6878      	ldr	r0, [r7, #4]
 800a012:	f000 f840 	bl	800a096 <USBD_CtlError>
      break;
 800a016:	e000      	b.n	800a01a <USBD_ClrFeature+0x3c>
      break;
 800a018:	bf00      	nop
  }
}
 800a01a:	bf00      	nop
 800a01c:	3708      	adds	r7, #8
 800a01e:	46bd      	mov	sp, r7
 800a020:	bd80      	pop	{r7, pc}

0800a022 <USBD_ParseSetupRequest>:
  * @param  req: usb request
  * @param  pdata: setup data pointer
  * @retval None
  */
void USBD_ParseSetupRequest(USBD_SetupReqTypedef *req, uint8_t *pdata)
{
 800a022:	b580      	push	{r7, lr}
 800a024:	b084      	sub	sp, #16
 800a026:	af00      	add	r7, sp, #0
 800a028:	6078      	str	r0, [r7, #4]
 800a02a:	6039      	str	r1, [r7, #0]
  uint8_t *pbuff = pdata;
 800a02c:	683b      	ldr	r3, [r7, #0]
 800a02e:	60fb      	str	r3, [r7, #12]

  req->bmRequest = *(uint8_t *)(pbuff);
 800a030:	68fb      	ldr	r3, [r7, #12]
 800a032:	781a      	ldrb	r2, [r3, #0]
 800a034:	687b      	ldr	r3, [r7, #4]
 800a036:	701a      	strb	r2, [r3, #0]

  pbuff++;
 800a038:	68fb      	ldr	r3, [r7, #12]
 800a03a:	3301      	adds	r3, #1
 800a03c:	60fb      	str	r3, [r7, #12]
  req->bRequest = *(uint8_t *)(pbuff);
 800a03e:	68fb      	ldr	r3, [r7, #12]
 800a040:	781a      	ldrb	r2, [r3, #0]
 800a042:	687b      	ldr	r3, [r7, #4]
 800a044:	705a      	strb	r2, [r3, #1]

  pbuff++;
 800a046:	68fb      	ldr	r3, [r7, #12]
 800a048:	3301      	adds	r3, #1
 800a04a:	60fb      	str	r3, [r7, #12]
  req->wValue = SWAPBYTE(pbuff);
 800a04c:	68f8      	ldr	r0, [r7, #12]
 800a04e:	f7ff fa41 	bl	80094d4 <SWAPBYTE>
 800a052:	4603      	mov	r3, r0
 800a054:	461a      	mov	r2, r3
 800a056:	687b      	ldr	r3, [r7, #4]
 800a058:	805a      	strh	r2, [r3, #2]

  pbuff++;
 800a05a:	68fb      	ldr	r3, [r7, #12]
 800a05c:	3301      	adds	r3, #1
 800a05e:	60fb      	str	r3, [r7, #12]
  pbuff++;
 800a060:	68fb      	ldr	r3, [r7, #12]
 800a062:	3301      	adds	r3, #1
 800a064:	60fb      	str	r3, [r7, #12]
  req->wIndex = SWAPBYTE(pbuff);
 800a066:	68f8      	ldr	r0, [r7, #12]
 800a068:	f7ff fa34 	bl	80094d4 <SWAPBYTE>
 800a06c:	4603      	mov	r3, r0
 800a06e:	461a      	mov	r2, r3
 800a070:	687b      	ldr	r3, [r7, #4]
 800a072:	809a      	strh	r2, [r3, #4]

  pbuff++;
 800a074:	68fb      	ldr	r3, [r7, #12]
 800a076:	3301      	adds	r3, #1
 800a078:	60fb      	str	r3, [r7, #12]
  pbuff++;
 800a07a:	68fb      	ldr	r3, [r7, #12]
 800a07c:	3301      	adds	r3, #1
 800a07e:	60fb      	str	r3, [r7, #12]
  req->wLength = SWAPBYTE(pbuff);
 800a080:	68f8      	ldr	r0, [r7, #12]
 800a082:	f7ff fa27 	bl	80094d4 <SWAPBYTE>
 800a086:	4603      	mov	r3, r0
 800a088:	461a      	mov	r2, r3
 800a08a:	687b      	ldr	r3, [r7, #4]
 800a08c:	80da      	strh	r2, [r3, #6]
}
 800a08e:	bf00      	nop
 800a090:	3710      	adds	r7, #16
 800a092:	46bd      	mov	sp, r7
 800a094:	bd80      	pop	{r7, pc}

0800a096 <USBD_CtlError>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
void USBD_CtlError(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800a096:	b580      	push	{r7, lr}
 800a098:	b082      	sub	sp, #8
 800a09a:	af00      	add	r7, sp, #0
 800a09c:	6078      	str	r0, [r7, #4]
 800a09e:	6039      	str	r1, [r7, #0]
  UNUSED(req);

  (void)USBD_LL_StallEP(pdev, 0x80U);
 800a0a0:	2180      	movs	r1, #128	; 0x80
 800a0a2:	6878      	ldr	r0, [r7, #4]
 800a0a4:	f00d ff3e 	bl	8017f24 <USBD_LL_StallEP>
  (void)USBD_LL_StallEP(pdev, 0U);
 800a0a8:	2100      	movs	r1, #0
 800a0aa:	6878      	ldr	r0, [r7, #4]
 800a0ac:	f00d ff3a 	bl	8017f24 <USBD_LL_StallEP>
}
 800a0b0:	bf00      	nop
 800a0b2:	3708      	adds	r7, #8
 800a0b4:	46bd      	mov	sp, r7
 800a0b6:	bd80      	pop	{r7, pc}

0800a0b8 <USBD_GetString>:
  * @param  unicode : Formatted string buffer (unicode)
  * @param  len : descriptor length
  * @retval None
  */
void USBD_GetString(uint8_t *desc, uint8_t *unicode, uint16_t *len)
{
 800a0b8:	b580      	push	{r7, lr}
 800a0ba:	b086      	sub	sp, #24
 800a0bc:	af00      	add	r7, sp, #0
 800a0be:	60f8      	str	r0, [r7, #12]
 800a0c0:	60b9      	str	r1, [r7, #8]
 800a0c2:	607a      	str	r2, [r7, #4]
  uint8_t idx = 0U;
 800a0c4:	2300      	movs	r3, #0
 800a0c6:	75fb      	strb	r3, [r7, #23]
  uint8_t *pdesc;

  if (desc == NULL)
 800a0c8:	68fb      	ldr	r3, [r7, #12]
 800a0ca:	2b00      	cmp	r3, #0
 800a0cc:	d042      	beq.n	800a154 <USBD_GetString+0x9c>
  {
    return;
  }

  pdesc = desc;
 800a0ce:	68fb      	ldr	r3, [r7, #12]
 800a0d0:	613b      	str	r3, [r7, #16]
  *len = MIN(USBD_MAX_STR_DESC_SIZ, ((uint16_t)USBD_GetLen(pdesc) * 2U) + 2U);
 800a0d2:	6938      	ldr	r0, [r7, #16]
 800a0d4:	f000 f842 	bl	800a15c <USBD_GetLen>
 800a0d8:	4603      	mov	r3, r0
 800a0da:	3301      	adds	r3, #1
 800a0dc:	005b      	lsls	r3, r3, #1
 800a0de:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800a0e2:	d808      	bhi.n	800a0f6 <USBD_GetString+0x3e>
 800a0e4:	6938      	ldr	r0, [r7, #16]
 800a0e6:	f000 f839 	bl	800a15c <USBD_GetLen>
 800a0ea:	4603      	mov	r3, r0
 800a0ec:	3301      	adds	r3, #1
 800a0ee:	b29b      	uxth	r3, r3
 800a0f0:	005b      	lsls	r3, r3, #1
 800a0f2:	b29a      	uxth	r2, r3
 800a0f4:	e001      	b.n	800a0fa <USBD_GetString+0x42>
 800a0f6:	f44f 7200 	mov.w	r2, #512	; 0x200
 800a0fa:	687b      	ldr	r3, [r7, #4]
 800a0fc:	801a      	strh	r2, [r3, #0]

  unicode[idx] = *(uint8_t *)len;
 800a0fe:	7dfb      	ldrb	r3, [r7, #23]
 800a100:	68ba      	ldr	r2, [r7, #8]
 800a102:	4413      	add	r3, r2
 800a104:	687a      	ldr	r2, [r7, #4]
 800a106:	7812      	ldrb	r2, [r2, #0]
 800a108:	701a      	strb	r2, [r3, #0]
  idx++;
 800a10a:	7dfb      	ldrb	r3, [r7, #23]
 800a10c:	3301      	adds	r3, #1
 800a10e:	75fb      	strb	r3, [r7, #23]
  unicode[idx] = USB_DESC_TYPE_STRING;
 800a110:	7dfb      	ldrb	r3, [r7, #23]
 800a112:	68ba      	ldr	r2, [r7, #8]
 800a114:	4413      	add	r3, r2
 800a116:	2203      	movs	r2, #3
 800a118:	701a      	strb	r2, [r3, #0]
  idx++;
 800a11a:	7dfb      	ldrb	r3, [r7, #23]
 800a11c:	3301      	adds	r3, #1
 800a11e:	75fb      	strb	r3, [r7, #23]

  while (*pdesc != (uint8_t)'\0')
 800a120:	e013      	b.n	800a14a <USBD_GetString+0x92>
  {
    unicode[idx] = *pdesc;
 800a122:	7dfb      	ldrb	r3, [r7, #23]
 800a124:	68ba      	ldr	r2, [r7, #8]
 800a126:	4413      	add	r3, r2
 800a128:	693a      	ldr	r2, [r7, #16]
 800a12a:	7812      	ldrb	r2, [r2, #0]
 800a12c:	701a      	strb	r2, [r3, #0]
    pdesc++;
 800a12e:	693b      	ldr	r3, [r7, #16]
 800a130:	3301      	adds	r3, #1
 800a132:	613b      	str	r3, [r7, #16]
    idx++;
 800a134:	7dfb      	ldrb	r3, [r7, #23]
 800a136:	3301      	adds	r3, #1
 800a138:	75fb      	strb	r3, [r7, #23]

    unicode[idx] = 0U;
 800a13a:	7dfb      	ldrb	r3, [r7, #23]
 800a13c:	68ba      	ldr	r2, [r7, #8]
 800a13e:	4413      	add	r3, r2
 800a140:	2200      	movs	r2, #0
 800a142:	701a      	strb	r2, [r3, #0]
    idx++;
 800a144:	7dfb      	ldrb	r3, [r7, #23]
 800a146:	3301      	adds	r3, #1
 800a148:	75fb      	strb	r3, [r7, #23]
  while (*pdesc != (uint8_t)'\0')
 800a14a:	693b      	ldr	r3, [r7, #16]
 800a14c:	781b      	ldrb	r3, [r3, #0]
 800a14e:	2b00      	cmp	r3, #0
 800a150:	d1e7      	bne.n	800a122 <USBD_GetString+0x6a>
 800a152:	e000      	b.n	800a156 <USBD_GetString+0x9e>
    return;
 800a154:	bf00      	nop
  }
}
 800a156:	3718      	adds	r7, #24
 800a158:	46bd      	mov	sp, r7
 800a15a:	bd80      	pop	{r7, pc}

0800a15c <USBD_GetLen>:
  *         return the string length
   * @param  buf : pointer to the ascii string buffer
  * @retval string length
  */
static uint8_t USBD_GetLen(uint8_t *buf)
{
 800a15c:	b480      	push	{r7}
 800a15e:	b085      	sub	sp, #20
 800a160:	af00      	add	r7, sp, #0
 800a162:	6078      	str	r0, [r7, #4]
  uint8_t  len = 0U;
 800a164:	2300      	movs	r3, #0
 800a166:	73fb      	strb	r3, [r7, #15]
  uint8_t *pbuff = buf;
 800a168:	687b      	ldr	r3, [r7, #4]
 800a16a:	60bb      	str	r3, [r7, #8]

  while (*pbuff != (uint8_t)'\0')
 800a16c:	e005      	b.n	800a17a <USBD_GetLen+0x1e>
  {
    len++;
 800a16e:	7bfb      	ldrb	r3, [r7, #15]
 800a170:	3301      	adds	r3, #1
 800a172:	73fb      	strb	r3, [r7, #15]
    pbuff++;
 800a174:	68bb      	ldr	r3, [r7, #8]
 800a176:	3301      	adds	r3, #1
 800a178:	60bb      	str	r3, [r7, #8]
  while (*pbuff != (uint8_t)'\0')
 800a17a:	68bb      	ldr	r3, [r7, #8]
 800a17c:	781b      	ldrb	r3, [r3, #0]
 800a17e:	2b00      	cmp	r3, #0
 800a180:	d1f5      	bne.n	800a16e <USBD_GetLen+0x12>
  }

  return len;
 800a182:	7bfb      	ldrb	r3, [r7, #15]
}
 800a184:	4618      	mov	r0, r3
 800a186:	3714      	adds	r7, #20
 800a188:	46bd      	mov	sp, r7
 800a18a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a18e:	4770      	bx	lr

0800a190 <USBD_CtlSendData>:
  * @param  len: length of data to be sent
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlSendData(USBD_HandleTypeDef *pdev,
                                    uint8_t *pbuf, uint32_t len)
{
 800a190:	b580      	push	{r7, lr}
 800a192:	b084      	sub	sp, #16
 800a194:	af00      	add	r7, sp, #0
 800a196:	60f8      	str	r0, [r7, #12]
 800a198:	60b9      	str	r1, [r7, #8]
 800a19a:	607a      	str	r2, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_IN;
 800a19c:	68fb      	ldr	r3, [r7, #12]
 800a19e:	2202      	movs	r2, #2
 800a1a0:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->ep_in[0].total_length = len;
 800a1a4:	68fb      	ldr	r3, [r7, #12]
 800a1a6:	687a      	ldr	r2, [r7, #4]
 800a1a8:	619a      	str	r2, [r3, #24]

#ifdef USBD_AVOID_PACKET_SPLIT_MPS
  pdev->ep_in[0].rem_length = 0U;
#else
  pdev->ep_in[0].rem_length = len;
 800a1aa:	68fb      	ldr	r3, [r7, #12]
 800a1ac:	687a      	ldr	r2, [r7, #4]
 800a1ae:	61da      	str	r2, [r3, #28]
#endif /* USBD_AVOID_PACKET_SPLIT_MPS */

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 800a1b0:	687b      	ldr	r3, [r7, #4]
 800a1b2:	68ba      	ldr	r2, [r7, #8]
 800a1b4:	2100      	movs	r1, #0
 800a1b6:	68f8      	ldr	r0, [r7, #12]
 800a1b8:	f00d ff3d 	bl	8018036 <USBD_LL_Transmit>

  return USBD_OK;
 800a1bc:	2300      	movs	r3, #0
}
 800a1be:	4618      	mov	r0, r3
 800a1c0:	3710      	adds	r7, #16
 800a1c2:	46bd      	mov	sp, r7
 800a1c4:	bd80      	pop	{r7, pc}

0800a1c6 <USBD_CtlContinueSendData>:
  * @param  len: length of data to be sent
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlContinueSendData(USBD_HandleTypeDef *pdev,
                                            uint8_t *pbuf, uint32_t len)
{
 800a1c6:	b580      	push	{r7, lr}
 800a1c8:	b084      	sub	sp, #16
 800a1ca:	af00      	add	r7, sp, #0
 800a1cc:	60f8      	str	r0, [r7, #12]
 800a1ce:	60b9      	str	r1, [r7, #8]
 800a1d0:	607a      	str	r2, [r7, #4]
  /* Start the next transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 800a1d2:	687b      	ldr	r3, [r7, #4]
 800a1d4:	68ba      	ldr	r2, [r7, #8]
 800a1d6:	2100      	movs	r1, #0
 800a1d8:	68f8      	ldr	r0, [r7, #12]
 800a1da:	f00d ff2c 	bl	8018036 <USBD_LL_Transmit>

  return USBD_OK;
 800a1de:	2300      	movs	r3, #0
}
 800a1e0:	4618      	mov	r0, r3
 800a1e2:	3710      	adds	r7, #16
 800a1e4:	46bd      	mov	sp, r7
 800a1e6:	bd80      	pop	{r7, pc}

0800a1e8 <USBD_CtlPrepareRx>:
  * @param  len: length of data to be received
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlPrepareRx(USBD_HandleTypeDef *pdev,
                                     uint8_t *pbuf, uint32_t len)
{
 800a1e8:	b580      	push	{r7, lr}
 800a1ea:	b084      	sub	sp, #16
 800a1ec:	af00      	add	r7, sp, #0
 800a1ee:	60f8      	str	r0, [r7, #12]
 800a1f0:	60b9      	str	r1, [r7, #8]
 800a1f2:	607a      	str	r2, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_OUT;
 800a1f4:	68fb      	ldr	r3, [r7, #12]
 800a1f6:	2203      	movs	r2, #3
 800a1f8:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->ep_out[0].total_length = len;
 800a1fc:	68fb      	ldr	r3, [r7, #12]
 800a1fe:	687a      	ldr	r2, [r7, #4]
 800a200:	f8c3 2158 	str.w	r2, [r3, #344]	; 0x158

#ifdef USBD_AVOID_PACKET_SPLIT_MPS
  pdev->ep_out[0].rem_length = 0U;
#else
  pdev->ep_out[0].rem_length = len;
 800a204:	68fb      	ldr	r3, [r7, #12]
 800a206:	687a      	ldr	r2, [r7, #4]
 800a208:	f8c3 215c 	str.w	r2, [r3, #348]	; 0x15c
#endif /* USBD_AVOID_PACKET_SPLIT_MPS */

  /* Start the transfer */
  (void)USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 800a20c:	687b      	ldr	r3, [r7, #4]
 800a20e:	68ba      	ldr	r2, [r7, #8]
 800a210:	2100      	movs	r1, #0
 800a212:	68f8      	ldr	r0, [r7, #12]
 800a214:	f00d ff30 	bl	8018078 <USBD_LL_PrepareReceive>

  return USBD_OK;
 800a218:	2300      	movs	r3, #0
}
 800a21a:	4618      	mov	r0, r3
 800a21c:	3710      	adds	r7, #16
 800a21e:	46bd      	mov	sp, r7
 800a220:	bd80      	pop	{r7, pc}

0800a222 <USBD_CtlContinueRx>:
  * @param  len: length of data to be received
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlContinueRx(USBD_HandleTypeDef *pdev,
                                      uint8_t *pbuf, uint32_t len)
{
 800a222:	b580      	push	{r7, lr}
 800a224:	b084      	sub	sp, #16
 800a226:	af00      	add	r7, sp, #0
 800a228:	60f8      	str	r0, [r7, #12]
 800a22a:	60b9      	str	r1, [r7, #8]
 800a22c:	607a      	str	r2, [r7, #4]
  (void)USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 800a22e:	687b      	ldr	r3, [r7, #4]
 800a230:	68ba      	ldr	r2, [r7, #8]
 800a232:	2100      	movs	r1, #0
 800a234:	68f8      	ldr	r0, [r7, #12]
 800a236:	f00d ff1f 	bl	8018078 <USBD_LL_PrepareReceive>

  return USBD_OK;
 800a23a:	2300      	movs	r3, #0
}
 800a23c:	4618      	mov	r0, r3
 800a23e:	3710      	adds	r7, #16
 800a240:	46bd      	mov	sp, r7
 800a242:	bd80      	pop	{r7, pc}

0800a244 <USBD_CtlSendStatus>:
  *         send zero lzngth packet on the ctl pipe
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlSendStatus(USBD_HandleTypeDef *pdev)
{
 800a244:	b580      	push	{r7, lr}
 800a246:	b082      	sub	sp, #8
 800a248:	af00      	add	r7, sp, #0
 800a24a:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_IN;
 800a24c:	687b      	ldr	r3, [r7, #4]
 800a24e:	2204      	movs	r2, #4
 800a250:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, NULL, 0U);
 800a254:	2300      	movs	r3, #0
 800a256:	2200      	movs	r2, #0
 800a258:	2100      	movs	r1, #0
 800a25a:	6878      	ldr	r0, [r7, #4]
 800a25c:	f00d feeb 	bl	8018036 <USBD_LL_Transmit>

  return USBD_OK;
 800a260:	2300      	movs	r3, #0
}
 800a262:	4618      	mov	r0, r3
 800a264:	3708      	adds	r7, #8
 800a266:	46bd      	mov	sp, r7
 800a268:	bd80      	pop	{r7, pc}

0800a26a <USBD_CtlReceiveStatus>:
  *         receive zero lzngth packet on the ctl pipe
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlReceiveStatus(USBD_HandleTypeDef *pdev)
{
 800a26a:	b580      	push	{r7, lr}
 800a26c:	b082      	sub	sp, #8
 800a26e:	af00      	add	r7, sp, #0
 800a270:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_OUT;
 800a272:	687b      	ldr	r3, [r7, #4]
 800a274:	2205      	movs	r2, #5
 800a276:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  /* Start the transfer */
  (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 800a27a:	2300      	movs	r3, #0
 800a27c:	2200      	movs	r2, #0
 800a27e:	2100      	movs	r1, #0
 800a280:	6878      	ldr	r0, [r7, #4]
 800a282:	f00d fef9 	bl	8018078 <USBD_LL_PrepareReceive>

  return USBD_OK;
 800a286:	2300      	movs	r3, #0
}
 800a288:	4618      	mov	r0, r3
 800a28a:	3708      	adds	r7, #8
 800a28c:	46bd      	mov	sp, r7
 800a28e:	bd80      	pop	{r7, pc}

0800a290 <lwip_htons>:
 * @param n u16_t in host byte order
 * @return n in network byte order
 */
u16_t
lwip_htons(u16_t n)
{
 800a290:	b480      	push	{r7}
 800a292:	b083      	sub	sp, #12
 800a294:	af00      	add	r7, sp, #0
 800a296:	4603      	mov	r3, r0
 800a298:	80fb      	strh	r3, [r7, #6]
  return PP_HTONS(n);
 800a29a:	88fb      	ldrh	r3, [r7, #6]
 800a29c:	021b      	lsls	r3, r3, #8
 800a29e:	b21a      	sxth	r2, r3
 800a2a0:	88fb      	ldrh	r3, [r7, #6]
 800a2a2:	0a1b      	lsrs	r3, r3, #8
 800a2a4:	b29b      	uxth	r3, r3
 800a2a6:	b21b      	sxth	r3, r3
 800a2a8:	4313      	orrs	r3, r2
 800a2aa:	b21b      	sxth	r3, r3
 800a2ac:	b29b      	uxth	r3, r3
}
 800a2ae:	4618      	mov	r0, r3
 800a2b0:	370c      	adds	r7, #12
 800a2b2:	46bd      	mov	sp, r7
 800a2b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a2b8:	4770      	bx	lr

0800a2ba <lwip_htonl>:
 * @param n u32_t in host byte order
 * @return n in network byte order
 */
u32_t
lwip_htonl(u32_t n)
{
 800a2ba:	b480      	push	{r7}
 800a2bc:	b083      	sub	sp, #12
 800a2be:	af00      	add	r7, sp, #0
 800a2c0:	6078      	str	r0, [r7, #4]
  return PP_HTONL(n);
 800a2c2:	687b      	ldr	r3, [r7, #4]
 800a2c4:	061a      	lsls	r2, r3, #24
 800a2c6:	687b      	ldr	r3, [r7, #4]
 800a2c8:	021b      	lsls	r3, r3, #8
 800a2ca:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 800a2ce:	431a      	orrs	r2, r3
 800a2d0:	687b      	ldr	r3, [r7, #4]
 800a2d2:	0a1b      	lsrs	r3, r3, #8
 800a2d4:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 800a2d8:	431a      	orrs	r2, r3
 800a2da:	687b      	ldr	r3, [r7, #4]
 800a2dc:	0e1b      	lsrs	r3, r3, #24
 800a2de:	4313      	orrs	r3, r2
}
 800a2e0:	4618      	mov	r0, r3
 800a2e2:	370c      	adds	r7, #12
 800a2e4:	46bd      	mov	sp, r7
 800a2e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a2ea:	4770      	bx	lr

0800a2ec <dns_init>:
 * Initialize the resolver: set up the UDP pcb and configure the default server
 * (if DNS_SERVER_ADDRESS is set).
 */
void
dns_init(void)
{
 800a2ec:	b480      	push	{r7}
 800a2ee:	af00      	add	r7, sp, #0
#endif

#if DNS_LOCAL_HOSTLIST
  dns_init_local();
#endif
}
 800a2f0:	bf00      	nop
 800a2f2:	46bd      	mov	sp, r7
 800a2f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a2f8:	4770      	bx	lr
	...

0800a2fc <dns_setserver>:
 * @param numdns the index of the DNS server to set must be < DNS_MAX_SERVERS
 * @param dnsserver IP address of the DNS server to set
 */
void
dns_setserver(u8_t numdns, const ip_addr_t *dnsserver)
{
 800a2fc:	b480      	push	{r7}
 800a2fe:	b083      	sub	sp, #12
 800a300:	af00      	add	r7, sp, #0
 800a302:	4603      	mov	r3, r0
 800a304:	6039      	str	r1, [r7, #0]
 800a306:	71fb      	strb	r3, [r7, #7]
  if (numdns < DNS_MAX_SERVERS) {
 800a308:	79fb      	ldrb	r3, [r7, #7]
 800a30a:	2b01      	cmp	r3, #1
 800a30c:	d80f      	bhi.n	800a32e <dns_setserver+0x32>
    if (dnsserver != NULL) {
 800a30e:	683b      	ldr	r3, [r7, #0]
 800a310:	2b00      	cmp	r3, #0
 800a312:	d006      	beq.n	800a322 <dns_setserver+0x26>
      dns_servers[numdns] = (*dnsserver);
 800a314:	79fb      	ldrb	r3, [r7, #7]
 800a316:	4909      	ldr	r1, [pc, #36]	; (800a33c <dns_setserver+0x40>)
 800a318:	683a      	ldr	r2, [r7, #0]
 800a31a:	6812      	ldr	r2, [r2, #0]
 800a31c:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    } else {
      dns_servers[numdns] = *IP_ADDR_ANY;
    }
  }
}
 800a320:	e005      	b.n	800a32e <dns_setserver+0x32>
      dns_servers[numdns] = *IP_ADDR_ANY;
 800a322:	79fb      	ldrb	r3, [r7, #7]
 800a324:	4905      	ldr	r1, [pc, #20]	; (800a33c <dns_setserver+0x40>)
 800a326:	4a06      	ldr	r2, [pc, #24]	; (800a340 <dns_setserver+0x44>)
 800a328:	6812      	ldr	r2, [r2, #0]
 800a32a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
 800a32e:	bf00      	nop
 800a330:	370c      	adds	r7, #12
 800a332:	46bd      	mov	sp, r7
 800a334:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a338:	4770      	bx	lr
 800a33a:	bf00      	nop
 800a33c:	20005374 	.word	0x20005374
 800a340:	0801c2c4 	.word	0x0801c2c4

0800a344 <dns_tmr>:
 * The DNS resolver client timer - handle retries and timeouts and should
 * be called every DNS_TMR_INTERVAL milliseconds (every second by default).
 */
void
dns_tmr(void)
{
 800a344:	b580      	push	{r7, lr}
 800a346:	af00      	add	r7, sp, #0
  LWIP_DEBUGF(DNS_DEBUG, ("dns_tmr: dns_check_entries\n"));
  dns_check_entries();
 800a348:	f000 faa8 	bl	800a89c <dns_check_entries>
}
 800a34c:	bf00      	nop
 800a34e:	bd80      	pop	{r7, pc}

0800a350 <dns_send>:
 * @param idx the DNS table entry index for which to send a request
 * @return ERR_OK if packet is sent; an err_t indicating the problem otherwise
 */
static err_t
dns_send(u8_t idx)
{
 800a350:	b580      	push	{r7, lr}
 800a352:	b090      	sub	sp, #64	; 0x40
 800a354:	af00      	add	r7, sp, #0
 800a356:	4603      	mov	r3, r0
 800a358:	71fb      	strb	r3, [r7, #7]
  struct pbuf *p;
  u16_t query_idx, copy_len;
  const char *hostname, *hostname_part;
  u8_t n;
  u8_t pcb_idx;
  struct dns_table_entry *entry = &dns_table[idx];
 800a35a:	79fa      	ldrb	r2, [r7, #7]
 800a35c:	4613      	mov	r3, r2
 800a35e:	011b      	lsls	r3, r3, #4
 800a360:	4413      	add	r3, r2
 800a362:	011b      	lsls	r3, r3, #4
 800a364:	4a6c      	ldr	r2, [pc, #432]	; (800a518 <dns_send+0x1c8>)
 800a366:	4413      	add	r3, r2
 800a368:	633b      	str	r3, [r7, #48]	; 0x30

  LWIP_DEBUGF(DNS_DEBUG, ("dns_send: dns_servers[%"U16_F"] \"%s\": request\n",
                          (u16_t)(entry->server_idx), entry->name));
  LWIP_ASSERT("dns server out of array", entry->server_idx < DNS_MAX_SERVERS);
 800a36a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a36c:	7adb      	ldrb	r3, [r3, #11]
 800a36e:	2b01      	cmp	r3, #1
 800a370:	d906      	bls.n	800a380 <dns_send+0x30>
 800a372:	4b6a      	ldr	r3, [pc, #424]	; (800a51c <dns_send+0x1cc>)
 800a374:	f240 22fa 	movw	r2, #762	; 0x2fa
 800a378:	4969      	ldr	r1, [pc, #420]	; (800a520 <dns_send+0x1d0>)
 800a37a:	486a      	ldr	r0, [pc, #424]	; (800a524 <dns_send+0x1d4>)
 800a37c:	f00e f884 	bl	8018488 <iprintf>
  if (ip_addr_isany_val(dns_servers[entry->server_idx])
 800a380:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a382:	7adb      	ldrb	r3, [r3, #11]
 800a384:	461a      	mov	r2, r3
 800a386:	4b68      	ldr	r3, [pc, #416]	; (800a528 <dns_send+0x1d8>)
 800a388:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800a38c:	2b00      	cmp	r3, #0
 800a38e:	d109      	bne.n	800a3a4 <dns_send+0x54>
      && !entry->is_mdns
#endif
     ) {
    /* DNS server not valid anymore, e.g. PPP netif has been shut down */
    /* call specified callback function if provided */
    dns_call_found(idx, NULL);
 800a390:	79fb      	ldrb	r3, [r7, #7]
 800a392:	2100      	movs	r1, #0
 800a394:	4618      	mov	r0, r3
 800a396:	f000 f8cb 	bl	800a530 <dns_call_found>
    /* flush this entry */
    entry->state = DNS_STATE_UNUSED;
 800a39a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a39c:	2200      	movs	r2, #0
 800a39e:	729a      	strb	r2, [r3, #10]
    return ERR_OK;
 800a3a0:	2300      	movs	r3, #0
 800a3a2:	e0b4      	b.n	800a50e <dns_send+0x1be>
  }

  /* if here, we have either a new query or a retry on a previous query to process */
  p = pbuf_alloc(PBUF_TRANSPORT, (u16_t)(SIZEOF_DNS_HDR + strlen(entry->name) + 2 +
 800a3a4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a3a6:	3310      	adds	r3, #16
 800a3a8:	4618      	mov	r0, r3
 800a3aa:	f7f5 ff11 	bl	80001d0 <strlen>
 800a3ae:	4603      	mov	r3, r0
 800a3b0:	b29b      	uxth	r3, r3
 800a3b2:	3312      	adds	r3, #18
 800a3b4:	b29b      	uxth	r3, r3
 800a3b6:	f44f 7220 	mov.w	r2, #640	; 0x280
 800a3ba:	4619      	mov	r1, r3
 800a3bc:	2036      	movs	r0, #54	; 0x36
 800a3be:	f001 fadb 	bl	800b978 <pbuf_alloc>
 800a3c2:	62f8      	str	r0, [r7, #44]	; 0x2c
                                         SIZEOF_DNS_QUERY), PBUF_RAM);
  if (p != NULL) {
 800a3c4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a3c6:	2b00      	cmp	r3, #0
 800a3c8:	f000 8095 	beq.w	800a4f6 <dns_send+0x1a6>
    const ip_addr_t *dst;
    u16_t dst_port;
    /* fill dns header */
    memset(&hdr, 0, SIZEOF_DNS_HDR);
 800a3cc:	f107 0310 	add.w	r3, r7, #16
 800a3d0:	220c      	movs	r2, #12
 800a3d2:	2100      	movs	r1, #0
 800a3d4:	4618      	mov	r0, r3
 800a3d6:	f00e f8bc 	bl	8018552 <memset>
    hdr.id = lwip_htons(entry->txid);
 800a3da:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a3dc:	891b      	ldrh	r3, [r3, #8]
 800a3de:	4618      	mov	r0, r3
 800a3e0:	f7ff ff56 	bl	800a290 <lwip_htons>
 800a3e4:	4603      	mov	r3, r0
 800a3e6:	823b      	strh	r3, [r7, #16]
    hdr.flags1 = DNS_FLAG1_RD;
 800a3e8:	2301      	movs	r3, #1
 800a3ea:	74bb      	strb	r3, [r7, #18]
    hdr.numquestions = PP_HTONS(1);
 800a3ec:	f44f 7380 	mov.w	r3, #256	; 0x100
 800a3f0:	82bb      	strh	r3, [r7, #20]
    pbuf_take(p, &hdr, SIZEOF_DNS_HDR);
 800a3f2:	f107 0310 	add.w	r3, r7, #16
 800a3f6:	220c      	movs	r2, #12
 800a3f8:	4619      	mov	r1, r3
 800a3fa:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800a3fc:	f002 f848 	bl	800c490 <pbuf_take>
    hostname = entry->name;
 800a400:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a402:	3310      	adds	r3, #16
 800a404:	63bb      	str	r3, [r7, #56]	; 0x38
    --hostname;
 800a406:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a408:	3b01      	subs	r3, #1
 800a40a:	63bb      	str	r3, [r7, #56]	; 0x38

    /* convert hostname into suitable query format. */
    query_idx = SIZEOF_DNS_HDR;
 800a40c:	230c      	movs	r3, #12
 800a40e:	87bb      	strh	r3, [r7, #60]	; 0x3c
    do {
      ++hostname;
 800a410:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a412:	3301      	adds	r3, #1
 800a414:	63bb      	str	r3, [r7, #56]	; 0x38
      hostname_part = hostname;
 800a416:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a418:	62bb      	str	r3, [r7, #40]	; 0x28
      for (n = 0; *hostname != '.' && *hostname != 0; ++hostname) {
 800a41a:	2300      	movs	r3, #0
 800a41c:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
 800a420:	e007      	b.n	800a432 <dns_send+0xe2>
        ++n;
 800a422:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 800a426:	3301      	adds	r3, #1
 800a428:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
      for (n = 0; *hostname != '.' && *hostname != 0; ++hostname) {
 800a42c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a42e:	3301      	adds	r3, #1
 800a430:	63bb      	str	r3, [r7, #56]	; 0x38
 800a432:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a434:	781b      	ldrb	r3, [r3, #0]
 800a436:	2b2e      	cmp	r3, #46	; 0x2e
 800a438:	d003      	beq.n	800a442 <dns_send+0xf2>
 800a43a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a43c:	781b      	ldrb	r3, [r3, #0]
 800a43e:	2b00      	cmp	r3, #0
 800a440:	d1ef      	bne.n	800a422 <dns_send+0xd2>
      }
      copy_len = (u16_t)(hostname - hostname_part);
 800a442:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800a444:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a446:	1ad3      	subs	r3, r2, r3
 800a448:	84fb      	strh	r3, [r7, #38]	; 0x26
      if (query_idx + n + 1 > 0xFFFF) {
 800a44a:	8fba      	ldrh	r2, [r7, #60]	; 0x3c
 800a44c:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 800a450:	4413      	add	r3, r2
 800a452:	f64f 72fe 	movw	r2, #65534	; 0xfffe
 800a456:	4293      	cmp	r3, r2
 800a458:	dc53      	bgt.n	800a502 <dns_send+0x1b2>
        /* u16_t overflow */
        goto overflow_return;
      }
      pbuf_put_at(p, query_idx, n);
 800a45a:	f897 2037 	ldrb.w	r2, [r7, #55]	; 0x37
 800a45e:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 800a460:	4619      	mov	r1, r3
 800a462:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800a464:	f002 f942 	bl	800c6ec <pbuf_put_at>
      pbuf_take_at(p, hostname_part, copy_len, (u16_t)(query_idx + 1));
 800a468:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 800a46a:	3301      	adds	r3, #1
 800a46c:	b29b      	uxth	r3, r3
 800a46e:	8cfa      	ldrh	r2, [r7, #38]	; 0x26
 800a470:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800a472:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800a474:	f002 f89e 	bl	800c5b4 <pbuf_take_at>
      query_idx = (u16_t)(query_idx + n + 1);
 800a478:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 800a47c:	b29a      	uxth	r2, r3
 800a47e:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 800a480:	4413      	add	r3, r2
 800a482:	b29b      	uxth	r3, r3
 800a484:	3301      	adds	r3, #1
 800a486:	87bb      	strh	r3, [r7, #60]	; 0x3c
    } while (*hostname != 0);
 800a488:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a48a:	781b      	ldrb	r3, [r3, #0]
 800a48c:	2b00      	cmp	r3, #0
 800a48e:	d1bf      	bne.n	800a410 <dns_send+0xc0>
    pbuf_put_at(p, query_idx, 0);
 800a490:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 800a492:	2200      	movs	r2, #0
 800a494:	4619      	mov	r1, r3
 800a496:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800a498:	f002 f928 	bl	800c6ec <pbuf_put_at>
    query_idx++;
 800a49c:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 800a49e:	3301      	adds	r3, #1
 800a4a0:	87bb      	strh	r3, [r7, #60]	; 0x3c

    /* fill dns query */
    if (LWIP_DNS_ADDRTYPE_IS_IPV6(entry->reqaddrtype)) {
      qry.type = PP_HTONS(DNS_RRTYPE_AAAA);
    } else {
      qry.type = PP_HTONS(DNS_RRTYPE_A);
 800a4a2:	f44f 7380 	mov.w	r3, #256	; 0x100
 800a4a6:	81bb      	strh	r3, [r7, #12]
    }
    qry.cls = PP_HTONS(DNS_RRCLASS_IN);
 800a4a8:	f44f 7380 	mov.w	r3, #256	; 0x100
 800a4ac:	81fb      	strh	r3, [r7, #14]
    pbuf_take_at(p, &qry, SIZEOF_DNS_QUERY, query_idx);
 800a4ae:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 800a4b0:	f107 010c 	add.w	r1, r7, #12
 800a4b4:	2204      	movs	r2, #4
 800a4b6:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800a4b8:	f002 f87c 	bl	800c5b4 <pbuf_take_at>

#if ((LWIP_DNS_SECURE & LWIP_DNS_SECURE_RAND_SRC_PORT) != 0)
    pcb_idx = entry->pcb_idx;
 800a4bc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a4be:	7bdb      	ldrb	r3, [r3, #15]
 800a4c0:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25
      }
#endif
    } else
#endif /* LWIP_DNS_SUPPORT_MDNS_QUERIES */
    {
      dst_port = DNS_SERVER_PORT;
 800a4c4:	2335      	movs	r3, #53	; 0x35
 800a4c6:	847b      	strh	r3, [r7, #34]	; 0x22
      dst = &dns_servers[entry->server_idx];
 800a4c8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a4ca:	7adb      	ldrb	r3, [r3, #11]
 800a4cc:	009b      	lsls	r3, r3, #2
 800a4ce:	4a16      	ldr	r2, [pc, #88]	; (800a528 <dns_send+0x1d8>)
 800a4d0:	4413      	add	r3, r2
 800a4d2:	61fb      	str	r3, [r7, #28]
    }
    err = udp_sendto(dns_pcbs[pcb_idx], p, dst, dst_port);
 800a4d4:	f897 3025 	ldrb.w	r3, [r7, #37]	; 0x25
 800a4d8:	4a14      	ldr	r2, [pc, #80]	; (800a52c <dns_send+0x1dc>)
 800a4da:	f852 0023 	ldr.w	r0, [r2, r3, lsl #2]
 800a4de:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 800a4e0:	69fa      	ldr	r2, [r7, #28]
 800a4e2:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800a4e4:	f008 fbf2 	bl	8012ccc <udp_sendto>
 800a4e8:	4603      	mov	r3, r0
 800a4ea:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f

    /* free pbuf */
    pbuf_free(p);
 800a4ee:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800a4f0:	f001 fd26 	bl	800bf40 <pbuf_free>
 800a4f4:	e002      	b.n	800a4fc <dns_send+0x1ac>
  } else {
    err = ERR_MEM;
 800a4f6:	23ff      	movs	r3, #255	; 0xff
 800a4f8:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
  }

  return err;
 800a4fc:	f997 303f 	ldrsb.w	r3, [r7, #63]	; 0x3f
 800a500:	e005      	b.n	800a50e <dns_send+0x1be>
        goto overflow_return;
 800a502:	bf00      	nop
overflow_return:
  pbuf_free(p);
 800a504:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800a506:	f001 fd1b 	bl	800bf40 <pbuf_free>
  return ERR_VAL;
 800a50a:	f06f 0305 	mvn.w	r3, #5
}
 800a50e:	4618      	mov	r0, r3
 800a510:	3740      	adds	r7, #64	; 0x40
 800a512:	46bd      	mov	sp, r7
 800a514:	bd80      	pop	{r7, pc}
 800a516:	bf00      	nop
 800a518:	20004f04 	.word	0x20004f04
 800a51c:	08019380 	.word	0x08019380
 800a520:	080193b0 	.word	0x080193b0
 800a524:	080193c8 	.word	0x080193c8
 800a528:	20005374 	.word	0x20005374
 800a52c:	20004ef4 	.word	0x20004ef4

0800a530 <dns_call_found>:
 * @param idx dns table index of the entry that is resolved or removed
 * @param addr IP address for the hostname (or NULL on error or memory shortage)
 */
static void
dns_call_found(u8_t idx, ip_addr_t *addr)
{
 800a530:	b590      	push	{r4, r7, lr}
 800a532:	b085      	sub	sp, #20
 800a534:	af00      	add	r7, sp, #0
 800a536:	4603      	mov	r3, r0
 800a538:	6039      	str	r1, [r7, #0]
 800a53a:	71fb      	strb	r3, [r7, #7]
    }
  }
#endif /* LWIP_IPV4 && LWIP_IPV6 */

#if ((LWIP_DNS_SECURE & LWIP_DNS_SECURE_NO_MULTIPLE_OUTSTANDING) != 0)
  for (i = 0; i < DNS_MAX_REQUESTS; i++) {
 800a53c:	2300      	movs	r3, #0
 800a53e:	73fb      	strb	r3, [r7, #15]
 800a540:	e03d      	b.n	800a5be <dns_call_found+0x8e>
    if (dns_requests[i].found && (dns_requests[i].dns_table_idx == idx)) {
 800a542:	7bfa      	ldrb	r2, [r7, #15]
 800a544:	4957      	ldr	r1, [pc, #348]	; (800a6a4 <dns_call_found+0x174>)
 800a546:	4613      	mov	r3, r2
 800a548:	005b      	lsls	r3, r3, #1
 800a54a:	4413      	add	r3, r2
 800a54c:	009b      	lsls	r3, r3, #2
 800a54e:	440b      	add	r3, r1
 800a550:	681b      	ldr	r3, [r3, #0]
 800a552:	2b00      	cmp	r3, #0
 800a554:	d030      	beq.n	800a5b8 <dns_call_found+0x88>
 800a556:	7bfa      	ldrb	r2, [r7, #15]
 800a558:	4952      	ldr	r1, [pc, #328]	; (800a6a4 <dns_call_found+0x174>)
 800a55a:	4613      	mov	r3, r2
 800a55c:	005b      	lsls	r3, r3, #1
 800a55e:	4413      	add	r3, r2
 800a560:	009b      	lsls	r3, r3, #2
 800a562:	440b      	add	r3, r1
 800a564:	3308      	adds	r3, #8
 800a566:	781b      	ldrb	r3, [r3, #0]
 800a568:	79fa      	ldrb	r2, [r7, #7]
 800a56a:	429a      	cmp	r2, r3
 800a56c:	d124      	bne.n	800a5b8 <dns_call_found+0x88>
      (*dns_requests[i].found)(dns_table[idx].name, addr, dns_requests[i].arg);
 800a56e:	7bfa      	ldrb	r2, [r7, #15]
 800a570:	494c      	ldr	r1, [pc, #304]	; (800a6a4 <dns_call_found+0x174>)
 800a572:	4613      	mov	r3, r2
 800a574:	005b      	lsls	r3, r3, #1
 800a576:	4413      	add	r3, r2
 800a578:	009b      	lsls	r3, r3, #2
 800a57a:	440b      	add	r3, r1
 800a57c:	681c      	ldr	r4, [r3, #0]
 800a57e:	79fa      	ldrb	r2, [r7, #7]
 800a580:	4613      	mov	r3, r2
 800a582:	011b      	lsls	r3, r3, #4
 800a584:	4413      	add	r3, r2
 800a586:	011b      	lsls	r3, r3, #4
 800a588:	3310      	adds	r3, #16
 800a58a:	4a47      	ldr	r2, [pc, #284]	; (800a6a8 <dns_call_found+0x178>)
 800a58c:	1898      	adds	r0, r3, r2
 800a58e:	7bfa      	ldrb	r2, [r7, #15]
 800a590:	4944      	ldr	r1, [pc, #272]	; (800a6a4 <dns_call_found+0x174>)
 800a592:	4613      	mov	r3, r2
 800a594:	005b      	lsls	r3, r3, #1
 800a596:	4413      	add	r3, r2
 800a598:	009b      	lsls	r3, r3, #2
 800a59a:	440b      	add	r3, r1
 800a59c:	3304      	adds	r3, #4
 800a59e:	681b      	ldr	r3, [r3, #0]
 800a5a0:	461a      	mov	r2, r3
 800a5a2:	6839      	ldr	r1, [r7, #0]
 800a5a4:	47a0      	blx	r4
      /* flush this entry */
      dns_requests[i].found = NULL;
 800a5a6:	7bfa      	ldrb	r2, [r7, #15]
 800a5a8:	493e      	ldr	r1, [pc, #248]	; (800a6a4 <dns_call_found+0x174>)
 800a5aa:	4613      	mov	r3, r2
 800a5ac:	005b      	lsls	r3, r3, #1
 800a5ae:	4413      	add	r3, r2
 800a5b0:	009b      	lsls	r3, r3, #2
 800a5b2:	440b      	add	r3, r1
 800a5b4:	2200      	movs	r2, #0
 800a5b6:	601a      	str	r2, [r3, #0]
  for (i = 0; i < DNS_MAX_REQUESTS; i++) {
 800a5b8:	7bfb      	ldrb	r3, [r7, #15]
 800a5ba:	3301      	adds	r3, #1
 800a5bc:	73fb      	strb	r3, [r7, #15]
 800a5be:	7bfb      	ldrb	r3, [r7, #15]
 800a5c0:	2b03      	cmp	r3, #3
 800a5c2:	d9be      	bls.n	800a542 <dns_call_found+0x12>
  }
  dns_requests[idx].found = NULL;
#endif
#if ((LWIP_DNS_SECURE & LWIP_DNS_SECURE_RAND_SRC_PORT) != 0)
  /* close the pcb used unless other request are using it */
  for (i = 0; i < DNS_MAX_REQUESTS; i++) {
 800a5c4:	2300      	movs	r3, #0
 800a5c6:	73fb      	strb	r3, [r7, #15]
 800a5c8:	e031      	b.n	800a62e <dns_call_found+0xfe>
    if (i == idx) {
 800a5ca:	7bfa      	ldrb	r2, [r7, #15]
 800a5cc:	79fb      	ldrb	r3, [r7, #7]
 800a5ce:	429a      	cmp	r2, r3
 800a5d0:	d029      	beq.n	800a626 <dns_call_found+0xf6>
      continue; /* only check other requests */
    }
    if (dns_table[i].state == DNS_STATE_ASKING) {
 800a5d2:	7bfa      	ldrb	r2, [r7, #15]
 800a5d4:	4934      	ldr	r1, [pc, #208]	; (800a6a8 <dns_call_found+0x178>)
 800a5d6:	4613      	mov	r3, r2
 800a5d8:	011b      	lsls	r3, r3, #4
 800a5da:	4413      	add	r3, r2
 800a5dc:	011b      	lsls	r3, r3, #4
 800a5de:	440b      	add	r3, r1
 800a5e0:	330a      	adds	r3, #10
 800a5e2:	781b      	ldrb	r3, [r3, #0]
 800a5e4:	2b02      	cmp	r3, #2
 800a5e6:	d11f      	bne.n	800a628 <dns_call_found+0xf8>
      if (dns_table[i].pcb_idx == dns_table[idx].pcb_idx) {
 800a5e8:	7bfa      	ldrb	r2, [r7, #15]
 800a5ea:	492f      	ldr	r1, [pc, #188]	; (800a6a8 <dns_call_found+0x178>)
 800a5ec:	4613      	mov	r3, r2
 800a5ee:	011b      	lsls	r3, r3, #4
 800a5f0:	4413      	add	r3, r2
 800a5f2:	011b      	lsls	r3, r3, #4
 800a5f4:	440b      	add	r3, r1
 800a5f6:	330f      	adds	r3, #15
 800a5f8:	7819      	ldrb	r1, [r3, #0]
 800a5fa:	79fa      	ldrb	r2, [r7, #7]
 800a5fc:	482a      	ldr	r0, [pc, #168]	; (800a6a8 <dns_call_found+0x178>)
 800a5fe:	4613      	mov	r3, r2
 800a600:	011b      	lsls	r3, r3, #4
 800a602:	4413      	add	r3, r2
 800a604:	011b      	lsls	r3, r3, #4
 800a606:	4403      	add	r3, r0
 800a608:	330f      	adds	r3, #15
 800a60a:	781b      	ldrb	r3, [r3, #0]
 800a60c:	4299      	cmp	r1, r3
 800a60e:	d10b      	bne.n	800a628 <dns_call_found+0xf8>
        /* another request is still using the same pcb */
        dns_table[idx].pcb_idx = DNS_MAX_SOURCE_PORTS;
 800a610:	79fa      	ldrb	r2, [r7, #7]
 800a612:	4925      	ldr	r1, [pc, #148]	; (800a6a8 <dns_call_found+0x178>)
 800a614:	4613      	mov	r3, r2
 800a616:	011b      	lsls	r3, r3, #4
 800a618:	4413      	add	r3, r2
 800a61a:	011b      	lsls	r3, r3, #4
 800a61c:	440b      	add	r3, r1
 800a61e:	330f      	adds	r3, #15
 800a620:	2204      	movs	r2, #4
 800a622:	701a      	strb	r2, [r3, #0]
        break;
 800a624:	e006      	b.n	800a634 <dns_call_found+0x104>
      continue; /* only check other requests */
 800a626:	bf00      	nop
  for (i = 0; i < DNS_MAX_REQUESTS; i++) {
 800a628:	7bfb      	ldrb	r3, [r7, #15]
 800a62a:	3301      	adds	r3, #1
 800a62c:	73fb      	strb	r3, [r7, #15]
 800a62e:	7bfb      	ldrb	r3, [r7, #15]
 800a630:	2b03      	cmp	r3, #3
 800a632:	d9ca      	bls.n	800a5ca <dns_call_found+0x9a>
      }
    }
  }
  if (dns_table[idx].pcb_idx < DNS_MAX_SOURCE_PORTS) {
 800a634:	79fa      	ldrb	r2, [r7, #7]
 800a636:	491c      	ldr	r1, [pc, #112]	; (800a6a8 <dns_call_found+0x178>)
 800a638:	4613      	mov	r3, r2
 800a63a:	011b      	lsls	r3, r3, #4
 800a63c:	4413      	add	r3, r2
 800a63e:	011b      	lsls	r3, r3, #4
 800a640:	440b      	add	r3, r1
 800a642:	330f      	adds	r3, #15
 800a644:	781b      	ldrb	r3, [r3, #0]
 800a646:	2b03      	cmp	r3, #3
 800a648:	d827      	bhi.n	800a69a <dns_call_found+0x16a>
    /* if we come here, the pcb is not used any more and can be removed */
    udp_remove(dns_pcbs[dns_table[idx].pcb_idx]);
 800a64a:	79fa      	ldrb	r2, [r7, #7]
 800a64c:	4916      	ldr	r1, [pc, #88]	; (800a6a8 <dns_call_found+0x178>)
 800a64e:	4613      	mov	r3, r2
 800a650:	011b      	lsls	r3, r3, #4
 800a652:	4413      	add	r3, r2
 800a654:	011b      	lsls	r3, r3, #4
 800a656:	440b      	add	r3, r1
 800a658:	330f      	adds	r3, #15
 800a65a:	781b      	ldrb	r3, [r3, #0]
 800a65c:	461a      	mov	r2, r3
 800a65e:	4b13      	ldr	r3, [pc, #76]	; (800a6ac <dns_call_found+0x17c>)
 800a660:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800a664:	4618      	mov	r0, r3
 800a666:	f008 fdfd 	bl	8013264 <udp_remove>
    dns_pcbs[dns_table[idx].pcb_idx] = NULL;
 800a66a:	79fa      	ldrb	r2, [r7, #7]
 800a66c:	490e      	ldr	r1, [pc, #56]	; (800a6a8 <dns_call_found+0x178>)
 800a66e:	4613      	mov	r3, r2
 800a670:	011b      	lsls	r3, r3, #4
 800a672:	4413      	add	r3, r2
 800a674:	011b      	lsls	r3, r3, #4
 800a676:	440b      	add	r3, r1
 800a678:	330f      	adds	r3, #15
 800a67a:	781b      	ldrb	r3, [r3, #0]
 800a67c:	4619      	mov	r1, r3
 800a67e:	4b0b      	ldr	r3, [pc, #44]	; (800a6ac <dns_call_found+0x17c>)
 800a680:	2200      	movs	r2, #0
 800a682:	f843 2021 	str.w	r2, [r3, r1, lsl #2]
    dns_table[idx].pcb_idx = DNS_MAX_SOURCE_PORTS;
 800a686:	79fa      	ldrb	r2, [r7, #7]
 800a688:	4907      	ldr	r1, [pc, #28]	; (800a6a8 <dns_call_found+0x178>)
 800a68a:	4613      	mov	r3, r2
 800a68c:	011b      	lsls	r3, r3, #4
 800a68e:	4413      	add	r3, r2
 800a690:	011b      	lsls	r3, r3, #4
 800a692:	440b      	add	r3, r1
 800a694:	330f      	adds	r3, #15
 800a696:	2204      	movs	r2, #4
 800a698:	701a      	strb	r2, [r3, #0]
  }
#endif
}
 800a69a:	bf00      	nop
 800a69c:	3714      	adds	r7, #20
 800a69e:	46bd      	mov	sp, r7
 800a6a0:	bd90      	pop	{r4, r7, pc}
 800a6a2:	bf00      	nop
 800a6a4:	20005344 	.word	0x20005344
 800a6a8:	20004f04 	.word	0x20004f04
 800a6ac:	20004ef4 	.word	0x20004ef4

0800a6b0 <dns_create_txid>:

/* Create a query transmission ID that is unique for all outstanding queries */
static u16_t
dns_create_txid(void)
{
 800a6b0:	b580      	push	{r7, lr}
 800a6b2:	b082      	sub	sp, #8
 800a6b4:	af00      	add	r7, sp, #0
  u16_t txid;
  u8_t i;

again:
  txid = (u16_t)DNS_RAND_TXID();
 800a6b6:	f00d fd5b 	bl	8018170 <rand>
 800a6ba:	4603      	mov	r3, r0
 800a6bc:	80bb      	strh	r3, [r7, #4]

  /* check whether the ID is unique */
  for (i = 0; i < DNS_TABLE_SIZE; i++) {
 800a6be:	2300      	movs	r3, #0
 800a6c0:	71fb      	strb	r3, [r7, #7]
 800a6c2:	e01a      	b.n	800a6fa <dns_create_txid+0x4a>
    if ((dns_table[i].state == DNS_STATE_ASKING) &&
 800a6c4:	79fa      	ldrb	r2, [r7, #7]
 800a6c6:	4911      	ldr	r1, [pc, #68]	; (800a70c <dns_create_txid+0x5c>)
 800a6c8:	4613      	mov	r3, r2
 800a6ca:	011b      	lsls	r3, r3, #4
 800a6cc:	4413      	add	r3, r2
 800a6ce:	011b      	lsls	r3, r3, #4
 800a6d0:	440b      	add	r3, r1
 800a6d2:	330a      	adds	r3, #10
 800a6d4:	781b      	ldrb	r3, [r3, #0]
 800a6d6:	2b02      	cmp	r3, #2
 800a6d8:	d10c      	bne.n	800a6f4 <dns_create_txid+0x44>
        (dns_table[i].txid == txid)) {
 800a6da:	79fa      	ldrb	r2, [r7, #7]
 800a6dc:	490b      	ldr	r1, [pc, #44]	; (800a70c <dns_create_txid+0x5c>)
 800a6de:	4613      	mov	r3, r2
 800a6e0:	011b      	lsls	r3, r3, #4
 800a6e2:	4413      	add	r3, r2
 800a6e4:	011b      	lsls	r3, r3, #4
 800a6e6:	440b      	add	r3, r1
 800a6e8:	3308      	adds	r3, #8
 800a6ea:	881b      	ldrh	r3, [r3, #0]
    if ((dns_table[i].state == DNS_STATE_ASKING) &&
 800a6ec:	88ba      	ldrh	r2, [r7, #4]
 800a6ee:	429a      	cmp	r2, r3
 800a6f0:	d100      	bne.n	800a6f4 <dns_create_txid+0x44>
      /* ID already used by another pending query */
      goto again;
 800a6f2:	e7e0      	b.n	800a6b6 <dns_create_txid+0x6>
  for (i = 0; i < DNS_TABLE_SIZE; i++) {
 800a6f4:	79fb      	ldrb	r3, [r7, #7]
 800a6f6:	3301      	adds	r3, #1
 800a6f8:	71fb      	strb	r3, [r7, #7]
 800a6fa:	79fb      	ldrb	r3, [r7, #7]
 800a6fc:	2b03      	cmp	r3, #3
 800a6fe:	d9e1      	bls.n	800a6c4 <dns_create_txid+0x14>
    }
  }

  return txid;
 800a700:	88bb      	ldrh	r3, [r7, #4]
}
 800a702:	4618      	mov	r0, r3
 800a704:	3708      	adds	r7, #8
 800a706:	46bd      	mov	sp, r7
 800a708:	bd80      	pop	{r7, pc}
 800a70a:	bf00      	nop
 800a70c:	20004f04 	.word	0x20004f04

0800a710 <dns_backupserver_available>:
/**
 * Check whether there are other backup DNS servers available to try
 */
static u8_t
dns_backupserver_available(struct dns_table_entry *pentry)
{
 800a710:	b480      	push	{r7}
 800a712:	b085      	sub	sp, #20
 800a714:	af00      	add	r7, sp, #0
 800a716:	6078      	str	r0, [r7, #4]
  u8_t ret = 0;
 800a718:	2300      	movs	r3, #0
 800a71a:	73fb      	strb	r3, [r7, #15]

  if (pentry) {
 800a71c:	687b      	ldr	r3, [r7, #4]
 800a71e:	2b00      	cmp	r3, #0
 800a720:	d00d      	beq.n	800a73e <dns_backupserver_available+0x2e>
    if ((pentry->server_idx + 1 < DNS_MAX_SERVERS) && !ip_addr_isany_val(dns_servers[pentry->server_idx + 1])) {
 800a722:	687b      	ldr	r3, [r7, #4]
 800a724:	7adb      	ldrb	r3, [r3, #11]
 800a726:	2b00      	cmp	r3, #0
 800a728:	d109      	bne.n	800a73e <dns_backupserver_available+0x2e>
 800a72a:	687b      	ldr	r3, [r7, #4]
 800a72c:	7adb      	ldrb	r3, [r3, #11]
 800a72e:	3301      	adds	r3, #1
 800a730:	4a06      	ldr	r2, [pc, #24]	; (800a74c <dns_backupserver_available+0x3c>)
 800a732:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800a736:	2b00      	cmp	r3, #0
 800a738:	d001      	beq.n	800a73e <dns_backupserver_available+0x2e>
      ret = 1;
 800a73a:	2301      	movs	r3, #1
 800a73c:	73fb      	strb	r3, [r7, #15]
    }
  }

  return ret;
 800a73e:	7bfb      	ldrb	r3, [r7, #15]
}
 800a740:	4618      	mov	r0, r3
 800a742:	3714      	adds	r7, #20
 800a744:	46bd      	mov	sp, r7
 800a746:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a74a:	4770      	bx	lr
 800a74c:	20005374 	.word	0x20005374

0800a750 <dns_check_entry>:
 *
 * @param i index of the dns_table entry to check
 */
static void
dns_check_entry(u8_t i)
{
 800a750:	b580      	push	{r7, lr}
 800a752:	b084      	sub	sp, #16
 800a754:	af00      	add	r7, sp, #0
 800a756:	4603      	mov	r3, r0
 800a758:	71fb      	strb	r3, [r7, #7]
  err_t err;
  struct dns_table_entry *entry = &dns_table[i];
 800a75a:	79fa      	ldrb	r2, [r7, #7]
 800a75c:	4613      	mov	r3, r2
 800a75e:	011b      	lsls	r3, r3, #4
 800a760:	4413      	add	r3, r2
 800a762:	011b      	lsls	r3, r3, #4
 800a764:	4a48      	ldr	r2, [pc, #288]	; (800a888 <dns_check_entry+0x138>)
 800a766:	4413      	add	r3, r2
 800a768:	60fb      	str	r3, [r7, #12]

  LWIP_ASSERT("array index out of bounds", i < DNS_TABLE_SIZE);
 800a76a:	79fb      	ldrb	r3, [r7, #7]
 800a76c:	2b03      	cmp	r3, #3
 800a76e:	d906      	bls.n	800a77e <dns_check_entry+0x2e>
 800a770:	4b46      	ldr	r3, [pc, #280]	; (800a88c <dns_check_entry+0x13c>)
 800a772:	f240 421c 	movw	r2, #1052	; 0x41c
 800a776:	4946      	ldr	r1, [pc, #280]	; (800a890 <dns_check_entry+0x140>)
 800a778:	4846      	ldr	r0, [pc, #280]	; (800a894 <dns_check_entry+0x144>)
 800a77a:	f00d fe85 	bl	8018488 <iprintf>

  switch (entry->state) {
 800a77e:	68fb      	ldr	r3, [r7, #12]
 800a780:	7a9b      	ldrb	r3, [r3, #10]
 800a782:	2b03      	cmp	r3, #3
 800a784:	d86f      	bhi.n	800a866 <dns_check_entry+0x116>
 800a786:	a201      	add	r2, pc, #4	; (adr r2, 800a78c <dns_check_entry+0x3c>)
 800a788:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a78c:	0800a877 	.word	0x0800a877
 800a790:	0800a79d 	.word	0x0800a79d
 800a794:	0800a7cf 	.word	0x0800a7cf
 800a798:	0800a845 	.word	0x0800a845
    case DNS_STATE_NEW:
      /* initialize new entry */
      entry->txid = dns_create_txid();
 800a79c:	f7ff ff88 	bl	800a6b0 <dns_create_txid>
 800a7a0:	4603      	mov	r3, r0
 800a7a2:	461a      	mov	r2, r3
 800a7a4:	68fb      	ldr	r3, [r7, #12]
 800a7a6:	811a      	strh	r2, [r3, #8]
      entry->state = DNS_STATE_ASKING;
 800a7a8:	68fb      	ldr	r3, [r7, #12]
 800a7aa:	2202      	movs	r2, #2
 800a7ac:	729a      	strb	r2, [r3, #10]
      entry->server_idx = 0;
 800a7ae:	68fb      	ldr	r3, [r7, #12]
 800a7b0:	2200      	movs	r2, #0
 800a7b2:	72da      	strb	r2, [r3, #11]
      entry->tmr = 1;
 800a7b4:	68fb      	ldr	r3, [r7, #12]
 800a7b6:	2201      	movs	r2, #1
 800a7b8:	731a      	strb	r2, [r3, #12]
      entry->retries = 0;
 800a7ba:	68fb      	ldr	r3, [r7, #12]
 800a7bc:	2200      	movs	r2, #0
 800a7be:	735a      	strb	r2, [r3, #13]

      /* send DNS packet for this entry */
      err = dns_send(i);
 800a7c0:	79fb      	ldrb	r3, [r7, #7]
 800a7c2:	4618      	mov	r0, r3
 800a7c4:	f7ff fdc4 	bl	800a350 <dns_send>
 800a7c8:	4603      	mov	r3, r0
 800a7ca:	72fb      	strb	r3, [r7, #11]
      if (err != ERR_OK) {
        LWIP_DEBUGF(DNS_DEBUG | LWIP_DBG_LEVEL_WARNING,
                    ("dns_send returned error: %s\n", lwip_strerr(err)));
      }
      break;
 800a7cc:	e058      	b.n	800a880 <dns_check_entry+0x130>
    case DNS_STATE_ASKING:
      if (--entry->tmr == 0) {
 800a7ce:	68fb      	ldr	r3, [r7, #12]
 800a7d0:	7b1b      	ldrb	r3, [r3, #12]
 800a7d2:	3b01      	subs	r3, #1
 800a7d4:	b2da      	uxtb	r2, r3
 800a7d6:	68fb      	ldr	r3, [r7, #12]
 800a7d8:	731a      	strb	r2, [r3, #12]
 800a7da:	68fb      	ldr	r3, [r7, #12]
 800a7dc:	7b1b      	ldrb	r3, [r3, #12]
 800a7de:	2b00      	cmp	r3, #0
 800a7e0:	d14b      	bne.n	800a87a <dns_check_entry+0x12a>
        if (++entry->retries == DNS_MAX_RETRIES) {
 800a7e2:	68fb      	ldr	r3, [r7, #12]
 800a7e4:	7b5b      	ldrb	r3, [r3, #13]
 800a7e6:	3301      	adds	r3, #1
 800a7e8:	b2da      	uxtb	r2, r3
 800a7ea:	68fb      	ldr	r3, [r7, #12]
 800a7ec:	735a      	strb	r2, [r3, #13]
 800a7ee:	68fb      	ldr	r3, [r7, #12]
 800a7f0:	7b5b      	ldrb	r3, [r3, #13]
 800a7f2:	2b04      	cmp	r3, #4
 800a7f4:	d11b      	bne.n	800a82e <dns_check_entry+0xde>
          if (dns_backupserver_available(entry)
 800a7f6:	68f8      	ldr	r0, [r7, #12]
 800a7f8:	f7ff ff8a 	bl	800a710 <dns_backupserver_available>
 800a7fc:	4603      	mov	r3, r0
 800a7fe:	2b00      	cmp	r3, #0
 800a800:	d00c      	beq.n	800a81c <dns_check_entry+0xcc>
#if LWIP_DNS_SUPPORT_MDNS_QUERIES
              && !entry->is_mdns
#endif /* LWIP_DNS_SUPPORT_MDNS_QUERIES */
             ) {
            /* change of server */
            entry->server_idx++;
 800a802:	68fb      	ldr	r3, [r7, #12]
 800a804:	7adb      	ldrb	r3, [r3, #11]
 800a806:	3301      	adds	r3, #1
 800a808:	b2da      	uxtb	r2, r3
 800a80a:	68fb      	ldr	r3, [r7, #12]
 800a80c:	72da      	strb	r2, [r3, #11]
            entry->tmr = 1;
 800a80e:	68fb      	ldr	r3, [r7, #12]
 800a810:	2201      	movs	r2, #1
 800a812:	731a      	strb	r2, [r3, #12]
            entry->retries = 0;
 800a814:	68fb      	ldr	r3, [r7, #12]
 800a816:	2200      	movs	r2, #0
 800a818:	735a      	strb	r2, [r3, #13]
 800a81a:	e00c      	b.n	800a836 <dns_check_entry+0xe6>
          } else {
            LWIP_DEBUGF(DNS_DEBUG, ("dns_check_entry: \"%s\": timeout\n", entry->name));
            /* call specified callback function if provided */
            dns_call_found(i, NULL);
 800a81c:	79fb      	ldrb	r3, [r7, #7]
 800a81e:	2100      	movs	r1, #0
 800a820:	4618      	mov	r0, r3
 800a822:	f7ff fe85 	bl	800a530 <dns_call_found>
            /* flush this entry */
            entry->state = DNS_STATE_UNUSED;
 800a826:	68fb      	ldr	r3, [r7, #12]
 800a828:	2200      	movs	r2, #0
 800a82a:	729a      	strb	r2, [r3, #10]
            break;
 800a82c:	e028      	b.n	800a880 <dns_check_entry+0x130>
          }
        } else {
          /* wait longer for the next retry */
          entry->tmr = entry->retries;
 800a82e:	68fb      	ldr	r3, [r7, #12]
 800a830:	7b5a      	ldrb	r2, [r3, #13]
 800a832:	68fb      	ldr	r3, [r7, #12]
 800a834:	731a      	strb	r2, [r3, #12]
        }

        /* send DNS packet for this entry */
        err = dns_send(i);
 800a836:	79fb      	ldrb	r3, [r7, #7]
 800a838:	4618      	mov	r0, r3
 800a83a:	f7ff fd89 	bl	800a350 <dns_send>
 800a83e:	4603      	mov	r3, r0
 800a840:	72fb      	strb	r3, [r7, #11]
        if (err != ERR_OK) {
          LWIP_DEBUGF(DNS_DEBUG | LWIP_DBG_LEVEL_WARNING,
                      ("dns_send returned error: %s\n", lwip_strerr(err)));
        }
      }
      break;
 800a842:	e01a      	b.n	800a87a <dns_check_entry+0x12a>
    case DNS_STATE_DONE:
      /* if the time to live is nul */
      if ((entry->ttl == 0) || (--entry->ttl == 0)) {
 800a844:	68fb      	ldr	r3, [r7, #12]
 800a846:	681b      	ldr	r3, [r3, #0]
 800a848:	2b00      	cmp	r3, #0
 800a84a:	d008      	beq.n	800a85e <dns_check_entry+0x10e>
 800a84c:	68fb      	ldr	r3, [r7, #12]
 800a84e:	681b      	ldr	r3, [r3, #0]
 800a850:	1e5a      	subs	r2, r3, #1
 800a852:	68fb      	ldr	r3, [r7, #12]
 800a854:	601a      	str	r2, [r3, #0]
 800a856:	68fb      	ldr	r3, [r7, #12]
 800a858:	681b      	ldr	r3, [r3, #0]
 800a85a:	2b00      	cmp	r3, #0
 800a85c:	d10f      	bne.n	800a87e <dns_check_entry+0x12e>
        LWIP_DEBUGF(DNS_DEBUG, ("dns_check_entry: \"%s\": flush\n", entry->name));
        /* flush this entry, there cannot be any related pending entries in this state */
        entry->state = DNS_STATE_UNUSED;
 800a85e:	68fb      	ldr	r3, [r7, #12]
 800a860:	2200      	movs	r2, #0
 800a862:	729a      	strb	r2, [r3, #10]
      }
      break;
 800a864:	e00b      	b.n	800a87e <dns_check_entry+0x12e>
    case DNS_STATE_UNUSED:
      /* nothing to do */
      break;
    default:
      LWIP_ASSERT("unknown dns_table entry state:", 0);
 800a866:	4b09      	ldr	r3, [pc, #36]	; (800a88c <dns_check_entry+0x13c>)
 800a868:	f240 425b 	movw	r2, #1115	; 0x45b
 800a86c:	490a      	ldr	r1, [pc, #40]	; (800a898 <dns_check_entry+0x148>)
 800a86e:	4809      	ldr	r0, [pc, #36]	; (800a894 <dns_check_entry+0x144>)
 800a870:	f00d fe0a 	bl	8018488 <iprintf>
      break;
 800a874:	e004      	b.n	800a880 <dns_check_entry+0x130>
      break;
 800a876:	bf00      	nop
 800a878:	e002      	b.n	800a880 <dns_check_entry+0x130>
      break;
 800a87a:	bf00      	nop
 800a87c:	e000      	b.n	800a880 <dns_check_entry+0x130>
      break;
 800a87e:	bf00      	nop
  }
}
 800a880:	bf00      	nop
 800a882:	3710      	adds	r7, #16
 800a884:	46bd      	mov	sp, r7
 800a886:	bd80      	pop	{r7, pc}
 800a888:	20004f04 	.word	0x20004f04
 800a88c:	08019380 	.word	0x08019380
 800a890:	080193f0 	.word	0x080193f0
 800a894:	080193c8 	.word	0x080193c8
 800a898:	0801940c 	.word	0x0801940c

0800a89c <dns_check_entries>:
/**
 * Call dns_check_entry for each entry in dns_table - check all entries.
 */
static void
dns_check_entries(void)
{
 800a89c:	b580      	push	{r7, lr}
 800a89e:	b082      	sub	sp, #8
 800a8a0:	af00      	add	r7, sp, #0
  u8_t i;

  for (i = 0; i < DNS_TABLE_SIZE; ++i) {
 800a8a2:	2300      	movs	r3, #0
 800a8a4:	71fb      	strb	r3, [r7, #7]
 800a8a6:	e006      	b.n	800a8b6 <dns_check_entries+0x1a>
    dns_check_entry(i);
 800a8a8:	79fb      	ldrb	r3, [r7, #7]
 800a8aa:	4618      	mov	r0, r3
 800a8ac:	f7ff ff50 	bl	800a750 <dns_check_entry>
  for (i = 0; i < DNS_TABLE_SIZE; ++i) {
 800a8b0:	79fb      	ldrb	r3, [r7, #7]
 800a8b2:	3301      	adds	r3, #1
 800a8b4:	71fb      	strb	r3, [r7, #7]
 800a8b6:	79fb      	ldrb	r3, [r7, #7]
 800a8b8:	2b03      	cmp	r3, #3
 800a8ba:	d9f5      	bls.n	800a8a8 <dns_check_entries+0xc>
  }
}
 800a8bc:	bf00      	nop
 800a8be:	bf00      	nop
 800a8c0:	3708      	adds	r7, #8
 800a8c2:	46bd      	mov	sp, r7
 800a8c4:	bd80      	pop	{r7, pc}

0800a8c6 <lwip_init>:
 * Initialize all modules.
 * Use this in NO_SYS mode. Use tcpip_init() otherwise.
 */
void
lwip_init(void)
{
 800a8c6:	b580      	push	{r7, lr}
 800a8c8:	b082      	sub	sp, #8
 800a8ca:	af00      	add	r7, sp, #0
#ifndef LWIP_SKIP_CONST_CHECK
  int a = 0;
 800a8cc:	2300      	movs	r3, #0
 800a8ce:	607b      	str	r3, [r7, #4]
  /* Modules initialization */
  stats_init();
#if !NO_SYS
  sys_init();
#endif /* !NO_SYS */
  mem_init();
 800a8d0:	f000 f8d6 	bl	800aa80 <mem_init>
  memp_init();
 800a8d4:	f000 fbdc 	bl	800b090 <memp_init>
  pbuf_init();
  netif_init();
 800a8d8:	f000 fcda 	bl	800b290 <netif_init>
#endif /* LWIP_IPV4 */
#if LWIP_RAW
  raw_init();
#endif /* LWIP_RAW */
#if LWIP_UDP
  udp_init();
 800a8dc:	f008 f834 	bl	8012948 <udp_init>
#endif /* LWIP_UDP */
#if LWIP_TCP
  tcp_init();
 800a8e0:	f001 ff26 	bl	800c730 <tcp_init>
#endif /* LWIP_TCP */
#if LWIP_IGMP
  igmp_init();
#endif /* LWIP_IGMP */
#if LWIP_DNS
  dns_init();
 800a8e4:	f7ff fd02 	bl	800a2ec <dns_init>
#if PPP_SUPPORT
  ppp_init();
#endif

#if LWIP_TIMERS
  sys_timeouts_init();
 800a8e8:	f007 ffa4 	bl	8012834 <sys_timeouts_init>
#endif /* LWIP_TIMERS */
}
 800a8ec:	bf00      	nop
 800a8ee:	3708      	adds	r7, #8
 800a8f0:	46bd      	mov	sp, r7
 800a8f2:	bd80      	pop	{r7, pc}

0800a8f4 <ptr_to_mem>:
#define mem_overflow_check_element(mem)
#endif /* MEM_OVERFLOW_CHECK */

static struct mem *
ptr_to_mem(mem_size_t ptr)
{
 800a8f4:	b480      	push	{r7}
 800a8f6:	b083      	sub	sp, #12
 800a8f8:	af00      	add	r7, sp, #0
 800a8fa:	4603      	mov	r3, r0
 800a8fc:	80fb      	strh	r3, [r7, #6]
  return (struct mem *)(void *)&ram[ptr];
 800a8fe:	4b05      	ldr	r3, [pc, #20]	; (800a914 <ptr_to_mem+0x20>)
 800a900:	681a      	ldr	r2, [r3, #0]
 800a902:	88fb      	ldrh	r3, [r7, #6]
 800a904:	4413      	add	r3, r2
}
 800a906:	4618      	mov	r0, r3
 800a908:	370c      	adds	r7, #12
 800a90a:	46bd      	mov	sp, r7
 800a90c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a910:	4770      	bx	lr
 800a912:	bf00      	nop
 800a914:	200059e8 	.word	0x200059e8

0800a918 <mem_to_ptr>:

static mem_size_t
mem_to_ptr(void *mem)
{
 800a918:	b480      	push	{r7}
 800a91a:	b083      	sub	sp, #12
 800a91c:	af00      	add	r7, sp, #0
 800a91e:	6078      	str	r0, [r7, #4]
  return (mem_size_t)((u8_t *)mem - ram);
 800a920:	4b05      	ldr	r3, [pc, #20]	; (800a938 <mem_to_ptr+0x20>)
 800a922:	681b      	ldr	r3, [r3, #0]
 800a924:	687a      	ldr	r2, [r7, #4]
 800a926:	1ad3      	subs	r3, r2, r3
 800a928:	b29b      	uxth	r3, r3
}
 800a92a:	4618      	mov	r0, r3
 800a92c:	370c      	adds	r7, #12
 800a92e:	46bd      	mov	sp, r7
 800a930:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a934:	4770      	bx	lr
 800a936:	bf00      	nop
 800a938:	200059e8 	.word	0x200059e8

0800a93c <plug_holes>:
 * This assumes access to the heap is protected by the calling function
 * already.
 */
static void
plug_holes(struct mem *mem)
{
 800a93c:	b590      	push	{r4, r7, lr}
 800a93e:	b085      	sub	sp, #20
 800a940:	af00      	add	r7, sp, #0
 800a942:	6078      	str	r0, [r7, #4]
  struct mem *nmem;
  struct mem *pmem;

  LWIP_ASSERT("plug_holes: mem >= ram", (u8_t *)mem >= ram);
 800a944:	4b45      	ldr	r3, [pc, #276]	; (800aa5c <plug_holes+0x120>)
 800a946:	681b      	ldr	r3, [r3, #0]
 800a948:	687a      	ldr	r2, [r7, #4]
 800a94a:	429a      	cmp	r2, r3
 800a94c:	d206      	bcs.n	800a95c <plug_holes+0x20>
 800a94e:	4b44      	ldr	r3, [pc, #272]	; (800aa60 <plug_holes+0x124>)
 800a950:	f240 12df 	movw	r2, #479	; 0x1df
 800a954:	4943      	ldr	r1, [pc, #268]	; (800aa64 <plug_holes+0x128>)
 800a956:	4844      	ldr	r0, [pc, #272]	; (800aa68 <plug_holes+0x12c>)
 800a958:	f00d fd96 	bl	8018488 <iprintf>
  LWIP_ASSERT("plug_holes: mem < ram_end", (u8_t *)mem < (u8_t *)ram_end);
 800a95c:	4b43      	ldr	r3, [pc, #268]	; (800aa6c <plug_holes+0x130>)
 800a95e:	681b      	ldr	r3, [r3, #0]
 800a960:	687a      	ldr	r2, [r7, #4]
 800a962:	429a      	cmp	r2, r3
 800a964:	d306      	bcc.n	800a974 <plug_holes+0x38>
 800a966:	4b3e      	ldr	r3, [pc, #248]	; (800aa60 <plug_holes+0x124>)
 800a968:	f44f 72f0 	mov.w	r2, #480	; 0x1e0
 800a96c:	4940      	ldr	r1, [pc, #256]	; (800aa70 <plug_holes+0x134>)
 800a96e:	483e      	ldr	r0, [pc, #248]	; (800aa68 <plug_holes+0x12c>)
 800a970:	f00d fd8a 	bl	8018488 <iprintf>
  LWIP_ASSERT("plug_holes: mem->used == 0", mem->used == 0);
 800a974:	687b      	ldr	r3, [r7, #4]
 800a976:	791b      	ldrb	r3, [r3, #4]
 800a978:	2b00      	cmp	r3, #0
 800a97a:	d006      	beq.n	800a98a <plug_holes+0x4e>
 800a97c:	4b38      	ldr	r3, [pc, #224]	; (800aa60 <plug_holes+0x124>)
 800a97e:	f240 12e1 	movw	r2, #481	; 0x1e1
 800a982:	493c      	ldr	r1, [pc, #240]	; (800aa74 <plug_holes+0x138>)
 800a984:	4838      	ldr	r0, [pc, #224]	; (800aa68 <plug_holes+0x12c>)
 800a986:	f00d fd7f 	bl	8018488 <iprintf>

  /* plug hole forward */
  LWIP_ASSERT("plug_holes: mem->next <= MEM_SIZE_ALIGNED", mem->next <= MEM_SIZE_ALIGNED);
 800a98a:	687b      	ldr	r3, [r7, #4]
 800a98c:	881b      	ldrh	r3, [r3, #0]
 800a98e:	f5b3 6fc8 	cmp.w	r3, #1600	; 0x640
 800a992:	d906      	bls.n	800a9a2 <plug_holes+0x66>
 800a994:	4b32      	ldr	r3, [pc, #200]	; (800aa60 <plug_holes+0x124>)
 800a996:	f44f 72f2 	mov.w	r2, #484	; 0x1e4
 800a99a:	4937      	ldr	r1, [pc, #220]	; (800aa78 <plug_holes+0x13c>)
 800a99c:	4832      	ldr	r0, [pc, #200]	; (800aa68 <plug_holes+0x12c>)
 800a99e:	f00d fd73 	bl	8018488 <iprintf>

  nmem = ptr_to_mem(mem->next);
 800a9a2:	687b      	ldr	r3, [r7, #4]
 800a9a4:	881b      	ldrh	r3, [r3, #0]
 800a9a6:	4618      	mov	r0, r3
 800a9a8:	f7ff ffa4 	bl	800a8f4 <ptr_to_mem>
 800a9ac:	60f8      	str	r0, [r7, #12]
  if (mem != nmem && nmem->used == 0 && (u8_t *)nmem != (u8_t *)ram_end) {
 800a9ae:	687a      	ldr	r2, [r7, #4]
 800a9b0:	68fb      	ldr	r3, [r7, #12]
 800a9b2:	429a      	cmp	r2, r3
 800a9b4:	d024      	beq.n	800aa00 <plug_holes+0xc4>
 800a9b6:	68fb      	ldr	r3, [r7, #12]
 800a9b8:	791b      	ldrb	r3, [r3, #4]
 800a9ba:	2b00      	cmp	r3, #0
 800a9bc:	d120      	bne.n	800aa00 <plug_holes+0xc4>
 800a9be:	4b2b      	ldr	r3, [pc, #172]	; (800aa6c <plug_holes+0x130>)
 800a9c0:	681b      	ldr	r3, [r3, #0]
 800a9c2:	68fa      	ldr	r2, [r7, #12]
 800a9c4:	429a      	cmp	r2, r3
 800a9c6:	d01b      	beq.n	800aa00 <plug_holes+0xc4>
    /* if mem->next is unused and not end of ram, combine mem and mem->next */
    if (lfree == nmem) {
 800a9c8:	4b2c      	ldr	r3, [pc, #176]	; (800aa7c <plug_holes+0x140>)
 800a9ca:	681b      	ldr	r3, [r3, #0]
 800a9cc:	68fa      	ldr	r2, [r7, #12]
 800a9ce:	429a      	cmp	r2, r3
 800a9d0:	d102      	bne.n	800a9d8 <plug_holes+0x9c>
      lfree = mem;
 800a9d2:	4a2a      	ldr	r2, [pc, #168]	; (800aa7c <plug_holes+0x140>)
 800a9d4:	687b      	ldr	r3, [r7, #4]
 800a9d6:	6013      	str	r3, [r2, #0]
    }
    mem->next = nmem->next;
 800a9d8:	68fb      	ldr	r3, [r7, #12]
 800a9da:	881a      	ldrh	r2, [r3, #0]
 800a9dc:	687b      	ldr	r3, [r7, #4]
 800a9de:	801a      	strh	r2, [r3, #0]
    if (nmem->next != MEM_SIZE_ALIGNED) {
 800a9e0:	68fb      	ldr	r3, [r7, #12]
 800a9e2:	881b      	ldrh	r3, [r3, #0]
 800a9e4:	f5b3 6fc8 	cmp.w	r3, #1600	; 0x640
 800a9e8:	d00a      	beq.n	800aa00 <plug_holes+0xc4>
      ptr_to_mem(nmem->next)->prev = mem_to_ptr(mem);
 800a9ea:	68fb      	ldr	r3, [r7, #12]
 800a9ec:	881b      	ldrh	r3, [r3, #0]
 800a9ee:	4618      	mov	r0, r3
 800a9f0:	f7ff ff80 	bl	800a8f4 <ptr_to_mem>
 800a9f4:	4604      	mov	r4, r0
 800a9f6:	6878      	ldr	r0, [r7, #4]
 800a9f8:	f7ff ff8e 	bl	800a918 <mem_to_ptr>
 800a9fc:	4603      	mov	r3, r0
 800a9fe:	8063      	strh	r3, [r4, #2]
    }
  }

  /* plug hole backward */
  pmem = ptr_to_mem(mem->prev);
 800aa00:	687b      	ldr	r3, [r7, #4]
 800aa02:	885b      	ldrh	r3, [r3, #2]
 800aa04:	4618      	mov	r0, r3
 800aa06:	f7ff ff75 	bl	800a8f4 <ptr_to_mem>
 800aa0a:	60b8      	str	r0, [r7, #8]
  if (pmem != mem && pmem->used == 0) {
 800aa0c:	68ba      	ldr	r2, [r7, #8]
 800aa0e:	687b      	ldr	r3, [r7, #4]
 800aa10:	429a      	cmp	r2, r3
 800aa12:	d01f      	beq.n	800aa54 <plug_holes+0x118>
 800aa14:	68bb      	ldr	r3, [r7, #8]
 800aa16:	791b      	ldrb	r3, [r3, #4]
 800aa18:	2b00      	cmp	r3, #0
 800aa1a:	d11b      	bne.n	800aa54 <plug_holes+0x118>
    /* if mem->prev is unused, combine mem and mem->prev */
    if (lfree == mem) {
 800aa1c:	4b17      	ldr	r3, [pc, #92]	; (800aa7c <plug_holes+0x140>)
 800aa1e:	681b      	ldr	r3, [r3, #0]
 800aa20:	687a      	ldr	r2, [r7, #4]
 800aa22:	429a      	cmp	r2, r3
 800aa24:	d102      	bne.n	800aa2c <plug_holes+0xf0>
      lfree = pmem;
 800aa26:	4a15      	ldr	r2, [pc, #84]	; (800aa7c <plug_holes+0x140>)
 800aa28:	68bb      	ldr	r3, [r7, #8]
 800aa2a:	6013      	str	r3, [r2, #0]
    }
    pmem->next = mem->next;
 800aa2c:	687b      	ldr	r3, [r7, #4]
 800aa2e:	881a      	ldrh	r2, [r3, #0]
 800aa30:	68bb      	ldr	r3, [r7, #8]
 800aa32:	801a      	strh	r2, [r3, #0]
    if (mem->next != MEM_SIZE_ALIGNED) {
 800aa34:	687b      	ldr	r3, [r7, #4]
 800aa36:	881b      	ldrh	r3, [r3, #0]
 800aa38:	f5b3 6fc8 	cmp.w	r3, #1600	; 0x640
 800aa3c:	d00a      	beq.n	800aa54 <plug_holes+0x118>
      ptr_to_mem(mem->next)->prev = mem_to_ptr(pmem);
 800aa3e:	687b      	ldr	r3, [r7, #4]
 800aa40:	881b      	ldrh	r3, [r3, #0]
 800aa42:	4618      	mov	r0, r3
 800aa44:	f7ff ff56 	bl	800a8f4 <ptr_to_mem>
 800aa48:	4604      	mov	r4, r0
 800aa4a:	68b8      	ldr	r0, [r7, #8]
 800aa4c:	f7ff ff64 	bl	800a918 <mem_to_ptr>
 800aa50:	4603      	mov	r3, r0
 800aa52:	8063      	strh	r3, [r4, #2]
    }
  }
}
 800aa54:	bf00      	nop
 800aa56:	3714      	adds	r7, #20
 800aa58:	46bd      	mov	sp, r7
 800aa5a:	bd90      	pop	{r4, r7, pc}
 800aa5c:	200059e8 	.word	0x200059e8
 800aa60:	0801942c 	.word	0x0801942c
 800aa64:	0801945c 	.word	0x0801945c
 800aa68:	08019474 	.word	0x08019474
 800aa6c:	200059ec 	.word	0x200059ec
 800aa70:	0801949c 	.word	0x0801949c
 800aa74:	080194b8 	.word	0x080194b8
 800aa78:	080194d4 	.word	0x080194d4
 800aa7c:	200059f0 	.word	0x200059f0

0800aa80 <mem_init>:
/**
 * Zero the heap and initialize start, end and lowest-free
 */
void
mem_init(void)
{
 800aa80:	b580      	push	{r7, lr}
 800aa82:	b082      	sub	sp, #8
 800aa84:	af00      	add	r7, sp, #0

  LWIP_ASSERT("Sanity check alignment",
              (SIZEOF_STRUCT_MEM & (MEM_ALIGNMENT - 1)) == 0);

  /* align the heap */
  ram = (u8_t *)LWIP_MEM_ALIGN(LWIP_RAM_HEAP_POINTER);
 800aa86:	4b18      	ldr	r3, [pc, #96]	; (800aae8 <mem_init+0x68>)
 800aa88:	3303      	adds	r3, #3
 800aa8a:	f023 0303 	bic.w	r3, r3, #3
 800aa8e:	461a      	mov	r2, r3
 800aa90:	4b16      	ldr	r3, [pc, #88]	; (800aaec <mem_init+0x6c>)
 800aa92:	601a      	str	r2, [r3, #0]
  /* initialize the start of the heap */
  mem = (struct mem *)(void *)ram;
 800aa94:	4b15      	ldr	r3, [pc, #84]	; (800aaec <mem_init+0x6c>)
 800aa96:	681b      	ldr	r3, [r3, #0]
 800aa98:	607b      	str	r3, [r7, #4]
  mem->next = MEM_SIZE_ALIGNED;
 800aa9a:	687b      	ldr	r3, [r7, #4]
 800aa9c:	f44f 62c8 	mov.w	r2, #1600	; 0x640
 800aaa0:	801a      	strh	r2, [r3, #0]
  mem->prev = 0;
 800aaa2:	687b      	ldr	r3, [r7, #4]
 800aaa4:	2200      	movs	r2, #0
 800aaa6:	805a      	strh	r2, [r3, #2]
  mem->used = 0;
 800aaa8:	687b      	ldr	r3, [r7, #4]
 800aaaa:	2200      	movs	r2, #0
 800aaac:	711a      	strb	r2, [r3, #4]
  /* initialize the end of the heap */
  ram_end = ptr_to_mem(MEM_SIZE_ALIGNED);
 800aaae:	f44f 60c8 	mov.w	r0, #1600	; 0x640
 800aab2:	f7ff ff1f 	bl	800a8f4 <ptr_to_mem>
 800aab6:	4603      	mov	r3, r0
 800aab8:	4a0d      	ldr	r2, [pc, #52]	; (800aaf0 <mem_init+0x70>)
 800aaba:	6013      	str	r3, [r2, #0]
  ram_end->used = 1;
 800aabc:	4b0c      	ldr	r3, [pc, #48]	; (800aaf0 <mem_init+0x70>)
 800aabe:	681b      	ldr	r3, [r3, #0]
 800aac0:	2201      	movs	r2, #1
 800aac2:	711a      	strb	r2, [r3, #4]
  ram_end->next = MEM_SIZE_ALIGNED;
 800aac4:	4b0a      	ldr	r3, [pc, #40]	; (800aaf0 <mem_init+0x70>)
 800aac6:	681b      	ldr	r3, [r3, #0]
 800aac8:	f44f 62c8 	mov.w	r2, #1600	; 0x640
 800aacc:	801a      	strh	r2, [r3, #0]
  ram_end->prev = MEM_SIZE_ALIGNED;
 800aace:	4b08      	ldr	r3, [pc, #32]	; (800aaf0 <mem_init+0x70>)
 800aad0:	681b      	ldr	r3, [r3, #0]
 800aad2:	f44f 62c8 	mov.w	r2, #1600	; 0x640
 800aad6:	805a      	strh	r2, [r3, #2]
  MEM_SANITY();

  /* initialize the lowest-free pointer to the start of the heap */
  lfree = (struct mem *)(void *)ram;
 800aad8:	4b04      	ldr	r3, [pc, #16]	; (800aaec <mem_init+0x6c>)
 800aada:	681b      	ldr	r3, [r3, #0]
 800aadc:	4a05      	ldr	r2, [pc, #20]	; (800aaf4 <mem_init+0x74>)
 800aade:	6013      	str	r3, [r2, #0]
  MEM_STATS_AVAIL(avail, MEM_SIZE_ALIGNED);

  if (sys_mutex_new(&mem_mutex) != ERR_OK) {
    LWIP_ASSERT("failed to create mem_mutex", 0);
  }
}
 800aae0:	bf00      	nop
 800aae2:	3708      	adds	r7, #8
 800aae4:	46bd      	mov	sp, r7
 800aae6:	bd80      	pop	{r7, pc}
 800aae8:	20005394 	.word	0x20005394
 800aaec:	200059e8 	.word	0x200059e8
 800aaf0:	200059ec 	.word	0x200059ec
 800aaf4:	200059f0 	.word	0x200059f0

0800aaf8 <mem_link_valid>:
/* Check if a struct mem is correctly linked.
 * If not, double-free is a possible reason.
 */
static int
mem_link_valid(struct mem *mem)
{
 800aaf8:	b580      	push	{r7, lr}
 800aafa:	b086      	sub	sp, #24
 800aafc:	af00      	add	r7, sp, #0
 800aafe:	6078      	str	r0, [r7, #4]
  struct mem *nmem, *pmem;
  mem_size_t rmem_idx;
  rmem_idx = mem_to_ptr(mem);
 800ab00:	6878      	ldr	r0, [r7, #4]
 800ab02:	f7ff ff09 	bl	800a918 <mem_to_ptr>
 800ab06:	4603      	mov	r3, r0
 800ab08:	82fb      	strh	r3, [r7, #22]
  nmem = ptr_to_mem(mem->next);
 800ab0a:	687b      	ldr	r3, [r7, #4]
 800ab0c:	881b      	ldrh	r3, [r3, #0]
 800ab0e:	4618      	mov	r0, r3
 800ab10:	f7ff fef0 	bl	800a8f4 <ptr_to_mem>
 800ab14:	6138      	str	r0, [r7, #16]
  pmem = ptr_to_mem(mem->prev);
 800ab16:	687b      	ldr	r3, [r7, #4]
 800ab18:	885b      	ldrh	r3, [r3, #2]
 800ab1a:	4618      	mov	r0, r3
 800ab1c:	f7ff feea 	bl	800a8f4 <ptr_to_mem>
 800ab20:	60f8      	str	r0, [r7, #12]
  if ((mem->next > MEM_SIZE_ALIGNED) || (mem->prev > MEM_SIZE_ALIGNED) ||
 800ab22:	687b      	ldr	r3, [r7, #4]
 800ab24:	881b      	ldrh	r3, [r3, #0]
 800ab26:	f5b3 6fc8 	cmp.w	r3, #1600	; 0x640
 800ab2a:	d818      	bhi.n	800ab5e <mem_link_valid+0x66>
 800ab2c:	687b      	ldr	r3, [r7, #4]
 800ab2e:	885b      	ldrh	r3, [r3, #2]
 800ab30:	f5b3 6fc8 	cmp.w	r3, #1600	; 0x640
 800ab34:	d813      	bhi.n	800ab5e <mem_link_valid+0x66>
      ((mem->prev != rmem_idx) && (pmem->next != rmem_idx)) ||
 800ab36:	687b      	ldr	r3, [r7, #4]
 800ab38:	885b      	ldrh	r3, [r3, #2]
  if ((mem->next > MEM_SIZE_ALIGNED) || (mem->prev > MEM_SIZE_ALIGNED) ||
 800ab3a:	8afa      	ldrh	r2, [r7, #22]
 800ab3c:	429a      	cmp	r2, r3
 800ab3e:	d004      	beq.n	800ab4a <mem_link_valid+0x52>
      ((mem->prev != rmem_idx) && (pmem->next != rmem_idx)) ||
 800ab40:	68fb      	ldr	r3, [r7, #12]
 800ab42:	881b      	ldrh	r3, [r3, #0]
 800ab44:	8afa      	ldrh	r2, [r7, #22]
 800ab46:	429a      	cmp	r2, r3
 800ab48:	d109      	bne.n	800ab5e <mem_link_valid+0x66>
      ((nmem != ram_end) && (nmem->prev != rmem_idx))) {
 800ab4a:	4b08      	ldr	r3, [pc, #32]	; (800ab6c <mem_link_valid+0x74>)
 800ab4c:	681b      	ldr	r3, [r3, #0]
      ((mem->prev != rmem_idx) && (pmem->next != rmem_idx)) ||
 800ab4e:	693a      	ldr	r2, [r7, #16]
 800ab50:	429a      	cmp	r2, r3
 800ab52:	d006      	beq.n	800ab62 <mem_link_valid+0x6a>
      ((nmem != ram_end) && (nmem->prev != rmem_idx))) {
 800ab54:	693b      	ldr	r3, [r7, #16]
 800ab56:	885b      	ldrh	r3, [r3, #2]
 800ab58:	8afa      	ldrh	r2, [r7, #22]
 800ab5a:	429a      	cmp	r2, r3
 800ab5c:	d001      	beq.n	800ab62 <mem_link_valid+0x6a>
    return 0;
 800ab5e:	2300      	movs	r3, #0
 800ab60:	e000      	b.n	800ab64 <mem_link_valid+0x6c>
  }
  return 1;
 800ab62:	2301      	movs	r3, #1
}
 800ab64:	4618      	mov	r0, r3
 800ab66:	3718      	adds	r7, #24
 800ab68:	46bd      	mov	sp, r7
 800ab6a:	bd80      	pop	{r7, pc}
 800ab6c:	200059ec 	.word	0x200059ec

0800ab70 <mem_free>:
 * @param rmem is the data portion of a struct mem as returned by a previous
 *             call to mem_malloc()
 */
void
mem_free(void *rmem)
{
 800ab70:	b580      	push	{r7, lr}
 800ab72:	b084      	sub	sp, #16
 800ab74:	af00      	add	r7, sp, #0
 800ab76:	6078      	str	r0, [r7, #4]
  struct mem *mem;
  LWIP_MEM_FREE_DECL_PROTECT();

  if (rmem == NULL) {
 800ab78:	687b      	ldr	r3, [r7, #4]
 800ab7a:	2b00      	cmp	r3, #0
 800ab7c:	d04c      	beq.n	800ac18 <mem_free+0xa8>
    LWIP_DEBUGF(MEM_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_SERIOUS, ("mem_free(p == NULL) was called.\n"));
    return;
  }
  if ((((mem_ptr_t)rmem) & (MEM_ALIGNMENT - 1)) != 0) {
 800ab7e:	687b      	ldr	r3, [r7, #4]
 800ab80:	f003 0303 	and.w	r3, r3, #3
 800ab84:	2b00      	cmp	r3, #0
 800ab86:	d007      	beq.n	800ab98 <mem_free+0x28>
    LWIP_MEM_ILLEGAL_FREE("mem_free: sanity check alignment");
 800ab88:	4b25      	ldr	r3, [pc, #148]	; (800ac20 <mem_free+0xb0>)
 800ab8a:	f240 2273 	movw	r2, #627	; 0x273
 800ab8e:	4925      	ldr	r1, [pc, #148]	; (800ac24 <mem_free+0xb4>)
 800ab90:	4825      	ldr	r0, [pc, #148]	; (800ac28 <mem_free+0xb8>)
 800ab92:	f00d fc79 	bl	8018488 <iprintf>
    LWIP_DEBUGF(MEM_DEBUG | LWIP_DBG_LEVEL_SEVERE, ("mem_free: sanity check alignment\n"));
    /* protect mem stats from concurrent access */
    MEM_STATS_INC_LOCKED(illegal);
    return;
 800ab96:	e040      	b.n	800ac1a <mem_free+0xaa>
  }

  /* Get the corresponding struct mem: */
  /* cast through void* to get rid of alignment warnings */
  mem = (struct mem *)(void *)((u8_t *)rmem - (SIZEOF_STRUCT_MEM + MEM_SANITY_OFFSET));
 800ab98:	687b      	ldr	r3, [r7, #4]
 800ab9a:	3b08      	subs	r3, #8
 800ab9c:	60fb      	str	r3, [r7, #12]

  if ((u8_t *)mem < ram || (u8_t *)rmem + MIN_SIZE_ALIGNED > (u8_t *)ram_end) {
 800ab9e:	4b23      	ldr	r3, [pc, #140]	; (800ac2c <mem_free+0xbc>)
 800aba0:	681b      	ldr	r3, [r3, #0]
 800aba2:	68fa      	ldr	r2, [r7, #12]
 800aba4:	429a      	cmp	r2, r3
 800aba6:	d306      	bcc.n	800abb6 <mem_free+0x46>
 800aba8:	687b      	ldr	r3, [r7, #4]
 800abaa:	f103 020c 	add.w	r2, r3, #12
 800abae:	4b20      	ldr	r3, [pc, #128]	; (800ac30 <mem_free+0xc0>)
 800abb0:	681b      	ldr	r3, [r3, #0]
 800abb2:	429a      	cmp	r2, r3
 800abb4:	d907      	bls.n	800abc6 <mem_free+0x56>
    LWIP_MEM_ILLEGAL_FREE("mem_free: illegal memory");
 800abb6:	4b1a      	ldr	r3, [pc, #104]	; (800ac20 <mem_free+0xb0>)
 800abb8:	f240 227f 	movw	r2, #639	; 0x27f
 800abbc:	491d      	ldr	r1, [pc, #116]	; (800ac34 <mem_free+0xc4>)
 800abbe:	481a      	ldr	r0, [pc, #104]	; (800ac28 <mem_free+0xb8>)
 800abc0:	f00d fc62 	bl	8018488 <iprintf>
    LWIP_DEBUGF(MEM_DEBUG | LWIP_DBG_LEVEL_SEVERE, ("mem_free: illegal memory\n"));
    /* protect mem stats from concurrent access */
    MEM_STATS_INC_LOCKED(illegal);
    return;
 800abc4:	e029      	b.n	800ac1a <mem_free+0xaa>
  mem_overflow_check_element(mem);
#endif
  /* protect the heap from concurrent access */
  LWIP_MEM_FREE_PROTECT();
  /* mem has to be in a used state */
  if (!mem->used) {
 800abc6:	68fb      	ldr	r3, [r7, #12]
 800abc8:	791b      	ldrb	r3, [r3, #4]
 800abca:	2b00      	cmp	r3, #0
 800abcc:	d107      	bne.n	800abde <mem_free+0x6e>
    LWIP_MEM_ILLEGAL_FREE("mem_free: illegal memory: double free");
 800abce:	4b14      	ldr	r3, [pc, #80]	; (800ac20 <mem_free+0xb0>)
 800abd0:	f44f 7223 	mov.w	r2, #652	; 0x28c
 800abd4:	4918      	ldr	r1, [pc, #96]	; (800ac38 <mem_free+0xc8>)
 800abd6:	4814      	ldr	r0, [pc, #80]	; (800ac28 <mem_free+0xb8>)
 800abd8:	f00d fc56 	bl	8018488 <iprintf>
    LWIP_MEM_FREE_UNPROTECT();
    LWIP_DEBUGF(MEM_DEBUG | LWIP_DBG_LEVEL_SEVERE, ("mem_free: illegal memory: double free?\n"));
    /* protect mem stats from concurrent access */
    MEM_STATS_INC_LOCKED(illegal);
    return;
 800abdc:	e01d      	b.n	800ac1a <mem_free+0xaa>
  }

  if (!mem_link_valid(mem)) {
 800abde:	68f8      	ldr	r0, [r7, #12]
 800abe0:	f7ff ff8a 	bl	800aaf8 <mem_link_valid>
 800abe4:	4603      	mov	r3, r0
 800abe6:	2b00      	cmp	r3, #0
 800abe8:	d107      	bne.n	800abfa <mem_free+0x8a>
    LWIP_MEM_ILLEGAL_FREE("mem_free: illegal memory: non-linked: double free");
 800abea:	4b0d      	ldr	r3, [pc, #52]	; (800ac20 <mem_free+0xb0>)
 800abec:	f240 2295 	movw	r2, #661	; 0x295
 800abf0:	4912      	ldr	r1, [pc, #72]	; (800ac3c <mem_free+0xcc>)
 800abf2:	480d      	ldr	r0, [pc, #52]	; (800ac28 <mem_free+0xb8>)
 800abf4:	f00d fc48 	bl	8018488 <iprintf>
    LWIP_MEM_FREE_UNPROTECT();
    LWIP_DEBUGF(MEM_DEBUG | LWIP_DBG_LEVEL_SEVERE, ("mem_free: illegal memory: non-linked: double free?\n"));
    /* protect mem stats from concurrent access */
    MEM_STATS_INC_LOCKED(illegal);
    return;
 800abf8:	e00f      	b.n	800ac1a <mem_free+0xaa>
  }

  /* mem is now unused. */
  mem->used = 0;
 800abfa:	68fb      	ldr	r3, [r7, #12]
 800abfc:	2200      	movs	r2, #0
 800abfe:	711a      	strb	r2, [r3, #4]

  if (mem < lfree) {
 800ac00:	4b0f      	ldr	r3, [pc, #60]	; (800ac40 <mem_free+0xd0>)
 800ac02:	681b      	ldr	r3, [r3, #0]
 800ac04:	68fa      	ldr	r2, [r7, #12]
 800ac06:	429a      	cmp	r2, r3
 800ac08:	d202      	bcs.n	800ac10 <mem_free+0xa0>
    /* the newly freed struct is now the lowest */
    lfree = mem;
 800ac0a:	4a0d      	ldr	r2, [pc, #52]	; (800ac40 <mem_free+0xd0>)
 800ac0c:	68fb      	ldr	r3, [r7, #12]
 800ac0e:	6013      	str	r3, [r2, #0]
  }

  MEM_STATS_DEC_USED(used, mem->next - (mem_size_t)(((u8_t *)mem - ram)));

  /* finally, see if prev or next are free also */
  plug_holes(mem);
 800ac10:	68f8      	ldr	r0, [r7, #12]
 800ac12:	f7ff fe93 	bl	800a93c <plug_holes>
 800ac16:	e000      	b.n	800ac1a <mem_free+0xaa>
    return;
 800ac18:	bf00      	nop
  MEM_SANITY();
#if LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT
  mem_free_count = 1;
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */
  LWIP_MEM_FREE_UNPROTECT();
}
 800ac1a:	3710      	adds	r7, #16
 800ac1c:	46bd      	mov	sp, r7
 800ac1e:	bd80      	pop	{r7, pc}
 800ac20:	0801942c 	.word	0x0801942c
 800ac24:	08019500 	.word	0x08019500
 800ac28:	08019474 	.word	0x08019474
 800ac2c:	200059e8 	.word	0x200059e8
 800ac30:	200059ec 	.word	0x200059ec
 800ac34:	08019524 	.word	0x08019524
 800ac38:	08019540 	.word	0x08019540
 800ac3c:	08019568 	.word	0x08019568
 800ac40:	200059f0 	.word	0x200059f0

0800ac44 <mem_trim>:
 *         or NULL if newsize is > old size, in which case rmem is NOT touched
 *         or freed!
 */
void *
mem_trim(void *rmem, mem_size_t new_size)
{
 800ac44:	b580      	push	{r7, lr}
 800ac46:	b088      	sub	sp, #32
 800ac48:	af00      	add	r7, sp, #0
 800ac4a:	6078      	str	r0, [r7, #4]
 800ac4c:	460b      	mov	r3, r1
 800ac4e:	807b      	strh	r3, [r7, #2]
  /* use the FREE_PROTECT here: it protects with sem OR SYS_ARCH_PROTECT */
  LWIP_MEM_FREE_DECL_PROTECT();

  /* Expand the size of the allocated memory region so that we can
     adjust for alignment. */
  newsize = (mem_size_t)LWIP_MEM_ALIGN_SIZE(new_size);
 800ac50:	887b      	ldrh	r3, [r7, #2]
 800ac52:	3303      	adds	r3, #3
 800ac54:	b29b      	uxth	r3, r3
 800ac56:	f023 0303 	bic.w	r3, r3, #3
 800ac5a:	83fb      	strh	r3, [r7, #30]
  if (newsize < MIN_SIZE_ALIGNED) {
 800ac5c:	8bfb      	ldrh	r3, [r7, #30]
 800ac5e:	2b0b      	cmp	r3, #11
 800ac60:	d801      	bhi.n	800ac66 <mem_trim+0x22>
    /* every data block must be at least MIN_SIZE_ALIGNED long */
    newsize = MIN_SIZE_ALIGNED;
 800ac62:	230c      	movs	r3, #12
 800ac64:	83fb      	strh	r3, [r7, #30]
  }
#if MEM_OVERFLOW_CHECK
  newsize += MEM_SANITY_REGION_BEFORE_ALIGNED + MEM_SANITY_REGION_AFTER_ALIGNED;
#endif
  if ((newsize > MEM_SIZE_ALIGNED) || (newsize < new_size)) {
 800ac66:	8bfb      	ldrh	r3, [r7, #30]
 800ac68:	f5b3 6fc8 	cmp.w	r3, #1600	; 0x640
 800ac6c:	d803      	bhi.n	800ac76 <mem_trim+0x32>
 800ac6e:	8bfa      	ldrh	r2, [r7, #30]
 800ac70:	887b      	ldrh	r3, [r7, #2]
 800ac72:	429a      	cmp	r2, r3
 800ac74:	d201      	bcs.n	800ac7a <mem_trim+0x36>
    return NULL;
 800ac76:	2300      	movs	r3, #0
 800ac78:	e0cc      	b.n	800ae14 <mem_trim+0x1d0>
  }

  LWIP_ASSERT("mem_trim: legal memory", (u8_t *)rmem >= (u8_t *)ram &&
 800ac7a:	4b68      	ldr	r3, [pc, #416]	; (800ae1c <mem_trim+0x1d8>)
 800ac7c:	681b      	ldr	r3, [r3, #0]
 800ac7e:	687a      	ldr	r2, [r7, #4]
 800ac80:	429a      	cmp	r2, r3
 800ac82:	d304      	bcc.n	800ac8e <mem_trim+0x4a>
 800ac84:	4b66      	ldr	r3, [pc, #408]	; (800ae20 <mem_trim+0x1dc>)
 800ac86:	681b      	ldr	r3, [r3, #0]
 800ac88:	687a      	ldr	r2, [r7, #4]
 800ac8a:	429a      	cmp	r2, r3
 800ac8c:	d306      	bcc.n	800ac9c <mem_trim+0x58>
 800ac8e:	4b65      	ldr	r3, [pc, #404]	; (800ae24 <mem_trim+0x1e0>)
 800ac90:	f240 22d1 	movw	r2, #721	; 0x2d1
 800ac94:	4964      	ldr	r1, [pc, #400]	; (800ae28 <mem_trim+0x1e4>)
 800ac96:	4865      	ldr	r0, [pc, #404]	; (800ae2c <mem_trim+0x1e8>)
 800ac98:	f00d fbf6 	bl	8018488 <iprintf>
              (u8_t *)rmem < (u8_t *)ram_end);

  if ((u8_t *)rmem < (u8_t *)ram || (u8_t *)rmem >= (u8_t *)ram_end) {
 800ac9c:	4b5f      	ldr	r3, [pc, #380]	; (800ae1c <mem_trim+0x1d8>)
 800ac9e:	681b      	ldr	r3, [r3, #0]
 800aca0:	687a      	ldr	r2, [r7, #4]
 800aca2:	429a      	cmp	r2, r3
 800aca4:	d304      	bcc.n	800acb0 <mem_trim+0x6c>
 800aca6:	4b5e      	ldr	r3, [pc, #376]	; (800ae20 <mem_trim+0x1dc>)
 800aca8:	681b      	ldr	r3, [r3, #0]
 800acaa:	687a      	ldr	r2, [r7, #4]
 800acac:	429a      	cmp	r2, r3
 800acae:	d301      	bcc.n	800acb4 <mem_trim+0x70>
    LWIP_DEBUGF(MEM_DEBUG | LWIP_DBG_LEVEL_SEVERE, ("mem_trim: illegal memory\n"));
    /* protect mem stats from concurrent access */
    MEM_STATS_INC_LOCKED(illegal);
    return rmem;
 800acb0:	687b      	ldr	r3, [r7, #4]
 800acb2:	e0af      	b.n	800ae14 <mem_trim+0x1d0>
  }
  /* Get the corresponding struct mem ... */
  /* cast through void* to get rid of alignment warnings */
  mem = (struct mem *)(void *)((u8_t *)rmem - (SIZEOF_STRUCT_MEM + MEM_SANITY_OFFSET));
 800acb4:	687b      	ldr	r3, [r7, #4]
 800acb6:	3b08      	subs	r3, #8
 800acb8:	61bb      	str	r3, [r7, #24]
#if MEM_OVERFLOW_CHECK
  mem_overflow_check_element(mem);
#endif
  /* ... and its offset pointer */
  ptr = mem_to_ptr(mem);
 800acba:	69b8      	ldr	r0, [r7, #24]
 800acbc:	f7ff fe2c 	bl	800a918 <mem_to_ptr>
 800acc0:	4603      	mov	r3, r0
 800acc2:	82fb      	strh	r3, [r7, #22]

  size = (mem_size_t)((mem_size_t)(mem->next - ptr) - (SIZEOF_STRUCT_MEM + MEM_SANITY_OVERHEAD));
 800acc4:	69bb      	ldr	r3, [r7, #24]
 800acc6:	881a      	ldrh	r2, [r3, #0]
 800acc8:	8afb      	ldrh	r3, [r7, #22]
 800acca:	1ad3      	subs	r3, r2, r3
 800accc:	b29b      	uxth	r3, r3
 800acce:	3b08      	subs	r3, #8
 800acd0:	82bb      	strh	r3, [r7, #20]
  LWIP_ASSERT("mem_trim can only shrink memory", newsize <= size);
 800acd2:	8bfa      	ldrh	r2, [r7, #30]
 800acd4:	8abb      	ldrh	r3, [r7, #20]
 800acd6:	429a      	cmp	r2, r3
 800acd8:	d906      	bls.n	800ace8 <mem_trim+0xa4>
 800acda:	4b52      	ldr	r3, [pc, #328]	; (800ae24 <mem_trim+0x1e0>)
 800acdc:	f44f 7239 	mov.w	r2, #740	; 0x2e4
 800ace0:	4953      	ldr	r1, [pc, #332]	; (800ae30 <mem_trim+0x1ec>)
 800ace2:	4852      	ldr	r0, [pc, #328]	; (800ae2c <mem_trim+0x1e8>)
 800ace4:	f00d fbd0 	bl	8018488 <iprintf>
  if (newsize > size) {
 800ace8:	8bfa      	ldrh	r2, [r7, #30]
 800acea:	8abb      	ldrh	r3, [r7, #20]
 800acec:	429a      	cmp	r2, r3
 800acee:	d901      	bls.n	800acf4 <mem_trim+0xb0>
    /* not supported */
    return NULL;
 800acf0:	2300      	movs	r3, #0
 800acf2:	e08f      	b.n	800ae14 <mem_trim+0x1d0>
  }
  if (newsize == size) {
 800acf4:	8bfa      	ldrh	r2, [r7, #30]
 800acf6:	8abb      	ldrh	r3, [r7, #20]
 800acf8:	429a      	cmp	r2, r3
 800acfa:	d101      	bne.n	800ad00 <mem_trim+0xbc>
    /* No change in size, simply return */
    return rmem;
 800acfc:	687b      	ldr	r3, [r7, #4]
 800acfe:	e089      	b.n	800ae14 <mem_trim+0x1d0>
  }

  /* protect the heap from concurrent access */
  LWIP_MEM_FREE_PROTECT();

  mem2 = ptr_to_mem(mem->next);
 800ad00:	69bb      	ldr	r3, [r7, #24]
 800ad02:	881b      	ldrh	r3, [r3, #0]
 800ad04:	4618      	mov	r0, r3
 800ad06:	f7ff fdf5 	bl	800a8f4 <ptr_to_mem>
 800ad0a:	6138      	str	r0, [r7, #16]
  if (mem2->used == 0) {
 800ad0c:	693b      	ldr	r3, [r7, #16]
 800ad0e:	791b      	ldrb	r3, [r3, #4]
 800ad10:	2b00      	cmp	r3, #0
 800ad12:	d13f      	bne.n	800ad94 <mem_trim+0x150>
    /* The next struct is unused, we can simply move it at little */
    mem_size_t next;
    LWIP_ASSERT("invalid next ptr", mem->next != MEM_SIZE_ALIGNED);
 800ad14:	69bb      	ldr	r3, [r7, #24]
 800ad16:	881b      	ldrh	r3, [r3, #0]
 800ad18:	f5b3 6fc8 	cmp.w	r3, #1600	; 0x640
 800ad1c:	d106      	bne.n	800ad2c <mem_trim+0xe8>
 800ad1e:	4b41      	ldr	r3, [pc, #260]	; (800ae24 <mem_trim+0x1e0>)
 800ad20:	f240 22f5 	movw	r2, #757	; 0x2f5
 800ad24:	4943      	ldr	r1, [pc, #268]	; (800ae34 <mem_trim+0x1f0>)
 800ad26:	4841      	ldr	r0, [pc, #260]	; (800ae2c <mem_trim+0x1e8>)
 800ad28:	f00d fbae 	bl	8018488 <iprintf>
    /* remember the old next pointer */
    next = mem2->next;
 800ad2c:	693b      	ldr	r3, [r7, #16]
 800ad2e:	881b      	ldrh	r3, [r3, #0]
 800ad30:	81bb      	strh	r3, [r7, #12]
    /* create new struct mem which is moved directly after the shrinked mem */
    ptr2 = (mem_size_t)(ptr + SIZEOF_STRUCT_MEM + newsize);
 800ad32:	8afa      	ldrh	r2, [r7, #22]
 800ad34:	8bfb      	ldrh	r3, [r7, #30]
 800ad36:	4413      	add	r3, r2
 800ad38:	b29b      	uxth	r3, r3
 800ad3a:	3308      	adds	r3, #8
 800ad3c:	81fb      	strh	r3, [r7, #14]
    if (lfree == mem2) {
 800ad3e:	4b3e      	ldr	r3, [pc, #248]	; (800ae38 <mem_trim+0x1f4>)
 800ad40:	681b      	ldr	r3, [r3, #0]
 800ad42:	693a      	ldr	r2, [r7, #16]
 800ad44:	429a      	cmp	r2, r3
 800ad46:	d106      	bne.n	800ad56 <mem_trim+0x112>
      lfree = ptr_to_mem(ptr2);
 800ad48:	89fb      	ldrh	r3, [r7, #14]
 800ad4a:	4618      	mov	r0, r3
 800ad4c:	f7ff fdd2 	bl	800a8f4 <ptr_to_mem>
 800ad50:	4603      	mov	r3, r0
 800ad52:	4a39      	ldr	r2, [pc, #228]	; (800ae38 <mem_trim+0x1f4>)
 800ad54:	6013      	str	r3, [r2, #0]
    }
    mem2 = ptr_to_mem(ptr2);
 800ad56:	89fb      	ldrh	r3, [r7, #14]
 800ad58:	4618      	mov	r0, r3
 800ad5a:	f7ff fdcb 	bl	800a8f4 <ptr_to_mem>
 800ad5e:	6138      	str	r0, [r7, #16]
    mem2->used = 0;
 800ad60:	693b      	ldr	r3, [r7, #16]
 800ad62:	2200      	movs	r2, #0
 800ad64:	711a      	strb	r2, [r3, #4]
    /* restore the next pointer */
    mem2->next = next;
 800ad66:	693b      	ldr	r3, [r7, #16]
 800ad68:	89ba      	ldrh	r2, [r7, #12]
 800ad6a:	801a      	strh	r2, [r3, #0]
    /* link it back to mem */
    mem2->prev = ptr;
 800ad6c:	693b      	ldr	r3, [r7, #16]
 800ad6e:	8afa      	ldrh	r2, [r7, #22]
 800ad70:	805a      	strh	r2, [r3, #2]
    /* link mem to it */
    mem->next = ptr2;
 800ad72:	69bb      	ldr	r3, [r7, #24]
 800ad74:	89fa      	ldrh	r2, [r7, #14]
 800ad76:	801a      	strh	r2, [r3, #0]
    /* last thing to restore linked list: as we have moved mem2,
     * let 'mem2->next->prev' point to mem2 again. but only if mem2->next is not
     * the end of the heap */
    if (mem2->next != MEM_SIZE_ALIGNED) {
 800ad78:	693b      	ldr	r3, [r7, #16]
 800ad7a:	881b      	ldrh	r3, [r3, #0]
 800ad7c:	f5b3 6fc8 	cmp.w	r3, #1600	; 0x640
 800ad80:	d047      	beq.n	800ae12 <mem_trim+0x1ce>
      ptr_to_mem(mem2->next)->prev = ptr2;
 800ad82:	693b      	ldr	r3, [r7, #16]
 800ad84:	881b      	ldrh	r3, [r3, #0]
 800ad86:	4618      	mov	r0, r3
 800ad88:	f7ff fdb4 	bl	800a8f4 <ptr_to_mem>
 800ad8c:	4602      	mov	r2, r0
 800ad8e:	89fb      	ldrh	r3, [r7, #14]
 800ad90:	8053      	strh	r3, [r2, #2]
 800ad92:	e03e      	b.n	800ae12 <mem_trim+0x1ce>
    }
    MEM_STATS_DEC_USED(used, (size - newsize));
    /* no need to plug holes, we've already done that */
  } else if (newsize + SIZEOF_STRUCT_MEM + MIN_SIZE_ALIGNED <= size) {
 800ad94:	8bfb      	ldrh	r3, [r7, #30]
 800ad96:	f103 0214 	add.w	r2, r3, #20
 800ad9a:	8abb      	ldrh	r3, [r7, #20]
 800ad9c:	429a      	cmp	r2, r3
 800ad9e:	d838      	bhi.n	800ae12 <mem_trim+0x1ce>
     * Old size ('size') must be big enough to contain at least 'newsize' plus a struct mem
     * ('SIZEOF_STRUCT_MEM') with some data ('MIN_SIZE_ALIGNED').
     * @todo we could leave out MIN_SIZE_ALIGNED. We would create an empty
     *       region that couldn't hold data, but when mem->next gets freed,
     *       the 2 regions would be combined, resulting in more free memory */
    ptr2 = (mem_size_t)(ptr + SIZEOF_STRUCT_MEM + newsize);
 800ada0:	8afa      	ldrh	r2, [r7, #22]
 800ada2:	8bfb      	ldrh	r3, [r7, #30]
 800ada4:	4413      	add	r3, r2
 800ada6:	b29b      	uxth	r3, r3
 800ada8:	3308      	adds	r3, #8
 800adaa:	81fb      	strh	r3, [r7, #14]
    LWIP_ASSERT("invalid next ptr", mem->next != MEM_SIZE_ALIGNED);
 800adac:	69bb      	ldr	r3, [r7, #24]
 800adae:	881b      	ldrh	r3, [r3, #0]
 800adb0:	f5b3 6fc8 	cmp.w	r3, #1600	; 0x640
 800adb4:	d106      	bne.n	800adc4 <mem_trim+0x180>
 800adb6:	4b1b      	ldr	r3, [pc, #108]	; (800ae24 <mem_trim+0x1e0>)
 800adb8:	f240 3216 	movw	r2, #790	; 0x316
 800adbc:	491d      	ldr	r1, [pc, #116]	; (800ae34 <mem_trim+0x1f0>)
 800adbe:	481b      	ldr	r0, [pc, #108]	; (800ae2c <mem_trim+0x1e8>)
 800adc0:	f00d fb62 	bl	8018488 <iprintf>
    mem2 = ptr_to_mem(ptr2);
 800adc4:	89fb      	ldrh	r3, [r7, #14]
 800adc6:	4618      	mov	r0, r3
 800adc8:	f7ff fd94 	bl	800a8f4 <ptr_to_mem>
 800adcc:	6138      	str	r0, [r7, #16]
    if (mem2 < lfree) {
 800adce:	4b1a      	ldr	r3, [pc, #104]	; (800ae38 <mem_trim+0x1f4>)
 800add0:	681b      	ldr	r3, [r3, #0]
 800add2:	693a      	ldr	r2, [r7, #16]
 800add4:	429a      	cmp	r2, r3
 800add6:	d202      	bcs.n	800adde <mem_trim+0x19a>
      lfree = mem2;
 800add8:	4a17      	ldr	r2, [pc, #92]	; (800ae38 <mem_trim+0x1f4>)
 800adda:	693b      	ldr	r3, [r7, #16]
 800addc:	6013      	str	r3, [r2, #0]
    }
    mem2->used = 0;
 800adde:	693b      	ldr	r3, [r7, #16]
 800ade0:	2200      	movs	r2, #0
 800ade2:	711a      	strb	r2, [r3, #4]
    mem2->next = mem->next;
 800ade4:	69bb      	ldr	r3, [r7, #24]
 800ade6:	881a      	ldrh	r2, [r3, #0]
 800ade8:	693b      	ldr	r3, [r7, #16]
 800adea:	801a      	strh	r2, [r3, #0]
    mem2->prev = ptr;
 800adec:	693b      	ldr	r3, [r7, #16]
 800adee:	8afa      	ldrh	r2, [r7, #22]
 800adf0:	805a      	strh	r2, [r3, #2]
    mem->next = ptr2;
 800adf2:	69bb      	ldr	r3, [r7, #24]
 800adf4:	89fa      	ldrh	r2, [r7, #14]
 800adf6:	801a      	strh	r2, [r3, #0]
    if (mem2->next != MEM_SIZE_ALIGNED) {
 800adf8:	693b      	ldr	r3, [r7, #16]
 800adfa:	881b      	ldrh	r3, [r3, #0]
 800adfc:	f5b3 6fc8 	cmp.w	r3, #1600	; 0x640
 800ae00:	d007      	beq.n	800ae12 <mem_trim+0x1ce>
      ptr_to_mem(mem2->next)->prev = ptr2;
 800ae02:	693b      	ldr	r3, [r7, #16]
 800ae04:	881b      	ldrh	r3, [r3, #0]
 800ae06:	4618      	mov	r0, r3
 800ae08:	f7ff fd74 	bl	800a8f4 <ptr_to_mem>
 800ae0c:	4602      	mov	r2, r0
 800ae0e:	89fb      	ldrh	r3, [r7, #14]
 800ae10:	8053      	strh	r3, [r2, #2]
  MEM_SANITY();
#if LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT
  mem_free_count = 1;
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */
  LWIP_MEM_FREE_UNPROTECT();
  return rmem;
 800ae12:	687b      	ldr	r3, [r7, #4]
}
 800ae14:	4618      	mov	r0, r3
 800ae16:	3720      	adds	r7, #32
 800ae18:	46bd      	mov	sp, r7
 800ae1a:	bd80      	pop	{r7, pc}
 800ae1c:	200059e8 	.word	0x200059e8
 800ae20:	200059ec 	.word	0x200059ec
 800ae24:	0801942c 	.word	0x0801942c
 800ae28:	0801959c 	.word	0x0801959c
 800ae2c:	08019474 	.word	0x08019474
 800ae30:	080195b4 	.word	0x080195b4
 800ae34:	080195d4 	.word	0x080195d4
 800ae38:	200059f0 	.word	0x200059f0

0800ae3c <mem_malloc>:
 *
 * Note that the returned value will always be aligned (as defined by MEM_ALIGNMENT).
 */
void *
mem_malloc(mem_size_t size_in)
{
 800ae3c:	b580      	push	{r7, lr}
 800ae3e:	b088      	sub	sp, #32
 800ae40:	af00      	add	r7, sp, #0
 800ae42:	4603      	mov	r3, r0
 800ae44:	80fb      	strh	r3, [r7, #6]
#if LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT
  u8_t local_mem_free_count = 0;
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */
  LWIP_MEM_ALLOC_DECL_PROTECT();

  if (size_in == 0) {
 800ae46:	88fb      	ldrh	r3, [r7, #6]
 800ae48:	2b00      	cmp	r3, #0
 800ae4a:	d101      	bne.n	800ae50 <mem_malloc+0x14>
    return NULL;
 800ae4c:	2300      	movs	r3, #0
 800ae4e:	e0d9      	b.n	800b004 <mem_malloc+0x1c8>
  }

  /* Expand the size of the allocated memory region so that we can
     adjust for alignment. */
  size = (mem_size_t)LWIP_MEM_ALIGN_SIZE(size_in);
 800ae50:	88fb      	ldrh	r3, [r7, #6]
 800ae52:	3303      	adds	r3, #3
 800ae54:	b29b      	uxth	r3, r3
 800ae56:	f023 0303 	bic.w	r3, r3, #3
 800ae5a:	83bb      	strh	r3, [r7, #28]
  if (size < MIN_SIZE_ALIGNED) {
 800ae5c:	8bbb      	ldrh	r3, [r7, #28]
 800ae5e:	2b0b      	cmp	r3, #11
 800ae60:	d801      	bhi.n	800ae66 <mem_malloc+0x2a>
    /* every data block must be at least MIN_SIZE_ALIGNED long */
    size = MIN_SIZE_ALIGNED;
 800ae62:	230c      	movs	r3, #12
 800ae64:	83bb      	strh	r3, [r7, #28]
  }
#if MEM_OVERFLOW_CHECK
  size += MEM_SANITY_REGION_BEFORE_ALIGNED + MEM_SANITY_REGION_AFTER_ALIGNED;
#endif
  if ((size > MEM_SIZE_ALIGNED) || (size < size_in)) {
 800ae66:	8bbb      	ldrh	r3, [r7, #28]
 800ae68:	f5b3 6fc8 	cmp.w	r3, #1600	; 0x640
 800ae6c:	d803      	bhi.n	800ae76 <mem_malloc+0x3a>
 800ae6e:	8bba      	ldrh	r2, [r7, #28]
 800ae70:	88fb      	ldrh	r3, [r7, #6]
 800ae72:	429a      	cmp	r2, r3
 800ae74:	d201      	bcs.n	800ae7a <mem_malloc+0x3e>
    return NULL;
 800ae76:	2300      	movs	r3, #0
 800ae78:	e0c4      	b.n	800b004 <mem_malloc+0x1c8>
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */

    /* Scan through the heap searching for a free block that is big enough,
     * beginning with the lowest free block.
     */
    for (ptr = mem_to_ptr(lfree); ptr < MEM_SIZE_ALIGNED - size;
 800ae7a:	4b64      	ldr	r3, [pc, #400]	; (800b00c <mem_malloc+0x1d0>)
 800ae7c:	681b      	ldr	r3, [r3, #0]
 800ae7e:	4618      	mov	r0, r3
 800ae80:	f7ff fd4a 	bl	800a918 <mem_to_ptr>
 800ae84:	4603      	mov	r3, r0
 800ae86:	83fb      	strh	r3, [r7, #30]
 800ae88:	e0b4      	b.n	800aff4 <mem_malloc+0x1b8>
         ptr = ptr_to_mem(ptr)->next) {
      mem = ptr_to_mem(ptr);
 800ae8a:	8bfb      	ldrh	r3, [r7, #30]
 800ae8c:	4618      	mov	r0, r3
 800ae8e:	f7ff fd31 	bl	800a8f4 <ptr_to_mem>
 800ae92:	6178      	str	r0, [r7, #20]
        local_mem_free_count = 1;
        break;
      }
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */

      if ((!mem->used) &&
 800ae94:	697b      	ldr	r3, [r7, #20]
 800ae96:	791b      	ldrb	r3, [r3, #4]
 800ae98:	2b00      	cmp	r3, #0
 800ae9a:	f040 80a4 	bne.w	800afe6 <mem_malloc+0x1aa>
          (mem->next - (ptr + SIZEOF_STRUCT_MEM)) >= size) {
 800ae9e:	697b      	ldr	r3, [r7, #20]
 800aea0:	881b      	ldrh	r3, [r3, #0]
 800aea2:	461a      	mov	r2, r3
 800aea4:	8bfb      	ldrh	r3, [r7, #30]
 800aea6:	1ad3      	subs	r3, r2, r3
 800aea8:	f1a3 0208 	sub.w	r2, r3, #8
 800aeac:	8bbb      	ldrh	r3, [r7, #28]
      if ((!mem->used) &&
 800aeae:	429a      	cmp	r2, r3
 800aeb0:	f0c0 8099 	bcc.w	800afe6 <mem_malloc+0x1aa>
        /* mem is not used and at least perfect fit is possible:
         * mem->next - (ptr + SIZEOF_STRUCT_MEM) gives us the 'user data size' of mem */

        if (mem->next - (ptr + SIZEOF_STRUCT_MEM) >= (size + SIZEOF_STRUCT_MEM + MIN_SIZE_ALIGNED)) {
 800aeb4:	697b      	ldr	r3, [r7, #20]
 800aeb6:	881b      	ldrh	r3, [r3, #0]
 800aeb8:	461a      	mov	r2, r3
 800aeba:	8bfb      	ldrh	r3, [r7, #30]
 800aebc:	1ad3      	subs	r3, r2, r3
 800aebe:	f1a3 0208 	sub.w	r2, r3, #8
 800aec2:	8bbb      	ldrh	r3, [r7, #28]
 800aec4:	3314      	adds	r3, #20
 800aec6:	429a      	cmp	r2, r3
 800aec8:	d333      	bcc.n	800af32 <mem_malloc+0xf6>
           * struct mem would fit in but no data between mem2 and mem2->next
           * @todo we could leave out MIN_SIZE_ALIGNED. We would create an empty
           *       region that couldn't hold data, but when mem->next gets freed,
           *       the 2 regions would be combined, resulting in more free memory
           */
          ptr2 = (mem_size_t)(ptr + SIZEOF_STRUCT_MEM + size);
 800aeca:	8bfa      	ldrh	r2, [r7, #30]
 800aecc:	8bbb      	ldrh	r3, [r7, #28]
 800aece:	4413      	add	r3, r2
 800aed0:	b29b      	uxth	r3, r3
 800aed2:	3308      	adds	r3, #8
 800aed4:	827b      	strh	r3, [r7, #18]
          LWIP_ASSERT("invalid next ptr",ptr2 != MEM_SIZE_ALIGNED);
 800aed6:	8a7b      	ldrh	r3, [r7, #18]
 800aed8:	f5b3 6fc8 	cmp.w	r3, #1600	; 0x640
 800aedc:	d106      	bne.n	800aeec <mem_malloc+0xb0>
 800aede:	4b4c      	ldr	r3, [pc, #304]	; (800b010 <mem_malloc+0x1d4>)
 800aee0:	f240 3287 	movw	r2, #903	; 0x387
 800aee4:	494b      	ldr	r1, [pc, #300]	; (800b014 <mem_malloc+0x1d8>)
 800aee6:	484c      	ldr	r0, [pc, #304]	; (800b018 <mem_malloc+0x1dc>)
 800aee8:	f00d face 	bl	8018488 <iprintf>
          /* create mem2 struct */
          mem2 = ptr_to_mem(ptr2);
 800aeec:	8a7b      	ldrh	r3, [r7, #18]
 800aeee:	4618      	mov	r0, r3
 800aef0:	f7ff fd00 	bl	800a8f4 <ptr_to_mem>
 800aef4:	60f8      	str	r0, [r7, #12]
          mem2->used = 0;
 800aef6:	68fb      	ldr	r3, [r7, #12]
 800aef8:	2200      	movs	r2, #0
 800aefa:	711a      	strb	r2, [r3, #4]
          mem2->next = mem->next;
 800aefc:	697b      	ldr	r3, [r7, #20]
 800aefe:	881a      	ldrh	r2, [r3, #0]
 800af00:	68fb      	ldr	r3, [r7, #12]
 800af02:	801a      	strh	r2, [r3, #0]
          mem2->prev = ptr;
 800af04:	68fb      	ldr	r3, [r7, #12]
 800af06:	8bfa      	ldrh	r2, [r7, #30]
 800af08:	805a      	strh	r2, [r3, #2]
          /* and insert it between mem and mem->next */
          mem->next = ptr2;
 800af0a:	697b      	ldr	r3, [r7, #20]
 800af0c:	8a7a      	ldrh	r2, [r7, #18]
 800af0e:	801a      	strh	r2, [r3, #0]
          mem->used = 1;
 800af10:	697b      	ldr	r3, [r7, #20]
 800af12:	2201      	movs	r2, #1
 800af14:	711a      	strb	r2, [r3, #4]

          if (mem2->next != MEM_SIZE_ALIGNED) {
 800af16:	68fb      	ldr	r3, [r7, #12]
 800af18:	881b      	ldrh	r3, [r3, #0]
 800af1a:	f5b3 6fc8 	cmp.w	r3, #1600	; 0x640
 800af1e:	d00b      	beq.n	800af38 <mem_malloc+0xfc>
            ptr_to_mem(mem2->next)->prev = ptr2;
 800af20:	68fb      	ldr	r3, [r7, #12]
 800af22:	881b      	ldrh	r3, [r3, #0]
 800af24:	4618      	mov	r0, r3
 800af26:	f7ff fce5 	bl	800a8f4 <ptr_to_mem>
 800af2a:	4602      	mov	r2, r0
 800af2c:	8a7b      	ldrh	r3, [r7, #18]
 800af2e:	8053      	strh	r3, [r2, #2]
 800af30:	e002      	b.n	800af38 <mem_malloc+0xfc>
           * take care of this).
           * -> near fit or exact fit: do not split, no mem2 creation
           * also can't move mem->next directly behind mem, since mem->next
           * will always be used at this point!
           */
          mem->used = 1;
 800af32:	697b      	ldr	r3, [r7, #20]
 800af34:	2201      	movs	r2, #1
 800af36:	711a      	strb	r2, [r3, #4]
          MEM_STATS_INC_USED(used, mem->next - mem_to_ptr(mem));
        }
#if LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT
mem_malloc_adjust_lfree:
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */
        if (mem == lfree) {
 800af38:	4b34      	ldr	r3, [pc, #208]	; (800b00c <mem_malloc+0x1d0>)
 800af3a:	681b      	ldr	r3, [r3, #0]
 800af3c:	697a      	ldr	r2, [r7, #20]
 800af3e:	429a      	cmp	r2, r3
 800af40:	d127      	bne.n	800af92 <mem_malloc+0x156>
          struct mem *cur = lfree;
 800af42:	4b32      	ldr	r3, [pc, #200]	; (800b00c <mem_malloc+0x1d0>)
 800af44:	681b      	ldr	r3, [r3, #0]
 800af46:	61bb      	str	r3, [r7, #24]
          /* Find next free block after mem and update lowest free pointer */
          while (cur->used && cur != ram_end) {
 800af48:	e005      	b.n	800af56 <mem_malloc+0x11a>
              /* If mem_free or mem_trim have run, we have to restart since they
                 could have altered our current struct mem or lfree. */
              goto mem_malloc_adjust_lfree;
            }
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */
            cur = ptr_to_mem(cur->next);
 800af4a:	69bb      	ldr	r3, [r7, #24]
 800af4c:	881b      	ldrh	r3, [r3, #0]
 800af4e:	4618      	mov	r0, r3
 800af50:	f7ff fcd0 	bl	800a8f4 <ptr_to_mem>
 800af54:	61b8      	str	r0, [r7, #24]
          while (cur->used && cur != ram_end) {
 800af56:	69bb      	ldr	r3, [r7, #24]
 800af58:	791b      	ldrb	r3, [r3, #4]
 800af5a:	2b00      	cmp	r3, #0
 800af5c:	d004      	beq.n	800af68 <mem_malloc+0x12c>
 800af5e:	4b2f      	ldr	r3, [pc, #188]	; (800b01c <mem_malloc+0x1e0>)
 800af60:	681b      	ldr	r3, [r3, #0]
 800af62:	69ba      	ldr	r2, [r7, #24]
 800af64:	429a      	cmp	r2, r3
 800af66:	d1f0      	bne.n	800af4a <mem_malloc+0x10e>
          }
          lfree = cur;
 800af68:	4a28      	ldr	r2, [pc, #160]	; (800b00c <mem_malloc+0x1d0>)
 800af6a:	69bb      	ldr	r3, [r7, #24]
 800af6c:	6013      	str	r3, [r2, #0]
          LWIP_ASSERT("mem_malloc: !lfree->used", ((lfree == ram_end) || (!lfree->used)));
 800af6e:	4b27      	ldr	r3, [pc, #156]	; (800b00c <mem_malloc+0x1d0>)
 800af70:	681a      	ldr	r2, [r3, #0]
 800af72:	4b2a      	ldr	r3, [pc, #168]	; (800b01c <mem_malloc+0x1e0>)
 800af74:	681b      	ldr	r3, [r3, #0]
 800af76:	429a      	cmp	r2, r3
 800af78:	d00b      	beq.n	800af92 <mem_malloc+0x156>
 800af7a:	4b24      	ldr	r3, [pc, #144]	; (800b00c <mem_malloc+0x1d0>)
 800af7c:	681b      	ldr	r3, [r3, #0]
 800af7e:	791b      	ldrb	r3, [r3, #4]
 800af80:	2b00      	cmp	r3, #0
 800af82:	d006      	beq.n	800af92 <mem_malloc+0x156>
 800af84:	4b22      	ldr	r3, [pc, #136]	; (800b010 <mem_malloc+0x1d4>)
 800af86:	f240 32b5 	movw	r2, #949	; 0x3b5
 800af8a:	4925      	ldr	r1, [pc, #148]	; (800b020 <mem_malloc+0x1e4>)
 800af8c:	4822      	ldr	r0, [pc, #136]	; (800b018 <mem_malloc+0x1dc>)
 800af8e:	f00d fa7b 	bl	8018488 <iprintf>
        }
        LWIP_MEM_ALLOC_UNPROTECT();
        sys_mutex_unlock(&mem_mutex);
        LWIP_ASSERT("mem_malloc: allocated memory not above ram_end.",
 800af92:	8bba      	ldrh	r2, [r7, #28]
 800af94:	697b      	ldr	r3, [r7, #20]
 800af96:	4413      	add	r3, r2
 800af98:	3308      	adds	r3, #8
 800af9a:	4a20      	ldr	r2, [pc, #128]	; (800b01c <mem_malloc+0x1e0>)
 800af9c:	6812      	ldr	r2, [r2, #0]
 800af9e:	4293      	cmp	r3, r2
 800afa0:	d906      	bls.n	800afb0 <mem_malloc+0x174>
 800afa2:	4b1b      	ldr	r3, [pc, #108]	; (800b010 <mem_malloc+0x1d4>)
 800afa4:	f240 32b9 	movw	r2, #953	; 0x3b9
 800afa8:	491e      	ldr	r1, [pc, #120]	; (800b024 <mem_malloc+0x1e8>)
 800afaa:	481b      	ldr	r0, [pc, #108]	; (800b018 <mem_malloc+0x1dc>)
 800afac:	f00d fa6c 	bl	8018488 <iprintf>
                    (mem_ptr_t)mem + SIZEOF_STRUCT_MEM + size <= (mem_ptr_t)ram_end);
        LWIP_ASSERT("mem_malloc: allocated memory properly aligned.",
 800afb0:	697b      	ldr	r3, [r7, #20]
 800afb2:	f003 0303 	and.w	r3, r3, #3
 800afb6:	2b00      	cmp	r3, #0
 800afb8:	d006      	beq.n	800afc8 <mem_malloc+0x18c>
 800afba:	4b15      	ldr	r3, [pc, #84]	; (800b010 <mem_malloc+0x1d4>)
 800afbc:	f240 32bb 	movw	r2, #955	; 0x3bb
 800afc0:	4919      	ldr	r1, [pc, #100]	; (800b028 <mem_malloc+0x1ec>)
 800afc2:	4815      	ldr	r0, [pc, #84]	; (800b018 <mem_malloc+0x1dc>)
 800afc4:	f00d fa60 	bl	8018488 <iprintf>
                    ((mem_ptr_t)mem + SIZEOF_STRUCT_MEM) % MEM_ALIGNMENT == 0);
        LWIP_ASSERT("mem_malloc: sanity check alignment",
 800afc8:	697b      	ldr	r3, [r7, #20]
 800afca:	f003 0303 	and.w	r3, r3, #3
 800afce:	2b00      	cmp	r3, #0
 800afd0:	d006      	beq.n	800afe0 <mem_malloc+0x1a4>
 800afd2:	4b0f      	ldr	r3, [pc, #60]	; (800b010 <mem_malloc+0x1d4>)
 800afd4:	f240 32bd 	movw	r2, #957	; 0x3bd
 800afd8:	4914      	ldr	r1, [pc, #80]	; (800b02c <mem_malloc+0x1f0>)
 800afda:	480f      	ldr	r0, [pc, #60]	; (800b018 <mem_malloc+0x1dc>)
 800afdc:	f00d fa54 	bl	8018488 <iprintf>

#if MEM_OVERFLOW_CHECK
        mem_overflow_init_element(mem, size_in);
#endif
        MEM_SANITY();
        return (u8_t *)mem + SIZEOF_STRUCT_MEM + MEM_SANITY_OFFSET;
 800afe0:	697b      	ldr	r3, [r7, #20]
 800afe2:	3308      	adds	r3, #8
 800afe4:	e00e      	b.n	800b004 <mem_malloc+0x1c8>
         ptr = ptr_to_mem(ptr)->next) {
 800afe6:	8bfb      	ldrh	r3, [r7, #30]
 800afe8:	4618      	mov	r0, r3
 800afea:	f7ff fc83 	bl	800a8f4 <ptr_to_mem>
 800afee:	4603      	mov	r3, r0
 800aff0:	881b      	ldrh	r3, [r3, #0]
 800aff2:	83fb      	strh	r3, [r7, #30]
    for (ptr = mem_to_ptr(lfree); ptr < MEM_SIZE_ALIGNED - size;
 800aff4:	8bfa      	ldrh	r2, [r7, #30]
 800aff6:	8bbb      	ldrh	r3, [r7, #28]
 800aff8:	f5c3 63c8 	rsb	r3, r3, #1600	; 0x640
 800affc:	429a      	cmp	r2, r3
 800affe:	f4ff af44 	bcc.w	800ae8a <mem_malloc+0x4e>
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */
  MEM_STATS_INC(err);
  LWIP_MEM_ALLOC_UNPROTECT();
  sys_mutex_unlock(&mem_mutex);
  LWIP_DEBUGF(MEM_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("mem_malloc: could not allocate %"S16_F" bytes\n", (s16_t)size));
  return NULL;
 800b002:	2300      	movs	r3, #0
}
 800b004:	4618      	mov	r0, r3
 800b006:	3720      	adds	r7, #32
 800b008:	46bd      	mov	sp, r7
 800b00a:	bd80      	pop	{r7, pc}
 800b00c:	200059f0 	.word	0x200059f0
 800b010:	0801942c 	.word	0x0801942c
 800b014:	080195d4 	.word	0x080195d4
 800b018:	08019474 	.word	0x08019474
 800b01c:	200059ec 	.word	0x200059ec
 800b020:	080195e8 	.word	0x080195e8
 800b024:	08019604 	.word	0x08019604
 800b028:	08019634 	.word	0x08019634
 800b02c:	08019664 	.word	0x08019664

0800b030 <memp_init_pool>:
 *
 * @param desc pool to initialize
 */
void
memp_init_pool(const struct memp_desc *desc)
{
 800b030:	b480      	push	{r7}
 800b032:	b085      	sub	sp, #20
 800b034:	af00      	add	r7, sp, #0
 800b036:	6078      	str	r0, [r7, #4]
  LWIP_UNUSED_ARG(desc);
#else
  int i;
  struct memp *memp;

  *desc->tab = NULL;
 800b038:	687b      	ldr	r3, [r7, #4]
 800b03a:	689b      	ldr	r3, [r3, #8]
 800b03c:	2200      	movs	r2, #0
 800b03e:	601a      	str	r2, [r3, #0]
  memp = (struct memp *)LWIP_MEM_ALIGN(desc->base);
 800b040:	687b      	ldr	r3, [r7, #4]
 800b042:	685b      	ldr	r3, [r3, #4]
 800b044:	3303      	adds	r3, #3
 800b046:	f023 0303 	bic.w	r3, r3, #3
 800b04a:	60bb      	str	r3, [r7, #8]
                                       + MEM_SANITY_REGION_AFTER_ALIGNED
#endif
                                      ));
#endif
  /* create a linked list of memp elements */
  for (i = 0; i < desc->num; ++i) {
 800b04c:	2300      	movs	r3, #0
 800b04e:	60fb      	str	r3, [r7, #12]
 800b050:	e011      	b.n	800b076 <memp_init_pool+0x46>
    memp->next = *desc->tab;
 800b052:	687b      	ldr	r3, [r7, #4]
 800b054:	689b      	ldr	r3, [r3, #8]
 800b056:	681a      	ldr	r2, [r3, #0]
 800b058:	68bb      	ldr	r3, [r7, #8]
 800b05a:	601a      	str	r2, [r3, #0]
    *desc->tab = memp;
 800b05c:	687b      	ldr	r3, [r7, #4]
 800b05e:	689b      	ldr	r3, [r3, #8]
 800b060:	68ba      	ldr	r2, [r7, #8]
 800b062:	601a      	str	r2, [r3, #0]
#if MEMP_OVERFLOW_CHECK
    memp_overflow_init_element(memp, desc);
#endif /* MEMP_OVERFLOW_CHECK */
    /* cast through void* to get rid of alignment warnings */
    memp = (struct memp *)(void *)((u8_t *)memp + MEMP_SIZE + desc->size
 800b064:	687b      	ldr	r3, [r7, #4]
 800b066:	881b      	ldrh	r3, [r3, #0]
 800b068:	461a      	mov	r2, r3
 800b06a:	68bb      	ldr	r3, [r7, #8]
 800b06c:	4413      	add	r3, r2
 800b06e:	60bb      	str	r3, [r7, #8]
  for (i = 0; i < desc->num; ++i) {
 800b070:	68fb      	ldr	r3, [r7, #12]
 800b072:	3301      	adds	r3, #1
 800b074:	60fb      	str	r3, [r7, #12]
 800b076:	687b      	ldr	r3, [r7, #4]
 800b078:	885b      	ldrh	r3, [r3, #2]
 800b07a:	461a      	mov	r2, r3
 800b07c:	68fb      	ldr	r3, [r7, #12]
 800b07e:	4293      	cmp	r3, r2
 800b080:	dbe7      	blt.n	800b052 <memp_init_pool+0x22>
#endif /* !MEMP_MEM_MALLOC */

#if MEMP_STATS && (defined(LWIP_DEBUG) || LWIP_STATS_DISPLAY)
  desc->stats->name  = desc->desc;
#endif /* MEMP_STATS && (defined(LWIP_DEBUG) || LWIP_STATS_DISPLAY) */
}
 800b082:	bf00      	nop
 800b084:	bf00      	nop
 800b086:	3714      	adds	r7, #20
 800b088:	46bd      	mov	sp, r7
 800b08a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b08e:	4770      	bx	lr

0800b090 <memp_init>:
 *
 * Carves out memp_memory into linked lists for each pool-type.
 */
void
memp_init(void)
{
 800b090:	b580      	push	{r7, lr}
 800b092:	b082      	sub	sp, #8
 800b094:	af00      	add	r7, sp, #0
  u16_t i;

  /* for every pool: */
  for (i = 0; i < LWIP_ARRAYSIZE(memp_pools); i++) {
 800b096:	2300      	movs	r3, #0
 800b098:	80fb      	strh	r3, [r7, #6]
 800b09a:	e009      	b.n	800b0b0 <memp_init+0x20>
    memp_init_pool(memp_pools[i]);
 800b09c:	88fb      	ldrh	r3, [r7, #6]
 800b09e:	4a08      	ldr	r2, [pc, #32]	; (800b0c0 <memp_init+0x30>)
 800b0a0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800b0a4:	4618      	mov	r0, r3
 800b0a6:	f7ff ffc3 	bl	800b030 <memp_init_pool>
  for (i = 0; i < LWIP_ARRAYSIZE(memp_pools); i++) {
 800b0aa:	88fb      	ldrh	r3, [r7, #6]
 800b0ac:	3301      	adds	r3, #1
 800b0ae:	80fb      	strh	r3, [r7, #6]
 800b0b0:	88fb      	ldrh	r3, [r7, #6]
 800b0b2:	2b08      	cmp	r3, #8
 800b0b4:	d9f2      	bls.n	800b09c <memp_init+0xc>

#if MEMP_OVERFLOW_CHECK >= 2
  /* check everything a first time to see if it worked */
  memp_overflow_check_all();
#endif /* MEMP_OVERFLOW_CHECK >= 2 */
}
 800b0b6:	bf00      	nop
 800b0b8:	bf00      	nop
 800b0ba:	3708      	adds	r7, #8
 800b0bc:	46bd      	mov	sp, r7
 800b0be:	bd80      	pop	{r7, pc}
 800b0c0:	0801c248 	.word	0x0801c248

0800b0c4 <do_memp_malloc_pool>:
#if !MEMP_OVERFLOW_CHECK
do_memp_malloc_pool(const struct memp_desc *desc)
#else
do_memp_malloc_pool_fn(const struct memp_desc *desc, const char *file, const int line)
#endif
{
 800b0c4:	b580      	push	{r7, lr}
 800b0c6:	b084      	sub	sp, #16
 800b0c8:	af00      	add	r7, sp, #0
 800b0ca:	6078      	str	r0, [r7, #4]
  memp = (struct memp *)mem_malloc(MEMP_SIZE + MEMP_ALIGN_SIZE(desc->size));
  SYS_ARCH_PROTECT(old_level);
#else /* MEMP_MEM_MALLOC */
  SYS_ARCH_PROTECT(old_level);

  memp = *desc->tab;
 800b0cc:	687b      	ldr	r3, [r7, #4]
 800b0ce:	689b      	ldr	r3, [r3, #8]
 800b0d0:	681b      	ldr	r3, [r3, #0]
 800b0d2:	60fb      	str	r3, [r7, #12]
#endif /* MEMP_MEM_MALLOC */

  if (memp != NULL) {
 800b0d4:	68fb      	ldr	r3, [r7, #12]
 800b0d6:	2b00      	cmp	r3, #0
 800b0d8:	d012      	beq.n	800b100 <do_memp_malloc_pool+0x3c>
#if !MEMP_MEM_MALLOC
#if MEMP_OVERFLOW_CHECK == 1
    memp_overflow_check_element(memp, desc);
#endif /* MEMP_OVERFLOW_CHECK */

    *desc->tab = memp->next;
 800b0da:	687b      	ldr	r3, [r7, #4]
 800b0dc:	689b      	ldr	r3, [r3, #8]
 800b0de:	68fa      	ldr	r2, [r7, #12]
 800b0e0:	6812      	ldr	r2, [r2, #0]
 800b0e2:	601a      	str	r2, [r3, #0]
    memp->line = line;
#if MEMP_MEM_MALLOC
    memp_overflow_init_element(memp, desc);
#endif /* MEMP_MEM_MALLOC */
#endif /* MEMP_OVERFLOW_CHECK */
    LWIP_ASSERT("memp_malloc: memp properly aligned",
 800b0e4:	68fb      	ldr	r3, [r7, #12]
 800b0e6:	f003 0303 	and.w	r3, r3, #3
 800b0ea:	2b00      	cmp	r3, #0
 800b0ec:	d006      	beq.n	800b0fc <do_memp_malloc_pool+0x38>
 800b0ee:	4b07      	ldr	r3, [pc, #28]	; (800b10c <do_memp_malloc_pool+0x48>)
 800b0f0:	f44f 728c 	mov.w	r2, #280	; 0x118
 800b0f4:	4906      	ldr	r1, [pc, #24]	; (800b110 <do_memp_malloc_pool+0x4c>)
 800b0f6:	4807      	ldr	r0, [pc, #28]	; (800b114 <do_memp_malloc_pool+0x50>)
 800b0f8:	f00d f9c6 	bl	8018488 <iprintf>
      desc->stats->max = desc->stats->used;
    }
#endif
    SYS_ARCH_UNPROTECT(old_level);
    /* cast through u8_t* to get rid of alignment warnings */
    return ((u8_t *)memp + MEMP_SIZE);
 800b0fc:	68fb      	ldr	r3, [r7, #12]
 800b0fe:	e000      	b.n	800b102 <do_memp_malloc_pool+0x3e>
#endif
    SYS_ARCH_UNPROTECT(old_level);
    LWIP_DEBUGF(MEMP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("memp_malloc: out of memory in pool %s\n", desc->desc));
  }

  return NULL;
 800b100:	2300      	movs	r3, #0
}
 800b102:	4618      	mov	r0, r3
 800b104:	3710      	adds	r7, #16
 800b106:	46bd      	mov	sp, r7
 800b108:	bd80      	pop	{r7, pc}
 800b10a:	bf00      	nop
 800b10c:	08019688 	.word	0x08019688
 800b110:	080196b8 	.word	0x080196b8
 800b114:	080196dc 	.word	0x080196dc

0800b118 <memp_malloc_pool>:
#if !MEMP_OVERFLOW_CHECK
memp_malloc_pool(const struct memp_desc *desc)
#else
memp_malloc_pool_fn(const struct memp_desc *desc, const char *file, const int line)
#endif
{
 800b118:	b580      	push	{r7, lr}
 800b11a:	b082      	sub	sp, #8
 800b11c:	af00      	add	r7, sp, #0
 800b11e:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("invalid pool desc", desc != NULL);
 800b120:	687b      	ldr	r3, [r7, #4]
 800b122:	2b00      	cmp	r3, #0
 800b124:	d106      	bne.n	800b134 <memp_malloc_pool+0x1c>
 800b126:	4b0a      	ldr	r3, [pc, #40]	; (800b150 <memp_malloc_pool+0x38>)
 800b128:	f44f 729e 	mov.w	r2, #316	; 0x13c
 800b12c:	4909      	ldr	r1, [pc, #36]	; (800b154 <memp_malloc_pool+0x3c>)
 800b12e:	480a      	ldr	r0, [pc, #40]	; (800b158 <memp_malloc_pool+0x40>)
 800b130:	f00d f9aa 	bl	8018488 <iprintf>
  if (desc == NULL) {
 800b134:	687b      	ldr	r3, [r7, #4]
 800b136:	2b00      	cmp	r3, #0
 800b138:	d101      	bne.n	800b13e <memp_malloc_pool+0x26>
    return NULL;
 800b13a:	2300      	movs	r3, #0
 800b13c:	e003      	b.n	800b146 <memp_malloc_pool+0x2e>
  }

#if !MEMP_OVERFLOW_CHECK
  return do_memp_malloc_pool(desc);
 800b13e:	6878      	ldr	r0, [r7, #4]
 800b140:	f7ff ffc0 	bl	800b0c4 <do_memp_malloc_pool>
 800b144:	4603      	mov	r3, r0
#else
  return do_memp_malloc_pool_fn(desc, file, line);
#endif
}
 800b146:	4618      	mov	r0, r3
 800b148:	3708      	adds	r7, #8
 800b14a:	46bd      	mov	sp, r7
 800b14c:	bd80      	pop	{r7, pc}
 800b14e:	bf00      	nop
 800b150:	08019688 	.word	0x08019688
 800b154:	08019704 	.word	0x08019704
 800b158:	080196dc 	.word	0x080196dc

0800b15c <memp_malloc>:
#if !MEMP_OVERFLOW_CHECK
memp_malloc(memp_t type)
#else
memp_malloc_fn(memp_t type, const char *file, const int line)
#endif
{
 800b15c:	b580      	push	{r7, lr}
 800b15e:	b084      	sub	sp, #16
 800b160:	af00      	add	r7, sp, #0
 800b162:	4603      	mov	r3, r0
 800b164:	71fb      	strb	r3, [r7, #7]
  void *memp;
  LWIP_ERROR("memp_malloc: type < MEMP_MAX", (type < MEMP_MAX), return NULL;);
 800b166:	79fb      	ldrb	r3, [r7, #7]
 800b168:	2b08      	cmp	r3, #8
 800b16a:	d908      	bls.n	800b17e <memp_malloc+0x22>
 800b16c:	4b0a      	ldr	r3, [pc, #40]	; (800b198 <memp_malloc+0x3c>)
 800b16e:	f240 1257 	movw	r2, #343	; 0x157
 800b172:	490a      	ldr	r1, [pc, #40]	; (800b19c <memp_malloc+0x40>)
 800b174:	480a      	ldr	r0, [pc, #40]	; (800b1a0 <memp_malloc+0x44>)
 800b176:	f00d f987 	bl	8018488 <iprintf>
 800b17a:	2300      	movs	r3, #0
 800b17c:	e008      	b.n	800b190 <memp_malloc+0x34>
#if MEMP_OVERFLOW_CHECK >= 2
  memp_overflow_check_all();
#endif /* MEMP_OVERFLOW_CHECK >= 2 */

#if !MEMP_OVERFLOW_CHECK
  memp = do_memp_malloc_pool(memp_pools[type]);
 800b17e:	79fb      	ldrb	r3, [r7, #7]
 800b180:	4a08      	ldr	r2, [pc, #32]	; (800b1a4 <memp_malloc+0x48>)
 800b182:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800b186:	4618      	mov	r0, r3
 800b188:	f7ff ff9c 	bl	800b0c4 <do_memp_malloc_pool>
 800b18c:	60f8      	str	r0, [r7, #12]
#else
  memp = do_memp_malloc_pool_fn(memp_pools[type], file, line);
#endif

  return memp;
 800b18e:	68fb      	ldr	r3, [r7, #12]
}
 800b190:	4618      	mov	r0, r3
 800b192:	3710      	adds	r7, #16
 800b194:	46bd      	mov	sp, r7
 800b196:	bd80      	pop	{r7, pc}
 800b198:	08019688 	.word	0x08019688
 800b19c:	08019718 	.word	0x08019718
 800b1a0:	080196dc 	.word	0x080196dc
 800b1a4:	0801c248 	.word	0x0801c248

0800b1a8 <do_memp_free_pool>:

static void
do_memp_free_pool(const struct memp_desc *desc, void *mem)
{
 800b1a8:	b580      	push	{r7, lr}
 800b1aa:	b084      	sub	sp, #16
 800b1ac:	af00      	add	r7, sp, #0
 800b1ae:	6078      	str	r0, [r7, #4]
 800b1b0:	6039      	str	r1, [r7, #0]
  struct memp *memp;
  SYS_ARCH_DECL_PROTECT(old_level);

  LWIP_ASSERT("memp_free: mem properly aligned",
 800b1b2:	683b      	ldr	r3, [r7, #0]
 800b1b4:	f003 0303 	and.w	r3, r3, #3
 800b1b8:	2b00      	cmp	r3, #0
 800b1ba:	d006      	beq.n	800b1ca <do_memp_free_pool+0x22>
 800b1bc:	4b0a      	ldr	r3, [pc, #40]	; (800b1e8 <do_memp_free_pool+0x40>)
 800b1be:	f44f 72b6 	mov.w	r2, #364	; 0x16c
 800b1c2:	490a      	ldr	r1, [pc, #40]	; (800b1ec <do_memp_free_pool+0x44>)
 800b1c4:	480a      	ldr	r0, [pc, #40]	; (800b1f0 <do_memp_free_pool+0x48>)
 800b1c6:	f00d f95f 	bl	8018488 <iprintf>
              ((mem_ptr_t)mem % MEM_ALIGNMENT) == 0);

  /* cast through void* to get rid of alignment warnings */
  memp = (struct memp *)(void *)((u8_t *)mem - MEMP_SIZE);
 800b1ca:	683b      	ldr	r3, [r7, #0]
 800b1cc:	60fb      	str	r3, [r7, #12]
#if MEMP_MEM_MALLOC
  LWIP_UNUSED_ARG(desc);
  SYS_ARCH_UNPROTECT(old_level);
  mem_free(memp);
#else /* MEMP_MEM_MALLOC */
  memp->next = *desc->tab;
 800b1ce:	687b      	ldr	r3, [r7, #4]
 800b1d0:	689b      	ldr	r3, [r3, #8]
 800b1d2:	681a      	ldr	r2, [r3, #0]
 800b1d4:	68fb      	ldr	r3, [r7, #12]
 800b1d6:	601a      	str	r2, [r3, #0]
  *desc->tab = memp;
 800b1d8:	687b      	ldr	r3, [r7, #4]
 800b1da:	689b      	ldr	r3, [r3, #8]
 800b1dc:	68fa      	ldr	r2, [r7, #12]
 800b1de:	601a      	str	r2, [r3, #0]
  LWIP_ASSERT("memp sanity", memp_sanity(desc));
#endif /* MEMP_SANITY_CHECK */

  SYS_ARCH_UNPROTECT(old_level);
#endif /* !MEMP_MEM_MALLOC */
}
 800b1e0:	bf00      	nop
 800b1e2:	3710      	adds	r7, #16
 800b1e4:	46bd      	mov	sp, r7
 800b1e6:	bd80      	pop	{r7, pc}
 800b1e8:	08019688 	.word	0x08019688
 800b1ec:	08019738 	.word	0x08019738
 800b1f0:	080196dc 	.word	0x080196dc

0800b1f4 <memp_free_pool>:
 * @param desc the pool where to put mem
 * @param mem the memp element to free
 */
void
memp_free_pool(const struct memp_desc *desc, void *mem)
{
 800b1f4:	b580      	push	{r7, lr}
 800b1f6:	b082      	sub	sp, #8
 800b1f8:	af00      	add	r7, sp, #0
 800b1fa:	6078      	str	r0, [r7, #4]
 800b1fc:	6039      	str	r1, [r7, #0]
  LWIP_ASSERT("invalid pool desc", desc != NULL);
 800b1fe:	687b      	ldr	r3, [r7, #4]
 800b200:	2b00      	cmp	r3, #0
 800b202:	d106      	bne.n	800b212 <memp_free_pool+0x1e>
 800b204:	4b0a      	ldr	r3, [pc, #40]	; (800b230 <memp_free_pool+0x3c>)
 800b206:	f240 1295 	movw	r2, #405	; 0x195
 800b20a:	490a      	ldr	r1, [pc, #40]	; (800b234 <memp_free_pool+0x40>)
 800b20c:	480a      	ldr	r0, [pc, #40]	; (800b238 <memp_free_pool+0x44>)
 800b20e:	f00d f93b 	bl	8018488 <iprintf>
  if ((desc == NULL) || (mem == NULL)) {
 800b212:	687b      	ldr	r3, [r7, #4]
 800b214:	2b00      	cmp	r3, #0
 800b216:	d007      	beq.n	800b228 <memp_free_pool+0x34>
 800b218:	683b      	ldr	r3, [r7, #0]
 800b21a:	2b00      	cmp	r3, #0
 800b21c:	d004      	beq.n	800b228 <memp_free_pool+0x34>
    return;
  }

  do_memp_free_pool(desc, mem);
 800b21e:	6839      	ldr	r1, [r7, #0]
 800b220:	6878      	ldr	r0, [r7, #4]
 800b222:	f7ff ffc1 	bl	800b1a8 <do_memp_free_pool>
 800b226:	e000      	b.n	800b22a <memp_free_pool+0x36>
    return;
 800b228:	bf00      	nop
}
 800b22a:	3708      	adds	r7, #8
 800b22c:	46bd      	mov	sp, r7
 800b22e:	bd80      	pop	{r7, pc}
 800b230:	08019688 	.word	0x08019688
 800b234:	08019704 	.word	0x08019704
 800b238:	080196dc 	.word	0x080196dc

0800b23c <memp_free>:
 * @param type the pool where to put mem
 * @param mem the memp element to free
 */
void
memp_free(memp_t type, void *mem)
{
 800b23c:	b580      	push	{r7, lr}
 800b23e:	b082      	sub	sp, #8
 800b240:	af00      	add	r7, sp, #0
 800b242:	4603      	mov	r3, r0
 800b244:	6039      	str	r1, [r7, #0]
 800b246:	71fb      	strb	r3, [r7, #7]
#ifdef LWIP_HOOK_MEMP_AVAILABLE
  struct memp *old_first;
#endif

  LWIP_ERROR("memp_free: type < MEMP_MAX", (type < MEMP_MAX), return;);
 800b248:	79fb      	ldrb	r3, [r7, #7]
 800b24a:	2b08      	cmp	r3, #8
 800b24c:	d907      	bls.n	800b25e <memp_free+0x22>
 800b24e:	4b0c      	ldr	r3, [pc, #48]	; (800b280 <memp_free+0x44>)
 800b250:	f44f 72d5 	mov.w	r2, #426	; 0x1aa
 800b254:	490b      	ldr	r1, [pc, #44]	; (800b284 <memp_free+0x48>)
 800b256:	480c      	ldr	r0, [pc, #48]	; (800b288 <memp_free+0x4c>)
 800b258:	f00d f916 	bl	8018488 <iprintf>
 800b25c:	e00c      	b.n	800b278 <memp_free+0x3c>

  if (mem == NULL) {
 800b25e:	683b      	ldr	r3, [r7, #0]
 800b260:	2b00      	cmp	r3, #0
 800b262:	d008      	beq.n	800b276 <memp_free+0x3a>

#ifdef LWIP_HOOK_MEMP_AVAILABLE
  old_first = *memp_pools[type]->tab;
#endif

  do_memp_free_pool(memp_pools[type], mem);
 800b264:	79fb      	ldrb	r3, [r7, #7]
 800b266:	4a09      	ldr	r2, [pc, #36]	; (800b28c <memp_free+0x50>)
 800b268:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800b26c:	6839      	ldr	r1, [r7, #0]
 800b26e:	4618      	mov	r0, r3
 800b270:	f7ff ff9a 	bl	800b1a8 <do_memp_free_pool>
 800b274:	e000      	b.n	800b278 <memp_free+0x3c>
    return;
 800b276:	bf00      	nop
#ifdef LWIP_HOOK_MEMP_AVAILABLE
  if (old_first == NULL) {
    LWIP_HOOK_MEMP_AVAILABLE(type);
  }
#endif
}
 800b278:	3708      	adds	r7, #8
 800b27a:	46bd      	mov	sp, r7
 800b27c:	bd80      	pop	{r7, pc}
 800b27e:	bf00      	nop
 800b280:	08019688 	.word	0x08019688
 800b284:	08019758 	.word	0x08019758
 800b288:	080196dc 	.word	0x080196dc
 800b28c:	0801c248 	.word	0x0801c248

0800b290 <netif_init>:
}
#endif /* LWIP_HAVE_LOOPIF */

void
netif_init(void)
{
 800b290:	b480      	push	{r7}
 800b292:	af00      	add	r7, sp, #0

  netif_set_link_up(&loop_netif);
  netif_set_up(&loop_netif);

#endif /* LWIP_HAVE_LOOPIF */
}
 800b294:	bf00      	nop
 800b296:	46bd      	mov	sp, r7
 800b298:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b29c:	4770      	bx	lr
	...

0800b2a0 <netif_add>:
netif_add(struct netif *netif,
#if LWIP_IPV4
          const ip4_addr_t *ipaddr, const ip4_addr_t *netmask, const ip4_addr_t *gw,
#endif /* LWIP_IPV4 */
          void *state, netif_init_fn init, netif_input_fn input)
{
 800b2a0:	b580      	push	{r7, lr}
 800b2a2:	b086      	sub	sp, #24
 800b2a4:	af00      	add	r7, sp, #0
 800b2a6:	60f8      	str	r0, [r7, #12]
 800b2a8:	60b9      	str	r1, [r7, #8]
 800b2aa:	607a      	str	r2, [r7, #4]
 800b2ac:	603b      	str	r3, [r7, #0]
    LWIP_ASSERT("single netif already set", 0);
    return NULL;
  }
#endif

  LWIP_ERROR("netif_add: invalid netif", netif != NULL, return NULL);
 800b2ae:	68fb      	ldr	r3, [r7, #12]
 800b2b0:	2b00      	cmp	r3, #0
 800b2b2:	d108      	bne.n	800b2c6 <netif_add+0x26>
 800b2b4:	4b5b      	ldr	r3, [pc, #364]	; (800b424 <netif_add+0x184>)
 800b2b6:	f240 1227 	movw	r2, #295	; 0x127
 800b2ba:	495b      	ldr	r1, [pc, #364]	; (800b428 <netif_add+0x188>)
 800b2bc:	485b      	ldr	r0, [pc, #364]	; (800b42c <netif_add+0x18c>)
 800b2be:	f00d f8e3 	bl	8018488 <iprintf>
 800b2c2:	2300      	movs	r3, #0
 800b2c4:	e0a9      	b.n	800b41a <netif_add+0x17a>
  LWIP_ERROR("netif_add: No init function given", init != NULL, return NULL);
 800b2c6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b2c8:	2b00      	cmp	r3, #0
 800b2ca:	d108      	bne.n	800b2de <netif_add+0x3e>
 800b2cc:	4b55      	ldr	r3, [pc, #340]	; (800b424 <netif_add+0x184>)
 800b2ce:	f44f 7294 	mov.w	r2, #296	; 0x128
 800b2d2:	4957      	ldr	r1, [pc, #348]	; (800b430 <netif_add+0x190>)
 800b2d4:	4855      	ldr	r0, [pc, #340]	; (800b42c <netif_add+0x18c>)
 800b2d6:	f00d f8d7 	bl	8018488 <iprintf>
 800b2da:	2300      	movs	r3, #0
 800b2dc:	e09d      	b.n	800b41a <netif_add+0x17a>

#if LWIP_IPV4
  if (ipaddr == NULL) {
 800b2de:	68bb      	ldr	r3, [r7, #8]
 800b2e0:	2b00      	cmp	r3, #0
 800b2e2:	d101      	bne.n	800b2e8 <netif_add+0x48>
    ipaddr = ip_2_ip4(IP4_ADDR_ANY);
 800b2e4:	4b53      	ldr	r3, [pc, #332]	; (800b434 <netif_add+0x194>)
 800b2e6:	60bb      	str	r3, [r7, #8]
  }
  if (netmask == NULL) {
 800b2e8:	687b      	ldr	r3, [r7, #4]
 800b2ea:	2b00      	cmp	r3, #0
 800b2ec:	d101      	bne.n	800b2f2 <netif_add+0x52>
    netmask = ip_2_ip4(IP4_ADDR_ANY);
 800b2ee:	4b51      	ldr	r3, [pc, #324]	; (800b434 <netif_add+0x194>)
 800b2f0:	607b      	str	r3, [r7, #4]
  }
  if (gw == NULL) {
 800b2f2:	683b      	ldr	r3, [r7, #0]
 800b2f4:	2b00      	cmp	r3, #0
 800b2f6:	d101      	bne.n	800b2fc <netif_add+0x5c>
    gw = ip_2_ip4(IP4_ADDR_ANY);
 800b2f8:	4b4e      	ldr	r3, [pc, #312]	; (800b434 <netif_add+0x194>)
 800b2fa:	603b      	str	r3, [r7, #0]
  }

  /* reset new interface configuration state */
  ip_addr_set_zero_ip4(&netif->ip_addr);
 800b2fc:	68fb      	ldr	r3, [r7, #12]
 800b2fe:	2200      	movs	r2, #0
 800b300:	605a      	str	r2, [r3, #4]
  ip_addr_set_zero_ip4(&netif->netmask);
 800b302:	68fb      	ldr	r3, [r7, #12]
 800b304:	2200      	movs	r2, #0
 800b306:	609a      	str	r2, [r3, #8]
  ip_addr_set_zero_ip4(&netif->gw);
 800b308:	68fb      	ldr	r3, [r7, #12]
 800b30a:	2200      	movs	r2, #0
 800b30c:	60da      	str	r2, [r3, #12]
  netif->output = netif_null_output_ip4;
 800b30e:	68fb      	ldr	r3, [r7, #12]
 800b310:	4a49      	ldr	r2, [pc, #292]	; (800b438 <netif_add+0x198>)
 800b312:	615a      	str	r2, [r3, #20]
#endif /* LWIP_IPV6_ADDRESS_LIFETIMES */
  }
  netif->output_ip6 = netif_null_output_ip6;
#endif /* LWIP_IPV6 */
  NETIF_SET_CHECKSUM_CTRL(netif, NETIF_CHECKSUM_ENABLE_ALL);
  netif->mtu = 0;
 800b314:	68fb      	ldr	r3, [r7, #12]
 800b316:	2200      	movs	r2, #0
 800b318:	851a      	strh	r2, [r3, #40]	; 0x28
  netif->flags = 0;
 800b31a:	68fb      	ldr	r3, [r7, #12]
 800b31c:	2200      	movs	r2, #0
 800b31e:	f883 2031 	strb.w	r2, [r3, #49]	; 0x31
#ifdef netif_get_client_data
  memset(netif->client_data, 0, sizeof(netif->client_data));
 800b322:	68fb      	ldr	r3, [r7, #12]
 800b324:	3324      	adds	r3, #36	; 0x24
 800b326:	2204      	movs	r2, #4
 800b328:	2100      	movs	r1, #0
 800b32a:	4618      	mov	r0, r3
 800b32c:	f00d f911 	bl	8018552 <memset>
#endif /* LWIP_IPV6 */
#if LWIP_NETIF_STATUS_CALLBACK
  netif->status_callback = NULL;
#endif /* LWIP_NETIF_STATUS_CALLBACK */
#if LWIP_NETIF_LINK_CALLBACK
  netif->link_callback = NULL;
 800b330:	68fb      	ldr	r3, [r7, #12]
 800b332:	2200      	movs	r2, #0
 800b334:	61da      	str	r2, [r3, #28]
  netif->loop_first = NULL;
  netif->loop_last = NULL;
#endif /* ENABLE_LOOPBACK */

  /* remember netif specific state information data */
  netif->state = state;
 800b336:	68fb      	ldr	r3, [r7, #12]
 800b338:	6a3a      	ldr	r2, [r7, #32]
 800b33a:	621a      	str	r2, [r3, #32]
  netif->num = netif_num;
 800b33c:	4b3f      	ldr	r3, [pc, #252]	; (800b43c <netif_add+0x19c>)
 800b33e:	781a      	ldrb	r2, [r3, #0]
 800b340:	68fb      	ldr	r3, [r7, #12]
 800b342:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  netif->input = input;
 800b346:	68fb      	ldr	r3, [r7, #12]
 800b348:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800b34a:	611a      	str	r2, [r3, #16]
#if ENABLE_LOOPBACK && LWIP_LOOPBACK_MAX_PBUFS
  netif->loop_cnt_current = 0;
#endif /* ENABLE_LOOPBACK && LWIP_LOOPBACK_MAX_PBUFS */

#if LWIP_IPV4
  netif_set_addr(netif, ipaddr, netmask, gw);
 800b34c:	683b      	ldr	r3, [r7, #0]
 800b34e:	687a      	ldr	r2, [r7, #4]
 800b350:	68b9      	ldr	r1, [r7, #8]
 800b352:	68f8      	ldr	r0, [r7, #12]
 800b354:	f000 f914 	bl	800b580 <netif_set_addr>
#endif /* LWIP_IPV4 */

  /* call user specified initialization function for netif */
  if (init(netif) != ERR_OK) {
 800b358:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b35a:	68f8      	ldr	r0, [r7, #12]
 800b35c:	4798      	blx	r3
 800b35e:	4603      	mov	r3, r0
 800b360:	2b00      	cmp	r3, #0
 800b362:	d001      	beq.n	800b368 <netif_add+0xc8>
    return NULL;
 800b364:	2300      	movs	r3, #0
 800b366:	e058      	b.n	800b41a <netif_add+0x17a>
     */
  {
    struct netif *netif2;
    int num_netifs;
    do {
      if (netif->num == 255) {
 800b368:	68fb      	ldr	r3, [r7, #12]
 800b36a:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 800b36e:	2bff      	cmp	r3, #255	; 0xff
 800b370:	d103      	bne.n	800b37a <netif_add+0xda>
        netif->num = 0;
 800b372:	68fb      	ldr	r3, [r7, #12]
 800b374:	2200      	movs	r2, #0
 800b376:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      }
      num_netifs = 0;
 800b37a:	2300      	movs	r3, #0
 800b37c:	613b      	str	r3, [r7, #16]
      for (netif2 = netif_list; netif2 != NULL; netif2 = netif2->next) {
 800b37e:	4b30      	ldr	r3, [pc, #192]	; (800b440 <netif_add+0x1a0>)
 800b380:	681b      	ldr	r3, [r3, #0]
 800b382:	617b      	str	r3, [r7, #20]
 800b384:	e02b      	b.n	800b3de <netif_add+0x13e>
        LWIP_ASSERT("netif already added", netif2 != netif);
 800b386:	697a      	ldr	r2, [r7, #20]
 800b388:	68fb      	ldr	r3, [r7, #12]
 800b38a:	429a      	cmp	r2, r3
 800b38c:	d106      	bne.n	800b39c <netif_add+0xfc>
 800b38e:	4b25      	ldr	r3, [pc, #148]	; (800b424 <netif_add+0x184>)
 800b390:	f240 128b 	movw	r2, #395	; 0x18b
 800b394:	492b      	ldr	r1, [pc, #172]	; (800b444 <netif_add+0x1a4>)
 800b396:	4825      	ldr	r0, [pc, #148]	; (800b42c <netif_add+0x18c>)
 800b398:	f00d f876 	bl	8018488 <iprintf>
        num_netifs++;
 800b39c:	693b      	ldr	r3, [r7, #16]
 800b39e:	3301      	adds	r3, #1
 800b3a0:	613b      	str	r3, [r7, #16]
        LWIP_ASSERT("too many netifs, max. supported number is 255", num_netifs <= 255);
 800b3a2:	693b      	ldr	r3, [r7, #16]
 800b3a4:	2bff      	cmp	r3, #255	; 0xff
 800b3a6:	dd06      	ble.n	800b3b6 <netif_add+0x116>
 800b3a8:	4b1e      	ldr	r3, [pc, #120]	; (800b424 <netif_add+0x184>)
 800b3aa:	f240 128d 	movw	r2, #397	; 0x18d
 800b3ae:	4926      	ldr	r1, [pc, #152]	; (800b448 <netif_add+0x1a8>)
 800b3b0:	481e      	ldr	r0, [pc, #120]	; (800b42c <netif_add+0x18c>)
 800b3b2:	f00d f869 	bl	8018488 <iprintf>
        if (netif2->num == netif->num) {
 800b3b6:	697b      	ldr	r3, [r7, #20]
 800b3b8:	f893 2034 	ldrb.w	r2, [r3, #52]	; 0x34
 800b3bc:	68fb      	ldr	r3, [r7, #12]
 800b3be:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 800b3c2:	429a      	cmp	r2, r3
 800b3c4:	d108      	bne.n	800b3d8 <netif_add+0x138>
          netif->num++;
 800b3c6:	68fb      	ldr	r3, [r7, #12]
 800b3c8:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 800b3cc:	3301      	adds	r3, #1
 800b3ce:	b2da      	uxtb	r2, r3
 800b3d0:	68fb      	ldr	r3, [r7, #12]
 800b3d2:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
          break;
 800b3d6:	e005      	b.n	800b3e4 <netif_add+0x144>
      for (netif2 = netif_list; netif2 != NULL; netif2 = netif2->next) {
 800b3d8:	697b      	ldr	r3, [r7, #20]
 800b3da:	681b      	ldr	r3, [r3, #0]
 800b3dc:	617b      	str	r3, [r7, #20]
 800b3de:	697b      	ldr	r3, [r7, #20]
 800b3e0:	2b00      	cmp	r3, #0
 800b3e2:	d1d0      	bne.n	800b386 <netif_add+0xe6>
        }
      }
    } while (netif2 != NULL);
 800b3e4:	697b      	ldr	r3, [r7, #20]
 800b3e6:	2b00      	cmp	r3, #0
 800b3e8:	d1be      	bne.n	800b368 <netif_add+0xc8>
  }
  if (netif->num == 254) {
 800b3ea:	68fb      	ldr	r3, [r7, #12]
 800b3ec:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 800b3f0:	2bfe      	cmp	r3, #254	; 0xfe
 800b3f2:	d103      	bne.n	800b3fc <netif_add+0x15c>
    netif_num = 0;
 800b3f4:	4b11      	ldr	r3, [pc, #68]	; (800b43c <netif_add+0x19c>)
 800b3f6:	2200      	movs	r2, #0
 800b3f8:	701a      	strb	r2, [r3, #0]
 800b3fa:	e006      	b.n	800b40a <netif_add+0x16a>
  } else {
    netif_num = (u8_t)(netif->num + 1);
 800b3fc:	68fb      	ldr	r3, [r7, #12]
 800b3fe:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 800b402:	3301      	adds	r3, #1
 800b404:	b2da      	uxtb	r2, r3
 800b406:	4b0d      	ldr	r3, [pc, #52]	; (800b43c <netif_add+0x19c>)
 800b408:	701a      	strb	r2, [r3, #0]
  }

  /* add this netif to the list */
  netif->next = netif_list;
 800b40a:	4b0d      	ldr	r3, [pc, #52]	; (800b440 <netif_add+0x1a0>)
 800b40c:	681a      	ldr	r2, [r3, #0]
 800b40e:	68fb      	ldr	r3, [r7, #12]
 800b410:	601a      	str	r2, [r3, #0]
  netif_list = netif;
 800b412:	4a0b      	ldr	r2, [pc, #44]	; (800b440 <netif_add+0x1a0>)
 800b414:	68fb      	ldr	r3, [r7, #12]
 800b416:	6013      	str	r3, [r2, #0]
#endif /* LWIP_IPV4 */
  LWIP_DEBUGF(NETIF_DEBUG, ("\n"));

  netif_invoke_ext_callback(netif, LWIP_NSC_NETIF_ADDED, NULL);

  return netif;
 800b418:	68fb      	ldr	r3, [r7, #12]
}
 800b41a:	4618      	mov	r0, r3
 800b41c:	3718      	adds	r7, #24
 800b41e:	46bd      	mov	sp, r7
 800b420:	bd80      	pop	{r7, pc}
 800b422:	bf00      	nop
 800b424:	08019774 	.word	0x08019774
 800b428:	08019808 	.word	0x08019808
 800b42c:	080197c4 	.word	0x080197c4
 800b430:	08019824 	.word	0x08019824
 800b434:	0801c2c4 	.word	0x0801c2c4
 800b438:	0800b863 	.word	0x0800b863
 800b43c:	20008918 	.word	0x20008918
 800b440:	20008910 	.word	0x20008910
 800b444:	08019848 	.word	0x08019848
 800b448:	0801985c 	.word	0x0801985c

0800b44c <netif_do_ip_addr_changed>:

static void
netif_do_ip_addr_changed(const ip_addr_t *old_addr, const ip_addr_t *new_addr)
{
 800b44c:	b580      	push	{r7, lr}
 800b44e:	b082      	sub	sp, #8
 800b450:	af00      	add	r7, sp, #0
 800b452:	6078      	str	r0, [r7, #4]
 800b454:	6039      	str	r1, [r7, #0]
#if LWIP_TCP
  tcp_netif_ip_addr_changed(old_addr, new_addr);
 800b456:	6839      	ldr	r1, [r7, #0]
 800b458:	6878      	ldr	r0, [r7, #4]
 800b45a:	f002 febf 	bl	800e1dc <tcp_netif_ip_addr_changed>
#endif /* LWIP_TCP */
#if LWIP_UDP
  udp_netif_ip_addr_changed(old_addr, new_addr);
 800b45e:	6839      	ldr	r1, [r7, #0]
 800b460:	6878      	ldr	r0, [r7, #4]
 800b462:	f007 ff59 	bl	8013318 <udp_netif_ip_addr_changed>
#endif /* LWIP_UDP */
#if LWIP_RAW
  raw_netif_ip_addr_changed(old_addr, new_addr);
#endif /* LWIP_RAW */
}
 800b466:	bf00      	nop
 800b468:	3708      	adds	r7, #8
 800b46a:	46bd      	mov	sp, r7
 800b46c:	bd80      	pop	{r7, pc}
	...

0800b470 <netif_do_set_ipaddr>:

#if LWIP_IPV4
static int
netif_do_set_ipaddr(struct netif *netif, const ip4_addr_t *ipaddr, ip_addr_t *old_addr)
{
 800b470:	b580      	push	{r7, lr}
 800b472:	b086      	sub	sp, #24
 800b474:	af00      	add	r7, sp, #0
 800b476:	60f8      	str	r0, [r7, #12]
 800b478:	60b9      	str	r1, [r7, #8]
 800b47a:	607a      	str	r2, [r7, #4]
  LWIP_ASSERT("invalid pointer", ipaddr != NULL);
 800b47c:	68bb      	ldr	r3, [r7, #8]
 800b47e:	2b00      	cmp	r3, #0
 800b480:	d106      	bne.n	800b490 <netif_do_set_ipaddr+0x20>
 800b482:	4b1d      	ldr	r3, [pc, #116]	; (800b4f8 <netif_do_set_ipaddr+0x88>)
 800b484:	f240 12cb 	movw	r2, #459	; 0x1cb
 800b488:	491c      	ldr	r1, [pc, #112]	; (800b4fc <netif_do_set_ipaddr+0x8c>)
 800b48a:	481d      	ldr	r0, [pc, #116]	; (800b500 <netif_do_set_ipaddr+0x90>)
 800b48c:	f00c fffc 	bl	8018488 <iprintf>
  LWIP_ASSERT("invalid pointer", old_addr != NULL);
 800b490:	687b      	ldr	r3, [r7, #4]
 800b492:	2b00      	cmp	r3, #0
 800b494:	d106      	bne.n	800b4a4 <netif_do_set_ipaddr+0x34>
 800b496:	4b18      	ldr	r3, [pc, #96]	; (800b4f8 <netif_do_set_ipaddr+0x88>)
 800b498:	f44f 72e6 	mov.w	r2, #460	; 0x1cc
 800b49c:	4917      	ldr	r1, [pc, #92]	; (800b4fc <netif_do_set_ipaddr+0x8c>)
 800b49e:	4818      	ldr	r0, [pc, #96]	; (800b500 <netif_do_set_ipaddr+0x90>)
 800b4a0:	f00c fff2 	bl	8018488 <iprintf>

  /* address is actually being changed? */
  if (ip4_addr_cmp(ipaddr, netif_ip4_addr(netif)) == 0) {
 800b4a4:	68bb      	ldr	r3, [r7, #8]
 800b4a6:	681a      	ldr	r2, [r3, #0]
 800b4a8:	68fb      	ldr	r3, [r7, #12]
 800b4aa:	3304      	adds	r3, #4
 800b4ac:	681b      	ldr	r3, [r3, #0]
 800b4ae:	429a      	cmp	r2, r3
 800b4b0:	d01c      	beq.n	800b4ec <netif_do_set_ipaddr+0x7c>
    ip_addr_t new_addr;
    *ip_2_ip4(&new_addr) = *ipaddr;
 800b4b2:	68bb      	ldr	r3, [r7, #8]
 800b4b4:	681b      	ldr	r3, [r3, #0]
 800b4b6:	617b      	str	r3, [r7, #20]
    IP_SET_TYPE_VAL(new_addr, IPADDR_TYPE_V4);

    ip_addr_copy(*old_addr, *netif_ip_addr4(netif));
 800b4b8:	68fb      	ldr	r3, [r7, #12]
 800b4ba:	3304      	adds	r3, #4
 800b4bc:	681a      	ldr	r2, [r3, #0]
 800b4be:	687b      	ldr	r3, [r7, #4]
 800b4c0:	601a      	str	r2, [r3, #0]

    LWIP_DEBUGF(NETIF_DEBUG | LWIP_DBG_STATE, ("netif_set_ipaddr: netif address being changed\n"));
    netif_do_ip_addr_changed(old_addr, &new_addr);
 800b4c2:	f107 0314 	add.w	r3, r7, #20
 800b4c6:	4619      	mov	r1, r3
 800b4c8:	6878      	ldr	r0, [r7, #4]
 800b4ca:	f7ff ffbf 	bl	800b44c <netif_do_ip_addr_changed>

    mib2_remove_ip4(netif);
    mib2_remove_route_ip4(0, netif);
    /* set new IP address to netif */
    ip4_addr_set(ip_2_ip4(&netif->ip_addr), ipaddr);
 800b4ce:	68bb      	ldr	r3, [r7, #8]
 800b4d0:	2b00      	cmp	r3, #0
 800b4d2:	d002      	beq.n	800b4da <netif_do_set_ipaddr+0x6a>
 800b4d4:	68bb      	ldr	r3, [r7, #8]
 800b4d6:	681b      	ldr	r3, [r3, #0]
 800b4d8:	e000      	b.n	800b4dc <netif_do_set_ipaddr+0x6c>
 800b4da:	2300      	movs	r3, #0
 800b4dc:	68fa      	ldr	r2, [r7, #12]
 800b4de:	6053      	str	r3, [r2, #4]
    IP_SET_TYPE_VAL(netif->ip_addr, IPADDR_TYPE_V4);
    mib2_add_ip4(netif);
    mib2_add_route_ip4(0, netif);

    netif_issue_reports(netif, NETIF_REPORT_TYPE_IPV4);
 800b4e0:	2101      	movs	r1, #1
 800b4e2:	68f8      	ldr	r0, [r7, #12]
 800b4e4:	f000 f8d2 	bl	800b68c <netif_issue_reports>

    NETIF_STATUS_CALLBACK(netif);
    return 1; /* address changed */
 800b4e8:	2301      	movs	r3, #1
 800b4ea:	e000      	b.n	800b4ee <netif_do_set_ipaddr+0x7e>
  }
  return 0; /* address unchanged */
 800b4ec:	2300      	movs	r3, #0
}
 800b4ee:	4618      	mov	r0, r3
 800b4f0:	3718      	adds	r7, #24
 800b4f2:	46bd      	mov	sp, r7
 800b4f4:	bd80      	pop	{r7, pc}
 800b4f6:	bf00      	nop
 800b4f8:	08019774 	.word	0x08019774
 800b4fc:	0801988c 	.word	0x0801988c
 800b500:	080197c4 	.word	0x080197c4

0800b504 <netif_do_set_netmask>:
  }
}

static int
netif_do_set_netmask(struct netif *netif, const ip4_addr_t *netmask, ip_addr_t *old_nm)
{
 800b504:	b480      	push	{r7}
 800b506:	b085      	sub	sp, #20
 800b508:	af00      	add	r7, sp, #0
 800b50a:	60f8      	str	r0, [r7, #12]
 800b50c:	60b9      	str	r1, [r7, #8]
 800b50e:	607a      	str	r2, [r7, #4]
  /* address is actually being changed? */
  if (ip4_addr_cmp(netmask, netif_ip4_netmask(netif)) == 0) {
 800b510:	68bb      	ldr	r3, [r7, #8]
 800b512:	681a      	ldr	r2, [r3, #0]
 800b514:	68fb      	ldr	r3, [r7, #12]
 800b516:	3308      	adds	r3, #8
 800b518:	681b      	ldr	r3, [r3, #0]
 800b51a:	429a      	cmp	r2, r3
 800b51c:	d00a      	beq.n	800b534 <netif_do_set_netmask+0x30>
#else
    LWIP_UNUSED_ARG(old_nm);
#endif
    mib2_remove_route_ip4(0, netif);
    /* set new netmask to netif */
    ip4_addr_set(ip_2_ip4(&netif->netmask), netmask);
 800b51e:	68bb      	ldr	r3, [r7, #8]
 800b520:	2b00      	cmp	r3, #0
 800b522:	d002      	beq.n	800b52a <netif_do_set_netmask+0x26>
 800b524:	68bb      	ldr	r3, [r7, #8]
 800b526:	681b      	ldr	r3, [r3, #0]
 800b528:	e000      	b.n	800b52c <netif_do_set_netmask+0x28>
 800b52a:	2300      	movs	r3, #0
 800b52c:	68fa      	ldr	r2, [r7, #12]
 800b52e:	6093      	str	r3, [r2, #8]
                netif->name[0], netif->name[1],
                ip4_addr1_16(netif_ip4_netmask(netif)),
                ip4_addr2_16(netif_ip4_netmask(netif)),
                ip4_addr3_16(netif_ip4_netmask(netif)),
                ip4_addr4_16(netif_ip4_netmask(netif))));
    return 1; /* netmask changed */
 800b530:	2301      	movs	r3, #1
 800b532:	e000      	b.n	800b536 <netif_do_set_netmask+0x32>
  }
  return 0; /* netmask unchanged */
 800b534:	2300      	movs	r3, #0
}
 800b536:	4618      	mov	r0, r3
 800b538:	3714      	adds	r7, #20
 800b53a:	46bd      	mov	sp, r7
 800b53c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b540:	4770      	bx	lr

0800b542 <netif_do_set_gw>:
  }
}

static int
netif_do_set_gw(struct netif *netif, const ip4_addr_t *gw, ip_addr_t *old_gw)
{
 800b542:	b480      	push	{r7}
 800b544:	b085      	sub	sp, #20
 800b546:	af00      	add	r7, sp, #0
 800b548:	60f8      	str	r0, [r7, #12]
 800b54a:	60b9      	str	r1, [r7, #8]
 800b54c:	607a      	str	r2, [r7, #4]
  /* address is actually being changed? */
  if (ip4_addr_cmp(gw, netif_ip4_gw(netif)) == 0) {
 800b54e:	68bb      	ldr	r3, [r7, #8]
 800b550:	681a      	ldr	r2, [r3, #0]
 800b552:	68fb      	ldr	r3, [r7, #12]
 800b554:	330c      	adds	r3, #12
 800b556:	681b      	ldr	r3, [r3, #0]
 800b558:	429a      	cmp	r2, r3
 800b55a:	d00a      	beq.n	800b572 <netif_do_set_gw+0x30>
    ip_addr_copy(*old_gw, *netif_ip_gw4(netif));
#else
    LWIP_UNUSED_ARG(old_gw);
#endif

    ip4_addr_set(ip_2_ip4(&netif->gw), gw);
 800b55c:	68bb      	ldr	r3, [r7, #8]
 800b55e:	2b00      	cmp	r3, #0
 800b560:	d002      	beq.n	800b568 <netif_do_set_gw+0x26>
 800b562:	68bb      	ldr	r3, [r7, #8]
 800b564:	681b      	ldr	r3, [r3, #0]
 800b566:	e000      	b.n	800b56a <netif_do_set_gw+0x28>
 800b568:	2300      	movs	r3, #0
 800b56a:	68fa      	ldr	r2, [r7, #12]
 800b56c:	60d3      	str	r3, [r2, #12]
                netif->name[0], netif->name[1],
                ip4_addr1_16(netif_ip4_gw(netif)),
                ip4_addr2_16(netif_ip4_gw(netif)),
                ip4_addr3_16(netif_ip4_gw(netif)),
                ip4_addr4_16(netif_ip4_gw(netif))));
    return 1; /* gateway changed */
 800b56e:	2301      	movs	r3, #1
 800b570:	e000      	b.n	800b574 <netif_do_set_gw+0x32>
  }
  return 0; /* gateway unchanged */
 800b572:	2300      	movs	r3, #0
}
 800b574:	4618      	mov	r0, r3
 800b576:	3714      	adds	r7, #20
 800b578:	46bd      	mov	sp, r7
 800b57a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b57e:	4770      	bx	lr

0800b580 <netif_set_addr>:
 * @param gw the new default gateway
 */
void
netif_set_addr(struct netif *netif, const ip4_addr_t *ipaddr, const ip4_addr_t *netmask,
               const ip4_addr_t *gw)
{
 800b580:	b580      	push	{r7, lr}
 800b582:	b088      	sub	sp, #32
 800b584:	af00      	add	r7, sp, #0
 800b586:	60f8      	str	r0, [r7, #12]
 800b588:	60b9      	str	r1, [r7, #8]
 800b58a:	607a      	str	r2, [r7, #4]
 800b58c:	603b      	str	r3, [r7, #0]
  ip_addr_t old_nm_val;
  ip_addr_t old_gw_val;
  ip_addr_t *old_nm = &old_nm_val;
  ip_addr_t *old_gw = &old_gw_val;
#else
  ip_addr_t *old_nm = NULL;
 800b58e:	2300      	movs	r3, #0
 800b590:	61fb      	str	r3, [r7, #28]
  ip_addr_t *old_gw = NULL;
 800b592:	2300      	movs	r3, #0
 800b594:	61bb      	str	r3, [r7, #24]
  int remove;

  LWIP_ASSERT_CORE_LOCKED();

  /* Don't propagate NULL pointer (IPv4 ANY) to subsequent functions */
  if (ipaddr == NULL) {
 800b596:	68bb      	ldr	r3, [r7, #8]
 800b598:	2b00      	cmp	r3, #0
 800b59a:	d101      	bne.n	800b5a0 <netif_set_addr+0x20>
    ipaddr = IP4_ADDR_ANY4;
 800b59c:	4b1c      	ldr	r3, [pc, #112]	; (800b610 <netif_set_addr+0x90>)
 800b59e:	60bb      	str	r3, [r7, #8]
  }
  if (netmask == NULL) {
 800b5a0:	687b      	ldr	r3, [r7, #4]
 800b5a2:	2b00      	cmp	r3, #0
 800b5a4:	d101      	bne.n	800b5aa <netif_set_addr+0x2a>
    netmask = IP4_ADDR_ANY4;
 800b5a6:	4b1a      	ldr	r3, [pc, #104]	; (800b610 <netif_set_addr+0x90>)
 800b5a8:	607b      	str	r3, [r7, #4]
  }
  if (gw == NULL) {
 800b5aa:	683b      	ldr	r3, [r7, #0]
 800b5ac:	2b00      	cmp	r3, #0
 800b5ae:	d101      	bne.n	800b5b4 <netif_set_addr+0x34>
    gw = IP4_ADDR_ANY4;
 800b5b0:	4b17      	ldr	r3, [pc, #92]	; (800b610 <netif_set_addr+0x90>)
 800b5b2:	603b      	str	r3, [r7, #0]
  }

  remove = ip4_addr_isany(ipaddr);
 800b5b4:	68bb      	ldr	r3, [r7, #8]
 800b5b6:	2b00      	cmp	r3, #0
 800b5b8:	d003      	beq.n	800b5c2 <netif_set_addr+0x42>
 800b5ba:	68bb      	ldr	r3, [r7, #8]
 800b5bc:	681b      	ldr	r3, [r3, #0]
 800b5be:	2b00      	cmp	r3, #0
 800b5c0:	d101      	bne.n	800b5c6 <netif_set_addr+0x46>
 800b5c2:	2301      	movs	r3, #1
 800b5c4:	e000      	b.n	800b5c8 <netif_set_addr+0x48>
 800b5c6:	2300      	movs	r3, #0
 800b5c8:	617b      	str	r3, [r7, #20]
  if (remove) {
 800b5ca:	697b      	ldr	r3, [r7, #20]
 800b5cc:	2b00      	cmp	r3, #0
 800b5ce:	d006      	beq.n	800b5de <netif_set_addr+0x5e>
    /* when removing an address, we have to remove it *before* changing netmask/gw
       to ensure that tcp RST segment can be sent correctly */
    if (netif_do_set_ipaddr(netif, ipaddr, &old_addr)) {
 800b5d0:	f107 0310 	add.w	r3, r7, #16
 800b5d4:	461a      	mov	r2, r3
 800b5d6:	68b9      	ldr	r1, [r7, #8]
 800b5d8:	68f8      	ldr	r0, [r7, #12]
 800b5da:	f7ff ff49 	bl	800b470 <netif_do_set_ipaddr>
      change_reason |= LWIP_NSC_IPV4_ADDRESS_CHANGED;
      cb_args.ipv4_changed.old_address = &old_addr;
#endif
    }
  }
  if (netif_do_set_netmask(netif, netmask, old_nm)) {
 800b5de:	69fa      	ldr	r2, [r7, #28]
 800b5e0:	6879      	ldr	r1, [r7, #4]
 800b5e2:	68f8      	ldr	r0, [r7, #12]
 800b5e4:	f7ff ff8e 	bl	800b504 <netif_do_set_netmask>
#if LWIP_NETIF_EXT_STATUS_CALLBACK
    change_reason |= LWIP_NSC_IPV4_NETMASK_CHANGED;
    cb_args.ipv4_changed.old_netmask = old_nm;
#endif
  }
  if (netif_do_set_gw(netif, gw, old_gw)) {
 800b5e8:	69ba      	ldr	r2, [r7, #24]
 800b5ea:	6839      	ldr	r1, [r7, #0]
 800b5ec:	68f8      	ldr	r0, [r7, #12]
 800b5ee:	f7ff ffa8 	bl	800b542 <netif_do_set_gw>
#if LWIP_NETIF_EXT_STATUS_CALLBACK
    change_reason |= LWIP_NSC_IPV4_GATEWAY_CHANGED;
    cb_args.ipv4_changed.old_gw = old_gw;
#endif
  }
  if (!remove) {
 800b5f2:	697b      	ldr	r3, [r7, #20]
 800b5f4:	2b00      	cmp	r3, #0
 800b5f6:	d106      	bne.n	800b606 <netif_set_addr+0x86>
    /* set ipaddr last to ensure netmask/gw have been set when status callback is called */
    if (netif_do_set_ipaddr(netif, ipaddr, &old_addr)) {
 800b5f8:	f107 0310 	add.w	r3, r7, #16
 800b5fc:	461a      	mov	r2, r3
 800b5fe:	68b9      	ldr	r1, [r7, #8]
 800b600:	68f8      	ldr	r0, [r7, #12]
 800b602:	f7ff ff35 	bl	800b470 <netif_do_set_ipaddr>
  if (change_reason != LWIP_NSC_NONE) {
    change_reason |= LWIP_NSC_IPV4_SETTINGS_CHANGED;
    netif_invoke_ext_callback(netif, change_reason, &cb_args);
  }
#endif
}
 800b606:	bf00      	nop
 800b608:	3720      	adds	r7, #32
 800b60a:	46bd      	mov	sp, r7
 800b60c:	bd80      	pop	{r7, pc}
 800b60e:	bf00      	nop
 800b610:	0801c2c4 	.word	0x0801c2c4

0800b614 <netif_set_default>:
 *
 * @param netif the default network interface
 */
void
netif_set_default(struct netif *netif)
{
 800b614:	b480      	push	{r7}
 800b616:	b083      	sub	sp, #12
 800b618:	af00      	add	r7, sp, #0
 800b61a:	6078      	str	r0, [r7, #4]
    mib2_remove_route_ip4(1, netif);
  } else {
    /* install default route */
    mib2_add_route_ip4(1, netif);
  }
  netif_default = netif;
 800b61c:	4a04      	ldr	r2, [pc, #16]	; (800b630 <netif_set_default+0x1c>)
 800b61e:	687b      	ldr	r3, [r7, #4]
 800b620:	6013      	str	r3, [r2, #0]
  LWIP_DEBUGF(NETIF_DEBUG, ("netif: setting default interface %c%c\n",
                            netif ? netif->name[0] : '\'', netif ? netif->name[1] : '\''));
}
 800b622:	bf00      	nop
 800b624:	370c      	adds	r7, #12
 800b626:	46bd      	mov	sp, r7
 800b628:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b62c:	4770      	bx	lr
 800b62e:	bf00      	nop
 800b630:	20008914 	.word	0x20008914

0800b634 <netif_set_up>:
 * Bring an interface up, available for processing
 * traffic.
 */
void
netif_set_up(struct netif *netif)
{
 800b634:	b580      	push	{r7, lr}
 800b636:	b082      	sub	sp, #8
 800b638:	af00      	add	r7, sp, #0
 800b63a:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("netif_set_up: invalid netif", netif != NULL, return);
 800b63c:	687b      	ldr	r3, [r7, #4]
 800b63e:	2b00      	cmp	r3, #0
 800b640:	d107      	bne.n	800b652 <netif_set_up+0x1e>
 800b642:	4b0f      	ldr	r3, [pc, #60]	; (800b680 <netif_set_up+0x4c>)
 800b644:	f44f 7254 	mov.w	r2, #848	; 0x350
 800b648:	490e      	ldr	r1, [pc, #56]	; (800b684 <netif_set_up+0x50>)
 800b64a:	480f      	ldr	r0, [pc, #60]	; (800b688 <netif_set_up+0x54>)
 800b64c:	f00c ff1c 	bl	8018488 <iprintf>
 800b650:	e013      	b.n	800b67a <netif_set_up+0x46>

  if (!(netif->flags & NETIF_FLAG_UP)) {
 800b652:	687b      	ldr	r3, [r7, #4]
 800b654:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 800b658:	f003 0301 	and.w	r3, r3, #1
 800b65c:	2b00      	cmp	r3, #0
 800b65e:	d10c      	bne.n	800b67a <netif_set_up+0x46>
    netif_set_flags(netif, NETIF_FLAG_UP);
 800b660:	687b      	ldr	r3, [r7, #4]
 800b662:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 800b666:	f043 0301 	orr.w	r3, r3, #1
 800b66a:	b2da      	uxtb	r2, r3
 800b66c:	687b      	ldr	r3, [r7, #4]
 800b66e:	f883 2031 	strb.w	r2, [r3, #49]	; 0x31
      args.status_changed.state = 1;
      netif_invoke_ext_callback(netif, LWIP_NSC_STATUS_CHANGED, &args);
    }
#endif

    netif_issue_reports(netif, NETIF_REPORT_TYPE_IPV4 | NETIF_REPORT_TYPE_IPV6);
 800b672:	2103      	movs	r1, #3
 800b674:	6878      	ldr	r0, [r7, #4]
 800b676:	f000 f809 	bl	800b68c <netif_issue_reports>
#if LWIP_IPV6
    nd6_restart_netif(netif);
#endif /* LWIP_IPV6 */
  }
}
 800b67a:	3708      	adds	r7, #8
 800b67c:	46bd      	mov	sp, r7
 800b67e:	bd80      	pop	{r7, pc}
 800b680:	08019774 	.word	0x08019774
 800b684:	080198fc 	.word	0x080198fc
 800b688:	080197c4 	.word	0x080197c4

0800b68c <netif_issue_reports>:

/** Send ARP/IGMP/MLD/RS events, e.g. on link-up/netif-up or addr-change
 */
static void
netif_issue_reports(struct netif *netif, u8_t report_type)
{
 800b68c:	b580      	push	{r7, lr}
 800b68e:	b082      	sub	sp, #8
 800b690:	af00      	add	r7, sp, #0
 800b692:	6078      	str	r0, [r7, #4]
 800b694:	460b      	mov	r3, r1
 800b696:	70fb      	strb	r3, [r7, #3]
  LWIP_ASSERT("netif_issue_reports: invalid netif", netif != NULL);
 800b698:	687b      	ldr	r3, [r7, #4]
 800b69a:	2b00      	cmp	r3, #0
 800b69c:	d106      	bne.n	800b6ac <netif_issue_reports+0x20>
 800b69e:	4b18      	ldr	r3, [pc, #96]	; (800b700 <netif_issue_reports+0x74>)
 800b6a0:	f240 326d 	movw	r2, #877	; 0x36d
 800b6a4:	4917      	ldr	r1, [pc, #92]	; (800b704 <netif_issue_reports+0x78>)
 800b6a6:	4818      	ldr	r0, [pc, #96]	; (800b708 <netif_issue_reports+0x7c>)
 800b6a8:	f00c feee 	bl	8018488 <iprintf>

  /* Only send reports when both link and admin states are up */
  if (!(netif->flags & NETIF_FLAG_LINK_UP) ||
 800b6ac:	687b      	ldr	r3, [r7, #4]
 800b6ae:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 800b6b2:	f003 0304 	and.w	r3, r3, #4
 800b6b6:	2b00      	cmp	r3, #0
 800b6b8:	d01e      	beq.n	800b6f8 <netif_issue_reports+0x6c>
      !(netif->flags & NETIF_FLAG_UP)) {
 800b6ba:	687b      	ldr	r3, [r7, #4]
 800b6bc:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 800b6c0:	f003 0301 	and.w	r3, r3, #1
  if (!(netif->flags & NETIF_FLAG_LINK_UP) ||
 800b6c4:	2b00      	cmp	r3, #0
 800b6c6:	d017      	beq.n	800b6f8 <netif_issue_reports+0x6c>
    return;
  }

#if LWIP_IPV4
  if ((report_type & NETIF_REPORT_TYPE_IPV4) &&
 800b6c8:	78fb      	ldrb	r3, [r7, #3]
 800b6ca:	f003 0301 	and.w	r3, r3, #1
 800b6ce:	2b00      	cmp	r3, #0
 800b6d0:	d013      	beq.n	800b6fa <netif_issue_reports+0x6e>
      !ip4_addr_isany_val(*netif_ip4_addr(netif))) {
 800b6d2:	687b      	ldr	r3, [r7, #4]
 800b6d4:	3304      	adds	r3, #4
 800b6d6:	681b      	ldr	r3, [r3, #0]
  if ((report_type & NETIF_REPORT_TYPE_IPV4) &&
 800b6d8:	2b00      	cmp	r3, #0
 800b6da:	d00e      	beq.n	800b6fa <netif_issue_reports+0x6e>
#if LWIP_ARP
    /* For Ethernet network interfaces, we would like to send a "gratuitous ARP" */
    if (netif->flags & (NETIF_FLAG_ETHARP)) {
 800b6dc:	687b      	ldr	r3, [r7, #4]
 800b6de:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 800b6e2:	f003 0308 	and.w	r3, r3, #8
 800b6e6:	2b00      	cmp	r3, #0
 800b6e8:	d007      	beq.n	800b6fa <netif_issue_reports+0x6e>
      etharp_gratuitous(netif);
 800b6ea:	687b      	ldr	r3, [r7, #4]
 800b6ec:	3304      	adds	r3, #4
 800b6ee:	4619      	mov	r1, r3
 800b6f0:	6878      	ldr	r0, [r7, #4]
 800b6f2:	f00a fc61 	bl	8015fb8 <etharp_request>
 800b6f6:	e000      	b.n	800b6fa <netif_issue_reports+0x6e>
    return;
 800b6f8:	bf00      	nop
    /* send mld memberships */
    mld6_report_groups(netif);
#endif /* LWIP_IPV6_MLD */
  }
#endif /* LWIP_IPV6 */
}
 800b6fa:	3708      	adds	r7, #8
 800b6fc:	46bd      	mov	sp, r7
 800b6fe:	bd80      	pop	{r7, pc}
 800b700:	08019774 	.word	0x08019774
 800b704:	08019918 	.word	0x08019918
 800b708:	080197c4 	.word	0x080197c4

0800b70c <netif_set_down>:
 * @ingroup netif
 * Bring an interface down, disabling any traffic processing.
 */
void
netif_set_down(struct netif *netif)
{
 800b70c:	b580      	push	{r7, lr}
 800b70e:	b082      	sub	sp, #8
 800b710:	af00      	add	r7, sp, #0
 800b712:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("netif_set_down: invalid netif", netif != NULL, return);
 800b714:	687b      	ldr	r3, [r7, #4]
 800b716:	2b00      	cmp	r3, #0
 800b718:	d107      	bne.n	800b72a <netif_set_down+0x1e>
 800b71a:	4b12      	ldr	r3, [pc, #72]	; (800b764 <netif_set_down+0x58>)
 800b71c:	f240 329b 	movw	r2, #923	; 0x39b
 800b720:	4911      	ldr	r1, [pc, #68]	; (800b768 <netif_set_down+0x5c>)
 800b722:	4812      	ldr	r0, [pc, #72]	; (800b76c <netif_set_down+0x60>)
 800b724:	f00c feb0 	bl	8018488 <iprintf>
 800b728:	e019      	b.n	800b75e <netif_set_down+0x52>

  if (netif->flags & NETIF_FLAG_UP) {
 800b72a:	687b      	ldr	r3, [r7, #4]
 800b72c:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 800b730:	f003 0301 	and.w	r3, r3, #1
 800b734:	2b00      	cmp	r3, #0
 800b736:	d012      	beq.n	800b75e <netif_set_down+0x52>
      args.status_changed.state = 0;
      netif_invoke_ext_callback(netif, LWIP_NSC_STATUS_CHANGED, &args);
    }
#endif

    netif_clear_flags(netif, NETIF_FLAG_UP);
 800b738:	687b      	ldr	r3, [r7, #4]
 800b73a:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 800b73e:	f023 0301 	bic.w	r3, r3, #1
 800b742:	b2da      	uxtb	r2, r3
 800b744:	687b      	ldr	r3, [r7, #4]
 800b746:	f883 2031 	strb.w	r2, [r3, #49]	; 0x31
    MIB2_COPY_SYSUPTIME_TO(&netif->ts);

#if LWIP_IPV4 && LWIP_ARP
    if (netif->flags & NETIF_FLAG_ETHARP) {
 800b74a:	687b      	ldr	r3, [r7, #4]
 800b74c:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 800b750:	f003 0308 	and.w	r3, r3, #8
 800b754:	2b00      	cmp	r3, #0
 800b756:	d002      	beq.n	800b75e <netif_set_down+0x52>
      etharp_cleanup_netif(netif);
 800b758:	6878      	ldr	r0, [r7, #4]
 800b75a:	f009 ffe7 	bl	801572c <etharp_cleanup_netif>
    nd6_cleanup_netif(netif);
#endif /* LWIP_IPV6 */

    NETIF_STATUS_CALLBACK(netif);
  }
}
 800b75e:	3708      	adds	r7, #8
 800b760:	46bd      	mov	sp, r7
 800b762:	bd80      	pop	{r7, pc}
 800b764:	08019774 	.word	0x08019774
 800b768:	0801993c 	.word	0x0801993c
 800b76c:	080197c4 	.word	0x080197c4

0800b770 <netif_set_link_up>:
 * @ingroup netif
 * Called by a driver when its link goes up
 */
void
netif_set_link_up(struct netif *netif)
{
 800b770:	b580      	push	{r7, lr}
 800b772:	b082      	sub	sp, #8
 800b774:	af00      	add	r7, sp, #0
 800b776:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("netif_set_link_up: invalid netif", netif != NULL, return);
 800b778:	687b      	ldr	r3, [r7, #4]
 800b77a:	2b00      	cmp	r3, #0
 800b77c:	d107      	bne.n	800b78e <netif_set_link_up+0x1e>
 800b77e:	4b15      	ldr	r3, [pc, #84]	; (800b7d4 <netif_set_link_up+0x64>)
 800b780:	f44f 7278 	mov.w	r2, #992	; 0x3e0
 800b784:	4914      	ldr	r1, [pc, #80]	; (800b7d8 <netif_set_link_up+0x68>)
 800b786:	4815      	ldr	r0, [pc, #84]	; (800b7dc <netif_set_link_up+0x6c>)
 800b788:	f00c fe7e 	bl	8018488 <iprintf>
 800b78c:	e01e      	b.n	800b7cc <netif_set_link_up+0x5c>

  if (!(netif->flags & NETIF_FLAG_LINK_UP)) {
 800b78e:	687b      	ldr	r3, [r7, #4]
 800b790:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 800b794:	f003 0304 	and.w	r3, r3, #4
 800b798:	2b00      	cmp	r3, #0
 800b79a:	d117      	bne.n	800b7cc <netif_set_link_up+0x5c>
    netif_set_flags(netif, NETIF_FLAG_LINK_UP);
 800b79c:	687b      	ldr	r3, [r7, #4]
 800b79e:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 800b7a2:	f043 0304 	orr.w	r3, r3, #4
 800b7a6:	b2da      	uxtb	r2, r3
 800b7a8:	687b      	ldr	r3, [r7, #4]
 800b7aa:	f883 2031 	strb.w	r2, [r3, #49]	; 0x31

#if LWIP_DHCP
    dhcp_network_changed(netif);
 800b7ae:	6878      	ldr	r0, [r7, #4]
 800b7b0:	f008 f9fc 	bl	8013bac <dhcp_network_changed>

#if LWIP_AUTOIP
    autoip_network_changed(netif);
#endif /* LWIP_AUTOIP */

    netif_issue_reports(netif, NETIF_REPORT_TYPE_IPV4 | NETIF_REPORT_TYPE_IPV6);
 800b7b4:	2103      	movs	r1, #3
 800b7b6:	6878      	ldr	r0, [r7, #4]
 800b7b8:	f7ff ff68 	bl	800b68c <netif_issue_reports>
#if LWIP_IPV6
    nd6_restart_netif(netif);
#endif /* LWIP_IPV6 */

    NETIF_LINK_CALLBACK(netif);
 800b7bc:	687b      	ldr	r3, [r7, #4]
 800b7be:	69db      	ldr	r3, [r3, #28]
 800b7c0:	2b00      	cmp	r3, #0
 800b7c2:	d003      	beq.n	800b7cc <netif_set_link_up+0x5c>
 800b7c4:	687b      	ldr	r3, [r7, #4]
 800b7c6:	69db      	ldr	r3, [r3, #28]
 800b7c8:	6878      	ldr	r0, [r7, #4]
 800b7ca:	4798      	blx	r3
      args.link_changed.state = 1;
      netif_invoke_ext_callback(netif, LWIP_NSC_LINK_CHANGED, &args);
    }
#endif
  }
}
 800b7cc:	3708      	adds	r7, #8
 800b7ce:	46bd      	mov	sp, r7
 800b7d0:	bd80      	pop	{r7, pc}
 800b7d2:	bf00      	nop
 800b7d4:	08019774 	.word	0x08019774
 800b7d8:	0801995c 	.word	0x0801995c
 800b7dc:	080197c4 	.word	0x080197c4

0800b7e0 <netif_set_link_down>:
 * @ingroup netif
 * Called by a driver when its link goes down
 */
void
netif_set_link_down(struct netif *netif)
{
 800b7e0:	b580      	push	{r7, lr}
 800b7e2:	b082      	sub	sp, #8
 800b7e4:	af00      	add	r7, sp, #0
 800b7e6:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("netif_set_link_down: invalid netif", netif != NULL, return);
 800b7e8:	687b      	ldr	r3, [r7, #4]
 800b7ea:	2b00      	cmp	r3, #0
 800b7ec:	d107      	bne.n	800b7fe <netif_set_link_down+0x1e>
 800b7ee:	4b11      	ldr	r3, [pc, #68]	; (800b834 <netif_set_link_down+0x54>)
 800b7f0:	f240 4206 	movw	r2, #1030	; 0x406
 800b7f4:	4910      	ldr	r1, [pc, #64]	; (800b838 <netif_set_link_down+0x58>)
 800b7f6:	4811      	ldr	r0, [pc, #68]	; (800b83c <netif_set_link_down+0x5c>)
 800b7f8:	f00c fe46 	bl	8018488 <iprintf>
 800b7fc:	e017      	b.n	800b82e <netif_set_link_down+0x4e>

  if (netif->flags & NETIF_FLAG_LINK_UP) {
 800b7fe:	687b      	ldr	r3, [r7, #4]
 800b800:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 800b804:	f003 0304 	and.w	r3, r3, #4
 800b808:	2b00      	cmp	r3, #0
 800b80a:	d010      	beq.n	800b82e <netif_set_link_down+0x4e>
    netif_clear_flags(netif, NETIF_FLAG_LINK_UP);
 800b80c:	687b      	ldr	r3, [r7, #4]
 800b80e:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 800b812:	f023 0304 	bic.w	r3, r3, #4
 800b816:	b2da      	uxtb	r2, r3
 800b818:	687b      	ldr	r3, [r7, #4]
 800b81a:	f883 2031 	strb.w	r2, [r3, #49]	; 0x31
    NETIF_LINK_CALLBACK(netif);
 800b81e:	687b      	ldr	r3, [r7, #4]
 800b820:	69db      	ldr	r3, [r3, #28]
 800b822:	2b00      	cmp	r3, #0
 800b824:	d003      	beq.n	800b82e <netif_set_link_down+0x4e>
 800b826:	687b      	ldr	r3, [r7, #4]
 800b828:	69db      	ldr	r3, [r3, #28]
 800b82a:	6878      	ldr	r0, [r7, #4]
 800b82c:	4798      	blx	r3
      args.link_changed.state = 0;
      netif_invoke_ext_callback(netif, LWIP_NSC_LINK_CHANGED, &args);
    }
#endif
  }
}
 800b82e:	3708      	adds	r7, #8
 800b830:	46bd      	mov	sp, r7
 800b832:	bd80      	pop	{r7, pc}
 800b834:	08019774 	.word	0x08019774
 800b838:	08019980 	.word	0x08019980
 800b83c:	080197c4 	.word	0x080197c4

0800b840 <netif_set_link_callback>:
 * @ingroup netif
 * Set callback to be called when link is brought up/down
 */
void
netif_set_link_callback(struct netif *netif, netif_status_callback_fn link_callback)
{
 800b840:	b480      	push	{r7}
 800b842:	b083      	sub	sp, #12
 800b844:	af00      	add	r7, sp, #0
 800b846:	6078      	str	r0, [r7, #4]
 800b848:	6039      	str	r1, [r7, #0]
  LWIP_ASSERT_CORE_LOCKED();

  if (netif) {
 800b84a:	687b      	ldr	r3, [r7, #4]
 800b84c:	2b00      	cmp	r3, #0
 800b84e:	d002      	beq.n	800b856 <netif_set_link_callback+0x16>
    netif->link_callback = link_callback;
 800b850:	687b      	ldr	r3, [r7, #4]
 800b852:	683a      	ldr	r2, [r7, #0]
 800b854:	61da      	str	r2, [r3, #28]
  }
}
 800b856:	bf00      	nop
 800b858:	370c      	adds	r7, #12
 800b85a:	46bd      	mov	sp, r7
 800b85c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b860:	4770      	bx	lr

0800b862 <netif_null_output_ip4>:
#if LWIP_IPV4
/** Dummy IPv4 output function for netifs not supporting IPv4
 */
static err_t
netif_null_output_ip4(struct netif *netif, struct pbuf *p, const ip4_addr_t *ipaddr)
{
 800b862:	b480      	push	{r7}
 800b864:	b085      	sub	sp, #20
 800b866:	af00      	add	r7, sp, #0
 800b868:	60f8      	str	r0, [r7, #12]
 800b86a:	60b9      	str	r1, [r7, #8]
 800b86c:	607a      	str	r2, [r7, #4]
  LWIP_UNUSED_ARG(netif);
  LWIP_UNUSED_ARG(p);
  LWIP_UNUSED_ARG(ipaddr);

  return ERR_IF;
 800b86e:	f06f 030b 	mvn.w	r3, #11
}
 800b872:	4618      	mov	r0, r3
 800b874:	3714      	adds	r7, #20
 800b876:	46bd      	mov	sp, r7
 800b878:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b87c:	4770      	bx	lr
	...

0800b880 <netif_get_by_index>:
*
* @param idx index of netif to find
*/
struct netif *
netif_get_by_index(u8_t idx)
{
 800b880:	b480      	push	{r7}
 800b882:	b085      	sub	sp, #20
 800b884:	af00      	add	r7, sp, #0
 800b886:	4603      	mov	r3, r0
 800b888:	71fb      	strb	r3, [r7, #7]
  struct netif *netif;

  LWIP_ASSERT_CORE_LOCKED();

  if (idx != NETIF_NO_INDEX) {
 800b88a:	79fb      	ldrb	r3, [r7, #7]
 800b88c:	2b00      	cmp	r3, #0
 800b88e:	d013      	beq.n	800b8b8 <netif_get_by_index+0x38>
    NETIF_FOREACH(netif) {
 800b890:	4b0d      	ldr	r3, [pc, #52]	; (800b8c8 <netif_get_by_index+0x48>)
 800b892:	681b      	ldr	r3, [r3, #0]
 800b894:	60fb      	str	r3, [r7, #12]
 800b896:	e00c      	b.n	800b8b2 <netif_get_by_index+0x32>
      if (idx == netif_get_index(netif)) {
 800b898:	68fb      	ldr	r3, [r7, #12]
 800b89a:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 800b89e:	3301      	adds	r3, #1
 800b8a0:	b2db      	uxtb	r3, r3
 800b8a2:	79fa      	ldrb	r2, [r7, #7]
 800b8a4:	429a      	cmp	r2, r3
 800b8a6:	d101      	bne.n	800b8ac <netif_get_by_index+0x2c>
        return netif; /* found! */
 800b8a8:	68fb      	ldr	r3, [r7, #12]
 800b8aa:	e006      	b.n	800b8ba <netif_get_by_index+0x3a>
    NETIF_FOREACH(netif) {
 800b8ac:	68fb      	ldr	r3, [r7, #12]
 800b8ae:	681b      	ldr	r3, [r3, #0]
 800b8b0:	60fb      	str	r3, [r7, #12]
 800b8b2:	68fb      	ldr	r3, [r7, #12]
 800b8b4:	2b00      	cmp	r3, #0
 800b8b6:	d1ef      	bne.n	800b898 <netif_get_by_index+0x18>
      }
    }
  }

  return NULL;
 800b8b8:	2300      	movs	r3, #0
}
 800b8ba:	4618      	mov	r0, r3
 800b8bc:	3714      	adds	r7, #20
 800b8be:	46bd      	mov	sp, r7
 800b8c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b8c4:	4770      	bx	lr
 800b8c6:	bf00      	nop
 800b8c8:	20008910 	.word	0x20008910

0800b8cc <pbuf_free_ooseq>:
#if !NO_SYS
static
#endif /* !NO_SYS */
void
pbuf_free_ooseq(void)
{
 800b8cc:	b580      	push	{r7, lr}
 800b8ce:	b082      	sub	sp, #8
 800b8d0:	af00      	add	r7, sp, #0
  struct tcp_pcb *pcb;
  SYS_ARCH_SET(pbuf_free_ooseq_pending, 0);
 800b8d2:	4b0c      	ldr	r3, [pc, #48]	; (800b904 <pbuf_free_ooseq+0x38>)
 800b8d4:	2200      	movs	r2, #0
 800b8d6:	701a      	strb	r2, [r3, #0]

  for (pcb = tcp_active_pcbs; NULL != pcb; pcb = pcb->next) {
 800b8d8:	4b0b      	ldr	r3, [pc, #44]	; (800b908 <pbuf_free_ooseq+0x3c>)
 800b8da:	681b      	ldr	r3, [r3, #0]
 800b8dc:	607b      	str	r3, [r7, #4]
 800b8de:	e00a      	b.n	800b8f6 <pbuf_free_ooseq+0x2a>
    if (pcb->ooseq != NULL) {
 800b8e0:	687b      	ldr	r3, [r7, #4]
 800b8e2:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800b8e4:	2b00      	cmp	r3, #0
 800b8e6:	d003      	beq.n	800b8f0 <pbuf_free_ooseq+0x24>
      /** Free the ooseq pbufs of one PCB only */
      LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_free_ooseq: freeing out-of-sequence pbufs\n"));
      tcp_free_ooseq(pcb);
 800b8e8:	6878      	ldr	r0, [r7, #4]
 800b8ea:	f002 fcb5 	bl	800e258 <tcp_free_ooseq>
      return;
 800b8ee:	e005      	b.n	800b8fc <pbuf_free_ooseq+0x30>
  for (pcb = tcp_active_pcbs; NULL != pcb; pcb = pcb->next) {
 800b8f0:	687b      	ldr	r3, [r7, #4]
 800b8f2:	68db      	ldr	r3, [r3, #12]
 800b8f4:	607b      	str	r3, [r7, #4]
 800b8f6:	687b      	ldr	r3, [r7, #4]
 800b8f8:	2b00      	cmp	r3, #0
 800b8fa:	d1f1      	bne.n	800b8e0 <pbuf_free_ooseq+0x14>
    }
  }
}
 800b8fc:	3708      	adds	r7, #8
 800b8fe:	46bd      	mov	sp, r7
 800b900:	bd80      	pop	{r7, pc}
 800b902:	bf00      	nop
 800b904:	20008919 	.word	0x20008919
 800b908:	20008928 	.word	0x20008928

0800b90c <pbuf_pool_is_empty>:
#endif /* !NO_SYS */

/** Queue a call to pbuf_free_ooseq if not already queued. */
static void
pbuf_pool_is_empty(void)
{
 800b90c:	b480      	push	{r7}
 800b90e:	af00      	add	r7, sp, #0
#ifndef PBUF_POOL_FREE_OOSEQ_QUEUE_CALL
  SYS_ARCH_SET(pbuf_free_ooseq_pending, 1);
 800b910:	4b03      	ldr	r3, [pc, #12]	; (800b920 <pbuf_pool_is_empty+0x14>)
 800b912:	2201      	movs	r2, #1
 800b914:	701a      	strb	r2, [r3, #0]
  if (!queued) {
    /* queue a call to pbuf_free_ooseq if not already queued */
    PBUF_POOL_FREE_OOSEQ_QUEUE_CALL();
  }
#endif /* PBUF_POOL_FREE_OOSEQ_QUEUE_CALL */
}
 800b916:	bf00      	nop
 800b918:	46bd      	mov	sp, r7
 800b91a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b91e:	4770      	bx	lr
 800b920:	20008919 	.word	0x20008919

0800b924 <pbuf_init_alloced_pbuf>:
#endif /* !LWIP_TCP || !TCP_QUEUE_OOSEQ || !PBUF_POOL_FREE_OOSEQ */

/* Initialize members of struct pbuf after allocation */
static void
pbuf_init_alloced_pbuf(struct pbuf *p, void *payload, u16_t tot_len, u16_t len, pbuf_type type, u8_t flags)
{
 800b924:	b480      	push	{r7}
 800b926:	b085      	sub	sp, #20
 800b928:	af00      	add	r7, sp, #0
 800b92a:	60f8      	str	r0, [r7, #12]
 800b92c:	60b9      	str	r1, [r7, #8]
 800b92e:	4611      	mov	r1, r2
 800b930:	461a      	mov	r2, r3
 800b932:	460b      	mov	r3, r1
 800b934:	80fb      	strh	r3, [r7, #6]
 800b936:	4613      	mov	r3, r2
 800b938:	80bb      	strh	r3, [r7, #4]
  p->next = NULL;
 800b93a:	68fb      	ldr	r3, [r7, #12]
 800b93c:	2200      	movs	r2, #0
 800b93e:	601a      	str	r2, [r3, #0]
  p->payload = payload;
 800b940:	68fb      	ldr	r3, [r7, #12]
 800b942:	68ba      	ldr	r2, [r7, #8]
 800b944:	605a      	str	r2, [r3, #4]
  p->tot_len = tot_len;
 800b946:	68fb      	ldr	r3, [r7, #12]
 800b948:	88fa      	ldrh	r2, [r7, #6]
 800b94a:	811a      	strh	r2, [r3, #8]
  p->len = len;
 800b94c:	68fb      	ldr	r3, [r7, #12]
 800b94e:	88ba      	ldrh	r2, [r7, #4]
 800b950:	815a      	strh	r2, [r3, #10]
  p->type_internal = (u8_t)type;
 800b952:	8b3b      	ldrh	r3, [r7, #24]
 800b954:	b2da      	uxtb	r2, r3
 800b956:	68fb      	ldr	r3, [r7, #12]
 800b958:	731a      	strb	r2, [r3, #12]
  p->flags = flags;
 800b95a:	68fb      	ldr	r3, [r7, #12]
 800b95c:	7f3a      	ldrb	r2, [r7, #28]
 800b95e:	735a      	strb	r2, [r3, #13]
  p->ref = 1;
 800b960:	68fb      	ldr	r3, [r7, #12]
 800b962:	2201      	movs	r2, #1
 800b964:	739a      	strb	r2, [r3, #14]
  p->if_idx = NETIF_NO_INDEX;
 800b966:	68fb      	ldr	r3, [r7, #12]
 800b968:	2200      	movs	r2, #0
 800b96a:	73da      	strb	r2, [r3, #15]
}
 800b96c:	bf00      	nop
 800b96e:	3714      	adds	r7, #20
 800b970:	46bd      	mov	sp, r7
 800b972:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b976:	4770      	bx	lr

0800b978 <pbuf_alloc>:
 * @return the allocated pbuf. If multiple pbufs where allocated, this
 * is the first pbuf of a pbuf chain.
 */
struct pbuf *
pbuf_alloc(pbuf_layer layer, u16_t length, pbuf_type type)
{
 800b978:	b580      	push	{r7, lr}
 800b97a:	b08c      	sub	sp, #48	; 0x30
 800b97c:	af02      	add	r7, sp, #8
 800b97e:	4603      	mov	r3, r0
 800b980:	71fb      	strb	r3, [r7, #7]
 800b982:	460b      	mov	r3, r1
 800b984:	80bb      	strh	r3, [r7, #4]
 800b986:	4613      	mov	r3, r2
 800b988:	807b      	strh	r3, [r7, #2]
  struct pbuf *p;
  u16_t offset = (u16_t)layer;
 800b98a:	79fb      	ldrb	r3, [r7, #7]
 800b98c:	847b      	strh	r3, [r7, #34]	; 0x22
  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_alloc(length=%"U16_F")\n", length));

  switch (type) {
 800b98e:	887b      	ldrh	r3, [r7, #2]
 800b990:	f5b3 7f20 	cmp.w	r3, #640	; 0x280
 800b994:	d07f      	beq.n	800ba96 <pbuf_alloc+0x11e>
 800b996:	f5b3 7f20 	cmp.w	r3, #640	; 0x280
 800b99a:	f300 80c8 	bgt.w	800bb2e <pbuf_alloc+0x1b6>
 800b99e:	f5b3 7fc1 	cmp.w	r3, #386	; 0x182
 800b9a2:	d010      	beq.n	800b9c6 <pbuf_alloc+0x4e>
 800b9a4:	f5b3 7fc1 	cmp.w	r3, #386	; 0x182
 800b9a8:	f300 80c1 	bgt.w	800bb2e <pbuf_alloc+0x1b6>
 800b9ac:	2b01      	cmp	r3, #1
 800b9ae:	d002      	beq.n	800b9b6 <pbuf_alloc+0x3e>
 800b9b0:	2b41      	cmp	r3, #65	; 0x41
 800b9b2:	f040 80bc 	bne.w	800bb2e <pbuf_alloc+0x1b6>
    case PBUF_REF: /* fall through */
    case PBUF_ROM:
      p = pbuf_alloc_reference(NULL, length, type);
 800b9b6:	887a      	ldrh	r2, [r7, #2]
 800b9b8:	88bb      	ldrh	r3, [r7, #4]
 800b9ba:	4619      	mov	r1, r3
 800b9bc:	2000      	movs	r0, #0
 800b9be:	f000 f8d1 	bl	800bb64 <pbuf_alloc_reference>
 800b9c2:	6278      	str	r0, [r7, #36]	; 0x24
      break;
 800b9c4:	e0bd      	b.n	800bb42 <pbuf_alloc+0x1ca>
    case PBUF_POOL: {
      struct pbuf *q, *last;
      u16_t rem_len; /* remaining length */
      p = NULL;
 800b9c6:	2300      	movs	r3, #0
 800b9c8:	627b      	str	r3, [r7, #36]	; 0x24
      last = NULL;
 800b9ca:	2300      	movs	r3, #0
 800b9cc:	61fb      	str	r3, [r7, #28]
      rem_len = length;
 800b9ce:	88bb      	ldrh	r3, [r7, #4]
 800b9d0:	837b      	strh	r3, [r7, #26]
      do {
        u16_t qlen;
        q = (struct pbuf *)memp_malloc(MEMP_PBUF_POOL);
 800b9d2:	2008      	movs	r0, #8
 800b9d4:	f7ff fbc2 	bl	800b15c <memp_malloc>
 800b9d8:	6138      	str	r0, [r7, #16]
        if (q == NULL) {
 800b9da:	693b      	ldr	r3, [r7, #16]
 800b9dc:	2b00      	cmp	r3, #0
 800b9de:	d109      	bne.n	800b9f4 <pbuf_alloc+0x7c>
          PBUF_POOL_IS_EMPTY();
 800b9e0:	f7ff ff94 	bl	800b90c <pbuf_pool_is_empty>
          /* free chain so far allocated */
          if (p) {
 800b9e4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b9e6:	2b00      	cmp	r3, #0
 800b9e8:	d002      	beq.n	800b9f0 <pbuf_alloc+0x78>
            pbuf_free(p);
 800b9ea:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800b9ec:	f000 faa8 	bl	800bf40 <pbuf_free>
          }
          /* bail out unsuccessfully */
          return NULL;
 800b9f0:	2300      	movs	r3, #0
 800b9f2:	e0a7      	b.n	800bb44 <pbuf_alloc+0x1cc>
        }
        qlen = LWIP_MIN(rem_len, (u16_t)(PBUF_POOL_BUFSIZE_ALIGNED - LWIP_MEM_ALIGN_SIZE(offset)));
 800b9f4:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 800b9f6:	3303      	adds	r3, #3
 800b9f8:	b29b      	uxth	r3, r3
 800b9fa:	f023 0303 	bic.w	r3, r3, #3
 800b9fe:	b29b      	uxth	r3, r3
 800ba00:	f5c3 7314 	rsb	r3, r3, #592	; 0x250
 800ba04:	b29b      	uxth	r3, r3
 800ba06:	8b7a      	ldrh	r2, [r7, #26]
 800ba08:	4293      	cmp	r3, r2
 800ba0a:	bf28      	it	cs
 800ba0c:	4613      	movcs	r3, r2
 800ba0e:	81fb      	strh	r3, [r7, #14]
        pbuf_init_alloced_pbuf(q, LWIP_MEM_ALIGN((void *)((u8_t *)q + SIZEOF_STRUCT_PBUF + offset)),
 800ba10:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 800ba12:	3310      	adds	r3, #16
 800ba14:	693a      	ldr	r2, [r7, #16]
 800ba16:	4413      	add	r3, r2
 800ba18:	3303      	adds	r3, #3
 800ba1a:	f023 0303 	bic.w	r3, r3, #3
 800ba1e:	4618      	mov	r0, r3
 800ba20:	89f9      	ldrh	r1, [r7, #14]
 800ba22:	8b7a      	ldrh	r2, [r7, #26]
 800ba24:	2300      	movs	r3, #0
 800ba26:	9301      	str	r3, [sp, #4]
 800ba28:	887b      	ldrh	r3, [r7, #2]
 800ba2a:	9300      	str	r3, [sp, #0]
 800ba2c:	460b      	mov	r3, r1
 800ba2e:	4601      	mov	r1, r0
 800ba30:	6938      	ldr	r0, [r7, #16]
 800ba32:	f7ff ff77 	bl	800b924 <pbuf_init_alloced_pbuf>
                               rem_len, qlen, type, 0);
        LWIP_ASSERT("pbuf_alloc: pbuf q->payload properly aligned",
 800ba36:	693b      	ldr	r3, [r7, #16]
 800ba38:	685b      	ldr	r3, [r3, #4]
 800ba3a:	f003 0303 	and.w	r3, r3, #3
 800ba3e:	2b00      	cmp	r3, #0
 800ba40:	d006      	beq.n	800ba50 <pbuf_alloc+0xd8>
 800ba42:	4b42      	ldr	r3, [pc, #264]	; (800bb4c <pbuf_alloc+0x1d4>)
 800ba44:	f44f 7280 	mov.w	r2, #256	; 0x100
 800ba48:	4941      	ldr	r1, [pc, #260]	; (800bb50 <pbuf_alloc+0x1d8>)
 800ba4a:	4842      	ldr	r0, [pc, #264]	; (800bb54 <pbuf_alloc+0x1dc>)
 800ba4c:	f00c fd1c 	bl	8018488 <iprintf>
                    ((mem_ptr_t)q->payload % MEM_ALIGNMENT) == 0);
        LWIP_ASSERT("PBUF_POOL_BUFSIZE must be bigger than MEM_ALIGNMENT",
 800ba50:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 800ba52:	3303      	adds	r3, #3
 800ba54:	f023 0303 	bic.w	r3, r3, #3
 800ba58:	f5b3 7f14 	cmp.w	r3, #592	; 0x250
 800ba5c:	d106      	bne.n	800ba6c <pbuf_alloc+0xf4>
 800ba5e:	4b3b      	ldr	r3, [pc, #236]	; (800bb4c <pbuf_alloc+0x1d4>)
 800ba60:	f44f 7281 	mov.w	r2, #258	; 0x102
 800ba64:	493c      	ldr	r1, [pc, #240]	; (800bb58 <pbuf_alloc+0x1e0>)
 800ba66:	483b      	ldr	r0, [pc, #236]	; (800bb54 <pbuf_alloc+0x1dc>)
 800ba68:	f00c fd0e 	bl	8018488 <iprintf>
                    (PBUF_POOL_BUFSIZE_ALIGNED - LWIP_MEM_ALIGN_SIZE(offset)) > 0 );
        if (p == NULL) {
 800ba6c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ba6e:	2b00      	cmp	r3, #0
 800ba70:	d102      	bne.n	800ba78 <pbuf_alloc+0x100>
          /* allocated head of pbuf chain (into p) */
          p = q;
 800ba72:	693b      	ldr	r3, [r7, #16]
 800ba74:	627b      	str	r3, [r7, #36]	; 0x24
 800ba76:	e002      	b.n	800ba7e <pbuf_alloc+0x106>
        } else {
          /* make previous pbuf point to this pbuf */
          last->next = q;
 800ba78:	69fb      	ldr	r3, [r7, #28]
 800ba7a:	693a      	ldr	r2, [r7, #16]
 800ba7c:	601a      	str	r2, [r3, #0]
        }
        last = q;
 800ba7e:	693b      	ldr	r3, [r7, #16]
 800ba80:	61fb      	str	r3, [r7, #28]
        rem_len = (u16_t)(rem_len - qlen);
 800ba82:	8b7a      	ldrh	r2, [r7, #26]
 800ba84:	89fb      	ldrh	r3, [r7, #14]
 800ba86:	1ad3      	subs	r3, r2, r3
 800ba88:	837b      	strh	r3, [r7, #26]
        offset = 0;
 800ba8a:	2300      	movs	r3, #0
 800ba8c:	847b      	strh	r3, [r7, #34]	; 0x22
      } while (rem_len > 0);
 800ba8e:	8b7b      	ldrh	r3, [r7, #26]
 800ba90:	2b00      	cmp	r3, #0
 800ba92:	d19e      	bne.n	800b9d2 <pbuf_alloc+0x5a>
      break;
 800ba94:	e055      	b.n	800bb42 <pbuf_alloc+0x1ca>
    }
    case PBUF_RAM: {
      u16_t payload_len = (u16_t)(LWIP_MEM_ALIGN_SIZE(offset) + LWIP_MEM_ALIGN_SIZE(length));
 800ba96:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 800ba98:	3303      	adds	r3, #3
 800ba9a:	b29b      	uxth	r3, r3
 800ba9c:	f023 0303 	bic.w	r3, r3, #3
 800baa0:	b29a      	uxth	r2, r3
 800baa2:	88bb      	ldrh	r3, [r7, #4]
 800baa4:	3303      	adds	r3, #3
 800baa6:	b29b      	uxth	r3, r3
 800baa8:	f023 0303 	bic.w	r3, r3, #3
 800baac:	b29b      	uxth	r3, r3
 800baae:	4413      	add	r3, r2
 800bab0:	833b      	strh	r3, [r7, #24]
      mem_size_t alloc_len = (mem_size_t)(LWIP_MEM_ALIGN_SIZE(SIZEOF_STRUCT_PBUF) + payload_len);
 800bab2:	8b3b      	ldrh	r3, [r7, #24]
 800bab4:	3310      	adds	r3, #16
 800bab6:	82fb      	strh	r3, [r7, #22]

      /* bug #50040: Check for integer overflow when calculating alloc_len */
      if ((payload_len < LWIP_MEM_ALIGN_SIZE(length)) ||
 800bab8:	8b3a      	ldrh	r2, [r7, #24]
 800baba:	88bb      	ldrh	r3, [r7, #4]
 800babc:	3303      	adds	r3, #3
 800babe:	f023 0303 	bic.w	r3, r3, #3
 800bac2:	429a      	cmp	r2, r3
 800bac4:	d306      	bcc.n	800bad4 <pbuf_alloc+0x15c>
          (alloc_len < LWIP_MEM_ALIGN_SIZE(length))) {
 800bac6:	8afa      	ldrh	r2, [r7, #22]
 800bac8:	88bb      	ldrh	r3, [r7, #4]
 800baca:	3303      	adds	r3, #3
 800bacc:	f023 0303 	bic.w	r3, r3, #3
      if ((payload_len < LWIP_MEM_ALIGN_SIZE(length)) ||
 800bad0:	429a      	cmp	r2, r3
 800bad2:	d201      	bcs.n	800bad8 <pbuf_alloc+0x160>
        return NULL;
 800bad4:	2300      	movs	r3, #0
 800bad6:	e035      	b.n	800bb44 <pbuf_alloc+0x1cc>
      }

      /* If pbuf is to be allocated in RAM, allocate memory for it. */
      p = (struct pbuf *)mem_malloc(alloc_len);
 800bad8:	8afb      	ldrh	r3, [r7, #22]
 800bada:	4618      	mov	r0, r3
 800badc:	f7ff f9ae 	bl	800ae3c <mem_malloc>
 800bae0:	6278      	str	r0, [r7, #36]	; 0x24
      if (p == NULL) {
 800bae2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800bae4:	2b00      	cmp	r3, #0
 800bae6:	d101      	bne.n	800baec <pbuf_alloc+0x174>
        return NULL;
 800bae8:	2300      	movs	r3, #0
 800baea:	e02b      	b.n	800bb44 <pbuf_alloc+0x1cc>
      }
      pbuf_init_alloced_pbuf(p, LWIP_MEM_ALIGN((void *)((u8_t *)p + SIZEOF_STRUCT_PBUF + offset)),
 800baec:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 800baee:	3310      	adds	r3, #16
 800baf0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800baf2:	4413      	add	r3, r2
 800baf4:	3303      	adds	r3, #3
 800baf6:	f023 0303 	bic.w	r3, r3, #3
 800bafa:	4618      	mov	r0, r3
 800bafc:	88b9      	ldrh	r1, [r7, #4]
 800bafe:	88ba      	ldrh	r2, [r7, #4]
 800bb00:	2300      	movs	r3, #0
 800bb02:	9301      	str	r3, [sp, #4]
 800bb04:	887b      	ldrh	r3, [r7, #2]
 800bb06:	9300      	str	r3, [sp, #0]
 800bb08:	460b      	mov	r3, r1
 800bb0a:	4601      	mov	r1, r0
 800bb0c:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800bb0e:	f7ff ff09 	bl	800b924 <pbuf_init_alloced_pbuf>
                             length, length, type, 0);
      LWIP_ASSERT("pbuf_alloc: pbuf->payload properly aligned",
 800bb12:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800bb14:	685b      	ldr	r3, [r3, #4]
 800bb16:	f003 0303 	and.w	r3, r3, #3
 800bb1a:	2b00      	cmp	r3, #0
 800bb1c:	d010      	beq.n	800bb40 <pbuf_alloc+0x1c8>
 800bb1e:	4b0b      	ldr	r3, [pc, #44]	; (800bb4c <pbuf_alloc+0x1d4>)
 800bb20:	f44f 7291 	mov.w	r2, #290	; 0x122
 800bb24:	490d      	ldr	r1, [pc, #52]	; (800bb5c <pbuf_alloc+0x1e4>)
 800bb26:	480b      	ldr	r0, [pc, #44]	; (800bb54 <pbuf_alloc+0x1dc>)
 800bb28:	f00c fcae 	bl	8018488 <iprintf>
                  ((mem_ptr_t)p->payload % MEM_ALIGNMENT) == 0);
      break;
 800bb2c:	e008      	b.n	800bb40 <pbuf_alloc+0x1c8>
    }
    default:
      LWIP_ASSERT("pbuf_alloc: erroneous type", 0);
 800bb2e:	4b07      	ldr	r3, [pc, #28]	; (800bb4c <pbuf_alloc+0x1d4>)
 800bb30:	f240 1227 	movw	r2, #295	; 0x127
 800bb34:	490a      	ldr	r1, [pc, #40]	; (800bb60 <pbuf_alloc+0x1e8>)
 800bb36:	4807      	ldr	r0, [pc, #28]	; (800bb54 <pbuf_alloc+0x1dc>)
 800bb38:	f00c fca6 	bl	8018488 <iprintf>
      return NULL;
 800bb3c:	2300      	movs	r3, #0
 800bb3e:	e001      	b.n	800bb44 <pbuf_alloc+0x1cc>
      break;
 800bb40:	bf00      	nop
  }
  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_alloc(length=%"U16_F") == %p\n", length, (void *)p));
  return p;
 800bb42:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 800bb44:	4618      	mov	r0, r3
 800bb46:	3728      	adds	r7, #40	; 0x28
 800bb48:	46bd      	mov	sp, r7
 800bb4a:	bd80      	pop	{r7, pc}
 800bb4c:	080199a4 	.word	0x080199a4
 800bb50:	080199d4 	.word	0x080199d4
 800bb54:	08019a04 	.word	0x08019a04
 800bb58:	08019a2c 	.word	0x08019a2c
 800bb5c:	08019a60 	.word	0x08019a60
 800bb60:	08019a8c 	.word	0x08019a8c

0800bb64 <pbuf_alloc_reference>:
 *
 * @return the allocated pbuf.
 */
struct pbuf *
pbuf_alloc_reference(void *payload, u16_t length, pbuf_type type)
{
 800bb64:	b580      	push	{r7, lr}
 800bb66:	b086      	sub	sp, #24
 800bb68:	af02      	add	r7, sp, #8
 800bb6a:	6078      	str	r0, [r7, #4]
 800bb6c:	460b      	mov	r3, r1
 800bb6e:	807b      	strh	r3, [r7, #2]
 800bb70:	4613      	mov	r3, r2
 800bb72:	803b      	strh	r3, [r7, #0]
  struct pbuf *p;
  LWIP_ASSERT("invalid pbuf_type", (type == PBUF_REF) || (type == PBUF_ROM));
 800bb74:	883b      	ldrh	r3, [r7, #0]
 800bb76:	2b41      	cmp	r3, #65	; 0x41
 800bb78:	d009      	beq.n	800bb8e <pbuf_alloc_reference+0x2a>
 800bb7a:	883b      	ldrh	r3, [r7, #0]
 800bb7c:	2b01      	cmp	r3, #1
 800bb7e:	d006      	beq.n	800bb8e <pbuf_alloc_reference+0x2a>
 800bb80:	4b0f      	ldr	r3, [pc, #60]	; (800bbc0 <pbuf_alloc_reference+0x5c>)
 800bb82:	f44f 72a5 	mov.w	r2, #330	; 0x14a
 800bb86:	490f      	ldr	r1, [pc, #60]	; (800bbc4 <pbuf_alloc_reference+0x60>)
 800bb88:	480f      	ldr	r0, [pc, #60]	; (800bbc8 <pbuf_alloc_reference+0x64>)
 800bb8a:	f00c fc7d 	bl	8018488 <iprintf>
  /* only allocate memory for the pbuf structure */
  p = (struct pbuf *)memp_malloc(MEMP_PBUF);
 800bb8e:	2007      	movs	r0, #7
 800bb90:	f7ff fae4 	bl	800b15c <memp_malloc>
 800bb94:	60f8      	str	r0, [r7, #12]
  if (p == NULL) {
 800bb96:	68fb      	ldr	r3, [r7, #12]
 800bb98:	2b00      	cmp	r3, #0
 800bb9a:	d101      	bne.n	800bba0 <pbuf_alloc_reference+0x3c>
    LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_LEVEL_SERIOUS,
                ("pbuf_alloc_reference: Could not allocate MEMP_PBUF for PBUF_%s.\n",
                 (type == PBUF_ROM) ? "ROM" : "REF"));
    return NULL;
 800bb9c:	2300      	movs	r3, #0
 800bb9e:	e00b      	b.n	800bbb8 <pbuf_alloc_reference+0x54>
  }
  pbuf_init_alloced_pbuf(p, payload, length, length, type, 0);
 800bba0:	8879      	ldrh	r1, [r7, #2]
 800bba2:	887a      	ldrh	r2, [r7, #2]
 800bba4:	2300      	movs	r3, #0
 800bba6:	9301      	str	r3, [sp, #4]
 800bba8:	883b      	ldrh	r3, [r7, #0]
 800bbaa:	9300      	str	r3, [sp, #0]
 800bbac:	460b      	mov	r3, r1
 800bbae:	6879      	ldr	r1, [r7, #4]
 800bbb0:	68f8      	ldr	r0, [r7, #12]
 800bbb2:	f7ff feb7 	bl	800b924 <pbuf_init_alloced_pbuf>
  return p;
 800bbb6:	68fb      	ldr	r3, [r7, #12]
}
 800bbb8:	4618      	mov	r0, r3
 800bbba:	3710      	adds	r7, #16
 800bbbc:	46bd      	mov	sp, r7
 800bbbe:	bd80      	pop	{r7, pc}
 800bbc0:	080199a4 	.word	0x080199a4
 800bbc4:	08019aa8 	.word	0x08019aa8
 800bbc8:	08019a04 	.word	0x08019a04

0800bbcc <pbuf_alloced_custom>:
 *        big enough to hold 'length' plus the header size
 */
struct pbuf *
pbuf_alloced_custom(pbuf_layer l, u16_t length, pbuf_type type, struct pbuf_custom *p,
                    void *payload_mem, u16_t payload_mem_len)
{
 800bbcc:	b580      	push	{r7, lr}
 800bbce:	b088      	sub	sp, #32
 800bbd0:	af02      	add	r7, sp, #8
 800bbd2:	607b      	str	r3, [r7, #4]
 800bbd4:	4603      	mov	r3, r0
 800bbd6:	73fb      	strb	r3, [r7, #15]
 800bbd8:	460b      	mov	r3, r1
 800bbda:	81bb      	strh	r3, [r7, #12]
 800bbdc:	4613      	mov	r3, r2
 800bbde:	817b      	strh	r3, [r7, #10]
  u16_t offset = (u16_t)l;
 800bbe0:	7bfb      	ldrb	r3, [r7, #15]
 800bbe2:	827b      	strh	r3, [r7, #18]
  void *payload;
  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_alloced_custom(length=%"U16_F")\n", length));

  if (LWIP_MEM_ALIGN_SIZE(offset) + length > payload_mem_len) {
 800bbe4:	8a7b      	ldrh	r3, [r7, #18]
 800bbe6:	3303      	adds	r3, #3
 800bbe8:	f023 0203 	bic.w	r2, r3, #3
 800bbec:	89bb      	ldrh	r3, [r7, #12]
 800bbee:	441a      	add	r2, r3
 800bbf0:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800bbf2:	429a      	cmp	r2, r3
 800bbf4:	d901      	bls.n	800bbfa <pbuf_alloced_custom+0x2e>
    LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_LEVEL_WARNING, ("pbuf_alloced_custom(length=%"U16_F") buffer too short\n", length));
    return NULL;
 800bbf6:	2300      	movs	r3, #0
 800bbf8:	e018      	b.n	800bc2c <pbuf_alloced_custom+0x60>
  }

  if (payload_mem != NULL) {
 800bbfa:	6a3b      	ldr	r3, [r7, #32]
 800bbfc:	2b00      	cmp	r3, #0
 800bbfe:	d007      	beq.n	800bc10 <pbuf_alloced_custom+0x44>
    payload = (u8_t *)payload_mem + LWIP_MEM_ALIGN_SIZE(offset);
 800bc00:	8a7b      	ldrh	r3, [r7, #18]
 800bc02:	3303      	adds	r3, #3
 800bc04:	f023 0303 	bic.w	r3, r3, #3
 800bc08:	6a3a      	ldr	r2, [r7, #32]
 800bc0a:	4413      	add	r3, r2
 800bc0c:	617b      	str	r3, [r7, #20]
 800bc0e:	e001      	b.n	800bc14 <pbuf_alloced_custom+0x48>
  } else {
    payload = NULL;
 800bc10:	2300      	movs	r3, #0
 800bc12:	617b      	str	r3, [r7, #20]
  }
  pbuf_init_alloced_pbuf(&p->pbuf, payload, length, length, type, PBUF_FLAG_IS_CUSTOM);
 800bc14:	6878      	ldr	r0, [r7, #4]
 800bc16:	89b9      	ldrh	r1, [r7, #12]
 800bc18:	89ba      	ldrh	r2, [r7, #12]
 800bc1a:	2302      	movs	r3, #2
 800bc1c:	9301      	str	r3, [sp, #4]
 800bc1e:	897b      	ldrh	r3, [r7, #10]
 800bc20:	9300      	str	r3, [sp, #0]
 800bc22:	460b      	mov	r3, r1
 800bc24:	6979      	ldr	r1, [r7, #20]
 800bc26:	f7ff fe7d 	bl	800b924 <pbuf_init_alloced_pbuf>
  return &p->pbuf;
 800bc2a:	687b      	ldr	r3, [r7, #4]
}
 800bc2c:	4618      	mov	r0, r3
 800bc2e:	3718      	adds	r7, #24
 800bc30:	46bd      	mov	sp, r7
 800bc32:	bd80      	pop	{r7, pc}

0800bc34 <pbuf_realloc>:
 *
 * @note Despite its name, pbuf_realloc cannot grow the size of a pbuf (chain).
 */
void
pbuf_realloc(struct pbuf *p, u16_t new_len)
{
 800bc34:	b580      	push	{r7, lr}
 800bc36:	b084      	sub	sp, #16
 800bc38:	af00      	add	r7, sp, #0
 800bc3a:	6078      	str	r0, [r7, #4]
 800bc3c:	460b      	mov	r3, r1
 800bc3e:	807b      	strh	r3, [r7, #2]
  struct pbuf *q;
  u16_t rem_len; /* remaining length */
  u16_t shrink;

  LWIP_ASSERT("pbuf_realloc: p != NULL", p != NULL);
 800bc40:	687b      	ldr	r3, [r7, #4]
 800bc42:	2b00      	cmp	r3, #0
 800bc44:	d106      	bne.n	800bc54 <pbuf_realloc+0x20>
 800bc46:	4b3a      	ldr	r3, [pc, #232]	; (800bd30 <pbuf_realloc+0xfc>)
 800bc48:	f44f 72cc 	mov.w	r2, #408	; 0x198
 800bc4c:	4939      	ldr	r1, [pc, #228]	; (800bd34 <pbuf_realloc+0x100>)
 800bc4e:	483a      	ldr	r0, [pc, #232]	; (800bd38 <pbuf_realloc+0x104>)
 800bc50:	f00c fc1a 	bl	8018488 <iprintf>

  /* desired length larger than current length? */
  if (new_len >= p->tot_len) {
 800bc54:	687b      	ldr	r3, [r7, #4]
 800bc56:	891b      	ldrh	r3, [r3, #8]
 800bc58:	887a      	ldrh	r2, [r7, #2]
 800bc5a:	429a      	cmp	r2, r3
 800bc5c:	d263      	bcs.n	800bd26 <pbuf_realloc+0xf2>
    return;
  }

  /* the pbuf chain grows by (new_len - p->tot_len) bytes
   * (which may be negative in case of shrinking) */
  shrink = (u16_t)(p->tot_len - new_len);
 800bc5e:	687b      	ldr	r3, [r7, #4]
 800bc60:	891a      	ldrh	r2, [r3, #8]
 800bc62:	887b      	ldrh	r3, [r7, #2]
 800bc64:	1ad3      	subs	r3, r2, r3
 800bc66:	813b      	strh	r3, [r7, #8]

  /* first, step over any pbufs that should remain in the chain */
  rem_len = new_len;
 800bc68:	887b      	ldrh	r3, [r7, #2]
 800bc6a:	817b      	strh	r3, [r7, #10]
  q = p;
 800bc6c:	687b      	ldr	r3, [r7, #4]
 800bc6e:	60fb      	str	r3, [r7, #12]
  /* should this pbuf be kept? */
  while (rem_len > q->len) {
 800bc70:	e018      	b.n	800bca4 <pbuf_realloc+0x70>
    /* decrease remaining length by pbuf length */
    rem_len = (u16_t)(rem_len - q->len);
 800bc72:	68fb      	ldr	r3, [r7, #12]
 800bc74:	895b      	ldrh	r3, [r3, #10]
 800bc76:	897a      	ldrh	r2, [r7, #10]
 800bc78:	1ad3      	subs	r3, r2, r3
 800bc7a:	817b      	strh	r3, [r7, #10]
    /* decrease total length indicator */
    q->tot_len = (u16_t)(q->tot_len - shrink);
 800bc7c:	68fb      	ldr	r3, [r7, #12]
 800bc7e:	891a      	ldrh	r2, [r3, #8]
 800bc80:	893b      	ldrh	r3, [r7, #8]
 800bc82:	1ad3      	subs	r3, r2, r3
 800bc84:	b29a      	uxth	r2, r3
 800bc86:	68fb      	ldr	r3, [r7, #12]
 800bc88:	811a      	strh	r2, [r3, #8]
    /* proceed to next pbuf in chain */
    q = q->next;
 800bc8a:	68fb      	ldr	r3, [r7, #12]
 800bc8c:	681b      	ldr	r3, [r3, #0]
 800bc8e:	60fb      	str	r3, [r7, #12]
    LWIP_ASSERT("pbuf_realloc: q != NULL", q != NULL);
 800bc90:	68fb      	ldr	r3, [r7, #12]
 800bc92:	2b00      	cmp	r3, #0
 800bc94:	d106      	bne.n	800bca4 <pbuf_realloc+0x70>
 800bc96:	4b26      	ldr	r3, [pc, #152]	; (800bd30 <pbuf_realloc+0xfc>)
 800bc98:	f240 12af 	movw	r2, #431	; 0x1af
 800bc9c:	4927      	ldr	r1, [pc, #156]	; (800bd3c <pbuf_realloc+0x108>)
 800bc9e:	4826      	ldr	r0, [pc, #152]	; (800bd38 <pbuf_realloc+0x104>)
 800bca0:	f00c fbf2 	bl	8018488 <iprintf>
  while (rem_len > q->len) {
 800bca4:	68fb      	ldr	r3, [r7, #12]
 800bca6:	895b      	ldrh	r3, [r3, #10]
 800bca8:	897a      	ldrh	r2, [r7, #10]
 800bcaa:	429a      	cmp	r2, r3
 800bcac:	d8e1      	bhi.n	800bc72 <pbuf_realloc+0x3e>
  /* we have now reached the new last pbuf (in q) */
  /* rem_len == desired length for pbuf q */

  /* shrink allocated memory for PBUF_RAM */
  /* (other types merely adjust their length fields */
  if (pbuf_match_allocsrc(q, PBUF_TYPE_ALLOC_SRC_MASK_STD_HEAP) && (rem_len != q->len)
 800bcae:	68fb      	ldr	r3, [r7, #12]
 800bcb0:	7b1b      	ldrb	r3, [r3, #12]
 800bcb2:	f003 030f 	and.w	r3, r3, #15
 800bcb6:	2b00      	cmp	r3, #0
 800bcb8:	d121      	bne.n	800bcfe <pbuf_realloc+0xca>
 800bcba:	68fb      	ldr	r3, [r7, #12]
 800bcbc:	895b      	ldrh	r3, [r3, #10]
 800bcbe:	897a      	ldrh	r2, [r7, #10]
 800bcc0:	429a      	cmp	r2, r3
 800bcc2:	d01c      	beq.n	800bcfe <pbuf_realloc+0xca>
#if LWIP_SUPPORT_CUSTOM_PBUF
      && ((q->flags & PBUF_FLAG_IS_CUSTOM) == 0)
 800bcc4:	68fb      	ldr	r3, [r7, #12]
 800bcc6:	7b5b      	ldrb	r3, [r3, #13]
 800bcc8:	f003 0302 	and.w	r3, r3, #2
 800bccc:	2b00      	cmp	r3, #0
 800bcce:	d116      	bne.n	800bcfe <pbuf_realloc+0xca>
#endif /* LWIP_SUPPORT_CUSTOM_PBUF */
     ) {
    /* reallocate and adjust the length of the pbuf that will be split */
    q = (struct pbuf *)mem_trim(q, (mem_size_t)(((u8_t *)q->payload - (u8_t *)q) + rem_len));
 800bcd0:	68fb      	ldr	r3, [r7, #12]
 800bcd2:	685a      	ldr	r2, [r3, #4]
 800bcd4:	68fb      	ldr	r3, [r7, #12]
 800bcd6:	1ad3      	subs	r3, r2, r3
 800bcd8:	b29a      	uxth	r2, r3
 800bcda:	897b      	ldrh	r3, [r7, #10]
 800bcdc:	4413      	add	r3, r2
 800bcde:	b29b      	uxth	r3, r3
 800bce0:	4619      	mov	r1, r3
 800bce2:	68f8      	ldr	r0, [r7, #12]
 800bce4:	f7fe ffae 	bl	800ac44 <mem_trim>
 800bce8:	60f8      	str	r0, [r7, #12]
    LWIP_ASSERT("mem_trim returned q == NULL", q != NULL);
 800bcea:	68fb      	ldr	r3, [r7, #12]
 800bcec:	2b00      	cmp	r3, #0
 800bcee:	d106      	bne.n	800bcfe <pbuf_realloc+0xca>
 800bcf0:	4b0f      	ldr	r3, [pc, #60]	; (800bd30 <pbuf_realloc+0xfc>)
 800bcf2:	f240 12bd 	movw	r2, #445	; 0x1bd
 800bcf6:	4912      	ldr	r1, [pc, #72]	; (800bd40 <pbuf_realloc+0x10c>)
 800bcf8:	480f      	ldr	r0, [pc, #60]	; (800bd38 <pbuf_realloc+0x104>)
 800bcfa:	f00c fbc5 	bl	8018488 <iprintf>
  }
  /* adjust length fields for new last pbuf */
  q->len = rem_len;
 800bcfe:	68fb      	ldr	r3, [r7, #12]
 800bd00:	897a      	ldrh	r2, [r7, #10]
 800bd02:	815a      	strh	r2, [r3, #10]
  q->tot_len = q->len;
 800bd04:	68fb      	ldr	r3, [r7, #12]
 800bd06:	895a      	ldrh	r2, [r3, #10]
 800bd08:	68fb      	ldr	r3, [r7, #12]
 800bd0a:	811a      	strh	r2, [r3, #8]

  /* any remaining pbufs in chain? */
  if (q->next != NULL) {
 800bd0c:	68fb      	ldr	r3, [r7, #12]
 800bd0e:	681b      	ldr	r3, [r3, #0]
 800bd10:	2b00      	cmp	r3, #0
 800bd12:	d004      	beq.n	800bd1e <pbuf_realloc+0xea>
    /* free remaining pbufs in chain */
    pbuf_free(q->next);
 800bd14:	68fb      	ldr	r3, [r7, #12]
 800bd16:	681b      	ldr	r3, [r3, #0]
 800bd18:	4618      	mov	r0, r3
 800bd1a:	f000 f911 	bl	800bf40 <pbuf_free>
  }
  /* q is last packet in chain */
  q->next = NULL;
 800bd1e:	68fb      	ldr	r3, [r7, #12]
 800bd20:	2200      	movs	r2, #0
 800bd22:	601a      	str	r2, [r3, #0]
 800bd24:	e000      	b.n	800bd28 <pbuf_realloc+0xf4>
    return;
 800bd26:	bf00      	nop

}
 800bd28:	3710      	adds	r7, #16
 800bd2a:	46bd      	mov	sp, r7
 800bd2c:	bd80      	pop	{r7, pc}
 800bd2e:	bf00      	nop
 800bd30:	080199a4 	.word	0x080199a4
 800bd34:	08019abc 	.word	0x08019abc
 800bd38:	08019a04 	.word	0x08019a04
 800bd3c:	08019ad4 	.word	0x08019ad4
 800bd40:	08019aec 	.word	0x08019aec

0800bd44 <pbuf_add_header_impl>:
 * @return non-zero on failure, zero on success.
 *
 */
static u8_t
pbuf_add_header_impl(struct pbuf *p, size_t header_size_increment, u8_t force)
{
 800bd44:	b580      	push	{r7, lr}
 800bd46:	b086      	sub	sp, #24
 800bd48:	af00      	add	r7, sp, #0
 800bd4a:	60f8      	str	r0, [r7, #12]
 800bd4c:	60b9      	str	r1, [r7, #8]
 800bd4e:	4613      	mov	r3, r2
 800bd50:	71fb      	strb	r3, [r7, #7]
  u16_t type_internal;
  void *payload;
  u16_t increment_magnitude;

  LWIP_ASSERT("p != NULL", p != NULL);
 800bd52:	68fb      	ldr	r3, [r7, #12]
 800bd54:	2b00      	cmp	r3, #0
 800bd56:	d106      	bne.n	800bd66 <pbuf_add_header_impl+0x22>
 800bd58:	4b2b      	ldr	r3, [pc, #172]	; (800be08 <pbuf_add_header_impl+0xc4>)
 800bd5a:	f240 12df 	movw	r2, #479	; 0x1df
 800bd5e:	492b      	ldr	r1, [pc, #172]	; (800be0c <pbuf_add_header_impl+0xc8>)
 800bd60:	482b      	ldr	r0, [pc, #172]	; (800be10 <pbuf_add_header_impl+0xcc>)
 800bd62:	f00c fb91 	bl	8018488 <iprintf>
  if ((p == NULL) || (header_size_increment > 0xFFFF)) {
 800bd66:	68fb      	ldr	r3, [r7, #12]
 800bd68:	2b00      	cmp	r3, #0
 800bd6a:	d003      	beq.n	800bd74 <pbuf_add_header_impl+0x30>
 800bd6c:	68bb      	ldr	r3, [r7, #8]
 800bd6e:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800bd72:	d301      	bcc.n	800bd78 <pbuf_add_header_impl+0x34>
    return 1;
 800bd74:	2301      	movs	r3, #1
 800bd76:	e043      	b.n	800be00 <pbuf_add_header_impl+0xbc>
  }
  if (header_size_increment == 0) {
 800bd78:	68bb      	ldr	r3, [r7, #8]
 800bd7a:	2b00      	cmp	r3, #0
 800bd7c:	d101      	bne.n	800bd82 <pbuf_add_header_impl+0x3e>
    return 0;
 800bd7e:	2300      	movs	r3, #0
 800bd80:	e03e      	b.n	800be00 <pbuf_add_header_impl+0xbc>
  }

  increment_magnitude = (u16_t)header_size_increment;
 800bd82:	68bb      	ldr	r3, [r7, #8]
 800bd84:	827b      	strh	r3, [r7, #18]
  /* Do not allow tot_len to wrap as a result. */
  if ((u16_t)(increment_magnitude + p->tot_len) < increment_magnitude) {
 800bd86:	68fb      	ldr	r3, [r7, #12]
 800bd88:	891a      	ldrh	r2, [r3, #8]
 800bd8a:	8a7b      	ldrh	r3, [r7, #18]
 800bd8c:	4413      	add	r3, r2
 800bd8e:	b29b      	uxth	r3, r3
 800bd90:	8a7a      	ldrh	r2, [r7, #18]
 800bd92:	429a      	cmp	r2, r3
 800bd94:	d901      	bls.n	800bd9a <pbuf_add_header_impl+0x56>
    return 1;
 800bd96:	2301      	movs	r3, #1
 800bd98:	e032      	b.n	800be00 <pbuf_add_header_impl+0xbc>
  }

  type_internal = p->type_internal;
 800bd9a:	68fb      	ldr	r3, [r7, #12]
 800bd9c:	7b1b      	ldrb	r3, [r3, #12]
 800bd9e:	823b      	strh	r3, [r7, #16]

  /* pbuf types containing payloads? */
  if (type_internal & PBUF_TYPE_FLAG_STRUCT_DATA_CONTIGUOUS) {
 800bda0:	8a3b      	ldrh	r3, [r7, #16]
 800bda2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800bda6:	2b00      	cmp	r3, #0
 800bda8:	d00c      	beq.n	800bdc4 <pbuf_add_header_impl+0x80>
    /* set new payload pointer */
    payload = (u8_t *)p->payload - header_size_increment;
 800bdaa:	68fb      	ldr	r3, [r7, #12]
 800bdac:	685a      	ldr	r2, [r3, #4]
 800bdae:	68bb      	ldr	r3, [r7, #8]
 800bdb0:	425b      	negs	r3, r3
 800bdb2:	4413      	add	r3, r2
 800bdb4:	617b      	str	r3, [r7, #20]
    /* boundary check fails? */
    if ((u8_t *)payload < (u8_t *)p + SIZEOF_STRUCT_PBUF) {
 800bdb6:	68fb      	ldr	r3, [r7, #12]
 800bdb8:	3310      	adds	r3, #16
 800bdba:	697a      	ldr	r2, [r7, #20]
 800bdbc:	429a      	cmp	r2, r3
 800bdbe:	d20d      	bcs.n	800bddc <pbuf_add_header_impl+0x98>
      LWIP_DEBUGF( PBUF_DEBUG | LWIP_DBG_TRACE,
                   ("pbuf_add_header: failed as %p < %p (not enough space for new header size)\n",
                    (void *)payload, (void *)((u8_t *)p + SIZEOF_STRUCT_PBUF)));
      /* bail out unsuccessfully */
      return 1;
 800bdc0:	2301      	movs	r3, #1
 800bdc2:	e01d      	b.n	800be00 <pbuf_add_header_impl+0xbc>
    }
    /* pbuf types referring to external payloads? */
  } else {
    /* hide a header in the payload? */
    if (force) {
 800bdc4:	79fb      	ldrb	r3, [r7, #7]
 800bdc6:	2b00      	cmp	r3, #0
 800bdc8:	d006      	beq.n	800bdd8 <pbuf_add_header_impl+0x94>
      payload = (u8_t *)p->payload - header_size_increment;
 800bdca:	68fb      	ldr	r3, [r7, #12]
 800bdcc:	685a      	ldr	r2, [r3, #4]
 800bdce:	68bb      	ldr	r3, [r7, #8]
 800bdd0:	425b      	negs	r3, r3
 800bdd2:	4413      	add	r3, r2
 800bdd4:	617b      	str	r3, [r7, #20]
 800bdd6:	e001      	b.n	800bddc <pbuf_add_header_impl+0x98>
    } else {
      /* cannot expand payload to front (yet!)
       * bail out unsuccessfully */
      return 1;
 800bdd8:	2301      	movs	r3, #1
 800bdda:	e011      	b.n	800be00 <pbuf_add_header_impl+0xbc>
  }
  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_add_header: old %p new %p (%"U16_F")\n",
              (void *)p->payload, (void *)payload, increment_magnitude));

  /* modify pbuf fields */
  p->payload = payload;
 800bddc:	68fb      	ldr	r3, [r7, #12]
 800bdde:	697a      	ldr	r2, [r7, #20]
 800bde0:	605a      	str	r2, [r3, #4]
  p->len = (u16_t)(p->len + increment_magnitude);
 800bde2:	68fb      	ldr	r3, [r7, #12]
 800bde4:	895a      	ldrh	r2, [r3, #10]
 800bde6:	8a7b      	ldrh	r3, [r7, #18]
 800bde8:	4413      	add	r3, r2
 800bdea:	b29a      	uxth	r2, r3
 800bdec:	68fb      	ldr	r3, [r7, #12]
 800bdee:	815a      	strh	r2, [r3, #10]
  p->tot_len = (u16_t)(p->tot_len + increment_magnitude);
 800bdf0:	68fb      	ldr	r3, [r7, #12]
 800bdf2:	891a      	ldrh	r2, [r3, #8]
 800bdf4:	8a7b      	ldrh	r3, [r7, #18]
 800bdf6:	4413      	add	r3, r2
 800bdf8:	b29a      	uxth	r2, r3
 800bdfa:	68fb      	ldr	r3, [r7, #12]
 800bdfc:	811a      	strh	r2, [r3, #8]


  return 0;
 800bdfe:	2300      	movs	r3, #0
}
 800be00:	4618      	mov	r0, r3
 800be02:	3718      	adds	r7, #24
 800be04:	46bd      	mov	sp, r7
 800be06:	bd80      	pop	{r7, pc}
 800be08:	080199a4 	.word	0x080199a4
 800be0c:	08019b08 	.word	0x08019b08
 800be10:	08019a04 	.word	0x08019a04

0800be14 <pbuf_add_header>:
 * @return non-zero on failure, zero on success.
 *
 */
u8_t
pbuf_add_header(struct pbuf *p, size_t header_size_increment)
{
 800be14:	b580      	push	{r7, lr}
 800be16:	b082      	sub	sp, #8
 800be18:	af00      	add	r7, sp, #0
 800be1a:	6078      	str	r0, [r7, #4]
 800be1c:	6039      	str	r1, [r7, #0]
  return pbuf_add_header_impl(p, header_size_increment, 0);
 800be1e:	2200      	movs	r2, #0
 800be20:	6839      	ldr	r1, [r7, #0]
 800be22:	6878      	ldr	r0, [r7, #4]
 800be24:	f7ff ff8e 	bl	800bd44 <pbuf_add_header_impl>
 800be28:	4603      	mov	r3, r0
}
 800be2a:	4618      	mov	r0, r3
 800be2c:	3708      	adds	r7, #8
 800be2e:	46bd      	mov	sp, r7
 800be30:	bd80      	pop	{r7, pc}
	...

0800be34 <pbuf_remove_header>:
 * @return non-zero on failure, zero on success.
 *
 */
u8_t
pbuf_remove_header(struct pbuf *p, size_t header_size_decrement)
{
 800be34:	b580      	push	{r7, lr}
 800be36:	b084      	sub	sp, #16
 800be38:	af00      	add	r7, sp, #0
 800be3a:	6078      	str	r0, [r7, #4]
 800be3c:	6039      	str	r1, [r7, #0]
  void *payload;
  u16_t increment_magnitude;

  LWIP_ASSERT("p != NULL", p != NULL);
 800be3e:	687b      	ldr	r3, [r7, #4]
 800be40:	2b00      	cmp	r3, #0
 800be42:	d106      	bne.n	800be52 <pbuf_remove_header+0x1e>
 800be44:	4b20      	ldr	r3, [pc, #128]	; (800bec8 <pbuf_remove_header+0x94>)
 800be46:	f240 224b 	movw	r2, #587	; 0x24b
 800be4a:	4920      	ldr	r1, [pc, #128]	; (800becc <pbuf_remove_header+0x98>)
 800be4c:	4820      	ldr	r0, [pc, #128]	; (800bed0 <pbuf_remove_header+0x9c>)
 800be4e:	f00c fb1b 	bl	8018488 <iprintf>
  if ((p == NULL) || (header_size_decrement > 0xFFFF)) {
 800be52:	687b      	ldr	r3, [r7, #4]
 800be54:	2b00      	cmp	r3, #0
 800be56:	d003      	beq.n	800be60 <pbuf_remove_header+0x2c>
 800be58:	683b      	ldr	r3, [r7, #0]
 800be5a:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800be5e:	d301      	bcc.n	800be64 <pbuf_remove_header+0x30>
    return 1;
 800be60:	2301      	movs	r3, #1
 800be62:	e02c      	b.n	800bebe <pbuf_remove_header+0x8a>
  }
  if (header_size_decrement == 0) {
 800be64:	683b      	ldr	r3, [r7, #0]
 800be66:	2b00      	cmp	r3, #0
 800be68:	d101      	bne.n	800be6e <pbuf_remove_header+0x3a>
    return 0;
 800be6a:	2300      	movs	r3, #0
 800be6c:	e027      	b.n	800bebe <pbuf_remove_header+0x8a>
  }

  increment_magnitude = (u16_t)header_size_decrement;
 800be6e:	683b      	ldr	r3, [r7, #0]
 800be70:	81fb      	strh	r3, [r7, #14]
  /* Check that we aren't going to move off the end of the pbuf */
  LWIP_ERROR("increment_magnitude <= p->len", (increment_magnitude <= p->len), return 1;);
 800be72:	687b      	ldr	r3, [r7, #4]
 800be74:	895b      	ldrh	r3, [r3, #10]
 800be76:	89fa      	ldrh	r2, [r7, #14]
 800be78:	429a      	cmp	r2, r3
 800be7a:	d908      	bls.n	800be8e <pbuf_remove_header+0x5a>
 800be7c:	4b12      	ldr	r3, [pc, #72]	; (800bec8 <pbuf_remove_header+0x94>)
 800be7e:	f240 2255 	movw	r2, #597	; 0x255
 800be82:	4914      	ldr	r1, [pc, #80]	; (800bed4 <pbuf_remove_header+0xa0>)
 800be84:	4812      	ldr	r0, [pc, #72]	; (800bed0 <pbuf_remove_header+0x9c>)
 800be86:	f00c faff 	bl	8018488 <iprintf>
 800be8a:	2301      	movs	r3, #1
 800be8c:	e017      	b.n	800bebe <pbuf_remove_header+0x8a>

  /* remember current payload pointer */
  payload = p->payload;
 800be8e:	687b      	ldr	r3, [r7, #4]
 800be90:	685b      	ldr	r3, [r3, #4]
 800be92:	60bb      	str	r3, [r7, #8]
  LWIP_UNUSED_ARG(payload); /* only used in LWIP_DEBUGF below */

  /* increase payload pointer (guarded by length check above) */
  p->payload = (u8_t *)p->payload + header_size_decrement;
 800be94:	687b      	ldr	r3, [r7, #4]
 800be96:	685a      	ldr	r2, [r3, #4]
 800be98:	683b      	ldr	r3, [r7, #0]
 800be9a:	441a      	add	r2, r3
 800be9c:	687b      	ldr	r3, [r7, #4]
 800be9e:	605a      	str	r2, [r3, #4]
  /* modify pbuf length fields */
  p->len = (u16_t)(p->len - increment_magnitude);
 800bea0:	687b      	ldr	r3, [r7, #4]
 800bea2:	895a      	ldrh	r2, [r3, #10]
 800bea4:	89fb      	ldrh	r3, [r7, #14]
 800bea6:	1ad3      	subs	r3, r2, r3
 800bea8:	b29a      	uxth	r2, r3
 800beaa:	687b      	ldr	r3, [r7, #4]
 800beac:	815a      	strh	r2, [r3, #10]
  p->tot_len = (u16_t)(p->tot_len - increment_magnitude);
 800beae:	687b      	ldr	r3, [r7, #4]
 800beb0:	891a      	ldrh	r2, [r3, #8]
 800beb2:	89fb      	ldrh	r3, [r7, #14]
 800beb4:	1ad3      	subs	r3, r2, r3
 800beb6:	b29a      	uxth	r2, r3
 800beb8:	687b      	ldr	r3, [r7, #4]
 800beba:	811a      	strh	r2, [r3, #8]

  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_remove_header: old %p new %p (%"U16_F")\n",
              (void *)payload, (void *)p->payload, increment_magnitude));

  return 0;
 800bebc:	2300      	movs	r3, #0
}
 800bebe:	4618      	mov	r0, r3
 800bec0:	3710      	adds	r7, #16
 800bec2:	46bd      	mov	sp, r7
 800bec4:	bd80      	pop	{r7, pc}
 800bec6:	bf00      	nop
 800bec8:	080199a4 	.word	0x080199a4
 800becc:	08019b08 	.word	0x08019b08
 800bed0:	08019a04 	.word	0x08019a04
 800bed4:	08019b14 	.word	0x08019b14

0800bed8 <pbuf_header_impl>:

static u8_t
pbuf_header_impl(struct pbuf *p, s16_t header_size_increment, u8_t force)
{
 800bed8:	b580      	push	{r7, lr}
 800beda:	b082      	sub	sp, #8
 800bedc:	af00      	add	r7, sp, #0
 800bede:	6078      	str	r0, [r7, #4]
 800bee0:	460b      	mov	r3, r1
 800bee2:	807b      	strh	r3, [r7, #2]
 800bee4:	4613      	mov	r3, r2
 800bee6:	707b      	strb	r3, [r7, #1]
  if (header_size_increment < 0) {
 800bee8:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 800beec:	2b00      	cmp	r3, #0
 800beee:	da08      	bge.n	800bf02 <pbuf_header_impl+0x2a>
    return pbuf_remove_header(p, (size_t) - header_size_increment);
 800bef0:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 800bef4:	425b      	negs	r3, r3
 800bef6:	4619      	mov	r1, r3
 800bef8:	6878      	ldr	r0, [r7, #4]
 800befa:	f7ff ff9b 	bl	800be34 <pbuf_remove_header>
 800befe:	4603      	mov	r3, r0
 800bf00:	e007      	b.n	800bf12 <pbuf_header_impl+0x3a>
  } else {
    return pbuf_add_header_impl(p, (size_t)header_size_increment, force);
 800bf02:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 800bf06:	787a      	ldrb	r2, [r7, #1]
 800bf08:	4619      	mov	r1, r3
 800bf0a:	6878      	ldr	r0, [r7, #4]
 800bf0c:	f7ff ff1a 	bl	800bd44 <pbuf_add_header_impl>
 800bf10:	4603      	mov	r3, r0
  }
}
 800bf12:	4618      	mov	r0, r3
 800bf14:	3708      	adds	r7, #8
 800bf16:	46bd      	mov	sp, r7
 800bf18:	bd80      	pop	{r7, pc}

0800bf1a <pbuf_header_force>:
 * Same as pbuf_header but does not check if 'header_size > 0' is allowed.
 * This is used internally only, to allow PBUF_REF for RX.
 */
u8_t
pbuf_header_force(struct pbuf *p, s16_t header_size_increment)
{
 800bf1a:	b580      	push	{r7, lr}
 800bf1c:	b082      	sub	sp, #8
 800bf1e:	af00      	add	r7, sp, #0
 800bf20:	6078      	str	r0, [r7, #4]
 800bf22:	460b      	mov	r3, r1
 800bf24:	807b      	strh	r3, [r7, #2]
  return pbuf_header_impl(p, header_size_increment, 1);
 800bf26:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 800bf2a:	2201      	movs	r2, #1
 800bf2c:	4619      	mov	r1, r3
 800bf2e:	6878      	ldr	r0, [r7, #4]
 800bf30:	f7ff ffd2 	bl	800bed8 <pbuf_header_impl>
 800bf34:	4603      	mov	r3, r0
}
 800bf36:	4618      	mov	r0, r3
 800bf38:	3708      	adds	r7, #8
 800bf3a:	46bd      	mov	sp, r7
 800bf3c:	bd80      	pop	{r7, pc}
	...

0800bf40 <pbuf_free>:
 * 1->1->1 becomes .......
 *
 */
u8_t
pbuf_free(struct pbuf *p)
{
 800bf40:	b580      	push	{r7, lr}
 800bf42:	b086      	sub	sp, #24
 800bf44:	af00      	add	r7, sp, #0
 800bf46:	6078      	str	r0, [r7, #4]
  u8_t alloc_src;
  struct pbuf *q;
  u8_t count;

  if (p == NULL) {
 800bf48:	687b      	ldr	r3, [r7, #4]
 800bf4a:	2b00      	cmp	r3, #0
 800bf4c:	d10b      	bne.n	800bf66 <pbuf_free+0x26>
    LWIP_ASSERT("p != NULL", p != NULL);
 800bf4e:	687b      	ldr	r3, [r7, #4]
 800bf50:	2b00      	cmp	r3, #0
 800bf52:	d106      	bne.n	800bf62 <pbuf_free+0x22>
 800bf54:	4b38      	ldr	r3, [pc, #224]	; (800c038 <pbuf_free+0xf8>)
 800bf56:	f44f 7237 	mov.w	r2, #732	; 0x2dc
 800bf5a:	4938      	ldr	r1, [pc, #224]	; (800c03c <pbuf_free+0xfc>)
 800bf5c:	4838      	ldr	r0, [pc, #224]	; (800c040 <pbuf_free+0x100>)
 800bf5e:	f00c fa93 	bl	8018488 <iprintf>
    /* if assertions are disabled, proceed with debug output */
    LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_LEVEL_SERIOUS,
                ("pbuf_free(p == NULL) was called.\n"));
    return 0;
 800bf62:	2300      	movs	r3, #0
 800bf64:	e063      	b.n	800c02e <pbuf_free+0xee>
  }
  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_free(%p)\n", (void *)p));

  PERF_START;

  count = 0;
 800bf66:	2300      	movs	r3, #0
 800bf68:	75fb      	strb	r3, [r7, #23]
  /* de-allocate all consecutive pbufs from the head of the chain that
   * obtain a zero reference count after decrementing*/
  while (p != NULL) {
 800bf6a:	e05c      	b.n	800c026 <pbuf_free+0xe6>
    /* Since decrementing ref cannot be guaranteed to be a single machine operation
     * we must protect it. We put the new ref into a local variable to prevent
     * further protection. */
    SYS_ARCH_PROTECT(old_level);
    /* all pbufs in a chain are referenced at least once */
    LWIP_ASSERT("pbuf_free: p->ref > 0", p->ref > 0);
 800bf6c:	687b      	ldr	r3, [r7, #4]
 800bf6e:	7b9b      	ldrb	r3, [r3, #14]
 800bf70:	2b00      	cmp	r3, #0
 800bf72:	d106      	bne.n	800bf82 <pbuf_free+0x42>
 800bf74:	4b30      	ldr	r3, [pc, #192]	; (800c038 <pbuf_free+0xf8>)
 800bf76:	f240 22f1 	movw	r2, #753	; 0x2f1
 800bf7a:	4932      	ldr	r1, [pc, #200]	; (800c044 <pbuf_free+0x104>)
 800bf7c:	4830      	ldr	r0, [pc, #192]	; (800c040 <pbuf_free+0x100>)
 800bf7e:	f00c fa83 	bl	8018488 <iprintf>
    /* decrease reference count (number of pointers to pbuf) */
    ref = --(p->ref);
 800bf82:	687b      	ldr	r3, [r7, #4]
 800bf84:	7b9b      	ldrb	r3, [r3, #14]
 800bf86:	3b01      	subs	r3, #1
 800bf88:	b2da      	uxtb	r2, r3
 800bf8a:	687b      	ldr	r3, [r7, #4]
 800bf8c:	739a      	strb	r2, [r3, #14]
 800bf8e:	687b      	ldr	r3, [r7, #4]
 800bf90:	7b9b      	ldrb	r3, [r3, #14]
 800bf92:	75bb      	strb	r3, [r7, #22]
    SYS_ARCH_UNPROTECT(old_level);
    /* this pbuf is no longer referenced to? */
    if (ref == 0) {
 800bf94:	7dbb      	ldrb	r3, [r7, #22]
 800bf96:	2b00      	cmp	r3, #0
 800bf98:	d143      	bne.n	800c022 <pbuf_free+0xe2>
      /* remember next pbuf in chain for next iteration */
      q = p->next;
 800bf9a:	687b      	ldr	r3, [r7, #4]
 800bf9c:	681b      	ldr	r3, [r3, #0]
 800bf9e:	613b      	str	r3, [r7, #16]
      LWIP_DEBUGF( PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_free: deallocating %p\n", (void *)p));
      alloc_src = pbuf_get_allocsrc(p);
 800bfa0:	687b      	ldr	r3, [r7, #4]
 800bfa2:	7b1b      	ldrb	r3, [r3, #12]
 800bfa4:	f003 030f 	and.w	r3, r3, #15
 800bfa8:	73fb      	strb	r3, [r7, #15]
#if LWIP_SUPPORT_CUSTOM_PBUF
      /* is this a custom pbuf? */
      if ((p->flags & PBUF_FLAG_IS_CUSTOM) != 0) {
 800bfaa:	687b      	ldr	r3, [r7, #4]
 800bfac:	7b5b      	ldrb	r3, [r3, #13]
 800bfae:	f003 0302 	and.w	r3, r3, #2
 800bfb2:	2b00      	cmp	r3, #0
 800bfb4:	d011      	beq.n	800bfda <pbuf_free+0x9a>
        struct pbuf_custom *pc = (struct pbuf_custom *)p;
 800bfb6:	687b      	ldr	r3, [r7, #4]
 800bfb8:	60bb      	str	r3, [r7, #8]
        LWIP_ASSERT("pc->custom_free_function != NULL", pc->custom_free_function != NULL);
 800bfba:	68bb      	ldr	r3, [r7, #8]
 800bfbc:	691b      	ldr	r3, [r3, #16]
 800bfbe:	2b00      	cmp	r3, #0
 800bfc0:	d106      	bne.n	800bfd0 <pbuf_free+0x90>
 800bfc2:	4b1d      	ldr	r3, [pc, #116]	; (800c038 <pbuf_free+0xf8>)
 800bfc4:	f240 22ff 	movw	r2, #767	; 0x2ff
 800bfc8:	491f      	ldr	r1, [pc, #124]	; (800c048 <pbuf_free+0x108>)
 800bfca:	481d      	ldr	r0, [pc, #116]	; (800c040 <pbuf_free+0x100>)
 800bfcc:	f00c fa5c 	bl	8018488 <iprintf>
        pc->custom_free_function(p);
 800bfd0:	68bb      	ldr	r3, [r7, #8]
 800bfd2:	691b      	ldr	r3, [r3, #16]
 800bfd4:	6878      	ldr	r0, [r7, #4]
 800bfd6:	4798      	blx	r3
 800bfd8:	e01d      	b.n	800c016 <pbuf_free+0xd6>
      } else
#endif /* LWIP_SUPPORT_CUSTOM_PBUF */
      {
        /* is this a pbuf from the pool? */
        if (alloc_src == PBUF_TYPE_ALLOC_SRC_MASK_STD_MEMP_PBUF_POOL) {
 800bfda:	7bfb      	ldrb	r3, [r7, #15]
 800bfdc:	2b02      	cmp	r3, #2
 800bfde:	d104      	bne.n	800bfea <pbuf_free+0xaa>
          memp_free(MEMP_PBUF_POOL, p);
 800bfe0:	6879      	ldr	r1, [r7, #4]
 800bfe2:	2008      	movs	r0, #8
 800bfe4:	f7ff f92a 	bl	800b23c <memp_free>
 800bfe8:	e015      	b.n	800c016 <pbuf_free+0xd6>
          /* is this a ROM or RAM referencing pbuf? */
        } else if (alloc_src == PBUF_TYPE_ALLOC_SRC_MASK_STD_MEMP_PBUF) {
 800bfea:	7bfb      	ldrb	r3, [r7, #15]
 800bfec:	2b01      	cmp	r3, #1
 800bfee:	d104      	bne.n	800bffa <pbuf_free+0xba>
          memp_free(MEMP_PBUF, p);
 800bff0:	6879      	ldr	r1, [r7, #4]
 800bff2:	2007      	movs	r0, #7
 800bff4:	f7ff f922 	bl	800b23c <memp_free>
 800bff8:	e00d      	b.n	800c016 <pbuf_free+0xd6>
          /* type == PBUF_RAM */
        } else if (alloc_src == PBUF_TYPE_ALLOC_SRC_MASK_STD_HEAP) {
 800bffa:	7bfb      	ldrb	r3, [r7, #15]
 800bffc:	2b00      	cmp	r3, #0
 800bffe:	d103      	bne.n	800c008 <pbuf_free+0xc8>
          mem_free(p);
 800c000:	6878      	ldr	r0, [r7, #4]
 800c002:	f7fe fdb5 	bl	800ab70 <mem_free>
 800c006:	e006      	b.n	800c016 <pbuf_free+0xd6>
        } else {
          /* @todo: support freeing other types */
          LWIP_ASSERT("invalid pbuf type", 0);
 800c008:	4b0b      	ldr	r3, [pc, #44]	; (800c038 <pbuf_free+0xf8>)
 800c00a:	f240 320f 	movw	r2, #783	; 0x30f
 800c00e:	490f      	ldr	r1, [pc, #60]	; (800c04c <pbuf_free+0x10c>)
 800c010:	480b      	ldr	r0, [pc, #44]	; (800c040 <pbuf_free+0x100>)
 800c012:	f00c fa39 	bl	8018488 <iprintf>
        }
      }
      count++;
 800c016:	7dfb      	ldrb	r3, [r7, #23]
 800c018:	3301      	adds	r3, #1
 800c01a:	75fb      	strb	r3, [r7, #23]
      /* proceed to next pbuf */
      p = q;
 800c01c:	693b      	ldr	r3, [r7, #16]
 800c01e:	607b      	str	r3, [r7, #4]
 800c020:	e001      	b.n	800c026 <pbuf_free+0xe6>
      /* p->ref > 0, this pbuf is still referenced to */
      /* (and so the remaining pbufs in chain as well) */
    } else {
      LWIP_DEBUGF( PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_free: %p has ref %"U16_F", ending here.\n", (void *)p, (u16_t)ref));
      /* stop walking through the chain */
      p = NULL;
 800c022:	2300      	movs	r3, #0
 800c024:	607b      	str	r3, [r7, #4]
  while (p != NULL) {
 800c026:	687b      	ldr	r3, [r7, #4]
 800c028:	2b00      	cmp	r3, #0
 800c02a:	d19f      	bne.n	800bf6c <pbuf_free+0x2c>
    }
  }
  PERF_STOP("pbuf_free");
  /* return number of de-allocated pbufs */
  return count;
 800c02c:	7dfb      	ldrb	r3, [r7, #23]
}
 800c02e:	4618      	mov	r0, r3
 800c030:	3718      	adds	r7, #24
 800c032:	46bd      	mov	sp, r7
 800c034:	bd80      	pop	{r7, pc}
 800c036:	bf00      	nop
 800c038:	080199a4 	.word	0x080199a4
 800c03c:	08019b08 	.word	0x08019b08
 800c040:	08019a04 	.word	0x08019a04
 800c044:	08019b34 	.word	0x08019b34
 800c048:	08019b4c 	.word	0x08019b4c
 800c04c:	08019b70 	.word	0x08019b70

0800c050 <pbuf_clen>:
 * @param p first pbuf of chain
 * @return the number of pbufs in a chain
 */
u16_t
pbuf_clen(const struct pbuf *p)
{
 800c050:	b480      	push	{r7}
 800c052:	b085      	sub	sp, #20
 800c054:	af00      	add	r7, sp, #0
 800c056:	6078      	str	r0, [r7, #4]
  u16_t len;

  len = 0;
 800c058:	2300      	movs	r3, #0
 800c05a:	81fb      	strh	r3, [r7, #14]
  while (p != NULL) {
 800c05c:	e005      	b.n	800c06a <pbuf_clen+0x1a>
    ++len;
 800c05e:	89fb      	ldrh	r3, [r7, #14]
 800c060:	3301      	adds	r3, #1
 800c062:	81fb      	strh	r3, [r7, #14]
    p = p->next;
 800c064:	687b      	ldr	r3, [r7, #4]
 800c066:	681b      	ldr	r3, [r3, #0]
 800c068:	607b      	str	r3, [r7, #4]
  while (p != NULL) {
 800c06a:	687b      	ldr	r3, [r7, #4]
 800c06c:	2b00      	cmp	r3, #0
 800c06e:	d1f6      	bne.n	800c05e <pbuf_clen+0xe>
  }
  return len;
 800c070:	89fb      	ldrh	r3, [r7, #14]
}
 800c072:	4618      	mov	r0, r3
 800c074:	3714      	adds	r7, #20
 800c076:	46bd      	mov	sp, r7
 800c078:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c07c:	4770      	bx	lr
	...

0800c080 <pbuf_ref>:
 * @param p pbuf to increase reference counter of
 *
 */
void
pbuf_ref(struct pbuf *p)
{
 800c080:	b580      	push	{r7, lr}
 800c082:	b082      	sub	sp, #8
 800c084:	af00      	add	r7, sp, #0
 800c086:	6078      	str	r0, [r7, #4]
  /* pbuf given? */
  if (p != NULL) {
 800c088:	687b      	ldr	r3, [r7, #4]
 800c08a:	2b00      	cmp	r3, #0
 800c08c:	d010      	beq.n	800c0b0 <pbuf_ref+0x30>
    SYS_ARCH_SET(p->ref, (LWIP_PBUF_REF_T)(p->ref + 1));
 800c08e:	687b      	ldr	r3, [r7, #4]
 800c090:	7b9b      	ldrb	r3, [r3, #14]
 800c092:	3301      	adds	r3, #1
 800c094:	b2da      	uxtb	r2, r3
 800c096:	687b      	ldr	r3, [r7, #4]
 800c098:	739a      	strb	r2, [r3, #14]
    LWIP_ASSERT("pbuf ref overflow", p->ref > 0);
 800c09a:	687b      	ldr	r3, [r7, #4]
 800c09c:	7b9b      	ldrb	r3, [r3, #14]
 800c09e:	2b00      	cmp	r3, #0
 800c0a0:	d106      	bne.n	800c0b0 <pbuf_ref+0x30>
 800c0a2:	4b05      	ldr	r3, [pc, #20]	; (800c0b8 <pbuf_ref+0x38>)
 800c0a4:	f240 3242 	movw	r2, #834	; 0x342
 800c0a8:	4904      	ldr	r1, [pc, #16]	; (800c0bc <pbuf_ref+0x3c>)
 800c0aa:	4805      	ldr	r0, [pc, #20]	; (800c0c0 <pbuf_ref+0x40>)
 800c0ac:	f00c f9ec 	bl	8018488 <iprintf>
  }
}
 800c0b0:	bf00      	nop
 800c0b2:	3708      	adds	r7, #8
 800c0b4:	46bd      	mov	sp, r7
 800c0b6:	bd80      	pop	{r7, pc}
 800c0b8:	080199a4 	.word	0x080199a4
 800c0bc:	08019b84 	.word	0x08019b84
 800c0c0:	08019a04 	.word	0x08019a04

0800c0c4 <pbuf_cat>:
 *
 * @see pbuf_chain()
 */
void
pbuf_cat(struct pbuf *h, struct pbuf *t)
{
 800c0c4:	b580      	push	{r7, lr}
 800c0c6:	b084      	sub	sp, #16
 800c0c8:	af00      	add	r7, sp, #0
 800c0ca:	6078      	str	r0, [r7, #4]
 800c0cc:	6039      	str	r1, [r7, #0]
  struct pbuf *p;

  LWIP_ERROR("(h != NULL) && (t != NULL) (programmer violates API)",
 800c0ce:	687b      	ldr	r3, [r7, #4]
 800c0d0:	2b00      	cmp	r3, #0
 800c0d2:	d002      	beq.n	800c0da <pbuf_cat+0x16>
 800c0d4:	683b      	ldr	r3, [r7, #0]
 800c0d6:	2b00      	cmp	r3, #0
 800c0d8:	d107      	bne.n	800c0ea <pbuf_cat+0x26>
 800c0da:	4b20      	ldr	r3, [pc, #128]	; (800c15c <pbuf_cat+0x98>)
 800c0dc:	f240 3259 	movw	r2, #857	; 0x359
 800c0e0:	491f      	ldr	r1, [pc, #124]	; (800c160 <pbuf_cat+0x9c>)
 800c0e2:	4820      	ldr	r0, [pc, #128]	; (800c164 <pbuf_cat+0xa0>)
 800c0e4:	f00c f9d0 	bl	8018488 <iprintf>
 800c0e8:	e034      	b.n	800c154 <pbuf_cat+0x90>
             ((h != NULL) && (t != NULL)), return;);

  /* proceed to last pbuf of chain */
  for (p = h; p->next != NULL; p = p->next) {
 800c0ea:	687b      	ldr	r3, [r7, #4]
 800c0ec:	60fb      	str	r3, [r7, #12]
 800c0ee:	e00a      	b.n	800c106 <pbuf_cat+0x42>
    /* add total length of second chain to all totals of first chain */
    p->tot_len = (u16_t)(p->tot_len + t->tot_len);
 800c0f0:	68fb      	ldr	r3, [r7, #12]
 800c0f2:	891a      	ldrh	r2, [r3, #8]
 800c0f4:	683b      	ldr	r3, [r7, #0]
 800c0f6:	891b      	ldrh	r3, [r3, #8]
 800c0f8:	4413      	add	r3, r2
 800c0fa:	b29a      	uxth	r2, r3
 800c0fc:	68fb      	ldr	r3, [r7, #12]
 800c0fe:	811a      	strh	r2, [r3, #8]
  for (p = h; p->next != NULL; p = p->next) {
 800c100:	68fb      	ldr	r3, [r7, #12]
 800c102:	681b      	ldr	r3, [r3, #0]
 800c104:	60fb      	str	r3, [r7, #12]
 800c106:	68fb      	ldr	r3, [r7, #12]
 800c108:	681b      	ldr	r3, [r3, #0]
 800c10a:	2b00      	cmp	r3, #0
 800c10c:	d1f0      	bne.n	800c0f0 <pbuf_cat+0x2c>
  }
  /* { p is last pbuf of first h chain, p->next == NULL } */
  LWIP_ASSERT("p->tot_len == p->len (of last pbuf in chain)", p->tot_len == p->len);
 800c10e:	68fb      	ldr	r3, [r7, #12]
 800c110:	891a      	ldrh	r2, [r3, #8]
 800c112:	68fb      	ldr	r3, [r7, #12]
 800c114:	895b      	ldrh	r3, [r3, #10]
 800c116:	429a      	cmp	r2, r3
 800c118:	d006      	beq.n	800c128 <pbuf_cat+0x64>
 800c11a:	4b10      	ldr	r3, [pc, #64]	; (800c15c <pbuf_cat+0x98>)
 800c11c:	f240 3262 	movw	r2, #866	; 0x362
 800c120:	4911      	ldr	r1, [pc, #68]	; (800c168 <pbuf_cat+0xa4>)
 800c122:	4810      	ldr	r0, [pc, #64]	; (800c164 <pbuf_cat+0xa0>)
 800c124:	f00c f9b0 	bl	8018488 <iprintf>
  LWIP_ASSERT("p->next == NULL", p->next == NULL);
 800c128:	68fb      	ldr	r3, [r7, #12]
 800c12a:	681b      	ldr	r3, [r3, #0]
 800c12c:	2b00      	cmp	r3, #0
 800c12e:	d006      	beq.n	800c13e <pbuf_cat+0x7a>
 800c130:	4b0a      	ldr	r3, [pc, #40]	; (800c15c <pbuf_cat+0x98>)
 800c132:	f240 3263 	movw	r2, #867	; 0x363
 800c136:	490d      	ldr	r1, [pc, #52]	; (800c16c <pbuf_cat+0xa8>)
 800c138:	480a      	ldr	r0, [pc, #40]	; (800c164 <pbuf_cat+0xa0>)
 800c13a:	f00c f9a5 	bl	8018488 <iprintf>
  /* add total length of second chain to last pbuf total of first chain */
  p->tot_len = (u16_t)(p->tot_len + t->tot_len);
 800c13e:	68fb      	ldr	r3, [r7, #12]
 800c140:	891a      	ldrh	r2, [r3, #8]
 800c142:	683b      	ldr	r3, [r7, #0]
 800c144:	891b      	ldrh	r3, [r3, #8]
 800c146:	4413      	add	r3, r2
 800c148:	b29a      	uxth	r2, r3
 800c14a:	68fb      	ldr	r3, [r7, #12]
 800c14c:	811a      	strh	r2, [r3, #8]
  /* chain last pbuf of head (p) with first of tail (t) */
  p->next = t;
 800c14e:	68fb      	ldr	r3, [r7, #12]
 800c150:	683a      	ldr	r2, [r7, #0]
 800c152:	601a      	str	r2, [r3, #0]
  /* p->next now references t, but the caller will drop its reference to t,
   * so netto there is no change to the reference count of t.
   */
}
 800c154:	3710      	adds	r7, #16
 800c156:	46bd      	mov	sp, r7
 800c158:	bd80      	pop	{r7, pc}
 800c15a:	bf00      	nop
 800c15c:	080199a4 	.word	0x080199a4
 800c160:	08019b98 	.word	0x08019b98
 800c164:	08019a04 	.word	0x08019a04
 800c168:	08019bd0 	.word	0x08019bd0
 800c16c:	08019c00 	.word	0x08019c00

0800c170 <pbuf_chain>:
 * The ->ref field of the first pbuf of the tail chain is adjusted.
 *
 */
void
pbuf_chain(struct pbuf *h, struct pbuf *t)
{
 800c170:	b580      	push	{r7, lr}
 800c172:	b082      	sub	sp, #8
 800c174:	af00      	add	r7, sp, #0
 800c176:	6078      	str	r0, [r7, #4]
 800c178:	6039      	str	r1, [r7, #0]
  pbuf_cat(h, t);
 800c17a:	6839      	ldr	r1, [r7, #0]
 800c17c:	6878      	ldr	r0, [r7, #4]
 800c17e:	f7ff ffa1 	bl	800c0c4 <pbuf_cat>
  /* t is now referenced by h */
  pbuf_ref(t);
 800c182:	6838      	ldr	r0, [r7, #0]
 800c184:	f7ff ff7c 	bl	800c080 <pbuf_ref>
  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_chain: %p references %p\n", (void *)h, (void *)t));
}
 800c188:	bf00      	nop
 800c18a:	3708      	adds	r7, #8
 800c18c:	46bd      	mov	sp, r7
 800c18e:	bd80      	pop	{r7, pc}

0800c190 <pbuf_copy>:
 *         ERR_ARG if one of the pbufs is NULL or p_to is not big
 *                 enough to hold p_from
 */
err_t
pbuf_copy(struct pbuf *p_to, const struct pbuf *p_from)
{
 800c190:	b580      	push	{r7, lr}
 800c192:	b086      	sub	sp, #24
 800c194:	af00      	add	r7, sp, #0
 800c196:	6078      	str	r0, [r7, #4]
 800c198:	6039      	str	r1, [r7, #0]
  size_t offset_to = 0, offset_from = 0, len;
 800c19a:	2300      	movs	r3, #0
 800c19c:	617b      	str	r3, [r7, #20]
 800c19e:	2300      	movs	r3, #0
 800c1a0:	613b      	str	r3, [r7, #16]

  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_copy(%p, %p)\n",
              (const void *)p_to, (const void *)p_from));

  /* is the target big enough to hold the source? */
  LWIP_ERROR("pbuf_copy: target not big enough to hold source", ((p_to != NULL) &&
 800c1a2:	687b      	ldr	r3, [r7, #4]
 800c1a4:	2b00      	cmp	r3, #0
 800c1a6:	d008      	beq.n	800c1ba <pbuf_copy+0x2a>
 800c1a8:	683b      	ldr	r3, [r7, #0]
 800c1aa:	2b00      	cmp	r3, #0
 800c1ac:	d005      	beq.n	800c1ba <pbuf_copy+0x2a>
 800c1ae:	687b      	ldr	r3, [r7, #4]
 800c1b0:	891a      	ldrh	r2, [r3, #8]
 800c1b2:	683b      	ldr	r3, [r7, #0]
 800c1b4:	891b      	ldrh	r3, [r3, #8]
 800c1b6:	429a      	cmp	r2, r3
 800c1b8:	d209      	bcs.n	800c1ce <pbuf_copy+0x3e>
 800c1ba:	4b57      	ldr	r3, [pc, #348]	; (800c318 <pbuf_copy+0x188>)
 800c1bc:	f240 32c9 	movw	r2, #969	; 0x3c9
 800c1c0:	4956      	ldr	r1, [pc, #344]	; (800c31c <pbuf_copy+0x18c>)
 800c1c2:	4857      	ldr	r0, [pc, #348]	; (800c320 <pbuf_copy+0x190>)
 800c1c4:	f00c f960 	bl	8018488 <iprintf>
 800c1c8:	f06f 030f 	mvn.w	r3, #15
 800c1cc:	e09f      	b.n	800c30e <pbuf_copy+0x17e>
             (p_from != NULL) && (p_to->tot_len >= p_from->tot_len)), return ERR_ARG;);

  /* iterate through pbuf chain */
  do {
    /* copy one part of the original chain */
    if ((p_to->len - offset_to) >= (p_from->len - offset_from)) {
 800c1ce:	687b      	ldr	r3, [r7, #4]
 800c1d0:	895b      	ldrh	r3, [r3, #10]
 800c1d2:	461a      	mov	r2, r3
 800c1d4:	697b      	ldr	r3, [r7, #20]
 800c1d6:	1ad2      	subs	r2, r2, r3
 800c1d8:	683b      	ldr	r3, [r7, #0]
 800c1da:	895b      	ldrh	r3, [r3, #10]
 800c1dc:	4619      	mov	r1, r3
 800c1de:	693b      	ldr	r3, [r7, #16]
 800c1e0:	1acb      	subs	r3, r1, r3
 800c1e2:	429a      	cmp	r2, r3
 800c1e4:	d306      	bcc.n	800c1f4 <pbuf_copy+0x64>
      /* complete current p_from fits into current p_to */
      len = p_from->len - offset_from;
 800c1e6:	683b      	ldr	r3, [r7, #0]
 800c1e8:	895b      	ldrh	r3, [r3, #10]
 800c1ea:	461a      	mov	r2, r3
 800c1ec:	693b      	ldr	r3, [r7, #16]
 800c1ee:	1ad3      	subs	r3, r2, r3
 800c1f0:	60fb      	str	r3, [r7, #12]
 800c1f2:	e005      	b.n	800c200 <pbuf_copy+0x70>
    } else {
      /* current p_from does not fit into current p_to */
      len = p_to->len - offset_to;
 800c1f4:	687b      	ldr	r3, [r7, #4]
 800c1f6:	895b      	ldrh	r3, [r3, #10]
 800c1f8:	461a      	mov	r2, r3
 800c1fa:	697b      	ldr	r3, [r7, #20]
 800c1fc:	1ad3      	subs	r3, r2, r3
 800c1fe:	60fb      	str	r3, [r7, #12]
    }
    MEMCPY((u8_t *)p_to->payload + offset_to, (u8_t *)p_from->payload + offset_from, len);
 800c200:	687b      	ldr	r3, [r7, #4]
 800c202:	685a      	ldr	r2, [r3, #4]
 800c204:	697b      	ldr	r3, [r7, #20]
 800c206:	18d0      	adds	r0, r2, r3
 800c208:	683b      	ldr	r3, [r7, #0]
 800c20a:	685a      	ldr	r2, [r3, #4]
 800c20c:	693b      	ldr	r3, [r7, #16]
 800c20e:	4413      	add	r3, r2
 800c210:	68fa      	ldr	r2, [r7, #12]
 800c212:	4619      	mov	r1, r3
 800c214:	f00c fa2b 	bl	801866e <memcpy>
    offset_to += len;
 800c218:	697a      	ldr	r2, [r7, #20]
 800c21a:	68fb      	ldr	r3, [r7, #12]
 800c21c:	4413      	add	r3, r2
 800c21e:	617b      	str	r3, [r7, #20]
    offset_from += len;
 800c220:	693a      	ldr	r2, [r7, #16]
 800c222:	68fb      	ldr	r3, [r7, #12]
 800c224:	4413      	add	r3, r2
 800c226:	613b      	str	r3, [r7, #16]
    LWIP_ASSERT("offset_to <= p_to->len", offset_to <= p_to->len);
 800c228:	687b      	ldr	r3, [r7, #4]
 800c22a:	895b      	ldrh	r3, [r3, #10]
 800c22c:	461a      	mov	r2, r3
 800c22e:	697b      	ldr	r3, [r7, #20]
 800c230:	4293      	cmp	r3, r2
 800c232:	d906      	bls.n	800c242 <pbuf_copy+0xb2>
 800c234:	4b38      	ldr	r3, [pc, #224]	; (800c318 <pbuf_copy+0x188>)
 800c236:	f240 32d9 	movw	r2, #985	; 0x3d9
 800c23a:	493a      	ldr	r1, [pc, #232]	; (800c324 <pbuf_copy+0x194>)
 800c23c:	4838      	ldr	r0, [pc, #224]	; (800c320 <pbuf_copy+0x190>)
 800c23e:	f00c f923 	bl	8018488 <iprintf>
    LWIP_ASSERT("offset_from <= p_from->len", offset_from <= p_from->len);
 800c242:	683b      	ldr	r3, [r7, #0]
 800c244:	895b      	ldrh	r3, [r3, #10]
 800c246:	461a      	mov	r2, r3
 800c248:	693b      	ldr	r3, [r7, #16]
 800c24a:	4293      	cmp	r3, r2
 800c24c:	d906      	bls.n	800c25c <pbuf_copy+0xcc>
 800c24e:	4b32      	ldr	r3, [pc, #200]	; (800c318 <pbuf_copy+0x188>)
 800c250:	f240 32da 	movw	r2, #986	; 0x3da
 800c254:	4934      	ldr	r1, [pc, #208]	; (800c328 <pbuf_copy+0x198>)
 800c256:	4832      	ldr	r0, [pc, #200]	; (800c320 <pbuf_copy+0x190>)
 800c258:	f00c f916 	bl	8018488 <iprintf>
    if (offset_from >= p_from->len) {
 800c25c:	683b      	ldr	r3, [r7, #0]
 800c25e:	895b      	ldrh	r3, [r3, #10]
 800c260:	461a      	mov	r2, r3
 800c262:	693b      	ldr	r3, [r7, #16]
 800c264:	4293      	cmp	r3, r2
 800c266:	d304      	bcc.n	800c272 <pbuf_copy+0xe2>
      /* on to next p_from (if any) */
      offset_from = 0;
 800c268:	2300      	movs	r3, #0
 800c26a:	613b      	str	r3, [r7, #16]
      p_from = p_from->next;
 800c26c:	683b      	ldr	r3, [r7, #0]
 800c26e:	681b      	ldr	r3, [r3, #0]
 800c270:	603b      	str	r3, [r7, #0]
    }
    if (offset_to == p_to->len) {
 800c272:	687b      	ldr	r3, [r7, #4]
 800c274:	895b      	ldrh	r3, [r3, #10]
 800c276:	461a      	mov	r2, r3
 800c278:	697b      	ldr	r3, [r7, #20]
 800c27a:	4293      	cmp	r3, r2
 800c27c:	d114      	bne.n	800c2a8 <pbuf_copy+0x118>
      /* on to next p_to (if any) */
      offset_to = 0;
 800c27e:	2300      	movs	r3, #0
 800c280:	617b      	str	r3, [r7, #20]
      p_to = p_to->next;
 800c282:	687b      	ldr	r3, [r7, #4]
 800c284:	681b      	ldr	r3, [r3, #0]
 800c286:	607b      	str	r3, [r7, #4]
      LWIP_ERROR("p_to != NULL", (p_to != NULL) || (p_from == NULL), return ERR_ARG;);
 800c288:	687b      	ldr	r3, [r7, #4]
 800c28a:	2b00      	cmp	r3, #0
 800c28c:	d10c      	bne.n	800c2a8 <pbuf_copy+0x118>
 800c28e:	683b      	ldr	r3, [r7, #0]
 800c290:	2b00      	cmp	r3, #0
 800c292:	d009      	beq.n	800c2a8 <pbuf_copy+0x118>
 800c294:	4b20      	ldr	r3, [pc, #128]	; (800c318 <pbuf_copy+0x188>)
 800c296:	f44f 7279 	mov.w	r2, #996	; 0x3e4
 800c29a:	4924      	ldr	r1, [pc, #144]	; (800c32c <pbuf_copy+0x19c>)
 800c29c:	4820      	ldr	r0, [pc, #128]	; (800c320 <pbuf_copy+0x190>)
 800c29e:	f00c f8f3 	bl	8018488 <iprintf>
 800c2a2:	f06f 030f 	mvn.w	r3, #15
 800c2a6:	e032      	b.n	800c30e <pbuf_copy+0x17e>
    }

    if ((p_from != NULL) && (p_from->len == p_from->tot_len)) {
 800c2a8:	683b      	ldr	r3, [r7, #0]
 800c2aa:	2b00      	cmp	r3, #0
 800c2ac:	d013      	beq.n	800c2d6 <pbuf_copy+0x146>
 800c2ae:	683b      	ldr	r3, [r7, #0]
 800c2b0:	895a      	ldrh	r2, [r3, #10]
 800c2b2:	683b      	ldr	r3, [r7, #0]
 800c2b4:	891b      	ldrh	r3, [r3, #8]
 800c2b6:	429a      	cmp	r2, r3
 800c2b8:	d10d      	bne.n	800c2d6 <pbuf_copy+0x146>
      /* don't copy more than one packet! */
      LWIP_ERROR("pbuf_copy() does not allow packet queues!",
 800c2ba:	683b      	ldr	r3, [r7, #0]
 800c2bc:	681b      	ldr	r3, [r3, #0]
 800c2be:	2b00      	cmp	r3, #0
 800c2c0:	d009      	beq.n	800c2d6 <pbuf_copy+0x146>
 800c2c2:	4b15      	ldr	r3, [pc, #84]	; (800c318 <pbuf_copy+0x188>)
 800c2c4:	f240 32e9 	movw	r2, #1001	; 0x3e9
 800c2c8:	4919      	ldr	r1, [pc, #100]	; (800c330 <pbuf_copy+0x1a0>)
 800c2ca:	4815      	ldr	r0, [pc, #84]	; (800c320 <pbuf_copy+0x190>)
 800c2cc:	f00c f8dc 	bl	8018488 <iprintf>
 800c2d0:	f06f 0305 	mvn.w	r3, #5
 800c2d4:	e01b      	b.n	800c30e <pbuf_copy+0x17e>
                 (p_from->next == NULL), return ERR_VAL;);
    }
    if ((p_to != NULL) && (p_to->len == p_to->tot_len)) {
 800c2d6:	687b      	ldr	r3, [r7, #4]
 800c2d8:	2b00      	cmp	r3, #0
 800c2da:	d013      	beq.n	800c304 <pbuf_copy+0x174>
 800c2dc:	687b      	ldr	r3, [r7, #4]
 800c2de:	895a      	ldrh	r2, [r3, #10]
 800c2e0:	687b      	ldr	r3, [r7, #4]
 800c2e2:	891b      	ldrh	r3, [r3, #8]
 800c2e4:	429a      	cmp	r2, r3
 800c2e6:	d10d      	bne.n	800c304 <pbuf_copy+0x174>
      /* don't copy more than one packet! */
      LWIP_ERROR("pbuf_copy() does not allow packet queues!",
 800c2e8:	687b      	ldr	r3, [r7, #4]
 800c2ea:	681b      	ldr	r3, [r3, #0]
 800c2ec:	2b00      	cmp	r3, #0
 800c2ee:	d009      	beq.n	800c304 <pbuf_copy+0x174>
 800c2f0:	4b09      	ldr	r3, [pc, #36]	; (800c318 <pbuf_copy+0x188>)
 800c2f2:	f240 32ee 	movw	r2, #1006	; 0x3ee
 800c2f6:	490e      	ldr	r1, [pc, #56]	; (800c330 <pbuf_copy+0x1a0>)
 800c2f8:	4809      	ldr	r0, [pc, #36]	; (800c320 <pbuf_copy+0x190>)
 800c2fa:	f00c f8c5 	bl	8018488 <iprintf>
 800c2fe:	f06f 0305 	mvn.w	r3, #5
 800c302:	e004      	b.n	800c30e <pbuf_copy+0x17e>
                 (p_to->next == NULL), return ERR_VAL;);
    }
  } while (p_from);
 800c304:	683b      	ldr	r3, [r7, #0]
 800c306:	2b00      	cmp	r3, #0
 800c308:	f47f af61 	bne.w	800c1ce <pbuf_copy+0x3e>
  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_copy: end of chain reached.\n"));
  return ERR_OK;
 800c30c:	2300      	movs	r3, #0
}
 800c30e:	4618      	mov	r0, r3
 800c310:	3718      	adds	r7, #24
 800c312:	46bd      	mov	sp, r7
 800c314:	bd80      	pop	{r7, pc}
 800c316:	bf00      	nop
 800c318:	080199a4 	.word	0x080199a4
 800c31c:	08019c4c 	.word	0x08019c4c
 800c320:	08019a04 	.word	0x08019a04
 800c324:	08019c7c 	.word	0x08019c7c
 800c328:	08019c94 	.word	0x08019c94
 800c32c:	08019cb0 	.word	0x08019cb0
 800c330:	08019cc0 	.word	0x08019cc0

0800c334 <pbuf_copy_partial>:
 * @param offset offset into the packet buffer from where to begin copying len bytes
 * @return the number of bytes copied, or 0 on failure
 */
u16_t
pbuf_copy_partial(const struct pbuf *buf, void *dataptr, u16_t len, u16_t offset)
{
 800c334:	b580      	push	{r7, lr}
 800c336:	b088      	sub	sp, #32
 800c338:	af00      	add	r7, sp, #0
 800c33a:	60f8      	str	r0, [r7, #12]
 800c33c:	60b9      	str	r1, [r7, #8]
 800c33e:	4611      	mov	r1, r2
 800c340:	461a      	mov	r2, r3
 800c342:	460b      	mov	r3, r1
 800c344:	80fb      	strh	r3, [r7, #6]
 800c346:	4613      	mov	r3, r2
 800c348:	80bb      	strh	r3, [r7, #4]
  const struct pbuf *p;
  u16_t left = 0;
 800c34a:	2300      	movs	r3, #0
 800c34c:	837b      	strh	r3, [r7, #26]
  u16_t buf_copy_len;
  u16_t copied_total = 0;
 800c34e:	2300      	movs	r3, #0
 800c350:	82fb      	strh	r3, [r7, #22]

  LWIP_ERROR("pbuf_copy_partial: invalid buf", (buf != NULL), return 0;);
 800c352:	68fb      	ldr	r3, [r7, #12]
 800c354:	2b00      	cmp	r3, #0
 800c356:	d108      	bne.n	800c36a <pbuf_copy_partial+0x36>
 800c358:	4b2b      	ldr	r3, [pc, #172]	; (800c408 <pbuf_copy_partial+0xd4>)
 800c35a:	f240 420a 	movw	r2, #1034	; 0x40a
 800c35e:	492b      	ldr	r1, [pc, #172]	; (800c40c <pbuf_copy_partial+0xd8>)
 800c360:	482b      	ldr	r0, [pc, #172]	; (800c410 <pbuf_copy_partial+0xdc>)
 800c362:	f00c f891 	bl	8018488 <iprintf>
 800c366:	2300      	movs	r3, #0
 800c368:	e04a      	b.n	800c400 <pbuf_copy_partial+0xcc>
  LWIP_ERROR("pbuf_copy_partial: invalid dataptr", (dataptr != NULL), return 0;);
 800c36a:	68bb      	ldr	r3, [r7, #8]
 800c36c:	2b00      	cmp	r3, #0
 800c36e:	d108      	bne.n	800c382 <pbuf_copy_partial+0x4e>
 800c370:	4b25      	ldr	r3, [pc, #148]	; (800c408 <pbuf_copy_partial+0xd4>)
 800c372:	f240 420b 	movw	r2, #1035	; 0x40b
 800c376:	4927      	ldr	r1, [pc, #156]	; (800c414 <pbuf_copy_partial+0xe0>)
 800c378:	4825      	ldr	r0, [pc, #148]	; (800c410 <pbuf_copy_partial+0xdc>)
 800c37a:	f00c f885 	bl	8018488 <iprintf>
 800c37e:	2300      	movs	r3, #0
 800c380:	e03e      	b.n	800c400 <pbuf_copy_partial+0xcc>

  /* Note some systems use byte copy if dataptr or one of the pbuf payload pointers are unaligned. */
  for (p = buf; len != 0 && p != NULL; p = p->next) {
 800c382:	68fb      	ldr	r3, [r7, #12]
 800c384:	61fb      	str	r3, [r7, #28]
 800c386:	e034      	b.n	800c3f2 <pbuf_copy_partial+0xbe>
    if ((offset != 0) && (offset >= p->len)) {
 800c388:	88bb      	ldrh	r3, [r7, #4]
 800c38a:	2b00      	cmp	r3, #0
 800c38c:	d00a      	beq.n	800c3a4 <pbuf_copy_partial+0x70>
 800c38e:	69fb      	ldr	r3, [r7, #28]
 800c390:	895b      	ldrh	r3, [r3, #10]
 800c392:	88ba      	ldrh	r2, [r7, #4]
 800c394:	429a      	cmp	r2, r3
 800c396:	d305      	bcc.n	800c3a4 <pbuf_copy_partial+0x70>
      /* don't copy from this buffer -> on to the next */
      offset = (u16_t)(offset - p->len);
 800c398:	69fb      	ldr	r3, [r7, #28]
 800c39a:	895b      	ldrh	r3, [r3, #10]
 800c39c:	88ba      	ldrh	r2, [r7, #4]
 800c39e:	1ad3      	subs	r3, r2, r3
 800c3a0:	80bb      	strh	r3, [r7, #4]
 800c3a2:	e023      	b.n	800c3ec <pbuf_copy_partial+0xb8>
    } else {
      /* copy from this buffer. maybe only partially. */
      buf_copy_len = (u16_t)(p->len - offset);
 800c3a4:	69fb      	ldr	r3, [r7, #28]
 800c3a6:	895a      	ldrh	r2, [r3, #10]
 800c3a8:	88bb      	ldrh	r3, [r7, #4]
 800c3aa:	1ad3      	subs	r3, r2, r3
 800c3ac:	833b      	strh	r3, [r7, #24]
      if (buf_copy_len > len) {
 800c3ae:	8b3a      	ldrh	r2, [r7, #24]
 800c3b0:	88fb      	ldrh	r3, [r7, #6]
 800c3b2:	429a      	cmp	r2, r3
 800c3b4:	d901      	bls.n	800c3ba <pbuf_copy_partial+0x86>
        buf_copy_len = len;
 800c3b6:	88fb      	ldrh	r3, [r7, #6]
 800c3b8:	833b      	strh	r3, [r7, #24]
      }
      /* copy the necessary parts of the buffer */
      MEMCPY(&((char *)dataptr)[left], &((char *)p->payload)[offset], buf_copy_len);
 800c3ba:	8b7b      	ldrh	r3, [r7, #26]
 800c3bc:	68ba      	ldr	r2, [r7, #8]
 800c3be:	18d0      	adds	r0, r2, r3
 800c3c0:	69fb      	ldr	r3, [r7, #28]
 800c3c2:	685a      	ldr	r2, [r3, #4]
 800c3c4:	88bb      	ldrh	r3, [r7, #4]
 800c3c6:	4413      	add	r3, r2
 800c3c8:	8b3a      	ldrh	r2, [r7, #24]
 800c3ca:	4619      	mov	r1, r3
 800c3cc:	f00c f94f 	bl	801866e <memcpy>
      copied_total = (u16_t)(copied_total + buf_copy_len);
 800c3d0:	8afa      	ldrh	r2, [r7, #22]
 800c3d2:	8b3b      	ldrh	r3, [r7, #24]
 800c3d4:	4413      	add	r3, r2
 800c3d6:	82fb      	strh	r3, [r7, #22]
      left = (u16_t)(left + buf_copy_len);
 800c3d8:	8b7a      	ldrh	r2, [r7, #26]
 800c3da:	8b3b      	ldrh	r3, [r7, #24]
 800c3dc:	4413      	add	r3, r2
 800c3de:	837b      	strh	r3, [r7, #26]
      len = (u16_t)(len - buf_copy_len);
 800c3e0:	88fa      	ldrh	r2, [r7, #6]
 800c3e2:	8b3b      	ldrh	r3, [r7, #24]
 800c3e4:	1ad3      	subs	r3, r2, r3
 800c3e6:	80fb      	strh	r3, [r7, #6]
      offset = 0;
 800c3e8:	2300      	movs	r3, #0
 800c3ea:	80bb      	strh	r3, [r7, #4]
  for (p = buf; len != 0 && p != NULL; p = p->next) {
 800c3ec:	69fb      	ldr	r3, [r7, #28]
 800c3ee:	681b      	ldr	r3, [r3, #0]
 800c3f0:	61fb      	str	r3, [r7, #28]
 800c3f2:	88fb      	ldrh	r3, [r7, #6]
 800c3f4:	2b00      	cmp	r3, #0
 800c3f6:	d002      	beq.n	800c3fe <pbuf_copy_partial+0xca>
 800c3f8:	69fb      	ldr	r3, [r7, #28]
 800c3fa:	2b00      	cmp	r3, #0
 800c3fc:	d1c4      	bne.n	800c388 <pbuf_copy_partial+0x54>
    }
  }
  return copied_total;
 800c3fe:	8afb      	ldrh	r3, [r7, #22]
}
 800c400:	4618      	mov	r0, r3
 800c402:	3720      	adds	r7, #32
 800c404:	46bd      	mov	sp, r7
 800c406:	bd80      	pop	{r7, pc}
 800c408:	080199a4 	.word	0x080199a4
 800c40c:	08019cec 	.word	0x08019cec
 800c410:	08019a04 	.word	0x08019a04
 800c414:	08019d0c 	.word	0x08019d0c

0800c418 <pbuf_skip_const>:
#endif /* LWIP_TCP && TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */

/* Actual implementation of pbuf_skip() but returning const pointer... */
static const struct pbuf *
pbuf_skip_const(const struct pbuf *in, u16_t in_offset, u16_t *out_offset)
{
 800c418:	b480      	push	{r7}
 800c41a:	b087      	sub	sp, #28
 800c41c:	af00      	add	r7, sp, #0
 800c41e:	60f8      	str	r0, [r7, #12]
 800c420:	460b      	mov	r3, r1
 800c422:	607a      	str	r2, [r7, #4]
 800c424:	817b      	strh	r3, [r7, #10]
  u16_t offset_left = in_offset;
 800c426:	897b      	ldrh	r3, [r7, #10]
 800c428:	82fb      	strh	r3, [r7, #22]
  const struct pbuf *q = in;
 800c42a:	68fb      	ldr	r3, [r7, #12]
 800c42c:	613b      	str	r3, [r7, #16]

  /* get the correct pbuf */
  while ((q != NULL) && (q->len <= offset_left)) {
 800c42e:	e007      	b.n	800c440 <pbuf_skip_const+0x28>
    offset_left = (u16_t)(offset_left - q->len);
 800c430:	693b      	ldr	r3, [r7, #16]
 800c432:	895b      	ldrh	r3, [r3, #10]
 800c434:	8afa      	ldrh	r2, [r7, #22]
 800c436:	1ad3      	subs	r3, r2, r3
 800c438:	82fb      	strh	r3, [r7, #22]
    q = q->next;
 800c43a:	693b      	ldr	r3, [r7, #16]
 800c43c:	681b      	ldr	r3, [r3, #0]
 800c43e:	613b      	str	r3, [r7, #16]
  while ((q != NULL) && (q->len <= offset_left)) {
 800c440:	693b      	ldr	r3, [r7, #16]
 800c442:	2b00      	cmp	r3, #0
 800c444:	d004      	beq.n	800c450 <pbuf_skip_const+0x38>
 800c446:	693b      	ldr	r3, [r7, #16]
 800c448:	895b      	ldrh	r3, [r3, #10]
 800c44a:	8afa      	ldrh	r2, [r7, #22]
 800c44c:	429a      	cmp	r2, r3
 800c44e:	d2ef      	bcs.n	800c430 <pbuf_skip_const+0x18>
  }
  if (out_offset != NULL) {
 800c450:	687b      	ldr	r3, [r7, #4]
 800c452:	2b00      	cmp	r3, #0
 800c454:	d002      	beq.n	800c45c <pbuf_skip_const+0x44>
    *out_offset = offset_left;
 800c456:	687b      	ldr	r3, [r7, #4]
 800c458:	8afa      	ldrh	r2, [r7, #22]
 800c45a:	801a      	strh	r2, [r3, #0]
  }
  return q;
 800c45c:	693b      	ldr	r3, [r7, #16]
}
 800c45e:	4618      	mov	r0, r3
 800c460:	371c      	adds	r7, #28
 800c462:	46bd      	mov	sp, r7
 800c464:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c468:	4770      	bx	lr

0800c46a <pbuf_skip>:
 * @param out_offset resulting offset in the returned pbuf
 * @return the pbuf in the queue where the offset is
 */
struct pbuf *
pbuf_skip(struct pbuf *in, u16_t in_offset, u16_t *out_offset)
{
 800c46a:	b580      	push	{r7, lr}
 800c46c:	b086      	sub	sp, #24
 800c46e:	af00      	add	r7, sp, #0
 800c470:	60f8      	str	r0, [r7, #12]
 800c472:	460b      	mov	r3, r1
 800c474:	607a      	str	r2, [r7, #4]
 800c476:	817b      	strh	r3, [r7, #10]
  const struct pbuf *out = pbuf_skip_const(in, in_offset, out_offset);
 800c478:	897b      	ldrh	r3, [r7, #10]
 800c47a:	687a      	ldr	r2, [r7, #4]
 800c47c:	4619      	mov	r1, r3
 800c47e:	68f8      	ldr	r0, [r7, #12]
 800c480:	f7ff ffca 	bl	800c418 <pbuf_skip_const>
 800c484:	6178      	str	r0, [r7, #20]
  return LWIP_CONST_CAST(struct pbuf *, out);
 800c486:	697b      	ldr	r3, [r7, #20]
}
 800c488:	4618      	mov	r0, r3
 800c48a:	3718      	adds	r7, #24
 800c48c:	46bd      	mov	sp, r7
 800c48e:	bd80      	pop	{r7, pc}

0800c490 <pbuf_take>:
 *
 * @return ERR_OK if successful, ERR_MEM if the pbuf is not big enough
 */
err_t
pbuf_take(struct pbuf *buf, const void *dataptr, u16_t len)
{
 800c490:	b580      	push	{r7, lr}
 800c492:	b088      	sub	sp, #32
 800c494:	af00      	add	r7, sp, #0
 800c496:	60f8      	str	r0, [r7, #12]
 800c498:	60b9      	str	r1, [r7, #8]
 800c49a:	4613      	mov	r3, r2
 800c49c:	80fb      	strh	r3, [r7, #6]
  struct pbuf *p;
  size_t buf_copy_len;
  size_t total_copy_len = len;
 800c49e:	88fb      	ldrh	r3, [r7, #6]
 800c4a0:	617b      	str	r3, [r7, #20]
  size_t copied_total = 0;
 800c4a2:	2300      	movs	r3, #0
 800c4a4:	613b      	str	r3, [r7, #16]

  LWIP_ERROR("pbuf_take: invalid buf", (buf != NULL), return ERR_ARG;);
 800c4a6:	68fb      	ldr	r3, [r7, #12]
 800c4a8:	2b00      	cmp	r3, #0
 800c4aa:	d109      	bne.n	800c4c0 <pbuf_take+0x30>
 800c4ac:	4b3a      	ldr	r3, [pc, #232]	; (800c598 <pbuf_take+0x108>)
 800c4ae:	f240 42b3 	movw	r2, #1203	; 0x4b3
 800c4b2:	493a      	ldr	r1, [pc, #232]	; (800c59c <pbuf_take+0x10c>)
 800c4b4:	483a      	ldr	r0, [pc, #232]	; (800c5a0 <pbuf_take+0x110>)
 800c4b6:	f00b ffe7 	bl	8018488 <iprintf>
 800c4ba:	f06f 030f 	mvn.w	r3, #15
 800c4be:	e067      	b.n	800c590 <pbuf_take+0x100>
  LWIP_ERROR("pbuf_take: invalid dataptr", (dataptr != NULL), return ERR_ARG;);
 800c4c0:	68bb      	ldr	r3, [r7, #8]
 800c4c2:	2b00      	cmp	r3, #0
 800c4c4:	d109      	bne.n	800c4da <pbuf_take+0x4a>
 800c4c6:	4b34      	ldr	r3, [pc, #208]	; (800c598 <pbuf_take+0x108>)
 800c4c8:	f240 42b4 	movw	r2, #1204	; 0x4b4
 800c4cc:	4935      	ldr	r1, [pc, #212]	; (800c5a4 <pbuf_take+0x114>)
 800c4ce:	4834      	ldr	r0, [pc, #208]	; (800c5a0 <pbuf_take+0x110>)
 800c4d0:	f00b ffda 	bl	8018488 <iprintf>
 800c4d4:	f06f 030f 	mvn.w	r3, #15
 800c4d8:	e05a      	b.n	800c590 <pbuf_take+0x100>
  LWIP_ERROR("pbuf_take: buf not large enough", (buf->tot_len >= len), return ERR_MEM;);
 800c4da:	68fb      	ldr	r3, [r7, #12]
 800c4dc:	891b      	ldrh	r3, [r3, #8]
 800c4de:	88fa      	ldrh	r2, [r7, #6]
 800c4e0:	429a      	cmp	r2, r3
 800c4e2:	d909      	bls.n	800c4f8 <pbuf_take+0x68>
 800c4e4:	4b2c      	ldr	r3, [pc, #176]	; (800c598 <pbuf_take+0x108>)
 800c4e6:	f240 42b5 	movw	r2, #1205	; 0x4b5
 800c4ea:	492f      	ldr	r1, [pc, #188]	; (800c5a8 <pbuf_take+0x118>)
 800c4ec:	482c      	ldr	r0, [pc, #176]	; (800c5a0 <pbuf_take+0x110>)
 800c4ee:	f00b ffcb 	bl	8018488 <iprintf>
 800c4f2:	f04f 33ff 	mov.w	r3, #4294967295
 800c4f6:	e04b      	b.n	800c590 <pbuf_take+0x100>

  if ((buf == NULL) || (dataptr == NULL) || (buf->tot_len < len)) {
 800c4f8:	68fb      	ldr	r3, [r7, #12]
 800c4fa:	2b00      	cmp	r3, #0
 800c4fc:	d007      	beq.n	800c50e <pbuf_take+0x7e>
 800c4fe:	68bb      	ldr	r3, [r7, #8]
 800c500:	2b00      	cmp	r3, #0
 800c502:	d004      	beq.n	800c50e <pbuf_take+0x7e>
 800c504:	68fb      	ldr	r3, [r7, #12]
 800c506:	891b      	ldrh	r3, [r3, #8]
 800c508:	88fa      	ldrh	r2, [r7, #6]
 800c50a:	429a      	cmp	r2, r3
 800c50c:	d902      	bls.n	800c514 <pbuf_take+0x84>
    return ERR_ARG;
 800c50e:	f06f 030f 	mvn.w	r3, #15
 800c512:	e03d      	b.n	800c590 <pbuf_take+0x100>
  }

  /* Note some systems use byte copy if dataptr or one of the pbuf payload pointers are unaligned. */
  for (p = buf; total_copy_len != 0; p = p->next) {
 800c514:	68fb      	ldr	r3, [r7, #12]
 800c516:	61fb      	str	r3, [r7, #28]
 800c518:	e028      	b.n	800c56c <pbuf_take+0xdc>
    LWIP_ASSERT("pbuf_take: invalid pbuf", p != NULL);
 800c51a:	69fb      	ldr	r3, [r7, #28]
 800c51c:	2b00      	cmp	r3, #0
 800c51e:	d106      	bne.n	800c52e <pbuf_take+0x9e>
 800c520:	4b1d      	ldr	r3, [pc, #116]	; (800c598 <pbuf_take+0x108>)
 800c522:	f240 42bd 	movw	r2, #1213	; 0x4bd
 800c526:	4921      	ldr	r1, [pc, #132]	; (800c5ac <pbuf_take+0x11c>)
 800c528:	481d      	ldr	r0, [pc, #116]	; (800c5a0 <pbuf_take+0x110>)
 800c52a:	f00b ffad 	bl	8018488 <iprintf>
    buf_copy_len = total_copy_len;
 800c52e:	697b      	ldr	r3, [r7, #20]
 800c530:	61bb      	str	r3, [r7, #24]
    if (buf_copy_len > p->len) {
 800c532:	69fb      	ldr	r3, [r7, #28]
 800c534:	895b      	ldrh	r3, [r3, #10]
 800c536:	461a      	mov	r2, r3
 800c538:	69bb      	ldr	r3, [r7, #24]
 800c53a:	4293      	cmp	r3, r2
 800c53c:	d902      	bls.n	800c544 <pbuf_take+0xb4>
      /* this pbuf cannot hold all remaining data */
      buf_copy_len = p->len;
 800c53e:	69fb      	ldr	r3, [r7, #28]
 800c540:	895b      	ldrh	r3, [r3, #10]
 800c542:	61bb      	str	r3, [r7, #24]
    }
    /* copy the necessary parts of the buffer */
    MEMCPY(p->payload, &((const char *)dataptr)[copied_total], buf_copy_len);
 800c544:	69fb      	ldr	r3, [r7, #28]
 800c546:	6858      	ldr	r0, [r3, #4]
 800c548:	68ba      	ldr	r2, [r7, #8]
 800c54a:	693b      	ldr	r3, [r7, #16]
 800c54c:	4413      	add	r3, r2
 800c54e:	69ba      	ldr	r2, [r7, #24]
 800c550:	4619      	mov	r1, r3
 800c552:	f00c f88c 	bl	801866e <memcpy>
    total_copy_len -= buf_copy_len;
 800c556:	697a      	ldr	r2, [r7, #20]
 800c558:	69bb      	ldr	r3, [r7, #24]
 800c55a:	1ad3      	subs	r3, r2, r3
 800c55c:	617b      	str	r3, [r7, #20]
    copied_total += buf_copy_len;
 800c55e:	693a      	ldr	r2, [r7, #16]
 800c560:	69bb      	ldr	r3, [r7, #24]
 800c562:	4413      	add	r3, r2
 800c564:	613b      	str	r3, [r7, #16]
  for (p = buf; total_copy_len != 0; p = p->next) {
 800c566:	69fb      	ldr	r3, [r7, #28]
 800c568:	681b      	ldr	r3, [r3, #0]
 800c56a:	61fb      	str	r3, [r7, #28]
 800c56c:	697b      	ldr	r3, [r7, #20]
 800c56e:	2b00      	cmp	r3, #0
 800c570:	d1d3      	bne.n	800c51a <pbuf_take+0x8a>
  }
  LWIP_ASSERT("did not copy all data", total_copy_len == 0 && copied_total == len);
 800c572:	697b      	ldr	r3, [r7, #20]
 800c574:	2b00      	cmp	r3, #0
 800c576:	d103      	bne.n	800c580 <pbuf_take+0xf0>
 800c578:	88fb      	ldrh	r3, [r7, #6]
 800c57a:	693a      	ldr	r2, [r7, #16]
 800c57c:	429a      	cmp	r2, r3
 800c57e:	d006      	beq.n	800c58e <pbuf_take+0xfe>
 800c580:	4b05      	ldr	r3, [pc, #20]	; (800c598 <pbuf_take+0x108>)
 800c582:	f44f 6299 	mov.w	r2, #1224	; 0x4c8
 800c586:	490a      	ldr	r1, [pc, #40]	; (800c5b0 <pbuf_take+0x120>)
 800c588:	4805      	ldr	r0, [pc, #20]	; (800c5a0 <pbuf_take+0x110>)
 800c58a:	f00b ff7d 	bl	8018488 <iprintf>
  return ERR_OK;
 800c58e:	2300      	movs	r3, #0
}
 800c590:	4618      	mov	r0, r3
 800c592:	3720      	adds	r7, #32
 800c594:	46bd      	mov	sp, r7
 800c596:	bd80      	pop	{r7, pc}
 800c598:	080199a4 	.word	0x080199a4
 800c59c:	08019d7c 	.word	0x08019d7c
 800c5a0:	08019a04 	.word	0x08019a04
 800c5a4:	08019d94 	.word	0x08019d94
 800c5a8:	08019db0 	.word	0x08019db0
 800c5ac:	08019dd0 	.word	0x08019dd0
 800c5b0:	08019de8 	.word	0x08019de8

0800c5b4 <pbuf_take_at>:
 *
 * @return ERR_OK if successful, ERR_MEM if the pbuf is not big enough
 */
err_t
pbuf_take_at(struct pbuf *buf, const void *dataptr, u16_t len, u16_t offset)
{
 800c5b4:	b580      	push	{r7, lr}
 800c5b6:	b088      	sub	sp, #32
 800c5b8:	af00      	add	r7, sp, #0
 800c5ba:	60f8      	str	r0, [r7, #12]
 800c5bc:	60b9      	str	r1, [r7, #8]
 800c5be:	4611      	mov	r1, r2
 800c5c0:	461a      	mov	r2, r3
 800c5c2:	460b      	mov	r3, r1
 800c5c4:	80fb      	strh	r3, [r7, #6]
 800c5c6:	4613      	mov	r3, r2
 800c5c8:	80bb      	strh	r3, [r7, #4]
  u16_t target_offset;
  struct pbuf *q = pbuf_skip(buf, offset, &target_offset);
 800c5ca:	f107 0210 	add.w	r2, r7, #16
 800c5ce:	88bb      	ldrh	r3, [r7, #4]
 800c5d0:	4619      	mov	r1, r3
 800c5d2:	68f8      	ldr	r0, [r7, #12]
 800c5d4:	f7ff ff49 	bl	800c46a <pbuf_skip>
 800c5d8:	61f8      	str	r0, [r7, #28]

  /* return requested data if pbuf is OK */
  if ((q != NULL) && (q->tot_len >= target_offset + len)) {
 800c5da:	69fb      	ldr	r3, [r7, #28]
 800c5dc:	2b00      	cmp	r3, #0
 800c5de:	d047      	beq.n	800c670 <pbuf_take_at+0xbc>
 800c5e0:	69fb      	ldr	r3, [r7, #28]
 800c5e2:	891b      	ldrh	r3, [r3, #8]
 800c5e4:	461a      	mov	r2, r3
 800c5e6:	8a3b      	ldrh	r3, [r7, #16]
 800c5e8:	4619      	mov	r1, r3
 800c5ea:	88fb      	ldrh	r3, [r7, #6]
 800c5ec:	440b      	add	r3, r1
 800c5ee:	429a      	cmp	r2, r3
 800c5f0:	db3e      	blt.n	800c670 <pbuf_take_at+0xbc>
    u16_t remaining_len = len;
 800c5f2:	88fb      	ldrh	r3, [r7, #6]
 800c5f4:	837b      	strh	r3, [r7, #26]
    const u8_t *src_ptr = (const u8_t *)dataptr;
 800c5f6:	68bb      	ldr	r3, [r7, #8]
 800c5f8:	617b      	str	r3, [r7, #20]
    /* copy the part that goes into the first pbuf */
    u16_t first_copy_len;
    LWIP_ASSERT("check pbuf_skip result", target_offset < q->len);
 800c5fa:	69fb      	ldr	r3, [r7, #28]
 800c5fc:	895a      	ldrh	r2, [r3, #10]
 800c5fe:	8a3b      	ldrh	r3, [r7, #16]
 800c600:	429a      	cmp	r2, r3
 800c602:	d806      	bhi.n	800c612 <pbuf_take_at+0x5e>
 800c604:	4b1d      	ldr	r3, [pc, #116]	; (800c67c <pbuf_take_at+0xc8>)
 800c606:	f240 42e3 	movw	r2, #1251	; 0x4e3
 800c60a:	491d      	ldr	r1, [pc, #116]	; (800c680 <pbuf_take_at+0xcc>)
 800c60c:	481d      	ldr	r0, [pc, #116]	; (800c684 <pbuf_take_at+0xd0>)
 800c60e:	f00b ff3b 	bl	8018488 <iprintf>
    first_copy_len = (u16_t)LWIP_MIN(q->len - target_offset, len);
 800c612:	69fb      	ldr	r3, [r7, #28]
 800c614:	895b      	ldrh	r3, [r3, #10]
 800c616:	461a      	mov	r2, r3
 800c618:	8a3b      	ldrh	r3, [r7, #16]
 800c61a:	1ad2      	subs	r2, r2, r3
 800c61c:	88fb      	ldrh	r3, [r7, #6]
 800c61e:	429a      	cmp	r2, r3
 800c620:	da05      	bge.n	800c62e <pbuf_take_at+0x7a>
 800c622:	69fb      	ldr	r3, [r7, #28]
 800c624:	895a      	ldrh	r2, [r3, #10]
 800c626:	8a3b      	ldrh	r3, [r7, #16]
 800c628:	1ad3      	subs	r3, r2, r3
 800c62a:	b29b      	uxth	r3, r3
 800c62c:	e000      	b.n	800c630 <pbuf_take_at+0x7c>
 800c62e:	88fb      	ldrh	r3, [r7, #6]
 800c630:	827b      	strh	r3, [r7, #18]
    MEMCPY(((u8_t *)q->payload) + target_offset, dataptr, first_copy_len);
 800c632:	69fb      	ldr	r3, [r7, #28]
 800c634:	685b      	ldr	r3, [r3, #4]
 800c636:	8a3a      	ldrh	r2, [r7, #16]
 800c638:	4413      	add	r3, r2
 800c63a:	8a7a      	ldrh	r2, [r7, #18]
 800c63c:	68b9      	ldr	r1, [r7, #8]
 800c63e:	4618      	mov	r0, r3
 800c640:	f00c f815 	bl	801866e <memcpy>
    remaining_len = (u16_t)(remaining_len - first_copy_len);
 800c644:	8b7a      	ldrh	r2, [r7, #26]
 800c646:	8a7b      	ldrh	r3, [r7, #18]
 800c648:	1ad3      	subs	r3, r2, r3
 800c64a:	837b      	strh	r3, [r7, #26]
    src_ptr += first_copy_len;
 800c64c:	8a7b      	ldrh	r3, [r7, #18]
 800c64e:	697a      	ldr	r2, [r7, #20]
 800c650:	4413      	add	r3, r2
 800c652:	617b      	str	r3, [r7, #20]
    if (remaining_len > 0) {
 800c654:	8b7b      	ldrh	r3, [r7, #26]
 800c656:	2b00      	cmp	r3, #0
 800c658:	d008      	beq.n	800c66c <pbuf_take_at+0xb8>
      return pbuf_take(q->next, src_ptr, remaining_len);
 800c65a:	69fb      	ldr	r3, [r7, #28]
 800c65c:	681b      	ldr	r3, [r3, #0]
 800c65e:	8b7a      	ldrh	r2, [r7, #26]
 800c660:	6979      	ldr	r1, [r7, #20]
 800c662:	4618      	mov	r0, r3
 800c664:	f7ff ff14 	bl	800c490 <pbuf_take>
 800c668:	4603      	mov	r3, r0
 800c66a:	e003      	b.n	800c674 <pbuf_take_at+0xc0>
    }
    return ERR_OK;
 800c66c:	2300      	movs	r3, #0
 800c66e:	e001      	b.n	800c674 <pbuf_take_at+0xc0>
  }
  return ERR_MEM;
 800c670:	f04f 33ff 	mov.w	r3, #4294967295
}
 800c674:	4618      	mov	r0, r3
 800c676:	3720      	adds	r7, #32
 800c678:	46bd      	mov	sp, r7
 800c67a:	bd80      	pop	{r7, pc}
 800c67c:	080199a4 	.word	0x080199a4
 800c680:	08019e00 	.word	0x08019e00
 800c684:	08019a04 	.word	0x08019a04

0800c688 <pbuf_clone>:
 *
 * @return a new pbuf or NULL if allocation fails
 */
struct pbuf *
pbuf_clone(pbuf_layer layer, pbuf_type type, struct pbuf *p)
{
 800c688:	b580      	push	{r7, lr}
 800c68a:	b084      	sub	sp, #16
 800c68c:	af00      	add	r7, sp, #0
 800c68e:	4603      	mov	r3, r0
 800c690:	603a      	str	r2, [r7, #0]
 800c692:	71fb      	strb	r3, [r7, #7]
 800c694:	460b      	mov	r3, r1
 800c696:	80bb      	strh	r3, [r7, #4]
  struct pbuf *q;
  err_t err;
  q = pbuf_alloc(layer, p->tot_len, type);
 800c698:	683b      	ldr	r3, [r7, #0]
 800c69a:	8919      	ldrh	r1, [r3, #8]
 800c69c:	88ba      	ldrh	r2, [r7, #4]
 800c69e:	79fb      	ldrb	r3, [r7, #7]
 800c6a0:	4618      	mov	r0, r3
 800c6a2:	f7ff f969 	bl	800b978 <pbuf_alloc>
 800c6a6:	60f8      	str	r0, [r7, #12]
  if (q == NULL) {
 800c6a8:	68fb      	ldr	r3, [r7, #12]
 800c6aa:	2b00      	cmp	r3, #0
 800c6ac:	d101      	bne.n	800c6b2 <pbuf_clone+0x2a>
    return NULL;
 800c6ae:	2300      	movs	r3, #0
 800c6b0:	e011      	b.n	800c6d6 <pbuf_clone+0x4e>
  }
  err = pbuf_copy(q, p);
 800c6b2:	6839      	ldr	r1, [r7, #0]
 800c6b4:	68f8      	ldr	r0, [r7, #12]
 800c6b6:	f7ff fd6b 	bl	800c190 <pbuf_copy>
 800c6ba:	4603      	mov	r3, r0
 800c6bc:	72fb      	strb	r3, [r7, #11]
  LWIP_UNUSED_ARG(err); /* in case of LWIP_NOASSERT */
  LWIP_ASSERT("pbuf_copy failed", err == ERR_OK);
 800c6be:	f997 300b 	ldrsb.w	r3, [r7, #11]
 800c6c2:	2b00      	cmp	r3, #0
 800c6c4:	d006      	beq.n	800c6d4 <pbuf_clone+0x4c>
 800c6c6:	4b06      	ldr	r3, [pc, #24]	; (800c6e0 <pbuf_clone+0x58>)
 800c6c8:	f240 5224 	movw	r2, #1316	; 0x524
 800c6cc:	4905      	ldr	r1, [pc, #20]	; (800c6e4 <pbuf_clone+0x5c>)
 800c6ce:	4806      	ldr	r0, [pc, #24]	; (800c6e8 <pbuf_clone+0x60>)
 800c6d0:	f00b feda 	bl	8018488 <iprintf>
  return q;
 800c6d4:	68fb      	ldr	r3, [r7, #12]
}
 800c6d6:	4618      	mov	r0, r3
 800c6d8:	3710      	adds	r7, #16
 800c6da:	46bd      	mov	sp, r7
 800c6dc:	bd80      	pop	{r7, pc}
 800c6de:	bf00      	nop
 800c6e0:	080199a4 	.word	0x080199a4
 800c6e4:	08019e18 	.word	0x08019e18
 800c6e8:	08019a04 	.word	0x08019a04

0800c6ec <pbuf_put_at>:
 * @param offset offset into p of the byte to write
 * @param data byte to write at an offset into p
 */
void
pbuf_put_at(struct pbuf *p, u16_t offset, u8_t data)
{
 800c6ec:	b580      	push	{r7, lr}
 800c6ee:	b084      	sub	sp, #16
 800c6f0:	af00      	add	r7, sp, #0
 800c6f2:	6078      	str	r0, [r7, #4]
 800c6f4:	460b      	mov	r3, r1
 800c6f6:	807b      	strh	r3, [r7, #2]
 800c6f8:	4613      	mov	r3, r2
 800c6fa:	707b      	strb	r3, [r7, #1]
  u16_t q_idx;
  struct pbuf *q = pbuf_skip(p, offset, &q_idx);
 800c6fc:	f107 020a 	add.w	r2, r7, #10
 800c700:	887b      	ldrh	r3, [r7, #2]
 800c702:	4619      	mov	r1, r3
 800c704:	6878      	ldr	r0, [r7, #4]
 800c706:	f7ff feb0 	bl	800c46a <pbuf_skip>
 800c70a:	60f8      	str	r0, [r7, #12]

  /* write requested data if pbuf is OK */
  if ((q != NULL) && (q->len > q_idx)) {
 800c70c:	68fb      	ldr	r3, [r7, #12]
 800c70e:	2b00      	cmp	r3, #0
 800c710:	d00a      	beq.n	800c728 <pbuf_put_at+0x3c>
 800c712:	68fb      	ldr	r3, [r7, #12]
 800c714:	895a      	ldrh	r2, [r3, #10]
 800c716:	897b      	ldrh	r3, [r7, #10]
 800c718:	429a      	cmp	r2, r3
 800c71a:	d905      	bls.n	800c728 <pbuf_put_at+0x3c>
    ((u8_t *)q->payload)[q_idx] = data;
 800c71c:	68fb      	ldr	r3, [r7, #12]
 800c71e:	685b      	ldr	r3, [r3, #4]
 800c720:	897a      	ldrh	r2, [r7, #10]
 800c722:	4413      	add	r3, r2
 800c724:	787a      	ldrb	r2, [r7, #1]
 800c726:	701a      	strb	r2, [r3, #0]
  }
}
 800c728:	bf00      	nop
 800c72a:	3710      	adds	r7, #16
 800c72c:	46bd      	mov	sp, r7
 800c72e:	bd80      	pop	{r7, pc}

0800c730 <tcp_init>:
/**
 * Initialize this module.
 */
void
tcp_init(void)
{
 800c730:	b580      	push	{r7, lr}
 800c732:	af00      	add	r7, sp, #0
#ifdef LWIP_RAND
  tcp_port = TCP_ENSURE_LOCAL_PORT_RANGE(LWIP_RAND());
 800c734:	f00b fd1c 	bl	8018170 <rand>
 800c738:	4603      	mov	r3, r0
 800c73a:	b29b      	uxth	r3, r3
 800c73c:	f3c3 030d 	ubfx	r3, r3, #0, #14
 800c740:	b29b      	uxth	r3, r3
 800c742:	f5a3 4380 	sub.w	r3, r3, #16384	; 0x4000
 800c746:	b29a      	uxth	r2, r3
 800c748:	4b01      	ldr	r3, [pc, #4]	; (800c750 <tcp_init+0x20>)
 800c74a:	801a      	strh	r2, [r3, #0]
#endif /* LWIP_RAND */
}
 800c74c:	bf00      	nop
 800c74e:	bd80      	pop	{r7, pc}
 800c750:	200000aa 	.word	0x200000aa

0800c754 <tcp_free>:

/** Free a tcp pcb */
void
tcp_free(struct tcp_pcb *pcb)
{
 800c754:	b580      	push	{r7, lr}
 800c756:	b082      	sub	sp, #8
 800c758:	af00      	add	r7, sp, #0
 800c75a:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_free: LISTEN", pcb->state != LISTEN);
 800c75c:	687b      	ldr	r3, [r7, #4]
 800c75e:	7d1b      	ldrb	r3, [r3, #20]
 800c760:	2b01      	cmp	r3, #1
 800c762:	d105      	bne.n	800c770 <tcp_free+0x1c>
 800c764:	4b06      	ldr	r3, [pc, #24]	; (800c780 <tcp_free+0x2c>)
 800c766:	22d4      	movs	r2, #212	; 0xd4
 800c768:	4906      	ldr	r1, [pc, #24]	; (800c784 <tcp_free+0x30>)
 800c76a:	4807      	ldr	r0, [pc, #28]	; (800c788 <tcp_free+0x34>)
 800c76c:	f00b fe8c 	bl	8018488 <iprintf>
#if LWIP_TCP_PCB_NUM_EXT_ARGS
  tcp_ext_arg_invoke_callbacks_destroyed(pcb->ext_args);
#endif
  memp_free(MEMP_TCP_PCB, pcb);
 800c770:	6879      	ldr	r1, [r7, #4]
 800c772:	2001      	movs	r0, #1
 800c774:	f7fe fd62 	bl	800b23c <memp_free>
}
 800c778:	bf00      	nop
 800c77a:	3708      	adds	r7, #8
 800c77c:	46bd      	mov	sp, r7
 800c77e:	bd80      	pop	{r7, pc}
 800c780:	08019ea4 	.word	0x08019ea4
 800c784:	08019ed4 	.word	0x08019ed4
 800c788:	08019ee8 	.word	0x08019ee8

0800c78c <tcp_free_listen>:

/** Free a tcp listen pcb */
static void
tcp_free_listen(struct tcp_pcb *pcb)
{
 800c78c:	b580      	push	{r7, lr}
 800c78e:	b082      	sub	sp, #8
 800c790:	af00      	add	r7, sp, #0
 800c792:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_free_listen: !LISTEN", pcb->state != LISTEN);
 800c794:	687b      	ldr	r3, [r7, #4]
 800c796:	7d1b      	ldrb	r3, [r3, #20]
 800c798:	2b01      	cmp	r3, #1
 800c79a:	d105      	bne.n	800c7a8 <tcp_free_listen+0x1c>
 800c79c:	4b06      	ldr	r3, [pc, #24]	; (800c7b8 <tcp_free_listen+0x2c>)
 800c79e:	22df      	movs	r2, #223	; 0xdf
 800c7a0:	4906      	ldr	r1, [pc, #24]	; (800c7bc <tcp_free_listen+0x30>)
 800c7a2:	4807      	ldr	r0, [pc, #28]	; (800c7c0 <tcp_free_listen+0x34>)
 800c7a4:	f00b fe70 	bl	8018488 <iprintf>
#if LWIP_TCP_PCB_NUM_EXT_ARGS
  tcp_ext_arg_invoke_callbacks_destroyed(pcb->ext_args);
#endif
  memp_free(MEMP_TCP_PCB_LISTEN, pcb);
 800c7a8:	6879      	ldr	r1, [r7, #4]
 800c7aa:	2002      	movs	r0, #2
 800c7ac:	f7fe fd46 	bl	800b23c <memp_free>
}
 800c7b0:	bf00      	nop
 800c7b2:	3708      	adds	r7, #8
 800c7b4:	46bd      	mov	sp, r7
 800c7b6:	bd80      	pop	{r7, pc}
 800c7b8:	08019ea4 	.word	0x08019ea4
 800c7bc:	08019f10 	.word	0x08019f10
 800c7c0:	08019ee8 	.word	0x08019ee8

0800c7c4 <tcp_tmr>:
/**
 * Called periodically to dispatch TCP timers.
 */
void
tcp_tmr(void)
{
 800c7c4:	b580      	push	{r7, lr}
 800c7c6:	af00      	add	r7, sp, #0
  /* Call tcp_fasttmr() every 250 ms */
  tcp_fasttmr();
 800c7c8:	f001 f800 	bl	800d7cc <tcp_fasttmr>

  if (++tcp_timer & 1) {
 800c7cc:	4b07      	ldr	r3, [pc, #28]	; (800c7ec <tcp_tmr+0x28>)
 800c7ce:	781b      	ldrb	r3, [r3, #0]
 800c7d0:	3301      	adds	r3, #1
 800c7d2:	b2da      	uxtb	r2, r3
 800c7d4:	4b05      	ldr	r3, [pc, #20]	; (800c7ec <tcp_tmr+0x28>)
 800c7d6:	701a      	strb	r2, [r3, #0]
 800c7d8:	4b04      	ldr	r3, [pc, #16]	; (800c7ec <tcp_tmr+0x28>)
 800c7da:	781b      	ldrb	r3, [r3, #0]
 800c7dc:	f003 0301 	and.w	r3, r3, #1
 800c7e0:	2b00      	cmp	r3, #0
 800c7e2:	d001      	beq.n	800c7e8 <tcp_tmr+0x24>
    /* Call tcp_slowtmr() every 500 ms, i.e., every other timer
       tcp_tmr() is called. */
    tcp_slowtmr();
 800c7e4:	f000 fcb2 	bl	800d14c <tcp_slowtmr>
  }
}
 800c7e8:	bf00      	nop
 800c7ea:	bd80      	pop	{r7, pc}
 800c7ec:	20008931 	.word	0x20008931

0800c7f0 <tcp_remove_listener>:
/** Called when a listen pcb is closed. Iterates one pcb list and removes the
 * closed listener pcb from pcb->listener if matching.
 */
static void
tcp_remove_listener(struct tcp_pcb *list, struct tcp_pcb_listen *lpcb)
{
 800c7f0:	b580      	push	{r7, lr}
 800c7f2:	b084      	sub	sp, #16
 800c7f4:	af00      	add	r7, sp, #0
 800c7f6:	6078      	str	r0, [r7, #4]
 800c7f8:	6039      	str	r1, [r7, #0]
  struct tcp_pcb *pcb;

  LWIP_ASSERT("tcp_remove_listener: invalid listener", lpcb != NULL);
 800c7fa:	683b      	ldr	r3, [r7, #0]
 800c7fc:	2b00      	cmp	r3, #0
 800c7fe:	d105      	bne.n	800c80c <tcp_remove_listener+0x1c>
 800c800:	4b0d      	ldr	r3, [pc, #52]	; (800c838 <tcp_remove_listener+0x48>)
 800c802:	22ff      	movs	r2, #255	; 0xff
 800c804:	490d      	ldr	r1, [pc, #52]	; (800c83c <tcp_remove_listener+0x4c>)
 800c806:	480e      	ldr	r0, [pc, #56]	; (800c840 <tcp_remove_listener+0x50>)
 800c808:	f00b fe3e 	bl	8018488 <iprintf>

  for (pcb = list; pcb != NULL; pcb = pcb->next) {
 800c80c:	687b      	ldr	r3, [r7, #4]
 800c80e:	60fb      	str	r3, [r7, #12]
 800c810:	e00a      	b.n	800c828 <tcp_remove_listener+0x38>
    if (pcb->listener == lpcb) {
 800c812:	68fb      	ldr	r3, [r7, #12]
 800c814:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800c816:	683a      	ldr	r2, [r7, #0]
 800c818:	429a      	cmp	r2, r3
 800c81a:	d102      	bne.n	800c822 <tcp_remove_listener+0x32>
      pcb->listener = NULL;
 800c81c:	68fb      	ldr	r3, [r7, #12]
 800c81e:	2200      	movs	r2, #0
 800c820:	67da      	str	r2, [r3, #124]	; 0x7c
  for (pcb = list; pcb != NULL; pcb = pcb->next) {
 800c822:	68fb      	ldr	r3, [r7, #12]
 800c824:	68db      	ldr	r3, [r3, #12]
 800c826:	60fb      	str	r3, [r7, #12]
 800c828:	68fb      	ldr	r3, [r7, #12]
 800c82a:	2b00      	cmp	r3, #0
 800c82c:	d1f1      	bne.n	800c812 <tcp_remove_listener+0x22>
    }
  }
}
 800c82e:	bf00      	nop
 800c830:	bf00      	nop
 800c832:	3710      	adds	r7, #16
 800c834:	46bd      	mov	sp, r7
 800c836:	bd80      	pop	{r7, pc}
 800c838:	08019ea4 	.word	0x08019ea4
 800c83c:	08019f2c 	.word	0x08019f2c
 800c840:	08019ee8 	.word	0x08019ee8

0800c844 <tcp_listen_closed>:
/** Called when a listen pcb is closed. Iterates all pcb lists and removes the
 * closed listener pcb from pcb->listener if matching.
 */
static void
tcp_listen_closed(struct tcp_pcb *pcb)
{
 800c844:	b580      	push	{r7, lr}
 800c846:	b084      	sub	sp, #16
 800c848:	af00      	add	r7, sp, #0
 800c84a:	6078      	str	r0, [r7, #4]
#if LWIP_CALLBACK_API || TCP_LISTEN_BACKLOG
  size_t i;
  LWIP_ASSERT("pcb != NULL", pcb != NULL);
 800c84c:	687b      	ldr	r3, [r7, #4]
 800c84e:	2b00      	cmp	r3, #0
 800c850:	d106      	bne.n	800c860 <tcp_listen_closed+0x1c>
 800c852:	4b14      	ldr	r3, [pc, #80]	; (800c8a4 <tcp_listen_closed+0x60>)
 800c854:	f240 1211 	movw	r2, #273	; 0x111
 800c858:	4913      	ldr	r1, [pc, #76]	; (800c8a8 <tcp_listen_closed+0x64>)
 800c85a:	4814      	ldr	r0, [pc, #80]	; (800c8ac <tcp_listen_closed+0x68>)
 800c85c:	f00b fe14 	bl	8018488 <iprintf>
  LWIP_ASSERT("pcb->state == LISTEN", pcb->state == LISTEN);
 800c860:	687b      	ldr	r3, [r7, #4]
 800c862:	7d1b      	ldrb	r3, [r3, #20]
 800c864:	2b01      	cmp	r3, #1
 800c866:	d006      	beq.n	800c876 <tcp_listen_closed+0x32>
 800c868:	4b0e      	ldr	r3, [pc, #56]	; (800c8a4 <tcp_listen_closed+0x60>)
 800c86a:	f44f 7289 	mov.w	r2, #274	; 0x112
 800c86e:	4910      	ldr	r1, [pc, #64]	; (800c8b0 <tcp_listen_closed+0x6c>)
 800c870:	480e      	ldr	r0, [pc, #56]	; (800c8ac <tcp_listen_closed+0x68>)
 800c872:	f00b fe09 	bl	8018488 <iprintf>
  for (i = 1; i < LWIP_ARRAYSIZE(tcp_pcb_lists); i++) {
 800c876:	2301      	movs	r3, #1
 800c878:	60fb      	str	r3, [r7, #12]
 800c87a:	e00b      	b.n	800c894 <tcp_listen_closed+0x50>
    tcp_remove_listener(*tcp_pcb_lists[i], (struct tcp_pcb_listen *)pcb);
 800c87c:	4a0d      	ldr	r2, [pc, #52]	; (800c8b4 <tcp_listen_closed+0x70>)
 800c87e:	68fb      	ldr	r3, [r7, #12]
 800c880:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800c884:	681b      	ldr	r3, [r3, #0]
 800c886:	6879      	ldr	r1, [r7, #4]
 800c888:	4618      	mov	r0, r3
 800c88a:	f7ff ffb1 	bl	800c7f0 <tcp_remove_listener>
  for (i = 1; i < LWIP_ARRAYSIZE(tcp_pcb_lists); i++) {
 800c88e:	68fb      	ldr	r3, [r7, #12]
 800c890:	3301      	adds	r3, #1
 800c892:	60fb      	str	r3, [r7, #12]
 800c894:	68fb      	ldr	r3, [r7, #12]
 800c896:	2b03      	cmp	r3, #3
 800c898:	d9f0      	bls.n	800c87c <tcp_listen_closed+0x38>
  }
#endif
  LWIP_UNUSED_ARG(pcb);
}
 800c89a:	bf00      	nop
 800c89c:	bf00      	nop
 800c89e:	3710      	adds	r7, #16
 800c8a0:	46bd      	mov	sp, r7
 800c8a2:	bd80      	pop	{r7, pc}
 800c8a4:	08019ea4 	.word	0x08019ea4
 800c8a8:	08019f54 	.word	0x08019f54
 800c8ac:	08019ee8 	.word	0x08019ee8
 800c8b0:	08019f60 	.word	0x08019f60
 800c8b4:	0801c284 	.word	0x0801c284

0800c8b8 <tcp_close_shutdown>:
 * @return ERR_OK if connection has been closed
 *         another err_t if closing failed and pcb is not freed
 */
static err_t
tcp_close_shutdown(struct tcp_pcb *pcb, u8_t rst_on_unacked_data)
{
 800c8b8:	b5b0      	push	{r4, r5, r7, lr}
 800c8ba:	b088      	sub	sp, #32
 800c8bc:	af04      	add	r7, sp, #16
 800c8be:	6078      	str	r0, [r7, #4]
 800c8c0:	460b      	mov	r3, r1
 800c8c2:	70fb      	strb	r3, [r7, #3]
  LWIP_ASSERT("tcp_close_shutdown: invalid pcb", pcb != NULL);
 800c8c4:	687b      	ldr	r3, [r7, #4]
 800c8c6:	2b00      	cmp	r3, #0
 800c8c8:	d106      	bne.n	800c8d8 <tcp_close_shutdown+0x20>
 800c8ca:	4b63      	ldr	r3, [pc, #396]	; (800ca58 <tcp_close_shutdown+0x1a0>)
 800c8cc:	f44f 72af 	mov.w	r2, #350	; 0x15e
 800c8d0:	4962      	ldr	r1, [pc, #392]	; (800ca5c <tcp_close_shutdown+0x1a4>)
 800c8d2:	4863      	ldr	r0, [pc, #396]	; (800ca60 <tcp_close_shutdown+0x1a8>)
 800c8d4:	f00b fdd8 	bl	8018488 <iprintf>

  if (rst_on_unacked_data && ((pcb->state == ESTABLISHED) || (pcb->state == CLOSE_WAIT))) {
 800c8d8:	78fb      	ldrb	r3, [r7, #3]
 800c8da:	2b00      	cmp	r3, #0
 800c8dc:	d066      	beq.n	800c9ac <tcp_close_shutdown+0xf4>
 800c8de:	687b      	ldr	r3, [r7, #4]
 800c8e0:	7d1b      	ldrb	r3, [r3, #20]
 800c8e2:	2b04      	cmp	r3, #4
 800c8e4:	d003      	beq.n	800c8ee <tcp_close_shutdown+0x36>
 800c8e6:	687b      	ldr	r3, [r7, #4]
 800c8e8:	7d1b      	ldrb	r3, [r3, #20]
 800c8ea:	2b07      	cmp	r3, #7
 800c8ec:	d15e      	bne.n	800c9ac <tcp_close_shutdown+0xf4>
    if ((pcb->refused_data != NULL) || (pcb->rcv_wnd != TCP_WND_MAX(pcb))) {
 800c8ee:	687b      	ldr	r3, [r7, #4]
 800c8f0:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800c8f2:	2b00      	cmp	r3, #0
 800c8f4:	d104      	bne.n	800c900 <tcp_close_shutdown+0x48>
 800c8f6:	687b      	ldr	r3, [r7, #4]
 800c8f8:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800c8fa:	f5b3 6f06 	cmp.w	r3, #2144	; 0x860
 800c8fe:	d055      	beq.n	800c9ac <tcp_close_shutdown+0xf4>
      /* Not all data received by application, send RST to tell the remote
         side about this. */
      LWIP_ASSERT("pcb->flags & TF_RXCLOSED", pcb->flags & TF_RXCLOSED);
 800c900:	687b      	ldr	r3, [r7, #4]
 800c902:	8b5b      	ldrh	r3, [r3, #26]
 800c904:	f003 0310 	and.w	r3, r3, #16
 800c908:	2b00      	cmp	r3, #0
 800c90a:	d106      	bne.n	800c91a <tcp_close_shutdown+0x62>
 800c90c:	4b52      	ldr	r3, [pc, #328]	; (800ca58 <tcp_close_shutdown+0x1a0>)
 800c90e:	f44f 72b2 	mov.w	r2, #356	; 0x164
 800c912:	4954      	ldr	r1, [pc, #336]	; (800ca64 <tcp_close_shutdown+0x1ac>)
 800c914:	4852      	ldr	r0, [pc, #328]	; (800ca60 <tcp_close_shutdown+0x1a8>)
 800c916:	f00b fdb7 	bl	8018488 <iprintf>

      /* don't call tcp_abort here: we must not deallocate the pcb since
         that might not be expected when calling tcp_close */
      tcp_rst(pcb, pcb->snd_nxt, pcb->rcv_nxt, &pcb->local_ip, &pcb->remote_ip,
 800c91a:	687b      	ldr	r3, [r7, #4]
 800c91c:	6d18      	ldr	r0, [r3, #80]	; 0x50
 800c91e:	687b      	ldr	r3, [r7, #4]
 800c920:	6a5c      	ldr	r4, [r3, #36]	; 0x24
 800c922:	687d      	ldr	r5, [r7, #4]
 800c924:	687b      	ldr	r3, [r7, #4]
 800c926:	3304      	adds	r3, #4
 800c928:	687a      	ldr	r2, [r7, #4]
 800c92a:	8ad2      	ldrh	r2, [r2, #22]
 800c92c:	6879      	ldr	r1, [r7, #4]
 800c92e:	8b09      	ldrh	r1, [r1, #24]
 800c930:	9102      	str	r1, [sp, #8]
 800c932:	9201      	str	r2, [sp, #4]
 800c934:	9300      	str	r3, [sp, #0]
 800c936:	462b      	mov	r3, r5
 800c938:	4622      	mov	r2, r4
 800c93a:	4601      	mov	r1, r0
 800c93c:	6878      	ldr	r0, [r7, #4]
 800c93e:	f005 fcf7 	bl	8012330 <tcp_rst>
              pcb->local_port, pcb->remote_port);

      tcp_pcb_purge(pcb);
 800c942:	6878      	ldr	r0, [r7, #4]
 800c944:	f001 fad4 	bl	800def0 <tcp_pcb_purge>
      TCP_RMV_ACTIVE(pcb);
 800c948:	4b47      	ldr	r3, [pc, #284]	; (800ca68 <tcp_close_shutdown+0x1b0>)
 800c94a:	681b      	ldr	r3, [r3, #0]
 800c94c:	687a      	ldr	r2, [r7, #4]
 800c94e:	429a      	cmp	r2, r3
 800c950:	d105      	bne.n	800c95e <tcp_close_shutdown+0xa6>
 800c952:	4b45      	ldr	r3, [pc, #276]	; (800ca68 <tcp_close_shutdown+0x1b0>)
 800c954:	681b      	ldr	r3, [r3, #0]
 800c956:	68db      	ldr	r3, [r3, #12]
 800c958:	4a43      	ldr	r2, [pc, #268]	; (800ca68 <tcp_close_shutdown+0x1b0>)
 800c95a:	6013      	str	r3, [r2, #0]
 800c95c:	e013      	b.n	800c986 <tcp_close_shutdown+0xce>
 800c95e:	4b42      	ldr	r3, [pc, #264]	; (800ca68 <tcp_close_shutdown+0x1b0>)
 800c960:	681b      	ldr	r3, [r3, #0]
 800c962:	60fb      	str	r3, [r7, #12]
 800c964:	e00c      	b.n	800c980 <tcp_close_shutdown+0xc8>
 800c966:	68fb      	ldr	r3, [r7, #12]
 800c968:	68db      	ldr	r3, [r3, #12]
 800c96a:	687a      	ldr	r2, [r7, #4]
 800c96c:	429a      	cmp	r2, r3
 800c96e:	d104      	bne.n	800c97a <tcp_close_shutdown+0xc2>
 800c970:	687b      	ldr	r3, [r7, #4]
 800c972:	68da      	ldr	r2, [r3, #12]
 800c974:	68fb      	ldr	r3, [r7, #12]
 800c976:	60da      	str	r2, [r3, #12]
 800c978:	e005      	b.n	800c986 <tcp_close_shutdown+0xce>
 800c97a:	68fb      	ldr	r3, [r7, #12]
 800c97c:	68db      	ldr	r3, [r3, #12]
 800c97e:	60fb      	str	r3, [r7, #12]
 800c980:	68fb      	ldr	r3, [r7, #12]
 800c982:	2b00      	cmp	r3, #0
 800c984:	d1ef      	bne.n	800c966 <tcp_close_shutdown+0xae>
 800c986:	687b      	ldr	r3, [r7, #4]
 800c988:	2200      	movs	r2, #0
 800c98a:	60da      	str	r2, [r3, #12]
 800c98c:	4b37      	ldr	r3, [pc, #220]	; (800ca6c <tcp_close_shutdown+0x1b4>)
 800c98e:	2201      	movs	r2, #1
 800c990:	701a      	strb	r2, [r3, #0]
      /* Deallocate the pcb since we already sent a RST for it */
      if (tcp_input_pcb == pcb) {
 800c992:	4b37      	ldr	r3, [pc, #220]	; (800ca70 <tcp_close_shutdown+0x1b8>)
 800c994:	681b      	ldr	r3, [r3, #0]
 800c996:	687a      	ldr	r2, [r7, #4]
 800c998:	429a      	cmp	r2, r3
 800c99a:	d102      	bne.n	800c9a2 <tcp_close_shutdown+0xea>
        /* prevent using a deallocated pcb: free it from tcp_input later */
        tcp_trigger_input_pcb_close();
 800c99c:	f003 ff6c 	bl	8010878 <tcp_trigger_input_pcb_close>
 800c9a0:	e002      	b.n	800c9a8 <tcp_close_shutdown+0xf0>
      } else {
        tcp_free(pcb);
 800c9a2:	6878      	ldr	r0, [r7, #4]
 800c9a4:	f7ff fed6 	bl	800c754 <tcp_free>
      }
      return ERR_OK;
 800c9a8:	2300      	movs	r3, #0
 800c9aa:	e050      	b.n	800ca4e <tcp_close_shutdown+0x196>
    }
  }

  /* - states which free the pcb are handled here,
     - states which send FIN and change state are handled in tcp_close_shutdown_fin() */
  switch (pcb->state) {
 800c9ac:	687b      	ldr	r3, [r7, #4]
 800c9ae:	7d1b      	ldrb	r3, [r3, #20]
 800c9b0:	2b02      	cmp	r3, #2
 800c9b2:	d03b      	beq.n	800ca2c <tcp_close_shutdown+0x174>
 800c9b4:	2b02      	cmp	r3, #2
 800c9b6:	dc44      	bgt.n	800ca42 <tcp_close_shutdown+0x18a>
 800c9b8:	2b00      	cmp	r3, #0
 800c9ba:	d002      	beq.n	800c9c2 <tcp_close_shutdown+0x10a>
 800c9bc:	2b01      	cmp	r3, #1
 800c9be:	d02a      	beq.n	800ca16 <tcp_close_shutdown+0x15e>
 800c9c0:	e03f      	b.n	800ca42 <tcp_close_shutdown+0x18a>
       * and the user needs some way to free it should the need arise.
       * Calling tcp_close() with a pcb that has already been closed, (i.e. twice)
       * or for a pcb that has been used and then entered the CLOSED state
       * is erroneous, but this should never happen as the pcb has in those cases
       * been freed, and so any remaining handles are bogus. */
      if (pcb->local_port != 0) {
 800c9c2:	687b      	ldr	r3, [r7, #4]
 800c9c4:	8adb      	ldrh	r3, [r3, #22]
 800c9c6:	2b00      	cmp	r3, #0
 800c9c8:	d021      	beq.n	800ca0e <tcp_close_shutdown+0x156>
        TCP_RMV(&tcp_bound_pcbs, pcb);
 800c9ca:	4b2a      	ldr	r3, [pc, #168]	; (800ca74 <tcp_close_shutdown+0x1bc>)
 800c9cc:	681b      	ldr	r3, [r3, #0]
 800c9ce:	687a      	ldr	r2, [r7, #4]
 800c9d0:	429a      	cmp	r2, r3
 800c9d2:	d105      	bne.n	800c9e0 <tcp_close_shutdown+0x128>
 800c9d4:	4b27      	ldr	r3, [pc, #156]	; (800ca74 <tcp_close_shutdown+0x1bc>)
 800c9d6:	681b      	ldr	r3, [r3, #0]
 800c9d8:	68db      	ldr	r3, [r3, #12]
 800c9da:	4a26      	ldr	r2, [pc, #152]	; (800ca74 <tcp_close_shutdown+0x1bc>)
 800c9dc:	6013      	str	r3, [r2, #0]
 800c9de:	e013      	b.n	800ca08 <tcp_close_shutdown+0x150>
 800c9e0:	4b24      	ldr	r3, [pc, #144]	; (800ca74 <tcp_close_shutdown+0x1bc>)
 800c9e2:	681b      	ldr	r3, [r3, #0]
 800c9e4:	60bb      	str	r3, [r7, #8]
 800c9e6:	e00c      	b.n	800ca02 <tcp_close_shutdown+0x14a>
 800c9e8:	68bb      	ldr	r3, [r7, #8]
 800c9ea:	68db      	ldr	r3, [r3, #12]
 800c9ec:	687a      	ldr	r2, [r7, #4]
 800c9ee:	429a      	cmp	r2, r3
 800c9f0:	d104      	bne.n	800c9fc <tcp_close_shutdown+0x144>
 800c9f2:	687b      	ldr	r3, [r7, #4]
 800c9f4:	68da      	ldr	r2, [r3, #12]
 800c9f6:	68bb      	ldr	r3, [r7, #8]
 800c9f8:	60da      	str	r2, [r3, #12]
 800c9fa:	e005      	b.n	800ca08 <tcp_close_shutdown+0x150>
 800c9fc:	68bb      	ldr	r3, [r7, #8]
 800c9fe:	68db      	ldr	r3, [r3, #12]
 800ca00:	60bb      	str	r3, [r7, #8]
 800ca02:	68bb      	ldr	r3, [r7, #8]
 800ca04:	2b00      	cmp	r3, #0
 800ca06:	d1ef      	bne.n	800c9e8 <tcp_close_shutdown+0x130>
 800ca08:	687b      	ldr	r3, [r7, #4]
 800ca0a:	2200      	movs	r2, #0
 800ca0c:	60da      	str	r2, [r3, #12]
      }
      tcp_free(pcb);
 800ca0e:	6878      	ldr	r0, [r7, #4]
 800ca10:	f7ff fea0 	bl	800c754 <tcp_free>
      break;
 800ca14:	e01a      	b.n	800ca4c <tcp_close_shutdown+0x194>
    case LISTEN:
      tcp_listen_closed(pcb);
 800ca16:	6878      	ldr	r0, [r7, #4]
 800ca18:	f7ff ff14 	bl	800c844 <tcp_listen_closed>
      tcp_pcb_remove(&tcp_listen_pcbs.pcbs, pcb);
 800ca1c:	6879      	ldr	r1, [r7, #4]
 800ca1e:	4816      	ldr	r0, [pc, #88]	; (800ca78 <tcp_close_shutdown+0x1c0>)
 800ca20:	f001 fab6 	bl	800df90 <tcp_pcb_remove>
      tcp_free_listen(pcb);
 800ca24:	6878      	ldr	r0, [r7, #4]
 800ca26:	f7ff feb1 	bl	800c78c <tcp_free_listen>
      break;
 800ca2a:	e00f      	b.n	800ca4c <tcp_close_shutdown+0x194>
    case SYN_SENT:
      TCP_PCB_REMOVE_ACTIVE(pcb);
 800ca2c:	6879      	ldr	r1, [r7, #4]
 800ca2e:	480e      	ldr	r0, [pc, #56]	; (800ca68 <tcp_close_shutdown+0x1b0>)
 800ca30:	f001 faae 	bl	800df90 <tcp_pcb_remove>
 800ca34:	4b0d      	ldr	r3, [pc, #52]	; (800ca6c <tcp_close_shutdown+0x1b4>)
 800ca36:	2201      	movs	r2, #1
 800ca38:	701a      	strb	r2, [r3, #0]
      tcp_free(pcb);
 800ca3a:	6878      	ldr	r0, [r7, #4]
 800ca3c:	f7ff fe8a 	bl	800c754 <tcp_free>
      MIB2_STATS_INC(mib2.tcpattemptfails);
      break;
 800ca40:	e004      	b.n	800ca4c <tcp_close_shutdown+0x194>
    default:
      return tcp_close_shutdown_fin(pcb);
 800ca42:	6878      	ldr	r0, [r7, #4]
 800ca44:	f000 f81a 	bl	800ca7c <tcp_close_shutdown_fin>
 800ca48:	4603      	mov	r3, r0
 800ca4a:	e000      	b.n	800ca4e <tcp_close_shutdown+0x196>
  }
  return ERR_OK;
 800ca4c:	2300      	movs	r3, #0
}
 800ca4e:	4618      	mov	r0, r3
 800ca50:	3710      	adds	r7, #16
 800ca52:	46bd      	mov	sp, r7
 800ca54:	bdb0      	pop	{r4, r5, r7, pc}
 800ca56:	bf00      	nop
 800ca58:	08019ea4 	.word	0x08019ea4
 800ca5c:	08019f78 	.word	0x08019f78
 800ca60:	08019ee8 	.word	0x08019ee8
 800ca64:	08019f98 	.word	0x08019f98
 800ca68:	20008928 	.word	0x20008928
 800ca6c:	20008930 	.word	0x20008930
 800ca70:	20008968 	.word	0x20008968
 800ca74:	20008920 	.word	0x20008920
 800ca78:	20008924 	.word	0x20008924

0800ca7c <tcp_close_shutdown_fin>:

static err_t
tcp_close_shutdown_fin(struct tcp_pcb *pcb)
{
 800ca7c:	b580      	push	{r7, lr}
 800ca7e:	b084      	sub	sp, #16
 800ca80:	af00      	add	r7, sp, #0
 800ca82:	6078      	str	r0, [r7, #4]
  err_t err;
  LWIP_ASSERT("pcb != NULL", pcb != NULL);
 800ca84:	687b      	ldr	r3, [r7, #4]
 800ca86:	2b00      	cmp	r3, #0
 800ca88:	d106      	bne.n	800ca98 <tcp_close_shutdown_fin+0x1c>
 800ca8a:	4b2e      	ldr	r3, [pc, #184]	; (800cb44 <tcp_close_shutdown_fin+0xc8>)
 800ca8c:	f44f 72ce 	mov.w	r2, #412	; 0x19c
 800ca90:	492d      	ldr	r1, [pc, #180]	; (800cb48 <tcp_close_shutdown_fin+0xcc>)
 800ca92:	482e      	ldr	r0, [pc, #184]	; (800cb4c <tcp_close_shutdown_fin+0xd0>)
 800ca94:	f00b fcf8 	bl	8018488 <iprintf>

  switch (pcb->state) {
 800ca98:	687b      	ldr	r3, [r7, #4]
 800ca9a:	7d1b      	ldrb	r3, [r3, #20]
 800ca9c:	2b07      	cmp	r3, #7
 800ca9e:	d020      	beq.n	800cae2 <tcp_close_shutdown_fin+0x66>
 800caa0:	2b07      	cmp	r3, #7
 800caa2:	dc2b      	bgt.n	800cafc <tcp_close_shutdown_fin+0x80>
 800caa4:	2b03      	cmp	r3, #3
 800caa6:	d002      	beq.n	800caae <tcp_close_shutdown_fin+0x32>
 800caa8:	2b04      	cmp	r3, #4
 800caaa:	d00d      	beq.n	800cac8 <tcp_close_shutdown_fin+0x4c>
 800caac:	e026      	b.n	800cafc <tcp_close_shutdown_fin+0x80>
    case SYN_RCVD:
      err = tcp_send_fin(pcb);
 800caae:	6878      	ldr	r0, [r7, #4]
 800cab0:	f004 fd4c 	bl	801154c <tcp_send_fin>
 800cab4:	4603      	mov	r3, r0
 800cab6:	73fb      	strb	r3, [r7, #15]
      if (err == ERR_OK) {
 800cab8:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800cabc:	2b00      	cmp	r3, #0
 800cabe:	d11f      	bne.n	800cb00 <tcp_close_shutdown_fin+0x84>
        tcp_backlog_accepted(pcb);
        MIB2_STATS_INC(mib2.tcpattemptfails);
        pcb->state = FIN_WAIT_1;
 800cac0:	687b      	ldr	r3, [r7, #4]
 800cac2:	2205      	movs	r2, #5
 800cac4:	751a      	strb	r2, [r3, #20]
      }
      break;
 800cac6:	e01b      	b.n	800cb00 <tcp_close_shutdown_fin+0x84>
    case ESTABLISHED:
      err = tcp_send_fin(pcb);
 800cac8:	6878      	ldr	r0, [r7, #4]
 800caca:	f004 fd3f 	bl	801154c <tcp_send_fin>
 800cace:	4603      	mov	r3, r0
 800cad0:	73fb      	strb	r3, [r7, #15]
      if (err == ERR_OK) {
 800cad2:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800cad6:	2b00      	cmp	r3, #0
 800cad8:	d114      	bne.n	800cb04 <tcp_close_shutdown_fin+0x88>
        MIB2_STATS_INC(mib2.tcpestabresets);
        pcb->state = FIN_WAIT_1;
 800cada:	687b      	ldr	r3, [r7, #4]
 800cadc:	2205      	movs	r2, #5
 800cade:	751a      	strb	r2, [r3, #20]
      }
      break;
 800cae0:	e010      	b.n	800cb04 <tcp_close_shutdown_fin+0x88>
    case CLOSE_WAIT:
      err = tcp_send_fin(pcb);
 800cae2:	6878      	ldr	r0, [r7, #4]
 800cae4:	f004 fd32 	bl	801154c <tcp_send_fin>
 800cae8:	4603      	mov	r3, r0
 800caea:	73fb      	strb	r3, [r7, #15]
      if (err == ERR_OK) {
 800caec:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800caf0:	2b00      	cmp	r3, #0
 800caf2:	d109      	bne.n	800cb08 <tcp_close_shutdown_fin+0x8c>
        MIB2_STATS_INC(mib2.tcpestabresets);
        pcb->state = LAST_ACK;
 800caf4:	687b      	ldr	r3, [r7, #4]
 800caf6:	2209      	movs	r2, #9
 800caf8:	751a      	strb	r2, [r3, #20]
      }
      break;
 800cafa:	e005      	b.n	800cb08 <tcp_close_shutdown_fin+0x8c>
    default:
      /* Has already been closed, do nothing. */
      return ERR_OK;
 800cafc:	2300      	movs	r3, #0
 800cafe:	e01c      	b.n	800cb3a <tcp_close_shutdown_fin+0xbe>
      break;
 800cb00:	bf00      	nop
 800cb02:	e002      	b.n	800cb0a <tcp_close_shutdown_fin+0x8e>
      break;
 800cb04:	bf00      	nop
 800cb06:	e000      	b.n	800cb0a <tcp_close_shutdown_fin+0x8e>
      break;
 800cb08:	bf00      	nop
  }

  if (err == ERR_OK) {
 800cb0a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800cb0e:	2b00      	cmp	r3, #0
 800cb10:	d103      	bne.n	800cb1a <tcp_close_shutdown_fin+0x9e>
    /* To ensure all data has been sent when tcp_close returns, we have
       to make sure tcp_output doesn't fail.
       Since we don't really have to ensure all data has been sent when tcp_close
       returns (unsent data is sent from tcp timer functions, also), we don't care
       for the return value of tcp_output for now. */
    tcp_output(pcb);
 800cb12:	6878      	ldr	r0, [r7, #4]
 800cb14:	f004 fe58 	bl	80117c8 <tcp_output>
 800cb18:	e00d      	b.n	800cb36 <tcp_close_shutdown_fin+0xba>
  } else if (err == ERR_MEM) {
 800cb1a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800cb1e:	f1b3 3fff 	cmp.w	r3, #4294967295
 800cb22:	d108      	bne.n	800cb36 <tcp_close_shutdown_fin+0xba>
    /* Mark this pcb for closing. Closing is retried from tcp_tmr. */
    tcp_set_flags(pcb, TF_CLOSEPEND);
 800cb24:	687b      	ldr	r3, [r7, #4]
 800cb26:	8b5b      	ldrh	r3, [r3, #26]
 800cb28:	f043 0308 	orr.w	r3, r3, #8
 800cb2c:	b29a      	uxth	r2, r3
 800cb2e:	687b      	ldr	r3, [r7, #4]
 800cb30:	835a      	strh	r2, [r3, #26]
    /* We have to return ERR_OK from here to indicate to the callers that this
       pcb should not be used any more as it will be freed soon via tcp_tmr.
       This is OK here since sending FIN does not guarantee a time frime for
       actually freeing the pcb, either (it is left in closure states for
       remote ACK or timeout) */
    return ERR_OK;
 800cb32:	2300      	movs	r3, #0
 800cb34:	e001      	b.n	800cb3a <tcp_close_shutdown_fin+0xbe>
  }
  return err;
 800cb36:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 800cb3a:	4618      	mov	r0, r3
 800cb3c:	3710      	adds	r7, #16
 800cb3e:	46bd      	mov	sp, r7
 800cb40:	bd80      	pop	{r7, pc}
 800cb42:	bf00      	nop
 800cb44:	08019ea4 	.word	0x08019ea4
 800cb48:	08019f54 	.word	0x08019f54
 800cb4c:	08019ee8 	.word	0x08019ee8

0800cb50 <tcp_close>:
 * @return ERR_OK if connection has been closed
 *         another err_t if closing failed and pcb is not freed
 */
err_t
tcp_close(struct tcp_pcb *pcb)
{
 800cb50:	b580      	push	{r7, lr}
 800cb52:	b082      	sub	sp, #8
 800cb54:	af00      	add	r7, sp, #0
 800cb56:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("tcp_close: invalid pcb", pcb != NULL, return ERR_ARG);
 800cb58:	687b      	ldr	r3, [r7, #4]
 800cb5a:	2b00      	cmp	r3, #0
 800cb5c:	d109      	bne.n	800cb72 <tcp_close+0x22>
 800cb5e:	4b0f      	ldr	r3, [pc, #60]	; (800cb9c <tcp_close+0x4c>)
 800cb60:	f44f 72f4 	mov.w	r2, #488	; 0x1e8
 800cb64:	490e      	ldr	r1, [pc, #56]	; (800cba0 <tcp_close+0x50>)
 800cb66:	480f      	ldr	r0, [pc, #60]	; (800cba4 <tcp_close+0x54>)
 800cb68:	f00b fc8e 	bl	8018488 <iprintf>
 800cb6c:	f06f 030f 	mvn.w	r3, #15
 800cb70:	e00f      	b.n	800cb92 <tcp_close+0x42>
  LWIP_DEBUGF(TCP_DEBUG, ("tcp_close: closing in "));

  tcp_debug_print_state(pcb->state);

  if (pcb->state != LISTEN) {
 800cb72:	687b      	ldr	r3, [r7, #4]
 800cb74:	7d1b      	ldrb	r3, [r3, #20]
 800cb76:	2b01      	cmp	r3, #1
 800cb78:	d006      	beq.n	800cb88 <tcp_close+0x38>
    /* Set a flag not to receive any more data... */
    tcp_set_flags(pcb, TF_RXCLOSED);
 800cb7a:	687b      	ldr	r3, [r7, #4]
 800cb7c:	8b5b      	ldrh	r3, [r3, #26]
 800cb7e:	f043 0310 	orr.w	r3, r3, #16
 800cb82:	b29a      	uxth	r2, r3
 800cb84:	687b      	ldr	r3, [r7, #4]
 800cb86:	835a      	strh	r2, [r3, #26]
  }
  /* ... and close */
  return tcp_close_shutdown(pcb, 1);
 800cb88:	2101      	movs	r1, #1
 800cb8a:	6878      	ldr	r0, [r7, #4]
 800cb8c:	f7ff fe94 	bl	800c8b8 <tcp_close_shutdown>
 800cb90:	4603      	mov	r3, r0
}
 800cb92:	4618      	mov	r0, r3
 800cb94:	3708      	adds	r7, #8
 800cb96:	46bd      	mov	sp, r7
 800cb98:	bd80      	pop	{r7, pc}
 800cb9a:	bf00      	nop
 800cb9c:	08019ea4 	.word	0x08019ea4
 800cba0:	08019fb4 	.word	0x08019fb4
 800cba4:	08019ee8 	.word	0x08019ee8

0800cba8 <tcp_abandon>:
 * @param pcb the tcp_pcb to abort
 * @param reset boolean to indicate whether a reset should be sent
 */
void
tcp_abandon(struct tcp_pcb *pcb, int reset)
{
 800cba8:	b580      	push	{r7, lr}
 800cbaa:	b08e      	sub	sp, #56	; 0x38
 800cbac:	af04      	add	r7, sp, #16
 800cbae:	6078      	str	r0, [r7, #4]
 800cbb0:	6039      	str	r1, [r7, #0]
#endif /* LWIP_CALLBACK_API */
  void *errf_arg;

  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("tcp_abandon: invalid pcb", pcb != NULL, return);
 800cbb2:	687b      	ldr	r3, [r7, #4]
 800cbb4:	2b00      	cmp	r3, #0
 800cbb6:	d107      	bne.n	800cbc8 <tcp_abandon+0x20>
 800cbb8:	4b52      	ldr	r3, [pc, #328]	; (800cd04 <tcp_abandon+0x15c>)
 800cbba:	f240 223d 	movw	r2, #573	; 0x23d
 800cbbe:	4952      	ldr	r1, [pc, #328]	; (800cd08 <tcp_abandon+0x160>)
 800cbc0:	4852      	ldr	r0, [pc, #328]	; (800cd0c <tcp_abandon+0x164>)
 800cbc2:	f00b fc61 	bl	8018488 <iprintf>
 800cbc6:	e099      	b.n	800ccfc <tcp_abandon+0x154>

  /* pcb->state LISTEN not allowed here */
  LWIP_ASSERT("don't call tcp_abort/tcp_abandon for listen-pcbs",
 800cbc8:	687b      	ldr	r3, [r7, #4]
 800cbca:	7d1b      	ldrb	r3, [r3, #20]
 800cbcc:	2b01      	cmp	r3, #1
 800cbce:	d106      	bne.n	800cbde <tcp_abandon+0x36>
 800cbd0:	4b4c      	ldr	r3, [pc, #304]	; (800cd04 <tcp_abandon+0x15c>)
 800cbd2:	f44f 7210 	mov.w	r2, #576	; 0x240
 800cbd6:	494e      	ldr	r1, [pc, #312]	; (800cd10 <tcp_abandon+0x168>)
 800cbd8:	484c      	ldr	r0, [pc, #304]	; (800cd0c <tcp_abandon+0x164>)
 800cbda:	f00b fc55 	bl	8018488 <iprintf>
              pcb->state != LISTEN);
  /* Figure out on which TCP PCB list we are, and remove us. If we
     are in an active state, call the receive function associated with
     the PCB with a NULL argument, and send an RST to the remote end. */
  if (pcb->state == TIME_WAIT) {
 800cbde:	687b      	ldr	r3, [r7, #4]
 800cbe0:	7d1b      	ldrb	r3, [r3, #20]
 800cbe2:	2b0a      	cmp	r3, #10
 800cbe4:	d107      	bne.n	800cbf6 <tcp_abandon+0x4e>
    tcp_pcb_remove(&tcp_tw_pcbs, pcb);
 800cbe6:	6879      	ldr	r1, [r7, #4]
 800cbe8:	484a      	ldr	r0, [pc, #296]	; (800cd14 <tcp_abandon+0x16c>)
 800cbea:	f001 f9d1 	bl	800df90 <tcp_pcb_remove>
    tcp_free(pcb);
 800cbee:	6878      	ldr	r0, [r7, #4]
 800cbf0:	f7ff fdb0 	bl	800c754 <tcp_free>
 800cbf4:	e082      	b.n	800ccfc <tcp_abandon+0x154>
  } else {
    int send_rst = 0;
 800cbf6:	2300      	movs	r3, #0
 800cbf8:	627b      	str	r3, [r7, #36]	; 0x24
    u16_t local_port = 0;
 800cbfa:	2300      	movs	r3, #0
 800cbfc:	847b      	strh	r3, [r7, #34]	; 0x22
    enum tcp_state last_state;
    seqno = pcb->snd_nxt;
 800cbfe:	687b      	ldr	r3, [r7, #4]
 800cc00:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800cc02:	61bb      	str	r3, [r7, #24]
    ackno = pcb->rcv_nxt;
 800cc04:	687b      	ldr	r3, [r7, #4]
 800cc06:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800cc08:	617b      	str	r3, [r7, #20]
#if LWIP_CALLBACK_API
    errf = pcb->errf;
 800cc0a:	687b      	ldr	r3, [r7, #4]
 800cc0c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800cc10:	613b      	str	r3, [r7, #16]
#endif /* LWIP_CALLBACK_API */
    errf_arg = pcb->callback_arg;
 800cc12:	687b      	ldr	r3, [r7, #4]
 800cc14:	691b      	ldr	r3, [r3, #16]
 800cc16:	60fb      	str	r3, [r7, #12]
    if (pcb->state == CLOSED) {
 800cc18:	687b      	ldr	r3, [r7, #4]
 800cc1a:	7d1b      	ldrb	r3, [r3, #20]
 800cc1c:	2b00      	cmp	r3, #0
 800cc1e:	d126      	bne.n	800cc6e <tcp_abandon+0xc6>
      if (pcb->local_port != 0) {
 800cc20:	687b      	ldr	r3, [r7, #4]
 800cc22:	8adb      	ldrh	r3, [r3, #22]
 800cc24:	2b00      	cmp	r3, #0
 800cc26:	d02e      	beq.n	800cc86 <tcp_abandon+0xde>
        /* bound, not yet opened */
        TCP_RMV(&tcp_bound_pcbs, pcb);
 800cc28:	4b3b      	ldr	r3, [pc, #236]	; (800cd18 <tcp_abandon+0x170>)
 800cc2a:	681b      	ldr	r3, [r3, #0]
 800cc2c:	687a      	ldr	r2, [r7, #4]
 800cc2e:	429a      	cmp	r2, r3
 800cc30:	d105      	bne.n	800cc3e <tcp_abandon+0x96>
 800cc32:	4b39      	ldr	r3, [pc, #228]	; (800cd18 <tcp_abandon+0x170>)
 800cc34:	681b      	ldr	r3, [r3, #0]
 800cc36:	68db      	ldr	r3, [r3, #12]
 800cc38:	4a37      	ldr	r2, [pc, #220]	; (800cd18 <tcp_abandon+0x170>)
 800cc3a:	6013      	str	r3, [r2, #0]
 800cc3c:	e013      	b.n	800cc66 <tcp_abandon+0xbe>
 800cc3e:	4b36      	ldr	r3, [pc, #216]	; (800cd18 <tcp_abandon+0x170>)
 800cc40:	681b      	ldr	r3, [r3, #0]
 800cc42:	61fb      	str	r3, [r7, #28]
 800cc44:	e00c      	b.n	800cc60 <tcp_abandon+0xb8>
 800cc46:	69fb      	ldr	r3, [r7, #28]
 800cc48:	68db      	ldr	r3, [r3, #12]
 800cc4a:	687a      	ldr	r2, [r7, #4]
 800cc4c:	429a      	cmp	r2, r3
 800cc4e:	d104      	bne.n	800cc5a <tcp_abandon+0xb2>
 800cc50:	687b      	ldr	r3, [r7, #4]
 800cc52:	68da      	ldr	r2, [r3, #12]
 800cc54:	69fb      	ldr	r3, [r7, #28]
 800cc56:	60da      	str	r2, [r3, #12]
 800cc58:	e005      	b.n	800cc66 <tcp_abandon+0xbe>
 800cc5a:	69fb      	ldr	r3, [r7, #28]
 800cc5c:	68db      	ldr	r3, [r3, #12]
 800cc5e:	61fb      	str	r3, [r7, #28]
 800cc60:	69fb      	ldr	r3, [r7, #28]
 800cc62:	2b00      	cmp	r3, #0
 800cc64:	d1ef      	bne.n	800cc46 <tcp_abandon+0x9e>
 800cc66:	687b      	ldr	r3, [r7, #4]
 800cc68:	2200      	movs	r2, #0
 800cc6a:	60da      	str	r2, [r3, #12]
 800cc6c:	e00b      	b.n	800cc86 <tcp_abandon+0xde>
      }
    } else {
      send_rst = reset;
 800cc6e:	683b      	ldr	r3, [r7, #0]
 800cc70:	627b      	str	r3, [r7, #36]	; 0x24
      local_port = pcb->local_port;
 800cc72:	687b      	ldr	r3, [r7, #4]
 800cc74:	8adb      	ldrh	r3, [r3, #22]
 800cc76:	847b      	strh	r3, [r7, #34]	; 0x22
      TCP_PCB_REMOVE_ACTIVE(pcb);
 800cc78:	6879      	ldr	r1, [r7, #4]
 800cc7a:	4828      	ldr	r0, [pc, #160]	; (800cd1c <tcp_abandon+0x174>)
 800cc7c:	f001 f988 	bl	800df90 <tcp_pcb_remove>
 800cc80:	4b27      	ldr	r3, [pc, #156]	; (800cd20 <tcp_abandon+0x178>)
 800cc82:	2201      	movs	r2, #1
 800cc84:	701a      	strb	r2, [r3, #0]
    }
    if (pcb->unacked != NULL) {
 800cc86:	687b      	ldr	r3, [r7, #4]
 800cc88:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800cc8a:	2b00      	cmp	r3, #0
 800cc8c:	d004      	beq.n	800cc98 <tcp_abandon+0xf0>
      tcp_segs_free(pcb->unacked);
 800cc8e:	687b      	ldr	r3, [r7, #4]
 800cc90:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800cc92:	4618      	mov	r0, r3
 800cc94:	f000 fe7a 	bl	800d98c <tcp_segs_free>
    }
    if (pcb->unsent != NULL) {
 800cc98:	687b      	ldr	r3, [r7, #4]
 800cc9a:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800cc9c:	2b00      	cmp	r3, #0
 800cc9e:	d004      	beq.n	800ccaa <tcp_abandon+0x102>
      tcp_segs_free(pcb->unsent);
 800cca0:	687b      	ldr	r3, [r7, #4]
 800cca2:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800cca4:	4618      	mov	r0, r3
 800cca6:	f000 fe71 	bl	800d98c <tcp_segs_free>
    }
#if TCP_QUEUE_OOSEQ
    if (pcb->ooseq != NULL) {
 800ccaa:	687b      	ldr	r3, [r7, #4]
 800ccac:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800ccae:	2b00      	cmp	r3, #0
 800ccb0:	d004      	beq.n	800ccbc <tcp_abandon+0x114>
      tcp_segs_free(pcb->ooseq);
 800ccb2:	687b      	ldr	r3, [r7, #4]
 800ccb4:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800ccb6:	4618      	mov	r0, r3
 800ccb8:	f000 fe68 	bl	800d98c <tcp_segs_free>
    }
#endif /* TCP_QUEUE_OOSEQ */
    tcp_backlog_accepted(pcb);
    if (send_rst) {
 800ccbc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ccbe:	2b00      	cmp	r3, #0
 800ccc0:	d00e      	beq.n	800cce0 <tcp_abandon+0x138>
      LWIP_DEBUGF(TCP_RST_DEBUG, ("tcp_abandon: sending RST\n"));
      tcp_rst(pcb, seqno, ackno, &pcb->local_ip, &pcb->remote_ip, local_port, pcb->remote_port);
 800ccc2:	6879      	ldr	r1, [r7, #4]
 800ccc4:	687b      	ldr	r3, [r7, #4]
 800ccc6:	3304      	adds	r3, #4
 800ccc8:	687a      	ldr	r2, [r7, #4]
 800ccca:	8b12      	ldrh	r2, [r2, #24]
 800cccc:	9202      	str	r2, [sp, #8]
 800ccce:	8c7a      	ldrh	r2, [r7, #34]	; 0x22
 800ccd0:	9201      	str	r2, [sp, #4]
 800ccd2:	9300      	str	r3, [sp, #0]
 800ccd4:	460b      	mov	r3, r1
 800ccd6:	697a      	ldr	r2, [r7, #20]
 800ccd8:	69b9      	ldr	r1, [r7, #24]
 800ccda:	6878      	ldr	r0, [r7, #4]
 800ccdc:	f005 fb28 	bl	8012330 <tcp_rst>
    }
    last_state = pcb->state;
 800cce0:	687b      	ldr	r3, [r7, #4]
 800cce2:	7d1b      	ldrb	r3, [r3, #20]
 800cce4:	72fb      	strb	r3, [r7, #11]
    tcp_free(pcb);
 800cce6:	6878      	ldr	r0, [r7, #4]
 800cce8:	f7ff fd34 	bl	800c754 <tcp_free>
    TCP_EVENT_ERR(last_state, errf, errf_arg, ERR_ABRT);
 800ccec:	693b      	ldr	r3, [r7, #16]
 800ccee:	2b00      	cmp	r3, #0
 800ccf0:	d004      	beq.n	800ccfc <tcp_abandon+0x154>
 800ccf2:	693b      	ldr	r3, [r7, #16]
 800ccf4:	f06f 010c 	mvn.w	r1, #12
 800ccf8:	68f8      	ldr	r0, [r7, #12]
 800ccfa:	4798      	blx	r3
  }
}
 800ccfc:	3728      	adds	r7, #40	; 0x28
 800ccfe:	46bd      	mov	sp, r7
 800cd00:	bd80      	pop	{r7, pc}
 800cd02:	bf00      	nop
 800cd04:	08019ea4 	.word	0x08019ea4
 800cd08:	08019fe8 	.word	0x08019fe8
 800cd0c:	08019ee8 	.word	0x08019ee8
 800cd10:	0801a004 	.word	0x0801a004
 800cd14:	2000892c 	.word	0x2000892c
 800cd18:	20008920 	.word	0x20008920
 800cd1c:	20008928 	.word	0x20008928
 800cd20:	20008930 	.word	0x20008930

0800cd24 <tcp_abort>:
 *
 * @param pcb the tcp pcb to abort
 */
void
tcp_abort(struct tcp_pcb *pcb)
{
 800cd24:	b580      	push	{r7, lr}
 800cd26:	b082      	sub	sp, #8
 800cd28:	af00      	add	r7, sp, #0
 800cd2a:	6078      	str	r0, [r7, #4]
  tcp_abandon(pcb, 1);
 800cd2c:	2101      	movs	r1, #1
 800cd2e:	6878      	ldr	r0, [r7, #4]
 800cd30:	f7ff ff3a 	bl	800cba8 <tcp_abandon>
}
 800cd34:	bf00      	nop
 800cd36:	3708      	adds	r7, #8
 800cd38:	46bd      	mov	sp, r7
 800cd3a:	bd80      	pop	{r7, pc}

0800cd3c <tcp_update_rcv_ann_wnd>:
 * Returns how much extra window would be advertised if we sent an
 * update now.
 */
u32_t
tcp_update_rcv_ann_wnd(struct tcp_pcb *pcb)
{
 800cd3c:	b580      	push	{r7, lr}
 800cd3e:	b084      	sub	sp, #16
 800cd40:	af00      	add	r7, sp, #0
 800cd42:	6078      	str	r0, [r7, #4]
  u32_t new_right_edge;

  LWIP_ASSERT("tcp_update_rcv_ann_wnd: invalid pcb", pcb != NULL);
 800cd44:	687b      	ldr	r3, [r7, #4]
 800cd46:	2b00      	cmp	r3, #0
 800cd48:	d106      	bne.n	800cd58 <tcp_update_rcv_ann_wnd+0x1c>
 800cd4a:	4b25      	ldr	r3, [pc, #148]	; (800cde0 <tcp_update_rcv_ann_wnd+0xa4>)
 800cd4c:	f240 32a6 	movw	r2, #934	; 0x3a6
 800cd50:	4924      	ldr	r1, [pc, #144]	; (800cde4 <tcp_update_rcv_ann_wnd+0xa8>)
 800cd52:	4825      	ldr	r0, [pc, #148]	; (800cde8 <tcp_update_rcv_ann_wnd+0xac>)
 800cd54:	f00b fb98 	bl	8018488 <iprintf>
  new_right_edge = pcb->rcv_nxt + pcb->rcv_wnd;
 800cd58:	687b      	ldr	r3, [r7, #4]
 800cd5a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800cd5c:	687a      	ldr	r2, [r7, #4]
 800cd5e:	8d12      	ldrh	r2, [r2, #40]	; 0x28
 800cd60:	4413      	add	r3, r2
 800cd62:	60fb      	str	r3, [r7, #12]

  if (TCP_SEQ_GEQ(new_right_edge, pcb->rcv_ann_right_edge + LWIP_MIN((TCP_WND / 2), pcb->mss))) {
 800cd64:	687b      	ldr	r3, [r7, #4]
 800cd66:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800cd68:	687a      	ldr	r2, [r7, #4]
 800cd6a:	8e52      	ldrh	r2, [r2, #50]	; 0x32
 800cd6c:	f5b2 6f86 	cmp.w	r2, #1072	; 0x430
 800cd70:	bf28      	it	cs
 800cd72:	f44f 6286 	movcs.w	r2, #1072	; 0x430
 800cd76:	b292      	uxth	r2, r2
 800cd78:	4413      	add	r3, r2
 800cd7a:	68fa      	ldr	r2, [r7, #12]
 800cd7c:	1ad3      	subs	r3, r2, r3
 800cd7e:	2b00      	cmp	r3, #0
 800cd80:	db08      	blt.n	800cd94 <tcp_update_rcv_ann_wnd+0x58>
    /* we can advertise more window */
    pcb->rcv_ann_wnd = pcb->rcv_wnd;
 800cd82:	687b      	ldr	r3, [r7, #4]
 800cd84:	8d1a      	ldrh	r2, [r3, #40]	; 0x28
 800cd86:	687b      	ldr	r3, [r7, #4]
 800cd88:	855a      	strh	r2, [r3, #42]	; 0x2a
    return new_right_edge - pcb->rcv_ann_right_edge;
 800cd8a:	687b      	ldr	r3, [r7, #4]
 800cd8c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800cd8e:	68fa      	ldr	r2, [r7, #12]
 800cd90:	1ad3      	subs	r3, r2, r3
 800cd92:	e020      	b.n	800cdd6 <tcp_update_rcv_ann_wnd+0x9a>
  } else {
    if (TCP_SEQ_GT(pcb->rcv_nxt, pcb->rcv_ann_right_edge)) {
 800cd94:	687b      	ldr	r3, [r7, #4]
 800cd96:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800cd98:	687b      	ldr	r3, [r7, #4]
 800cd9a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800cd9c:	1ad3      	subs	r3, r2, r3
 800cd9e:	2b00      	cmp	r3, #0
 800cda0:	dd03      	ble.n	800cdaa <tcp_update_rcv_ann_wnd+0x6e>
      /* Can happen due to other end sending out of advertised window,
       * but within actual available (but not yet advertised) window */
      pcb->rcv_ann_wnd = 0;
 800cda2:	687b      	ldr	r3, [r7, #4]
 800cda4:	2200      	movs	r2, #0
 800cda6:	855a      	strh	r2, [r3, #42]	; 0x2a
 800cda8:	e014      	b.n	800cdd4 <tcp_update_rcv_ann_wnd+0x98>
    } else {
      /* keep the right edge of window constant */
      u32_t new_rcv_ann_wnd = pcb->rcv_ann_right_edge - pcb->rcv_nxt;
 800cdaa:	687b      	ldr	r3, [r7, #4]
 800cdac:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800cdae:	687b      	ldr	r3, [r7, #4]
 800cdb0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800cdb2:	1ad3      	subs	r3, r2, r3
 800cdb4:	60bb      	str	r3, [r7, #8]
#if !LWIP_WND_SCALE
      LWIP_ASSERT("new_rcv_ann_wnd <= 0xffff", new_rcv_ann_wnd <= 0xffff);
 800cdb6:	68bb      	ldr	r3, [r7, #8]
 800cdb8:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800cdbc:	d306      	bcc.n	800cdcc <tcp_update_rcv_ann_wnd+0x90>
 800cdbe:	4b08      	ldr	r3, [pc, #32]	; (800cde0 <tcp_update_rcv_ann_wnd+0xa4>)
 800cdc0:	f240 32b6 	movw	r2, #950	; 0x3b6
 800cdc4:	4909      	ldr	r1, [pc, #36]	; (800cdec <tcp_update_rcv_ann_wnd+0xb0>)
 800cdc6:	4808      	ldr	r0, [pc, #32]	; (800cde8 <tcp_update_rcv_ann_wnd+0xac>)
 800cdc8:	f00b fb5e 	bl	8018488 <iprintf>
#endif
      pcb->rcv_ann_wnd = (tcpwnd_size_t)new_rcv_ann_wnd;
 800cdcc:	68bb      	ldr	r3, [r7, #8]
 800cdce:	b29a      	uxth	r2, r3
 800cdd0:	687b      	ldr	r3, [r7, #4]
 800cdd2:	855a      	strh	r2, [r3, #42]	; 0x2a
    }
    return 0;
 800cdd4:	2300      	movs	r3, #0
  }
}
 800cdd6:	4618      	mov	r0, r3
 800cdd8:	3710      	adds	r7, #16
 800cdda:	46bd      	mov	sp, r7
 800cddc:	bd80      	pop	{r7, pc}
 800cdde:	bf00      	nop
 800cde0:	08019ea4 	.word	0x08019ea4
 800cde4:	0801a100 	.word	0x0801a100
 800cde8:	08019ee8 	.word	0x08019ee8
 800cdec:	0801a124 	.word	0x0801a124

0800cdf0 <tcp_recved>:
 * @param pcb the tcp_pcb for which data is read
 * @param len the amount of bytes that have been read by the application
 */
void
tcp_recved(struct tcp_pcb *pcb, u16_t len)
{
 800cdf0:	b580      	push	{r7, lr}
 800cdf2:	b084      	sub	sp, #16
 800cdf4:	af00      	add	r7, sp, #0
 800cdf6:	6078      	str	r0, [r7, #4]
 800cdf8:	460b      	mov	r3, r1
 800cdfa:	807b      	strh	r3, [r7, #2]
  u32_t wnd_inflation;
  tcpwnd_size_t rcv_wnd;

  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("tcp_recved: invalid pcb", pcb != NULL, return);
 800cdfc:	687b      	ldr	r3, [r7, #4]
 800cdfe:	2b00      	cmp	r3, #0
 800ce00:	d107      	bne.n	800ce12 <tcp_recved+0x22>
 800ce02:	4b1f      	ldr	r3, [pc, #124]	; (800ce80 <tcp_recved+0x90>)
 800ce04:	f240 32cf 	movw	r2, #975	; 0x3cf
 800ce08:	491e      	ldr	r1, [pc, #120]	; (800ce84 <tcp_recved+0x94>)
 800ce0a:	481f      	ldr	r0, [pc, #124]	; (800ce88 <tcp_recved+0x98>)
 800ce0c:	f00b fb3c 	bl	8018488 <iprintf>
 800ce10:	e032      	b.n	800ce78 <tcp_recved+0x88>

  /* pcb->state LISTEN not allowed here */
  LWIP_ASSERT("don't call tcp_recved for listen-pcbs",
 800ce12:	687b      	ldr	r3, [r7, #4]
 800ce14:	7d1b      	ldrb	r3, [r3, #20]
 800ce16:	2b01      	cmp	r3, #1
 800ce18:	d106      	bne.n	800ce28 <tcp_recved+0x38>
 800ce1a:	4b19      	ldr	r3, [pc, #100]	; (800ce80 <tcp_recved+0x90>)
 800ce1c:	f240 32d2 	movw	r2, #978	; 0x3d2
 800ce20:	491a      	ldr	r1, [pc, #104]	; (800ce8c <tcp_recved+0x9c>)
 800ce22:	4819      	ldr	r0, [pc, #100]	; (800ce88 <tcp_recved+0x98>)
 800ce24:	f00b fb30 	bl	8018488 <iprintf>
              pcb->state != LISTEN);

  rcv_wnd = (tcpwnd_size_t)(pcb->rcv_wnd + len);
 800ce28:	687b      	ldr	r3, [r7, #4]
 800ce2a:	8d1a      	ldrh	r2, [r3, #40]	; 0x28
 800ce2c:	887b      	ldrh	r3, [r7, #2]
 800ce2e:	4413      	add	r3, r2
 800ce30:	81fb      	strh	r3, [r7, #14]
  if ((rcv_wnd > TCP_WND_MAX(pcb)) || (rcv_wnd < pcb->rcv_wnd)) {
 800ce32:	89fb      	ldrh	r3, [r7, #14]
 800ce34:	f5b3 6f06 	cmp.w	r3, #2144	; 0x860
 800ce38:	d804      	bhi.n	800ce44 <tcp_recved+0x54>
 800ce3a:	687b      	ldr	r3, [r7, #4]
 800ce3c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800ce3e:	89fa      	ldrh	r2, [r7, #14]
 800ce40:	429a      	cmp	r2, r3
 800ce42:	d204      	bcs.n	800ce4e <tcp_recved+0x5e>
    /* window got too big or tcpwnd_size_t overflow */
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_recved: window got too big or tcpwnd_size_t overflow\n"));
    pcb->rcv_wnd = TCP_WND_MAX(pcb);
 800ce44:	687b      	ldr	r3, [r7, #4]
 800ce46:	f44f 6206 	mov.w	r2, #2144	; 0x860
 800ce4a:	851a      	strh	r2, [r3, #40]	; 0x28
 800ce4c:	e002      	b.n	800ce54 <tcp_recved+0x64>
  } else  {
    pcb->rcv_wnd = rcv_wnd;
 800ce4e:	687b      	ldr	r3, [r7, #4]
 800ce50:	89fa      	ldrh	r2, [r7, #14]
 800ce52:	851a      	strh	r2, [r3, #40]	; 0x28
  }

  wnd_inflation = tcp_update_rcv_ann_wnd(pcb);
 800ce54:	6878      	ldr	r0, [r7, #4]
 800ce56:	f7ff ff71 	bl	800cd3c <tcp_update_rcv_ann_wnd>
 800ce5a:	60b8      	str	r0, [r7, #8]

  /* If the change in the right edge of window is significant (default
   * watermark is TCP_WND/4), then send an explicit update now.
   * Otherwise wait for a packet to be sent in the normal course of
   * events (or more window to be available later) */
  if (wnd_inflation >= TCP_WND_UPDATE_THRESHOLD) {
 800ce5c:	68bb      	ldr	r3, [r7, #8]
 800ce5e:	f5b3 7f06 	cmp.w	r3, #536	; 0x218
 800ce62:	d309      	bcc.n	800ce78 <tcp_recved+0x88>
    tcp_ack_now(pcb);
 800ce64:	687b      	ldr	r3, [r7, #4]
 800ce66:	8b5b      	ldrh	r3, [r3, #26]
 800ce68:	f043 0302 	orr.w	r3, r3, #2
 800ce6c:	b29a      	uxth	r2, r3
 800ce6e:	687b      	ldr	r3, [r7, #4]
 800ce70:	835a      	strh	r2, [r3, #26]
    tcp_output(pcb);
 800ce72:	6878      	ldr	r0, [r7, #4]
 800ce74:	f004 fca8 	bl	80117c8 <tcp_output>
  }

  LWIP_DEBUGF(TCP_DEBUG, ("tcp_recved: received %"U16_F" bytes, wnd %"TCPWNDSIZE_F" (%"TCPWNDSIZE_F").\n",
                          len, pcb->rcv_wnd, (u16_t)(TCP_WND_MAX(pcb) - pcb->rcv_wnd)));
}
 800ce78:	3710      	adds	r7, #16
 800ce7a:	46bd      	mov	sp, r7
 800ce7c:	bd80      	pop	{r7, pc}
 800ce7e:	bf00      	nop
 800ce80:	08019ea4 	.word	0x08019ea4
 800ce84:	0801a140 	.word	0x0801a140
 800ce88:	08019ee8 	.word	0x08019ee8
 800ce8c:	0801a158 	.word	0x0801a158

0800ce90 <tcp_new_port>:
 *
 * @return a new (free) local TCP port number
 */
static u16_t
tcp_new_port(void)
{
 800ce90:	b480      	push	{r7}
 800ce92:	b083      	sub	sp, #12
 800ce94:	af00      	add	r7, sp, #0
  u8_t i;
  u16_t n = 0;
 800ce96:	2300      	movs	r3, #0
 800ce98:	80bb      	strh	r3, [r7, #4]
  struct tcp_pcb *pcb;

again:
  tcp_port++;
 800ce9a:	4b1e      	ldr	r3, [pc, #120]	; (800cf14 <tcp_new_port+0x84>)
 800ce9c:	881b      	ldrh	r3, [r3, #0]
 800ce9e:	3301      	adds	r3, #1
 800cea0:	b29a      	uxth	r2, r3
 800cea2:	4b1c      	ldr	r3, [pc, #112]	; (800cf14 <tcp_new_port+0x84>)
 800cea4:	801a      	strh	r2, [r3, #0]
  if (tcp_port == TCP_LOCAL_PORT_RANGE_END) {
 800cea6:	4b1b      	ldr	r3, [pc, #108]	; (800cf14 <tcp_new_port+0x84>)
 800cea8:	881b      	ldrh	r3, [r3, #0]
 800ceaa:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800ceae:	4293      	cmp	r3, r2
 800ceb0:	d103      	bne.n	800ceba <tcp_new_port+0x2a>
    tcp_port = TCP_LOCAL_PORT_RANGE_START;
 800ceb2:	4b18      	ldr	r3, [pc, #96]	; (800cf14 <tcp_new_port+0x84>)
 800ceb4:	f44f 4240 	mov.w	r2, #49152	; 0xc000
 800ceb8:	801a      	strh	r2, [r3, #0]
  }
  /* Check all PCB lists. */
  for (i = 0; i < NUM_TCP_PCB_LISTS; i++) {
 800ceba:	2300      	movs	r3, #0
 800cebc:	71fb      	strb	r3, [r7, #7]
 800cebe:	e01e      	b.n	800cefe <tcp_new_port+0x6e>
    for (pcb = *tcp_pcb_lists[i]; pcb != NULL; pcb = pcb->next) {
 800cec0:	79fb      	ldrb	r3, [r7, #7]
 800cec2:	4a15      	ldr	r2, [pc, #84]	; (800cf18 <tcp_new_port+0x88>)
 800cec4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800cec8:	681b      	ldr	r3, [r3, #0]
 800ceca:	603b      	str	r3, [r7, #0]
 800cecc:	e011      	b.n	800cef2 <tcp_new_port+0x62>
      if (pcb->local_port == tcp_port) {
 800cece:	683b      	ldr	r3, [r7, #0]
 800ced0:	8ada      	ldrh	r2, [r3, #22]
 800ced2:	4b10      	ldr	r3, [pc, #64]	; (800cf14 <tcp_new_port+0x84>)
 800ced4:	881b      	ldrh	r3, [r3, #0]
 800ced6:	429a      	cmp	r2, r3
 800ced8:	d108      	bne.n	800ceec <tcp_new_port+0x5c>
        n++;
 800ceda:	88bb      	ldrh	r3, [r7, #4]
 800cedc:	3301      	adds	r3, #1
 800cede:	80bb      	strh	r3, [r7, #4]
        if (n > (TCP_LOCAL_PORT_RANGE_END - TCP_LOCAL_PORT_RANGE_START)) {
 800cee0:	88bb      	ldrh	r3, [r7, #4]
 800cee2:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800cee6:	d3d8      	bcc.n	800ce9a <tcp_new_port+0xa>
          return 0;
 800cee8:	2300      	movs	r3, #0
 800ceea:	e00d      	b.n	800cf08 <tcp_new_port+0x78>
    for (pcb = *tcp_pcb_lists[i]; pcb != NULL; pcb = pcb->next) {
 800ceec:	683b      	ldr	r3, [r7, #0]
 800ceee:	68db      	ldr	r3, [r3, #12]
 800cef0:	603b      	str	r3, [r7, #0]
 800cef2:	683b      	ldr	r3, [r7, #0]
 800cef4:	2b00      	cmp	r3, #0
 800cef6:	d1ea      	bne.n	800cece <tcp_new_port+0x3e>
  for (i = 0; i < NUM_TCP_PCB_LISTS; i++) {
 800cef8:	79fb      	ldrb	r3, [r7, #7]
 800cefa:	3301      	adds	r3, #1
 800cefc:	71fb      	strb	r3, [r7, #7]
 800cefe:	79fb      	ldrb	r3, [r7, #7]
 800cf00:	2b03      	cmp	r3, #3
 800cf02:	d9dd      	bls.n	800cec0 <tcp_new_port+0x30>
        }
        goto again;
      }
    }
  }
  return tcp_port;
 800cf04:	4b03      	ldr	r3, [pc, #12]	; (800cf14 <tcp_new_port+0x84>)
 800cf06:	881b      	ldrh	r3, [r3, #0]
}
 800cf08:	4618      	mov	r0, r3
 800cf0a:	370c      	adds	r7, #12
 800cf0c:	46bd      	mov	sp, r7
 800cf0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cf12:	4770      	bx	lr
 800cf14:	200000aa 	.word	0x200000aa
 800cf18:	0801c284 	.word	0x0801c284

0800cf1c <tcp_connect>:
 *         other err_t values if connect request couldn't be sent
 */
err_t
tcp_connect(struct tcp_pcb *pcb, const ip_addr_t *ipaddr, u16_t port,
            tcp_connected_fn connected)
{
 800cf1c:	b580      	push	{r7, lr}
 800cf1e:	b08a      	sub	sp, #40	; 0x28
 800cf20:	af00      	add	r7, sp, #0
 800cf22:	60f8      	str	r0, [r7, #12]
 800cf24:	60b9      	str	r1, [r7, #8]
 800cf26:	603b      	str	r3, [r7, #0]
 800cf28:	4613      	mov	r3, r2
 800cf2a:	80fb      	strh	r3, [r7, #6]
  struct netif *netif = NULL;
 800cf2c:	2300      	movs	r3, #0
 800cf2e:	627b      	str	r3, [r7, #36]	; 0x24
  u32_t iss;
  u16_t old_local_port;

  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("tcp_connect: invalid pcb", pcb != NULL, return ERR_ARG);
 800cf30:	68fb      	ldr	r3, [r7, #12]
 800cf32:	2b00      	cmp	r3, #0
 800cf34:	d109      	bne.n	800cf4a <tcp_connect+0x2e>
 800cf36:	4b7d      	ldr	r3, [pc, #500]	; (800d12c <tcp_connect+0x210>)
 800cf38:	f240 4235 	movw	r2, #1077	; 0x435
 800cf3c:	497c      	ldr	r1, [pc, #496]	; (800d130 <tcp_connect+0x214>)
 800cf3e:	487d      	ldr	r0, [pc, #500]	; (800d134 <tcp_connect+0x218>)
 800cf40:	f00b faa2 	bl	8018488 <iprintf>
 800cf44:	f06f 030f 	mvn.w	r3, #15
 800cf48:	e0ec      	b.n	800d124 <tcp_connect+0x208>
  LWIP_ERROR("tcp_connect: invalid ipaddr", ipaddr != NULL, return ERR_ARG);
 800cf4a:	68bb      	ldr	r3, [r7, #8]
 800cf4c:	2b00      	cmp	r3, #0
 800cf4e:	d109      	bne.n	800cf64 <tcp_connect+0x48>
 800cf50:	4b76      	ldr	r3, [pc, #472]	; (800d12c <tcp_connect+0x210>)
 800cf52:	f240 4236 	movw	r2, #1078	; 0x436
 800cf56:	4978      	ldr	r1, [pc, #480]	; (800d138 <tcp_connect+0x21c>)
 800cf58:	4876      	ldr	r0, [pc, #472]	; (800d134 <tcp_connect+0x218>)
 800cf5a:	f00b fa95 	bl	8018488 <iprintf>
 800cf5e:	f06f 030f 	mvn.w	r3, #15
 800cf62:	e0df      	b.n	800d124 <tcp_connect+0x208>

  LWIP_ERROR("tcp_connect: can only connect from state CLOSED", pcb->state == CLOSED, return ERR_ISCONN);
 800cf64:	68fb      	ldr	r3, [r7, #12]
 800cf66:	7d1b      	ldrb	r3, [r3, #20]
 800cf68:	2b00      	cmp	r3, #0
 800cf6a:	d009      	beq.n	800cf80 <tcp_connect+0x64>
 800cf6c:	4b6f      	ldr	r3, [pc, #444]	; (800d12c <tcp_connect+0x210>)
 800cf6e:	f44f 6287 	mov.w	r2, #1080	; 0x438
 800cf72:	4972      	ldr	r1, [pc, #456]	; (800d13c <tcp_connect+0x220>)
 800cf74:	486f      	ldr	r0, [pc, #444]	; (800d134 <tcp_connect+0x218>)
 800cf76:	f00b fa87 	bl	8018488 <iprintf>
 800cf7a:	f06f 0309 	mvn.w	r3, #9
 800cf7e:	e0d1      	b.n	800d124 <tcp_connect+0x208>

  LWIP_DEBUGF(TCP_DEBUG, ("tcp_connect to port %"U16_F"\n", port));
  ip_addr_set(&pcb->remote_ip, ipaddr);
 800cf80:	68bb      	ldr	r3, [r7, #8]
 800cf82:	2b00      	cmp	r3, #0
 800cf84:	d002      	beq.n	800cf8c <tcp_connect+0x70>
 800cf86:	68bb      	ldr	r3, [r7, #8]
 800cf88:	681b      	ldr	r3, [r3, #0]
 800cf8a:	e000      	b.n	800cf8e <tcp_connect+0x72>
 800cf8c:	2300      	movs	r3, #0
 800cf8e:	68fa      	ldr	r2, [r7, #12]
 800cf90:	6053      	str	r3, [r2, #4]
  pcb->remote_port = port;
 800cf92:	68fb      	ldr	r3, [r7, #12]
 800cf94:	88fa      	ldrh	r2, [r7, #6]
 800cf96:	831a      	strh	r2, [r3, #24]

  if (pcb->netif_idx != NETIF_NO_INDEX) {
 800cf98:	68fb      	ldr	r3, [r7, #12]
 800cf9a:	7a1b      	ldrb	r3, [r3, #8]
 800cf9c:	2b00      	cmp	r3, #0
 800cf9e:	d006      	beq.n	800cfae <tcp_connect+0x92>
    netif = netif_get_by_index(pcb->netif_idx);
 800cfa0:	68fb      	ldr	r3, [r7, #12]
 800cfa2:	7a1b      	ldrb	r3, [r3, #8]
 800cfa4:	4618      	mov	r0, r3
 800cfa6:	f7fe fc6b 	bl	800b880 <netif_get_by_index>
 800cfaa:	6278      	str	r0, [r7, #36]	; 0x24
 800cfac:	e005      	b.n	800cfba <tcp_connect+0x9e>
  } else {
    /* check if we have a route to the remote host */
    netif = ip_route(&pcb->local_ip, &pcb->remote_ip);
 800cfae:	68fb      	ldr	r3, [r7, #12]
 800cfb0:	3304      	adds	r3, #4
 800cfb2:	4618      	mov	r0, r3
 800cfb4:	f009 f9a0 	bl	80162f8 <ip4_route>
 800cfb8:	6278      	str	r0, [r7, #36]	; 0x24
  }
  if (netif == NULL) {
 800cfba:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800cfbc:	2b00      	cmp	r3, #0
 800cfbe:	d102      	bne.n	800cfc6 <tcp_connect+0xaa>
    /* Don't even try to send a SYN packet if we have no route since that will fail. */
    return ERR_RTE;
 800cfc0:	f06f 0303 	mvn.w	r3, #3
 800cfc4:	e0ae      	b.n	800d124 <tcp_connect+0x208>
  }

  /* check if local IP has been assigned to pcb, if not, get one */
  if (ip_addr_isany(&pcb->local_ip)) {
 800cfc6:	68fb      	ldr	r3, [r7, #12]
 800cfc8:	2b00      	cmp	r3, #0
 800cfca:	d003      	beq.n	800cfd4 <tcp_connect+0xb8>
 800cfcc:	68fb      	ldr	r3, [r7, #12]
 800cfce:	681b      	ldr	r3, [r3, #0]
 800cfd0:	2b00      	cmp	r3, #0
 800cfd2:	d111      	bne.n	800cff8 <tcp_connect+0xdc>
    const ip_addr_t *local_ip = ip_netif_get_local_ip(netif, ipaddr);
 800cfd4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800cfd6:	2b00      	cmp	r3, #0
 800cfd8:	d002      	beq.n	800cfe0 <tcp_connect+0xc4>
 800cfda:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800cfdc:	3304      	adds	r3, #4
 800cfde:	e000      	b.n	800cfe2 <tcp_connect+0xc6>
 800cfe0:	2300      	movs	r3, #0
 800cfe2:	61fb      	str	r3, [r7, #28]
    if (local_ip == NULL) {
 800cfe4:	69fb      	ldr	r3, [r7, #28]
 800cfe6:	2b00      	cmp	r3, #0
 800cfe8:	d102      	bne.n	800cff0 <tcp_connect+0xd4>
      return ERR_RTE;
 800cfea:	f06f 0303 	mvn.w	r3, #3
 800cfee:	e099      	b.n	800d124 <tcp_connect+0x208>
    }
    ip_addr_copy(pcb->local_ip, *local_ip);
 800cff0:	69fb      	ldr	r3, [r7, #28]
 800cff2:	681a      	ldr	r2, [r3, #0]
 800cff4:	68fb      	ldr	r3, [r7, #12]
 800cff6:	601a      	str	r2, [r3, #0]
      ip6_addr_lacks_zone(ip_2_ip6(&pcb->remote_ip), IP6_UNICAST)) {
    ip6_addr_assign_zone(ip_2_ip6(&pcb->remote_ip), IP6_UNICAST, netif);
  }
#endif /* LWIP_IPV6 && LWIP_IPV6_SCOPES */

  old_local_port = pcb->local_port;
 800cff8:	68fb      	ldr	r3, [r7, #12]
 800cffa:	8adb      	ldrh	r3, [r3, #22]
 800cffc:	837b      	strh	r3, [r7, #26]
  if (pcb->local_port == 0) {
 800cffe:	68fb      	ldr	r3, [r7, #12]
 800d000:	8adb      	ldrh	r3, [r3, #22]
 800d002:	2b00      	cmp	r3, #0
 800d004:	d10c      	bne.n	800d020 <tcp_connect+0x104>
    pcb->local_port = tcp_new_port();
 800d006:	f7ff ff43 	bl	800ce90 <tcp_new_port>
 800d00a:	4603      	mov	r3, r0
 800d00c:	461a      	mov	r2, r3
 800d00e:	68fb      	ldr	r3, [r7, #12]
 800d010:	82da      	strh	r2, [r3, #22]
    if (pcb->local_port == 0) {
 800d012:	68fb      	ldr	r3, [r7, #12]
 800d014:	8adb      	ldrh	r3, [r3, #22]
 800d016:	2b00      	cmp	r3, #0
 800d018:	d102      	bne.n	800d020 <tcp_connect+0x104>
      return ERR_BUF;
 800d01a:	f06f 0301 	mvn.w	r3, #1
 800d01e:	e081      	b.n	800d124 <tcp_connect+0x208>
      }
    }
#endif /* SO_REUSE */
  }

  iss = tcp_next_iss(pcb);
 800d020:	68f8      	ldr	r0, [r7, #12]
 800d022:	f001 f849 	bl	800e0b8 <tcp_next_iss>
 800d026:	6178      	str	r0, [r7, #20]
  pcb->rcv_nxt = 0;
 800d028:	68fb      	ldr	r3, [r7, #12]
 800d02a:	2200      	movs	r2, #0
 800d02c:	625a      	str	r2, [r3, #36]	; 0x24
  pcb->snd_nxt = iss;
 800d02e:	68fb      	ldr	r3, [r7, #12]
 800d030:	697a      	ldr	r2, [r7, #20]
 800d032:	651a      	str	r2, [r3, #80]	; 0x50
  pcb->lastack = iss - 1;
 800d034:	697b      	ldr	r3, [r7, #20]
 800d036:	1e5a      	subs	r2, r3, #1
 800d038:	68fb      	ldr	r3, [r7, #12]
 800d03a:	645a      	str	r2, [r3, #68]	; 0x44
  pcb->snd_wl2 = iss - 1;
 800d03c:	697b      	ldr	r3, [r7, #20]
 800d03e:	1e5a      	subs	r2, r3, #1
 800d040:	68fb      	ldr	r3, [r7, #12]
 800d042:	659a      	str	r2, [r3, #88]	; 0x58
  pcb->snd_lbb = iss - 1;
 800d044:	697b      	ldr	r3, [r7, #20]
 800d046:	1e5a      	subs	r2, r3, #1
 800d048:	68fb      	ldr	r3, [r7, #12]
 800d04a:	65da      	str	r2, [r3, #92]	; 0x5c
  /* Start with a window that does not need scaling. When window scaling is
     enabled and used, the window is enlarged when both sides agree on scaling. */
  pcb->rcv_wnd = pcb->rcv_ann_wnd = TCPWND_MIN16(TCP_WND);
 800d04c:	68fb      	ldr	r3, [r7, #12]
 800d04e:	f44f 6206 	mov.w	r2, #2144	; 0x860
 800d052:	855a      	strh	r2, [r3, #42]	; 0x2a
 800d054:	68fb      	ldr	r3, [r7, #12]
 800d056:	8d5a      	ldrh	r2, [r3, #42]	; 0x2a
 800d058:	68fb      	ldr	r3, [r7, #12]
 800d05a:	851a      	strh	r2, [r3, #40]	; 0x28
  pcb->rcv_ann_right_edge = pcb->rcv_nxt;
 800d05c:	68fb      	ldr	r3, [r7, #12]
 800d05e:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800d060:	68fb      	ldr	r3, [r7, #12]
 800d062:	62da      	str	r2, [r3, #44]	; 0x2c
  pcb->snd_wnd = TCP_WND;
 800d064:	68fb      	ldr	r3, [r7, #12]
 800d066:	f44f 6206 	mov.w	r2, #2144	; 0x860
 800d06a:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
  /* As initial send MSS, we use TCP_MSS but limit it to 536.
     The send MSS is updated when an MSS option is received. */
  pcb->mss = INITIAL_MSS;
 800d06e:	68fb      	ldr	r3, [r7, #12]
 800d070:	f44f 7206 	mov.w	r2, #536	; 0x218
 800d074:	865a      	strh	r2, [r3, #50]	; 0x32
#if TCP_CALCULATE_EFF_SEND_MSS
  pcb->mss = tcp_eff_send_mss_netif(pcb->mss, netif, &pcb->remote_ip);
 800d076:	68fb      	ldr	r3, [r7, #12]
 800d078:	8e58      	ldrh	r0, [r3, #50]	; 0x32
 800d07a:	68fb      	ldr	r3, [r7, #12]
 800d07c:	3304      	adds	r3, #4
 800d07e:	461a      	mov	r2, r3
 800d080:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800d082:	f001 f83f 	bl	800e104 <tcp_eff_send_mss_netif>
 800d086:	4603      	mov	r3, r0
 800d088:	461a      	mov	r2, r3
 800d08a:	68fb      	ldr	r3, [r7, #12]
 800d08c:	865a      	strh	r2, [r3, #50]	; 0x32
#endif /* TCP_CALCULATE_EFF_SEND_MSS */
  pcb->cwnd = 1;
 800d08e:	68fb      	ldr	r3, [r7, #12]
 800d090:	2201      	movs	r2, #1
 800d092:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
#if LWIP_CALLBACK_API
  pcb->connected = connected;
 800d096:	68fb      	ldr	r3, [r7, #12]
 800d098:	683a      	ldr	r2, [r7, #0]
 800d09a:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
#else /* LWIP_CALLBACK_API */
  LWIP_UNUSED_ARG(connected);
#endif /* LWIP_CALLBACK_API */

  /* Send a SYN together with the MSS option. */
  ret = tcp_enqueue_flags(pcb, TCP_SYN);
 800d09e:	2102      	movs	r1, #2
 800d0a0:	68f8      	ldr	r0, [r7, #12]
 800d0a2:	f004 faa3 	bl	80115ec <tcp_enqueue_flags>
 800d0a6:	4603      	mov	r3, r0
 800d0a8:	74fb      	strb	r3, [r7, #19]
  if (ret == ERR_OK) {
 800d0aa:	f997 3013 	ldrsb.w	r3, [r7, #19]
 800d0ae:	2b00      	cmp	r3, #0
 800d0b0:	d136      	bne.n	800d120 <tcp_connect+0x204>
    /* SYN segment was enqueued, changed the pcbs state now */
    pcb->state = SYN_SENT;
 800d0b2:	68fb      	ldr	r3, [r7, #12]
 800d0b4:	2202      	movs	r2, #2
 800d0b6:	751a      	strb	r2, [r3, #20]
    if (old_local_port != 0) {
 800d0b8:	8b7b      	ldrh	r3, [r7, #26]
 800d0ba:	2b00      	cmp	r3, #0
 800d0bc:	d021      	beq.n	800d102 <tcp_connect+0x1e6>
      TCP_RMV(&tcp_bound_pcbs, pcb);
 800d0be:	4b20      	ldr	r3, [pc, #128]	; (800d140 <tcp_connect+0x224>)
 800d0c0:	681b      	ldr	r3, [r3, #0]
 800d0c2:	68fa      	ldr	r2, [r7, #12]
 800d0c4:	429a      	cmp	r2, r3
 800d0c6:	d105      	bne.n	800d0d4 <tcp_connect+0x1b8>
 800d0c8:	4b1d      	ldr	r3, [pc, #116]	; (800d140 <tcp_connect+0x224>)
 800d0ca:	681b      	ldr	r3, [r3, #0]
 800d0cc:	68db      	ldr	r3, [r3, #12]
 800d0ce:	4a1c      	ldr	r2, [pc, #112]	; (800d140 <tcp_connect+0x224>)
 800d0d0:	6013      	str	r3, [r2, #0]
 800d0d2:	e013      	b.n	800d0fc <tcp_connect+0x1e0>
 800d0d4:	4b1a      	ldr	r3, [pc, #104]	; (800d140 <tcp_connect+0x224>)
 800d0d6:	681b      	ldr	r3, [r3, #0]
 800d0d8:	623b      	str	r3, [r7, #32]
 800d0da:	e00c      	b.n	800d0f6 <tcp_connect+0x1da>
 800d0dc:	6a3b      	ldr	r3, [r7, #32]
 800d0de:	68db      	ldr	r3, [r3, #12]
 800d0e0:	68fa      	ldr	r2, [r7, #12]
 800d0e2:	429a      	cmp	r2, r3
 800d0e4:	d104      	bne.n	800d0f0 <tcp_connect+0x1d4>
 800d0e6:	68fb      	ldr	r3, [r7, #12]
 800d0e8:	68da      	ldr	r2, [r3, #12]
 800d0ea:	6a3b      	ldr	r3, [r7, #32]
 800d0ec:	60da      	str	r2, [r3, #12]
 800d0ee:	e005      	b.n	800d0fc <tcp_connect+0x1e0>
 800d0f0:	6a3b      	ldr	r3, [r7, #32]
 800d0f2:	68db      	ldr	r3, [r3, #12]
 800d0f4:	623b      	str	r3, [r7, #32]
 800d0f6:	6a3b      	ldr	r3, [r7, #32]
 800d0f8:	2b00      	cmp	r3, #0
 800d0fa:	d1ef      	bne.n	800d0dc <tcp_connect+0x1c0>
 800d0fc:	68fb      	ldr	r3, [r7, #12]
 800d0fe:	2200      	movs	r2, #0
 800d100:	60da      	str	r2, [r3, #12]
    }
    TCP_REG_ACTIVE(pcb);
 800d102:	4b10      	ldr	r3, [pc, #64]	; (800d144 <tcp_connect+0x228>)
 800d104:	681a      	ldr	r2, [r3, #0]
 800d106:	68fb      	ldr	r3, [r7, #12]
 800d108:	60da      	str	r2, [r3, #12]
 800d10a:	4a0e      	ldr	r2, [pc, #56]	; (800d144 <tcp_connect+0x228>)
 800d10c:	68fb      	ldr	r3, [r7, #12]
 800d10e:	6013      	str	r3, [r2, #0]
 800d110:	f005 fad0 	bl	80126b4 <tcp_timer_needed>
 800d114:	4b0c      	ldr	r3, [pc, #48]	; (800d148 <tcp_connect+0x22c>)
 800d116:	2201      	movs	r2, #1
 800d118:	701a      	strb	r2, [r3, #0]
    MIB2_STATS_INC(mib2.tcpactiveopens);

    tcp_output(pcb);
 800d11a:	68f8      	ldr	r0, [r7, #12]
 800d11c:	f004 fb54 	bl	80117c8 <tcp_output>
  }
  return ret;
 800d120:	f997 3013 	ldrsb.w	r3, [r7, #19]
}
 800d124:	4618      	mov	r0, r3
 800d126:	3728      	adds	r7, #40	; 0x28
 800d128:	46bd      	mov	sp, r7
 800d12a:	bd80      	pop	{r7, pc}
 800d12c:	08019ea4 	.word	0x08019ea4
 800d130:	0801a180 	.word	0x0801a180
 800d134:	08019ee8 	.word	0x08019ee8
 800d138:	0801a19c 	.word	0x0801a19c
 800d13c:	0801a1b8 	.word	0x0801a1b8
 800d140:	20008920 	.word	0x20008920
 800d144:	20008928 	.word	0x20008928
 800d148:	20008930 	.word	0x20008930

0800d14c <tcp_slowtmr>:
 *
 * Automatically called from tcp_tmr().
 */
void
tcp_slowtmr(void)
{
 800d14c:	b5b0      	push	{r4, r5, r7, lr}
 800d14e:	b090      	sub	sp, #64	; 0x40
 800d150:	af04      	add	r7, sp, #16
  tcpwnd_size_t eff_wnd;
  u8_t pcb_remove;      /* flag if a PCB should be removed */
  u8_t pcb_reset;       /* flag if a RST should be sent when removing */
  err_t err;

  err = ERR_OK;
 800d152:	2300      	movs	r3, #0
 800d154:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25

  ++tcp_ticks;
 800d158:	4b94      	ldr	r3, [pc, #592]	; (800d3ac <tcp_slowtmr+0x260>)
 800d15a:	681b      	ldr	r3, [r3, #0]
 800d15c:	3301      	adds	r3, #1
 800d15e:	4a93      	ldr	r2, [pc, #588]	; (800d3ac <tcp_slowtmr+0x260>)
 800d160:	6013      	str	r3, [r2, #0]
  ++tcp_timer_ctr;
 800d162:	4b93      	ldr	r3, [pc, #588]	; (800d3b0 <tcp_slowtmr+0x264>)
 800d164:	781b      	ldrb	r3, [r3, #0]
 800d166:	3301      	adds	r3, #1
 800d168:	b2da      	uxtb	r2, r3
 800d16a:	4b91      	ldr	r3, [pc, #580]	; (800d3b0 <tcp_slowtmr+0x264>)
 800d16c:	701a      	strb	r2, [r3, #0]

tcp_slowtmr_start:
  /* Steps through all of the active PCBs. */
  prev = NULL;
 800d16e:	2300      	movs	r3, #0
 800d170:	62bb      	str	r3, [r7, #40]	; 0x28
  pcb = tcp_active_pcbs;
 800d172:	4b90      	ldr	r3, [pc, #576]	; (800d3b4 <tcp_slowtmr+0x268>)
 800d174:	681b      	ldr	r3, [r3, #0]
 800d176:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (pcb == NULL) {
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_slowtmr: no active pcbs\n"));
  }
  while (pcb != NULL) {
 800d178:	e29f      	b.n	800d6ba <tcp_slowtmr+0x56e>
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_slowtmr: processing active pcb\n"));
    LWIP_ASSERT("tcp_slowtmr: active pcb->state != CLOSED\n", pcb->state != CLOSED);
 800d17a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d17c:	7d1b      	ldrb	r3, [r3, #20]
 800d17e:	2b00      	cmp	r3, #0
 800d180:	d106      	bne.n	800d190 <tcp_slowtmr+0x44>
 800d182:	4b8d      	ldr	r3, [pc, #564]	; (800d3b8 <tcp_slowtmr+0x26c>)
 800d184:	f240 42be 	movw	r2, #1214	; 0x4be
 800d188:	498c      	ldr	r1, [pc, #560]	; (800d3bc <tcp_slowtmr+0x270>)
 800d18a:	488d      	ldr	r0, [pc, #564]	; (800d3c0 <tcp_slowtmr+0x274>)
 800d18c:	f00b f97c 	bl	8018488 <iprintf>
    LWIP_ASSERT("tcp_slowtmr: active pcb->state != LISTEN\n", pcb->state != LISTEN);
 800d190:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d192:	7d1b      	ldrb	r3, [r3, #20]
 800d194:	2b01      	cmp	r3, #1
 800d196:	d106      	bne.n	800d1a6 <tcp_slowtmr+0x5a>
 800d198:	4b87      	ldr	r3, [pc, #540]	; (800d3b8 <tcp_slowtmr+0x26c>)
 800d19a:	f240 42bf 	movw	r2, #1215	; 0x4bf
 800d19e:	4989      	ldr	r1, [pc, #548]	; (800d3c4 <tcp_slowtmr+0x278>)
 800d1a0:	4887      	ldr	r0, [pc, #540]	; (800d3c0 <tcp_slowtmr+0x274>)
 800d1a2:	f00b f971 	bl	8018488 <iprintf>
    LWIP_ASSERT("tcp_slowtmr: active pcb->state != TIME-WAIT\n", pcb->state != TIME_WAIT);
 800d1a6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d1a8:	7d1b      	ldrb	r3, [r3, #20]
 800d1aa:	2b0a      	cmp	r3, #10
 800d1ac:	d106      	bne.n	800d1bc <tcp_slowtmr+0x70>
 800d1ae:	4b82      	ldr	r3, [pc, #520]	; (800d3b8 <tcp_slowtmr+0x26c>)
 800d1b0:	f44f 6298 	mov.w	r2, #1216	; 0x4c0
 800d1b4:	4984      	ldr	r1, [pc, #528]	; (800d3c8 <tcp_slowtmr+0x27c>)
 800d1b6:	4882      	ldr	r0, [pc, #520]	; (800d3c0 <tcp_slowtmr+0x274>)
 800d1b8:	f00b f966 	bl	8018488 <iprintf>
    if (pcb->last_timer == tcp_timer_ctr) {
 800d1bc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d1be:	7f9a      	ldrb	r2, [r3, #30]
 800d1c0:	4b7b      	ldr	r3, [pc, #492]	; (800d3b0 <tcp_slowtmr+0x264>)
 800d1c2:	781b      	ldrb	r3, [r3, #0]
 800d1c4:	429a      	cmp	r2, r3
 800d1c6:	d105      	bne.n	800d1d4 <tcp_slowtmr+0x88>
      /* skip this pcb, we have already processed it */
      prev = pcb;
 800d1c8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d1ca:	62bb      	str	r3, [r7, #40]	; 0x28
      pcb = pcb->next;
 800d1cc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d1ce:	68db      	ldr	r3, [r3, #12]
 800d1d0:	62fb      	str	r3, [r7, #44]	; 0x2c
      continue;
 800d1d2:	e272      	b.n	800d6ba <tcp_slowtmr+0x56e>
    }
    pcb->last_timer = tcp_timer_ctr;
 800d1d4:	4b76      	ldr	r3, [pc, #472]	; (800d3b0 <tcp_slowtmr+0x264>)
 800d1d6:	781a      	ldrb	r2, [r3, #0]
 800d1d8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d1da:	779a      	strb	r2, [r3, #30]

    pcb_remove = 0;
 800d1dc:	2300      	movs	r3, #0
 800d1de:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
    pcb_reset = 0;
 800d1e2:	2300      	movs	r3, #0
 800d1e4:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26

    if (pcb->state == SYN_SENT && pcb->nrtx >= TCP_SYNMAXRTX) {
 800d1e8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d1ea:	7d1b      	ldrb	r3, [r3, #20]
 800d1ec:	2b02      	cmp	r3, #2
 800d1ee:	d10a      	bne.n	800d206 <tcp_slowtmr+0xba>
 800d1f0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d1f2:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 800d1f6:	2b05      	cmp	r3, #5
 800d1f8:	d905      	bls.n	800d206 <tcp_slowtmr+0xba>
      ++pcb_remove;
 800d1fa:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800d1fe:	3301      	adds	r3, #1
 800d200:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 800d204:	e11e      	b.n	800d444 <tcp_slowtmr+0x2f8>
      LWIP_DEBUGF(TCP_DEBUG, ("tcp_slowtmr: max SYN retries reached\n"));
    } else if (pcb->nrtx >= TCP_MAXRTX) {
 800d206:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d208:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 800d20c:	2b0b      	cmp	r3, #11
 800d20e:	d905      	bls.n	800d21c <tcp_slowtmr+0xd0>
      ++pcb_remove;
 800d210:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800d214:	3301      	adds	r3, #1
 800d216:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 800d21a:	e113      	b.n	800d444 <tcp_slowtmr+0x2f8>
      LWIP_DEBUGF(TCP_DEBUG, ("tcp_slowtmr: max DATA retries reached\n"));
    } else {
      if (pcb->persist_backoff > 0) {
 800d21c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d21e:	f893 3099 	ldrb.w	r3, [r3, #153]	; 0x99
 800d222:	2b00      	cmp	r3, #0
 800d224:	d075      	beq.n	800d312 <tcp_slowtmr+0x1c6>
        LWIP_ASSERT("tcp_slowtimr: persist ticking with in-flight data", pcb->unacked == NULL);
 800d226:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d228:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800d22a:	2b00      	cmp	r3, #0
 800d22c:	d006      	beq.n	800d23c <tcp_slowtmr+0xf0>
 800d22e:	4b62      	ldr	r3, [pc, #392]	; (800d3b8 <tcp_slowtmr+0x26c>)
 800d230:	f240 42d4 	movw	r2, #1236	; 0x4d4
 800d234:	4965      	ldr	r1, [pc, #404]	; (800d3cc <tcp_slowtmr+0x280>)
 800d236:	4862      	ldr	r0, [pc, #392]	; (800d3c0 <tcp_slowtmr+0x274>)
 800d238:	f00b f926 	bl	8018488 <iprintf>
        LWIP_ASSERT("tcp_slowtimr: persist ticking with empty send buffer", pcb->unsent != NULL);
 800d23c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d23e:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800d240:	2b00      	cmp	r3, #0
 800d242:	d106      	bne.n	800d252 <tcp_slowtmr+0x106>
 800d244:	4b5c      	ldr	r3, [pc, #368]	; (800d3b8 <tcp_slowtmr+0x26c>)
 800d246:	f240 42d5 	movw	r2, #1237	; 0x4d5
 800d24a:	4961      	ldr	r1, [pc, #388]	; (800d3d0 <tcp_slowtmr+0x284>)
 800d24c:	485c      	ldr	r0, [pc, #368]	; (800d3c0 <tcp_slowtmr+0x274>)
 800d24e:	f00b f91b 	bl	8018488 <iprintf>
        if (pcb->persist_probe >= TCP_MAXRTX) {
 800d252:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d254:	f893 309a 	ldrb.w	r3, [r3, #154]	; 0x9a
 800d258:	2b0b      	cmp	r3, #11
 800d25a:	d905      	bls.n	800d268 <tcp_slowtmr+0x11c>
          ++pcb_remove; /* max probes reached */
 800d25c:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800d260:	3301      	adds	r3, #1
 800d262:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 800d266:	e0ed      	b.n	800d444 <tcp_slowtmr+0x2f8>
        } else {
          u8_t backoff_cnt = tcp_persist_backoff[pcb->persist_backoff - 1];
 800d268:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d26a:	f893 3099 	ldrb.w	r3, [r3, #153]	; 0x99
 800d26e:	3b01      	subs	r3, #1
 800d270:	4a58      	ldr	r2, [pc, #352]	; (800d3d4 <tcp_slowtmr+0x288>)
 800d272:	5cd3      	ldrb	r3, [r2, r3]
 800d274:	747b      	strb	r3, [r7, #17]
          if (pcb->persist_cnt < backoff_cnt) {
 800d276:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d278:	f893 3098 	ldrb.w	r3, [r3, #152]	; 0x98
 800d27c:	7c7a      	ldrb	r2, [r7, #17]
 800d27e:	429a      	cmp	r2, r3
 800d280:	d907      	bls.n	800d292 <tcp_slowtmr+0x146>
            pcb->persist_cnt++;
 800d282:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d284:	f893 3098 	ldrb.w	r3, [r3, #152]	; 0x98
 800d288:	3301      	adds	r3, #1
 800d28a:	b2da      	uxtb	r2, r3
 800d28c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d28e:	f883 2098 	strb.w	r2, [r3, #152]	; 0x98
          }
          if (pcb->persist_cnt >= backoff_cnt) {
 800d292:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d294:	f893 3098 	ldrb.w	r3, [r3, #152]	; 0x98
 800d298:	7c7a      	ldrb	r2, [r7, #17]
 800d29a:	429a      	cmp	r2, r3
 800d29c:	f200 80d2 	bhi.w	800d444 <tcp_slowtmr+0x2f8>
            int next_slot = 1; /* increment timer to next slot */
 800d2a0:	2301      	movs	r3, #1
 800d2a2:	623b      	str	r3, [r7, #32]
            /* If snd_wnd is zero, send 1 byte probes */
            if (pcb->snd_wnd == 0) {
 800d2a4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d2a6:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 800d2aa:	2b00      	cmp	r3, #0
 800d2ac:	d108      	bne.n	800d2c0 <tcp_slowtmr+0x174>
              if (tcp_zero_window_probe(pcb) != ERR_OK) {
 800d2ae:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800d2b0:	f005 f932 	bl	8012518 <tcp_zero_window_probe>
 800d2b4:	4603      	mov	r3, r0
 800d2b6:	2b00      	cmp	r3, #0
 800d2b8:	d014      	beq.n	800d2e4 <tcp_slowtmr+0x198>
                next_slot = 0; /* try probe again with current slot */
 800d2ba:	2300      	movs	r3, #0
 800d2bc:	623b      	str	r3, [r7, #32]
 800d2be:	e011      	b.n	800d2e4 <tcp_slowtmr+0x198>
              }
              /* snd_wnd not fully closed, split unsent head and fill window */
            } else {
              if (tcp_split_unsent_seg(pcb, (u16_t)pcb->snd_wnd) == ERR_OK) {
 800d2c0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d2c2:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 800d2c6:	4619      	mov	r1, r3
 800d2c8:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800d2ca:	f003 fff7 	bl	80112bc <tcp_split_unsent_seg>
 800d2ce:	4603      	mov	r3, r0
 800d2d0:	2b00      	cmp	r3, #0
 800d2d2:	d107      	bne.n	800d2e4 <tcp_slowtmr+0x198>
                if (tcp_output(pcb) == ERR_OK) {
 800d2d4:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800d2d6:	f004 fa77 	bl	80117c8 <tcp_output>
 800d2da:	4603      	mov	r3, r0
 800d2dc:	2b00      	cmp	r3, #0
 800d2de:	d101      	bne.n	800d2e4 <tcp_slowtmr+0x198>
                  /* sending will cancel persist timer, else retry with current slot */
                  next_slot = 0;
 800d2e0:	2300      	movs	r3, #0
 800d2e2:	623b      	str	r3, [r7, #32]
                }
              }
            }
            if (next_slot) {
 800d2e4:	6a3b      	ldr	r3, [r7, #32]
 800d2e6:	2b00      	cmp	r3, #0
 800d2e8:	f000 80ac 	beq.w	800d444 <tcp_slowtmr+0x2f8>
              pcb->persist_cnt = 0;
 800d2ec:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d2ee:	2200      	movs	r2, #0
 800d2f0:	f883 2098 	strb.w	r2, [r3, #152]	; 0x98
              if (pcb->persist_backoff < sizeof(tcp_persist_backoff)) {
 800d2f4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d2f6:	f893 3099 	ldrb.w	r3, [r3, #153]	; 0x99
 800d2fa:	2b06      	cmp	r3, #6
 800d2fc:	f200 80a2 	bhi.w	800d444 <tcp_slowtmr+0x2f8>
                pcb->persist_backoff++;
 800d300:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d302:	f893 3099 	ldrb.w	r3, [r3, #153]	; 0x99
 800d306:	3301      	adds	r3, #1
 800d308:	b2da      	uxtb	r2, r3
 800d30a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d30c:	f883 2099 	strb.w	r2, [r3, #153]	; 0x99
 800d310:	e098      	b.n	800d444 <tcp_slowtmr+0x2f8>
            }
          }
        }
      } else {
        /* Increase the retransmission timer if it is running */
        if ((pcb->rtime >= 0) && (pcb->rtime < 0x7FFF)) {
 800d312:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d314:	f9b3 3030 	ldrsh.w	r3, [r3, #48]	; 0x30
 800d318:	2b00      	cmp	r3, #0
 800d31a:	db0f      	blt.n	800d33c <tcp_slowtmr+0x1f0>
 800d31c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d31e:	f9b3 3030 	ldrsh.w	r3, [r3, #48]	; 0x30
 800d322:	f647 72ff 	movw	r2, #32767	; 0x7fff
 800d326:	4293      	cmp	r3, r2
 800d328:	d008      	beq.n	800d33c <tcp_slowtmr+0x1f0>
          ++pcb->rtime;
 800d32a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d32c:	f9b3 3030 	ldrsh.w	r3, [r3, #48]	; 0x30
 800d330:	b29b      	uxth	r3, r3
 800d332:	3301      	adds	r3, #1
 800d334:	b29b      	uxth	r3, r3
 800d336:	b21a      	sxth	r2, r3
 800d338:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d33a:	861a      	strh	r2, [r3, #48]	; 0x30
        }

        if (pcb->rtime >= pcb->rto) {
 800d33c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d33e:	f9b3 2030 	ldrsh.w	r2, [r3, #48]	; 0x30
 800d342:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d344:	f9b3 3040 	ldrsh.w	r3, [r3, #64]	; 0x40
 800d348:	429a      	cmp	r2, r3
 800d34a:	db7b      	blt.n	800d444 <tcp_slowtmr+0x2f8>
                                      " pcb->rto %"S16_F"\n",
                                      pcb->rtime, pcb->rto));
          /* If prepare phase fails but we have unsent data but no unacked data,
             still execute the backoff calculations below, as this means we somehow
             failed to send segment. */
          if ((tcp_rexmit_rto_prepare(pcb) == ERR_OK) || ((pcb->unacked == NULL) && (pcb->unsent != NULL))) {
 800d34c:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800d34e:	f004 fd2f 	bl	8011db0 <tcp_rexmit_rto_prepare>
 800d352:	4603      	mov	r3, r0
 800d354:	2b00      	cmp	r3, #0
 800d356:	d007      	beq.n	800d368 <tcp_slowtmr+0x21c>
 800d358:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d35a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800d35c:	2b00      	cmp	r3, #0
 800d35e:	d171      	bne.n	800d444 <tcp_slowtmr+0x2f8>
 800d360:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d362:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800d364:	2b00      	cmp	r3, #0
 800d366:	d06d      	beq.n	800d444 <tcp_slowtmr+0x2f8>
            /* Double retransmission time-out unless we are trying to
             * connect to somebody (i.e., we are in SYN_SENT). */
            if (pcb->state != SYN_SENT) {
 800d368:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d36a:	7d1b      	ldrb	r3, [r3, #20]
 800d36c:	2b02      	cmp	r3, #2
 800d36e:	d03a      	beq.n	800d3e6 <tcp_slowtmr+0x29a>
              u8_t backoff_idx = LWIP_MIN(pcb->nrtx, sizeof(tcp_backoff) - 1);
 800d370:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d372:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 800d376:	2b0c      	cmp	r3, #12
 800d378:	bf28      	it	cs
 800d37a:	230c      	movcs	r3, #12
 800d37c:	76fb      	strb	r3, [r7, #27]
              int calc_rto = ((pcb->sa >> 3) + pcb->sv) << tcp_backoff[backoff_idx];
 800d37e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d380:	f9b3 303c 	ldrsh.w	r3, [r3, #60]	; 0x3c
 800d384:	10db      	asrs	r3, r3, #3
 800d386:	b21b      	sxth	r3, r3
 800d388:	461a      	mov	r2, r3
 800d38a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d38c:	f9b3 303e 	ldrsh.w	r3, [r3, #62]	; 0x3e
 800d390:	4413      	add	r3, r2
 800d392:	7efa      	ldrb	r2, [r7, #27]
 800d394:	4910      	ldr	r1, [pc, #64]	; (800d3d8 <tcp_slowtmr+0x28c>)
 800d396:	5c8a      	ldrb	r2, [r1, r2]
 800d398:	4093      	lsls	r3, r2
 800d39a:	617b      	str	r3, [r7, #20]
              pcb->rto = (s16_t)LWIP_MIN(calc_rto, 0x7FFF);
 800d39c:	697b      	ldr	r3, [r7, #20]
 800d39e:	f647 72fe 	movw	r2, #32766	; 0x7ffe
 800d3a2:	4293      	cmp	r3, r2
 800d3a4:	dc1a      	bgt.n	800d3dc <tcp_slowtmr+0x290>
 800d3a6:	697b      	ldr	r3, [r7, #20]
 800d3a8:	b21a      	sxth	r2, r3
 800d3aa:	e019      	b.n	800d3e0 <tcp_slowtmr+0x294>
 800d3ac:	2000891c 	.word	0x2000891c
 800d3b0:	20008932 	.word	0x20008932
 800d3b4:	20008928 	.word	0x20008928
 800d3b8:	08019ea4 	.word	0x08019ea4
 800d3bc:	0801a1e8 	.word	0x0801a1e8
 800d3c0:	08019ee8 	.word	0x08019ee8
 800d3c4:	0801a214 	.word	0x0801a214
 800d3c8:	0801a240 	.word	0x0801a240
 800d3cc:	0801a270 	.word	0x0801a270
 800d3d0:	0801a2a4 	.word	0x0801a2a4
 800d3d4:	0801c27c 	.word	0x0801c27c
 800d3d8:	0801c26c 	.word	0x0801c26c
 800d3dc:	f647 72ff 	movw	r2, #32767	; 0x7fff
 800d3e0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d3e2:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40
            }

            /* Reset the retransmission timer. */
            pcb->rtime = 0;
 800d3e6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d3e8:	2200      	movs	r2, #0
 800d3ea:	861a      	strh	r2, [r3, #48]	; 0x30

            /* Reduce congestion window and ssthresh. */
            eff_wnd = LWIP_MIN(pcb->cwnd, pcb->snd_wnd);
 800d3ec:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d3ee:	f8b3 2060 	ldrh.w	r2, [r3, #96]	; 0x60
 800d3f2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d3f4:	f8b3 3048 	ldrh.w	r3, [r3, #72]	; 0x48
 800d3f8:	4293      	cmp	r3, r2
 800d3fa:	bf28      	it	cs
 800d3fc:	4613      	movcs	r3, r2
 800d3fe:	827b      	strh	r3, [r7, #18]
            pcb->ssthresh = eff_wnd >> 1;
 800d400:	8a7b      	ldrh	r3, [r7, #18]
 800d402:	085b      	lsrs	r3, r3, #1
 800d404:	b29a      	uxth	r2, r3
 800d406:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d408:	f8a3 204a 	strh.w	r2, [r3, #74]	; 0x4a
            if (pcb->ssthresh < (tcpwnd_size_t)(pcb->mss << 1)) {
 800d40c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d40e:	f8b3 204a 	ldrh.w	r2, [r3, #74]	; 0x4a
 800d412:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d414:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 800d416:	005b      	lsls	r3, r3, #1
 800d418:	b29b      	uxth	r3, r3
 800d41a:	429a      	cmp	r2, r3
 800d41c:	d206      	bcs.n	800d42c <tcp_slowtmr+0x2e0>
              pcb->ssthresh = (tcpwnd_size_t)(pcb->mss << 1);
 800d41e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d420:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 800d422:	005b      	lsls	r3, r3, #1
 800d424:	b29a      	uxth	r2, r3
 800d426:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d428:	f8a3 204a 	strh.w	r2, [r3, #74]	; 0x4a
            }
            pcb->cwnd = pcb->mss;
 800d42c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d42e:	8e5a      	ldrh	r2, [r3, #50]	; 0x32
 800d430:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d432:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
            LWIP_DEBUGF(TCP_CWND_DEBUG, ("tcp_slowtmr: cwnd %"TCPWNDSIZE_F
                                         " ssthresh %"TCPWNDSIZE_F"\n",
                                         pcb->cwnd, pcb->ssthresh));
            pcb->bytes_acked = 0;
 800d436:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d438:	2200      	movs	r2, #0
 800d43a:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a

            /* The following needs to be called AFTER cwnd is set to one
               mss - STJ */
            tcp_rexmit_rto_commit(pcb);
 800d43e:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800d440:	f004 fd26 	bl	8011e90 <tcp_rexmit_rto_commit>
          }
        }
      }
    }
    /* Check if this PCB has stayed too long in FIN-WAIT-2 */
    if (pcb->state == FIN_WAIT_2) {
 800d444:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d446:	7d1b      	ldrb	r3, [r3, #20]
 800d448:	2b06      	cmp	r3, #6
 800d44a:	d111      	bne.n	800d470 <tcp_slowtmr+0x324>
      /* If this PCB is in FIN_WAIT_2 because of SHUT_WR don't let it time out. */
      if (pcb->flags & TF_RXCLOSED) {
 800d44c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d44e:	8b5b      	ldrh	r3, [r3, #26]
 800d450:	f003 0310 	and.w	r3, r3, #16
 800d454:	2b00      	cmp	r3, #0
 800d456:	d00b      	beq.n	800d470 <tcp_slowtmr+0x324>
        /* PCB was fully closed (either through close() or SHUT_RDWR):
           normal FIN-WAIT timeout handling. */
        if ((u32_t)(tcp_ticks - pcb->tmr) >
 800d458:	4b9d      	ldr	r3, [pc, #628]	; (800d6d0 <tcp_slowtmr+0x584>)
 800d45a:	681a      	ldr	r2, [r3, #0]
 800d45c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d45e:	6a1b      	ldr	r3, [r3, #32]
 800d460:	1ad3      	subs	r3, r2, r3
 800d462:	2b28      	cmp	r3, #40	; 0x28
 800d464:	d904      	bls.n	800d470 <tcp_slowtmr+0x324>
            TCP_FIN_WAIT_TIMEOUT / TCP_SLOW_INTERVAL) {
          ++pcb_remove;
 800d466:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800d46a:	3301      	adds	r3, #1
 800d46c:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
        }
      }
    }

    /* Check if KEEPALIVE should be sent */
    if (ip_get_option(pcb, SOF_KEEPALIVE) &&
 800d470:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d472:	7a5b      	ldrb	r3, [r3, #9]
 800d474:	f003 0308 	and.w	r3, r3, #8
 800d478:	2b00      	cmp	r3, #0
 800d47a:	d04c      	beq.n	800d516 <tcp_slowtmr+0x3ca>
        ((pcb->state == ESTABLISHED) ||
 800d47c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d47e:	7d1b      	ldrb	r3, [r3, #20]
    if (ip_get_option(pcb, SOF_KEEPALIVE) &&
 800d480:	2b04      	cmp	r3, #4
 800d482:	d003      	beq.n	800d48c <tcp_slowtmr+0x340>
         (pcb->state == CLOSE_WAIT))) {
 800d484:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d486:	7d1b      	ldrb	r3, [r3, #20]
        ((pcb->state == ESTABLISHED) ||
 800d488:	2b07      	cmp	r3, #7
 800d48a:	d144      	bne.n	800d516 <tcp_slowtmr+0x3ca>
      if ((u32_t)(tcp_ticks - pcb->tmr) >
 800d48c:	4b90      	ldr	r3, [pc, #576]	; (800d6d0 <tcp_slowtmr+0x584>)
 800d48e:	681a      	ldr	r2, [r3, #0]
 800d490:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d492:	6a1b      	ldr	r3, [r3, #32]
 800d494:	1ad2      	subs	r2, r2, r3
          (pcb->keep_idle + TCP_KEEP_DUR(pcb)) / TCP_SLOW_INTERVAL) {
 800d496:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d498:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800d49c:	f503 2324 	add.w	r3, r3, #671744	; 0xa4000
 800d4a0:	f603 43b8 	addw	r3, r3, #3256	; 0xcb8
 800d4a4:	498b      	ldr	r1, [pc, #556]	; (800d6d4 <tcp_slowtmr+0x588>)
 800d4a6:	fba1 1303 	umull	r1, r3, r1, r3
 800d4aa:	095b      	lsrs	r3, r3, #5
      if ((u32_t)(tcp_ticks - pcb->tmr) >
 800d4ac:	429a      	cmp	r2, r3
 800d4ae:	d90a      	bls.n	800d4c6 <tcp_slowtmr+0x37a>
        LWIP_DEBUGF(TCP_DEBUG, ("tcp_slowtmr: KEEPALIVE timeout. Aborting connection to "));
        ip_addr_debug_print_val(TCP_DEBUG, pcb->remote_ip);
        LWIP_DEBUGF(TCP_DEBUG, ("\n"));

        ++pcb_remove;
 800d4b0:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800d4b4:	3301      	adds	r3, #1
 800d4b6:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
        ++pcb_reset;
 800d4ba:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 800d4be:	3301      	adds	r3, #1
 800d4c0:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
 800d4c4:	e027      	b.n	800d516 <tcp_slowtmr+0x3ca>
      } else if ((u32_t)(tcp_ticks - pcb->tmr) >
 800d4c6:	4b82      	ldr	r3, [pc, #520]	; (800d6d0 <tcp_slowtmr+0x584>)
 800d4c8:	681a      	ldr	r2, [r3, #0]
 800d4ca:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d4cc:	6a1b      	ldr	r3, [r3, #32]
 800d4ce:	1ad2      	subs	r2, r2, r3
                 (pcb->keep_idle + pcb->keep_cnt_sent * TCP_KEEP_INTVL(pcb))
 800d4d0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d4d2:	f8d3 1094 	ldr.w	r1, [r3, #148]	; 0x94
 800d4d6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d4d8:	f893 309b 	ldrb.w	r3, [r3, #155]	; 0x9b
 800d4dc:	4618      	mov	r0, r3
 800d4de:	4b7e      	ldr	r3, [pc, #504]	; (800d6d8 <tcp_slowtmr+0x58c>)
 800d4e0:	fb00 f303 	mul.w	r3, r0, r3
 800d4e4:	440b      	add	r3, r1
                 / TCP_SLOW_INTERVAL) {
 800d4e6:	497b      	ldr	r1, [pc, #492]	; (800d6d4 <tcp_slowtmr+0x588>)
 800d4e8:	fba1 1303 	umull	r1, r3, r1, r3
 800d4ec:	095b      	lsrs	r3, r3, #5
      } else if ((u32_t)(tcp_ticks - pcb->tmr) >
 800d4ee:	429a      	cmp	r2, r3
 800d4f0:	d911      	bls.n	800d516 <tcp_slowtmr+0x3ca>
        err = tcp_keepalive(pcb);
 800d4f2:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800d4f4:	f004 ffd0 	bl	8012498 <tcp_keepalive>
 800d4f8:	4603      	mov	r3, r0
 800d4fa:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25
        if (err == ERR_OK) {
 800d4fe:	f997 3025 	ldrsb.w	r3, [r7, #37]	; 0x25
 800d502:	2b00      	cmp	r3, #0
 800d504:	d107      	bne.n	800d516 <tcp_slowtmr+0x3ca>
          pcb->keep_cnt_sent++;
 800d506:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d508:	f893 309b 	ldrb.w	r3, [r3, #155]	; 0x9b
 800d50c:	3301      	adds	r3, #1
 800d50e:	b2da      	uxtb	r2, r3
 800d510:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d512:	f883 209b 	strb.w	r2, [r3, #155]	; 0x9b

    /* If this PCB has queued out of sequence data, but has been
       inactive for too long, will drop the data (it will eventually
       be retransmitted). */
#if TCP_QUEUE_OOSEQ
    if (pcb->ooseq != NULL &&
 800d516:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d518:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800d51a:	2b00      	cmp	r3, #0
 800d51c:	d011      	beq.n	800d542 <tcp_slowtmr+0x3f6>
        (tcp_ticks - pcb->tmr >= (u32_t)pcb->rto * TCP_OOSEQ_TIMEOUT)) {
 800d51e:	4b6c      	ldr	r3, [pc, #432]	; (800d6d0 <tcp_slowtmr+0x584>)
 800d520:	681a      	ldr	r2, [r3, #0]
 800d522:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d524:	6a1b      	ldr	r3, [r3, #32]
 800d526:	1ad2      	subs	r2, r2, r3
 800d528:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d52a:	f9b3 3040 	ldrsh.w	r3, [r3, #64]	; 0x40
 800d52e:	4619      	mov	r1, r3
 800d530:	460b      	mov	r3, r1
 800d532:	005b      	lsls	r3, r3, #1
 800d534:	440b      	add	r3, r1
 800d536:	005b      	lsls	r3, r3, #1
    if (pcb->ooseq != NULL &&
 800d538:	429a      	cmp	r2, r3
 800d53a:	d302      	bcc.n	800d542 <tcp_slowtmr+0x3f6>
      LWIP_DEBUGF(TCP_CWND_DEBUG, ("tcp_slowtmr: dropping OOSEQ queued data\n"));
      tcp_free_ooseq(pcb);
 800d53c:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800d53e:	f000 fe8b 	bl	800e258 <tcp_free_ooseq>
    }
#endif /* TCP_QUEUE_OOSEQ */

    /* Check if this PCB has stayed too long in SYN-RCVD */
    if (pcb->state == SYN_RCVD) {
 800d542:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d544:	7d1b      	ldrb	r3, [r3, #20]
 800d546:	2b03      	cmp	r3, #3
 800d548:	d10b      	bne.n	800d562 <tcp_slowtmr+0x416>
      if ((u32_t)(tcp_ticks - pcb->tmr) >
 800d54a:	4b61      	ldr	r3, [pc, #388]	; (800d6d0 <tcp_slowtmr+0x584>)
 800d54c:	681a      	ldr	r2, [r3, #0]
 800d54e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d550:	6a1b      	ldr	r3, [r3, #32]
 800d552:	1ad3      	subs	r3, r2, r3
 800d554:	2b28      	cmp	r3, #40	; 0x28
 800d556:	d904      	bls.n	800d562 <tcp_slowtmr+0x416>
          TCP_SYN_RCVD_TIMEOUT / TCP_SLOW_INTERVAL) {
        ++pcb_remove;
 800d558:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800d55c:	3301      	adds	r3, #1
 800d55e:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
        LWIP_DEBUGF(TCP_DEBUG, ("tcp_slowtmr: removing pcb stuck in SYN-RCVD\n"));
      }
    }

    /* Check if this PCB has stayed too long in LAST-ACK */
    if (pcb->state == LAST_ACK) {
 800d562:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d564:	7d1b      	ldrb	r3, [r3, #20]
 800d566:	2b09      	cmp	r3, #9
 800d568:	d10b      	bne.n	800d582 <tcp_slowtmr+0x436>
      if ((u32_t)(tcp_ticks - pcb->tmr) > 2 * TCP_MSL / TCP_SLOW_INTERVAL) {
 800d56a:	4b59      	ldr	r3, [pc, #356]	; (800d6d0 <tcp_slowtmr+0x584>)
 800d56c:	681a      	ldr	r2, [r3, #0]
 800d56e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d570:	6a1b      	ldr	r3, [r3, #32]
 800d572:	1ad3      	subs	r3, r2, r3
 800d574:	2bf0      	cmp	r3, #240	; 0xf0
 800d576:	d904      	bls.n	800d582 <tcp_slowtmr+0x436>
        ++pcb_remove;
 800d578:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800d57c:	3301      	adds	r3, #1
 800d57e:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
        LWIP_DEBUGF(TCP_DEBUG, ("tcp_slowtmr: removing pcb stuck in LAST-ACK\n"));
      }
    }

    /* If the PCB should be removed, do it. */
    if (pcb_remove) {
 800d582:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800d586:	2b00      	cmp	r3, #0
 800d588:	d060      	beq.n	800d64c <tcp_slowtmr+0x500>
      struct tcp_pcb *pcb2;
#if LWIP_CALLBACK_API
      tcp_err_fn err_fn = pcb->errf;
 800d58a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d58c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800d590:	60fb      	str	r3, [r7, #12]
#endif /* LWIP_CALLBACK_API */
      void *err_arg;
      enum tcp_state last_state;
      tcp_pcb_purge(pcb);
 800d592:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800d594:	f000 fcac 	bl	800def0 <tcp_pcb_purge>
      /* Remove PCB from tcp_active_pcbs list. */
      if (prev != NULL) {
 800d598:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d59a:	2b00      	cmp	r3, #0
 800d59c:	d010      	beq.n	800d5c0 <tcp_slowtmr+0x474>
        LWIP_ASSERT("tcp_slowtmr: middle tcp != tcp_active_pcbs", pcb != tcp_active_pcbs);
 800d59e:	4b4f      	ldr	r3, [pc, #316]	; (800d6dc <tcp_slowtmr+0x590>)
 800d5a0:	681b      	ldr	r3, [r3, #0]
 800d5a2:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800d5a4:	429a      	cmp	r2, r3
 800d5a6:	d106      	bne.n	800d5b6 <tcp_slowtmr+0x46a>
 800d5a8:	4b4d      	ldr	r3, [pc, #308]	; (800d6e0 <tcp_slowtmr+0x594>)
 800d5aa:	f240 526d 	movw	r2, #1389	; 0x56d
 800d5ae:	494d      	ldr	r1, [pc, #308]	; (800d6e4 <tcp_slowtmr+0x598>)
 800d5b0:	484d      	ldr	r0, [pc, #308]	; (800d6e8 <tcp_slowtmr+0x59c>)
 800d5b2:	f00a ff69 	bl	8018488 <iprintf>
        prev->next = pcb->next;
 800d5b6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d5b8:	68da      	ldr	r2, [r3, #12]
 800d5ba:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d5bc:	60da      	str	r2, [r3, #12]
 800d5be:	e00f      	b.n	800d5e0 <tcp_slowtmr+0x494>
      } else {
        /* This PCB was the first. */
        LWIP_ASSERT("tcp_slowtmr: first pcb == tcp_active_pcbs", tcp_active_pcbs == pcb);
 800d5c0:	4b46      	ldr	r3, [pc, #280]	; (800d6dc <tcp_slowtmr+0x590>)
 800d5c2:	681b      	ldr	r3, [r3, #0]
 800d5c4:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800d5c6:	429a      	cmp	r2, r3
 800d5c8:	d006      	beq.n	800d5d8 <tcp_slowtmr+0x48c>
 800d5ca:	4b45      	ldr	r3, [pc, #276]	; (800d6e0 <tcp_slowtmr+0x594>)
 800d5cc:	f240 5271 	movw	r2, #1393	; 0x571
 800d5d0:	4946      	ldr	r1, [pc, #280]	; (800d6ec <tcp_slowtmr+0x5a0>)
 800d5d2:	4845      	ldr	r0, [pc, #276]	; (800d6e8 <tcp_slowtmr+0x59c>)
 800d5d4:	f00a ff58 	bl	8018488 <iprintf>
        tcp_active_pcbs = pcb->next;
 800d5d8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d5da:	68db      	ldr	r3, [r3, #12]
 800d5dc:	4a3f      	ldr	r2, [pc, #252]	; (800d6dc <tcp_slowtmr+0x590>)
 800d5de:	6013      	str	r3, [r2, #0]
      }

      if (pcb_reset) {
 800d5e0:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 800d5e4:	2b00      	cmp	r3, #0
 800d5e6:	d013      	beq.n	800d610 <tcp_slowtmr+0x4c4>
        tcp_rst(pcb, pcb->snd_nxt, pcb->rcv_nxt, &pcb->local_ip, &pcb->remote_ip,
 800d5e8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d5ea:	6d18      	ldr	r0, [r3, #80]	; 0x50
 800d5ec:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d5ee:	6a5c      	ldr	r4, [r3, #36]	; 0x24
 800d5f0:	6afd      	ldr	r5, [r7, #44]	; 0x2c
 800d5f2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d5f4:	3304      	adds	r3, #4
 800d5f6:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800d5f8:	8ad2      	ldrh	r2, [r2, #22]
 800d5fa:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800d5fc:	8b09      	ldrh	r1, [r1, #24]
 800d5fe:	9102      	str	r1, [sp, #8]
 800d600:	9201      	str	r2, [sp, #4]
 800d602:	9300      	str	r3, [sp, #0]
 800d604:	462b      	mov	r3, r5
 800d606:	4622      	mov	r2, r4
 800d608:	4601      	mov	r1, r0
 800d60a:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800d60c:	f004 fe90 	bl	8012330 <tcp_rst>
                pcb->local_port, pcb->remote_port);
      }

      err_arg = pcb->callback_arg;
 800d610:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d612:	691b      	ldr	r3, [r3, #16]
 800d614:	60bb      	str	r3, [r7, #8]
      last_state = pcb->state;
 800d616:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d618:	7d1b      	ldrb	r3, [r3, #20]
 800d61a:	71fb      	strb	r3, [r7, #7]
      pcb2 = pcb;
 800d61c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d61e:	603b      	str	r3, [r7, #0]
      pcb = pcb->next;
 800d620:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d622:	68db      	ldr	r3, [r3, #12]
 800d624:	62fb      	str	r3, [r7, #44]	; 0x2c
      tcp_free(pcb2);
 800d626:	6838      	ldr	r0, [r7, #0]
 800d628:	f7ff f894 	bl	800c754 <tcp_free>

      tcp_active_pcbs_changed = 0;
 800d62c:	4b30      	ldr	r3, [pc, #192]	; (800d6f0 <tcp_slowtmr+0x5a4>)
 800d62e:	2200      	movs	r2, #0
 800d630:	701a      	strb	r2, [r3, #0]
      TCP_EVENT_ERR(last_state, err_fn, err_arg, ERR_ABRT);
 800d632:	68fb      	ldr	r3, [r7, #12]
 800d634:	2b00      	cmp	r3, #0
 800d636:	d004      	beq.n	800d642 <tcp_slowtmr+0x4f6>
 800d638:	68fb      	ldr	r3, [r7, #12]
 800d63a:	f06f 010c 	mvn.w	r1, #12
 800d63e:	68b8      	ldr	r0, [r7, #8]
 800d640:	4798      	blx	r3
      if (tcp_active_pcbs_changed) {
 800d642:	4b2b      	ldr	r3, [pc, #172]	; (800d6f0 <tcp_slowtmr+0x5a4>)
 800d644:	781b      	ldrb	r3, [r3, #0]
 800d646:	2b00      	cmp	r3, #0
 800d648:	d037      	beq.n	800d6ba <tcp_slowtmr+0x56e>
        goto tcp_slowtmr_start;
 800d64a:	e590      	b.n	800d16e <tcp_slowtmr+0x22>
      }
    } else {
      /* get the 'next' element now and work with 'prev' below (in case of abort) */
      prev = pcb;
 800d64c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d64e:	62bb      	str	r3, [r7, #40]	; 0x28
      pcb = pcb->next;
 800d650:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d652:	68db      	ldr	r3, [r3, #12]
 800d654:	62fb      	str	r3, [r7, #44]	; 0x2c

      /* We check if we should poll the connection. */
      ++prev->polltmr;
 800d656:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d658:	7f1b      	ldrb	r3, [r3, #28]
 800d65a:	3301      	adds	r3, #1
 800d65c:	b2da      	uxtb	r2, r3
 800d65e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d660:	771a      	strb	r2, [r3, #28]
      if (prev->polltmr >= prev->pollinterval) {
 800d662:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d664:	7f1a      	ldrb	r2, [r3, #28]
 800d666:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d668:	7f5b      	ldrb	r3, [r3, #29]
 800d66a:	429a      	cmp	r2, r3
 800d66c:	d325      	bcc.n	800d6ba <tcp_slowtmr+0x56e>
        prev->polltmr = 0;
 800d66e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d670:	2200      	movs	r2, #0
 800d672:	771a      	strb	r2, [r3, #28]
        LWIP_DEBUGF(TCP_DEBUG, ("tcp_slowtmr: polling application\n"));
        tcp_active_pcbs_changed = 0;
 800d674:	4b1e      	ldr	r3, [pc, #120]	; (800d6f0 <tcp_slowtmr+0x5a4>)
 800d676:	2200      	movs	r2, #0
 800d678:	701a      	strb	r2, [r3, #0]
        TCP_EVENT_POLL(prev, err);
 800d67a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d67c:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800d680:	2b00      	cmp	r3, #0
 800d682:	d00b      	beq.n	800d69c <tcp_slowtmr+0x550>
 800d684:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d686:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800d68a:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800d68c:	6912      	ldr	r2, [r2, #16]
 800d68e:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800d690:	4610      	mov	r0, r2
 800d692:	4798      	blx	r3
 800d694:	4603      	mov	r3, r0
 800d696:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25
 800d69a:	e002      	b.n	800d6a2 <tcp_slowtmr+0x556>
 800d69c:	2300      	movs	r3, #0
 800d69e:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25
        if (tcp_active_pcbs_changed) {
 800d6a2:	4b13      	ldr	r3, [pc, #76]	; (800d6f0 <tcp_slowtmr+0x5a4>)
 800d6a4:	781b      	ldrb	r3, [r3, #0]
 800d6a6:	2b00      	cmp	r3, #0
 800d6a8:	d000      	beq.n	800d6ac <tcp_slowtmr+0x560>
          goto tcp_slowtmr_start;
 800d6aa:	e560      	b.n	800d16e <tcp_slowtmr+0x22>
        }
        /* if err == ERR_ABRT, 'prev' is already deallocated */
        if (err == ERR_OK) {
 800d6ac:	f997 3025 	ldrsb.w	r3, [r7, #37]	; 0x25
 800d6b0:	2b00      	cmp	r3, #0
 800d6b2:	d102      	bne.n	800d6ba <tcp_slowtmr+0x56e>
          tcp_output(prev);
 800d6b4:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800d6b6:	f004 f887 	bl	80117c8 <tcp_output>
  while (pcb != NULL) {
 800d6ba:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d6bc:	2b00      	cmp	r3, #0
 800d6be:	f47f ad5c 	bne.w	800d17a <tcp_slowtmr+0x2e>
    }
  }


  /* Steps through all of the TIME-WAIT PCBs. */
  prev = NULL;
 800d6c2:	2300      	movs	r3, #0
 800d6c4:	62bb      	str	r3, [r7, #40]	; 0x28
  pcb = tcp_tw_pcbs;
 800d6c6:	4b0b      	ldr	r3, [pc, #44]	; (800d6f4 <tcp_slowtmr+0x5a8>)
 800d6c8:	681b      	ldr	r3, [r3, #0]
 800d6ca:	62fb      	str	r3, [r7, #44]	; 0x2c
  while (pcb != NULL) {
 800d6cc:	e067      	b.n	800d79e <tcp_slowtmr+0x652>
 800d6ce:	bf00      	nop
 800d6d0:	2000891c 	.word	0x2000891c
 800d6d4:	10624dd3 	.word	0x10624dd3
 800d6d8:	000124f8 	.word	0x000124f8
 800d6dc:	20008928 	.word	0x20008928
 800d6e0:	08019ea4 	.word	0x08019ea4
 800d6e4:	0801a2dc 	.word	0x0801a2dc
 800d6e8:	08019ee8 	.word	0x08019ee8
 800d6ec:	0801a308 	.word	0x0801a308
 800d6f0:	20008930 	.word	0x20008930
 800d6f4:	2000892c 	.word	0x2000892c
    LWIP_ASSERT("tcp_slowtmr: TIME-WAIT pcb->state == TIME-WAIT", pcb->state == TIME_WAIT);
 800d6f8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d6fa:	7d1b      	ldrb	r3, [r3, #20]
 800d6fc:	2b0a      	cmp	r3, #10
 800d6fe:	d006      	beq.n	800d70e <tcp_slowtmr+0x5c2>
 800d700:	4b2b      	ldr	r3, [pc, #172]	; (800d7b0 <tcp_slowtmr+0x664>)
 800d702:	f240 52a1 	movw	r2, #1441	; 0x5a1
 800d706:	492b      	ldr	r1, [pc, #172]	; (800d7b4 <tcp_slowtmr+0x668>)
 800d708:	482b      	ldr	r0, [pc, #172]	; (800d7b8 <tcp_slowtmr+0x66c>)
 800d70a:	f00a febd 	bl	8018488 <iprintf>
    pcb_remove = 0;
 800d70e:	2300      	movs	r3, #0
 800d710:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

    /* Check if this PCB has stayed long enough in TIME-WAIT */
    if ((u32_t)(tcp_ticks - pcb->tmr) > 2 * TCP_MSL / TCP_SLOW_INTERVAL) {
 800d714:	4b29      	ldr	r3, [pc, #164]	; (800d7bc <tcp_slowtmr+0x670>)
 800d716:	681a      	ldr	r2, [r3, #0]
 800d718:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d71a:	6a1b      	ldr	r3, [r3, #32]
 800d71c:	1ad3      	subs	r3, r2, r3
 800d71e:	2bf0      	cmp	r3, #240	; 0xf0
 800d720:	d904      	bls.n	800d72c <tcp_slowtmr+0x5e0>
      ++pcb_remove;
 800d722:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800d726:	3301      	adds	r3, #1
 800d728:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
    }

    /* If the PCB should be removed, do it. */
    if (pcb_remove) {
 800d72c:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800d730:	2b00      	cmp	r3, #0
 800d732:	d02f      	beq.n	800d794 <tcp_slowtmr+0x648>
      struct tcp_pcb *pcb2;
      tcp_pcb_purge(pcb);
 800d734:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800d736:	f000 fbdb 	bl	800def0 <tcp_pcb_purge>
      /* Remove PCB from tcp_tw_pcbs list. */
      if (prev != NULL) {
 800d73a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d73c:	2b00      	cmp	r3, #0
 800d73e:	d010      	beq.n	800d762 <tcp_slowtmr+0x616>
        LWIP_ASSERT("tcp_slowtmr: middle tcp != tcp_tw_pcbs", pcb != tcp_tw_pcbs);
 800d740:	4b1f      	ldr	r3, [pc, #124]	; (800d7c0 <tcp_slowtmr+0x674>)
 800d742:	681b      	ldr	r3, [r3, #0]
 800d744:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800d746:	429a      	cmp	r2, r3
 800d748:	d106      	bne.n	800d758 <tcp_slowtmr+0x60c>
 800d74a:	4b19      	ldr	r3, [pc, #100]	; (800d7b0 <tcp_slowtmr+0x664>)
 800d74c:	f240 52af 	movw	r2, #1455	; 0x5af
 800d750:	491c      	ldr	r1, [pc, #112]	; (800d7c4 <tcp_slowtmr+0x678>)
 800d752:	4819      	ldr	r0, [pc, #100]	; (800d7b8 <tcp_slowtmr+0x66c>)
 800d754:	f00a fe98 	bl	8018488 <iprintf>
        prev->next = pcb->next;
 800d758:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d75a:	68da      	ldr	r2, [r3, #12]
 800d75c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d75e:	60da      	str	r2, [r3, #12]
 800d760:	e00f      	b.n	800d782 <tcp_slowtmr+0x636>
      } else {
        /* This PCB was the first. */
        LWIP_ASSERT("tcp_slowtmr: first pcb == tcp_tw_pcbs", tcp_tw_pcbs == pcb);
 800d762:	4b17      	ldr	r3, [pc, #92]	; (800d7c0 <tcp_slowtmr+0x674>)
 800d764:	681b      	ldr	r3, [r3, #0]
 800d766:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800d768:	429a      	cmp	r2, r3
 800d76a:	d006      	beq.n	800d77a <tcp_slowtmr+0x62e>
 800d76c:	4b10      	ldr	r3, [pc, #64]	; (800d7b0 <tcp_slowtmr+0x664>)
 800d76e:	f240 52b3 	movw	r2, #1459	; 0x5b3
 800d772:	4915      	ldr	r1, [pc, #84]	; (800d7c8 <tcp_slowtmr+0x67c>)
 800d774:	4810      	ldr	r0, [pc, #64]	; (800d7b8 <tcp_slowtmr+0x66c>)
 800d776:	f00a fe87 	bl	8018488 <iprintf>
        tcp_tw_pcbs = pcb->next;
 800d77a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d77c:	68db      	ldr	r3, [r3, #12]
 800d77e:	4a10      	ldr	r2, [pc, #64]	; (800d7c0 <tcp_slowtmr+0x674>)
 800d780:	6013      	str	r3, [r2, #0]
      }
      pcb2 = pcb;
 800d782:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d784:	61fb      	str	r3, [r7, #28]
      pcb = pcb->next;
 800d786:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d788:	68db      	ldr	r3, [r3, #12]
 800d78a:	62fb      	str	r3, [r7, #44]	; 0x2c
      tcp_free(pcb2);
 800d78c:	69f8      	ldr	r0, [r7, #28]
 800d78e:	f7fe ffe1 	bl	800c754 <tcp_free>
 800d792:	e004      	b.n	800d79e <tcp_slowtmr+0x652>
    } else {
      prev = pcb;
 800d794:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d796:	62bb      	str	r3, [r7, #40]	; 0x28
      pcb = pcb->next;
 800d798:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d79a:	68db      	ldr	r3, [r3, #12]
 800d79c:	62fb      	str	r3, [r7, #44]	; 0x2c
  while (pcb != NULL) {
 800d79e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d7a0:	2b00      	cmp	r3, #0
 800d7a2:	d1a9      	bne.n	800d6f8 <tcp_slowtmr+0x5ac>
    }
  }
}
 800d7a4:	bf00      	nop
 800d7a6:	bf00      	nop
 800d7a8:	3730      	adds	r7, #48	; 0x30
 800d7aa:	46bd      	mov	sp, r7
 800d7ac:	bdb0      	pop	{r4, r5, r7, pc}
 800d7ae:	bf00      	nop
 800d7b0:	08019ea4 	.word	0x08019ea4
 800d7b4:	0801a334 	.word	0x0801a334
 800d7b8:	08019ee8 	.word	0x08019ee8
 800d7bc:	2000891c 	.word	0x2000891c
 800d7c0:	2000892c 	.word	0x2000892c
 800d7c4:	0801a364 	.word	0x0801a364
 800d7c8:	0801a38c 	.word	0x0801a38c

0800d7cc <tcp_fasttmr>:
 *
 * Automatically called from tcp_tmr().
 */
void
tcp_fasttmr(void)
{
 800d7cc:	b580      	push	{r7, lr}
 800d7ce:	b082      	sub	sp, #8
 800d7d0:	af00      	add	r7, sp, #0
  struct tcp_pcb *pcb;

  ++tcp_timer_ctr;
 800d7d2:	4b2d      	ldr	r3, [pc, #180]	; (800d888 <tcp_fasttmr+0xbc>)
 800d7d4:	781b      	ldrb	r3, [r3, #0]
 800d7d6:	3301      	adds	r3, #1
 800d7d8:	b2da      	uxtb	r2, r3
 800d7da:	4b2b      	ldr	r3, [pc, #172]	; (800d888 <tcp_fasttmr+0xbc>)
 800d7dc:	701a      	strb	r2, [r3, #0]

tcp_fasttmr_start:
  pcb = tcp_active_pcbs;
 800d7de:	4b2b      	ldr	r3, [pc, #172]	; (800d88c <tcp_fasttmr+0xc0>)
 800d7e0:	681b      	ldr	r3, [r3, #0]
 800d7e2:	607b      	str	r3, [r7, #4]

  while (pcb != NULL) {
 800d7e4:	e048      	b.n	800d878 <tcp_fasttmr+0xac>
    if (pcb->last_timer != tcp_timer_ctr) {
 800d7e6:	687b      	ldr	r3, [r7, #4]
 800d7e8:	7f9a      	ldrb	r2, [r3, #30]
 800d7ea:	4b27      	ldr	r3, [pc, #156]	; (800d888 <tcp_fasttmr+0xbc>)
 800d7ec:	781b      	ldrb	r3, [r3, #0]
 800d7ee:	429a      	cmp	r2, r3
 800d7f0:	d03f      	beq.n	800d872 <tcp_fasttmr+0xa6>
      struct tcp_pcb *next;
      pcb->last_timer = tcp_timer_ctr;
 800d7f2:	4b25      	ldr	r3, [pc, #148]	; (800d888 <tcp_fasttmr+0xbc>)
 800d7f4:	781a      	ldrb	r2, [r3, #0]
 800d7f6:	687b      	ldr	r3, [r7, #4]
 800d7f8:	779a      	strb	r2, [r3, #30]
      /* send delayed ACKs */
      if (pcb->flags & TF_ACK_DELAY) {
 800d7fa:	687b      	ldr	r3, [r7, #4]
 800d7fc:	8b5b      	ldrh	r3, [r3, #26]
 800d7fe:	f003 0301 	and.w	r3, r3, #1
 800d802:	2b00      	cmp	r3, #0
 800d804:	d010      	beq.n	800d828 <tcp_fasttmr+0x5c>
        LWIP_DEBUGF(TCP_DEBUG, ("tcp_fasttmr: delayed ACK\n"));
        tcp_ack_now(pcb);
 800d806:	687b      	ldr	r3, [r7, #4]
 800d808:	8b5b      	ldrh	r3, [r3, #26]
 800d80a:	f043 0302 	orr.w	r3, r3, #2
 800d80e:	b29a      	uxth	r2, r3
 800d810:	687b      	ldr	r3, [r7, #4]
 800d812:	835a      	strh	r2, [r3, #26]
        tcp_output(pcb);
 800d814:	6878      	ldr	r0, [r7, #4]
 800d816:	f003 ffd7 	bl	80117c8 <tcp_output>
        tcp_clear_flags(pcb, TF_ACK_DELAY | TF_ACK_NOW);
 800d81a:	687b      	ldr	r3, [r7, #4]
 800d81c:	8b5b      	ldrh	r3, [r3, #26]
 800d81e:	f023 0303 	bic.w	r3, r3, #3
 800d822:	b29a      	uxth	r2, r3
 800d824:	687b      	ldr	r3, [r7, #4]
 800d826:	835a      	strh	r2, [r3, #26]
      }
      /* send pending FIN */
      if (pcb->flags & TF_CLOSEPEND) {
 800d828:	687b      	ldr	r3, [r7, #4]
 800d82a:	8b5b      	ldrh	r3, [r3, #26]
 800d82c:	f003 0308 	and.w	r3, r3, #8
 800d830:	2b00      	cmp	r3, #0
 800d832:	d009      	beq.n	800d848 <tcp_fasttmr+0x7c>
        LWIP_DEBUGF(TCP_DEBUG, ("tcp_fasttmr: pending FIN\n"));
        tcp_clear_flags(pcb, TF_CLOSEPEND);
 800d834:	687b      	ldr	r3, [r7, #4]
 800d836:	8b5b      	ldrh	r3, [r3, #26]
 800d838:	f023 0308 	bic.w	r3, r3, #8
 800d83c:	b29a      	uxth	r2, r3
 800d83e:	687b      	ldr	r3, [r7, #4]
 800d840:	835a      	strh	r2, [r3, #26]
        tcp_close_shutdown_fin(pcb);
 800d842:	6878      	ldr	r0, [r7, #4]
 800d844:	f7ff f91a 	bl	800ca7c <tcp_close_shutdown_fin>
      }

      next = pcb->next;
 800d848:	687b      	ldr	r3, [r7, #4]
 800d84a:	68db      	ldr	r3, [r3, #12]
 800d84c:	603b      	str	r3, [r7, #0]

      /* If there is data which was previously "refused" by upper layer */
      if (pcb->refused_data != NULL) {
 800d84e:	687b      	ldr	r3, [r7, #4]
 800d850:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800d852:	2b00      	cmp	r3, #0
 800d854:	d00a      	beq.n	800d86c <tcp_fasttmr+0xa0>
        tcp_active_pcbs_changed = 0;
 800d856:	4b0e      	ldr	r3, [pc, #56]	; (800d890 <tcp_fasttmr+0xc4>)
 800d858:	2200      	movs	r2, #0
 800d85a:	701a      	strb	r2, [r3, #0]
        tcp_process_refused_data(pcb);
 800d85c:	6878      	ldr	r0, [r7, #4]
 800d85e:	f000 f819 	bl	800d894 <tcp_process_refused_data>
        if (tcp_active_pcbs_changed) {
 800d862:	4b0b      	ldr	r3, [pc, #44]	; (800d890 <tcp_fasttmr+0xc4>)
 800d864:	781b      	ldrb	r3, [r3, #0]
 800d866:	2b00      	cmp	r3, #0
 800d868:	d000      	beq.n	800d86c <tcp_fasttmr+0xa0>
          /* application callback has changed the pcb list: restart the loop */
          goto tcp_fasttmr_start;
 800d86a:	e7b8      	b.n	800d7de <tcp_fasttmr+0x12>
        }
      }
      pcb = next;
 800d86c:	683b      	ldr	r3, [r7, #0]
 800d86e:	607b      	str	r3, [r7, #4]
 800d870:	e002      	b.n	800d878 <tcp_fasttmr+0xac>
    } else {
      pcb = pcb->next;
 800d872:	687b      	ldr	r3, [r7, #4]
 800d874:	68db      	ldr	r3, [r3, #12]
 800d876:	607b      	str	r3, [r7, #4]
  while (pcb != NULL) {
 800d878:	687b      	ldr	r3, [r7, #4]
 800d87a:	2b00      	cmp	r3, #0
 800d87c:	d1b3      	bne.n	800d7e6 <tcp_fasttmr+0x1a>
    }
  }
}
 800d87e:	bf00      	nop
 800d880:	bf00      	nop
 800d882:	3708      	adds	r7, #8
 800d884:	46bd      	mov	sp, r7
 800d886:	bd80      	pop	{r7, pc}
 800d888:	20008932 	.word	0x20008932
 800d88c:	20008928 	.word	0x20008928
 800d890:	20008930 	.word	0x20008930

0800d894 <tcp_process_refused_data>:
}

/** Pass pcb->refused_data to the recv callback */
err_t
tcp_process_refused_data(struct tcp_pcb *pcb)
{
 800d894:	b590      	push	{r4, r7, lr}
 800d896:	b085      	sub	sp, #20
 800d898:	af00      	add	r7, sp, #0
 800d89a:	6078      	str	r0, [r7, #4]
#if TCP_QUEUE_OOSEQ && LWIP_WND_SCALE
  struct pbuf *rest;
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */

  LWIP_ERROR("tcp_process_refused_data: invalid pcb", pcb != NULL, return ERR_ARG);
 800d89c:	687b      	ldr	r3, [r7, #4]
 800d89e:	2b00      	cmp	r3, #0
 800d8a0:	d109      	bne.n	800d8b6 <tcp_process_refused_data+0x22>
 800d8a2:	4b37      	ldr	r3, [pc, #220]	; (800d980 <tcp_process_refused_data+0xec>)
 800d8a4:	f240 6209 	movw	r2, #1545	; 0x609
 800d8a8:	4936      	ldr	r1, [pc, #216]	; (800d984 <tcp_process_refused_data+0xf0>)
 800d8aa:	4837      	ldr	r0, [pc, #220]	; (800d988 <tcp_process_refused_data+0xf4>)
 800d8ac:	f00a fdec 	bl	8018488 <iprintf>
 800d8b0:	f06f 030f 	mvn.w	r3, #15
 800d8b4:	e060      	b.n	800d978 <tcp_process_refused_data+0xe4>
#if TCP_QUEUE_OOSEQ && LWIP_WND_SCALE
  while (pcb->refused_data != NULL)
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
  {
    err_t err;
    u8_t refused_flags = pcb->refused_data->flags;
 800d8b6:	687b      	ldr	r3, [r7, #4]
 800d8b8:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800d8ba:	7b5b      	ldrb	r3, [r3, #13]
 800d8bc:	73bb      	strb	r3, [r7, #14]
    /* set pcb->refused_data to NULL in case the callback frees it and then
       closes the pcb */
    struct pbuf *refused_data = pcb->refused_data;
 800d8be:	687b      	ldr	r3, [r7, #4]
 800d8c0:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800d8c2:	60bb      	str	r3, [r7, #8]
#if TCP_QUEUE_OOSEQ && LWIP_WND_SCALE
    pbuf_split_64k(refused_data, &rest);
    pcb->refused_data = rest;
#else /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
    pcb->refused_data = NULL;
 800d8c4:	687b      	ldr	r3, [r7, #4]
 800d8c6:	2200      	movs	r2, #0
 800d8c8:	679a      	str	r2, [r3, #120]	; 0x78
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
    /* Notify again application with data previously received. */
    LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_input: notify kept packet\n"));
    TCP_EVENT_RECV(pcb, refused_data, ERR_OK, err);
 800d8ca:	687b      	ldr	r3, [r7, #4]
 800d8cc:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800d8d0:	2b00      	cmp	r3, #0
 800d8d2:	d00b      	beq.n	800d8ec <tcp_process_refused_data+0x58>
 800d8d4:	687b      	ldr	r3, [r7, #4]
 800d8d6:	f8d3 4084 	ldr.w	r4, [r3, #132]	; 0x84
 800d8da:	687b      	ldr	r3, [r7, #4]
 800d8dc:	6918      	ldr	r0, [r3, #16]
 800d8de:	2300      	movs	r3, #0
 800d8e0:	68ba      	ldr	r2, [r7, #8]
 800d8e2:	6879      	ldr	r1, [r7, #4]
 800d8e4:	47a0      	blx	r4
 800d8e6:	4603      	mov	r3, r0
 800d8e8:	73fb      	strb	r3, [r7, #15]
 800d8ea:	e007      	b.n	800d8fc <tcp_process_refused_data+0x68>
 800d8ec:	2300      	movs	r3, #0
 800d8ee:	68ba      	ldr	r2, [r7, #8]
 800d8f0:	6879      	ldr	r1, [r7, #4]
 800d8f2:	2000      	movs	r0, #0
 800d8f4:	f000 f8a4 	bl	800da40 <tcp_recv_null>
 800d8f8:	4603      	mov	r3, r0
 800d8fa:	73fb      	strb	r3, [r7, #15]
    if (err == ERR_OK) {
 800d8fc:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800d900:	2b00      	cmp	r3, #0
 800d902:	d12a      	bne.n	800d95a <tcp_process_refused_data+0xc6>
      /* did refused_data include a FIN? */
      if ((refused_flags & PBUF_FLAG_TCP_FIN)
 800d904:	7bbb      	ldrb	r3, [r7, #14]
 800d906:	f003 0320 	and.w	r3, r3, #32
 800d90a:	2b00      	cmp	r3, #0
 800d90c:	d033      	beq.n	800d976 <tcp_process_refused_data+0xe2>
          && (rest == NULL)
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
         ) {
        /* correct rcv_wnd as the application won't call tcp_recved()
           for the FIN's seqno */
        if (pcb->rcv_wnd != TCP_WND_MAX(pcb)) {
 800d90e:	687b      	ldr	r3, [r7, #4]
 800d910:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800d912:	f5b3 6f06 	cmp.w	r3, #2144	; 0x860
 800d916:	d005      	beq.n	800d924 <tcp_process_refused_data+0x90>
          pcb->rcv_wnd++;
 800d918:	687b      	ldr	r3, [r7, #4]
 800d91a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800d91c:	3301      	adds	r3, #1
 800d91e:	b29a      	uxth	r2, r3
 800d920:	687b      	ldr	r3, [r7, #4]
 800d922:	851a      	strh	r2, [r3, #40]	; 0x28
        }
        TCP_EVENT_CLOSED(pcb, err);
 800d924:	687b      	ldr	r3, [r7, #4]
 800d926:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800d92a:	2b00      	cmp	r3, #0
 800d92c:	d00b      	beq.n	800d946 <tcp_process_refused_data+0xb2>
 800d92e:	687b      	ldr	r3, [r7, #4]
 800d930:	f8d3 4084 	ldr.w	r4, [r3, #132]	; 0x84
 800d934:	687b      	ldr	r3, [r7, #4]
 800d936:	6918      	ldr	r0, [r3, #16]
 800d938:	2300      	movs	r3, #0
 800d93a:	2200      	movs	r2, #0
 800d93c:	6879      	ldr	r1, [r7, #4]
 800d93e:	47a0      	blx	r4
 800d940:	4603      	mov	r3, r0
 800d942:	73fb      	strb	r3, [r7, #15]
 800d944:	e001      	b.n	800d94a <tcp_process_refused_data+0xb6>
 800d946:	2300      	movs	r3, #0
 800d948:	73fb      	strb	r3, [r7, #15]
        if (err == ERR_ABRT) {
 800d94a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800d94e:	f113 0f0d 	cmn.w	r3, #13
 800d952:	d110      	bne.n	800d976 <tcp_process_refused_data+0xe2>
          return ERR_ABRT;
 800d954:	f06f 030c 	mvn.w	r3, #12
 800d958:	e00e      	b.n	800d978 <tcp_process_refused_data+0xe4>
        }
      }
    } else if (err == ERR_ABRT) {
 800d95a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800d95e:	f113 0f0d 	cmn.w	r3, #13
 800d962:	d102      	bne.n	800d96a <tcp_process_refused_data+0xd6>
      /* if err == ERR_ABRT, 'pcb' is already deallocated */
      /* Drop incoming packets because pcb is "full" (only if the incoming
         segment contains data). */
      LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_input: drop incoming packets, because pcb is \"full\"\n"));
      return ERR_ABRT;
 800d964:	f06f 030c 	mvn.w	r3, #12
 800d968:	e006      	b.n	800d978 <tcp_process_refused_data+0xe4>
#if TCP_QUEUE_OOSEQ && LWIP_WND_SCALE
      if (rest != NULL) {
        pbuf_cat(refused_data, rest);
      }
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
      pcb->refused_data = refused_data;
 800d96a:	687b      	ldr	r3, [r7, #4]
 800d96c:	68ba      	ldr	r2, [r7, #8]
 800d96e:	679a      	str	r2, [r3, #120]	; 0x78
      return ERR_INPROGRESS;
 800d970:	f06f 0304 	mvn.w	r3, #4
 800d974:	e000      	b.n	800d978 <tcp_process_refused_data+0xe4>
    }
  }
  return ERR_OK;
 800d976:	2300      	movs	r3, #0
}
 800d978:	4618      	mov	r0, r3
 800d97a:	3714      	adds	r7, #20
 800d97c:	46bd      	mov	sp, r7
 800d97e:	bd90      	pop	{r4, r7, pc}
 800d980:	08019ea4 	.word	0x08019ea4
 800d984:	0801a3b4 	.word	0x0801a3b4
 800d988:	08019ee8 	.word	0x08019ee8

0800d98c <tcp_segs_free>:
 *
 * @param seg tcp_seg list of TCP segments to free
 */
void
tcp_segs_free(struct tcp_seg *seg)
{
 800d98c:	b580      	push	{r7, lr}
 800d98e:	b084      	sub	sp, #16
 800d990:	af00      	add	r7, sp, #0
 800d992:	6078      	str	r0, [r7, #4]
  while (seg != NULL) {
 800d994:	e007      	b.n	800d9a6 <tcp_segs_free+0x1a>
    struct tcp_seg *next = seg->next;
 800d996:	687b      	ldr	r3, [r7, #4]
 800d998:	681b      	ldr	r3, [r3, #0]
 800d99a:	60fb      	str	r3, [r7, #12]
    tcp_seg_free(seg);
 800d99c:	6878      	ldr	r0, [r7, #4]
 800d99e:	f000 f80a 	bl	800d9b6 <tcp_seg_free>
    seg = next;
 800d9a2:	68fb      	ldr	r3, [r7, #12]
 800d9a4:	607b      	str	r3, [r7, #4]
  while (seg != NULL) {
 800d9a6:	687b      	ldr	r3, [r7, #4]
 800d9a8:	2b00      	cmp	r3, #0
 800d9aa:	d1f4      	bne.n	800d996 <tcp_segs_free+0xa>
  }
}
 800d9ac:	bf00      	nop
 800d9ae:	bf00      	nop
 800d9b0:	3710      	adds	r7, #16
 800d9b2:	46bd      	mov	sp, r7
 800d9b4:	bd80      	pop	{r7, pc}

0800d9b6 <tcp_seg_free>:
 *
 * @param seg single tcp_seg to free
 */
void
tcp_seg_free(struct tcp_seg *seg)
{
 800d9b6:	b580      	push	{r7, lr}
 800d9b8:	b082      	sub	sp, #8
 800d9ba:	af00      	add	r7, sp, #0
 800d9bc:	6078      	str	r0, [r7, #4]
  if (seg != NULL) {
 800d9be:	687b      	ldr	r3, [r7, #4]
 800d9c0:	2b00      	cmp	r3, #0
 800d9c2:	d00c      	beq.n	800d9de <tcp_seg_free+0x28>
    if (seg->p != NULL) {
 800d9c4:	687b      	ldr	r3, [r7, #4]
 800d9c6:	685b      	ldr	r3, [r3, #4]
 800d9c8:	2b00      	cmp	r3, #0
 800d9ca:	d004      	beq.n	800d9d6 <tcp_seg_free+0x20>
      pbuf_free(seg->p);
 800d9cc:	687b      	ldr	r3, [r7, #4]
 800d9ce:	685b      	ldr	r3, [r3, #4]
 800d9d0:	4618      	mov	r0, r3
 800d9d2:	f7fe fab5 	bl	800bf40 <pbuf_free>
#if TCP_DEBUG
      seg->p = NULL;
#endif /* TCP_DEBUG */
    }
    memp_free(MEMP_TCP_SEG, seg);
 800d9d6:	6879      	ldr	r1, [r7, #4]
 800d9d8:	2003      	movs	r0, #3
 800d9da:	f7fd fc2f 	bl	800b23c <memp_free>
  }
}
 800d9de:	bf00      	nop
 800d9e0:	3708      	adds	r7, #8
 800d9e2:	46bd      	mov	sp, r7
 800d9e4:	bd80      	pop	{r7, pc}
	...

0800d9e8 <tcp_seg_copy>:
 * @param seg the old tcp_seg
 * @return a copy of seg
 */
struct tcp_seg *
tcp_seg_copy(struct tcp_seg *seg)
{
 800d9e8:	b580      	push	{r7, lr}
 800d9ea:	b084      	sub	sp, #16
 800d9ec:	af00      	add	r7, sp, #0
 800d9ee:	6078      	str	r0, [r7, #4]
  struct tcp_seg *cseg;

  LWIP_ASSERT("tcp_seg_copy: invalid seg", seg != NULL);
 800d9f0:	687b      	ldr	r3, [r7, #4]
 800d9f2:	2b00      	cmp	r3, #0
 800d9f4:	d106      	bne.n	800da04 <tcp_seg_copy+0x1c>
 800d9f6:	4b0f      	ldr	r3, [pc, #60]	; (800da34 <tcp_seg_copy+0x4c>)
 800d9f8:	f240 6282 	movw	r2, #1666	; 0x682
 800d9fc:	490e      	ldr	r1, [pc, #56]	; (800da38 <tcp_seg_copy+0x50>)
 800d9fe:	480f      	ldr	r0, [pc, #60]	; (800da3c <tcp_seg_copy+0x54>)
 800da00:	f00a fd42 	bl	8018488 <iprintf>

  cseg = (struct tcp_seg *)memp_malloc(MEMP_TCP_SEG);
 800da04:	2003      	movs	r0, #3
 800da06:	f7fd fba9 	bl	800b15c <memp_malloc>
 800da0a:	60f8      	str	r0, [r7, #12]
  if (cseg == NULL) {
 800da0c:	68fb      	ldr	r3, [r7, #12]
 800da0e:	2b00      	cmp	r3, #0
 800da10:	d101      	bne.n	800da16 <tcp_seg_copy+0x2e>
    return NULL;
 800da12:	2300      	movs	r3, #0
 800da14:	e00a      	b.n	800da2c <tcp_seg_copy+0x44>
  }
  SMEMCPY((u8_t *)cseg, (const u8_t *)seg, sizeof(struct tcp_seg));
 800da16:	2210      	movs	r2, #16
 800da18:	6879      	ldr	r1, [r7, #4]
 800da1a:	68f8      	ldr	r0, [r7, #12]
 800da1c:	f00a fe27 	bl	801866e <memcpy>
  pbuf_ref(cseg->p);
 800da20:	68fb      	ldr	r3, [r7, #12]
 800da22:	685b      	ldr	r3, [r3, #4]
 800da24:	4618      	mov	r0, r3
 800da26:	f7fe fb2b 	bl	800c080 <pbuf_ref>
  return cseg;
 800da2a:	68fb      	ldr	r3, [r7, #12]
}
 800da2c:	4618      	mov	r0, r3
 800da2e:	3710      	adds	r7, #16
 800da30:	46bd      	mov	sp, r7
 800da32:	bd80      	pop	{r7, pc}
 800da34:	08019ea4 	.word	0x08019ea4
 800da38:	0801a3f8 	.word	0x0801a3f8
 800da3c:	08019ee8 	.word	0x08019ee8

0800da40 <tcp_recv_null>:
 * Default receive callback that is called if the user didn't register
 * a recv callback for the pcb.
 */
err_t
tcp_recv_null(void *arg, struct tcp_pcb *pcb, struct pbuf *p, err_t err)
{
 800da40:	b580      	push	{r7, lr}
 800da42:	b084      	sub	sp, #16
 800da44:	af00      	add	r7, sp, #0
 800da46:	60f8      	str	r0, [r7, #12]
 800da48:	60b9      	str	r1, [r7, #8]
 800da4a:	607a      	str	r2, [r7, #4]
 800da4c:	70fb      	strb	r3, [r7, #3]
  LWIP_UNUSED_ARG(arg);

  LWIP_ERROR("tcp_recv_null: invalid pcb", pcb != NULL, return ERR_ARG);
 800da4e:	68bb      	ldr	r3, [r7, #8]
 800da50:	2b00      	cmp	r3, #0
 800da52:	d109      	bne.n	800da68 <tcp_recv_null+0x28>
 800da54:	4b12      	ldr	r3, [pc, #72]	; (800daa0 <tcp_recv_null+0x60>)
 800da56:	f44f 62d3 	mov.w	r2, #1688	; 0x698
 800da5a:	4912      	ldr	r1, [pc, #72]	; (800daa4 <tcp_recv_null+0x64>)
 800da5c:	4812      	ldr	r0, [pc, #72]	; (800daa8 <tcp_recv_null+0x68>)
 800da5e:	f00a fd13 	bl	8018488 <iprintf>
 800da62:	f06f 030f 	mvn.w	r3, #15
 800da66:	e016      	b.n	800da96 <tcp_recv_null+0x56>

  if (p != NULL) {
 800da68:	687b      	ldr	r3, [r7, #4]
 800da6a:	2b00      	cmp	r3, #0
 800da6c:	d009      	beq.n	800da82 <tcp_recv_null+0x42>
    tcp_recved(pcb, p->tot_len);
 800da6e:	687b      	ldr	r3, [r7, #4]
 800da70:	891b      	ldrh	r3, [r3, #8]
 800da72:	4619      	mov	r1, r3
 800da74:	68b8      	ldr	r0, [r7, #8]
 800da76:	f7ff f9bb 	bl	800cdf0 <tcp_recved>
    pbuf_free(p);
 800da7a:	6878      	ldr	r0, [r7, #4]
 800da7c:	f7fe fa60 	bl	800bf40 <pbuf_free>
 800da80:	e008      	b.n	800da94 <tcp_recv_null+0x54>
  } else if (err == ERR_OK) {
 800da82:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800da86:	2b00      	cmp	r3, #0
 800da88:	d104      	bne.n	800da94 <tcp_recv_null+0x54>
    return tcp_close(pcb);
 800da8a:	68b8      	ldr	r0, [r7, #8]
 800da8c:	f7ff f860 	bl	800cb50 <tcp_close>
 800da90:	4603      	mov	r3, r0
 800da92:	e000      	b.n	800da96 <tcp_recv_null+0x56>
  }
  return ERR_OK;
 800da94:	2300      	movs	r3, #0
}
 800da96:	4618      	mov	r0, r3
 800da98:	3710      	adds	r7, #16
 800da9a:	46bd      	mov	sp, r7
 800da9c:	bd80      	pop	{r7, pc}
 800da9e:	bf00      	nop
 800daa0:	08019ea4 	.word	0x08019ea4
 800daa4:	0801a414 	.word	0x0801a414
 800daa8:	08019ee8 	.word	0x08019ee8

0800daac <tcp_kill_prio>:
 *
 * @param prio minimum priority
 */
static void
tcp_kill_prio(u8_t prio)
{
 800daac:	b580      	push	{r7, lr}
 800daae:	b086      	sub	sp, #24
 800dab0:	af00      	add	r7, sp, #0
 800dab2:	4603      	mov	r3, r0
 800dab4:	71fb      	strb	r3, [r7, #7]
  struct tcp_pcb *pcb, *inactive;
  u32_t inactivity;
  u8_t mprio;

  mprio = LWIP_MIN(TCP_PRIO_MAX, prio);
 800dab6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800daba:	2b00      	cmp	r3, #0
 800dabc:	db01      	blt.n	800dac2 <tcp_kill_prio+0x16>
 800dabe:	79fb      	ldrb	r3, [r7, #7]
 800dac0:	e000      	b.n	800dac4 <tcp_kill_prio+0x18>
 800dac2:	237f      	movs	r3, #127	; 0x7f
 800dac4:	72fb      	strb	r3, [r7, #11]

  /* We want to kill connections with a lower prio, so bail out if 
   * supplied prio is 0 - there can never be a lower prio
   */
  if (mprio == 0) {
 800dac6:	7afb      	ldrb	r3, [r7, #11]
 800dac8:	2b00      	cmp	r3, #0
 800daca:	d034      	beq.n	800db36 <tcp_kill_prio+0x8a>
  /* We only want kill connections with a lower prio, so decrement prio by one 
   * and start searching for oldest connection with same or lower priority than mprio.
   * We want to find the connections with the lowest possible prio, and among
   * these the one with the longest inactivity time.
   */
  mprio--;
 800dacc:	7afb      	ldrb	r3, [r7, #11]
 800dace:	3b01      	subs	r3, #1
 800dad0:	72fb      	strb	r3, [r7, #11]

  inactivity = 0;
 800dad2:	2300      	movs	r3, #0
 800dad4:	60fb      	str	r3, [r7, #12]
  inactive = NULL;
 800dad6:	2300      	movs	r3, #0
 800dad8:	613b      	str	r3, [r7, #16]
  for (pcb = tcp_active_pcbs; pcb != NULL; pcb = pcb->next) {
 800dada:	4b19      	ldr	r3, [pc, #100]	; (800db40 <tcp_kill_prio+0x94>)
 800dadc:	681b      	ldr	r3, [r3, #0]
 800dade:	617b      	str	r3, [r7, #20]
 800dae0:	e01f      	b.n	800db22 <tcp_kill_prio+0x76>
        /* lower prio is always a kill candidate */
    if ((pcb->prio < mprio) ||
 800dae2:	697b      	ldr	r3, [r7, #20]
 800dae4:	7d5b      	ldrb	r3, [r3, #21]
 800dae6:	7afa      	ldrb	r2, [r7, #11]
 800dae8:	429a      	cmp	r2, r3
 800daea:	d80c      	bhi.n	800db06 <tcp_kill_prio+0x5a>
        /* longer inactivity is also a kill candidate */
        ((pcb->prio == mprio) && ((u32_t)(tcp_ticks - pcb->tmr) >= inactivity))) {
 800daec:	697b      	ldr	r3, [r7, #20]
 800daee:	7d5b      	ldrb	r3, [r3, #21]
    if ((pcb->prio < mprio) ||
 800daf0:	7afa      	ldrb	r2, [r7, #11]
 800daf2:	429a      	cmp	r2, r3
 800daf4:	d112      	bne.n	800db1c <tcp_kill_prio+0x70>
        ((pcb->prio == mprio) && ((u32_t)(tcp_ticks - pcb->tmr) >= inactivity))) {
 800daf6:	4b13      	ldr	r3, [pc, #76]	; (800db44 <tcp_kill_prio+0x98>)
 800daf8:	681a      	ldr	r2, [r3, #0]
 800dafa:	697b      	ldr	r3, [r7, #20]
 800dafc:	6a1b      	ldr	r3, [r3, #32]
 800dafe:	1ad3      	subs	r3, r2, r3
 800db00:	68fa      	ldr	r2, [r7, #12]
 800db02:	429a      	cmp	r2, r3
 800db04:	d80a      	bhi.n	800db1c <tcp_kill_prio+0x70>
      inactivity = tcp_ticks - pcb->tmr;
 800db06:	4b0f      	ldr	r3, [pc, #60]	; (800db44 <tcp_kill_prio+0x98>)
 800db08:	681a      	ldr	r2, [r3, #0]
 800db0a:	697b      	ldr	r3, [r7, #20]
 800db0c:	6a1b      	ldr	r3, [r3, #32]
 800db0e:	1ad3      	subs	r3, r2, r3
 800db10:	60fb      	str	r3, [r7, #12]
      inactive   = pcb;
 800db12:	697b      	ldr	r3, [r7, #20]
 800db14:	613b      	str	r3, [r7, #16]
      mprio      = pcb->prio;
 800db16:	697b      	ldr	r3, [r7, #20]
 800db18:	7d5b      	ldrb	r3, [r3, #21]
 800db1a:	72fb      	strb	r3, [r7, #11]
  for (pcb = tcp_active_pcbs; pcb != NULL; pcb = pcb->next) {
 800db1c:	697b      	ldr	r3, [r7, #20]
 800db1e:	68db      	ldr	r3, [r3, #12]
 800db20:	617b      	str	r3, [r7, #20]
 800db22:	697b      	ldr	r3, [r7, #20]
 800db24:	2b00      	cmp	r3, #0
 800db26:	d1dc      	bne.n	800dae2 <tcp_kill_prio+0x36>
    }
  }
  if (inactive != NULL) {
 800db28:	693b      	ldr	r3, [r7, #16]
 800db2a:	2b00      	cmp	r3, #0
 800db2c:	d004      	beq.n	800db38 <tcp_kill_prio+0x8c>
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_kill_prio: killing oldest PCB %p (%"S32_F")\n",
                            (void *)inactive, inactivity));
    tcp_abort(inactive);
 800db2e:	6938      	ldr	r0, [r7, #16]
 800db30:	f7ff f8f8 	bl	800cd24 <tcp_abort>
 800db34:	e000      	b.n	800db38 <tcp_kill_prio+0x8c>
    return;
 800db36:	bf00      	nop
  }
}
 800db38:	3718      	adds	r7, #24
 800db3a:	46bd      	mov	sp, r7
 800db3c:	bd80      	pop	{r7, pc}
 800db3e:	bf00      	nop
 800db40:	20008928 	.word	0x20008928
 800db44:	2000891c 	.word	0x2000891c

0800db48 <tcp_kill_state>:
 * Kills the oldest connection that is in specific state.
 * Called from tcp_alloc() for LAST_ACK and CLOSING if no more connections are available.
 */
static void
tcp_kill_state(enum tcp_state state)
{
 800db48:	b580      	push	{r7, lr}
 800db4a:	b086      	sub	sp, #24
 800db4c:	af00      	add	r7, sp, #0
 800db4e:	4603      	mov	r3, r0
 800db50:	71fb      	strb	r3, [r7, #7]
  struct tcp_pcb *pcb, *inactive;
  u32_t inactivity;

  LWIP_ASSERT("invalid state", (state == CLOSING) || (state == LAST_ACK));
 800db52:	79fb      	ldrb	r3, [r7, #7]
 800db54:	2b08      	cmp	r3, #8
 800db56:	d009      	beq.n	800db6c <tcp_kill_state+0x24>
 800db58:	79fb      	ldrb	r3, [r7, #7]
 800db5a:	2b09      	cmp	r3, #9
 800db5c:	d006      	beq.n	800db6c <tcp_kill_state+0x24>
 800db5e:	4b1a      	ldr	r3, [pc, #104]	; (800dbc8 <tcp_kill_state+0x80>)
 800db60:	f240 62dd 	movw	r2, #1757	; 0x6dd
 800db64:	4919      	ldr	r1, [pc, #100]	; (800dbcc <tcp_kill_state+0x84>)
 800db66:	481a      	ldr	r0, [pc, #104]	; (800dbd0 <tcp_kill_state+0x88>)
 800db68:	f00a fc8e 	bl	8018488 <iprintf>

  inactivity = 0;
 800db6c:	2300      	movs	r3, #0
 800db6e:	60fb      	str	r3, [r7, #12]
  inactive = NULL;
 800db70:	2300      	movs	r3, #0
 800db72:	613b      	str	r3, [r7, #16]
  /* Go through the list of active pcbs and get the oldest pcb that is in state
     CLOSING/LAST_ACK. */
  for (pcb = tcp_active_pcbs; pcb != NULL; pcb = pcb->next) {
 800db74:	4b17      	ldr	r3, [pc, #92]	; (800dbd4 <tcp_kill_state+0x8c>)
 800db76:	681b      	ldr	r3, [r3, #0]
 800db78:	617b      	str	r3, [r7, #20]
 800db7a:	e017      	b.n	800dbac <tcp_kill_state+0x64>
    if (pcb->state == state) {
 800db7c:	697b      	ldr	r3, [r7, #20]
 800db7e:	7d1b      	ldrb	r3, [r3, #20]
 800db80:	79fa      	ldrb	r2, [r7, #7]
 800db82:	429a      	cmp	r2, r3
 800db84:	d10f      	bne.n	800dba6 <tcp_kill_state+0x5e>
      if ((u32_t)(tcp_ticks - pcb->tmr) >= inactivity) {
 800db86:	4b14      	ldr	r3, [pc, #80]	; (800dbd8 <tcp_kill_state+0x90>)
 800db88:	681a      	ldr	r2, [r3, #0]
 800db8a:	697b      	ldr	r3, [r7, #20]
 800db8c:	6a1b      	ldr	r3, [r3, #32]
 800db8e:	1ad3      	subs	r3, r2, r3
 800db90:	68fa      	ldr	r2, [r7, #12]
 800db92:	429a      	cmp	r2, r3
 800db94:	d807      	bhi.n	800dba6 <tcp_kill_state+0x5e>
        inactivity = tcp_ticks - pcb->tmr;
 800db96:	4b10      	ldr	r3, [pc, #64]	; (800dbd8 <tcp_kill_state+0x90>)
 800db98:	681a      	ldr	r2, [r3, #0]
 800db9a:	697b      	ldr	r3, [r7, #20]
 800db9c:	6a1b      	ldr	r3, [r3, #32]
 800db9e:	1ad3      	subs	r3, r2, r3
 800dba0:	60fb      	str	r3, [r7, #12]
        inactive = pcb;
 800dba2:	697b      	ldr	r3, [r7, #20]
 800dba4:	613b      	str	r3, [r7, #16]
  for (pcb = tcp_active_pcbs; pcb != NULL; pcb = pcb->next) {
 800dba6:	697b      	ldr	r3, [r7, #20]
 800dba8:	68db      	ldr	r3, [r3, #12]
 800dbaa:	617b      	str	r3, [r7, #20]
 800dbac:	697b      	ldr	r3, [r7, #20]
 800dbae:	2b00      	cmp	r3, #0
 800dbb0:	d1e4      	bne.n	800db7c <tcp_kill_state+0x34>
      }
    }
  }
  if (inactive != NULL) {
 800dbb2:	693b      	ldr	r3, [r7, #16]
 800dbb4:	2b00      	cmp	r3, #0
 800dbb6:	d003      	beq.n	800dbc0 <tcp_kill_state+0x78>
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_kill_closing: killing oldest %s PCB %p (%"S32_F")\n",
                            tcp_state_str[state], (void *)inactive, inactivity));
    /* Don't send a RST, since no data is lost. */
    tcp_abandon(inactive, 0);
 800dbb8:	2100      	movs	r1, #0
 800dbba:	6938      	ldr	r0, [r7, #16]
 800dbbc:	f7fe fff4 	bl	800cba8 <tcp_abandon>
  }
}
 800dbc0:	bf00      	nop
 800dbc2:	3718      	adds	r7, #24
 800dbc4:	46bd      	mov	sp, r7
 800dbc6:	bd80      	pop	{r7, pc}
 800dbc8:	08019ea4 	.word	0x08019ea4
 800dbcc:	0801a430 	.word	0x0801a430
 800dbd0:	08019ee8 	.word	0x08019ee8
 800dbd4:	20008928 	.word	0x20008928
 800dbd8:	2000891c 	.word	0x2000891c

0800dbdc <tcp_kill_timewait>:
 * Kills the oldest connection that is in TIME_WAIT state.
 * Called from tcp_alloc() if no more connections are available.
 */
static void
tcp_kill_timewait(void)
{
 800dbdc:	b580      	push	{r7, lr}
 800dbde:	b084      	sub	sp, #16
 800dbe0:	af00      	add	r7, sp, #0
  struct tcp_pcb *pcb, *inactive;
  u32_t inactivity;

  inactivity = 0;
 800dbe2:	2300      	movs	r3, #0
 800dbe4:	607b      	str	r3, [r7, #4]
  inactive = NULL;
 800dbe6:	2300      	movs	r3, #0
 800dbe8:	60bb      	str	r3, [r7, #8]
  /* Go through the list of TIME_WAIT pcbs and get the oldest pcb. */
  for (pcb = tcp_tw_pcbs; pcb != NULL; pcb = pcb->next) {
 800dbea:	4b12      	ldr	r3, [pc, #72]	; (800dc34 <tcp_kill_timewait+0x58>)
 800dbec:	681b      	ldr	r3, [r3, #0]
 800dbee:	60fb      	str	r3, [r7, #12]
 800dbf0:	e012      	b.n	800dc18 <tcp_kill_timewait+0x3c>
    if ((u32_t)(tcp_ticks - pcb->tmr) >= inactivity) {
 800dbf2:	4b11      	ldr	r3, [pc, #68]	; (800dc38 <tcp_kill_timewait+0x5c>)
 800dbf4:	681a      	ldr	r2, [r3, #0]
 800dbf6:	68fb      	ldr	r3, [r7, #12]
 800dbf8:	6a1b      	ldr	r3, [r3, #32]
 800dbfa:	1ad3      	subs	r3, r2, r3
 800dbfc:	687a      	ldr	r2, [r7, #4]
 800dbfe:	429a      	cmp	r2, r3
 800dc00:	d807      	bhi.n	800dc12 <tcp_kill_timewait+0x36>
      inactivity = tcp_ticks - pcb->tmr;
 800dc02:	4b0d      	ldr	r3, [pc, #52]	; (800dc38 <tcp_kill_timewait+0x5c>)
 800dc04:	681a      	ldr	r2, [r3, #0]
 800dc06:	68fb      	ldr	r3, [r7, #12]
 800dc08:	6a1b      	ldr	r3, [r3, #32]
 800dc0a:	1ad3      	subs	r3, r2, r3
 800dc0c:	607b      	str	r3, [r7, #4]
      inactive = pcb;
 800dc0e:	68fb      	ldr	r3, [r7, #12]
 800dc10:	60bb      	str	r3, [r7, #8]
  for (pcb = tcp_tw_pcbs; pcb != NULL; pcb = pcb->next) {
 800dc12:	68fb      	ldr	r3, [r7, #12]
 800dc14:	68db      	ldr	r3, [r3, #12]
 800dc16:	60fb      	str	r3, [r7, #12]
 800dc18:	68fb      	ldr	r3, [r7, #12]
 800dc1a:	2b00      	cmp	r3, #0
 800dc1c:	d1e9      	bne.n	800dbf2 <tcp_kill_timewait+0x16>
    }
  }
  if (inactive != NULL) {
 800dc1e:	68bb      	ldr	r3, [r7, #8]
 800dc20:	2b00      	cmp	r3, #0
 800dc22:	d002      	beq.n	800dc2a <tcp_kill_timewait+0x4e>
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_kill_timewait: killing oldest TIME-WAIT PCB %p (%"S32_F")\n",
                            (void *)inactive, inactivity));
    tcp_abort(inactive);
 800dc24:	68b8      	ldr	r0, [r7, #8]
 800dc26:	f7ff f87d 	bl	800cd24 <tcp_abort>
  }
}
 800dc2a:	bf00      	nop
 800dc2c:	3710      	adds	r7, #16
 800dc2e:	46bd      	mov	sp, r7
 800dc30:	bd80      	pop	{r7, pc}
 800dc32:	bf00      	nop
 800dc34:	2000892c 	.word	0x2000892c
 800dc38:	2000891c 	.word	0x2000891c

0800dc3c <tcp_handle_closepend>:
 * now send the FIN (which failed before), the pcb might be in a state that is
 * OK for us to now free it.
 */
static void
tcp_handle_closepend(void)
{
 800dc3c:	b580      	push	{r7, lr}
 800dc3e:	b082      	sub	sp, #8
 800dc40:	af00      	add	r7, sp, #0
  struct tcp_pcb *pcb = tcp_active_pcbs;
 800dc42:	4b10      	ldr	r3, [pc, #64]	; (800dc84 <tcp_handle_closepend+0x48>)
 800dc44:	681b      	ldr	r3, [r3, #0]
 800dc46:	607b      	str	r3, [r7, #4]

  while (pcb != NULL) {
 800dc48:	e014      	b.n	800dc74 <tcp_handle_closepend+0x38>
    struct tcp_pcb *next = pcb->next;
 800dc4a:	687b      	ldr	r3, [r7, #4]
 800dc4c:	68db      	ldr	r3, [r3, #12]
 800dc4e:	603b      	str	r3, [r7, #0]
    /* send pending FIN */
    if (pcb->flags & TF_CLOSEPEND) {
 800dc50:	687b      	ldr	r3, [r7, #4]
 800dc52:	8b5b      	ldrh	r3, [r3, #26]
 800dc54:	f003 0308 	and.w	r3, r3, #8
 800dc58:	2b00      	cmp	r3, #0
 800dc5a:	d009      	beq.n	800dc70 <tcp_handle_closepend+0x34>
      LWIP_DEBUGF(TCP_DEBUG, ("tcp_handle_closepend: pending FIN\n"));
      tcp_clear_flags(pcb, TF_CLOSEPEND);
 800dc5c:	687b      	ldr	r3, [r7, #4]
 800dc5e:	8b5b      	ldrh	r3, [r3, #26]
 800dc60:	f023 0308 	bic.w	r3, r3, #8
 800dc64:	b29a      	uxth	r2, r3
 800dc66:	687b      	ldr	r3, [r7, #4]
 800dc68:	835a      	strh	r2, [r3, #26]
      tcp_close_shutdown_fin(pcb);
 800dc6a:	6878      	ldr	r0, [r7, #4]
 800dc6c:	f7fe ff06 	bl	800ca7c <tcp_close_shutdown_fin>
    }
    pcb = next;
 800dc70:	683b      	ldr	r3, [r7, #0]
 800dc72:	607b      	str	r3, [r7, #4]
  while (pcb != NULL) {
 800dc74:	687b      	ldr	r3, [r7, #4]
 800dc76:	2b00      	cmp	r3, #0
 800dc78:	d1e7      	bne.n	800dc4a <tcp_handle_closepend+0xe>
  }
}
 800dc7a:	bf00      	nop
 800dc7c:	bf00      	nop
 800dc7e:	3708      	adds	r7, #8
 800dc80:	46bd      	mov	sp, r7
 800dc82:	bd80      	pop	{r7, pc}
 800dc84:	20008928 	.word	0x20008928

0800dc88 <tcp_alloc>:
 * @param prio priority for the new pcb
 * @return a new tcp_pcb that initially is in state CLOSED
 */
struct tcp_pcb *
tcp_alloc(u8_t prio)
{
 800dc88:	b580      	push	{r7, lr}
 800dc8a:	b084      	sub	sp, #16
 800dc8c:	af00      	add	r7, sp, #0
 800dc8e:	4603      	mov	r3, r0
 800dc90:	71fb      	strb	r3, [r7, #7]
  struct tcp_pcb *pcb;

  LWIP_ASSERT_CORE_LOCKED();

  pcb = (struct tcp_pcb *)memp_malloc(MEMP_TCP_PCB);
 800dc92:	2001      	movs	r0, #1
 800dc94:	f7fd fa62 	bl	800b15c <memp_malloc>
 800dc98:	60f8      	str	r0, [r7, #12]
  if (pcb == NULL) {
 800dc9a:	68fb      	ldr	r3, [r7, #12]
 800dc9c:	2b00      	cmp	r3, #0
 800dc9e:	d126      	bne.n	800dcee <tcp_alloc+0x66>
    /* Try to send FIN for all pcbs stuck in TF_CLOSEPEND first */
    tcp_handle_closepend();
 800dca0:	f7ff ffcc 	bl	800dc3c <tcp_handle_closepend>

    /* Try killing oldest connection in TIME-WAIT. */
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_alloc: killing off oldest TIME-WAIT connection\n"));
    tcp_kill_timewait();
 800dca4:	f7ff ff9a 	bl	800dbdc <tcp_kill_timewait>
    /* Try to allocate a tcp_pcb again. */
    pcb = (struct tcp_pcb *)memp_malloc(MEMP_TCP_PCB);
 800dca8:	2001      	movs	r0, #1
 800dcaa:	f7fd fa57 	bl	800b15c <memp_malloc>
 800dcae:	60f8      	str	r0, [r7, #12]
    if (pcb == NULL) {
 800dcb0:	68fb      	ldr	r3, [r7, #12]
 800dcb2:	2b00      	cmp	r3, #0
 800dcb4:	d11b      	bne.n	800dcee <tcp_alloc+0x66>
      /* Try killing oldest connection in LAST-ACK (these wouldn't go to TIME-WAIT). */
      LWIP_DEBUGF(TCP_DEBUG, ("tcp_alloc: killing off oldest LAST-ACK connection\n"));
      tcp_kill_state(LAST_ACK);
 800dcb6:	2009      	movs	r0, #9
 800dcb8:	f7ff ff46 	bl	800db48 <tcp_kill_state>
      /* Try to allocate a tcp_pcb again. */
      pcb = (struct tcp_pcb *)memp_malloc(MEMP_TCP_PCB);
 800dcbc:	2001      	movs	r0, #1
 800dcbe:	f7fd fa4d 	bl	800b15c <memp_malloc>
 800dcc2:	60f8      	str	r0, [r7, #12]
      if (pcb == NULL) {
 800dcc4:	68fb      	ldr	r3, [r7, #12]
 800dcc6:	2b00      	cmp	r3, #0
 800dcc8:	d111      	bne.n	800dcee <tcp_alloc+0x66>
        /* Try killing oldest connection in CLOSING. */
        LWIP_DEBUGF(TCP_DEBUG, ("tcp_alloc: killing off oldest CLOSING connection\n"));
        tcp_kill_state(CLOSING);
 800dcca:	2008      	movs	r0, #8
 800dccc:	f7ff ff3c 	bl	800db48 <tcp_kill_state>
        /* Try to allocate a tcp_pcb again. */
        pcb = (struct tcp_pcb *)memp_malloc(MEMP_TCP_PCB);
 800dcd0:	2001      	movs	r0, #1
 800dcd2:	f7fd fa43 	bl	800b15c <memp_malloc>
 800dcd6:	60f8      	str	r0, [r7, #12]
        if (pcb == NULL) {
 800dcd8:	68fb      	ldr	r3, [r7, #12]
 800dcda:	2b00      	cmp	r3, #0
 800dcdc:	d107      	bne.n	800dcee <tcp_alloc+0x66>
          /* Try killing oldest active connection with lower priority than the new one. */
          LWIP_DEBUGF(TCP_DEBUG, ("tcp_alloc: killing oldest connection with prio lower than %d\n", prio));
          tcp_kill_prio(prio);
 800dcde:	79fb      	ldrb	r3, [r7, #7]
 800dce0:	4618      	mov	r0, r3
 800dce2:	f7ff fee3 	bl	800daac <tcp_kill_prio>
          /* Try to allocate a tcp_pcb again. */
          pcb = (struct tcp_pcb *)memp_malloc(MEMP_TCP_PCB);
 800dce6:	2001      	movs	r0, #1
 800dce8:	f7fd fa38 	bl	800b15c <memp_malloc>
 800dcec:	60f8      	str	r0, [r7, #12]
    if (pcb != NULL) {
      /* adjust err stats: memp_malloc failed above */
      MEMP_STATS_DEC(err, MEMP_TCP_PCB);
    }
  }
  if (pcb != NULL) {
 800dcee:	68fb      	ldr	r3, [r7, #12]
 800dcf0:	2b00      	cmp	r3, #0
 800dcf2:	d03f      	beq.n	800dd74 <tcp_alloc+0xec>
    /* zero out the whole pcb, so there is no need to initialize members to zero */
    memset(pcb, 0, sizeof(struct tcp_pcb));
 800dcf4:	229c      	movs	r2, #156	; 0x9c
 800dcf6:	2100      	movs	r1, #0
 800dcf8:	68f8      	ldr	r0, [r7, #12]
 800dcfa:	f00a fc2a 	bl	8018552 <memset>
    pcb->prio = prio;
 800dcfe:	68fb      	ldr	r3, [r7, #12]
 800dd00:	79fa      	ldrb	r2, [r7, #7]
 800dd02:	755a      	strb	r2, [r3, #21]
    pcb->snd_buf = TCP_SND_BUF;
 800dd04:	68fb      	ldr	r3, [r7, #12]
 800dd06:	f44f 6286 	mov.w	r2, #1072	; 0x430
 800dd0a:	f8a3 2064 	strh.w	r2, [r3, #100]	; 0x64
    /* Start with a window that does not need scaling. When window scaling is
       enabled and used, the window is enlarged when both sides agree on scaling. */
    pcb->rcv_wnd = pcb->rcv_ann_wnd = TCPWND_MIN16(TCP_WND);
 800dd0e:	68fb      	ldr	r3, [r7, #12]
 800dd10:	f44f 6206 	mov.w	r2, #2144	; 0x860
 800dd14:	855a      	strh	r2, [r3, #42]	; 0x2a
 800dd16:	68fb      	ldr	r3, [r7, #12]
 800dd18:	8d5a      	ldrh	r2, [r3, #42]	; 0x2a
 800dd1a:	68fb      	ldr	r3, [r7, #12]
 800dd1c:	851a      	strh	r2, [r3, #40]	; 0x28
    pcb->ttl = TCP_TTL;
 800dd1e:	68fb      	ldr	r3, [r7, #12]
 800dd20:	22ff      	movs	r2, #255	; 0xff
 800dd22:	72da      	strb	r2, [r3, #11]
    /* As initial send MSS, we use TCP_MSS but limit it to 536.
       The send MSS is updated when an MSS option is received. */
    pcb->mss = INITIAL_MSS;
 800dd24:	68fb      	ldr	r3, [r7, #12]
 800dd26:	f44f 7206 	mov.w	r2, #536	; 0x218
 800dd2a:	865a      	strh	r2, [r3, #50]	; 0x32
    pcb->rto = 3000 / TCP_SLOW_INTERVAL;
 800dd2c:	68fb      	ldr	r3, [r7, #12]
 800dd2e:	2206      	movs	r2, #6
 800dd30:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40
    pcb->sv = 3000 / TCP_SLOW_INTERVAL;
 800dd34:	68fb      	ldr	r3, [r7, #12]
 800dd36:	2206      	movs	r2, #6
 800dd38:	87da      	strh	r2, [r3, #62]	; 0x3e
    pcb->rtime = -1;
 800dd3a:	68fb      	ldr	r3, [r7, #12]
 800dd3c:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800dd40:	861a      	strh	r2, [r3, #48]	; 0x30
    pcb->cwnd = 1;
 800dd42:	68fb      	ldr	r3, [r7, #12]
 800dd44:	2201      	movs	r2, #1
 800dd46:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
    pcb->tmr = tcp_ticks;
 800dd4a:	4b0d      	ldr	r3, [pc, #52]	; (800dd80 <tcp_alloc+0xf8>)
 800dd4c:	681a      	ldr	r2, [r3, #0]
 800dd4e:	68fb      	ldr	r3, [r7, #12]
 800dd50:	621a      	str	r2, [r3, #32]
    pcb->last_timer = tcp_timer_ctr;
 800dd52:	4b0c      	ldr	r3, [pc, #48]	; (800dd84 <tcp_alloc+0xfc>)
 800dd54:	781a      	ldrb	r2, [r3, #0]
 800dd56:	68fb      	ldr	r3, [r7, #12]
 800dd58:	779a      	strb	r2, [r3, #30]
    of using the largest advertised receive window.  We've seen complications with
    receiving TCPs that use window scaling and/or window auto-tuning where the
    initial advertised window is very small and then grows rapidly once the
    connection is established. To avoid these complications, we set ssthresh to the
    largest effective cwnd (amount of in-flight data) that the sender can have. */
    pcb->ssthresh = TCP_SND_BUF;
 800dd5a:	68fb      	ldr	r3, [r7, #12]
 800dd5c:	f44f 6286 	mov.w	r2, #1072	; 0x430
 800dd60:	f8a3 204a 	strh.w	r2, [r3, #74]	; 0x4a

#if LWIP_CALLBACK_API
    pcb->recv = tcp_recv_null;
 800dd64:	68fb      	ldr	r3, [r7, #12]
 800dd66:	4a08      	ldr	r2, [pc, #32]	; (800dd88 <tcp_alloc+0x100>)
 800dd68:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
#endif /* LWIP_CALLBACK_API */

    /* Init KEEPALIVE timer */
    pcb->keep_idle  = TCP_KEEPIDLE_DEFAULT;
 800dd6c:	68fb      	ldr	r3, [r7, #12]
 800dd6e:	4a07      	ldr	r2, [pc, #28]	; (800dd8c <tcp_alloc+0x104>)
 800dd70:	f8c3 2094 	str.w	r2, [r3, #148]	; 0x94
#if LWIP_TCP_KEEPALIVE
    pcb->keep_intvl = TCP_KEEPINTVL_DEFAULT;
    pcb->keep_cnt   = TCP_KEEPCNT_DEFAULT;
#endif /* LWIP_TCP_KEEPALIVE */
  }
  return pcb;
 800dd74:	68fb      	ldr	r3, [r7, #12]
}
 800dd76:	4618      	mov	r0, r3
 800dd78:	3710      	adds	r7, #16
 800dd7a:	46bd      	mov	sp, r7
 800dd7c:	bd80      	pop	{r7, pc}
 800dd7e:	bf00      	nop
 800dd80:	2000891c 	.word	0x2000891c
 800dd84:	20008932 	.word	0x20008932
 800dd88:	0800da41 	.word	0x0800da41
 800dd8c:	006ddd00 	.word	0x006ddd00

0800dd90 <tcp_new>:
 *
 * @return a new tcp_pcb that initially is in state CLOSED
 */
struct tcp_pcb *
tcp_new(void)
{
 800dd90:	b580      	push	{r7, lr}
 800dd92:	af00      	add	r7, sp, #0
  return tcp_alloc(TCP_PRIO_NORMAL);
 800dd94:	2040      	movs	r0, #64	; 0x40
 800dd96:	f7ff ff77 	bl	800dc88 <tcp_alloc>
 800dd9a:	4603      	mov	r3, r0
}
 800dd9c:	4618      	mov	r0, r3
 800dd9e:	bd80      	pop	{r7, pc}

0800dda0 <tcp_arg>:
 * @param pcb tcp_pcb to set the callback argument
 * @param arg void pointer argument to pass to callback functions
 */
void
tcp_arg(struct tcp_pcb *pcb, void *arg)
{
 800dda0:	b480      	push	{r7}
 800dda2:	b083      	sub	sp, #12
 800dda4:	af00      	add	r7, sp, #0
 800dda6:	6078      	str	r0, [r7, #4]
 800dda8:	6039      	str	r1, [r7, #0]
  LWIP_ASSERT_CORE_LOCKED();
  /* This function is allowed to be called for both listen pcbs and
     connection pcbs. */
  if (pcb != NULL) {
 800ddaa:	687b      	ldr	r3, [r7, #4]
 800ddac:	2b00      	cmp	r3, #0
 800ddae:	d002      	beq.n	800ddb6 <tcp_arg+0x16>
    pcb->callback_arg = arg;
 800ddb0:	687b      	ldr	r3, [r7, #4]
 800ddb2:	683a      	ldr	r2, [r7, #0]
 800ddb4:	611a      	str	r2, [r3, #16]
  }
}
 800ddb6:	bf00      	nop
 800ddb8:	370c      	adds	r7, #12
 800ddba:	46bd      	mov	sp, r7
 800ddbc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ddc0:	4770      	bx	lr
	...

0800ddc4 <tcp_recv>:
 * @param pcb tcp_pcb to set the recv callback
 * @param recv callback function to call for this pcb when data is received
 */
void
tcp_recv(struct tcp_pcb *pcb, tcp_recv_fn recv)
{
 800ddc4:	b580      	push	{r7, lr}
 800ddc6:	b082      	sub	sp, #8
 800ddc8:	af00      	add	r7, sp, #0
 800ddca:	6078      	str	r0, [r7, #4]
 800ddcc:	6039      	str	r1, [r7, #0]
  LWIP_ASSERT_CORE_LOCKED();
  if (pcb != NULL) {
 800ddce:	687b      	ldr	r3, [r7, #4]
 800ddd0:	2b00      	cmp	r3, #0
 800ddd2:	d00e      	beq.n	800ddf2 <tcp_recv+0x2e>
    LWIP_ASSERT("invalid socket state for recv callback", pcb->state != LISTEN);
 800ddd4:	687b      	ldr	r3, [r7, #4]
 800ddd6:	7d1b      	ldrb	r3, [r3, #20]
 800ddd8:	2b01      	cmp	r3, #1
 800ddda:	d106      	bne.n	800ddea <tcp_recv+0x26>
 800dddc:	4b07      	ldr	r3, [pc, #28]	; (800ddfc <tcp_recv+0x38>)
 800ddde:	f240 72df 	movw	r2, #2015	; 0x7df
 800dde2:	4907      	ldr	r1, [pc, #28]	; (800de00 <tcp_recv+0x3c>)
 800dde4:	4807      	ldr	r0, [pc, #28]	; (800de04 <tcp_recv+0x40>)
 800dde6:	f00a fb4f 	bl	8018488 <iprintf>
    pcb->recv = recv;
 800ddea:	687b      	ldr	r3, [r7, #4]
 800ddec:	683a      	ldr	r2, [r7, #0]
 800ddee:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  }
}
 800ddf2:	bf00      	nop
 800ddf4:	3708      	adds	r7, #8
 800ddf6:	46bd      	mov	sp, r7
 800ddf8:	bd80      	pop	{r7, pc}
 800ddfa:	bf00      	nop
 800ddfc:	08019ea4 	.word	0x08019ea4
 800de00:	0801a440 	.word	0x0801a440
 800de04:	08019ee8 	.word	0x08019ee8

0800de08 <tcp_sent>:
 * @param pcb tcp_pcb to set the sent callback
 * @param sent callback function to call for this pcb when data is successfully sent
 */
void
tcp_sent(struct tcp_pcb *pcb, tcp_sent_fn sent)
{
 800de08:	b580      	push	{r7, lr}
 800de0a:	b082      	sub	sp, #8
 800de0c:	af00      	add	r7, sp, #0
 800de0e:	6078      	str	r0, [r7, #4]
 800de10:	6039      	str	r1, [r7, #0]
  LWIP_ASSERT_CORE_LOCKED();
  if (pcb != NULL) {
 800de12:	687b      	ldr	r3, [r7, #4]
 800de14:	2b00      	cmp	r3, #0
 800de16:	d00e      	beq.n	800de36 <tcp_sent+0x2e>
    LWIP_ASSERT("invalid socket state for sent callback", pcb->state != LISTEN);
 800de18:	687b      	ldr	r3, [r7, #4]
 800de1a:	7d1b      	ldrb	r3, [r3, #20]
 800de1c:	2b01      	cmp	r3, #1
 800de1e:	d106      	bne.n	800de2e <tcp_sent+0x26>
 800de20:	4b07      	ldr	r3, [pc, #28]	; (800de40 <tcp_sent+0x38>)
 800de22:	f240 72f3 	movw	r2, #2035	; 0x7f3
 800de26:	4907      	ldr	r1, [pc, #28]	; (800de44 <tcp_sent+0x3c>)
 800de28:	4807      	ldr	r0, [pc, #28]	; (800de48 <tcp_sent+0x40>)
 800de2a:	f00a fb2d 	bl	8018488 <iprintf>
    pcb->sent = sent;
 800de2e:	687b      	ldr	r3, [r7, #4]
 800de30:	683a      	ldr	r2, [r7, #0]
 800de32:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
  }
}
 800de36:	bf00      	nop
 800de38:	3708      	adds	r7, #8
 800de3a:	46bd      	mov	sp, r7
 800de3c:	bd80      	pop	{r7, pc}
 800de3e:	bf00      	nop
 800de40:	08019ea4 	.word	0x08019ea4
 800de44:	0801a468 	.word	0x0801a468
 800de48:	08019ee8 	.word	0x08019ee8

0800de4c <tcp_err>:
 * @param err callback function to call for this pcb when a fatal error
 *        has occurred on the connection
 */
void
tcp_err(struct tcp_pcb *pcb, tcp_err_fn err)
{
 800de4c:	b580      	push	{r7, lr}
 800de4e:	b082      	sub	sp, #8
 800de50:	af00      	add	r7, sp, #0
 800de52:	6078      	str	r0, [r7, #4]
 800de54:	6039      	str	r1, [r7, #0]
  LWIP_ASSERT_CORE_LOCKED();
  if (pcb != NULL) {
 800de56:	687b      	ldr	r3, [r7, #4]
 800de58:	2b00      	cmp	r3, #0
 800de5a:	d00e      	beq.n	800de7a <tcp_err+0x2e>
    LWIP_ASSERT("invalid socket state for err callback", pcb->state != LISTEN);
 800de5c:	687b      	ldr	r3, [r7, #4]
 800de5e:	7d1b      	ldrb	r3, [r3, #20]
 800de60:	2b01      	cmp	r3, #1
 800de62:	d106      	bne.n	800de72 <tcp_err+0x26>
 800de64:	4b07      	ldr	r3, [pc, #28]	; (800de84 <tcp_err+0x38>)
 800de66:	f640 020d 	movw	r2, #2061	; 0x80d
 800de6a:	4907      	ldr	r1, [pc, #28]	; (800de88 <tcp_err+0x3c>)
 800de6c:	4807      	ldr	r0, [pc, #28]	; (800de8c <tcp_err+0x40>)
 800de6e:	f00a fb0b 	bl	8018488 <iprintf>
    pcb->errf = err;
 800de72:	687b      	ldr	r3, [r7, #4]
 800de74:	683a      	ldr	r2, [r7, #0]
 800de76:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
  }
}
 800de7a:	bf00      	nop
 800de7c:	3708      	adds	r7, #8
 800de7e:	46bd      	mov	sp, r7
 800de80:	bd80      	pop	{r7, pc}
 800de82:	bf00      	nop
 800de84:	08019ea4 	.word	0x08019ea4
 800de88:	0801a490 	.word	0x0801a490
 800de8c:	08019ee8 	.word	0x08019ee8

0800de90 <tcp_poll>:
 * the application may use the polling functionality to call tcp_write()
 * again when the connection has been idle for a while.
 */
void
tcp_poll(struct tcp_pcb *pcb, tcp_poll_fn poll, u8_t interval)
{
 800de90:	b580      	push	{r7, lr}
 800de92:	b084      	sub	sp, #16
 800de94:	af00      	add	r7, sp, #0
 800de96:	60f8      	str	r0, [r7, #12]
 800de98:	60b9      	str	r1, [r7, #8]
 800de9a:	4613      	mov	r3, r2
 800de9c:	71fb      	strb	r3, [r7, #7]
  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("tcp_poll: invalid pcb", pcb != NULL, return);
 800de9e:	68fb      	ldr	r3, [r7, #12]
 800dea0:	2b00      	cmp	r3, #0
 800dea2:	d107      	bne.n	800deb4 <tcp_poll+0x24>
 800dea4:	4b0e      	ldr	r3, [pc, #56]	; (800dee0 <tcp_poll+0x50>)
 800dea6:	f640 023d 	movw	r2, #2109	; 0x83d
 800deaa:	490e      	ldr	r1, [pc, #56]	; (800dee4 <tcp_poll+0x54>)
 800deac:	480e      	ldr	r0, [pc, #56]	; (800dee8 <tcp_poll+0x58>)
 800deae:	f00a faeb 	bl	8018488 <iprintf>
 800deb2:	e011      	b.n	800ded8 <tcp_poll+0x48>
  LWIP_ASSERT("invalid socket state for poll", pcb->state != LISTEN);
 800deb4:	68fb      	ldr	r3, [r7, #12]
 800deb6:	7d1b      	ldrb	r3, [r3, #20]
 800deb8:	2b01      	cmp	r3, #1
 800deba:	d106      	bne.n	800deca <tcp_poll+0x3a>
 800debc:	4b08      	ldr	r3, [pc, #32]	; (800dee0 <tcp_poll+0x50>)
 800debe:	f640 023e 	movw	r2, #2110	; 0x83e
 800dec2:	490a      	ldr	r1, [pc, #40]	; (800deec <tcp_poll+0x5c>)
 800dec4:	4808      	ldr	r0, [pc, #32]	; (800dee8 <tcp_poll+0x58>)
 800dec6:	f00a fadf 	bl	8018488 <iprintf>

#if LWIP_CALLBACK_API
  pcb->poll = poll;
 800deca:	68fb      	ldr	r3, [r7, #12]
 800decc:	68ba      	ldr	r2, [r7, #8]
 800dece:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
#else /* LWIP_CALLBACK_API */
  LWIP_UNUSED_ARG(poll);
#endif /* LWIP_CALLBACK_API */
  pcb->pollinterval = interval;
 800ded2:	68fb      	ldr	r3, [r7, #12]
 800ded4:	79fa      	ldrb	r2, [r7, #7]
 800ded6:	775a      	strb	r2, [r3, #29]
}
 800ded8:	3710      	adds	r7, #16
 800deda:	46bd      	mov	sp, r7
 800dedc:	bd80      	pop	{r7, pc}
 800dede:	bf00      	nop
 800dee0:	08019ea4 	.word	0x08019ea4
 800dee4:	0801a4b8 	.word	0x0801a4b8
 800dee8:	08019ee8 	.word	0x08019ee8
 800deec:	0801a4d0 	.word	0x0801a4d0

0800def0 <tcp_pcb_purge>:
 *
 * @param pcb tcp_pcb to purge. The pcb itself is not deallocated!
 */
void
tcp_pcb_purge(struct tcp_pcb *pcb)
{
 800def0:	b580      	push	{r7, lr}
 800def2:	b082      	sub	sp, #8
 800def4:	af00      	add	r7, sp, #0
 800def6:	6078      	str	r0, [r7, #4]
  LWIP_ERROR("tcp_pcb_purge: invalid pcb", pcb != NULL, return);
 800def8:	687b      	ldr	r3, [r7, #4]
 800defa:	2b00      	cmp	r3, #0
 800defc:	d107      	bne.n	800df0e <tcp_pcb_purge+0x1e>
 800defe:	4b21      	ldr	r3, [pc, #132]	; (800df84 <tcp_pcb_purge+0x94>)
 800df00:	f640 0251 	movw	r2, #2129	; 0x851
 800df04:	4920      	ldr	r1, [pc, #128]	; (800df88 <tcp_pcb_purge+0x98>)
 800df06:	4821      	ldr	r0, [pc, #132]	; (800df8c <tcp_pcb_purge+0x9c>)
 800df08:	f00a fabe 	bl	8018488 <iprintf>
 800df0c:	e037      	b.n	800df7e <tcp_pcb_purge+0x8e>

  if (pcb->state != CLOSED &&
 800df0e:	687b      	ldr	r3, [r7, #4]
 800df10:	7d1b      	ldrb	r3, [r3, #20]
 800df12:	2b00      	cmp	r3, #0
 800df14:	d033      	beq.n	800df7e <tcp_pcb_purge+0x8e>
      pcb->state != TIME_WAIT &&
 800df16:	687b      	ldr	r3, [r7, #4]
 800df18:	7d1b      	ldrb	r3, [r3, #20]
  if (pcb->state != CLOSED &&
 800df1a:	2b0a      	cmp	r3, #10
 800df1c:	d02f      	beq.n	800df7e <tcp_pcb_purge+0x8e>
      pcb->state != LISTEN) {
 800df1e:	687b      	ldr	r3, [r7, #4]
 800df20:	7d1b      	ldrb	r3, [r3, #20]
      pcb->state != TIME_WAIT &&
 800df22:	2b01      	cmp	r3, #1
 800df24:	d02b      	beq.n	800df7e <tcp_pcb_purge+0x8e>

    LWIP_DEBUGF(TCP_DEBUG, ("tcp_pcb_purge\n"));

    tcp_backlog_accepted(pcb);

    if (pcb->refused_data != NULL) {
 800df26:	687b      	ldr	r3, [r7, #4]
 800df28:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800df2a:	2b00      	cmp	r3, #0
 800df2c:	d007      	beq.n	800df3e <tcp_pcb_purge+0x4e>
      LWIP_DEBUGF(TCP_DEBUG, ("tcp_pcb_purge: data left on ->refused_data\n"));
      pbuf_free(pcb->refused_data);
 800df2e:	687b      	ldr	r3, [r7, #4]
 800df30:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800df32:	4618      	mov	r0, r3
 800df34:	f7fe f804 	bl	800bf40 <pbuf_free>
      pcb->refused_data = NULL;
 800df38:	687b      	ldr	r3, [r7, #4]
 800df3a:	2200      	movs	r2, #0
 800df3c:	679a      	str	r2, [r3, #120]	; 0x78
    }
    if (pcb->unacked != NULL) {
      LWIP_DEBUGF(TCP_DEBUG, ("tcp_pcb_purge: data left on ->unacked\n"));
    }
#if TCP_QUEUE_OOSEQ
    if (pcb->ooseq != NULL) {
 800df3e:	687b      	ldr	r3, [r7, #4]
 800df40:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800df42:	2b00      	cmp	r3, #0
 800df44:	d002      	beq.n	800df4c <tcp_pcb_purge+0x5c>
      LWIP_DEBUGF(TCP_DEBUG, ("tcp_pcb_purge: data left on ->ooseq\n"));
      tcp_free_ooseq(pcb);
 800df46:	6878      	ldr	r0, [r7, #4]
 800df48:	f000 f986 	bl	800e258 <tcp_free_ooseq>
    }
#endif /* TCP_QUEUE_OOSEQ */

    /* Stop the retransmission timer as it will expect data on unacked
       queue if it fires */
    pcb->rtime = -1;
 800df4c:	687b      	ldr	r3, [r7, #4]
 800df4e:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800df52:	861a      	strh	r2, [r3, #48]	; 0x30

    tcp_segs_free(pcb->unsent);
 800df54:	687b      	ldr	r3, [r7, #4]
 800df56:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800df58:	4618      	mov	r0, r3
 800df5a:	f7ff fd17 	bl	800d98c <tcp_segs_free>
    tcp_segs_free(pcb->unacked);
 800df5e:	687b      	ldr	r3, [r7, #4]
 800df60:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800df62:	4618      	mov	r0, r3
 800df64:	f7ff fd12 	bl	800d98c <tcp_segs_free>
    pcb->unacked = pcb->unsent = NULL;
 800df68:	687b      	ldr	r3, [r7, #4]
 800df6a:	2200      	movs	r2, #0
 800df6c:	66da      	str	r2, [r3, #108]	; 0x6c
 800df6e:	687b      	ldr	r3, [r7, #4]
 800df70:	6eda      	ldr	r2, [r3, #108]	; 0x6c
 800df72:	687b      	ldr	r3, [r7, #4]
 800df74:	671a      	str	r2, [r3, #112]	; 0x70
#if TCP_OVERSIZE
    pcb->unsent_oversize = 0;
 800df76:	687b      	ldr	r3, [r7, #4]
 800df78:	2200      	movs	r2, #0
 800df7a:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
#endif /* TCP_OVERSIZE */
  }
}
 800df7e:	3708      	adds	r7, #8
 800df80:	46bd      	mov	sp, r7
 800df82:	bd80      	pop	{r7, pc}
 800df84:	08019ea4 	.word	0x08019ea4
 800df88:	0801a4f0 	.word	0x0801a4f0
 800df8c:	08019ee8 	.word	0x08019ee8

0800df90 <tcp_pcb_remove>:
 * @param pcblist PCB list to purge.
 * @param pcb tcp_pcb to purge. The pcb itself is NOT deallocated!
 */
void
tcp_pcb_remove(struct tcp_pcb **pcblist, struct tcp_pcb *pcb)
{
 800df90:	b580      	push	{r7, lr}
 800df92:	b084      	sub	sp, #16
 800df94:	af00      	add	r7, sp, #0
 800df96:	6078      	str	r0, [r7, #4]
 800df98:	6039      	str	r1, [r7, #0]
  LWIP_ASSERT("tcp_pcb_remove: invalid pcb", pcb != NULL);
 800df9a:	683b      	ldr	r3, [r7, #0]
 800df9c:	2b00      	cmp	r3, #0
 800df9e:	d106      	bne.n	800dfae <tcp_pcb_remove+0x1e>
 800dfa0:	4b3e      	ldr	r3, [pc, #248]	; (800e09c <tcp_pcb_remove+0x10c>)
 800dfa2:	f640 0283 	movw	r2, #2179	; 0x883
 800dfa6:	493e      	ldr	r1, [pc, #248]	; (800e0a0 <tcp_pcb_remove+0x110>)
 800dfa8:	483e      	ldr	r0, [pc, #248]	; (800e0a4 <tcp_pcb_remove+0x114>)
 800dfaa:	f00a fa6d 	bl	8018488 <iprintf>
  LWIP_ASSERT("tcp_pcb_remove: invalid pcblist", pcblist != NULL);
 800dfae:	687b      	ldr	r3, [r7, #4]
 800dfb0:	2b00      	cmp	r3, #0
 800dfb2:	d106      	bne.n	800dfc2 <tcp_pcb_remove+0x32>
 800dfb4:	4b39      	ldr	r3, [pc, #228]	; (800e09c <tcp_pcb_remove+0x10c>)
 800dfb6:	f640 0284 	movw	r2, #2180	; 0x884
 800dfba:	493b      	ldr	r1, [pc, #236]	; (800e0a8 <tcp_pcb_remove+0x118>)
 800dfbc:	4839      	ldr	r0, [pc, #228]	; (800e0a4 <tcp_pcb_remove+0x114>)
 800dfbe:	f00a fa63 	bl	8018488 <iprintf>

  TCP_RMV(pcblist, pcb);
 800dfc2:	687b      	ldr	r3, [r7, #4]
 800dfc4:	681b      	ldr	r3, [r3, #0]
 800dfc6:	683a      	ldr	r2, [r7, #0]
 800dfc8:	429a      	cmp	r2, r3
 800dfca:	d105      	bne.n	800dfd8 <tcp_pcb_remove+0x48>
 800dfcc:	687b      	ldr	r3, [r7, #4]
 800dfce:	681b      	ldr	r3, [r3, #0]
 800dfd0:	68da      	ldr	r2, [r3, #12]
 800dfd2:	687b      	ldr	r3, [r7, #4]
 800dfd4:	601a      	str	r2, [r3, #0]
 800dfd6:	e013      	b.n	800e000 <tcp_pcb_remove+0x70>
 800dfd8:	687b      	ldr	r3, [r7, #4]
 800dfda:	681b      	ldr	r3, [r3, #0]
 800dfdc:	60fb      	str	r3, [r7, #12]
 800dfde:	e00c      	b.n	800dffa <tcp_pcb_remove+0x6a>
 800dfe0:	68fb      	ldr	r3, [r7, #12]
 800dfe2:	68db      	ldr	r3, [r3, #12]
 800dfe4:	683a      	ldr	r2, [r7, #0]
 800dfe6:	429a      	cmp	r2, r3
 800dfe8:	d104      	bne.n	800dff4 <tcp_pcb_remove+0x64>
 800dfea:	683b      	ldr	r3, [r7, #0]
 800dfec:	68da      	ldr	r2, [r3, #12]
 800dfee:	68fb      	ldr	r3, [r7, #12]
 800dff0:	60da      	str	r2, [r3, #12]
 800dff2:	e005      	b.n	800e000 <tcp_pcb_remove+0x70>
 800dff4:	68fb      	ldr	r3, [r7, #12]
 800dff6:	68db      	ldr	r3, [r3, #12]
 800dff8:	60fb      	str	r3, [r7, #12]
 800dffa:	68fb      	ldr	r3, [r7, #12]
 800dffc:	2b00      	cmp	r3, #0
 800dffe:	d1ef      	bne.n	800dfe0 <tcp_pcb_remove+0x50>
 800e000:	683b      	ldr	r3, [r7, #0]
 800e002:	2200      	movs	r2, #0
 800e004:	60da      	str	r2, [r3, #12]

  tcp_pcb_purge(pcb);
 800e006:	6838      	ldr	r0, [r7, #0]
 800e008:	f7ff ff72 	bl	800def0 <tcp_pcb_purge>

  /* if there is an outstanding delayed ACKs, send it */
  if ((pcb->state != TIME_WAIT) &&
 800e00c:	683b      	ldr	r3, [r7, #0]
 800e00e:	7d1b      	ldrb	r3, [r3, #20]
 800e010:	2b0a      	cmp	r3, #10
 800e012:	d013      	beq.n	800e03c <tcp_pcb_remove+0xac>
      (pcb->state != LISTEN) &&
 800e014:	683b      	ldr	r3, [r7, #0]
 800e016:	7d1b      	ldrb	r3, [r3, #20]
  if ((pcb->state != TIME_WAIT) &&
 800e018:	2b01      	cmp	r3, #1
 800e01a:	d00f      	beq.n	800e03c <tcp_pcb_remove+0xac>
      (pcb->flags & TF_ACK_DELAY)) {
 800e01c:	683b      	ldr	r3, [r7, #0]
 800e01e:	8b5b      	ldrh	r3, [r3, #26]
 800e020:	f003 0301 	and.w	r3, r3, #1
      (pcb->state != LISTEN) &&
 800e024:	2b00      	cmp	r3, #0
 800e026:	d009      	beq.n	800e03c <tcp_pcb_remove+0xac>
    tcp_ack_now(pcb);
 800e028:	683b      	ldr	r3, [r7, #0]
 800e02a:	8b5b      	ldrh	r3, [r3, #26]
 800e02c:	f043 0302 	orr.w	r3, r3, #2
 800e030:	b29a      	uxth	r2, r3
 800e032:	683b      	ldr	r3, [r7, #0]
 800e034:	835a      	strh	r2, [r3, #26]
    tcp_output(pcb);
 800e036:	6838      	ldr	r0, [r7, #0]
 800e038:	f003 fbc6 	bl	80117c8 <tcp_output>
  }

  if (pcb->state != LISTEN) {
 800e03c:	683b      	ldr	r3, [r7, #0]
 800e03e:	7d1b      	ldrb	r3, [r3, #20]
 800e040:	2b01      	cmp	r3, #1
 800e042:	d020      	beq.n	800e086 <tcp_pcb_remove+0xf6>
    LWIP_ASSERT("unsent segments leaking", pcb->unsent == NULL);
 800e044:	683b      	ldr	r3, [r7, #0]
 800e046:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800e048:	2b00      	cmp	r3, #0
 800e04a:	d006      	beq.n	800e05a <tcp_pcb_remove+0xca>
 800e04c:	4b13      	ldr	r3, [pc, #76]	; (800e09c <tcp_pcb_remove+0x10c>)
 800e04e:	f640 0293 	movw	r2, #2195	; 0x893
 800e052:	4916      	ldr	r1, [pc, #88]	; (800e0ac <tcp_pcb_remove+0x11c>)
 800e054:	4813      	ldr	r0, [pc, #76]	; (800e0a4 <tcp_pcb_remove+0x114>)
 800e056:	f00a fa17 	bl	8018488 <iprintf>
    LWIP_ASSERT("unacked segments leaking", pcb->unacked == NULL);
 800e05a:	683b      	ldr	r3, [r7, #0]
 800e05c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800e05e:	2b00      	cmp	r3, #0
 800e060:	d006      	beq.n	800e070 <tcp_pcb_remove+0xe0>
 800e062:	4b0e      	ldr	r3, [pc, #56]	; (800e09c <tcp_pcb_remove+0x10c>)
 800e064:	f640 0294 	movw	r2, #2196	; 0x894
 800e068:	4911      	ldr	r1, [pc, #68]	; (800e0b0 <tcp_pcb_remove+0x120>)
 800e06a:	480e      	ldr	r0, [pc, #56]	; (800e0a4 <tcp_pcb_remove+0x114>)
 800e06c:	f00a fa0c 	bl	8018488 <iprintf>
#if TCP_QUEUE_OOSEQ
    LWIP_ASSERT("ooseq segments leaking", pcb->ooseq == NULL);
 800e070:	683b      	ldr	r3, [r7, #0]
 800e072:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800e074:	2b00      	cmp	r3, #0
 800e076:	d006      	beq.n	800e086 <tcp_pcb_remove+0xf6>
 800e078:	4b08      	ldr	r3, [pc, #32]	; (800e09c <tcp_pcb_remove+0x10c>)
 800e07a:	f640 0296 	movw	r2, #2198	; 0x896
 800e07e:	490d      	ldr	r1, [pc, #52]	; (800e0b4 <tcp_pcb_remove+0x124>)
 800e080:	4808      	ldr	r0, [pc, #32]	; (800e0a4 <tcp_pcb_remove+0x114>)
 800e082:	f00a fa01 	bl	8018488 <iprintf>
#endif /* TCP_QUEUE_OOSEQ */
  }

  pcb->state = CLOSED;
 800e086:	683b      	ldr	r3, [r7, #0]
 800e088:	2200      	movs	r2, #0
 800e08a:	751a      	strb	r2, [r3, #20]
  /* reset the local port to prevent the pcb from being 'bound' */
  pcb->local_port = 0;
 800e08c:	683b      	ldr	r3, [r7, #0]
 800e08e:	2200      	movs	r2, #0
 800e090:	82da      	strh	r2, [r3, #22]

  LWIP_ASSERT("tcp_pcb_remove: tcp_pcbs_sane()", tcp_pcbs_sane());
}
 800e092:	bf00      	nop
 800e094:	3710      	adds	r7, #16
 800e096:	46bd      	mov	sp, r7
 800e098:	bd80      	pop	{r7, pc}
 800e09a:	bf00      	nop
 800e09c:	08019ea4 	.word	0x08019ea4
 800e0a0:	0801a50c 	.word	0x0801a50c
 800e0a4:	08019ee8 	.word	0x08019ee8
 800e0a8:	0801a528 	.word	0x0801a528
 800e0ac:	0801a548 	.word	0x0801a548
 800e0b0:	0801a560 	.word	0x0801a560
 800e0b4:	0801a57c 	.word	0x0801a57c

0800e0b8 <tcp_next_iss>:
 *
 * @return u32_t pseudo random sequence number
 */
u32_t
tcp_next_iss(struct tcp_pcb *pcb)
{
 800e0b8:	b580      	push	{r7, lr}
 800e0ba:	b082      	sub	sp, #8
 800e0bc:	af00      	add	r7, sp, #0
 800e0be:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_next_iss: invalid pcb", pcb != NULL);
  return LWIP_HOOK_TCP_ISN(&pcb->local_ip, pcb->local_port, &pcb->remote_ip, pcb->remote_port);
#else /* LWIP_HOOK_TCP_ISN */
  static u32_t iss = 6510;

  LWIP_ASSERT("tcp_next_iss: invalid pcb", pcb != NULL);
 800e0c0:	687b      	ldr	r3, [r7, #4]
 800e0c2:	2b00      	cmp	r3, #0
 800e0c4:	d106      	bne.n	800e0d4 <tcp_next_iss+0x1c>
 800e0c6:	4b0a      	ldr	r3, [pc, #40]	; (800e0f0 <tcp_next_iss+0x38>)
 800e0c8:	f640 02af 	movw	r2, #2223	; 0x8af
 800e0cc:	4909      	ldr	r1, [pc, #36]	; (800e0f4 <tcp_next_iss+0x3c>)
 800e0ce:	480a      	ldr	r0, [pc, #40]	; (800e0f8 <tcp_next_iss+0x40>)
 800e0d0:	f00a f9da 	bl	8018488 <iprintf>
  LWIP_UNUSED_ARG(pcb);

  iss += tcp_ticks;       /* XXX */
 800e0d4:	4b09      	ldr	r3, [pc, #36]	; (800e0fc <tcp_next_iss+0x44>)
 800e0d6:	681a      	ldr	r2, [r3, #0]
 800e0d8:	4b09      	ldr	r3, [pc, #36]	; (800e100 <tcp_next_iss+0x48>)
 800e0da:	681b      	ldr	r3, [r3, #0]
 800e0dc:	4413      	add	r3, r2
 800e0de:	4a07      	ldr	r2, [pc, #28]	; (800e0fc <tcp_next_iss+0x44>)
 800e0e0:	6013      	str	r3, [r2, #0]
  return iss;
 800e0e2:	4b06      	ldr	r3, [pc, #24]	; (800e0fc <tcp_next_iss+0x44>)
 800e0e4:	681b      	ldr	r3, [r3, #0]
#endif /* LWIP_HOOK_TCP_ISN */
}
 800e0e6:	4618      	mov	r0, r3
 800e0e8:	3708      	adds	r7, #8
 800e0ea:	46bd      	mov	sp, r7
 800e0ec:	bd80      	pop	{r7, pc}
 800e0ee:	bf00      	nop
 800e0f0:	08019ea4 	.word	0x08019ea4
 800e0f4:	0801a594 	.word	0x0801a594
 800e0f8:	08019ee8 	.word	0x08019ee8
 800e0fc:	200000ac 	.word	0x200000ac
 800e100:	2000891c 	.word	0x2000891c

0800e104 <tcp_eff_send_mss_netif>:
 * by calculating the minimum of TCP_MSS and the mtu (if set) of the target
 * netif (if not NULL).
 */
u16_t
tcp_eff_send_mss_netif(u16_t sendmss, struct netif *outif, const ip_addr_t *dest)
{
 800e104:	b580      	push	{r7, lr}
 800e106:	b086      	sub	sp, #24
 800e108:	af00      	add	r7, sp, #0
 800e10a:	4603      	mov	r3, r0
 800e10c:	60b9      	str	r1, [r7, #8]
 800e10e:	607a      	str	r2, [r7, #4]
 800e110:	81fb      	strh	r3, [r7, #14]
  u16_t mss_s;
  u16_t mtu;

  LWIP_UNUSED_ARG(dest); /* in case IPv6 is disabled */

  LWIP_ASSERT("tcp_eff_send_mss_netif: invalid dst_ip", dest != NULL);
 800e112:	687b      	ldr	r3, [r7, #4]
 800e114:	2b00      	cmp	r3, #0
 800e116:	d106      	bne.n	800e126 <tcp_eff_send_mss_netif+0x22>
 800e118:	4b14      	ldr	r3, [pc, #80]	; (800e16c <tcp_eff_send_mss_netif+0x68>)
 800e11a:	f640 02c5 	movw	r2, #2245	; 0x8c5
 800e11e:	4914      	ldr	r1, [pc, #80]	; (800e170 <tcp_eff_send_mss_netif+0x6c>)
 800e120:	4814      	ldr	r0, [pc, #80]	; (800e174 <tcp_eff_send_mss_netif+0x70>)
 800e122:	f00a f9b1 	bl	8018488 <iprintf>
  else
#endif /* LWIP_IPV4 */
#endif /* LWIP_IPV6 */
#if LWIP_IPV4
  {
    if (outif == NULL) {
 800e126:	68bb      	ldr	r3, [r7, #8]
 800e128:	2b00      	cmp	r3, #0
 800e12a:	d101      	bne.n	800e130 <tcp_eff_send_mss_netif+0x2c>
      return sendmss;
 800e12c:	89fb      	ldrh	r3, [r7, #14]
 800e12e:	e019      	b.n	800e164 <tcp_eff_send_mss_netif+0x60>
    }
    mtu = outif->mtu;
 800e130:	68bb      	ldr	r3, [r7, #8]
 800e132:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800e134:	82fb      	strh	r3, [r7, #22]
  }
#endif /* LWIP_IPV4 */

  if (mtu != 0) {
 800e136:	8afb      	ldrh	r3, [r7, #22]
 800e138:	2b00      	cmp	r3, #0
 800e13a:	d012      	beq.n	800e162 <tcp_eff_send_mss_netif+0x5e>
    else
#endif /* LWIP_IPV4 */
#endif /* LWIP_IPV6 */
#if LWIP_IPV4
    {
      offset = IP_HLEN + TCP_HLEN;
 800e13c:	2328      	movs	r3, #40	; 0x28
 800e13e:	82bb      	strh	r3, [r7, #20]
    }
#endif /* LWIP_IPV4 */
    mss_s = (mtu > offset) ? (u16_t)(mtu - offset) : 0;
 800e140:	8afa      	ldrh	r2, [r7, #22]
 800e142:	8abb      	ldrh	r3, [r7, #20]
 800e144:	429a      	cmp	r2, r3
 800e146:	d904      	bls.n	800e152 <tcp_eff_send_mss_netif+0x4e>
 800e148:	8afa      	ldrh	r2, [r7, #22]
 800e14a:	8abb      	ldrh	r3, [r7, #20]
 800e14c:	1ad3      	subs	r3, r2, r3
 800e14e:	b29b      	uxth	r3, r3
 800e150:	e000      	b.n	800e154 <tcp_eff_send_mss_netif+0x50>
 800e152:	2300      	movs	r3, #0
 800e154:	827b      	strh	r3, [r7, #18]
    /* RFC 1122, chap 4.2.2.6:
     * Eff.snd.MSS = min(SendMSS+20, MMS_S) - TCPhdrsize - IPoptionsize
     * We correct for TCP options in tcp_write(), and don't support IP options.
     */
    sendmss = LWIP_MIN(sendmss, mss_s);
 800e156:	8a7a      	ldrh	r2, [r7, #18]
 800e158:	89fb      	ldrh	r3, [r7, #14]
 800e15a:	4293      	cmp	r3, r2
 800e15c:	bf28      	it	cs
 800e15e:	4613      	movcs	r3, r2
 800e160:	81fb      	strh	r3, [r7, #14]
  }
  return sendmss;
 800e162:	89fb      	ldrh	r3, [r7, #14]
}
 800e164:	4618      	mov	r0, r3
 800e166:	3718      	adds	r7, #24
 800e168:	46bd      	mov	sp, r7
 800e16a:	bd80      	pop	{r7, pc}
 800e16c:	08019ea4 	.word	0x08019ea4
 800e170:	0801a5b0 	.word	0x0801a5b0
 800e174:	08019ee8 	.word	0x08019ee8

0800e178 <tcp_netif_ip_addr_changed_pcblist>:
#endif /* TCP_CALCULATE_EFF_SEND_MSS */

/** Helper function for tcp_netif_ip_addr_changed() that iterates a pcb list */
static void
tcp_netif_ip_addr_changed_pcblist(const ip_addr_t *old_addr, struct tcp_pcb *pcb_list)
{
 800e178:	b580      	push	{r7, lr}
 800e17a:	b084      	sub	sp, #16
 800e17c:	af00      	add	r7, sp, #0
 800e17e:	6078      	str	r0, [r7, #4]
 800e180:	6039      	str	r1, [r7, #0]
  struct tcp_pcb *pcb;
  pcb = pcb_list;
 800e182:	683b      	ldr	r3, [r7, #0]
 800e184:	60fb      	str	r3, [r7, #12]

  LWIP_ASSERT("tcp_netif_ip_addr_changed_pcblist: invalid old_addr", old_addr != NULL);
 800e186:	687b      	ldr	r3, [r7, #4]
 800e188:	2b00      	cmp	r3, #0
 800e18a:	d119      	bne.n	800e1c0 <tcp_netif_ip_addr_changed_pcblist+0x48>
 800e18c:	4b10      	ldr	r3, [pc, #64]	; (800e1d0 <tcp_netif_ip_addr_changed_pcblist+0x58>)
 800e18e:	f44f 6210 	mov.w	r2, #2304	; 0x900
 800e192:	4910      	ldr	r1, [pc, #64]	; (800e1d4 <tcp_netif_ip_addr_changed_pcblist+0x5c>)
 800e194:	4810      	ldr	r0, [pc, #64]	; (800e1d8 <tcp_netif_ip_addr_changed_pcblist+0x60>)
 800e196:	f00a f977 	bl	8018488 <iprintf>

  while (pcb != NULL) {
 800e19a:	e011      	b.n	800e1c0 <tcp_netif_ip_addr_changed_pcblist+0x48>
    /* PCB bound to current local interface address? */
    if (ip_addr_cmp(&pcb->local_ip, old_addr)
 800e19c:	68fb      	ldr	r3, [r7, #12]
 800e19e:	681a      	ldr	r2, [r3, #0]
 800e1a0:	687b      	ldr	r3, [r7, #4]
 800e1a2:	681b      	ldr	r3, [r3, #0]
 800e1a4:	429a      	cmp	r2, r3
 800e1a6:	d108      	bne.n	800e1ba <tcp_netif_ip_addr_changed_pcblist+0x42>
        /* connections to link-local addresses must persist (RFC3927 ch. 1.9) */
        && (!IP_IS_V4_VAL(pcb->local_ip) || !ip4_addr_islinklocal(ip_2_ip4(&pcb->local_ip)))
#endif /* LWIP_AUTOIP */
       ) {
      /* this connection must be aborted */
      struct tcp_pcb *next = pcb->next;
 800e1a8:	68fb      	ldr	r3, [r7, #12]
 800e1aa:	68db      	ldr	r3, [r3, #12]
 800e1ac:	60bb      	str	r3, [r7, #8]
      LWIP_DEBUGF(NETIF_DEBUG | LWIP_DBG_STATE, ("netif_set_ipaddr: aborting TCP pcb %p\n", (void *)pcb));
      tcp_abort(pcb);
 800e1ae:	68f8      	ldr	r0, [r7, #12]
 800e1b0:	f7fe fdb8 	bl	800cd24 <tcp_abort>
      pcb = next;
 800e1b4:	68bb      	ldr	r3, [r7, #8]
 800e1b6:	60fb      	str	r3, [r7, #12]
 800e1b8:	e002      	b.n	800e1c0 <tcp_netif_ip_addr_changed_pcblist+0x48>
    } else {
      pcb = pcb->next;
 800e1ba:	68fb      	ldr	r3, [r7, #12]
 800e1bc:	68db      	ldr	r3, [r3, #12]
 800e1be:	60fb      	str	r3, [r7, #12]
  while (pcb != NULL) {
 800e1c0:	68fb      	ldr	r3, [r7, #12]
 800e1c2:	2b00      	cmp	r3, #0
 800e1c4:	d1ea      	bne.n	800e19c <tcp_netif_ip_addr_changed_pcblist+0x24>
    }
  }
}
 800e1c6:	bf00      	nop
 800e1c8:	bf00      	nop
 800e1ca:	3710      	adds	r7, #16
 800e1cc:	46bd      	mov	sp, r7
 800e1ce:	bd80      	pop	{r7, pc}
 800e1d0:	08019ea4 	.word	0x08019ea4
 800e1d4:	0801a5d8 	.word	0x0801a5d8
 800e1d8:	08019ee8 	.word	0x08019ee8

0800e1dc <tcp_netif_ip_addr_changed>:
 * @param old_addr IP address of the netif before change
 * @param new_addr IP address of the netif after change or NULL if netif has been removed
 */
void
tcp_netif_ip_addr_changed(const ip_addr_t *old_addr, const ip_addr_t *new_addr)
{
 800e1dc:	b580      	push	{r7, lr}
 800e1de:	b084      	sub	sp, #16
 800e1e0:	af00      	add	r7, sp, #0
 800e1e2:	6078      	str	r0, [r7, #4]
 800e1e4:	6039      	str	r1, [r7, #0]
  struct tcp_pcb_listen *lpcb;

  if (!ip_addr_isany(old_addr)) {
 800e1e6:	687b      	ldr	r3, [r7, #4]
 800e1e8:	2b00      	cmp	r3, #0
 800e1ea:	d02a      	beq.n	800e242 <tcp_netif_ip_addr_changed+0x66>
 800e1ec:	687b      	ldr	r3, [r7, #4]
 800e1ee:	681b      	ldr	r3, [r3, #0]
 800e1f0:	2b00      	cmp	r3, #0
 800e1f2:	d026      	beq.n	800e242 <tcp_netif_ip_addr_changed+0x66>
    tcp_netif_ip_addr_changed_pcblist(old_addr, tcp_active_pcbs);
 800e1f4:	4b15      	ldr	r3, [pc, #84]	; (800e24c <tcp_netif_ip_addr_changed+0x70>)
 800e1f6:	681b      	ldr	r3, [r3, #0]
 800e1f8:	4619      	mov	r1, r3
 800e1fa:	6878      	ldr	r0, [r7, #4]
 800e1fc:	f7ff ffbc 	bl	800e178 <tcp_netif_ip_addr_changed_pcblist>
    tcp_netif_ip_addr_changed_pcblist(old_addr, tcp_bound_pcbs);
 800e200:	4b13      	ldr	r3, [pc, #76]	; (800e250 <tcp_netif_ip_addr_changed+0x74>)
 800e202:	681b      	ldr	r3, [r3, #0]
 800e204:	4619      	mov	r1, r3
 800e206:	6878      	ldr	r0, [r7, #4]
 800e208:	f7ff ffb6 	bl	800e178 <tcp_netif_ip_addr_changed_pcblist>

    if (!ip_addr_isany(new_addr)) {
 800e20c:	683b      	ldr	r3, [r7, #0]
 800e20e:	2b00      	cmp	r3, #0
 800e210:	d017      	beq.n	800e242 <tcp_netif_ip_addr_changed+0x66>
 800e212:	683b      	ldr	r3, [r7, #0]
 800e214:	681b      	ldr	r3, [r3, #0]
 800e216:	2b00      	cmp	r3, #0
 800e218:	d013      	beq.n	800e242 <tcp_netif_ip_addr_changed+0x66>
      /* PCB bound to current local interface address? */
      for (lpcb = tcp_listen_pcbs.listen_pcbs; lpcb != NULL; lpcb = lpcb->next) {
 800e21a:	4b0e      	ldr	r3, [pc, #56]	; (800e254 <tcp_netif_ip_addr_changed+0x78>)
 800e21c:	681b      	ldr	r3, [r3, #0]
 800e21e:	60fb      	str	r3, [r7, #12]
 800e220:	e00c      	b.n	800e23c <tcp_netif_ip_addr_changed+0x60>
        /* PCB bound to current local interface address? */
        if (ip_addr_cmp(&lpcb->local_ip, old_addr)) {
 800e222:	68fb      	ldr	r3, [r7, #12]
 800e224:	681a      	ldr	r2, [r3, #0]
 800e226:	687b      	ldr	r3, [r7, #4]
 800e228:	681b      	ldr	r3, [r3, #0]
 800e22a:	429a      	cmp	r2, r3
 800e22c:	d103      	bne.n	800e236 <tcp_netif_ip_addr_changed+0x5a>
          /* The PCB is listening to the old ipaddr and
            * is set to listen to the new one instead */
          ip_addr_copy(lpcb->local_ip, *new_addr);
 800e22e:	683b      	ldr	r3, [r7, #0]
 800e230:	681a      	ldr	r2, [r3, #0]
 800e232:	68fb      	ldr	r3, [r7, #12]
 800e234:	601a      	str	r2, [r3, #0]
      for (lpcb = tcp_listen_pcbs.listen_pcbs; lpcb != NULL; lpcb = lpcb->next) {
 800e236:	68fb      	ldr	r3, [r7, #12]
 800e238:	68db      	ldr	r3, [r3, #12]
 800e23a:	60fb      	str	r3, [r7, #12]
 800e23c:	68fb      	ldr	r3, [r7, #12]
 800e23e:	2b00      	cmp	r3, #0
 800e240:	d1ef      	bne.n	800e222 <tcp_netif_ip_addr_changed+0x46>
        }
      }
    }
  }
}
 800e242:	bf00      	nop
 800e244:	3710      	adds	r7, #16
 800e246:	46bd      	mov	sp, r7
 800e248:	bd80      	pop	{r7, pc}
 800e24a:	bf00      	nop
 800e24c:	20008928 	.word	0x20008928
 800e250:	20008920 	.word	0x20008920
 800e254:	20008924 	.word	0x20008924

0800e258 <tcp_free_ooseq>:

#if TCP_QUEUE_OOSEQ
/* Free all ooseq pbufs (and possibly reset SACK state) */
void
tcp_free_ooseq(struct tcp_pcb *pcb)
{
 800e258:	b580      	push	{r7, lr}
 800e25a:	b082      	sub	sp, #8
 800e25c:	af00      	add	r7, sp, #0
 800e25e:	6078      	str	r0, [r7, #4]
  if (pcb->ooseq) {
 800e260:	687b      	ldr	r3, [r7, #4]
 800e262:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800e264:	2b00      	cmp	r3, #0
 800e266:	d007      	beq.n	800e278 <tcp_free_ooseq+0x20>
    tcp_segs_free(pcb->ooseq);
 800e268:	687b      	ldr	r3, [r7, #4]
 800e26a:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800e26c:	4618      	mov	r0, r3
 800e26e:	f7ff fb8d 	bl	800d98c <tcp_segs_free>
    pcb->ooseq = NULL;
 800e272:	687b      	ldr	r3, [r7, #4]
 800e274:	2200      	movs	r2, #0
 800e276:	675a      	str	r2, [r3, #116]	; 0x74
#if LWIP_TCP_SACK_OUT
    memset(pcb->rcv_sacks, 0, sizeof(pcb->rcv_sacks));
#endif /* LWIP_TCP_SACK_OUT */
  }
}
 800e278:	bf00      	nop
 800e27a:	3708      	adds	r7, #8
 800e27c:	46bd      	mov	sp, r7
 800e27e:	bd80      	pop	{r7, pc}

0800e280 <tcp_input>:
 * @param p received TCP segment to process (p->payload pointing to the TCP header)
 * @param inp network interface on which this segment was received
 */
void
tcp_input(struct pbuf *p, struct netif *inp)
{
 800e280:	b590      	push	{r4, r7, lr}
 800e282:	b08d      	sub	sp, #52	; 0x34
 800e284:	af04      	add	r7, sp, #16
 800e286:	6078      	str	r0, [r7, #4]
 800e288:	6039      	str	r1, [r7, #0]
  u8_t hdrlen_bytes;
  err_t err;

  LWIP_UNUSED_ARG(inp);
  LWIP_ASSERT_CORE_LOCKED();
  LWIP_ASSERT("tcp_input: invalid pbuf", p != NULL);
 800e28a:	687b      	ldr	r3, [r7, #4]
 800e28c:	2b00      	cmp	r3, #0
 800e28e:	d105      	bne.n	800e29c <tcp_input+0x1c>
 800e290:	4b9b      	ldr	r3, [pc, #620]	; (800e500 <tcp_input+0x280>)
 800e292:	2283      	movs	r2, #131	; 0x83
 800e294:	499b      	ldr	r1, [pc, #620]	; (800e504 <tcp_input+0x284>)
 800e296:	489c      	ldr	r0, [pc, #624]	; (800e508 <tcp_input+0x288>)
 800e298:	f00a f8f6 	bl	8018488 <iprintf>
  PERF_START;

  TCP_STATS_INC(tcp.recv);
  MIB2_STATS_INC(mib2.tcpinsegs);

  tcphdr = (struct tcp_hdr *)p->payload;
 800e29c:	687b      	ldr	r3, [r7, #4]
 800e29e:	685b      	ldr	r3, [r3, #4]
 800e2a0:	4a9a      	ldr	r2, [pc, #616]	; (800e50c <tcp_input+0x28c>)
 800e2a2:	6013      	str	r3, [r2, #0]
#if TCP_INPUT_DEBUG
  tcp_debug_print(tcphdr);
#endif

  /* Check that TCP header fits in payload */
  if (p->len < TCP_HLEN) {
 800e2a4:	687b      	ldr	r3, [r7, #4]
 800e2a6:	895b      	ldrh	r3, [r3, #10]
 800e2a8:	2b13      	cmp	r3, #19
 800e2aa:	f240 83d1 	bls.w	800ea50 <tcp_input+0x7d0>
    TCP_STATS_INC(tcp.lenerr);
    goto dropped;
  }

  /* Don't even process incoming broadcasts/multicasts. */
  if (ip_addr_isbroadcast(ip_current_dest_addr(), ip_current_netif()) ||
 800e2ae:	4b98      	ldr	r3, [pc, #608]	; (800e510 <tcp_input+0x290>)
 800e2b0:	695b      	ldr	r3, [r3, #20]
 800e2b2:	4a97      	ldr	r2, [pc, #604]	; (800e510 <tcp_input+0x290>)
 800e2b4:	6812      	ldr	r2, [r2, #0]
 800e2b6:	4611      	mov	r1, r2
 800e2b8:	4618      	mov	r0, r3
 800e2ba:	f008 fad1 	bl	8016860 <ip4_addr_isbroadcast_u32>
 800e2be:	4603      	mov	r3, r0
 800e2c0:	2b00      	cmp	r3, #0
 800e2c2:	f040 83c7 	bne.w	800ea54 <tcp_input+0x7d4>
      ip_addr_ismulticast(ip_current_dest_addr())) {
 800e2c6:	4b92      	ldr	r3, [pc, #584]	; (800e510 <tcp_input+0x290>)
 800e2c8:	695b      	ldr	r3, [r3, #20]
 800e2ca:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
  if (ip_addr_isbroadcast(ip_current_dest_addr(), ip_current_netif()) ||
 800e2ce:	2be0      	cmp	r3, #224	; 0xe0
 800e2d0:	f000 83c0 	beq.w	800ea54 <tcp_input+0x7d4>
    }
  }
#endif /* CHECKSUM_CHECK_TCP */

  /* sanity-check header length */
  hdrlen_bytes = TCPH_HDRLEN_BYTES(tcphdr);
 800e2d4:	4b8d      	ldr	r3, [pc, #564]	; (800e50c <tcp_input+0x28c>)
 800e2d6:	681b      	ldr	r3, [r3, #0]
 800e2d8:	899b      	ldrh	r3, [r3, #12]
 800e2da:	b29b      	uxth	r3, r3
 800e2dc:	4618      	mov	r0, r3
 800e2de:	f7fb ffd7 	bl	800a290 <lwip_htons>
 800e2e2:	4603      	mov	r3, r0
 800e2e4:	0b1b      	lsrs	r3, r3, #12
 800e2e6:	b29b      	uxth	r3, r3
 800e2e8:	b2db      	uxtb	r3, r3
 800e2ea:	009b      	lsls	r3, r3, #2
 800e2ec:	74bb      	strb	r3, [r7, #18]
  if ((hdrlen_bytes < TCP_HLEN) || (hdrlen_bytes > p->tot_len)) {
 800e2ee:	7cbb      	ldrb	r3, [r7, #18]
 800e2f0:	2b13      	cmp	r3, #19
 800e2f2:	f240 83b1 	bls.w	800ea58 <tcp_input+0x7d8>
 800e2f6:	7cbb      	ldrb	r3, [r7, #18]
 800e2f8:	b29a      	uxth	r2, r3
 800e2fa:	687b      	ldr	r3, [r7, #4]
 800e2fc:	891b      	ldrh	r3, [r3, #8]
 800e2fe:	429a      	cmp	r2, r3
 800e300:	f200 83aa 	bhi.w	800ea58 <tcp_input+0x7d8>
    goto dropped;
  }

  /* Move the payload pointer in the pbuf so that it points to the
     TCP data instead of the TCP header. */
  tcphdr_optlen = (u16_t)(hdrlen_bytes - TCP_HLEN);
 800e304:	7cbb      	ldrb	r3, [r7, #18]
 800e306:	b29b      	uxth	r3, r3
 800e308:	3b14      	subs	r3, #20
 800e30a:	b29a      	uxth	r2, r3
 800e30c:	4b81      	ldr	r3, [pc, #516]	; (800e514 <tcp_input+0x294>)
 800e30e:	801a      	strh	r2, [r3, #0]
  tcphdr_opt2 = NULL;
 800e310:	4b81      	ldr	r3, [pc, #516]	; (800e518 <tcp_input+0x298>)
 800e312:	2200      	movs	r2, #0
 800e314:	601a      	str	r2, [r3, #0]
  if (p->len >= hdrlen_bytes) {
 800e316:	687b      	ldr	r3, [r7, #4]
 800e318:	895a      	ldrh	r2, [r3, #10]
 800e31a:	7cbb      	ldrb	r3, [r7, #18]
 800e31c:	b29b      	uxth	r3, r3
 800e31e:	429a      	cmp	r2, r3
 800e320:	d309      	bcc.n	800e336 <tcp_input+0xb6>
    /* all options are in the first pbuf */
    tcphdr_opt1len = tcphdr_optlen;
 800e322:	4b7c      	ldr	r3, [pc, #496]	; (800e514 <tcp_input+0x294>)
 800e324:	881a      	ldrh	r2, [r3, #0]
 800e326:	4b7d      	ldr	r3, [pc, #500]	; (800e51c <tcp_input+0x29c>)
 800e328:	801a      	strh	r2, [r3, #0]
    pbuf_remove_header(p, hdrlen_bytes); /* cannot fail */
 800e32a:	7cbb      	ldrb	r3, [r7, #18]
 800e32c:	4619      	mov	r1, r3
 800e32e:	6878      	ldr	r0, [r7, #4]
 800e330:	f7fd fd80 	bl	800be34 <pbuf_remove_header>
 800e334:	e04e      	b.n	800e3d4 <tcp_input+0x154>
  } else {
    u16_t opt2len;
    /* TCP header fits into first pbuf, options don't - data is in the next pbuf */
    /* there must be a next pbuf, due to hdrlen_bytes sanity check above */
    LWIP_ASSERT("p->next != NULL", p->next != NULL);
 800e336:	687b      	ldr	r3, [r7, #4]
 800e338:	681b      	ldr	r3, [r3, #0]
 800e33a:	2b00      	cmp	r3, #0
 800e33c:	d105      	bne.n	800e34a <tcp_input+0xca>
 800e33e:	4b70      	ldr	r3, [pc, #448]	; (800e500 <tcp_input+0x280>)
 800e340:	22c2      	movs	r2, #194	; 0xc2
 800e342:	4977      	ldr	r1, [pc, #476]	; (800e520 <tcp_input+0x2a0>)
 800e344:	4870      	ldr	r0, [pc, #448]	; (800e508 <tcp_input+0x288>)
 800e346:	f00a f89f 	bl	8018488 <iprintf>

    /* advance over the TCP header (cannot fail) */
    pbuf_remove_header(p, TCP_HLEN);
 800e34a:	2114      	movs	r1, #20
 800e34c:	6878      	ldr	r0, [r7, #4]
 800e34e:	f7fd fd71 	bl	800be34 <pbuf_remove_header>

    /* determine how long the first and second parts of the options are */
    tcphdr_opt1len = p->len;
 800e352:	687b      	ldr	r3, [r7, #4]
 800e354:	895a      	ldrh	r2, [r3, #10]
 800e356:	4b71      	ldr	r3, [pc, #452]	; (800e51c <tcp_input+0x29c>)
 800e358:	801a      	strh	r2, [r3, #0]
    opt2len = (u16_t)(tcphdr_optlen - tcphdr_opt1len);
 800e35a:	4b6e      	ldr	r3, [pc, #440]	; (800e514 <tcp_input+0x294>)
 800e35c:	881a      	ldrh	r2, [r3, #0]
 800e35e:	4b6f      	ldr	r3, [pc, #444]	; (800e51c <tcp_input+0x29c>)
 800e360:	881b      	ldrh	r3, [r3, #0]
 800e362:	1ad3      	subs	r3, r2, r3
 800e364:	823b      	strh	r3, [r7, #16]

    /* options continue in the next pbuf: set p to zero length and hide the
        options in the next pbuf (adjusting p->tot_len) */
    pbuf_remove_header(p, tcphdr_opt1len);
 800e366:	4b6d      	ldr	r3, [pc, #436]	; (800e51c <tcp_input+0x29c>)
 800e368:	881b      	ldrh	r3, [r3, #0]
 800e36a:	4619      	mov	r1, r3
 800e36c:	6878      	ldr	r0, [r7, #4]
 800e36e:	f7fd fd61 	bl	800be34 <pbuf_remove_header>

    /* check that the options fit in the second pbuf */
    if (opt2len > p->next->len) {
 800e372:	687b      	ldr	r3, [r7, #4]
 800e374:	681b      	ldr	r3, [r3, #0]
 800e376:	895b      	ldrh	r3, [r3, #10]
 800e378:	8a3a      	ldrh	r2, [r7, #16]
 800e37a:	429a      	cmp	r2, r3
 800e37c:	f200 836e 	bhi.w	800ea5c <tcp_input+0x7dc>
      TCP_STATS_INC(tcp.lenerr);
      goto dropped;
    }

    /* remember the pointer to the second part of the options */
    tcphdr_opt2 = (u8_t *)p->next->payload;
 800e380:	687b      	ldr	r3, [r7, #4]
 800e382:	681b      	ldr	r3, [r3, #0]
 800e384:	685b      	ldr	r3, [r3, #4]
 800e386:	4a64      	ldr	r2, [pc, #400]	; (800e518 <tcp_input+0x298>)
 800e388:	6013      	str	r3, [r2, #0]

    /* advance p->next to point after the options, and manually
        adjust p->tot_len to keep it consistent with the changed p->next */
    pbuf_remove_header(p->next, opt2len);
 800e38a:	687b      	ldr	r3, [r7, #4]
 800e38c:	681b      	ldr	r3, [r3, #0]
 800e38e:	8a3a      	ldrh	r2, [r7, #16]
 800e390:	4611      	mov	r1, r2
 800e392:	4618      	mov	r0, r3
 800e394:	f7fd fd4e 	bl	800be34 <pbuf_remove_header>
    p->tot_len = (u16_t)(p->tot_len - opt2len);
 800e398:	687b      	ldr	r3, [r7, #4]
 800e39a:	891a      	ldrh	r2, [r3, #8]
 800e39c:	8a3b      	ldrh	r3, [r7, #16]
 800e39e:	1ad3      	subs	r3, r2, r3
 800e3a0:	b29a      	uxth	r2, r3
 800e3a2:	687b      	ldr	r3, [r7, #4]
 800e3a4:	811a      	strh	r2, [r3, #8]

    LWIP_ASSERT("p->len == 0", p->len == 0);
 800e3a6:	687b      	ldr	r3, [r7, #4]
 800e3a8:	895b      	ldrh	r3, [r3, #10]
 800e3aa:	2b00      	cmp	r3, #0
 800e3ac:	d005      	beq.n	800e3ba <tcp_input+0x13a>
 800e3ae:	4b54      	ldr	r3, [pc, #336]	; (800e500 <tcp_input+0x280>)
 800e3b0:	22df      	movs	r2, #223	; 0xdf
 800e3b2:	495c      	ldr	r1, [pc, #368]	; (800e524 <tcp_input+0x2a4>)
 800e3b4:	4854      	ldr	r0, [pc, #336]	; (800e508 <tcp_input+0x288>)
 800e3b6:	f00a f867 	bl	8018488 <iprintf>
    LWIP_ASSERT("p->tot_len == p->next->tot_len", p->tot_len == p->next->tot_len);
 800e3ba:	687b      	ldr	r3, [r7, #4]
 800e3bc:	891a      	ldrh	r2, [r3, #8]
 800e3be:	687b      	ldr	r3, [r7, #4]
 800e3c0:	681b      	ldr	r3, [r3, #0]
 800e3c2:	891b      	ldrh	r3, [r3, #8]
 800e3c4:	429a      	cmp	r2, r3
 800e3c6:	d005      	beq.n	800e3d4 <tcp_input+0x154>
 800e3c8:	4b4d      	ldr	r3, [pc, #308]	; (800e500 <tcp_input+0x280>)
 800e3ca:	22e0      	movs	r2, #224	; 0xe0
 800e3cc:	4956      	ldr	r1, [pc, #344]	; (800e528 <tcp_input+0x2a8>)
 800e3ce:	484e      	ldr	r0, [pc, #312]	; (800e508 <tcp_input+0x288>)
 800e3d0:	f00a f85a 	bl	8018488 <iprintf>
  }

  /* Convert fields in TCP header to host byte order. */
  tcphdr->src = lwip_ntohs(tcphdr->src);
 800e3d4:	4b4d      	ldr	r3, [pc, #308]	; (800e50c <tcp_input+0x28c>)
 800e3d6:	681b      	ldr	r3, [r3, #0]
 800e3d8:	881b      	ldrh	r3, [r3, #0]
 800e3da:	b29b      	uxth	r3, r3
 800e3dc:	4a4b      	ldr	r2, [pc, #300]	; (800e50c <tcp_input+0x28c>)
 800e3de:	6814      	ldr	r4, [r2, #0]
 800e3e0:	4618      	mov	r0, r3
 800e3e2:	f7fb ff55 	bl	800a290 <lwip_htons>
 800e3e6:	4603      	mov	r3, r0
 800e3e8:	8023      	strh	r3, [r4, #0]
  tcphdr->dest = lwip_ntohs(tcphdr->dest);
 800e3ea:	4b48      	ldr	r3, [pc, #288]	; (800e50c <tcp_input+0x28c>)
 800e3ec:	681b      	ldr	r3, [r3, #0]
 800e3ee:	885b      	ldrh	r3, [r3, #2]
 800e3f0:	b29b      	uxth	r3, r3
 800e3f2:	4a46      	ldr	r2, [pc, #280]	; (800e50c <tcp_input+0x28c>)
 800e3f4:	6814      	ldr	r4, [r2, #0]
 800e3f6:	4618      	mov	r0, r3
 800e3f8:	f7fb ff4a 	bl	800a290 <lwip_htons>
 800e3fc:	4603      	mov	r3, r0
 800e3fe:	8063      	strh	r3, [r4, #2]
  seqno = tcphdr->seqno = lwip_ntohl(tcphdr->seqno);
 800e400:	4b42      	ldr	r3, [pc, #264]	; (800e50c <tcp_input+0x28c>)
 800e402:	681b      	ldr	r3, [r3, #0]
 800e404:	685b      	ldr	r3, [r3, #4]
 800e406:	4a41      	ldr	r2, [pc, #260]	; (800e50c <tcp_input+0x28c>)
 800e408:	6814      	ldr	r4, [r2, #0]
 800e40a:	4618      	mov	r0, r3
 800e40c:	f7fb ff55 	bl	800a2ba <lwip_htonl>
 800e410:	4603      	mov	r3, r0
 800e412:	6063      	str	r3, [r4, #4]
 800e414:	6863      	ldr	r3, [r4, #4]
 800e416:	4a45      	ldr	r2, [pc, #276]	; (800e52c <tcp_input+0x2ac>)
 800e418:	6013      	str	r3, [r2, #0]
  ackno = tcphdr->ackno = lwip_ntohl(tcphdr->ackno);
 800e41a:	4b3c      	ldr	r3, [pc, #240]	; (800e50c <tcp_input+0x28c>)
 800e41c:	681b      	ldr	r3, [r3, #0]
 800e41e:	689b      	ldr	r3, [r3, #8]
 800e420:	4a3a      	ldr	r2, [pc, #232]	; (800e50c <tcp_input+0x28c>)
 800e422:	6814      	ldr	r4, [r2, #0]
 800e424:	4618      	mov	r0, r3
 800e426:	f7fb ff48 	bl	800a2ba <lwip_htonl>
 800e42a:	4603      	mov	r3, r0
 800e42c:	60a3      	str	r3, [r4, #8]
 800e42e:	68a3      	ldr	r3, [r4, #8]
 800e430:	4a3f      	ldr	r2, [pc, #252]	; (800e530 <tcp_input+0x2b0>)
 800e432:	6013      	str	r3, [r2, #0]
  tcphdr->wnd = lwip_ntohs(tcphdr->wnd);
 800e434:	4b35      	ldr	r3, [pc, #212]	; (800e50c <tcp_input+0x28c>)
 800e436:	681b      	ldr	r3, [r3, #0]
 800e438:	89db      	ldrh	r3, [r3, #14]
 800e43a:	b29b      	uxth	r3, r3
 800e43c:	4a33      	ldr	r2, [pc, #204]	; (800e50c <tcp_input+0x28c>)
 800e43e:	6814      	ldr	r4, [r2, #0]
 800e440:	4618      	mov	r0, r3
 800e442:	f7fb ff25 	bl	800a290 <lwip_htons>
 800e446:	4603      	mov	r3, r0
 800e448:	81e3      	strh	r3, [r4, #14]

  flags = TCPH_FLAGS(tcphdr);
 800e44a:	4b30      	ldr	r3, [pc, #192]	; (800e50c <tcp_input+0x28c>)
 800e44c:	681b      	ldr	r3, [r3, #0]
 800e44e:	899b      	ldrh	r3, [r3, #12]
 800e450:	b29b      	uxth	r3, r3
 800e452:	4618      	mov	r0, r3
 800e454:	f7fb ff1c 	bl	800a290 <lwip_htons>
 800e458:	4603      	mov	r3, r0
 800e45a:	b2db      	uxtb	r3, r3
 800e45c:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800e460:	b2da      	uxtb	r2, r3
 800e462:	4b34      	ldr	r3, [pc, #208]	; (800e534 <tcp_input+0x2b4>)
 800e464:	701a      	strb	r2, [r3, #0]
  tcplen = p->tot_len;
 800e466:	687b      	ldr	r3, [r7, #4]
 800e468:	891a      	ldrh	r2, [r3, #8]
 800e46a:	4b33      	ldr	r3, [pc, #204]	; (800e538 <tcp_input+0x2b8>)
 800e46c:	801a      	strh	r2, [r3, #0]
  if (flags & (TCP_FIN | TCP_SYN)) {
 800e46e:	4b31      	ldr	r3, [pc, #196]	; (800e534 <tcp_input+0x2b4>)
 800e470:	781b      	ldrb	r3, [r3, #0]
 800e472:	f003 0303 	and.w	r3, r3, #3
 800e476:	2b00      	cmp	r3, #0
 800e478:	d00c      	beq.n	800e494 <tcp_input+0x214>
    tcplen++;
 800e47a:	4b2f      	ldr	r3, [pc, #188]	; (800e538 <tcp_input+0x2b8>)
 800e47c:	881b      	ldrh	r3, [r3, #0]
 800e47e:	3301      	adds	r3, #1
 800e480:	b29a      	uxth	r2, r3
 800e482:	4b2d      	ldr	r3, [pc, #180]	; (800e538 <tcp_input+0x2b8>)
 800e484:	801a      	strh	r2, [r3, #0]
    if (tcplen < p->tot_len) {
 800e486:	687b      	ldr	r3, [r7, #4]
 800e488:	891a      	ldrh	r2, [r3, #8]
 800e48a:	4b2b      	ldr	r3, [pc, #172]	; (800e538 <tcp_input+0x2b8>)
 800e48c:	881b      	ldrh	r3, [r3, #0]
 800e48e:	429a      	cmp	r2, r3
 800e490:	f200 82e6 	bhi.w	800ea60 <tcp_input+0x7e0>
    }
  }

  /* Demultiplex an incoming segment. First, we check if it is destined
     for an active connection. */
  prev = NULL;
 800e494:	2300      	movs	r3, #0
 800e496:	61bb      	str	r3, [r7, #24]

  for (pcb = tcp_active_pcbs; pcb != NULL; pcb = pcb->next) {
 800e498:	4b28      	ldr	r3, [pc, #160]	; (800e53c <tcp_input+0x2bc>)
 800e49a:	681b      	ldr	r3, [r3, #0]
 800e49c:	61fb      	str	r3, [r7, #28]
 800e49e:	e09d      	b.n	800e5dc <tcp_input+0x35c>
    LWIP_ASSERT("tcp_input: active pcb->state != CLOSED", pcb->state != CLOSED);
 800e4a0:	69fb      	ldr	r3, [r7, #28]
 800e4a2:	7d1b      	ldrb	r3, [r3, #20]
 800e4a4:	2b00      	cmp	r3, #0
 800e4a6:	d105      	bne.n	800e4b4 <tcp_input+0x234>
 800e4a8:	4b15      	ldr	r3, [pc, #84]	; (800e500 <tcp_input+0x280>)
 800e4aa:	22fb      	movs	r2, #251	; 0xfb
 800e4ac:	4924      	ldr	r1, [pc, #144]	; (800e540 <tcp_input+0x2c0>)
 800e4ae:	4816      	ldr	r0, [pc, #88]	; (800e508 <tcp_input+0x288>)
 800e4b0:	f009 ffea 	bl	8018488 <iprintf>
    LWIP_ASSERT("tcp_input: active pcb->state != TIME-WAIT", pcb->state != TIME_WAIT);
 800e4b4:	69fb      	ldr	r3, [r7, #28]
 800e4b6:	7d1b      	ldrb	r3, [r3, #20]
 800e4b8:	2b0a      	cmp	r3, #10
 800e4ba:	d105      	bne.n	800e4c8 <tcp_input+0x248>
 800e4bc:	4b10      	ldr	r3, [pc, #64]	; (800e500 <tcp_input+0x280>)
 800e4be:	22fc      	movs	r2, #252	; 0xfc
 800e4c0:	4920      	ldr	r1, [pc, #128]	; (800e544 <tcp_input+0x2c4>)
 800e4c2:	4811      	ldr	r0, [pc, #68]	; (800e508 <tcp_input+0x288>)
 800e4c4:	f009 ffe0 	bl	8018488 <iprintf>
    LWIP_ASSERT("tcp_input: active pcb->state != LISTEN", pcb->state != LISTEN);
 800e4c8:	69fb      	ldr	r3, [r7, #28]
 800e4ca:	7d1b      	ldrb	r3, [r3, #20]
 800e4cc:	2b01      	cmp	r3, #1
 800e4ce:	d105      	bne.n	800e4dc <tcp_input+0x25c>
 800e4d0:	4b0b      	ldr	r3, [pc, #44]	; (800e500 <tcp_input+0x280>)
 800e4d2:	22fd      	movs	r2, #253	; 0xfd
 800e4d4:	491c      	ldr	r1, [pc, #112]	; (800e548 <tcp_input+0x2c8>)
 800e4d6:	480c      	ldr	r0, [pc, #48]	; (800e508 <tcp_input+0x288>)
 800e4d8:	f009 ffd6 	bl	8018488 <iprintf>

    /* check if PCB is bound to specific netif */
    if ((pcb->netif_idx != NETIF_NO_INDEX) &&
 800e4dc:	69fb      	ldr	r3, [r7, #28]
 800e4de:	7a1b      	ldrb	r3, [r3, #8]
 800e4e0:	2b00      	cmp	r3, #0
 800e4e2:	d033      	beq.n	800e54c <tcp_input+0x2cc>
        (pcb->netif_idx != netif_get_index(ip_data.current_input_netif))) {
 800e4e4:	69fb      	ldr	r3, [r7, #28]
 800e4e6:	7a1a      	ldrb	r2, [r3, #8]
 800e4e8:	4b09      	ldr	r3, [pc, #36]	; (800e510 <tcp_input+0x290>)
 800e4ea:	685b      	ldr	r3, [r3, #4]
 800e4ec:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 800e4f0:	3301      	adds	r3, #1
 800e4f2:	b2db      	uxtb	r3, r3
    if ((pcb->netif_idx != NETIF_NO_INDEX) &&
 800e4f4:	429a      	cmp	r2, r3
 800e4f6:	d029      	beq.n	800e54c <tcp_input+0x2cc>
      prev = pcb;
 800e4f8:	69fb      	ldr	r3, [r7, #28]
 800e4fa:	61bb      	str	r3, [r7, #24]
      continue;
 800e4fc:	e06b      	b.n	800e5d6 <tcp_input+0x356>
 800e4fe:	bf00      	nop
 800e500:	0801a60c 	.word	0x0801a60c
 800e504:	0801a640 	.word	0x0801a640
 800e508:	0801a658 	.word	0x0801a658
 800e50c:	20008944 	.word	0x20008944
 800e510:	2000537c 	.word	0x2000537c
 800e514:	20008948 	.word	0x20008948
 800e518:	2000894c 	.word	0x2000894c
 800e51c:	2000894a 	.word	0x2000894a
 800e520:	0801a680 	.word	0x0801a680
 800e524:	0801a690 	.word	0x0801a690
 800e528:	0801a69c 	.word	0x0801a69c
 800e52c:	20008954 	.word	0x20008954
 800e530:	20008958 	.word	0x20008958
 800e534:	20008960 	.word	0x20008960
 800e538:	2000895e 	.word	0x2000895e
 800e53c:	20008928 	.word	0x20008928
 800e540:	0801a6bc 	.word	0x0801a6bc
 800e544:	0801a6e4 	.word	0x0801a6e4
 800e548:	0801a710 	.word	0x0801a710
    }

    if (pcb->remote_port == tcphdr->src &&
 800e54c:	69fb      	ldr	r3, [r7, #28]
 800e54e:	8b1a      	ldrh	r2, [r3, #24]
 800e550:	4b72      	ldr	r3, [pc, #456]	; (800e71c <tcp_input+0x49c>)
 800e552:	681b      	ldr	r3, [r3, #0]
 800e554:	881b      	ldrh	r3, [r3, #0]
 800e556:	b29b      	uxth	r3, r3
 800e558:	429a      	cmp	r2, r3
 800e55a:	d13a      	bne.n	800e5d2 <tcp_input+0x352>
        pcb->local_port == tcphdr->dest &&
 800e55c:	69fb      	ldr	r3, [r7, #28]
 800e55e:	8ada      	ldrh	r2, [r3, #22]
 800e560:	4b6e      	ldr	r3, [pc, #440]	; (800e71c <tcp_input+0x49c>)
 800e562:	681b      	ldr	r3, [r3, #0]
 800e564:	885b      	ldrh	r3, [r3, #2]
 800e566:	b29b      	uxth	r3, r3
    if (pcb->remote_port == tcphdr->src &&
 800e568:	429a      	cmp	r2, r3
 800e56a:	d132      	bne.n	800e5d2 <tcp_input+0x352>
        ip_addr_cmp(&pcb->remote_ip, ip_current_src_addr()) &&
 800e56c:	69fb      	ldr	r3, [r7, #28]
 800e56e:	685a      	ldr	r2, [r3, #4]
 800e570:	4b6b      	ldr	r3, [pc, #428]	; (800e720 <tcp_input+0x4a0>)
 800e572:	691b      	ldr	r3, [r3, #16]
        pcb->local_port == tcphdr->dest &&
 800e574:	429a      	cmp	r2, r3
 800e576:	d12c      	bne.n	800e5d2 <tcp_input+0x352>
        ip_addr_cmp(&pcb->local_ip, ip_current_dest_addr())) {
 800e578:	69fb      	ldr	r3, [r7, #28]
 800e57a:	681a      	ldr	r2, [r3, #0]
 800e57c:	4b68      	ldr	r3, [pc, #416]	; (800e720 <tcp_input+0x4a0>)
 800e57e:	695b      	ldr	r3, [r3, #20]
        ip_addr_cmp(&pcb->remote_ip, ip_current_src_addr()) &&
 800e580:	429a      	cmp	r2, r3
 800e582:	d126      	bne.n	800e5d2 <tcp_input+0x352>
      /* Move this PCB to the front of the list so that subsequent
         lookups will be faster (we exploit locality in TCP segment
         arrivals). */
      LWIP_ASSERT("tcp_input: pcb->next != pcb (before cache)", pcb->next != pcb);
 800e584:	69fb      	ldr	r3, [r7, #28]
 800e586:	68db      	ldr	r3, [r3, #12]
 800e588:	69fa      	ldr	r2, [r7, #28]
 800e58a:	429a      	cmp	r2, r3
 800e58c:	d106      	bne.n	800e59c <tcp_input+0x31c>
 800e58e:	4b65      	ldr	r3, [pc, #404]	; (800e724 <tcp_input+0x4a4>)
 800e590:	f240 120d 	movw	r2, #269	; 0x10d
 800e594:	4964      	ldr	r1, [pc, #400]	; (800e728 <tcp_input+0x4a8>)
 800e596:	4865      	ldr	r0, [pc, #404]	; (800e72c <tcp_input+0x4ac>)
 800e598:	f009 ff76 	bl	8018488 <iprintf>
      if (prev != NULL) {
 800e59c:	69bb      	ldr	r3, [r7, #24]
 800e59e:	2b00      	cmp	r3, #0
 800e5a0:	d00a      	beq.n	800e5b8 <tcp_input+0x338>
        prev->next = pcb->next;
 800e5a2:	69fb      	ldr	r3, [r7, #28]
 800e5a4:	68da      	ldr	r2, [r3, #12]
 800e5a6:	69bb      	ldr	r3, [r7, #24]
 800e5a8:	60da      	str	r2, [r3, #12]
        pcb->next = tcp_active_pcbs;
 800e5aa:	4b61      	ldr	r3, [pc, #388]	; (800e730 <tcp_input+0x4b0>)
 800e5ac:	681a      	ldr	r2, [r3, #0]
 800e5ae:	69fb      	ldr	r3, [r7, #28]
 800e5b0:	60da      	str	r2, [r3, #12]
        tcp_active_pcbs = pcb;
 800e5b2:	4a5f      	ldr	r2, [pc, #380]	; (800e730 <tcp_input+0x4b0>)
 800e5b4:	69fb      	ldr	r3, [r7, #28]
 800e5b6:	6013      	str	r3, [r2, #0]
      } else {
        TCP_STATS_INC(tcp.cachehit);
      }
      LWIP_ASSERT("tcp_input: pcb->next != pcb (after cache)", pcb->next != pcb);
 800e5b8:	69fb      	ldr	r3, [r7, #28]
 800e5ba:	68db      	ldr	r3, [r3, #12]
 800e5bc:	69fa      	ldr	r2, [r7, #28]
 800e5be:	429a      	cmp	r2, r3
 800e5c0:	d111      	bne.n	800e5e6 <tcp_input+0x366>
 800e5c2:	4b58      	ldr	r3, [pc, #352]	; (800e724 <tcp_input+0x4a4>)
 800e5c4:	f240 1215 	movw	r2, #277	; 0x115
 800e5c8:	495a      	ldr	r1, [pc, #360]	; (800e734 <tcp_input+0x4b4>)
 800e5ca:	4858      	ldr	r0, [pc, #352]	; (800e72c <tcp_input+0x4ac>)
 800e5cc:	f009 ff5c 	bl	8018488 <iprintf>
      break;
 800e5d0:	e009      	b.n	800e5e6 <tcp_input+0x366>
    }
    prev = pcb;
 800e5d2:	69fb      	ldr	r3, [r7, #28]
 800e5d4:	61bb      	str	r3, [r7, #24]
  for (pcb = tcp_active_pcbs; pcb != NULL; pcb = pcb->next) {
 800e5d6:	69fb      	ldr	r3, [r7, #28]
 800e5d8:	68db      	ldr	r3, [r3, #12]
 800e5da:	61fb      	str	r3, [r7, #28]
 800e5dc:	69fb      	ldr	r3, [r7, #28]
 800e5de:	2b00      	cmp	r3, #0
 800e5e0:	f47f af5e 	bne.w	800e4a0 <tcp_input+0x220>
 800e5e4:	e000      	b.n	800e5e8 <tcp_input+0x368>
      break;
 800e5e6:	bf00      	nop
  }

  if (pcb == NULL) {
 800e5e8:	69fb      	ldr	r3, [r7, #28]
 800e5ea:	2b00      	cmp	r3, #0
 800e5ec:	f040 80aa 	bne.w	800e744 <tcp_input+0x4c4>
    /* If it did not go to an active connection, we check the connections
       in the TIME-WAIT state. */
    for (pcb = tcp_tw_pcbs; pcb != NULL; pcb = pcb->next) {
 800e5f0:	4b51      	ldr	r3, [pc, #324]	; (800e738 <tcp_input+0x4b8>)
 800e5f2:	681b      	ldr	r3, [r3, #0]
 800e5f4:	61fb      	str	r3, [r7, #28]
 800e5f6:	e03f      	b.n	800e678 <tcp_input+0x3f8>
      LWIP_ASSERT("tcp_input: TIME-WAIT pcb->state == TIME-WAIT", pcb->state == TIME_WAIT);
 800e5f8:	69fb      	ldr	r3, [r7, #28]
 800e5fa:	7d1b      	ldrb	r3, [r3, #20]
 800e5fc:	2b0a      	cmp	r3, #10
 800e5fe:	d006      	beq.n	800e60e <tcp_input+0x38e>
 800e600:	4b48      	ldr	r3, [pc, #288]	; (800e724 <tcp_input+0x4a4>)
 800e602:	f240 121f 	movw	r2, #287	; 0x11f
 800e606:	494d      	ldr	r1, [pc, #308]	; (800e73c <tcp_input+0x4bc>)
 800e608:	4848      	ldr	r0, [pc, #288]	; (800e72c <tcp_input+0x4ac>)
 800e60a:	f009 ff3d 	bl	8018488 <iprintf>

      /* check if PCB is bound to specific netif */
      if ((pcb->netif_idx != NETIF_NO_INDEX) &&
 800e60e:	69fb      	ldr	r3, [r7, #28]
 800e610:	7a1b      	ldrb	r3, [r3, #8]
 800e612:	2b00      	cmp	r3, #0
 800e614:	d009      	beq.n	800e62a <tcp_input+0x3aa>
          (pcb->netif_idx != netif_get_index(ip_data.current_input_netif))) {
 800e616:	69fb      	ldr	r3, [r7, #28]
 800e618:	7a1a      	ldrb	r2, [r3, #8]
 800e61a:	4b41      	ldr	r3, [pc, #260]	; (800e720 <tcp_input+0x4a0>)
 800e61c:	685b      	ldr	r3, [r3, #4]
 800e61e:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 800e622:	3301      	adds	r3, #1
 800e624:	b2db      	uxtb	r3, r3
      if ((pcb->netif_idx != NETIF_NO_INDEX) &&
 800e626:	429a      	cmp	r2, r3
 800e628:	d122      	bne.n	800e670 <tcp_input+0x3f0>
        continue;
      }

      if (pcb->remote_port == tcphdr->src &&
 800e62a:	69fb      	ldr	r3, [r7, #28]
 800e62c:	8b1a      	ldrh	r2, [r3, #24]
 800e62e:	4b3b      	ldr	r3, [pc, #236]	; (800e71c <tcp_input+0x49c>)
 800e630:	681b      	ldr	r3, [r3, #0]
 800e632:	881b      	ldrh	r3, [r3, #0]
 800e634:	b29b      	uxth	r3, r3
 800e636:	429a      	cmp	r2, r3
 800e638:	d11b      	bne.n	800e672 <tcp_input+0x3f2>
          pcb->local_port == tcphdr->dest &&
 800e63a:	69fb      	ldr	r3, [r7, #28]
 800e63c:	8ada      	ldrh	r2, [r3, #22]
 800e63e:	4b37      	ldr	r3, [pc, #220]	; (800e71c <tcp_input+0x49c>)
 800e640:	681b      	ldr	r3, [r3, #0]
 800e642:	885b      	ldrh	r3, [r3, #2]
 800e644:	b29b      	uxth	r3, r3
      if (pcb->remote_port == tcphdr->src &&
 800e646:	429a      	cmp	r2, r3
 800e648:	d113      	bne.n	800e672 <tcp_input+0x3f2>
          ip_addr_cmp(&pcb->remote_ip, ip_current_src_addr()) &&
 800e64a:	69fb      	ldr	r3, [r7, #28]
 800e64c:	685a      	ldr	r2, [r3, #4]
 800e64e:	4b34      	ldr	r3, [pc, #208]	; (800e720 <tcp_input+0x4a0>)
 800e650:	691b      	ldr	r3, [r3, #16]
          pcb->local_port == tcphdr->dest &&
 800e652:	429a      	cmp	r2, r3
 800e654:	d10d      	bne.n	800e672 <tcp_input+0x3f2>
          ip_addr_cmp(&pcb->local_ip, ip_current_dest_addr())) {
 800e656:	69fb      	ldr	r3, [r7, #28]
 800e658:	681a      	ldr	r2, [r3, #0]
 800e65a:	4b31      	ldr	r3, [pc, #196]	; (800e720 <tcp_input+0x4a0>)
 800e65c:	695b      	ldr	r3, [r3, #20]
          ip_addr_cmp(&pcb->remote_ip, ip_current_src_addr()) &&
 800e65e:	429a      	cmp	r2, r3
 800e660:	d107      	bne.n	800e672 <tcp_input+0x3f2>
#ifdef LWIP_HOOK_TCP_INPACKET_PCB
        if (LWIP_HOOK_TCP_INPACKET_PCB(pcb, tcphdr, tcphdr_optlen, tcphdr_opt1len,
                                       tcphdr_opt2, p) == ERR_OK)
#endif
        {
          tcp_timewait_input(pcb);
 800e662:	69f8      	ldr	r0, [r7, #28]
 800e664:	f000 fb56 	bl	800ed14 <tcp_timewait_input>
        }
        pbuf_free(p);
 800e668:	6878      	ldr	r0, [r7, #4]
 800e66a:	f7fd fc69 	bl	800bf40 <pbuf_free>
        return;
 800e66e:	e1fd      	b.n	800ea6c <tcp_input+0x7ec>
        continue;
 800e670:	bf00      	nop
    for (pcb = tcp_tw_pcbs; pcb != NULL; pcb = pcb->next) {
 800e672:	69fb      	ldr	r3, [r7, #28]
 800e674:	68db      	ldr	r3, [r3, #12]
 800e676:	61fb      	str	r3, [r7, #28]
 800e678:	69fb      	ldr	r3, [r7, #28]
 800e67a:	2b00      	cmp	r3, #0
 800e67c:	d1bc      	bne.n	800e5f8 <tcp_input+0x378>
      }
    }

    /* Finally, if we still did not get a match, we check all PCBs that
       are LISTENing for incoming connections. */
    prev = NULL;
 800e67e:	2300      	movs	r3, #0
 800e680:	61bb      	str	r3, [r7, #24]
    for (lpcb = tcp_listen_pcbs.listen_pcbs; lpcb != NULL; lpcb = lpcb->next) {
 800e682:	4b2f      	ldr	r3, [pc, #188]	; (800e740 <tcp_input+0x4c0>)
 800e684:	681b      	ldr	r3, [r3, #0]
 800e686:	617b      	str	r3, [r7, #20]
 800e688:	e02a      	b.n	800e6e0 <tcp_input+0x460>
      /* check if PCB is bound to specific netif */
      if ((lpcb->netif_idx != NETIF_NO_INDEX) &&
 800e68a:	697b      	ldr	r3, [r7, #20]
 800e68c:	7a1b      	ldrb	r3, [r3, #8]
 800e68e:	2b00      	cmp	r3, #0
 800e690:	d00c      	beq.n	800e6ac <tcp_input+0x42c>
          (lpcb->netif_idx != netif_get_index(ip_data.current_input_netif))) {
 800e692:	697b      	ldr	r3, [r7, #20]
 800e694:	7a1a      	ldrb	r2, [r3, #8]
 800e696:	4b22      	ldr	r3, [pc, #136]	; (800e720 <tcp_input+0x4a0>)
 800e698:	685b      	ldr	r3, [r3, #4]
 800e69a:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 800e69e:	3301      	adds	r3, #1
 800e6a0:	b2db      	uxtb	r3, r3
      if ((lpcb->netif_idx != NETIF_NO_INDEX) &&
 800e6a2:	429a      	cmp	r2, r3
 800e6a4:	d002      	beq.n	800e6ac <tcp_input+0x42c>
        prev = (struct tcp_pcb *)lpcb;
 800e6a6:	697b      	ldr	r3, [r7, #20]
 800e6a8:	61bb      	str	r3, [r7, #24]
        continue;
 800e6aa:	e016      	b.n	800e6da <tcp_input+0x45a>
      }

      if (lpcb->local_port == tcphdr->dest) {
 800e6ac:	697b      	ldr	r3, [r7, #20]
 800e6ae:	8ada      	ldrh	r2, [r3, #22]
 800e6b0:	4b1a      	ldr	r3, [pc, #104]	; (800e71c <tcp_input+0x49c>)
 800e6b2:	681b      	ldr	r3, [r3, #0]
 800e6b4:	885b      	ldrh	r3, [r3, #2]
 800e6b6:	b29b      	uxth	r3, r3
 800e6b8:	429a      	cmp	r2, r3
 800e6ba:	d10c      	bne.n	800e6d6 <tcp_input+0x456>
          lpcb_prev = prev;
#else /* SO_REUSE */
          break;
#endif /* SO_REUSE */
        } else if (IP_ADDR_PCB_VERSION_MATCH_EXACT(lpcb, ip_current_dest_addr())) {
          if (ip_addr_cmp(&lpcb->local_ip, ip_current_dest_addr())) {
 800e6bc:	697b      	ldr	r3, [r7, #20]
 800e6be:	681a      	ldr	r2, [r3, #0]
 800e6c0:	4b17      	ldr	r3, [pc, #92]	; (800e720 <tcp_input+0x4a0>)
 800e6c2:	695b      	ldr	r3, [r3, #20]
 800e6c4:	429a      	cmp	r2, r3
 800e6c6:	d00f      	beq.n	800e6e8 <tcp_input+0x468>
            /* found an exact match */
            break;
          } else if (ip_addr_isany(&lpcb->local_ip)) {
 800e6c8:	697b      	ldr	r3, [r7, #20]
 800e6ca:	2b00      	cmp	r3, #0
 800e6cc:	d00d      	beq.n	800e6ea <tcp_input+0x46a>
 800e6ce:	697b      	ldr	r3, [r7, #20]
 800e6d0:	681b      	ldr	r3, [r3, #0]
 800e6d2:	2b00      	cmp	r3, #0
 800e6d4:	d009      	beq.n	800e6ea <tcp_input+0x46a>
            break;
#endif /* SO_REUSE */
          }
        }
      }
      prev = (struct tcp_pcb *)lpcb;
 800e6d6:	697b      	ldr	r3, [r7, #20]
 800e6d8:	61bb      	str	r3, [r7, #24]
    for (lpcb = tcp_listen_pcbs.listen_pcbs; lpcb != NULL; lpcb = lpcb->next) {
 800e6da:	697b      	ldr	r3, [r7, #20]
 800e6dc:	68db      	ldr	r3, [r3, #12]
 800e6de:	617b      	str	r3, [r7, #20]
 800e6e0:	697b      	ldr	r3, [r7, #20]
 800e6e2:	2b00      	cmp	r3, #0
 800e6e4:	d1d1      	bne.n	800e68a <tcp_input+0x40a>
 800e6e6:	e000      	b.n	800e6ea <tcp_input+0x46a>
            break;
 800e6e8:	bf00      	nop
      /* only pass to ANY if no specific local IP has been found */
      lpcb = lpcb_any;
      prev = lpcb_prev;
    }
#endif /* SO_REUSE */
    if (lpcb != NULL) {
 800e6ea:	697b      	ldr	r3, [r7, #20]
 800e6ec:	2b00      	cmp	r3, #0
 800e6ee:	d029      	beq.n	800e744 <tcp_input+0x4c4>
      /* Move this PCB to the front of the list so that subsequent
         lookups will be faster (we exploit locality in TCP segment
         arrivals). */
      if (prev != NULL) {
 800e6f0:	69bb      	ldr	r3, [r7, #24]
 800e6f2:	2b00      	cmp	r3, #0
 800e6f4:	d00a      	beq.n	800e70c <tcp_input+0x48c>
        ((struct tcp_pcb_listen *)prev)->next = lpcb->next;
 800e6f6:	697b      	ldr	r3, [r7, #20]
 800e6f8:	68da      	ldr	r2, [r3, #12]
 800e6fa:	69bb      	ldr	r3, [r7, #24]
 800e6fc:	60da      	str	r2, [r3, #12]
        /* our successor is the remainder of the listening list */
        lpcb->next = tcp_listen_pcbs.listen_pcbs;
 800e6fe:	4b10      	ldr	r3, [pc, #64]	; (800e740 <tcp_input+0x4c0>)
 800e700:	681a      	ldr	r2, [r3, #0]
 800e702:	697b      	ldr	r3, [r7, #20]
 800e704:	60da      	str	r2, [r3, #12]
        /* put this listening pcb at the head of the listening list */
        tcp_listen_pcbs.listen_pcbs = lpcb;
 800e706:	4a0e      	ldr	r2, [pc, #56]	; (800e740 <tcp_input+0x4c0>)
 800e708:	697b      	ldr	r3, [r7, #20]
 800e70a:	6013      	str	r3, [r2, #0]
#ifdef LWIP_HOOK_TCP_INPACKET_PCB
      if (LWIP_HOOK_TCP_INPACKET_PCB((struct tcp_pcb *)lpcb, tcphdr, tcphdr_optlen,
                                     tcphdr_opt1len, tcphdr_opt2, p) == ERR_OK)
#endif
      {
        tcp_listen_input(lpcb);
 800e70c:	6978      	ldr	r0, [r7, #20]
 800e70e:	f000 fa03 	bl	800eb18 <tcp_listen_input>
      }
      pbuf_free(p);
 800e712:	6878      	ldr	r0, [r7, #4]
 800e714:	f7fd fc14 	bl	800bf40 <pbuf_free>
      return;
 800e718:	e1a8      	b.n	800ea6c <tcp_input+0x7ec>
 800e71a:	bf00      	nop
 800e71c:	20008944 	.word	0x20008944
 800e720:	2000537c 	.word	0x2000537c
 800e724:	0801a60c 	.word	0x0801a60c
 800e728:	0801a738 	.word	0x0801a738
 800e72c:	0801a658 	.word	0x0801a658
 800e730:	20008928 	.word	0x20008928
 800e734:	0801a764 	.word	0x0801a764
 800e738:	2000892c 	.word	0x2000892c
 800e73c:	0801a790 	.word	0x0801a790
 800e740:	20008924 	.word	0x20008924
      tcphdr_opt1len, tcphdr_opt2, p) != ERR_OK) {
    pbuf_free(p);
    return;
  }
#endif
  if (pcb != NULL) {
 800e744:	69fb      	ldr	r3, [r7, #28]
 800e746:	2b00      	cmp	r3, #0
 800e748:	f000 8158 	beq.w	800e9fc <tcp_input+0x77c>
#if TCP_INPUT_DEBUG
    tcp_debug_print_state(pcb->state);
#endif /* TCP_INPUT_DEBUG */

    /* Set up a tcp_seg structure. */
    inseg.next = NULL;
 800e74c:	4b95      	ldr	r3, [pc, #596]	; (800e9a4 <tcp_input+0x724>)
 800e74e:	2200      	movs	r2, #0
 800e750:	601a      	str	r2, [r3, #0]
    inseg.len = p->tot_len;
 800e752:	687b      	ldr	r3, [r7, #4]
 800e754:	891a      	ldrh	r2, [r3, #8]
 800e756:	4b93      	ldr	r3, [pc, #588]	; (800e9a4 <tcp_input+0x724>)
 800e758:	811a      	strh	r2, [r3, #8]
    inseg.p = p;
 800e75a:	4a92      	ldr	r2, [pc, #584]	; (800e9a4 <tcp_input+0x724>)
 800e75c:	687b      	ldr	r3, [r7, #4]
 800e75e:	6053      	str	r3, [r2, #4]
    inseg.tcphdr = tcphdr;
 800e760:	4b91      	ldr	r3, [pc, #580]	; (800e9a8 <tcp_input+0x728>)
 800e762:	681b      	ldr	r3, [r3, #0]
 800e764:	4a8f      	ldr	r2, [pc, #572]	; (800e9a4 <tcp_input+0x724>)
 800e766:	60d3      	str	r3, [r2, #12]

    recv_data = NULL;
 800e768:	4b90      	ldr	r3, [pc, #576]	; (800e9ac <tcp_input+0x72c>)
 800e76a:	2200      	movs	r2, #0
 800e76c:	601a      	str	r2, [r3, #0]
    recv_flags = 0;
 800e76e:	4b90      	ldr	r3, [pc, #576]	; (800e9b0 <tcp_input+0x730>)
 800e770:	2200      	movs	r2, #0
 800e772:	701a      	strb	r2, [r3, #0]
    recv_acked = 0;
 800e774:	4b8f      	ldr	r3, [pc, #572]	; (800e9b4 <tcp_input+0x734>)
 800e776:	2200      	movs	r2, #0
 800e778:	801a      	strh	r2, [r3, #0]

    if (flags & TCP_PSH) {
 800e77a:	4b8f      	ldr	r3, [pc, #572]	; (800e9b8 <tcp_input+0x738>)
 800e77c:	781b      	ldrb	r3, [r3, #0]
 800e77e:	f003 0308 	and.w	r3, r3, #8
 800e782:	2b00      	cmp	r3, #0
 800e784:	d006      	beq.n	800e794 <tcp_input+0x514>
      p->flags |= PBUF_FLAG_PUSH;
 800e786:	687b      	ldr	r3, [r7, #4]
 800e788:	7b5b      	ldrb	r3, [r3, #13]
 800e78a:	f043 0301 	orr.w	r3, r3, #1
 800e78e:	b2da      	uxtb	r2, r3
 800e790:	687b      	ldr	r3, [r7, #4]
 800e792:	735a      	strb	r2, [r3, #13]
    }

    /* If there is data which was previously "refused" by upper layer */
    if (pcb->refused_data != NULL) {
 800e794:	69fb      	ldr	r3, [r7, #28]
 800e796:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800e798:	2b00      	cmp	r3, #0
 800e79a:	d017      	beq.n	800e7cc <tcp_input+0x54c>
      if ((tcp_process_refused_data(pcb) == ERR_ABRT) ||
 800e79c:	69f8      	ldr	r0, [r7, #28]
 800e79e:	f7ff f879 	bl	800d894 <tcp_process_refused_data>
 800e7a2:	4603      	mov	r3, r0
 800e7a4:	f113 0f0d 	cmn.w	r3, #13
 800e7a8:	d007      	beq.n	800e7ba <tcp_input+0x53a>
          ((pcb->refused_data != NULL) && (tcplen > 0))) {
 800e7aa:	69fb      	ldr	r3, [r7, #28]
 800e7ac:	6f9b      	ldr	r3, [r3, #120]	; 0x78
      if ((tcp_process_refused_data(pcb) == ERR_ABRT) ||
 800e7ae:	2b00      	cmp	r3, #0
 800e7b0:	d00c      	beq.n	800e7cc <tcp_input+0x54c>
          ((pcb->refused_data != NULL) && (tcplen > 0))) {
 800e7b2:	4b82      	ldr	r3, [pc, #520]	; (800e9bc <tcp_input+0x73c>)
 800e7b4:	881b      	ldrh	r3, [r3, #0]
 800e7b6:	2b00      	cmp	r3, #0
 800e7b8:	d008      	beq.n	800e7cc <tcp_input+0x54c>
        /* pcb has been aborted or refused data is still refused and the new
           segment contains data */
        if (pcb->rcv_ann_wnd == 0) {
 800e7ba:	69fb      	ldr	r3, [r7, #28]
 800e7bc:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800e7be:	2b00      	cmp	r3, #0
 800e7c0:	f040 80e3 	bne.w	800e98a <tcp_input+0x70a>
          /* this is a zero-window probe, we respond to it with current RCV.NXT
          and drop the data segment */
          tcp_send_empty_ack(pcb);
 800e7c4:	69f8      	ldr	r0, [r7, #28]
 800e7c6:	f003 fe05 	bl	80123d4 <tcp_send_empty_ack>
        }
        TCP_STATS_INC(tcp.drop);
        MIB2_STATS_INC(mib2.tcpinerrs);
        goto aborted;
 800e7ca:	e0de      	b.n	800e98a <tcp_input+0x70a>
      }
    }
    tcp_input_pcb = pcb;
 800e7cc:	4a7c      	ldr	r2, [pc, #496]	; (800e9c0 <tcp_input+0x740>)
 800e7ce:	69fb      	ldr	r3, [r7, #28]
 800e7d0:	6013      	str	r3, [r2, #0]
    err = tcp_process(pcb);
 800e7d2:	69f8      	ldr	r0, [r7, #28]
 800e7d4:	f000 fb18 	bl	800ee08 <tcp_process>
 800e7d8:	4603      	mov	r3, r0
 800e7da:	74fb      	strb	r3, [r7, #19]
    /* A return value of ERR_ABRT means that tcp_abort() was called
       and that the pcb has been freed. If so, we don't do anything. */
    if (err != ERR_ABRT) {
 800e7dc:	f997 3013 	ldrsb.w	r3, [r7, #19]
 800e7e0:	f113 0f0d 	cmn.w	r3, #13
 800e7e4:	f000 80d3 	beq.w	800e98e <tcp_input+0x70e>
      if (recv_flags & TF_RESET) {
 800e7e8:	4b71      	ldr	r3, [pc, #452]	; (800e9b0 <tcp_input+0x730>)
 800e7ea:	781b      	ldrb	r3, [r3, #0]
 800e7ec:	f003 0308 	and.w	r3, r3, #8
 800e7f0:	2b00      	cmp	r3, #0
 800e7f2:	d015      	beq.n	800e820 <tcp_input+0x5a0>
        /* TF_RESET means that the connection was reset by the other
           end. We then call the error callback to inform the
           application that the connection is dead before we
           deallocate the PCB. */
        TCP_EVENT_ERR(pcb->state, pcb->errf, pcb->callback_arg, ERR_RST);
 800e7f4:	69fb      	ldr	r3, [r7, #28]
 800e7f6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800e7fa:	2b00      	cmp	r3, #0
 800e7fc:	d008      	beq.n	800e810 <tcp_input+0x590>
 800e7fe:	69fb      	ldr	r3, [r7, #28]
 800e800:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800e804:	69fa      	ldr	r2, [r7, #28]
 800e806:	6912      	ldr	r2, [r2, #16]
 800e808:	f06f 010d 	mvn.w	r1, #13
 800e80c:	4610      	mov	r0, r2
 800e80e:	4798      	blx	r3
        tcp_pcb_remove(&tcp_active_pcbs, pcb);
 800e810:	69f9      	ldr	r1, [r7, #28]
 800e812:	486c      	ldr	r0, [pc, #432]	; (800e9c4 <tcp_input+0x744>)
 800e814:	f7ff fbbc 	bl	800df90 <tcp_pcb_remove>
        tcp_free(pcb);
 800e818:	69f8      	ldr	r0, [r7, #28]
 800e81a:	f7fd ff9b 	bl	800c754 <tcp_free>
 800e81e:	e0da      	b.n	800e9d6 <tcp_input+0x756>
      } else {
        err = ERR_OK;
 800e820:	2300      	movs	r3, #0
 800e822:	74fb      	strb	r3, [r7, #19]
        /* If the application has registered a "sent" function to be
           called when new send buffer space is available, we call it
           now. */
        if (recv_acked > 0) {
 800e824:	4b63      	ldr	r3, [pc, #396]	; (800e9b4 <tcp_input+0x734>)
 800e826:	881b      	ldrh	r3, [r3, #0]
 800e828:	2b00      	cmp	r3, #0
 800e82a:	d01d      	beq.n	800e868 <tcp_input+0x5e8>
          while (acked > 0) {
            acked16 = (u16_t)LWIP_MIN(acked, 0xffffu);
            acked -= acked16;
#else
          {
            acked16 = recv_acked;
 800e82c:	4b61      	ldr	r3, [pc, #388]	; (800e9b4 <tcp_input+0x734>)
 800e82e:	881b      	ldrh	r3, [r3, #0]
 800e830:	81fb      	strh	r3, [r7, #14]
#endif
            TCP_EVENT_SENT(pcb, (u16_t)acked16, err);
 800e832:	69fb      	ldr	r3, [r7, #28]
 800e834:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800e838:	2b00      	cmp	r3, #0
 800e83a:	d00a      	beq.n	800e852 <tcp_input+0x5d2>
 800e83c:	69fb      	ldr	r3, [r7, #28]
 800e83e:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800e842:	69fa      	ldr	r2, [r7, #28]
 800e844:	6910      	ldr	r0, [r2, #16]
 800e846:	89fa      	ldrh	r2, [r7, #14]
 800e848:	69f9      	ldr	r1, [r7, #28]
 800e84a:	4798      	blx	r3
 800e84c:	4603      	mov	r3, r0
 800e84e:	74fb      	strb	r3, [r7, #19]
 800e850:	e001      	b.n	800e856 <tcp_input+0x5d6>
 800e852:	2300      	movs	r3, #0
 800e854:	74fb      	strb	r3, [r7, #19]
            if (err == ERR_ABRT) {
 800e856:	f997 3013 	ldrsb.w	r3, [r7, #19]
 800e85a:	f113 0f0d 	cmn.w	r3, #13
 800e85e:	f000 8098 	beq.w	800e992 <tcp_input+0x712>
              goto aborted;
            }
          }
          recv_acked = 0;
 800e862:	4b54      	ldr	r3, [pc, #336]	; (800e9b4 <tcp_input+0x734>)
 800e864:	2200      	movs	r2, #0
 800e866:	801a      	strh	r2, [r3, #0]
        }
        if (tcp_input_delayed_close(pcb)) {
 800e868:	69f8      	ldr	r0, [r7, #28]
 800e86a:	f000 f915 	bl	800ea98 <tcp_input_delayed_close>
 800e86e:	4603      	mov	r3, r0
 800e870:	2b00      	cmp	r3, #0
 800e872:	f040 8090 	bne.w	800e996 <tcp_input+0x716>
#if TCP_QUEUE_OOSEQ && LWIP_WND_SCALE
        while (recv_data != NULL) {
          struct pbuf *rest = NULL;
          pbuf_split_64k(recv_data, &rest);
#else /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
        if (recv_data != NULL) {
 800e876:	4b4d      	ldr	r3, [pc, #308]	; (800e9ac <tcp_input+0x72c>)
 800e878:	681b      	ldr	r3, [r3, #0]
 800e87a:	2b00      	cmp	r3, #0
 800e87c:	d041      	beq.n	800e902 <tcp_input+0x682>
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */

          LWIP_ASSERT("pcb->refused_data == NULL", pcb->refused_data == NULL);
 800e87e:	69fb      	ldr	r3, [r7, #28]
 800e880:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800e882:	2b00      	cmp	r3, #0
 800e884:	d006      	beq.n	800e894 <tcp_input+0x614>
 800e886:	4b50      	ldr	r3, [pc, #320]	; (800e9c8 <tcp_input+0x748>)
 800e888:	f44f 72f3 	mov.w	r2, #486	; 0x1e6
 800e88c:	494f      	ldr	r1, [pc, #316]	; (800e9cc <tcp_input+0x74c>)
 800e88e:	4850      	ldr	r0, [pc, #320]	; (800e9d0 <tcp_input+0x750>)
 800e890:	f009 fdfa 	bl	8018488 <iprintf>
          if (pcb->flags & TF_RXCLOSED) {
 800e894:	69fb      	ldr	r3, [r7, #28]
 800e896:	8b5b      	ldrh	r3, [r3, #26]
 800e898:	f003 0310 	and.w	r3, r3, #16
 800e89c:	2b00      	cmp	r3, #0
 800e89e:	d008      	beq.n	800e8b2 <tcp_input+0x632>
            /* received data although already closed -> abort (send RST) to
               notify the remote host that not all data has been processed */
            pbuf_free(recv_data);
 800e8a0:	4b42      	ldr	r3, [pc, #264]	; (800e9ac <tcp_input+0x72c>)
 800e8a2:	681b      	ldr	r3, [r3, #0]
 800e8a4:	4618      	mov	r0, r3
 800e8a6:	f7fd fb4b 	bl	800bf40 <pbuf_free>
#if TCP_QUEUE_OOSEQ && LWIP_WND_SCALE
            if (rest != NULL) {
              pbuf_free(rest);
            }
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
            tcp_abort(pcb);
 800e8aa:	69f8      	ldr	r0, [r7, #28]
 800e8ac:	f7fe fa3a 	bl	800cd24 <tcp_abort>
            goto aborted;
 800e8b0:	e091      	b.n	800e9d6 <tcp_input+0x756>
          }

          /* Notify application that data has been received. */
          TCP_EVENT_RECV(pcb, recv_data, ERR_OK, err);
 800e8b2:	69fb      	ldr	r3, [r7, #28]
 800e8b4:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800e8b8:	2b00      	cmp	r3, #0
 800e8ba:	d00c      	beq.n	800e8d6 <tcp_input+0x656>
 800e8bc:	69fb      	ldr	r3, [r7, #28]
 800e8be:	f8d3 4084 	ldr.w	r4, [r3, #132]	; 0x84
 800e8c2:	69fb      	ldr	r3, [r7, #28]
 800e8c4:	6918      	ldr	r0, [r3, #16]
 800e8c6:	4b39      	ldr	r3, [pc, #228]	; (800e9ac <tcp_input+0x72c>)
 800e8c8:	681a      	ldr	r2, [r3, #0]
 800e8ca:	2300      	movs	r3, #0
 800e8cc:	69f9      	ldr	r1, [r7, #28]
 800e8ce:	47a0      	blx	r4
 800e8d0:	4603      	mov	r3, r0
 800e8d2:	74fb      	strb	r3, [r7, #19]
 800e8d4:	e008      	b.n	800e8e8 <tcp_input+0x668>
 800e8d6:	4b35      	ldr	r3, [pc, #212]	; (800e9ac <tcp_input+0x72c>)
 800e8d8:	681a      	ldr	r2, [r3, #0]
 800e8da:	2300      	movs	r3, #0
 800e8dc:	69f9      	ldr	r1, [r7, #28]
 800e8de:	2000      	movs	r0, #0
 800e8e0:	f7ff f8ae 	bl	800da40 <tcp_recv_null>
 800e8e4:	4603      	mov	r3, r0
 800e8e6:	74fb      	strb	r3, [r7, #19]
          if (err == ERR_ABRT) {
 800e8e8:	f997 3013 	ldrsb.w	r3, [r7, #19]
 800e8ec:	f113 0f0d 	cmn.w	r3, #13
 800e8f0:	d053      	beq.n	800e99a <tcp_input+0x71a>
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
            goto aborted;
          }

          /* If the upper layer can't receive this data, store it */
          if (err != ERR_OK) {
 800e8f2:	f997 3013 	ldrsb.w	r3, [r7, #19]
 800e8f6:	2b00      	cmp	r3, #0
 800e8f8:	d003      	beq.n	800e902 <tcp_input+0x682>
#if TCP_QUEUE_OOSEQ && LWIP_WND_SCALE
            if (rest != NULL) {
              pbuf_cat(recv_data, rest);
            }
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
            pcb->refused_data = recv_data;
 800e8fa:	4b2c      	ldr	r3, [pc, #176]	; (800e9ac <tcp_input+0x72c>)
 800e8fc:	681a      	ldr	r2, [r3, #0]
 800e8fe:	69fb      	ldr	r3, [r7, #28]
 800e900:	679a      	str	r2, [r3, #120]	; 0x78
          }
        }

        /* If a FIN segment was received, we call the callback
           function with a NULL buffer to indicate EOF. */
        if (recv_flags & TF_GOT_FIN) {
 800e902:	4b2b      	ldr	r3, [pc, #172]	; (800e9b0 <tcp_input+0x730>)
 800e904:	781b      	ldrb	r3, [r3, #0]
 800e906:	f003 0320 	and.w	r3, r3, #32
 800e90a:	2b00      	cmp	r3, #0
 800e90c:	d030      	beq.n	800e970 <tcp_input+0x6f0>
          if (pcb->refused_data != NULL) {
 800e90e:	69fb      	ldr	r3, [r7, #28]
 800e910:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800e912:	2b00      	cmp	r3, #0
 800e914:	d009      	beq.n	800e92a <tcp_input+0x6aa>
            /* Delay this if we have refused data. */
            pcb->refused_data->flags |= PBUF_FLAG_TCP_FIN;
 800e916:	69fb      	ldr	r3, [r7, #28]
 800e918:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800e91a:	7b5a      	ldrb	r2, [r3, #13]
 800e91c:	69fb      	ldr	r3, [r7, #28]
 800e91e:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800e920:	f042 0220 	orr.w	r2, r2, #32
 800e924:	b2d2      	uxtb	r2, r2
 800e926:	735a      	strb	r2, [r3, #13]
 800e928:	e022      	b.n	800e970 <tcp_input+0x6f0>
          } else {
            /* correct rcv_wnd as the application won't call tcp_recved()
               for the FIN's seqno */
            if (pcb->rcv_wnd != TCP_WND_MAX(pcb)) {
 800e92a:	69fb      	ldr	r3, [r7, #28]
 800e92c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800e92e:	f5b3 6f06 	cmp.w	r3, #2144	; 0x860
 800e932:	d005      	beq.n	800e940 <tcp_input+0x6c0>
              pcb->rcv_wnd++;
 800e934:	69fb      	ldr	r3, [r7, #28]
 800e936:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800e938:	3301      	adds	r3, #1
 800e93a:	b29a      	uxth	r2, r3
 800e93c:	69fb      	ldr	r3, [r7, #28]
 800e93e:	851a      	strh	r2, [r3, #40]	; 0x28
            }
            TCP_EVENT_CLOSED(pcb, err);
 800e940:	69fb      	ldr	r3, [r7, #28]
 800e942:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800e946:	2b00      	cmp	r3, #0
 800e948:	d00b      	beq.n	800e962 <tcp_input+0x6e2>
 800e94a:	69fb      	ldr	r3, [r7, #28]
 800e94c:	f8d3 4084 	ldr.w	r4, [r3, #132]	; 0x84
 800e950:	69fb      	ldr	r3, [r7, #28]
 800e952:	6918      	ldr	r0, [r3, #16]
 800e954:	2300      	movs	r3, #0
 800e956:	2200      	movs	r2, #0
 800e958:	69f9      	ldr	r1, [r7, #28]
 800e95a:	47a0      	blx	r4
 800e95c:	4603      	mov	r3, r0
 800e95e:	74fb      	strb	r3, [r7, #19]
 800e960:	e001      	b.n	800e966 <tcp_input+0x6e6>
 800e962:	2300      	movs	r3, #0
 800e964:	74fb      	strb	r3, [r7, #19]
            if (err == ERR_ABRT) {
 800e966:	f997 3013 	ldrsb.w	r3, [r7, #19]
 800e96a:	f113 0f0d 	cmn.w	r3, #13
 800e96e:	d016      	beq.n	800e99e <tcp_input+0x71e>
              goto aborted;
            }
          }
        }

        tcp_input_pcb = NULL;
 800e970:	4b13      	ldr	r3, [pc, #76]	; (800e9c0 <tcp_input+0x740>)
 800e972:	2200      	movs	r2, #0
 800e974:	601a      	str	r2, [r3, #0]
        if (tcp_input_delayed_close(pcb)) {
 800e976:	69f8      	ldr	r0, [r7, #28]
 800e978:	f000 f88e 	bl	800ea98 <tcp_input_delayed_close>
 800e97c:	4603      	mov	r3, r0
 800e97e:	2b00      	cmp	r3, #0
 800e980:	d128      	bne.n	800e9d4 <tcp_input+0x754>
          goto aborted;
        }
        /* Try to send something out. */
        tcp_output(pcb);
 800e982:	69f8      	ldr	r0, [r7, #28]
 800e984:	f002 ff20 	bl	80117c8 <tcp_output>
 800e988:	e025      	b.n	800e9d6 <tcp_input+0x756>
        goto aborted;
 800e98a:	bf00      	nop
 800e98c:	e023      	b.n	800e9d6 <tcp_input+0x756>
#endif /* TCP_INPUT_DEBUG */
      }
    }
    /* Jump target if pcb has been aborted in a callback (by calling tcp_abort()).
       Below this line, 'pcb' may not be dereferenced! */
aborted:
 800e98e:	bf00      	nop
 800e990:	e021      	b.n	800e9d6 <tcp_input+0x756>
              goto aborted;
 800e992:	bf00      	nop
 800e994:	e01f      	b.n	800e9d6 <tcp_input+0x756>
          goto aborted;
 800e996:	bf00      	nop
 800e998:	e01d      	b.n	800e9d6 <tcp_input+0x756>
            goto aborted;
 800e99a:	bf00      	nop
 800e99c:	e01b      	b.n	800e9d6 <tcp_input+0x756>
              goto aborted;
 800e99e:	bf00      	nop
 800e9a0:	e019      	b.n	800e9d6 <tcp_input+0x756>
 800e9a2:	bf00      	nop
 800e9a4:	20008934 	.word	0x20008934
 800e9a8:	20008944 	.word	0x20008944
 800e9ac:	20008964 	.word	0x20008964
 800e9b0:	20008961 	.word	0x20008961
 800e9b4:	2000895c 	.word	0x2000895c
 800e9b8:	20008960 	.word	0x20008960
 800e9bc:	2000895e 	.word	0x2000895e
 800e9c0:	20008968 	.word	0x20008968
 800e9c4:	20008928 	.word	0x20008928
 800e9c8:	0801a60c 	.word	0x0801a60c
 800e9cc:	0801a7c0 	.word	0x0801a7c0
 800e9d0:	0801a658 	.word	0x0801a658
          goto aborted;
 800e9d4:	bf00      	nop
    tcp_input_pcb = NULL;
 800e9d6:	4b27      	ldr	r3, [pc, #156]	; (800ea74 <tcp_input+0x7f4>)
 800e9d8:	2200      	movs	r2, #0
 800e9da:	601a      	str	r2, [r3, #0]
    recv_data = NULL;
 800e9dc:	4b26      	ldr	r3, [pc, #152]	; (800ea78 <tcp_input+0x7f8>)
 800e9de:	2200      	movs	r2, #0
 800e9e0:	601a      	str	r2, [r3, #0]

    /* give up our reference to inseg.p */
    if (inseg.p != NULL) {
 800e9e2:	4b26      	ldr	r3, [pc, #152]	; (800ea7c <tcp_input+0x7fc>)
 800e9e4:	685b      	ldr	r3, [r3, #4]
 800e9e6:	2b00      	cmp	r3, #0
 800e9e8:	d03f      	beq.n	800ea6a <tcp_input+0x7ea>
      pbuf_free(inseg.p);
 800e9ea:	4b24      	ldr	r3, [pc, #144]	; (800ea7c <tcp_input+0x7fc>)
 800e9ec:	685b      	ldr	r3, [r3, #4]
 800e9ee:	4618      	mov	r0, r3
 800e9f0:	f7fd faa6 	bl	800bf40 <pbuf_free>
      inseg.p = NULL;
 800e9f4:	4b21      	ldr	r3, [pc, #132]	; (800ea7c <tcp_input+0x7fc>)
 800e9f6:	2200      	movs	r2, #0
 800e9f8:	605a      	str	r2, [r3, #4]
    pbuf_free(p);
  }

  LWIP_ASSERT("tcp_input: tcp_pcbs_sane()", tcp_pcbs_sane());
  PERF_STOP("tcp_input");
  return;
 800e9fa:	e036      	b.n	800ea6a <tcp_input+0x7ea>
    if (!(TCPH_FLAGS(tcphdr) & TCP_RST)) {
 800e9fc:	4b20      	ldr	r3, [pc, #128]	; (800ea80 <tcp_input+0x800>)
 800e9fe:	681b      	ldr	r3, [r3, #0]
 800ea00:	899b      	ldrh	r3, [r3, #12]
 800ea02:	b29b      	uxth	r3, r3
 800ea04:	4618      	mov	r0, r3
 800ea06:	f7fb fc43 	bl	800a290 <lwip_htons>
 800ea0a:	4603      	mov	r3, r0
 800ea0c:	b2db      	uxtb	r3, r3
 800ea0e:	f003 0304 	and.w	r3, r3, #4
 800ea12:	2b00      	cmp	r3, #0
 800ea14:	d118      	bne.n	800ea48 <tcp_input+0x7c8>
      tcp_rst(NULL, ackno, seqno + tcplen, ip_current_dest_addr(),
 800ea16:	4b1b      	ldr	r3, [pc, #108]	; (800ea84 <tcp_input+0x804>)
 800ea18:	6819      	ldr	r1, [r3, #0]
 800ea1a:	4b1b      	ldr	r3, [pc, #108]	; (800ea88 <tcp_input+0x808>)
 800ea1c:	881b      	ldrh	r3, [r3, #0]
 800ea1e:	461a      	mov	r2, r3
 800ea20:	4b1a      	ldr	r3, [pc, #104]	; (800ea8c <tcp_input+0x80c>)
 800ea22:	681b      	ldr	r3, [r3, #0]
 800ea24:	18d0      	adds	r0, r2, r3
              ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 800ea26:	4b16      	ldr	r3, [pc, #88]	; (800ea80 <tcp_input+0x800>)
 800ea28:	681b      	ldr	r3, [r3, #0]
      tcp_rst(NULL, ackno, seqno + tcplen, ip_current_dest_addr(),
 800ea2a:	885b      	ldrh	r3, [r3, #2]
 800ea2c:	b29b      	uxth	r3, r3
              ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 800ea2e:	4a14      	ldr	r2, [pc, #80]	; (800ea80 <tcp_input+0x800>)
 800ea30:	6812      	ldr	r2, [r2, #0]
      tcp_rst(NULL, ackno, seqno + tcplen, ip_current_dest_addr(),
 800ea32:	8812      	ldrh	r2, [r2, #0]
 800ea34:	b292      	uxth	r2, r2
 800ea36:	9202      	str	r2, [sp, #8]
 800ea38:	9301      	str	r3, [sp, #4]
 800ea3a:	4b15      	ldr	r3, [pc, #84]	; (800ea90 <tcp_input+0x810>)
 800ea3c:	9300      	str	r3, [sp, #0]
 800ea3e:	4b15      	ldr	r3, [pc, #84]	; (800ea94 <tcp_input+0x814>)
 800ea40:	4602      	mov	r2, r0
 800ea42:	2000      	movs	r0, #0
 800ea44:	f003 fc74 	bl	8012330 <tcp_rst>
    pbuf_free(p);
 800ea48:	6878      	ldr	r0, [r7, #4]
 800ea4a:	f7fd fa79 	bl	800bf40 <pbuf_free>
  return;
 800ea4e:	e00c      	b.n	800ea6a <tcp_input+0x7ea>
    goto dropped;
 800ea50:	bf00      	nop
 800ea52:	e006      	b.n	800ea62 <tcp_input+0x7e2>
    goto dropped;
 800ea54:	bf00      	nop
 800ea56:	e004      	b.n	800ea62 <tcp_input+0x7e2>
    goto dropped;
 800ea58:	bf00      	nop
 800ea5a:	e002      	b.n	800ea62 <tcp_input+0x7e2>
      goto dropped;
 800ea5c:	bf00      	nop
 800ea5e:	e000      	b.n	800ea62 <tcp_input+0x7e2>
      goto dropped;
 800ea60:	bf00      	nop
dropped:
  TCP_STATS_INC(tcp.drop);
  MIB2_STATS_INC(mib2.tcpinerrs);
  pbuf_free(p);
 800ea62:	6878      	ldr	r0, [r7, #4]
 800ea64:	f7fd fa6c 	bl	800bf40 <pbuf_free>
 800ea68:	e000      	b.n	800ea6c <tcp_input+0x7ec>
  return;
 800ea6a:	bf00      	nop
}
 800ea6c:	3724      	adds	r7, #36	; 0x24
 800ea6e:	46bd      	mov	sp, r7
 800ea70:	bd90      	pop	{r4, r7, pc}
 800ea72:	bf00      	nop
 800ea74:	20008968 	.word	0x20008968
 800ea78:	20008964 	.word	0x20008964
 800ea7c:	20008934 	.word	0x20008934
 800ea80:	20008944 	.word	0x20008944
 800ea84:	20008958 	.word	0x20008958
 800ea88:	2000895e 	.word	0x2000895e
 800ea8c:	20008954 	.word	0x20008954
 800ea90:	2000538c 	.word	0x2000538c
 800ea94:	20005390 	.word	0x20005390

0800ea98 <tcp_input_delayed_close>:
 * any more.
 * @returns 1 if the pcb has been closed and deallocated, 0 otherwise
 */
static int
tcp_input_delayed_close(struct tcp_pcb *pcb)
{
 800ea98:	b580      	push	{r7, lr}
 800ea9a:	b082      	sub	sp, #8
 800ea9c:	af00      	add	r7, sp, #0
 800ea9e:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_input_delayed_close: invalid pcb", pcb != NULL);
 800eaa0:	687b      	ldr	r3, [r7, #4]
 800eaa2:	2b00      	cmp	r3, #0
 800eaa4:	d106      	bne.n	800eab4 <tcp_input_delayed_close+0x1c>
 800eaa6:	4b17      	ldr	r3, [pc, #92]	; (800eb04 <tcp_input_delayed_close+0x6c>)
 800eaa8:	f240 225a 	movw	r2, #602	; 0x25a
 800eaac:	4916      	ldr	r1, [pc, #88]	; (800eb08 <tcp_input_delayed_close+0x70>)
 800eaae:	4817      	ldr	r0, [pc, #92]	; (800eb0c <tcp_input_delayed_close+0x74>)
 800eab0:	f009 fcea 	bl	8018488 <iprintf>

  if (recv_flags & TF_CLOSED) {
 800eab4:	4b16      	ldr	r3, [pc, #88]	; (800eb10 <tcp_input_delayed_close+0x78>)
 800eab6:	781b      	ldrb	r3, [r3, #0]
 800eab8:	f003 0310 	and.w	r3, r3, #16
 800eabc:	2b00      	cmp	r3, #0
 800eabe:	d01c      	beq.n	800eafa <tcp_input_delayed_close+0x62>
    /* The connection has been closed and we will deallocate the
        PCB. */
    if (!(pcb->flags & TF_RXCLOSED)) {
 800eac0:	687b      	ldr	r3, [r7, #4]
 800eac2:	8b5b      	ldrh	r3, [r3, #26]
 800eac4:	f003 0310 	and.w	r3, r3, #16
 800eac8:	2b00      	cmp	r3, #0
 800eaca:	d10d      	bne.n	800eae8 <tcp_input_delayed_close+0x50>
      /* Connection closed although the application has only shut down the
          tx side: call the PCB's err callback and indicate the closure to
          ensure the application doesn't continue using the PCB. */
      TCP_EVENT_ERR(pcb->state, pcb->errf, pcb->callback_arg, ERR_CLSD);
 800eacc:	687b      	ldr	r3, [r7, #4]
 800eace:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800ead2:	2b00      	cmp	r3, #0
 800ead4:	d008      	beq.n	800eae8 <tcp_input_delayed_close+0x50>
 800ead6:	687b      	ldr	r3, [r7, #4]
 800ead8:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800eadc:	687a      	ldr	r2, [r7, #4]
 800eade:	6912      	ldr	r2, [r2, #16]
 800eae0:	f06f 010e 	mvn.w	r1, #14
 800eae4:	4610      	mov	r0, r2
 800eae6:	4798      	blx	r3
    }
    tcp_pcb_remove(&tcp_active_pcbs, pcb);
 800eae8:	6879      	ldr	r1, [r7, #4]
 800eaea:	480a      	ldr	r0, [pc, #40]	; (800eb14 <tcp_input_delayed_close+0x7c>)
 800eaec:	f7ff fa50 	bl	800df90 <tcp_pcb_remove>
    tcp_free(pcb);
 800eaf0:	6878      	ldr	r0, [r7, #4]
 800eaf2:	f7fd fe2f 	bl	800c754 <tcp_free>
    return 1;
 800eaf6:	2301      	movs	r3, #1
 800eaf8:	e000      	b.n	800eafc <tcp_input_delayed_close+0x64>
  }
  return 0;
 800eafa:	2300      	movs	r3, #0
}
 800eafc:	4618      	mov	r0, r3
 800eafe:	3708      	adds	r7, #8
 800eb00:	46bd      	mov	sp, r7
 800eb02:	bd80      	pop	{r7, pc}
 800eb04:	0801a60c 	.word	0x0801a60c
 800eb08:	0801a7dc 	.word	0x0801a7dc
 800eb0c:	0801a658 	.word	0x0801a658
 800eb10:	20008961 	.word	0x20008961
 800eb14:	20008928 	.word	0x20008928

0800eb18 <tcp_listen_input>:
 * @note the segment which arrived is saved in global variables, therefore only the pcb
 *       involved is passed as a parameter to this function
 */
static void
tcp_listen_input(struct tcp_pcb_listen *pcb)
{
 800eb18:	b590      	push	{r4, r7, lr}
 800eb1a:	b08b      	sub	sp, #44	; 0x2c
 800eb1c:	af04      	add	r7, sp, #16
 800eb1e:	6078      	str	r0, [r7, #4]
  struct tcp_pcb *npcb;
  u32_t iss;
  err_t rc;

  if (flags & TCP_RST) {
 800eb20:	4b6f      	ldr	r3, [pc, #444]	; (800ece0 <tcp_listen_input+0x1c8>)
 800eb22:	781b      	ldrb	r3, [r3, #0]
 800eb24:	f003 0304 	and.w	r3, r3, #4
 800eb28:	2b00      	cmp	r3, #0
 800eb2a:	f040 80d2 	bne.w	800ecd2 <tcp_listen_input+0x1ba>
    /* An incoming RST should be ignored. Return. */
    return;
  }

  LWIP_ASSERT("tcp_listen_input: invalid pcb", pcb != NULL);
 800eb2e:	687b      	ldr	r3, [r7, #4]
 800eb30:	2b00      	cmp	r3, #0
 800eb32:	d106      	bne.n	800eb42 <tcp_listen_input+0x2a>
 800eb34:	4b6b      	ldr	r3, [pc, #428]	; (800ece4 <tcp_listen_input+0x1cc>)
 800eb36:	f240 2281 	movw	r2, #641	; 0x281
 800eb3a:	496b      	ldr	r1, [pc, #428]	; (800ece8 <tcp_listen_input+0x1d0>)
 800eb3c:	486b      	ldr	r0, [pc, #428]	; (800ecec <tcp_listen_input+0x1d4>)
 800eb3e:	f009 fca3 	bl	8018488 <iprintf>

  /* In the LISTEN state, we check for incoming SYN segments,
     creates a new PCB, and responds with a SYN|ACK. */
  if (flags & TCP_ACK) {
 800eb42:	4b67      	ldr	r3, [pc, #412]	; (800ece0 <tcp_listen_input+0x1c8>)
 800eb44:	781b      	ldrb	r3, [r3, #0]
 800eb46:	f003 0310 	and.w	r3, r3, #16
 800eb4a:	2b00      	cmp	r3, #0
 800eb4c:	d019      	beq.n	800eb82 <tcp_listen_input+0x6a>
    /* For incoming segments with the ACK flag set, respond with a
       RST. */
    LWIP_DEBUGF(TCP_RST_DEBUG, ("tcp_listen_input: ACK in LISTEN, sending reset\n"));
    tcp_rst((const struct tcp_pcb *)pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 800eb4e:	4b68      	ldr	r3, [pc, #416]	; (800ecf0 <tcp_listen_input+0x1d8>)
 800eb50:	6819      	ldr	r1, [r3, #0]
 800eb52:	4b68      	ldr	r3, [pc, #416]	; (800ecf4 <tcp_listen_input+0x1dc>)
 800eb54:	881b      	ldrh	r3, [r3, #0]
 800eb56:	461a      	mov	r2, r3
 800eb58:	4b67      	ldr	r3, [pc, #412]	; (800ecf8 <tcp_listen_input+0x1e0>)
 800eb5a:	681b      	ldr	r3, [r3, #0]
 800eb5c:	18d0      	adds	r0, r2, r3
            ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 800eb5e:	4b67      	ldr	r3, [pc, #412]	; (800ecfc <tcp_listen_input+0x1e4>)
 800eb60:	681b      	ldr	r3, [r3, #0]
    tcp_rst((const struct tcp_pcb *)pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 800eb62:	885b      	ldrh	r3, [r3, #2]
 800eb64:	b29b      	uxth	r3, r3
            ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 800eb66:	4a65      	ldr	r2, [pc, #404]	; (800ecfc <tcp_listen_input+0x1e4>)
 800eb68:	6812      	ldr	r2, [r2, #0]
    tcp_rst((const struct tcp_pcb *)pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 800eb6a:	8812      	ldrh	r2, [r2, #0]
 800eb6c:	b292      	uxth	r2, r2
 800eb6e:	9202      	str	r2, [sp, #8]
 800eb70:	9301      	str	r3, [sp, #4]
 800eb72:	4b63      	ldr	r3, [pc, #396]	; (800ed00 <tcp_listen_input+0x1e8>)
 800eb74:	9300      	str	r3, [sp, #0]
 800eb76:	4b63      	ldr	r3, [pc, #396]	; (800ed04 <tcp_listen_input+0x1ec>)
 800eb78:	4602      	mov	r2, r0
 800eb7a:	6878      	ldr	r0, [r7, #4]
 800eb7c:	f003 fbd8 	bl	8012330 <tcp_rst>
      tcp_abandon(npcb, 0);
      return;
    }
    tcp_output(npcb);
  }
  return;
 800eb80:	e0a9      	b.n	800ecd6 <tcp_listen_input+0x1be>
  } else if (flags & TCP_SYN) {
 800eb82:	4b57      	ldr	r3, [pc, #348]	; (800ece0 <tcp_listen_input+0x1c8>)
 800eb84:	781b      	ldrb	r3, [r3, #0]
 800eb86:	f003 0302 	and.w	r3, r3, #2
 800eb8a:	2b00      	cmp	r3, #0
 800eb8c:	f000 80a3 	beq.w	800ecd6 <tcp_listen_input+0x1be>
    npcb = tcp_alloc(pcb->prio);
 800eb90:	687b      	ldr	r3, [r7, #4]
 800eb92:	7d5b      	ldrb	r3, [r3, #21]
 800eb94:	4618      	mov	r0, r3
 800eb96:	f7ff f877 	bl	800dc88 <tcp_alloc>
 800eb9a:	6178      	str	r0, [r7, #20]
    if (npcb == NULL) {
 800eb9c:	697b      	ldr	r3, [r7, #20]
 800eb9e:	2b00      	cmp	r3, #0
 800eba0:	d111      	bne.n	800ebc6 <tcp_listen_input+0xae>
      TCP_EVENT_ACCEPT(pcb, NULL, pcb->callback_arg, ERR_MEM, err);
 800eba2:	687b      	ldr	r3, [r7, #4]
 800eba4:	699b      	ldr	r3, [r3, #24]
 800eba6:	2b00      	cmp	r3, #0
 800eba8:	d00a      	beq.n	800ebc0 <tcp_listen_input+0xa8>
 800ebaa:	687b      	ldr	r3, [r7, #4]
 800ebac:	699b      	ldr	r3, [r3, #24]
 800ebae:	687a      	ldr	r2, [r7, #4]
 800ebb0:	6910      	ldr	r0, [r2, #16]
 800ebb2:	f04f 32ff 	mov.w	r2, #4294967295
 800ebb6:	2100      	movs	r1, #0
 800ebb8:	4798      	blx	r3
 800ebba:	4603      	mov	r3, r0
 800ebbc:	73bb      	strb	r3, [r7, #14]
      return;
 800ebbe:	e08b      	b.n	800ecd8 <tcp_listen_input+0x1c0>
      TCP_EVENT_ACCEPT(pcb, NULL, pcb->callback_arg, ERR_MEM, err);
 800ebc0:	23f0      	movs	r3, #240	; 0xf0
 800ebc2:	73bb      	strb	r3, [r7, #14]
      return;
 800ebc4:	e088      	b.n	800ecd8 <tcp_listen_input+0x1c0>
    ip_addr_copy(npcb->local_ip, *ip_current_dest_addr());
 800ebc6:	4b50      	ldr	r3, [pc, #320]	; (800ed08 <tcp_listen_input+0x1f0>)
 800ebc8:	695a      	ldr	r2, [r3, #20]
 800ebca:	697b      	ldr	r3, [r7, #20]
 800ebcc:	601a      	str	r2, [r3, #0]
    ip_addr_copy(npcb->remote_ip, *ip_current_src_addr());
 800ebce:	4b4e      	ldr	r3, [pc, #312]	; (800ed08 <tcp_listen_input+0x1f0>)
 800ebd0:	691a      	ldr	r2, [r3, #16]
 800ebd2:	697b      	ldr	r3, [r7, #20]
 800ebd4:	605a      	str	r2, [r3, #4]
    npcb->local_port = pcb->local_port;
 800ebd6:	687b      	ldr	r3, [r7, #4]
 800ebd8:	8ada      	ldrh	r2, [r3, #22]
 800ebda:	697b      	ldr	r3, [r7, #20]
 800ebdc:	82da      	strh	r2, [r3, #22]
    npcb->remote_port = tcphdr->src;
 800ebde:	4b47      	ldr	r3, [pc, #284]	; (800ecfc <tcp_listen_input+0x1e4>)
 800ebe0:	681b      	ldr	r3, [r3, #0]
 800ebe2:	881b      	ldrh	r3, [r3, #0]
 800ebe4:	b29a      	uxth	r2, r3
 800ebe6:	697b      	ldr	r3, [r7, #20]
 800ebe8:	831a      	strh	r2, [r3, #24]
    npcb->state = SYN_RCVD;
 800ebea:	697b      	ldr	r3, [r7, #20]
 800ebec:	2203      	movs	r2, #3
 800ebee:	751a      	strb	r2, [r3, #20]
    npcb->rcv_nxt = seqno + 1;
 800ebf0:	4b41      	ldr	r3, [pc, #260]	; (800ecf8 <tcp_listen_input+0x1e0>)
 800ebf2:	681b      	ldr	r3, [r3, #0]
 800ebf4:	1c5a      	adds	r2, r3, #1
 800ebf6:	697b      	ldr	r3, [r7, #20]
 800ebf8:	625a      	str	r2, [r3, #36]	; 0x24
    npcb->rcv_ann_right_edge = npcb->rcv_nxt;
 800ebfa:	697b      	ldr	r3, [r7, #20]
 800ebfc:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800ebfe:	697b      	ldr	r3, [r7, #20]
 800ec00:	62da      	str	r2, [r3, #44]	; 0x2c
    iss = tcp_next_iss(npcb);
 800ec02:	6978      	ldr	r0, [r7, #20]
 800ec04:	f7ff fa58 	bl	800e0b8 <tcp_next_iss>
 800ec08:	6138      	str	r0, [r7, #16]
    npcb->snd_wl2 = iss;
 800ec0a:	697b      	ldr	r3, [r7, #20]
 800ec0c:	693a      	ldr	r2, [r7, #16]
 800ec0e:	659a      	str	r2, [r3, #88]	; 0x58
    npcb->snd_nxt = iss;
 800ec10:	697b      	ldr	r3, [r7, #20]
 800ec12:	693a      	ldr	r2, [r7, #16]
 800ec14:	651a      	str	r2, [r3, #80]	; 0x50
    npcb->lastack = iss;
 800ec16:	697b      	ldr	r3, [r7, #20]
 800ec18:	693a      	ldr	r2, [r7, #16]
 800ec1a:	645a      	str	r2, [r3, #68]	; 0x44
    npcb->snd_lbb = iss;
 800ec1c:	697b      	ldr	r3, [r7, #20]
 800ec1e:	693a      	ldr	r2, [r7, #16]
 800ec20:	65da      	str	r2, [r3, #92]	; 0x5c
    npcb->snd_wl1 = seqno - 1;/* initialise to seqno-1 to force window update */
 800ec22:	4b35      	ldr	r3, [pc, #212]	; (800ecf8 <tcp_listen_input+0x1e0>)
 800ec24:	681b      	ldr	r3, [r3, #0]
 800ec26:	1e5a      	subs	r2, r3, #1
 800ec28:	697b      	ldr	r3, [r7, #20]
 800ec2a:	655a      	str	r2, [r3, #84]	; 0x54
    npcb->callback_arg = pcb->callback_arg;
 800ec2c:	687b      	ldr	r3, [r7, #4]
 800ec2e:	691a      	ldr	r2, [r3, #16]
 800ec30:	697b      	ldr	r3, [r7, #20]
 800ec32:	611a      	str	r2, [r3, #16]
    npcb->listener = pcb;
 800ec34:	697b      	ldr	r3, [r7, #20]
 800ec36:	687a      	ldr	r2, [r7, #4]
 800ec38:	67da      	str	r2, [r3, #124]	; 0x7c
    npcb->so_options = pcb->so_options & SOF_INHERITED;
 800ec3a:	687b      	ldr	r3, [r7, #4]
 800ec3c:	7a5b      	ldrb	r3, [r3, #9]
 800ec3e:	f003 030c 	and.w	r3, r3, #12
 800ec42:	b2da      	uxtb	r2, r3
 800ec44:	697b      	ldr	r3, [r7, #20]
 800ec46:	725a      	strb	r2, [r3, #9]
    npcb->netif_idx = pcb->netif_idx;
 800ec48:	687b      	ldr	r3, [r7, #4]
 800ec4a:	7a1a      	ldrb	r2, [r3, #8]
 800ec4c:	697b      	ldr	r3, [r7, #20]
 800ec4e:	721a      	strb	r2, [r3, #8]
    TCP_REG_ACTIVE(npcb);
 800ec50:	4b2e      	ldr	r3, [pc, #184]	; (800ed0c <tcp_listen_input+0x1f4>)
 800ec52:	681a      	ldr	r2, [r3, #0]
 800ec54:	697b      	ldr	r3, [r7, #20]
 800ec56:	60da      	str	r2, [r3, #12]
 800ec58:	4a2c      	ldr	r2, [pc, #176]	; (800ed0c <tcp_listen_input+0x1f4>)
 800ec5a:	697b      	ldr	r3, [r7, #20]
 800ec5c:	6013      	str	r3, [r2, #0]
 800ec5e:	f003 fd29 	bl	80126b4 <tcp_timer_needed>
 800ec62:	4b2b      	ldr	r3, [pc, #172]	; (800ed10 <tcp_listen_input+0x1f8>)
 800ec64:	2201      	movs	r2, #1
 800ec66:	701a      	strb	r2, [r3, #0]
    tcp_parseopt(npcb);
 800ec68:	6978      	ldr	r0, [r7, #20]
 800ec6a:	f001 fd8f 	bl	801078c <tcp_parseopt>
    npcb->snd_wnd = tcphdr->wnd;
 800ec6e:	4b23      	ldr	r3, [pc, #140]	; (800ecfc <tcp_listen_input+0x1e4>)
 800ec70:	681b      	ldr	r3, [r3, #0]
 800ec72:	89db      	ldrh	r3, [r3, #14]
 800ec74:	b29a      	uxth	r2, r3
 800ec76:	697b      	ldr	r3, [r7, #20]
 800ec78:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
    npcb->snd_wnd_max = npcb->snd_wnd;
 800ec7c:	697b      	ldr	r3, [r7, #20]
 800ec7e:	f8b3 2060 	ldrh.w	r2, [r3, #96]	; 0x60
 800ec82:	697b      	ldr	r3, [r7, #20]
 800ec84:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62
    npcb->mss = tcp_eff_send_mss(npcb->mss, &npcb->local_ip, &npcb->remote_ip);
 800ec88:	697b      	ldr	r3, [r7, #20]
 800ec8a:	8e5c      	ldrh	r4, [r3, #50]	; 0x32
 800ec8c:	697b      	ldr	r3, [r7, #20]
 800ec8e:	3304      	adds	r3, #4
 800ec90:	4618      	mov	r0, r3
 800ec92:	f007 fb31 	bl	80162f8 <ip4_route>
 800ec96:	4601      	mov	r1, r0
 800ec98:	697b      	ldr	r3, [r7, #20]
 800ec9a:	3304      	adds	r3, #4
 800ec9c:	461a      	mov	r2, r3
 800ec9e:	4620      	mov	r0, r4
 800eca0:	f7ff fa30 	bl	800e104 <tcp_eff_send_mss_netif>
 800eca4:	4603      	mov	r3, r0
 800eca6:	461a      	mov	r2, r3
 800eca8:	697b      	ldr	r3, [r7, #20]
 800ecaa:	865a      	strh	r2, [r3, #50]	; 0x32
    rc = tcp_enqueue_flags(npcb, TCP_SYN | TCP_ACK);
 800ecac:	2112      	movs	r1, #18
 800ecae:	6978      	ldr	r0, [r7, #20]
 800ecb0:	f002 fc9c 	bl	80115ec <tcp_enqueue_flags>
 800ecb4:	4603      	mov	r3, r0
 800ecb6:	73fb      	strb	r3, [r7, #15]
    if (rc != ERR_OK) {
 800ecb8:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800ecbc:	2b00      	cmp	r3, #0
 800ecbe:	d004      	beq.n	800ecca <tcp_listen_input+0x1b2>
      tcp_abandon(npcb, 0);
 800ecc0:	2100      	movs	r1, #0
 800ecc2:	6978      	ldr	r0, [r7, #20]
 800ecc4:	f7fd ff70 	bl	800cba8 <tcp_abandon>
      return;
 800ecc8:	e006      	b.n	800ecd8 <tcp_listen_input+0x1c0>
    tcp_output(npcb);
 800ecca:	6978      	ldr	r0, [r7, #20]
 800eccc:	f002 fd7c 	bl	80117c8 <tcp_output>
  return;
 800ecd0:	e001      	b.n	800ecd6 <tcp_listen_input+0x1be>
    return;
 800ecd2:	bf00      	nop
 800ecd4:	e000      	b.n	800ecd8 <tcp_listen_input+0x1c0>
  return;
 800ecd6:	bf00      	nop
}
 800ecd8:	371c      	adds	r7, #28
 800ecda:	46bd      	mov	sp, r7
 800ecdc:	bd90      	pop	{r4, r7, pc}
 800ecde:	bf00      	nop
 800ece0:	20008960 	.word	0x20008960
 800ece4:	0801a60c 	.word	0x0801a60c
 800ece8:	0801a804 	.word	0x0801a804
 800ecec:	0801a658 	.word	0x0801a658
 800ecf0:	20008958 	.word	0x20008958
 800ecf4:	2000895e 	.word	0x2000895e
 800ecf8:	20008954 	.word	0x20008954
 800ecfc:	20008944 	.word	0x20008944
 800ed00:	2000538c 	.word	0x2000538c
 800ed04:	20005390 	.word	0x20005390
 800ed08:	2000537c 	.word	0x2000537c
 800ed0c:	20008928 	.word	0x20008928
 800ed10:	20008930 	.word	0x20008930

0800ed14 <tcp_timewait_input>:
 * @note the segment which arrived is saved in global variables, therefore only the pcb
 *       involved is passed as a parameter to this function
 */
static void
tcp_timewait_input(struct tcp_pcb *pcb)
{
 800ed14:	b580      	push	{r7, lr}
 800ed16:	b086      	sub	sp, #24
 800ed18:	af04      	add	r7, sp, #16
 800ed1a:	6078      	str	r0, [r7, #4]
  /* RFC 1337: in TIME_WAIT, ignore RST and ACK FINs + any 'acceptable' segments */
  /* RFC 793 3.9 Event Processing - Segment Arrives:
   * - first check sequence number - we skip that one in TIME_WAIT (always
   *   acceptable since we only send ACKs)
   * - second check the RST bit (... return) */
  if (flags & TCP_RST) {
 800ed1c:	4b2f      	ldr	r3, [pc, #188]	; (800eddc <tcp_timewait_input+0xc8>)
 800ed1e:	781b      	ldrb	r3, [r3, #0]
 800ed20:	f003 0304 	and.w	r3, r3, #4
 800ed24:	2b00      	cmp	r3, #0
 800ed26:	d153      	bne.n	800edd0 <tcp_timewait_input+0xbc>
    return;
  }

  LWIP_ASSERT("tcp_timewait_input: invalid pcb", pcb != NULL);
 800ed28:	687b      	ldr	r3, [r7, #4]
 800ed2a:	2b00      	cmp	r3, #0
 800ed2c:	d106      	bne.n	800ed3c <tcp_timewait_input+0x28>
 800ed2e:	4b2c      	ldr	r3, [pc, #176]	; (800ede0 <tcp_timewait_input+0xcc>)
 800ed30:	f240 22ee 	movw	r2, #750	; 0x2ee
 800ed34:	492b      	ldr	r1, [pc, #172]	; (800ede4 <tcp_timewait_input+0xd0>)
 800ed36:	482c      	ldr	r0, [pc, #176]	; (800ede8 <tcp_timewait_input+0xd4>)
 800ed38:	f009 fba6 	bl	8018488 <iprintf>

  /* - fourth, check the SYN bit, */
  if (flags & TCP_SYN) {
 800ed3c:	4b27      	ldr	r3, [pc, #156]	; (800eddc <tcp_timewait_input+0xc8>)
 800ed3e:	781b      	ldrb	r3, [r3, #0]
 800ed40:	f003 0302 	and.w	r3, r3, #2
 800ed44:	2b00      	cmp	r3, #0
 800ed46:	d02a      	beq.n	800ed9e <tcp_timewait_input+0x8a>
    /* If an incoming segment is not acceptable, an acknowledgment
       should be sent in reply */
    if (TCP_SEQ_BETWEEN(seqno, pcb->rcv_nxt, pcb->rcv_nxt + pcb->rcv_wnd)) {
 800ed48:	4b28      	ldr	r3, [pc, #160]	; (800edec <tcp_timewait_input+0xd8>)
 800ed4a:	681a      	ldr	r2, [r3, #0]
 800ed4c:	687b      	ldr	r3, [r7, #4]
 800ed4e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800ed50:	1ad3      	subs	r3, r2, r3
 800ed52:	2b00      	cmp	r3, #0
 800ed54:	db2d      	blt.n	800edb2 <tcp_timewait_input+0x9e>
 800ed56:	4b25      	ldr	r3, [pc, #148]	; (800edec <tcp_timewait_input+0xd8>)
 800ed58:	681a      	ldr	r2, [r3, #0]
 800ed5a:	687b      	ldr	r3, [r7, #4]
 800ed5c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800ed5e:	6879      	ldr	r1, [r7, #4]
 800ed60:	8d09      	ldrh	r1, [r1, #40]	; 0x28
 800ed62:	440b      	add	r3, r1
 800ed64:	1ad3      	subs	r3, r2, r3
 800ed66:	2b00      	cmp	r3, #0
 800ed68:	dc23      	bgt.n	800edb2 <tcp_timewait_input+0x9e>
      /* If the SYN is in the window it is an error, send a reset */
      tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 800ed6a:	4b21      	ldr	r3, [pc, #132]	; (800edf0 <tcp_timewait_input+0xdc>)
 800ed6c:	6819      	ldr	r1, [r3, #0]
 800ed6e:	4b21      	ldr	r3, [pc, #132]	; (800edf4 <tcp_timewait_input+0xe0>)
 800ed70:	881b      	ldrh	r3, [r3, #0]
 800ed72:	461a      	mov	r2, r3
 800ed74:	4b1d      	ldr	r3, [pc, #116]	; (800edec <tcp_timewait_input+0xd8>)
 800ed76:	681b      	ldr	r3, [r3, #0]
 800ed78:	18d0      	adds	r0, r2, r3
              ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 800ed7a:	4b1f      	ldr	r3, [pc, #124]	; (800edf8 <tcp_timewait_input+0xe4>)
 800ed7c:	681b      	ldr	r3, [r3, #0]
      tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 800ed7e:	885b      	ldrh	r3, [r3, #2]
 800ed80:	b29b      	uxth	r3, r3
              ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 800ed82:	4a1d      	ldr	r2, [pc, #116]	; (800edf8 <tcp_timewait_input+0xe4>)
 800ed84:	6812      	ldr	r2, [r2, #0]
      tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 800ed86:	8812      	ldrh	r2, [r2, #0]
 800ed88:	b292      	uxth	r2, r2
 800ed8a:	9202      	str	r2, [sp, #8]
 800ed8c:	9301      	str	r3, [sp, #4]
 800ed8e:	4b1b      	ldr	r3, [pc, #108]	; (800edfc <tcp_timewait_input+0xe8>)
 800ed90:	9300      	str	r3, [sp, #0]
 800ed92:	4b1b      	ldr	r3, [pc, #108]	; (800ee00 <tcp_timewait_input+0xec>)
 800ed94:	4602      	mov	r2, r0
 800ed96:	6878      	ldr	r0, [r7, #4]
 800ed98:	f003 faca 	bl	8012330 <tcp_rst>
      return;
 800ed9c:	e01b      	b.n	800edd6 <tcp_timewait_input+0xc2>
    }
  } else if (flags & TCP_FIN) {
 800ed9e:	4b0f      	ldr	r3, [pc, #60]	; (800eddc <tcp_timewait_input+0xc8>)
 800eda0:	781b      	ldrb	r3, [r3, #0]
 800eda2:	f003 0301 	and.w	r3, r3, #1
 800eda6:	2b00      	cmp	r3, #0
 800eda8:	d003      	beq.n	800edb2 <tcp_timewait_input+0x9e>
    /* - eighth, check the FIN bit: Remain in the TIME-WAIT state.
         Restart the 2 MSL time-wait timeout.*/
    pcb->tmr = tcp_ticks;
 800edaa:	4b16      	ldr	r3, [pc, #88]	; (800ee04 <tcp_timewait_input+0xf0>)
 800edac:	681a      	ldr	r2, [r3, #0]
 800edae:	687b      	ldr	r3, [r7, #4]
 800edb0:	621a      	str	r2, [r3, #32]
  }

  if ((tcplen > 0)) {
 800edb2:	4b10      	ldr	r3, [pc, #64]	; (800edf4 <tcp_timewait_input+0xe0>)
 800edb4:	881b      	ldrh	r3, [r3, #0]
 800edb6:	2b00      	cmp	r3, #0
 800edb8:	d00c      	beq.n	800edd4 <tcp_timewait_input+0xc0>
    /* Acknowledge data, FIN or out-of-window SYN */
    tcp_ack_now(pcb);
 800edba:	687b      	ldr	r3, [r7, #4]
 800edbc:	8b5b      	ldrh	r3, [r3, #26]
 800edbe:	f043 0302 	orr.w	r3, r3, #2
 800edc2:	b29a      	uxth	r2, r3
 800edc4:	687b      	ldr	r3, [r7, #4]
 800edc6:	835a      	strh	r2, [r3, #26]
    tcp_output(pcb);
 800edc8:	6878      	ldr	r0, [r7, #4]
 800edca:	f002 fcfd 	bl	80117c8 <tcp_output>
  }
  return;
 800edce:	e001      	b.n	800edd4 <tcp_timewait_input+0xc0>
    return;
 800edd0:	bf00      	nop
 800edd2:	e000      	b.n	800edd6 <tcp_timewait_input+0xc2>
  return;
 800edd4:	bf00      	nop
}
 800edd6:	3708      	adds	r7, #8
 800edd8:	46bd      	mov	sp, r7
 800edda:	bd80      	pop	{r7, pc}
 800eddc:	20008960 	.word	0x20008960
 800ede0:	0801a60c 	.word	0x0801a60c
 800ede4:	0801a824 	.word	0x0801a824
 800ede8:	0801a658 	.word	0x0801a658
 800edec:	20008954 	.word	0x20008954
 800edf0:	20008958 	.word	0x20008958
 800edf4:	2000895e 	.word	0x2000895e
 800edf8:	20008944 	.word	0x20008944
 800edfc:	2000538c 	.word	0x2000538c
 800ee00:	20005390 	.word	0x20005390
 800ee04:	2000891c 	.word	0x2000891c

0800ee08 <tcp_process>:
 * @note the segment which arrived is saved in global variables, therefore only the pcb
 *       involved is passed as a parameter to this function
 */
static err_t
tcp_process(struct tcp_pcb *pcb)
{
 800ee08:	b590      	push	{r4, r7, lr}
 800ee0a:	b08d      	sub	sp, #52	; 0x34
 800ee0c:	af04      	add	r7, sp, #16
 800ee0e:	6078      	str	r0, [r7, #4]
  struct tcp_seg *rseg;
  u8_t acceptable = 0;
 800ee10:	2300      	movs	r3, #0
 800ee12:	76fb      	strb	r3, [r7, #27]
  err_t err;

  err = ERR_OK;
 800ee14:	2300      	movs	r3, #0
 800ee16:	76bb      	strb	r3, [r7, #26]

  LWIP_ASSERT("tcp_process: invalid pcb", pcb != NULL);
 800ee18:	687b      	ldr	r3, [r7, #4]
 800ee1a:	2b00      	cmp	r3, #0
 800ee1c:	d106      	bne.n	800ee2c <tcp_process+0x24>
 800ee1e:	4b9d      	ldr	r3, [pc, #628]	; (800f094 <tcp_process+0x28c>)
 800ee20:	f44f 7247 	mov.w	r2, #796	; 0x31c
 800ee24:	499c      	ldr	r1, [pc, #624]	; (800f098 <tcp_process+0x290>)
 800ee26:	489d      	ldr	r0, [pc, #628]	; (800f09c <tcp_process+0x294>)
 800ee28:	f009 fb2e 	bl	8018488 <iprintf>

  /* Process incoming RST segments. */
  if (flags & TCP_RST) {
 800ee2c:	4b9c      	ldr	r3, [pc, #624]	; (800f0a0 <tcp_process+0x298>)
 800ee2e:	781b      	ldrb	r3, [r3, #0]
 800ee30:	f003 0304 	and.w	r3, r3, #4
 800ee34:	2b00      	cmp	r3, #0
 800ee36:	d04e      	beq.n	800eed6 <tcp_process+0xce>
    /* First, determine if the reset is acceptable. */
    if (pcb->state == SYN_SENT) {
 800ee38:	687b      	ldr	r3, [r7, #4]
 800ee3a:	7d1b      	ldrb	r3, [r3, #20]
 800ee3c:	2b02      	cmp	r3, #2
 800ee3e:	d108      	bne.n	800ee52 <tcp_process+0x4a>
      /* "In the SYN-SENT state (a RST received in response to an initial SYN),
          the RST is acceptable if the ACK field acknowledges the SYN." */
      if (ackno == pcb->snd_nxt) {
 800ee40:	687b      	ldr	r3, [r7, #4]
 800ee42:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 800ee44:	4b97      	ldr	r3, [pc, #604]	; (800f0a4 <tcp_process+0x29c>)
 800ee46:	681b      	ldr	r3, [r3, #0]
 800ee48:	429a      	cmp	r2, r3
 800ee4a:	d123      	bne.n	800ee94 <tcp_process+0x8c>
        acceptable = 1;
 800ee4c:	2301      	movs	r3, #1
 800ee4e:	76fb      	strb	r3, [r7, #27]
 800ee50:	e020      	b.n	800ee94 <tcp_process+0x8c>
      }
    } else {
      /* "In all states except SYN-SENT, all reset (RST) segments are validated
          by checking their SEQ-fields." */
      if (seqno == pcb->rcv_nxt) {
 800ee52:	687b      	ldr	r3, [r7, #4]
 800ee54:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800ee56:	4b94      	ldr	r3, [pc, #592]	; (800f0a8 <tcp_process+0x2a0>)
 800ee58:	681b      	ldr	r3, [r3, #0]
 800ee5a:	429a      	cmp	r2, r3
 800ee5c:	d102      	bne.n	800ee64 <tcp_process+0x5c>
        acceptable = 1;
 800ee5e:	2301      	movs	r3, #1
 800ee60:	76fb      	strb	r3, [r7, #27]
 800ee62:	e017      	b.n	800ee94 <tcp_process+0x8c>
      } else  if (TCP_SEQ_BETWEEN(seqno, pcb->rcv_nxt,
 800ee64:	4b90      	ldr	r3, [pc, #576]	; (800f0a8 <tcp_process+0x2a0>)
 800ee66:	681a      	ldr	r2, [r3, #0]
 800ee68:	687b      	ldr	r3, [r7, #4]
 800ee6a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800ee6c:	1ad3      	subs	r3, r2, r3
 800ee6e:	2b00      	cmp	r3, #0
 800ee70:	db10      	blt.n	800ee94 <tcp_process+0x8c>
 800ee72:	4b8d      	ldr	r3, [pc, #564]	; (800f0a8 <tcp_process+0x2a0>)
 800ee74:	681a      	ldr	r2, [r3, #0]
 800ee76:	687b      	ldr	r3, [r7, #4]
 800ee78:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800ee7a:	6879      	ldr	r1, [r7, #4]
 800ee7c:	8d09      	ldrh	r1, [r1, #40]	; 0x28
 800ee7e:	440b      	add	r3, r1
 800ee80:	1ad3      	subs	r3, r2, r3
 800ee82:	2b00      	cmp	r3, #0
 800ee84:	dc06      	bgt.n	800ee94 <tcp_process+0x8c>
                                  pcb->rcv_nxt + pcb->rcv_wnd)) {
        /* If the sequence number is inside the window, we send a challenge ACK
           and wait for a re-send with matching sequence number.
           This follows RFC 5961 section 3.2 and addresses CVE-2004-0230
           (RST spoofing attack), which is present in RFC 793 RST handling. */
        tcp_ack_now(pcb);
 800ee86:	687b      	ldr	r3, [r7, #4]
 800ee88:	8b5b      	ldrh	r3, [r3, #26]
 800ee8a:	f043 0302 	orr.w	r3, r3, #2
 800ee8e:	b29a      	uxth	r2, r3
 800ee90:	687b      	ldr	r3, [r7, #4]
 800ee92:	835a      	strh	r2, [r3, #26]
      }
    }

    if (acceptable) {
 800ee94:	7efb      	ldrb	r3, [r7, #27]
 800ee96:	2b00      	cmp	r3, #0
 800ee98:	d01b      	beq.n	800eed2 <tcp_process+0xca>
      LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_process: Connection RESET\n"));
      LWIP_ASSERT("tcp_input: pcb->state != CLOSED", pcb->state != CLOSED);
 800ee9a:	687b      	ldr	r3, [r7, #4]
 800ee9c:	7d1b      	ldrb	r3, [r3, #20]
 800ee9e:	2b00      	cmp	r3, #0
 800eea0:	d106      	bne.n	800eeb0 <tcp_process+0xa8>
 800eea2:	4b7c      	ldr	r3, [pc, #496]	; (800f094 <tcp_process+0x28c>)
 800eea4:	f44f 724e 	mov.w	r2, #824	; 0x338
 800eea8:	4980      	ldr	r1, [pc, #512]	; (800f0ac <tcp_process+0x2a4>)
 800eeaa:	487c      	ldr	r0, [pc, #496]	; (800f09c <tcp_process+0x294>)
 800eeac:	f009 faec 	bl	8018488 <iprintf>
      recv_flags |= TF_RESET;
 800eeb0:	4b7f      	ldr	r3, [pc, #508]	; (800f0b0 <tcp_process+0x2a8>)
 800eeb2:	781b      	ldrb	r3, [r3, #0]
 800eeb4:	f043 0308 	orr.w	r3, r3, #8
 800eeb8:	b2da      	uxtb	r2, r3
 800eeba:	4b7d      	ldr	r3, [pc, #500]	; (800f0b0 <tcp_process+0x2a8>)
 800eebc:	701a      	strb	r2, [r3, #0]
      tcp_clear_flags(pcb, TF_ACK_DELAY);
 800eebe:	687b      	ldr	r3, [r7, #4]
 800eec0:	8b5b      	ldrh	r3, [r3, #26]
 800eec2:	f023 0301 	bic.w	r3, r3, #1
 800eec6:	b29a      	uxth	r2, r3
 800eec8:	687b      	ldr	r3, [r7, #4]
 800eeca:	835a      	strh	r2, [r3, #26]
      return ERR_RST;
 800eecc:	f06f 030d 	mvn.w	r3, #13
 800eed0:	e37a      	b.n	800f5c8 <tcp_process+0x7c0>
    } else {
      LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_process: unacceptable reset seqno %"U32_F" rcv_nxt %"U32_F"\n",
                                    seqno, pcb->rcv_nxt));
      LWIP_DEBUGF(TCP_DEBUG, ("tcp_process: unacceptable reset seqno %"U32_F" rcv_nxt %"U32_F"\n",
                              seqno, pcb->rcv_nxt));
      return ERR_OK;
 800eed2:	2300      	movs	r3, #0
 800eed4:	e378      	b.n	800f5c8 <tcp_process+0x7c0>
    }
  }

  if ((flags & TCP_SYN) && (pcb->state != SYN_SENT && pcb->state != SYN_RCVD)) {
 800eed6:	4b72      	ldr	r3, [pc, #456]	; (800f0a0 <tcp_process+0x298>)
 800eed8:	781b      	ldrb	r3, [r3, #0]
 800eeda:	f003 0302 	and.w	r3, r3, #2
 800eede:	2b00      	cmp	r3, #0
 800eee0:	d010      	beq.n	800ef04 <tcp_process+0xfc>
 800eee2:	687b      	ldr	r3, [r7, #4]
 800eee4:	7d1b      	ldrb	r3, [r3, #20]
 800eee6:	2b02      	cmp	r3, #2
 800eee8:	d00c      	beq.n	800ef04 <tcp_process+0xfc>
 800eeea:	687b      	ldr	r3, [r7, #4]
 800eeec:	7d1b      	ldrb	r3, [r3, #20]
 800eeee:	2b03      	cmp	r3, #3
 800eef0:	d008      	beq.n	800ef04 <tcp_process+0xfc>
    /* Cope with new connection attempt after remote end crashed */
    tcp_ack_now(pcb);
 800eef2:	687b      	ldr	r3, [r7, #4]
 800eef4:	8b5b      	ldrh	r3, [r3, #26]
 800eef6:	f043 0302 	orr.w	r3, r3, #2
 800eefa:	b29a      	uxth	r2, r3
 800eefc:	687b      	ldr	r3, [r7, #4]
 800eefe:	835a      	strh	r2, [r3, #26]
    return ERR_OK;
 800ef00:	2300      	movs	r3, #0
 800ef02:	e361      	b.n	800f5c8 <tcp_process+0x7c0>
  }

  if ((pcb->flags & TF_RXCLOSED) == 0) {
 800ef04:	687b      	ldr	r3, [r7, #4]
 800ef06:	8b5b      	ldrh	r3, [r3, #26]
 800ef08:	f003 0310 	and.w	r3, r3, #16
 800ef0c:	2b00      	cmp	r3, #0
 800ef0e:	d103      	bne.n	800ef18 <tcp_process+0x110>
    /* Update the PCB (in)activity timer unless rx is closed (see tcp_shutdown) */
    pcb->tmr = tcp_ticks;
 800ef10:	4b68      	ldr	r3, [pc, #416]	; (800f0b4 <tcp_process+0x2ac>)
 800ef12:	681a      	ldr	r2, [r3, #0]
 800ef14:	687b      	ldr	r3, [r7, #4]
 800ef16:	621a      	str	r2, [r3, #32]
  }
  pcb->keep_cnt_sent = 0;
 800ef18:	687b      	ldr	r3, [r7, #4]
 800ef1a:	2200      	movs	r2, #0
 800ef1c:	f883 209b 	strb.w	r2, [r3, #155]	; 0x9b
  pcb->persist_probe = 0;
 800ef20:	687b      	ldr	r3, [r7, #4]
 800ef22:	2200      	movs	r2, #0
 800ef24:	f883 209a 	strb.w	r2, [r3, #154]	; 0x9a

  tcp_parseopt(pcb);
 800ef28:	6878      	ldr	r0, [r7, #4]
 800ef2a:	f001 fc2f 	bl	801078c <tcp_parseopt>

  /* Do different things depending on the TCP state. */
  switch (pcb->state) {
 800ef2e:	687b      	ldr	r3, [r7, #4]
 800ef30:	7d1b      	ldrb	r3, [r3, #20]
 800ef32:	3b02      	subs	r3, #2
 800ef34:	2b07      	cmp	r3, #7
 800ef36:	f200 8337 	bhi.w	800f5a8 <tcp_process+0x7a0>
 800ef3a:	a201      	add	r2, pc, #4	; (adr r2, 800ef40 <tcp_process+0x138>)
 800ef3c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800ef40:	0800ef61 	.word	0x0800ef61
 800ef44:	0800f191 	.word	0x0800f191
 800ef48:	0800f309 	.word	0x0800f309
 800ef4c:	0800f333 	.word	0x0800f333
 800ef50:	0800f457 	.word	0x0800f457
 800ef54:	0800f309 	.word	0x0800f309
 800ef58:	0800f4e3 	.word	0x0800f4e3
 800ef5c:	0800f573 	.word	0x0800f573
    case SYN_SENT:
      LWIP_DEBUGF(TCP_INPUT_DEBUG, ("SYN-SENT: ackno %"U32_F" pcb->snd_nxt %"U32_F" unacked %"U32_F"\n", ackno,
                                    pcb->snd_nxt, lwip_ntohl(pcb->unacked->tcphdr->seqno)));
      /* received SYN ACK with expected sequence number? */
      if ((flags & TCP_ACK) && (flags & TCP_SYN)
 800ef60:	4b4f      	ldr	r3, [pc, #316]	; (800f0a0 <tcp_process+0x298>)
 800ef62:	781b      	ldrb	r3, [r3, #0]
 800ef64:	f003 0310 	and.w	r3, r3, #16
 800ef68:	2b00      	cmp	r3, #0
 800ef6a:	f000 80e4 	beq.w	800f136 <tcp_process+0x32e>
 800ef6e:	4b4c      	ldr	r3, [pc, #304]	; (800f0a0 <tcp_process+0x298>)
 800ef70:	781b      	ldrb	r3, [r3, #0]
 800ef72:	f003 0302 	and.w	r3, r3, #2
 800ef76:	2b00      	cmp	r3, #0
 800ef78:	f000 80dd 	beq.w	800f136 <tcp_process+0x32e>
          && (ackno == pcb->lastack + 1)) {
 800ef7c:	687b      	ldr	r3, [r7, #4]
 800ef7e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800ef80:	1c5a      	adds	r2, r3, #1
 800ef82:	4b48      	ldr	r3, [pc, #288]	; (800f0a4 <tcp_process+0x29c>)
 800ef84:	681b      	ldr	r3, [r3, #0]
 800ef86:	429a      	cmp	r2, r3
 800ef88:	f040 80d5 	bne.w	800f136 <tcp_process+0x32e>
        pcb->rcv_nxt = seqno + 1;
 800ef8c:	4b46      	ldr	r3, [pc, #280]	; (800f0a8 <tcp_process+0x2a0>)
 800ef8e:	681b      	ldr	r3, [r3, #0]
 800ef90:	1c5a      	adds	r2, r3, #1
 800ef92:	687b      	ldr	r3, [r7, #4]
 800ef94:	625a      	str	r2, [r3, #36]	; 0x24
        pcb->rcv_ann_right_edge = pcb->rcv_nxt;
 800ef96:	687b      	ldr	r3, [r7, #4]
 800ef98:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800ef9a:	687b      	ldr	r3, [r7, #4]
 800ef9c:	62da      	str	r2, [r3, #44]	; 0x2c
        pcb->lastack = ackno;
 800ef9e:	4b41      	ldr	r3, [pc, #260]	; (800f0a4 <tcp_process+0x29c>)
 800efa0:	681a      	ldr	r2, [r3, #0]
 800efa2:	687b      	ldr	r3, [r7, #4]
 800efa4:	645a      	str	r2, [r3, #68]	; 0x44
        pcb->snd_wnd = tcphdr->wnd;
 800efa6:	4b44      	ldr	r3, [pc, #272]	; (800f0b8 <tcp_process+0x2b0>)
 800efa8:	681b      	ldr	r3, [r3, #0]
 800efaa:	89db      	ldrh	r3, [r3, #14]
 800efac:	b29a      	uxth	r2, r3
 800efae:	687b      	ldr	r3, [r7, #4]
 800efb0:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
        pcb->snd_wnd_max = pcb->snd_wnd;
 800efb4:	687b      	ldr	r3, [r7, #4]
 800efb6:	f8b3 2060 	ldrh.w	r2, [r3, #96]	; 0x60
 800efba:	687b      	ldr	r3, [r7, #4]
 800efbc:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62
        pcb->snd_wl1 = seqno - 1; /* initialise to seqno - 1 to force window update */
 800efc0:	4b39      	ldr	r3, [pc, #228]	; (800f0a8 <tcp_process+0x2a0>)
 800efc2:	681b      	ldr	r3, [r3, #0]
 800efc4:	1e5a      	subs	r2, r3, #1
 800efc6:	687b      	ldr	r3, [r7, #4]
 800efc8:	655a      	str	r2, [r3, #84]	; 0x54
        pcb->state = ESTABLISHED;
 800efca:	687b      	ldr	r3, [r7, #4]
 800efcc:	2204      	movs	r2, #4
 800efce:	751a      	strb	r2, [r3, #20]

#if TCP_CALCULATE_EFF_SEND_MSS
        pcb->mss = tcp_eff_send_mss(pcb->mss, &pcb->local_ip, &pcb->remote_ip);
 800efd0:	687b      	ldr	r3, [r7, #4]
 800efd2:	8e5c      	ldrh	r4, [r3, #50]	; 0x32
 800efd4:	687b      	ldr	r3, [r7, #4]
 800efd6:	3304      	adds	r3, #4
 800efd8:	4618      	mov	r0, r3
 800efda:	f007 f98d 	bl	80162f8 <ip4_route>
 800efde:	4601      	mov	r1, r0
 800efe0:	687b      	ldr	r3, [r7, #4]
 800efe2:	3304      	adds	r3, #4
 800efe4:	461a      	mov	r2, r3
 800efe6:	4620      	mov	r0, r4
 800efe8:	f7ff f88c 	bl	800e104 <tcp_eff_send_mss_netif>
 800efec:	4603      	mov	r3, r0
 800efee:	461a      	mov	r2, r3
 800eff0:	687b      	ldr	r3, [r7, #4]
 800eff2:	865a      	strh	r2, [r3, #50]	; 0x32
#endif /* TCP_CALCULATE_EFF_SEND_MSS */

        pcb->cwnd = LWIP_TCP_CALC_INITIAL_CWND(pcb->mss);
 800eff4:	687b      	ldr	r3, [r7, #4]
 800eff6:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 800eff8:	009a      	lsls	r2, r3, #2
 800effa:	687b      	ldr	r3, [r7, #4]
 800effc:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 800effe:	005b      	lsls	r3, r3, #1
 800f000:	f241 111c 	movw	r1, #4380	; 0x111c
 800f004:	428b      	cmp	r3, r1
 800f006:	bf38      	it	cc
 800f008:	460b      	movcc	r3, r1
 800f00a:	429a      	cmp	r2, r3
 800f00c:	d204      	bcs.n	800f018 <tcp_process+0x210>
 800f00e:	687b      	ldr	r3, [r7, #4]
 800f010:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 800f012:	009b      	lsls	r3, r3, #2
 800f014:	b29b      	uxth	r3, r3
 800f016:	e00d      	b.n	800f034 <tcp_process+0x22c>
 800f018:	687b      	ldr	r3, [r7, #4]
 800f01a:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 800f01c:	005b      	lsls	r3, r3, #1
 800f01e:	f241 121c 	movw	r2, #4380	; 0x111c
 800f022:	4293      	cmp	r3, r2
 800f024:	d904      	bls.n	800f030 <tcp_process+0x228>
 800f026:	687b      	ldr	r3, [r7, #4]
 800f028:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 800f02a:	005b      	lsls	r3, r3, #1
 800f02c:	b29b      	uxth	r3, r3
 800f02e:	e001      	b.n	800f034 <tcp_process+0x22c>
 800f030:	f241 131c 	movw	r3, #4380	; 0x111c
 800f034:	687a      	ldr	r2, [r7, #4]
 800f036:	f8a2 3048 	strh.w	r3, [r2, #72]	; 0x48
        LWIP_DEBUGF(TCP_CWND_DEBUG, ("tcp_process (SENT): cwnd %"TCPWNDSIZE_F
                                     " ssthresh %"TCPWNDSIZE_F"\n",
                                     pcb->cwnd, pcb->ssthresh));
        LWIP_ASSERT("pcb->snd_queuelen > 0", (pcb->snd_queuelen > 0));
 800f03a:	687b      	ldr	r3, [r7, #4]
 800f03c:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 800f040:	2b00      	cmp	r3, #0
 800f042:	d106      	bne.n	800f052 <tcp_process+0x24a>
 800f044:	4b13      	ldr	r3, [pc, #76]	; (800f094 <tcp_process+0x28c>)
 800f046:	f44f 725b 	mov.w	r2, #876	; 0x36c
 800f04a:	491c      	ldr	r1, [pc, #112]	; (800f0bc <tcp_process+0x2b4>)
 800f04c:	4813      	ldr	r0, [pc, #76]	; (800f09c <tcp_process+0x294>)
 800f04e:	f009 fa1b 	bl	8018488 <iprintf>
        --pcb->snd_queuelen;
 800f052:	687b      	ldr	r3, [r7, #4]
 800f054:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 800f058:	3b01      	subs	r3, #1
 800f05a:	b29a      	uxth	r2, r3
 800f05c:	687b      	ldr	r3, [r7, #4]
 800f05e:	f8a3 2066 	strh.w	r2, [r3, #102]	; 0x66
        LWIP_DEBUGF(TCP_QLEN_DEBUG, ("tcp_process: SYN-SENT --queuelen %"TCPWNDSIZE_F"\n", (tcpwnd_size_t)pcb->snd_queuelen));
        rseg = pcb->unacked;
 800f062:	687b      	ldr	r3, [r7, #4]
 800f064:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800f066:	61fb      	str	r3, [r7, #28]
        if (rseg == NULL) {
 800f068:	69fb      	ldr	r3, [r7, #28]
 800f06a:	2b00      	cmp	r3, #0
 800f06c:	d12a      	bne.n	800f0c4 <tcp_process+0x2bc>
          /* might happen if tcp_output fails in tcp_rexmit_rto()
             in which case the segment is on the unsent list */
          rseg = pcb->unsent;
 800f06e:	687b      	ldr	r3, [r7, #4]
 800f070:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800f072:	61fb      	str	r3, [r7, #28]
          LWIP_ASSERT("no segment to free", rseg != NULL);
 800f074:	69fb      	ldr	r3, [r7, #28]
 800f076:	2b00      	cmp	r3, #0
 800f078:	d106      	bne.n	800f088 <tcp_process+0x280>
 800f07a:	4b06      	ldr	r3, [pc, #24]	; (800f094 <tcp_process+0x28c>)
 800f07c:	f44f 725d 	mov.w	r2, #884	; 0x374
 800f080:	490f      	ldr	r1, [pc, #60]	; (800f0c0 <tcp_process+0x2b8>)
 800f082:	4806      	ldr	r0, [pc, #24]	; (800f09c <tcp_process+0x294>)
 800f084:	f009 fa00 	bl	8018488 <iprintf>
          pcb->unsent = rseg->next;
 800f088:	69fb      	ldr	r3, [r7, #28]
 800f08a:	681a      	ldr	r2, [r3, #0]
 800f08c:	687b      	ldr	r3, [r7, #4]
 800f08e:	66da      	str	r2, [r3, #108]	; 0x6c
 800f090:	e01c      	b.n	800f0cc <tcp_process+0x2c4>
 800f092:	bf00      	nop
 800f094:	0801a60c 	.word	0x0801a60c
 800f098:	0801a844 	.word	0x0801a844
 800f09c:	0801a658 	.word	0x0801a658
 800f0a0:	20008960 	.word	0x20008960
 800f0a4:	20008958 	.word	0x20008958
 800f0a8:	20008954 	.word	0x20008954
 800f0ac:	0801a860 	.word	0x0801a860
 800f0b0:	20008961 	.word	0x20008961
 800f0b4:	2000891c 	.word	0x2000891c
 800f0b8:	20008944 	.word	0x20008944
 800f0bc:	0801a880 	.word	0x0801a880
 800f0c0:	0801a898 	.word	0x0801a898
        } else {
          pcb->unacked = rseg->next;
 800f0c4:	69fb      	ldr	r3, [r7, #28]
 800f0c6:	681a      	ldr	r2, [r3, #0]
 800f0c8:	687b      	ldr	r3, [r7, #4]
 800f0ca:	671a      	str	r2, [r3, #112]	; 0x70
        }
        tcp_seg_free(rseg);
 800f0cc:	69f8      	ldr	r0, [r7, #28]
 800f0ce:	f7fe fc72 	bl	800d9b6 <tcp_seg_free>

        /* If there's nothing left to acknowledge, stop the retransmit
           timer, otherwise reset it to start again */
        if (pcb->unacked == NULL) {
 800f0d2:	687b      	ldr	r3, [r7, #4]
 800f0d4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800f0d6:	2b00      	cmp	r3, #0
 800f0d8:	d104      	bne.n	800f0e4 <tcp_process+0x2dc>
          pcb->rtime = -1;
 800f0da:	687b      	ldr	r3, [r7, #4]
 800f0dc:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800f0e0:	861a      	strh	r2, [r3, #48]	; 0x30
 800f0e2:	e006      	b.n	800f0f2 <tcp_process+0x2ea>
        } else {
          pcb->rtime = 0;
 800f0e4:	687b      	ldr	r3, [r7, #4]
 800f0e6:	2200      	movs	r2, #0
 800f0e8:	861a      	strh	r2, [r3, #48]	; 0x30
          pcb->nrtx = 0;
 800f0ea:	687b      	ldr	r3, [r7, #4]
 800f0ec:	2200      	movs	r2, #0
 800f0ee:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
        }

        /* Call the user specified function to call when successfully
         * connected. */
        TCP_EVENT_CONNECTED(pcb, ERR_OK, err);
 800f0f2:	687b      	ldr	r3, [r7, #4]
 800f0f4:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800f0f8:	2b00      	cmp	r3, #0
 800f0fa:	d00a      	beq.n	800f112 <tcp_process+0x30a>
 800f0fc:	687b      	ldr	r3, [r7, #4]
 800f0fe:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800f102:	687a      	ldr	r2, [r7, #4]
 800f104:	6910      	ldr	r0, [r2, #16]
 800f106:	2200      	movs	r2, #0
 800f108:	6879      	ldr	r1, [r7, #4]
 800f10a:	4798      	blx	r3
 800f10c:	4603      	mov	r3, r0
 800f10e:	76bb      	strb	r3, [r7, #26]
 800f110:	e001      	b.n	800f116 <tcp_process+0x30e>
 800f112:	2300      	movs	r3, #0
 800f114:	76bb      	strb	r3, [r7, #26]
        if (err == ERR_ABRT) {
 800f116:	f997 301a 	ldrsb.w	r3, [r7, #26]
 800f11a:	f113 0f0d 	cmn.w	r3, #13
 800f11e:	d102      	bne.n	800f126 <tcp_process+0x31e>
          return ERR_ABRT;
 800f120:	f06f 030c 	mvn.w	r3, #12
 800f124:	e250      	b.n	800f5c8 <tcp_process+0x7c0>
        }
        tcp_ack_now(pcb);
 800f126:	687b      	ldr	r3, [r7, #4]
 800f128:	8b5b      	ldrh	r3, [r3, #26]
 800f12a:	f043 0302 	orr.w	r3, r3, #2
 800f12e:	b29a      	uxth	r2, r3
 800f130:	687b      	ldr	r3, [r7, #4]
 800f132:	835a      	strh	r2, [r3, #26]
        if (pcb->nrtx < TCP_SYNMAXRTX) {
          pcb->rtime = 0;
          tcp_rexmit_rto(pcb);
        }
      }
      break;
 800f134:	e23a      	b.n	800f5ac <tcp_process+0x7a4>
      else if (flags & TCP_ACK) {
 800f136:	4b98      	ldr	r3, [pc, #608]	; (800f398 <tcp_process+0x590>)
 800f138:	781b      	ldrb	r3, [r3, #0]
 800f13a:	f003 0310 	and.w	r3, r3, #16
 800f13e:	2b00      	cmp	r3, #0
 800f140:	f000 8234 	beq.w	800f5ac <tcp_process+0x7a4>
        tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 800f144:	4b95      	ldr	r3, [pc, #596]	; (800f39c <tcp_process+0x594>)
 800f146:	6819      	ldr	r1, [r3, #0]
 800f148:	4b95      	ldr	r3, [pc, #596]	; (800f3a0 <tcp_process+0x598>)
 800f14a:	881b      	ldrh	r3, [r3, #0]
 800f14c:	461a      	mov	r2, r3
 800f14e:	4b95      	ldr	r3, [pc, #596]	; (800f3a4 <tcp_process+0x59c>)
 800f150:	681b      	ldr	r3, [r3, #0]
 800f152:	18d0      	adds	r0, r2, r3
                ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 800f154:	4b94      	ldr	r3, [pc, #592]	; (800f3a8 <tcp_process+0x5a0>)
 800f156:	681b      	ldr	r3, [r3, #0]
        tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 800f158:	885b      	ldrh	r3, [r3, #2]
 800f15a:	b29b      	uxth	r3, r3
                ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 800f15c:	4a92      	ldr	r2, [pc, #584]	; (800f3a8 <tcp_process+0x5a0>)
 800f15e:	6812      	ldr	r2, [r2, #0]
        tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 800f160:	8812      	ldrh	r2, [r2, #0]
 800f162:	b292      	uxth	r2, r2
 800f164:	9202      	str	r2, [sp, #8]
 800f166:	9301      	str	r3, [sp, #4]
 800f168:	4b90      	ldr	r3, [pc, #576]	; (800f3ac <tcp_process+0x5a4>)
 800f16a:	9300      	str	r3, [sp, #0]
 800f16c:	4b90      	ldr	r3, [pc, #576]	; (800f3b0 <tcp_process+0x5a8>)
 800f16e:	4602      	mov	r2, r0
 800f170:	6878      	ldr	r0, [r7, #4]
 800f172:	f003 f8dd 	bl	8012330 <tcp_rst>
        if (pcb->nrtx < TCP_SYNMAXRTX) {
 800f176:	687b      	ldr	r3, [r7, #4]
 800f178:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 800f17c:	2b05      	cmp	r3, #5
 800f17e:	f200 8215 	bhi.w	800f5ac <tcp_process+0x7a4>
          pcb->rtime = 0;
 800f182:	687b      	ldr	r3, [r7, #4]
 800f184:	2200      	movs	r2, #0
 800f186:	861a      	strh	r2, [r3, #48]	; 0x30
          tcp_rexmit_rto(pcb);
 800f188:	6878      	ldr	r0, [r7, #4]
 800f18a:	f002 fea9 	bl	8011ee0 <tcp_rexmit_rto>
      break;
 800f18e:	e20d      	b.n	800f5ac <tcp_process+0x7a4>
    case SYN_RCVD:
      if (flags & TCP_ACK) {
 800f190:	4b81      	ldr	r3, [pc, #516]	; (800f398 <tcp_process+0x590>)
 800f192:	781b      	ldrb	r3, [r3, #0]
 800f194:	f003 0310 	and.w	r3, r3, #16
 800f198:	2b00      	cmp	r3, #0
 800f19a:	f000 80a1 	beq.w	800f2e0 <tcp_process+0x4d8>
        /* expected ACK number? */
        if (TCP_SEQ_BETWEEN(ackno, pcb->lastack + 1, pcb->snd_nxt)) {
 800f19e:	4b7f      	ldr	r3, [pc, #508]	; (800f39c <tcp_process+0x594>)
 800f1a0:	681a      	ldr	r2, [r3, #0]
 800f1a2:	687b      	ldr	r3, [r7, #4]
 800f1a4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800f1a6:	1ad3      	subs	r3, r2, r3
 800f1a8:	3b01      	subs	r3, #1
 800f1aa:	2b00      	cmp	r3, #0
 800f1ac:	db7e      	blt.n	800f2ac <tcp_process+0x4a4>
 800f1ae:	4b7b      	ldr	r3, [pc, #492]	; (800f39c <tcp_process+0x594>)
 800f1b0:	681a      	ldr	r2, [r3, #0]
 800f1b2:	687b      	ldr	r3, [r7, #4]
 800f1b4:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800f1b6:	1ad3      	subs	r3, r2, r3
 800f1b8:	2b00      	cmp	r3, #0
 800f1ba:	dc77      	bgt.n	800f2ac <tcp_process+0x4a4>
          pcb->state = ESTABLISHED;
 800f1bc:	687b      	ldr	r3, [r7, #4]
 800f1be:	2204      	movs	r2, #4
 800f1c0:	751a      	strb	r2, [r3, #20]
          LWIP_DEBUGF(TCP_DEBUG, ("TCP connection established %"U16_F" -> %"U16_F".\n", inseg.tcphdr->src, inseg.tcphdr->dest));
#if LWIP_CALLBACK_API || TCP_LISTEN_BACKLOG
          if (pcb->listener == NULL) {
 800f1c2:	687b      	ldr	r3, [r7, #4]
 800f1c4:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800f1c6:	2b00      	cmp	r3, #0
 800f1c8:	d102      	bne.n	800f1d0 <tcp_process+0x3c8>
            /* listen pcb might be closed by now */
            err = ERR_VAL;
 800f1ca:	23fa      	movs	r3, #250	; 0xfa
 800f1cc:	76bb      	strb	r3, [r7, #26]
 800f1ce:	e01d      	b.n	800f20c <tcp_process+0x404>
          } else
#endif /* LWIP_CALLBACK_API || TCP_LISTEN_BACKLOG */
          {
#if LWIP_CALLBACK_API
            LWIP_ASSERT("pcb->listener->accept != NULL", pcb->listener->accept != NULL);
 800f1d0:	687b      	ldr	r3, [r7, #4]
 800f1d2:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800f1d4:	699b      	ldr	r3, [r3, #24]
 800f1d6:	2b00      	cmp	r3, #0
 800f1d8:	d106      	bne.n	800f1e8 <tcp_process+0x3e0>
 800f1da:	4b76      	ldr	r3, [pc, #472]	; (800f3b4 <tcp_process+0x5ac>)
 800f1dc:	f44f 726a 	mov.w	r2, #936	; 0x3a8
 800f1e0:	4975      	ldr	r1, [pc, #468]	; (800f3b8 <tcp_process+0x5b0>)
 800f1e2:	4876      	ldr	r0, [pc, #472]	; (800f3bc <tcp_process+0x5b4>)
 800f1e4:	f009 f950 	bl	8018488 <iprintf>
#endif
            tcp_backlog_accepted(pcb);
            /* Call the accept function. */
            TCP_EVENT_ACCEPT(pcb->listener, pcb, pcb->callback_arg, ERR_OK, err);
 800f1e8:	687b      	ldr	r3, [r7, #4]
 800f1ea:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800f1ec:	699b      	ldr	r3, [r3, #24]
 800f1ee:	2b00      	cmp	r3, #0
 800f1f0:	d00a      	beq.n	800f208 <tcp_process+0x400>
 800f1f2:	687b      	ldr	r3, [r7, #4]
 800f1f4:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800f1f6:	699b      	ldr	r3, [r3, #24]
 800f1f8:	687a      	ldr	r2, [r7, #4]
 800f1fa:	6910      	ldr	r0, [r2, #16]
 800f1fc:	2200      	movs	r2, #0
 800f1fe:	6879      	ldr	r1, [r7, #4]
 800f200:	4798      	blx	r3
 800f202:	4603      	mov	r3, r0
 800f204:	76bb      	strb	r3, [r7, #26]
 800f206:	e001      	b.n	800f20c <tcp_process+0x404>
 800f208:	23f0      	movs	r3, #240	; 0xf0
 800f20a:	76bb      	strb	r3, [r7, #26]
          }
          if (err != ERR_OK) {
 800f20c:	f997 301a 	ldrsb.w	r3, [r7, #26]
 800f210:	2b00      	cmp	r3, #0
 800f212:	d00a      	beq.n	800f22a <tcp_process+0x422>
            /* If the accept function returns with an error, we abort
             * the connection. */
            /* Already aborted? */
            if (err != ERR_ABRT) {
 800f214:	f997 301a 	ldrsb.w	r3, [r7, #26]
 800f218:	f113 0f0d 	cmn.w	r3, #13
 800f21c:	d002      	beq.n	800f224 <tcp_process+0x41c>
              tcp_abort(pcb);
 800f21e:	6878      	ldr	r0, [r7, #4]
 800f220:	f7fd fd80 	bl	800cd24 <tcp_abort>
            }
            return ERR_ABRT;
 800f224:	f06f 030c 	mvn.w	r3, #12
 800f228:	e1ce      	b.n	800f5c8 <tcp_process+0x7c0>
          }
          /* If there was any data contained within this ACK,
           * we'd better pass it on to the application as well. */
          tcp_receive(pcb);
 800f22a:	6878      	ldr	r0, [r7, #4]
 800f22c:	f000 fae0 	bl	800f7f0 <tcp_receive>

          /* Prevent ACK for SYN to generate a sent event */
          if (recv_acked != 0) {
 800f230:	4b63      	ldr	r3, [pc, #396]	; (800f3c0 <tcp_process+0x5b8>)
 800f232:	881b      	ldrh	r3, [r3, #0]
 800f234:	2b00      	cmp	r3, #0
 800f236:	d005      	beq.n	800f244 <tcp_process+0x43c>
            recv_acked--;
 800f238:	4b61      	ldr	r3, [pc, #388]	; (800f3c0 <tcp_process+0x5b8>)
 800f23a:	881b      	ldrh	r3, [r3, #0]
 800f23c:	3b01      	subs	r3, #1
 800f23e:	b29a      	uxth	r2, r3
 800f240:	4b5f      	ldr	r3, [pc, #380]	; (800f3c0 <tcp_process+0x5b8>)
 800f242:	801a      	strh	r2, [r3, #0]
          }

          pcb->cwnd = LWIP_TCP_CALC_INITIAL_CWND(pcb->mss);
 800f244:	687b      	ldr	r3, [r7, #4]
 800f246:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 800f248:	009a      	lsls	r2, r3, #2
 800f24a:	687b      	ldr	r3, [r7, #4]
 800f24c:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 800f24e:	005b      	lsls	r3, r3, #1
 800f250:	f241 111c 	movw	r1, #4380	; 0x111c
 800f254:	428b      	cmp	r3, r1
 800f256:	bf38      	it	cc
 800f258:	460b      	movcc	r3, r1
 800f25a:	429a      	cmp	r2, r3
 800f25c:	d204      	bcs.n	800f268 <tcp_process+0x460>
 800f25e:	687b      	ldr	r3, [r7, #4]
 800f260:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 800f262:	009b      	lsls	r3, r3, #2
 800f264:	b29b      	uxth	r3, r3
 800f266:	e00d      	b.n	800f284 <tcp_process+0x47c>
 800f268:	687b      	ldr	r3, [r7, #4]
 800f26a:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 800f26c:	005b      	lsls	r3, r3, #1
 800f26e:	f241 121c 	movw	r2, #4380	; 0x111c
 800f272:	4293      	cmp	r3, r2
 800f274:	d904      	bls.n	800f280 <tcp_process+0x478>
 800f276:	687b      	ldr	r3, [r7, #4]
 800f278:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 800f27a:	005b      	lsls	r3, r3, #1
 800f27c:	b29b      	uxth	r3, r3
 800f27e:	e001      	b.n	800f284 <tcp_process+0x47c>
 800f280:	f241 131c 	movw	r3, #4380	; 0x111c
 800f284:	687a      	ldr	r2, [r7, #4]
 800f286:	f8a2 3048 	strh.w	r3, [r2, #72]	; 0x48
          LWIP_DEBUGF(TCP_CWND_DEBUG, ("tcp_process (SYN_RCVD): cwnd %"TCPWNDSIZE_F
                                       " ssthresh %"TCPWNDSIZE_F"\n",
                                       pcb->cwnd, pcb->ssthresh));

          if (recv_flags & TF_GOT_FIN) {
 800f28a:	4b4e      	ldr	r3, [pc, #312]	; (800f3c4 <tcp_process+0x5bc>)
 800f28c:	781b      	ldrb	r3, [r3, #0]
 800f28e:	f003 0320 	and.w	r3, r3, #32
 800f292:	2b00      	cmp	r3, #0
 800f294:	d037      	beq.n	800f306 <tcp_process+0x4fe>
            tcp_ack_now(pcb);
 800f296:	687b      	ldr	r3, [r7, #4]
 800f298:	8b5b      	ldrh	r3, [r3, #26]
 800f29a:	f043 0302 	orr.w	r3, r3, #2
 800f29e:	b29a      	uxth	r2, r3
 800f2a0:	687b      	ldr	r3, [r7, #4]
 800f2a2:	835a      	strh	r2, [r3, #26]
            pcb->state = CLOSE_WAIT;
 800f2a4:	687b      	ldr	r3, [r7, #4]
 800f2a6:	2207      	movs	r2, #7
 800f2a8:	751a      	strb	r2, [r3, #20]
          if (recv_flags & TF_GOT_FIN) {
 800f2aa:	e02c      	b.n	800f306 <tcp_process+0x4fe>
          }
        } else {
          /* incorrect ACK number, send RST */
          tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 800f2ac:	4b3b      	ldr	r3, [pc, #236]	; (800f39c <tcp_process+0x594>)
 800f2ae:	6819      	ldr	r1, [r3, #0]
 800f2b0:	4b3b      	ldr	r3, [pc, #236]	; (800f3a0 <tcp_process+0x598>)
 800f2b2:	881b      	ldrh	r3, [r3, #0]
 800f2b4:	461a      	mov	r2, r3
 800f2b6:	4b3b      	ldr	r3, [pc, #236]	; (800f3a4 <tcp_process+0x59c>)
 800f2b8:	681b      	ldr	r3, [r3, #0]
 800f2ba:	18d0      	adds	r0, r2, r3
                  ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 800f2bc:	4b3a      	ldr	r3, [pc, #232]	; (800f3a8 <tcp_process+0x5a0>)
 800f2be:	681b      	ldr	r3, [r3, #0]
          tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 800f2c0:	885b      	ldrh	r3, [r3, #2]
 800f2c2:	b29b      	uxth	r3, r3
                  ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 800f2c4:	4a38      	ldr	r2, [pc, #224]	; (800f3a8 <tcp_process+0x5a0>)
 800f2c6:	6812      	ldr	r2, [r2, #0]
          tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 800f2c8:	8812      	ldrh	r2, [r2, #0]
 800f2ca:	b292      	uxth	r2, r2
 800f2cc:	9202      	str	r2, [sp, #8]
 800f2ce:	9301      	str	r3, [sp, #4]
 800f2d0:	4b36      	ldr	r3, [pc, #216]	; (800f3ac <tcp_process+0x5a4>)
 800f2d2:	9300      	str	r3, [sp, #0]
 800f2d4:	4b36      	ldr	r3, [pc, #216]	; (800f3b0 <tcp_process+0x5a8>)
 800f2d6:	4602      	mov	r2, r0
 800f2d8:	6878      	ldr	r0, [r7, #4]
 800f2da:	f003 f829 	bl	8012330 <tcp_rst>
        }
      } else if ((flags & TCP_SYN) && (seqno == pcb->rcv_nxt - 1)) {
        /* Looks like another copy of the SYN - retransmit our SYN-ACK */
        tcp_rexmit(pcb);
      }
      break;
 800f2de:	e167      	b.n	800f5b0 <tcp_process+0x7a8>
      } else if ((flags & TCP_SYN) && (seqno == pcb->rcv_nxt - 1)) {
 800f2e0:	4b2d      	ldr	r3, [pc, #180]	; (800f398 <tcp_process+0x590>)
 800f2e2:	781b      	ldrb	r3, [r3, #0]
 800f2e4:	f003 0302 	and.w	r3, r3, #2
 800f2e8:	2b00      	cmp	r3, #0
 800f2ea:	f000 8161 	beq.w	800f5b0 <tcp_process+0x7a8>
 800f2ee:	687b      	ldr	r3, [r7, #4]
 800f2f0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800f2f2:	1e5a      	subs	r2, r3, #1
 800f2f4:	4b2b      	ldr	r3, [pc, #172]	; (800f3a4 <tcp_process+0x59c>)
 800f2f6:	681b      	ldr	r3, [r3, #0]
 800f2f8:	429a      	cmp	r2, r3
 800f2fa:	f040 8159 	bne.w	800f5b0 <tcp_process+0x7a8>
        tcp_rexmit(pcb);
 800f2fe:	6878      	ldr	r0, [r7, #4]
 800f300:	f002 fe10 	bl	8011f24 <tcp_rexmit>
      break;
 800f304:	e154      	b.n	800f5b0 <tcp_process+0x7a8>
 800f306:	e153      	b.n	800f5b0 <tcp_process+0x7a8>
    case CLOSE_WAIT:
    /* FALLTHROUGH */
    case ESTABLISHED:
      tcp_receive(pcb);
 800f308:	6878      	ldr	r0, [r7, #4]
 800f30a:	f000 fa71 	bl	800f7f0 <tcp_receive>
      if (recv_flags & TF_GOT_FIN) { /* passive close */
 800f30e:	4b2d      	ldr	r3, [pc, #180]	; (800f3c4 <tcp_process+0x5bc>)
 800f310:	781b      	ldrb	r3, [r3, #0]
 800f312:	f003 0320 	and.w	r3, r3, #32
 800f316:	2b00      	cmp	r3, #0
 800f318:	f000 814c 	beq.w	800f5b4 <tcp_process+0x7ac>
        tcp_ack_now(pcb);
 800f31c:	687b      	ldr	r3, [r7, #4]
 800f31e:	8b5b      	ldrh	r3, [r3, #26]
 800f320:	f043 0302 	orr.w	r3, r3, #2
 800f324:	b29a      	uxth	r2, r3
 800f326:	687b      	ldr	r3, [r7, #4]
 800f328:	835a      	strh	r2, [r3, #26]
        pcb->state = CLOSE_WAIT;
 800f32a:	687b      	ldr	r3, [r7, #4]
 800f32c:	2207      	movs	r2, #7
 800f32e:	751a      	strb	r2, [r3, #20]
      }
      break;
 800f330:	e140      	b.n	800f5b4 <tcp_process+0x7ac>
    case FIN_WAIT_1:
      tcp_receive(pcb);
 800f332:	6878      	ldr	r0, [r7, #4]
 800f334:	f000 fa5c 	bl	800f7f0 <tcp_receive>
      if (recv_flags & TF_GOT_FIN) {
 800f338:	4b22      	ldr	r3, [pc, #136]	; (800f3c4 <tcp_process+0x5bc>)
 800f33a:	781b      	ldrb	r3, [r3, #0]
 800f33c:	f003 0320 	and.w	r3, r3, #32
 800f340:	2b00      	cmp	r3, #0
 800f342:	d071      	beq.n	800f428 <tcp_process+0x620>
        if ((flags & TCP_ACK) && (ackno == pcb->snd_nxt) &&
 800f344:	4b14      	ldr	r3, [pc, #80]	; (800f398 <tcp_process+0x590>)
 800f346:	781b      	ldrb	r3, [r3, #0]
 800f348:	f003 0310 	and.w	r3, r3, #16
 800f34c:	2b00      	cmp	r3, #0
 800f34e:	d060      	beq.n	800f412 <tcp_process+0x60a>
 800f350:	687b      	ldr	r3, [r7, #4]
 800f352:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 800f354:	4b11      	ldr	r3, [pc, #68]	; (800f39c <tcp_process+0x594>)
 800f356:	681b      	ldr	r3, [r3, #0]
 800f358:	429a      	cmp	r2, r3
 800f35a:	d15a      	bne.n	800f412 <tcp_process+0x60a>
            pcb->unsent == NULL) {
 800f35c:	687b      	ldr	r3, [r7, #4]
 800f35e:	6edb      	ldr	r3, [r3, #108]	; 0x6c
        if ((flags & TCP_ACK) && (ackno == pcb->snd_nxt) &&
 800f360:	2b00      	cmp	r3, #0
 800f362:	d156      	bne.n	800f412 <tcp_process+0x60a>
          LWIP_DEBUGF(TCP_DEBUG,
                      ("TCP connection closed: FIN_WAIT_1 %"U16_F" -> %"U16_F".\n", inseg.tcphdr->src, inseg.tcphdr->dest));
          tcp_ack_now(pcb);
 800f364:	687b      	ldr	r3, [r7, #4]
 800f366:	8b5b      	ldrh	r3, [r3, #26]
 800f368:	f043 0302 	orr.w	r3, r3, #2
 800f36c:	b29a      	uxth	r2, r3
 800f36e:	687b      	ldr	r3, [r7, #4]
 800f370:	835a      	strh	r2, [r3, #26]
          tcp_pcb_purge(pcb);
 800f372:	6878      	ldr	r0, [r7, #4]
 800f374:	f7fe fdbc 	bl	800def0 <tcp_pcb_purge>
          TCP_RMV_ACTIVE(pcb);
 800f378:	4b13      	ldr	r3, [pc, #76]	; (800f3c8 <tcp_process+0x5c0>)
 800f37a:	681b      	ldr	r3, [r3, #0]
 800f37c:	687a      	ldr	r2, [r7, #4]
 800f37e:	429a      	cmp	r2, r3
 800f380:	d105      	bne.n	800f38e <tcp_process+0x586>
 800f382:	4b11      	ldr	r3, [pc, #68]	; (800f3c8 <tcp_process+0x5c0>)
 800f384:	681b      	ldr	r3, [r3, #0]
 800f386:	68db      	ldr	r3, [r3, #12]
 800f388:	4a0f      	ldr	r2, [pc, #60]	; (800f3c8 <tcp_process+0x5c0>)
 800f38a:	6013      	str	r3, [r2, #0]
 800f38c:	e02e      	b.n	800f3ec <tcp_process+0x5e4>
 800f38e:	4b0e      	ldr	r3, [pc, #56]	; (800f3c8 <tcp_process+0x5c0>)
 800f390:	681b      	ldr	r3, [r3, #0]
 800f392:	617b      	str	r3, [r7, #20]
 800f394:	e027      	b.n	800f3e6 <tcp_process+0x5de>
 800f396:	bf00      	nop
 800f398:	20008960 	.word	0x20008960
 800f39c:	20008958 	.word	0x20008958
 800f3a0:	2000895e 	.word	0x2000895e
 800f3a4:	20008954 	.word	0x20008954
 800f3a8:	20008944 	.word	0x20008944
 800f3ac:	2000538c 	.word	0x2000538c
 800f3b0:	20005390 	.word	0x20005390
 800f3b4:	0801a60c 	.word	0x0801a60c
 800f3b8:	0801a8ac 	.word	0x0801a8ac
 800f3bc:	0801a658 	.word	0x0801a658
 800f3c0:	2000895c 	.word	0x2000895c
 800f3c4:	20008961 	.word	0x20008961
 800f3c8:	20008928 	.word	0x20008928
 800f3cc:	697b      	ldr	r3, [r7, #20]
 800f3ce:	68db      	ldr	r3, [r3, #12]
 800f3d0:	687a      	ldr	r2, [r7, #4]
 800f3d2:	429a      	cmp	r2, r3
 800f3d4:	d104      	bne.n	800f3e0 <tcp_process+0x5d8>
 800f3d6:	687b      	ldr	r3, [r7, #4]
 800f3d8:	68da      	ldr	r2, [r3, #12]
 800f3da:	697b      	ldr	r3, [r7, #20]
 800f3dc:	60da      	str	r2, [r3, #12]
 800f3de:	e005      	b.n	800f3ec <tcp_process+0x5e4>
 800f3e0:	697b      	ldr	r3, [r7, #20]
 800f3e2:	68db      	ldr	r3, [r3, #12]
 800f3e4:	617b      	str	r3, [r7, #20]
 800f3e6:	697b      	ldr	r3, [r7, #20]
 800f3e8:	2b00      	cmp	r3, #0
 800f3ea:	d1ef      	bne.n	800f3cc <tcp_process+0x5c4>
 800f3ec:	687b      	ldr	r3, [r7, #4]
 800f3ee:	2200      	movs	r2, #0
 800f3f0:	60da      	str	r2, [r3, #12]
 800f3f2:	4b77      	ldr	r3, [pc, #476]	; (800f5d0 <tcp_process+0x7c8>)
 800f3f4:	2201      	movs	r2, #1
 800f3f6:	701a      	strb	r2, [r3, #0]
          pcb->state = TIME_WAIT;
 800f3f8:	687b      	ldr	r3, [r7, #4]
 800f3fa:	220a      	movs	r2, #10
 800f3fc:	751a      	strb	r2, [r3, #20]
          TCP_REG(&tcp_tw_pcbs, pcb);
 800f3fe:	4b75      	ldr	r3, [pc, #468]	; (800f5d4 <tcp_process+0x7cc>)
 800f400:	681a      	ldr	r2, [r3, #0]
 800f402:	687b      	ldr	r3, [r7, #4]
 800f404:	60da      	str	r2, [r3, #12]
 800f406:	4a73      	ldr	r2, [pc, #460]	; (800f5d4 <tcp_process+0x7cc>)
 800f408:	687b      	ldr	r3, [r7, #4]
 800f40a:	6013      	str	r3, [r2, #0]
 800f40c:	f003 f952 	bl	80126b4 <tcp_timer_needed>
        }
      } else if ((flags & TCP_ACK) && (ackno == pcb->snd_nxt) &&
                 pcb->unsent == NULL) {
        pcb->state = FIN_WAIT_2;
      }
      break;
 800f410:	e0d2      	b.n	800f5b8 <tcp_process+0x7b0>
          tcp_ack_now(pcb);
 800f412:	687b      	ldr	r3, [r7, #4]
 800f414:	8b5b      	ldrh	r3, [r3, #26]
 800f416:	f043 0302 	orr.w	r3, r3, #2
 800f41a:	b29a      	uxth	r2, r3
 800f41c:	687b      	ldr	r3, [r7, #4]
 800f41e:	835a      	strh	r2, [r3, #26]
          pcb->state = CLOSING;
 800f420:	687b      	ldr	r3, [r7, #4]
 800f422:	2208      	movs	r2, #8
 800f424:	751a      	strb	r2, [r3, #20]
      break;
 800f426:	e0c7      	b.n	800f5b8 <tcp_process+0x7b0>
      } else if ((flags & TCP_ACK) && (ackno == pcb->snd_nxt) &&
 800f428:	4b6b      	ldr	r3, [pc, #428]	; (800f5d8 <tcp_process+0x7d0>)
 800f42a:	781b      	ldrb	r3, [r3, #0]
 800f42c:	f003 0310 	and.w	r3, r3, #16
 800f430:	2b00      	cmp	r3, #0
 800f432:	f000 80c1 	beq.w	800f5b8 <tcp_process+0x7b0>
 800f436:	687b      	ldr	r3, [r7, #4]
 800f438:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 800f43a:	4b68      	ldr	r3, [pc, #416]	; (800f5dc <tcp_process+0x7d4>)
 800f43c:	681b      	ldr	r3, [r3, #0]
 800f43e:	429a      	cmp	r2, r3
 800f440:	f040 80ba 	bne.w	800f5b8 <tcp_process+0x7b0>
                 pcb->unsent == NULL) {
 800f444:	687b      	ldr	r3, [r7, #4]
 800f446:	6edb      	ldr	r3, [r3, #108]	; 0x6c
      } else if ((flags & TCP_ACK) && (ackno == pcb->snd_nxt) &&
 800f448:	2b00      	cmp	r3, #0
 800f44a:	f040 80b5 	bne.w	800f5b8 <tcp_process+0x7b0>
        pcb->state = FIN_WAIT_2;
 800f44e:	687b      	ldr	r3, [r7, #4]
 800f450:	2206      	movs	r2, #6
 800f452:	751a      	strb	r2, [r3, #20]
      break;
 800f454:	e0b0      	b.n	800f5b8 <tcp_process+0x7b0>
    case FIN_WAIT_2:
      tcp_receive(pcb);
 800f456:	6878      	ldr	r0, [r7, #4]
 800f458:	f000 f9ca 	bl	800f7f0 <tcp_receive>
      if (recv_flags & TF_GOT_FIN) {
 800f45c:	4b60      	ldr	r3, [pc, #384]	; (800f5e0 <tcp_process+0x7d8>)
 800f45e:	781b      	ldrb	r3, [r3, #0]
 800f460:	f003 0320 	and.w	r3, r3, #32
 800f464:	2b00      	cmp	r3, #0
 800f466:	f000 80a9 	beq.w	800f5bc <tcp_process+0x7b4>
        LWIP_DEBUGF(TCP_DEBUG, ("TCP connection closed: FIN_WAIT_2 %"U16_F" -> %"U16_F".\n", inseg.tcphdr->src, inseg.tcphdr->dest));
        tcp_ack_now(pcb);
 800f46a:	687b      	ldr	r3, [r7, #4]
 800f46c:	8b5b      	ldrh	r3, [r3, #26]
 800f46e:	f043 0302 	orr.w	r3, r3, #2
 800f472:	b29a      	uxth	r2, r3
 800f474:	687b      	ldr	r3, [r7, #4]
 800f476:	835a      	strh	r2, [r3, #26]
        tcp_pcb_purge(pcb);
 800f478:	6878      	ldr	r0, [r7, #4]
 800f47a:	f7fe fd39 	bl	800def0 <tcp_pcb_purge>
        TCP_RMV_ACTIVE(pcb);
 800f47e:	4b59      	ldr	r3, [pc, #356]	; (800f5e4 <tcp_process+0x7dc>)
 800f480:	681b      	ldr	r3, [r3, #0]
 800f482:	687a      	ldr	r2, [r7, #4]
 800f484:	429a      	cmp	r2, r3
 800f486:	d105      	bne.n	800f494 <tcp_process+0x68c>
 800f488:	4b56      	ldr	r3, [pc, #344]	; (800f5e4 <tcp_process+0x7dc>)
 800f48a:	681b      	ldr	r3, [r3, #0]
 800f48c:	68db      	ldr	r3, [r3, #12]
 800f48e:	4a55      	ldr	r2, [pc, #340]	; (800f5e4 <tcp_process+0x7dc>)
 800f490:	6013      	str	r3, [r2, #0]
 800f492:	e013      	b.n	800f4bc <tcp_process+0x6b4>
 800f494:	4b53      	ldr	r3, [pc, #332]	; (800f5e4 <tcp_process+0x7dc>)
 800f496:	681b      	ldr	r3, [r3, #0]
 800f498:	613b      	str	r3, [r7, #16]
 800f49a:	e00c      	b.n	800f4b6 <tcp_process+0x6ae>
 800f49c:	693b      	ldr	r3, [r7, #16]
 800f49e:	68db      	ldr	r3, [r3, #12]
 800f4a0:	687a      	ldr	r2, [r7, #4]
 800f4a2:	429a      	cmp	r2, r3
 800f4a4:	d104      	bne.n	800f4b0 <tcp_process+0x6a8>
 800f4a6:	687b      	ldr	r3, [r7, #4]
 800f4a8:	68da      	ldr	r2, [r3, #12]
 800f4aa:	693b      	ldr	r3, [r7, #16]
 800f4ac:	60da      	str	r2, [r3, #12]
 800f4ae:	e005      	b.n	800f4bc <tcp_process+0x6b4>
 800f4b0:	693b      	ldr	r3, [r7, #16]
 800f4b2:	68db      	ldr	r3, [r3, #12]
 800f4b4:	613b      	str	r3, [r7, #16]
 800f4b6:	693b      	ldr	r3, [r7, #16]
 800f4b8:	2b00      	cmp	r3, #0
 800f4ba:	d1ef      	bne.n	800f49c <tcp_process+0x694>
 800f4bc:	687b      	ldr	r3, [r7, #4]
 800f4be:	2200      	movs	r2, #0
 800f4c0:	60da      	str	r2, [r3, #12]
 800f4c2:	4b43      	ldr	r3, [pc, #268]	; (800f5d0 <tcp_process+0x7c8>)
 800f4c4:	2201      	movs	r2, #1
 800f4c6:	701a      	strb	r2, [r3, #0]
        pcb->state = TIME_WAIT;
 800f4c8:	687b      	ldr	r3, [r7, #4]
 800f4ca:	220a      	movs	r2, #10
 800f4cc:	751a      	strb	r2, [r3, #20]
        TCP_REG(&tcp_tw_pcbs, pcb);
 800f4ce:	4b41      	ldr	r3, [pc, #260]	; (800f5d4 <tcp_process+0x7cc>)
 800f4d0:	681a      	ldr	r2, [r3, #0]
 800f4d2:	687b      	ldr	r3, [r7, #4]
 800f4d4:	60da      	str	r2, [r3, #12]
 800f4d6:	4a3f      	ldr	r2, [pc, #252]	; (800f5d4 <tcp_process+0x7cc>)
 800f4d8:	687b      	ldr	r3, [r7, #4]
 800f4da:	6013      	str	r3, [r2, #0]
 800f4dc:	f003 f8ea 	bl	80126b4 <tcp_timer_needed>
      }
      break;
 800f4e0:	e06c      	b.n	800f5bc <tcp_process+0x7b4>
    case CLOSING:
      tcp_receive(pcb);
 800f4e2:	6878      	ldr	r0, [r7, #4]
 800f4e4:	f000 f984 	bl	800f7f0 <tcp_receive>
      if ((flags & TCP_ACK) && ackno == pcb->snd_nxt && pcb->unsent == NULL) {
 800f4e8:	4b3b      	ldr	r3, [pc, #236]	; (800f5d8 <tcp_process+0x7d0>)
 800f4ea:	781b      	ldrb	r3, [r3, #0]
 800f4ec:	f003 0310 	and.w	r3, r3, #16
 800f4f0:	2b00      	cmp	r3, #0
 800f4f2:	d065      	beq.n	800f5c0 <tcp_process+0x7b8>
 800f4f4:	687b      	ldr	r3, [r7, #4]
 800f4f6:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 800f4f8:	4b38      	ldr	r3, [pc, #224]	; (800f5dc <tcp_process+0x7d4>)
 800f4fa:	681b      	ldr	r3, [r3, #0]
 800f4fc:	429a      	cmp	r2, r3
 800f4fe:	d15f      	bne.n	800f5c0 <tcp_process+0x7b8>
 800f500:	687b      	ldr	r3, [r7, #4]
 800f502:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800f504:	2b00      	cmp	r3, #0
 800f506:	d15b      	bne.n	800f5c0 <tcp_process+0x7b8>
        LWIP_DEBUGF(TCP_DEBUG, ("TCP connection closed: CLOSING %"U16_F" -> %"U16_F".\n", inseg.tcphdr->src, inseg.tcphdr->dest));
        tcp_pcb_purge(pcb);
 800f508:	6878      	ldr	r0, [r7, #4]
 800f50a:	f7fe fcf1 	bl	800def0 <tcp_pcb_purge>
        TCP_RMV_ACTIVE(pcb);
 800f50e:	4b35      	ldr	r3, [pc, #212]	; (800f5e4 <tcp_process+0x7dc>)
 800f510:	681b      	ldr	r3, [r3, #0]
 800f512:	687a      	ldr	r2, [r7, #4]
 800f514:	429a      	cmp	r2, r3
 800f516:	d105      	bne.n	800f524 <tcp_process+0x71c>
 800f518:	4b32      	ldr	r3, [pc, #200]	; (800f5e4 <tcp_process+0x7dc>)
 800f51a:	681b      	ldr	r3, [r3, #0]
 800f51c:	68db      	ldr	r3, [r3, #12]
 800f51e:	4a31      	ldr	r2, [pc, #196]	; (800f5e4 <tcp_process+0x7dc>)
 800f520:	6013      	str	r3, [r2, #0]
 800f522:	e013      	b.n	800f54c <tcp_process+0x744>
 800f524:	4b2f      	ldr	r3, [pc, #188]	; (800f5e4 <tcp_process+0x7dc>)
 800f526:	681b      	ldr	r3, [r3, #0]
 800f528:	60fb      	str	r3, [r7, #12]
 800f52a:	e00c      	b.n	800f546 <tcp_process+0x73e>
 800f52c:	68fb      	ldr	r3, [r7, #12]
 800f52e:	68db      	ldr	r3, [r3, #12]
 800f530:	687a      	ldr	r2, [r7, #4]
 800f532:	429a      	cmp	r2, r3
 800f534:	d104      	bne.n	800f540 <tcp_process+0x738>
 800f536:	687b      	ldr	r3, [r7, #4]
 800f538:	68da      	ldr	r2, [r3, #12]
 800f53a:	68fb      	ldr	r3, [r7, #12]
 800f53c:	60da      	str	r2, [r3, #12]
 800f53e:	e005      	b.n	800f54c <tcp_process+0x744>
 800f540:	68fb      	ldr	r3, [r7, #12]
 800f542:	68db      	ldr	r3, [r3, #12]
 800f544:	60fb      	str	r3, [r7, #12]
 800f546:	68fb      	ldr	r3, [r7, #12]
 800f548:	2b00      	cmp	r3, #0
 800f54a:	d1ef      	bne.n	800f52c <tcp_process+0x724>
 800f54c:	687b      	ldr	r3, [r7, #4]
 800f54e:	2200      	movs	r2, #0
 800f550:	60da      	str	r2, [r3, #12]
 800f552:	4b1f      	ldr	r3, [pc, #124]	; (800f5d0 <tcp_process+0x7c8>)
 800f554:	2201      	movs	r2, #1
 800f556:	701a      	strb	r2, [r3, #0]
        pcb->state = TIME_WAIT;
 800f558:	687b      	ldr	r3, [r7, #4]
 800f55a:	220a      	movs	r2, #10
 800f55c:	751a      	strb	r2, [r3, #20]
        TCP_REG(&tcp_tw_pcbs, pcb);
 800f55e:	4b1d      	ldr	r3, [pc, #116]	; (800f5d4 <tcp_process+0x7cc>)
 800f560:	681a      	ldr	r2, [r3, #0]
 800f562:	687b      	ldr	r3, [r7, #4]
 800f564:	60da      	str	r2, [r3, #12]
 800f566:	4a1b      	ldr	r2, [pc, #108]	; (800f5d4 <tcp_process+0x7cc>)
 800f568:	687b      	ldr	r3, [r7, #4]
 800f56a:	6013      	str	r3, [r2, #0]
 800f56c:	f003 f8a2 	bl	80126b4 <tcp_timer_needed>
      }
      break;
 800f570:	e026      	b.n	800f5c0 <tcp_process+0x7b8>
    case LAST_ACK:
      tcp_receive(pcb);
 800f572:	6878      	ldr	r0, [r7, #4]
 800f574:	f000 f93c 	bl	800f7f0 <tcp_receive>
      if ((flags & TCP_ACK) && ackno == pcb->snd_nxt && pcb->unsent == NULL) {
 800f578:	4b17      	ldr	r3, [pc, #92]	; (800f5d8 <tcp_process+0x7d0>)
 800f57a:	781b      	ldrb	r3, [r3, #0]
 800f57c:	f003 0310 	and.w	r3, r3, #16
 800f580:	2b00      	cmp	r3, #0
 800f582:	d01f      	beq.n	800f5c4 <tcp_process+0x7bc>
 800f584:	687b      	ldr	r3, [r7, #4]
 800f586:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 800f588:	4b14      	ldr	r3, [pc, #80]	; (800f5dc <tcp_process+0x7d4>)
 800f58a:	681b      	ldr	r3, [r3, #0]
 800f58c:	429a      	cmp	r2, r3
 800f58e:	d119      	bne.n	800f5c4 <tcp_process+0x7bc>
 800f590:	687b      	ldr	r3, [r7, #4]
 800f592:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800f594:	2b00      	cmp	r3, #0
 800f596:	d115      	bne.n	800f5c4 <tcp_process+0x7bc>
        LWIP_DEBUGF(TCP_DEBUG, ("TCP connection closed: LAST_ACK %"U16_F" -> %"U16_F".\n", inseg.tcphdr->src, inseg.tcphdr->dest));
        /* bugfix #21699: don't set pcb->state to CLOSED here or we risk leaking segments */
        recv_flags |= TF_CLOSED;
 800f598:	4b11      	ldr	r3, [pc, #68]	; (800f5e0 <tcp_process+0x7d8>)
 800f59a:	781b      	ldrb	r3, [r3, #0]
 800f59c:	f043 0310 	orr.w	r3, r3, #16
 800f5a0:	b2da      	uxtb	r2, r3
 800f5a2:	4b0f      	ldr	r3, [pc, #60]	; (800f5e0 <tcp_process+0x7d8>)
 800f5a4:	701a      	strb	r2, [r3, #0]
      }
      break;
 800f5a6:	e00d      	b.n	800f5c4 <tcp_process+0x7bc>
    default:
      break;
 800f5a8:	bf00      	nop
 800f5aa:	e00c      	b.n	800f5c6 <tcp_process+0x7be>
      break;
 800f5ac:	bf00      	nop
 800f5ae:	e00a      	b.n	800f5c6 <tcp_process+0x7be>
      break;
 800f5b0:	bf00      	nop
 800f5b2:	e008      	b.n	800f5c6 <tcp_process+0x7be>
      break;
 800f5b4:	bf00      	nop
 800f5b6:	e006      	b.n	800f5c6 <tcp_process+0x7be>
      break;
 800f5b8:	bf00      	nop
 800f5ba:	e004      	b.n	800f5c6 <tcp_process+0x7be>
      break;
 800f5bc:	bf00      	nop
 800f5be:	e002      	b.n	800f5c6 <tcp_process+0x7be>
      break;
 800f5c0:	bf00      	nop
 800f5c2:	e000      	b.n	800f5c6 <tcp_process+0x7be>
      break;
 800f5c4:	bf00      	nop
  }
  return ERR_OK;
 800f5c6:	2300      	movs	r3, #0
}
 800f5c8:	4618      	mov	r0, r3
 800f5ca:	3724      	adds	r7, #36	; 0x24
 800f5cc:	46bd      	mov	sp, r7
 800f5ce:	bd90      	pop	{r4, r7, pc}
 800f5d0:	20008930 	.word	0x20008930
 800f5d4:	2000892c 	.word	0x2000892c
 800f5d8:	20008960 	.word	0x20008960
 800f5dc:	20008958 	.word	0x20008958
 800f5e0:	20008961 	.word	0x20008961
 800f5e4:	20008928 	.word	0x20008928

0800f5e8 <tcp_oos_insert_segment>:
 *
 * Called from tcp_receive()
 */
static void
tcp_oos_insert_segment(struct tcp_seg *cseg, struct tcp_seg *next)
{
 800f5e8:	b590      	push	{r4, r7, lr}
 800f5ea:	b085      	sub	sp, #20
 800f5ec:	af00      	add	r7, sp, #0
 800f5ee:	6078      	str	r0, [r7, #4]
 800f5f0:	6039      	str	r1, [r7, #0]
  struct tcp_seg *old_seg;

  LWIP_ASSERT("tcp_oos_insert_segment: invalid cseg", cseg != NULL);
 800f5f2:	687b      	ldr	r3, [r7, #4]
 800f5f4:	2b00      	cmp	r3, #0
 800f5f6:	d106      	bne.n	800f606 <tcp_oos_insert_segment+0x1e>
 800f5f8:	4b3b      	ldr	r3, [pc, #236]	; (800f6e8 <tcp_oos_insert_segment+0x100>)
 800f5fa:	f240 421f 	movw	r2, #1055	; 0x41f
 800f5fe:	493b      	ldr	r1, [pc, #236]	; (800f6ec <tcp_oos_insert_segment+0x104>)
 800f600:	483b      	ldr	r0, [pc, #236]	; (800f6f0 <tcp_oos_insert_segment+0x108>)
 800f602:	f008 ff41 	bl	8018488 <iprintf>

  if (TCPH_FLAGS(cseg->tcphdr) & TCP_FIN) {
 800f606:	687b      	ldr	r3, [r7, #4]
 800f608:	68db      	ldr	r3, [r3, #12]
 800f60a:	899b      	ldrh	r3, [r3, #12]
 800f60c:	b29b      	uxth	r3, r3
 800f60e:	4618      	mov	r0, r3
 800f610:	f7fa fe3e 	bl	800a290 <lwip_htons>
 800f614:	4603      	mov	r3, r0
 800f616:	b2db      	uxtb	r3, r3
 800f618:	f003 0301 	and.w	r3, r3, #1
 800f61c:	2b00      	cmp	r3, #0
 800f61e:	d028      	beq.n	800f672 <tcp_oos_insert_segment+0x8a>
    /* received segment overlaps all following segments */
    tcp_segs_free(next);
 800f620:	6838      	ldr	r0, [r7, #0]
 800f622:	f7fe f9b3 	bl	800d98c <tcp_segs_free>
    next = NULL;
 800f626:	2300      	movs	r3, #0
 800f628:	603b      	str	r3, [r7, #0]
 800f62a:	e056      	b.n	800f6da <tcp_oos_insert_segment+0xf2>
       oos queue may have segments with FIN flag */
    while (next &&
           TCP_SEQ_GEQ((seqno + cseg->len),
                       (next->tcphdr->seqno + next->len))) {
      /* cseg with FIN already processed */
      if (TCPH_FLAGS(next->tcphdr) & TCP_FIN) {
 800f62c:	683b      	ldr	r3, [r7, #0]
 800f62e:	68db      	ldr	r3, [r3, #12]
 800f630:	899b      	ldrh	r3, [r3, #12]
 800f632:	b29b      	uxth	r3, r3
 800f634:	4618      	mov	r0, r3
 800f636:	f7fa fe2b 	bl	800a290 <lwip_htons>
 800f63a:	4603      	mov	r3, r0
 800f63c:	b2db      	uxtb	r3, r3
 800f63e:	f003 0301 	and.w	r3, r3, #1
 800f642:	2b00      	cmp	r3, #0
 800f644:	d00d      	beq.n	800f662 <tcp_oos_insert_segment+0x7a>
        TCPH_SET_FLAG(cseg->tcphdr, TCP_FIN);
 800f646:	687b      	ldr	r3, [r7, #4]
 800f648:	68db      	ldr	r3, [r3, #12]
 800f64a:	899b      	ldrh	r3, [r3, #12]
 800f64c:	b29c      	uxth	r4, r3
 800f64e:	2001      	movs	r0, #1
 800f650:	f7fa fe1e 	bl	800a290 <lwip_htons>
 800f654:	4603      	mov	r3, r0
 800f656:	461a      	mov	r2, r3
 800f658:	687b      	ldr	r3, [r7, #4]
 800f65a:	68db      	ldr	r3, [r3, #12]
 800f65c:	4322      	orrs	r2, r4
 800f65e:	b292      	uxth	r2, r2
 800f660:	819a      	strh	r2, [r3, #12]
      }
      old_seg = next;
 800f662:	683b      	ldr	r3, [r7, #0]
 800f664:	60fb      	str	r3, [r7, #12]
      next = next->next;
 800f666:	683b      	ldr	r3, [r7, #0]
 800f668:	681b      	ldr	r3, [r3, #0]
 800f66a:	603b      	str	r3, [r7, #0]
      tcp_seg_free(old_seg);
 800f66c:	68f8      	ldr	r0, [r7, #12]
 800f66e:	f7fe f9a2 	bl	800d9b6 <tcp_seg_free>
    while (next &&
 800f672:	683b      	ldr	r3, [r7, #0]
 800f674:	2b00      	cmp	r3, #0
 800f676:	d00e      	beq.n	800f696 <tcp_oos_insert_segment+0xae>
           TCP_SEQ_GEQ((seqno + cseg->len),
 800f678:	687b      	ldr	r3, [r7, #4]
 800f67a:	891b      	ldrh	r3, [r3, #8]
 800f67c:	461a      	mov	r2, r3
 800f67e:	4b1d      	ldr	r3, [pc, #116]	; (800f6f4 <tcp_oos_insert_segment+0x10c>)
 800f680:	681b      	ldr	r3, [r3, #0]
 800f682:	441a      	add	r2, r3
 800f684:	683b      	ldr	r3, [r7, #0]
 800f686:	68db      	ldr	r3, [r3, #12]
 800f688:	685b      	ldr	r3, [r3, #4]
 800f68a:	6839      	ldr	r1, [r7, #0]
 800f68c:	8909      	ldrh	r1, [r1, #8]
 800f68e:	440b      	add	r3, r1
 800f690:	1ad3      	subs	r3, r2, r3
    while (next &&
 800f692:	2b00      	cmp	r3, #0
 800f694:	daca      	bge.n	800f62c <tcp_oos_insert_segment+0x44>
    }
    if (next &&
 800f696:	683b      	ldr	r3, [r7, #0]
 800f698:	2b00      	cmp	r3, #0
 800f69a:	d01e      	beq.n	800f6da <tcp_oos_insert_segment+0xf2>
        TCP_SEQ_GT(seqno + cseg->len, next->tcphdr->seqno)) {
 800f69c:	687b      	ldr	r3, [r7, #4]
 800f69e:	891b      	ldrh	r3, [r3, #8]
 800f6a0:	461a      	mov	r2, r3
 800f6a2:	4b14      	ldr	r3, [pc, #80]	; (800f6f4 <tcp_oos_insert_segment+0x10c>)
 800f6a4:	681b      	ldr	r3, [r3, #0]
 800f6a6:	441a      	add	r2, r3
 800f6a8:	683b      	ldr	r3, [r7, #0]
 800f6aa:	68db      	ldr	r3, [r3, #12]
 800f6ac:	685b      	ldr	r3, [r3, #4]
 800f6ae:	1ad3      	subs	r3, r2, r3
    if (next &&
 800f6b0:	2b00      	cmp	r3, #0
 800f6b2:	dd12      	ble.n	800f6da <tcp_oos_insert_segment+0xf2>
      /* We need to trim the incoming segment. */
      cseg->len = (u16_t)(next->tcphdr->seqno - seqno);
 800f6b4:	683b      	ldr	r3, [r7, #0]
 800f6b6:	68db      	ldr	r3, [r3, #12]
 800f6b8:	685b      	ldr	r3, [r3, #4]
 800f6ba:	b29a      	uxth	r2, r3
 800f6bc:	4b0d      	ldr	r3, [pc, #52]	; (800f6f4 <tcp_oos_insert_segment+0x10c>)
 800f6be:	681b      	ldr	r3, [r3, #0]
 800f6c0:	b29b      	uxth	r3, r3
 800f6c2:	1ad3      	subs	r3, r2, r3
 800f6c4:	b29a      	uxth	r2, r3
 800f6c6:	687b      	ldr	r3, [r7, #4]
 800f6c8:	811a      	strh	r2, [r3, #8]
      pbuf_realloc(cseg->p, cseg->len);
 800f6ca:	687b      	ldr	r3, [r7, #4]
 800f6cc:	685a      	ldr	r2, [r3, #4]
 800f6ce:	687b      	ldr	r3, [r7, #4]
 800f6d0:	891b      	ldrh	r3, [r3, #8]
 800f6d2:	4619      	mov	r1, r3
 800f6d4:	4610      	mov	r0, r2
 800f6d6:	f7fc faad 	bl	800bc34 <pbuf_realloc>
    }
  }
  cseg->next = next;
 800f6da:	687b      	ldr	r3, [r7, #4]
 800f6dc:	683a      	ldr	r2, [r7, #0]
 800f6de:	601a      	str	r2, [r3, #0]
}
 800f6e0:	bf00      	nop
 800f6e2:	3714      	adds	r7, #20
 800f6e4:	46bd      	mov	sp, r7
 800f6e6:	bd90      	pop	{r4, r7, pc}
 800f6e8:	0801a60c 	.word	0x0801a60c
 800f6ec:	0801a8cc 	.word	0x0801a8cc
 800f6f0:	0801a658 	.word	0x0801a658
 800f6f4:	20008954 	.word	0x20008954

0800f6f8 <tcp_free_acked_segments>:

/** Remove segments from a list if the incoming ACK acknowledges them */
static struct tcp_seg *
tcp_free_acked_segments(struct tcp_pcb *pcb, struct tcp_seg *seg_list, const char *dbg_list_name,
                        struct tcp_seg *dbg_other_seg_list)
{
 800f6f8:	b5b0      	push	{r4, r5, r7, lr}
 800f6fa:	b086      	sub	sp, #24
 800f6fc:	af00      	add	r7, sp, #0
 800f6fe:	60f8      	str	r0, [r7, #12]
 800f700:	60b9      	str	r1, [r7, #8]
 800f702:	607a      	str	r2, [r7, #4]
 800f704:	603b      	str	r3, [r7, #0]
  u16_t clen;

  LWIP_UNUSED_ARG(dbg_list_name);
  LWIP_UNUSED_ARG(dbg_other_seg_list);

  while (seg_list != NULL &&
 800f706:	e03e      	b.n	800f786 <tcp_free_acked_segments+0x8e>
    LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_receive: removing %"U32_F":%"U32_F" from pcb->%s\n",
                                  lwip_ntohl(seg_list->tcphdr->seqno),
                                  lwip_ntohl(seg_list->tcphdr->seqno) + TCP_TCPLEN(seg_list),
                                  dbg_list_name));

    next = seg_list;
 800f708:	68bb      	ldr	r3, [r7, #8]
 800f70a:	617b      	str	r3, [r7, #20]
    seg_list = seg_list->next;
 800f70c:	68bb      	ldr	r3, [r7, #8]
 800f70e:	681b      	ldr	r3, [r3, #0]
 800f710:	60bb      	str	r3, [r7, #8]

    clen = pbuf_clen(next->p);
 800f712:	697b      	ldr	r3, [r7, #20]
 800f714:	685b      	ldr	r3, [r3, #4]
 800f716:	4618      	mov	r0, r3
 800f718:	f7fc fc9a 	bl	800c050 <pbuf_clen>
 800f71c:	4603      	mov	r3, r0
 800f71e:	827b      	strh	r3, [r7, #18]
    LWIP_DEBUGF(TCP_QLEN_DEBUG, ("tcp_receive: queuelen %"TCPWNDSIZE_F" ... ",
                                 (tcpwnd_size_t)pcb->snd_queuelen));
    LWIP_ASSERT("pcb->snd_queuelen >= pbuf_clen(next->p)", (pcb->snd_queuelen >= clen));
 800f720:	68fb      	ldr	r3, [r7, #12]
 800f722:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 800f726:	8a7a      	ldrh	r2, [r7, #18]
 800f728:	429a      	cmp	r2, r3
 800f72a:	d906      	bls.n	800f73a <tcp_free_acked_segments+0x42>
 800f72c:	4b2a      	ldr	r3, [pc, #168]	; (800f7d8 <tcp_free_acked_segments+0xe0>)
 800f72e:	f240 4257 	movw	r2, #1111	; 0x457
 800f732:	492a      	ldr	r1, [pc, #168]	; (800f7dc <tcp_free_acked_segments+0xe4>)
 800f734:	482a      	ldr	r0, [pc, #168]	; (800f7e0 <tcp_free_acked_segments+0xe8>)
 800f736:	f008 fea7 	bl	8018488 <iprintf>

    pcb->snd_queuelen = (u16_t)(pcb->snd_queuelen - clen);
 800f73a:	68fb      	ldr	r3, [r7, #12]
 800f73c:	f8b3 2066 	ldrh.w	r2, [r3, #102]	; 0x66
 800f740:	8a7b      	ldrh	r3, [r7, #18]
 800f742:	1ad3      	subs	r3, r2, r3
 800f744:	b29a      	uxth	r2, r3
 800f746:	68fb      	ldr	r3, [r7, #12]
 800f748:	f8a3 2066 	strh.w	r2, [r3, #102]	; 0x66
    recv_acked = (tcpwnd_size_t)(recv_acked + next->len);
 800f74c:	697b      	ldr	r3, [r7, #20]
 800f74e:	891a      	ldrh	r2, [r3, #8]
 800f750:	4b24      	ldr	r3, [pc, #144]	; (800f7e4 <tcp_free_acked_segments+0xec>)
 800f752:	881b      	ldrh	r3, [r3, #0]
 800f754:	4413      	add	r3, r2
 800f756:	b29a      	uxth	r2, r3
 800f758:	4b22      	ldr	r3, [pc, #136]	; (800f7e4 <tcp_free_acked_segments+0xec>)
 800f75a:	801a      	strh	r2, [r3, #0]
    tcp_seg_free(next);
 800f75c:	6978      	ldr	r0, [r7, #20]
 800f75e:	f7fe f92a 	bl	800d9b6 <tcp_seg_free>

    LWIP_DEBUGF(TCP_QLEN_DEBUG, ("%"TCPWNDSIZE_F" (after freeing %s)\n",
                                 (tcpwnd_size_t)pcb->snd_queuelen,
                                 dbg_list_name));
    if (pcb->snd_queuelen != 0) {
 800f762:	68fb      	ldr	r3, [r7, #12]
 800f764:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 800f768:	2b00      	cmp	r3, #0
 800f76a:	d00c      	beq.n	800f786 <tcp_free_acked_segments+0x8e>
      LWIP_ASSERT("tcp_receive: valid queue length",
 800f76c:	68bb      	ldr	r3, [r7, #8]
 800f76e:	2b00      	cmp	r3, #0
 800f770:	d109      	bne.n	800f786 <tcp_free_acked_segments+0x8e>
 800f772:	683b      	ldr	r3, [r7, #0]
 800f774:	2b00      	cmp	r3, #0
 800f776:	d106      	bne.n	800f786 <tcp_free_acked_segments+0x8e>
 800f778:	4b17      	ldr	r3, [pc, #92]	; (800f7d8 <tcp_free_acked_segments+0xe0>)
 800f77a:	f240 4261 	movw	r2, #1121	; 0x461
 800f77e:	491a      	ldr	r1, [pc, #104]	; (800f7e8 <tcp_free_acked_segments+0xf0>)
 800f780:	4817      	ldr	r0, [pc, #92]	; (800f7e0 <tcp_free_acked_segments+0xe8>)
 800f782:	f008 fe81 	bl	8018488 <iprintf>
  while (seg_list != NULL &&
 800f786:	68bb      	ldr	r3, [r7, #8]
 800f788:	2b00      	cmp	r3, #0
 800f78a:	d020      	beq.n	800f7ce <tcp_free_acked_segments+0xd6>
         TCP_SEQ_LEQ(lwip_ntohl(seg_list->tcphdr->seqno) +
 800f78c:	68bb      	ldr	r3, [r7, #8]
 800f78e:	68db      	ldr	r3, [r3, #12]
 800f790:	685b      	ldr	r3, [r3, #4]
 800f792:	4618      	mov	r0, r3
 800f794:	f7fa fd91 	bl	800a2ba <lwip_htonl>
 800f798:	4604      	mov	r4, r0
 800f79a:	68bb      	ldr	r3, [r7, #8]
 800f79c:	891b      	ldrh	r3, [r3, #8]
 800f79e:	461d      	mov	r5, r3
 800f7a0:	68bb      	ldr	r3, [r7, #8]
 800f7a2:	68db      	ldr	r3, [r3, #12]
 800f7a4:	899b      	ldrh	r3, [r3, #12]
 800f7a6:	b29b      	uxth	r3, r3
 800f7a8:	4618      	mov	r0, r3
 800f7aa:	f7fa fd71 	bl	800a290 <lwip_htons>
 800f7ae:	4603      	mov	r3, r0
 800f7b0:	b2db      	uxtb	r3, r3
 800f7b2:	f003 0303 	and.w	r3, r3, #3
 800f7b6:	2b00      	cmp	r3, #0
 800f7b8:	d001      	beq.n	800f7be <tcp_free_acked_segments+0xc6>
 800f7ba:	2301      	movs	r3, #1
 800f7bc:	e000      	b.n	800f7c0 <tcp_free_acked_segments+0xc8>
 800f7be:	2300      	movs	r3, #0
 800f7c0:	442b      	add	r3, r5
 800f7c2:	18e2      	adds	r2, r4, r3
 800f7c4:	4b09      	ldr	r3, [pc, #36]	; (800f7ec <tcp_free_acked_segments+0xf4>)
 800f7c6:	681b      	ldr	r3, [r3, #0]
 800f7c8:	1ad3      	subs	r3, r2, r3
  while (seg_list != NULL &&
 800f7ca:	2b00      	cmp	r3, #0
 800f7cc:	dd9c      	ble.n	800f708 <tcp_free_acked_segments+0x10>
                  seg_list != NULL || dbg_other_seg_list != NULL);
    }
  }
  return seg_list;
 800f7ce:	68bb      	ldr	r3, [r7, #8]
}
 800f7d0:	4618      	mov	r0, r3
 800f7d2:	3718      	adds	r7, #24
 800f7d4:	46bd      	mov	sp, r7
 800f7d6:	bdb0      	pop	{r4, r5, r7, pc}
 800f7d8:	0801a60c 	.word	0x0801a60c
 800f7dc:	0801a8f4 	.word	0x0801a8f4
 800f7e0:	0801a658 	.word	0x0801a658
 800f7e4:	2000895c 	.word	0x2000895c
 800f7e8:	0801a91c 	.word	0x0801a91c
 800f7ec:	20008958 	.word	0x20008958

0800f7f0 <tcp_receive>:
 *
 * Called from tcp_process().
 */
static void
tcp_receive(struct tcp_pcb *pcb)
{
 800f7f0:	b5b0      	push	{r4, r5, r7, lr}
 800f7f2:	b094      	sub	sp, #80	; 0x50
 800f7f4:	af00      	add	r7, sp, #0
 800f7f6:	6078      	str	r0, [r7, #4]
  s16_t m;
  u32_t right_wnd_edge;
  int found_dupack = 0;
 800f7f8:	2300      	movs	r3, #0
 800f7fa:	64bb      	str	r3, [r7, #72]	; 0x48

  LWIP_ASSERT("tcp_receive: invalid pcb", pcb != NULL);
 800f7fc:	687b      	ldr	r3, [r7, #4]
 800f7fe:	2b00      	cmp	r3, #0
 800f800:	d106      	bne.n	800f810 <tcp_receive+0x20>
 800f802:	4b91      	ldr	r3, [pc, #580]	; (800fa48 <tcp_receive+0x258>)
 800f804:	f240 427b 	movw	r2, #1147	; 0x47b
 800f808:	4990      	ldr	r1, [pc, #576]	; (800fa4c <tcp_receive+0x25c>)
 800f80a:	4891      	ldr	r0, [pc, #580]	; (800fa50 <tcp_receive+0x260>)
 800f80c:	f008 fe3c 	bl	8018488 <iprintf>
  LWIP_ASSERT("tcp_receive: wrong state", pcb->state >= ESTABLISHED);
 800f810:	687b      	ldr	r3, [r7, #4]
 800f812:	7d1b      	ldrb	r3, [r3, #20]
 800f814:	2b03      	cmp	r3, #3
 800f816:	d806      	bhi.n	800f826 <tcp_receive+0x36>
 800f818:	4b8b      	ldr	r3, [pc, #556]	; (800fa48 <tcp_receive+0x258>)
 800f81a:	f240 427c 	movw	r2, #1148	; 0x47c
 800f81e:	498d      	ldr	r1, [pc, #564]	; (800fa54 <tcp_receive+0x264>)
 800f820:	488b      	ldr	r0, [pc, #556]	; (800fa50 <tcp_receive+0x260>)
 800f822:	f008 fe31 	bl	8018488 <iprintf>

  if (flags & TCP_ACK) {
 800f826:	4b8c      	ldr	r3, [pc, #560]	; (800fa58 <tcp_receive+0x268>)
 800f828:	781b      	ldrb	r3, [r3, #0]
 800f82a:	f003 0310 	and.w	r3, r3, #16
 800f82e:	2b00      	cmp	r3, #0
 800f830:	f000 8264 	beq.w	800fcfc <tcp_receive+0x50c>
    right_wnd_edge = pcb->snd_wnd + pcb->snd_wl2;
 800f834:	687b      	ldr	r3, [r7, #4]
 800f836:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 800f83a:	461a      	mov	r2, r3
 800f83c:	687b      	ldr	r3, [r7, #4]
 800f83e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800f840:	4413      	add	r3, r2
 800f842:	633b      	str	r3, [r7, #48]	; 0x30

    /* Update window. */
    if (TCP_SEQ_LT(pcb->snd_wl1, seqno) ||
 800f844:	687b      	ldr	r3, [r7, #4]
 800f846:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800f848:	4b84      	ldr	r3, [pc, #528]	; (800fa5c <tcp_receive+0x26c>)
 800f84a:	681b      	ldr	r3, [r3, #0]
 800f84c:	1ad3      	subs	r3, r2, r3
 800f84e:	2b00      	cmp	r3, #0
 800f850:	db1b      	blt.n	800f88a <tcp_receive+0x9a>
        (pcb->snd_wl1 == seqno && TCP_SEQ_LT(pcb->snd_wl2, ackno)) ||
 800f852:	687b      	ldr	r3, [r7, #4]
 800f854:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800f856:	4b81      	ldr	r3, [pc, #516]	; (800fa5c <tcp_receive+0x26c>)
 800f858:	681b      	ldr	r3, [r3, #0]
    if (TCP_SEQ_LT(pcb->snd_wl1, seqno) ||
 800f85a:	429a      	cmp	r2, r3
 800f85c:	d106      	bne.n	800f86c <tcp_receive+0x7c>
        (pcb->snd_wl1 == seqno && TCP_SEQ_LT(pcb->snd_wl2, ackno)) ||
 800f85e:	687b      	ldr	r3, [r7, #4]
 800f860:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 800f862:	4b7f      	ldr	r3, [pc, #508]	; (800fa60 <tcp_receive+0x270>)
 800f864:	681b      	ldr	r3, [r3, #0]
 800f866:	1ad3      	subs	r3, r2, r3
 800f868:	2b00      	cmp	r3, #0
 800f86a:	db0e      	blt.n	800f88a <tcp_receive+0x9a>
        (pcb->snd_wl2 == ackno && (u32_t)SND_WND_SCALE(pcb, tcphdr->wnd) > pcb->snd_wnd)) {
 800f86c:	687b      	ldr	r3, [r7, #4]
 800f86e:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 800f870:	4b7b      	ldr	r3, [pc, #492]	; (800fa60 <tcp_receive+0x270>)
 800f872:	681b      	ldr	r3, [r3, #0]
        (pcb->snd_wl1 == seqno && TCP_SEQ_LT(pcb->snd_wl2, ackno)) ||
 800f874:	429a      	cmp	r2, r3
 800f876:	d125      	bne.n	800f8c4 <tcp_receive+0xd4>
        (pcb->snd_wl2 == ackno && (u32_t)SND_WND_SCALE(pcb, tcphdr->wnd) > pcb->snd_wnd)) {
 800f878:	4b7a      	ldr	r3, [pc, #488]	; (800fa64 <tcp_receive+0x274>)
 800f87a:	681b      	ldr	r3, [r3, #0]
 800f87c:	89db      	ldrh	r3, [r3, #14]
 800f87e:	b29a      	uxth	r2, r3
 800f880:	687b      	ldr	r3, [r7, #4]
 800f882:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 800f886:	429a      	cmp	r2, r3
 800f888:	d91c      	bls.n	800f8c4 <tcp_receive+0xd4>
      pcb->snd_wnd = SND_WND_SCALE(pcb, tcphdr->wnd);
 800f88a:	4b76      	ldr	r3, [pc, #472]	; (800fa64 <tcp_receive+0x274>)
 800f88c:	681b      	ldr	r3, [r3, #0]
 800f88e:	89db      	ldrh	r3, [r3, #14]
 800f890:	b29a      	uxth	r2, r3
 800f892:	687b      	ldr	r3, [r7, #4]
 800f894:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
      /* keep track of the biggest window announced by the remote host to calculate
         the maximum segment size */
      if (pcb->snd_wnd_max < pcb->snd_wnd) {
 800f898:	687b      	ldr	r3, [r7, #4]
 800f89a:	f8b3 2062 	ldrh.w	r2, [r3, #98]	; 0x62
 800f89e:	687b      	ldr	r3, [r7, #4]
 800f8a0:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 800f8a4:	429a      	cmp	r2, r3
 800f8a6:	d205      	bcs.n	800f8b4 <tcp_receive+0xc4>
        pcb->snd_wnd_max = pcb->snd_wnd;
 800f8a8:	687b      	ldr	r3, [r7, #4]
 800f8aa:	f8b3 2060 	ldrh.w	r2, [r3, #96]	; 0x60
 800f8ae:	687b      	ldr	r3, [r7, #4]
 800f8b0:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62
      }
      pcb->snd_wl1 = seqno;
 800f8b4:	4b69      	ldr	r3, [pc, #420]	; (800fa5c <tcp_receive+0x26c>)
 800f8b6:	681a      	ldr	r2, [r3, #0]
 800f8b8:	687b      	ldr	r3, [r7, #4]
 800f8ba:	655a      	str	r2, [r3, #84]	; 0x54
      pcb->snd_wl2 = ackno;
 800f8bc:	4b68      	ldr	r3, [pc, #416]	; (800fa60 <tcp_receive+0x270>)
 800f8be:	681a      	ldr	r2, [r3, #0]
 800f8c0:	687b      	ldr	r3, [r7, #4]
 800f8c2:	659a      	str	r2, [r3, #88]	; 0x58
     * If it only passes 1, should reset dupack counter
     *
     */

    /* Clause 1 */
    if (TCP_SEQ_LEQ(ackno, pcb->lastack)) {
 800f8c4:	4b66      	ldr	r3, [pc, #408]	; (800fa60 <tcp_receive+0x270>)
 800f8c6:	681a      	ldr	r2, [r3, #0]
 800f8c8:	687b      	ldr	r3, [r7, #4]
 800f8ca:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800f8cc:	1ad3      	subs	r3, r2, r3
 800f8ce:	2b00      	cmp	r3, #0
 800f8d0:	dc58      	bgt.n	800f984 <tcp_receive+0x194>
      /* Clause 2 */
      if (tcplen == 0) {
 800f8d2:	4b65      	ldr	r3, [pc, #404]	; (800fa68 <tcp_receive+0x278>)
 800f8d4:	881b      	ldrh	r3, [r3, #0]
 800f8d6:	2b00      	cmp	r3, #0
 800f8d8:	d14b      	bne.n	800f972 <tcp_receive+0x182>
        /* Clause 3 */
        if (pcb->snd_wl2 + pcb->snd_wnd == right_wnd_edge) {
 800f8da:	687b      	ldr	r3, [r7, #4]
 800f8dc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800f8de:	687a      	ldr	r2, [r7, #4]
 800f8e0:	f8b2 2060 	ldrh.w	r2, [r2, #96]	; 0x60
 800f8e4:	4413      	add	r3, r2
 800f8e6:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800f8e8:	429a      	cmp	r2, r3
 800f8ea:	d142      	bne.n	800f972 <tcp_receive+0x182>
          /* Clause 4 */
          if (pcb->rtime >= 0) {
 800f8ec:	687b      	ldr	r3, [r7, #4]
 800f8ee:	f9b3 3030 	ldrsh.w	r3, [r3, #48]	; 0x30
 800f8f2:	2b00      	cmp	r3, #0
 800f8f4:	db3d      	blt.n	800f972 <tcp_receive+0x182>
            /* Clause 5 */
            if (pcb->lastack == ackno) {
 800f8f6:	687b      	ldr	r3, [r7, #4]
 800f8f8:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800f8fa:	4b59      	ldr	r3, [pc, #356]	; (800fa60 <tcp_receive+0x270>)
 800f8fc:	681b      	ldr	r3, [r3, #0]
 800f8fe:	429a      	cmp	r2, r3
 800f900:	d137      	bne.n	800f972 <tcp_receive+0x182>
              found_dupack = 1;
 800f902:	2301      	movs	r3, #1
 800f904:	64bb      	str	r3, [r7, #72]	; 0x48
              if ((u8_t)(pcb->dupacks + 1) > pcb->dupacks) {
 800f906:	687b      	ldr	r3, [r7, #4]
 800f908:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 800f90c:	2bff      	cmp	r3, #255	; 0xff
 800f90e:	d007      	beq.n	800f920 <tcp_receive+0x130>
                ++pcb->dupacks;
 800f910:	687b      	ldr	r3, [r7, #4]
 800f912:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 800f916:	3301      	adds	r3, #1
 800f918:	b2da      	uxtb	r2, r3
 800f91a:	687b      	ldr	r3, [r7, #4]
 800f91c:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
              }
              if (pcb->dupacks > 3) {
 800f920:	687b      	ldr	r3, [r7, #4]
 800f922:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 800f926:	2b03      	cmp	r3, #3
 800f928:	d91b      	bls.n	800f962 <tcp_receive+0x172>
                /* Inflate the congestion window */
                TCP_WND_INC(pcb->cwnd, pcb->mss);
 800f92a:	687b      	ldr	r3, [r7, #4]
 800f92c:	f8b3 2048 	ldrh.w	r2, [r3, #72]	; 0x48
 800f930:	687b      	ldr	r3, [r7, #4]
 800f932:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 800f934:	4413      	add	r3, r2
 800f936:	b29a      	uxth	r2, r3
 800f938:	687b      	ldr	r3, [r7, #4]
 800f93a:	f8b3 3048 	ldrh.w	r3, [r3, #72]	; 0x48
 800f93e:	429a      	cmp	r2, r3
 800f940:	d30a      	bcc.n	800f958 <tcp_receive+0x168>
 800f942:	687b      	ldr	r3, [r7, #4]
 800f944:	f8b3 2048 	ldrh.w	r2, [r3, #72]	; 0x48
 800f948:	687b      	ldr	r3, [r7, #4]
 800f94a:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 800f94c:	4413      	add	r3, r2
 800f94e:	b29a      	uxth	r2, r3
 800f950:	687b      	ldr	r3, [r7, #4]
 800f952:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
 800f956:	e004      	b.n	800f962 <tcp_receive+0x172>
 800f958:	687b      	ldr	r3, [r7, #4]
 800f95a:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800f95e:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
              }
              if (pcb->dupacks >= 3) {
 800f962:	687b      	ldr	r3, [r7, #4]
 800f964:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 800f968:	2b02      	cmp	r3, #2
 800f96a:	d902      	bls.n	800f972 <tcp_receive+0x182>
                /* Do fast retransmit (checked via TF_INFR, not via dupacks count) */
                tcp_rexmit_fast(pcb);
 800f96c:	6878      	ldr	r0, [r7, #4]
 800f96e:	f002 fb45 	bl	8011ffc <tcp_rexmit_fast>
          }
        }
      }
      /* If Clause (1) or more is true, but not a duplicate ack, reset
       * count of consecutive duplicate acks */
      if (!found_dupack) {
 800f972:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800f974:	2b00      	cmp	r3, #0
 800f976:	f040 8161 	bne.w	800fc3c <tcp_receive+0x44c>
        pcb->dupacks = 0;
 800f97a:	687b      	ldr	r3, [r7, #4]
 800f97c:	2200      	movs	r2, #0
 800f97e:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 800f982:	e15b      	b.n	800fc3c <tcp_receive+0x44c>
      }
    } else if (TCP_SEQ_BETWEEN(ackno, pcb->lastack + 1, pcb->snd_nxt)) {
 800f984:	4b36      	ldr	r3, [pc, #216]	; (800fa60 <tcp_receive+0x270>)
 800f986:	681a      	ldr	r2, [r3, #0]
 800f988:	687b      	ldr	r3, [r7, #4]
 800f98a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800f98c:	1ad3      	subs	r3, r2, r3
 800f98e:	3b01      	subs	r3, #1
 800f990:	2b00      	cmp	r3, #0
 800f992:	f2c0 814e 	blt.w	800fc32 <tcp_receive+0x442>
 800f996:	4b32      	ldr	r3, [pc, #200]	; (800fa60 <tcp_receive+0x270>)
 800f998:	681a      	ldr	r2, [r3, #0]
 800f99a:	687b      	ldr	r3, [r7, #4]
 800f99c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800f99e:	1ad3      	subs	r3, r2, r3
 800f9a0:	2b00      	cmp	r3, #0
 800f9a2:	f300 8146 	bgt.w	800fc32 <tcp_receive+0x442>
      tcpwnd_size_t acked;

      /* Reset the "IN Fast Retransmit" flag, since we are no longer
         in fast retransmit. Also reset the congestion window to the
         slow start threshold. */
      if (pcb->flags & TF_INFR) {
 800f9a6:	687b      	ldr	r3, [r7, #4]
 800f9a8:	8b5b      	ldrh	r3, [r3, #26]
 800f9aa:	f003 0304 	and.w	r3, r3, #4
 800f9ae:	2b00      	cmp	r3, #0
 800f9b0:	d010      	beq.n	800f9d4 <tcp_receive+0x1e4>
        tcp_clear_flags(pcb, TF_INFR);
 800f9b2:	687b      	ldr	r3, [r7, #4]
 800f9b4:	8b5b      	ldrh	r3, [r3, #26]
 800f9b6:	f023 0304 	bic.w	r3, r3, #4
 800f9ba:	b29a      	uxth	r2, r3
 800f9bc:	687b      	ldr	r3, [r7, #4]
 800f9be:	835a      	strh	r2, [r3, #26]
        pcb->cwnd = pcb->ssthresh;
 800f9c0:	687b      	ldr	r3, [r7, #4]
 800f9c2:	f8b3 204a 	ldrh.w	r2, [r3, #74]	; 0x4a
 800f9c6:	687b      	ldr	r3, [r7, #4]
 800f9c8:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
        pcb->bytes_acked = 0;
 800f9cc:	687b      	ldr	r3, [r7, #4]
 800f9ce:	2200      	movs	r2, #0
 800f9d0:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
      }

      /* Reset the number of retransmissions. */
      pcb->nrtx = 0;
 800f9d4:	687b      	ldr	r3, [r7, #4]
 800f9d6:	2200      	movs	r2, #0
 800f9d8:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

      /* Reset the retransmission time-out. */
      pcb->rto = (s16_t)((pcb->sa >> 3) + pcb->sv);
 800f9dc:	687b      	ldr	r3, [r7, #4]
 800f9de:	f9b3 303c 	ldrsh.w	r3, [r3, #60]	; 0x3c
 800f9e2:	10db      	asrs	r3, r3, #3
 800f9e4:	b21b      	sxth	r3, r3
 800f9e6:	b29a      	uxth	r2, r3
 800f9e8:	687b      	ldr	r3, [r7, #4]
 800f9ea:	f9b3 303e 	ldrsh.w	r3, [r3, #62]	; 0x3e
 800f9ee:	b29b      	uxth	r3, r3
 800f9f0:	4413      	add	r3, r2
 800f9f2:	b29b      	uxth	r3, r3
 800f9f4:	b21a      	sxth	r2, r3
 800f9f6:	687b      	ldr	r3, [r7, #4]
 800f9f8:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

      /* Record how much data this ACK acks */
      acked = (tcpwnd_size_t)(ackno - pcb->lastack);
 800f9fc:	4b18      	ldr	r3, [pc, #96]	; (800fa60 <tcp_receive+0x270>)
 800f9fe:	681b      	ldr	r3, [r3, #0]
 800fa00:	b29a      	uxth	r2, r3
 800fa02:	687b      	ldr	r3, [r7, #4]
 800fa04:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800fa06:	b29b      	uxth	r3, r3
 800fa08:	1ad3      	subs	r3, r2, r3
 800fa0a:	85fb      	strh	r3, [r7, #46]	; 0x2e

      /* Reset the fast retransmit variables. */
      pcb->dupacks = 0;
 800fa0c:	687b      	ldr	r3, [r7, #4]
 800fa0e:	2200      	movs	r2, #0
 800fa10:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
      pcb->lastack = ackno;
 800fa14:	4b12      	ldr	r3, [pc, #72]	; (800fa60 <tcp_receive+0x270>)
 800fa16:	681a      	ldr	r2, [r3, #0]
 800fa18:	687b      	ldr	r3, [r7, #4]
 800fa1a:	645a      	str	r2, [r3, #68]	; 0x44

      /* Update the congestion control variables (cwnd and
         ssthresh). */
      if (pcb->state >= ESTABLISHED) {
 800fa1c:	687b      	ldr	r3, [r7, #4]
 800fa1e:	7d1b      	ldrb	r3, [r3, #20]
 800fa20:	2b03      	cmp	r3, #3
 800fa22:	f240 8097 	bls.w	800fb54 <tcp_receive+0x364>
        if (pcb->cwnd < pcb->ssthresh) {
 800fa26:	687b      	ldr	r3, [r7, #4]
 800fa28:	f8b3 2048 	ldrh.w	r2, [r3, #72]	; 0x48
 800fa2c:	687b      	ldr	r3, [r7, #4]
 800fa2e:	f8b3 304a 	ldrh.w	r3, [r3, #74]	; 0x4a
 800fa32:	429a      	cmp	r2, r3
 800fa34:	d245      	bcs.n	800fac2 <tcp_receive+0x2d2>
          tcpwnd_size_t increase;
          /* limit to 1 SMSS segment during period following RTO */
          u8_t num_seg = (pcb->flags & TF_RTO) ? 1 : 2;
 800fa36:	687b      	ldr	r3, [r7, #4]
 800fa38:	8b5b      	ldrh	r3, [r3, #26]
 800fa3a:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800fa3e:	2b00      	cmp	r3, #0
 800fa40:	d014      	beq.n	800fa6c <tcp_receive+0x27c>
 800fa42:	2301      	movs	r3, #1
 800fa44:	e013      	b.n	800fa6e <tcp_receive+0x27e>
 800fa46:	bf00      	nop
 800fa48:	0801a60c 	.word	0x0801a60c
 800fa4c:	0801a93c 	.word	0x0801a93c
 800fa50:	0801a658 	.word	0x0801a658
 800fa54:	0801a958 	.word	0x0801a958
 800fa58:	20008960 	.word	0x20008960
 800fa5c:	20008954 	.word	0x20008954
 800fa60:	20008958 	.word	0x20008958
 800fa64:	20008944 	.word	0x20008944
 800fa68:	2000895e 	.word	0x2000895e
 800fa6c:	2302      	movs	r3, #2
 800fa6e:	f887 302d 	strb.w	r3, [r7, #45]	; 0x2d
          /* RFC 3465, section 2.2 Slow Start */
          increase = LWIP_MIN(acked, (tcpwnd_size_t)(num_seg * pcb->mss));
 800fa72:	f897 302d 	ldrb.w	r3, [r7, #45]	; 0x2d
 800fa76:	b29a      	uxth	r2, r3
 800fa78:	687b      	ldr	r3, [r7, #4]
 800fa7a:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 800fa7c:	fb12 f303 	smulbb	r3, r2, r3
 800fa80:	b29b      	uxth	r3, r3
 800fa82:	8dfa      	ldrh	r2, [r7, #46]	; 0x2e
 800fa84:	4293      	cmp	r3, r2
 800fa86:	bf28      	it	cs
 800fa88:	4613      	movcs	r3, r2
 800fa8a:	857b      	strh	r3, [r7, #42]	; 0x2a
          TCP_WND_INC(pcb->cwnd, increase);
 800fa8c:	687b      	ldr	r3, [r7, #4]
 800fa8e:	f8b3 2048 	ldrh.w	r2, [r3, #72]	; 0x48
 800fa92:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 800fa94:	4413      	add	r3, r2
 800fa96:	b29a      	uxth	r2, r3
 800fa98:	687b      	ldr	r3, [r7, #4]
 800fa9a:	f8b3 3048 	ldrh.w	r3, [r3, #72]	; 0x48
 800fa9e:	429a      	cmp	r2, r3
 800faa0:	d309      	bcc.n	800fab6 <tcp_receive+0x2c6>
 800faa2:	687b      	ldr	r3, [r7, #4]
 800faa4:	f8b3 2048 	ldrh.w	r2, [r3, #72]	; 0x48
 800faa8:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 800faaa:	4413      	add	r3, r2
 800faac:	b29a      	uxth	r2, r3
 800faae:	687b      	ldr	r3, [r7, #4]
 800fab0:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
 800fab4:	e04e      	b.n	800fb54 <tcp_receive+0x364>
 800fab6:	687b      	ldr	r3, [r7, #4]
 800fab8:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800fabc:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
 800fac0:	e048      	b.n	800fb54 <tcp_receive+0x364>
          LWIP_DEBUGF(TCP_CWND_DEBUG, ("tcp_receive: slow start cwnd %"TCPWNDSIZE_F"\n", pcb->cwnd));
        } else {
          /* RFC 3465, section 2.1 Congestion Avoidance */
          TCP_WND_INC(pcb->bytes_acked, acked);
 800fac2:	687b      	ldr	r3, [r7, #4]
 800fac4:	f8b3 206a 	ldrh.w	r2, [r3, #106]	; 0x6a
 800fac8:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 800faca:	4413      	add	r3, r2
 800facc:	b29a      	uxth	r2, r3
 800face:	687b      	ldr	r3, [r7, #4]
 800fad0:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 800fad4:	429a      	cmp	r2, r3
 800fad6:	d309      	bcc.n	800faec <tcp_receive+0x2fc>
 800fad8:	687b      	ldr	r3, [r7, #4]
 800fada:	f8b3 206a 	ldrh.w	r2, [r3, #106]	; 0x6a
 800fade:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 800fae0:	4413      	add	r3, r2
 800fae2:	b29a      	uxth	r2, r3
 800fae4:	687b      	ldr	r3, [r7, #4]
 800fae6:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
 800faea:	e004      	b.n	800faf6 <tcp_receive+0x306>
 800faec:	687b      	ldr	r3, [r7, #4]
 800faee:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800faf2:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
          if (pcb->bytes_acked >= pcb->cwnd) {
 800faf6:	687b      	ldr	r3, [r7, #4]
 800faf8:	f8b3 206a 	ldrh.w	r2, [r3, #106]	; 0x6a
 800fafc:	687b      	ldr	r3, [r7, #4]
 800fafe:	f8b3 3048 	ldrh.w	r3, [r3, #72]	; 0x48
 800fb02:	429a      	cmp	r2, r3
 800fb04:	d326      	bcc.n	800fb54 <tcp_receive+0x364>
            pcb->bytes_acked = (tcpwnd_size_t)(pcb->bytes_acked - pcb->cwnd);
 800fb06:	687b      	ldr	r3, [r7, #4]
 800fb08:	f8b3 206a 	ldrh.w	r2, [r3, #106]	; 0x6a
 800fb0c:	687b      	ldr	r3, [r7, #4]
 800fb0e:	f8b3 3048 	ldrh.w	r3, [r3, #72]	; 0x48
 800fb12:	1ad3      	subs	r3, r2, r3
 800fb14:	b29a      	uxth	r2, r3
 800fb16:	687b      	ldr	r3, [r7, #4]
 800fb18:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
            TCP_WND_INC(pcb->cwnd, pcb->mss);
 800fb1c:	687b      	ldr	r3, [r7, #4]
 800fb1e:	f8b3 2048 	ldrh.w	r2, [r3, #72]	; 0x48
 800fb22:	687b      	ldr	r3, [r7, #4]
 800fb24:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 800fb26:	4413      	add	r3, r2
 800fb28:	b29a      	uxth	r2, r3
 800fb2a:	687b      	ldr	r3, [r7, #4]
 800fb2c:	f8b3 3048 	ldrh.w	r3, [r3, #72]	; 0x48
 800fb30:	429a      	cmp	r2, r3
 800fb32:	d30a      	bcc.n	800fb4a <tcp_receive+0x35a>
 800fb34:	687b      	ldr	r3, [r7, #4]
 800fb36:	f8b3 2048 	ldrh.w	r2, [r3, #72]	; 0x48
 800fb3a:	687b      	ldr	r3, [r7, #4]
 800fb3c:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 800fb3e:	4413      	add	r3, r2
 800fb40:	b29a      	uxth	r2, r3
 800fb42:	687b      	ldr	r3, [r7, #4]
 800fb44:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
 800fb48:	e004      	b.n	800fb54 <tcp_receive+0x364>
 800fb4a:	687b      	ldr	r3, [r7, #4]
 800fb4c:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800fb50:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
                                    pcb->unacked != NULL ?
                                    lwip_ntohl(pcb->unacked->tcphdr->seqno) + TCP_TCPLEN(pcb->unacked) : 0));

      /* Remove segment from the unacknowledged list if the incoming
         ACK acknowledges them. */
      pcb->unacked = tcp_free_acked_segments(pcb, pcb->unacked, "unacked", pcb->unsent);
 800fb54:	687b      	ldr	r3, [r7, #4]
 800fb56:	6f19      	ldr	r1, [r3, #112]	; 0x70
 800fb58:	687b      	ldr	r3, [r7, #4]
 800fb5a:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800fb5c:	4a98      	ldr	r2, [pc, #608]	; (800fdc0 <tcp_receive+0x5d0>)
 800fb5e:	6878      	ldr	r0, [r7, #4]
 800fb60:	f7ff fdca 	bl	800f6f8 <tcp_free_acked_segments>
 800fb64:	4602      	mov	r2, r0
 800fb66:	687b      	ldr	r3, [r7, #4]
 800fb68:	671a      	str	r2, [r3, #112]	; 0x70
         on the list are acknowledged by the ACK. This may seem
         strange since an "unsent" segment shouldn't be acked. The
         rationale is that lwIP puts all outstanding segments on the
         ->unsent list after a retransmission, so these segments may
         in fact have been sent once. */
      pcb->unsent = tcp_free_acked_segments(pcb, pcb->unsent, "unsent", pcb->unacked);
 800fb6a:	687b      	ldr	r3, [r7, #4]
 800fb6c:	6ed9      	ldr	r1, [r3, #108]	; 0x6c
 800fb6e:	687b      	ldr	r3, [r7, #4]
 800fb70:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800fb72:	4a94      	ldr	r2, [pc, #592]	; (800fdc4 <tcp_receive+0x5d4>)
 800fb74:	6878      	ldr	r0, [r7, #4]
 800fb76:	f7ff fdbf 	bl	800f6f8 <tcp_free_acked_segments>
 800fb7a:	4602      	mov	r2, r0
 800fb7c:	687b      	ldr	r3, [r7, #4]
 800fb7e:	66da      	str	r2, [r3, #108]	; 0x6c

      /* If there's nothing left to acknowledge, stop the retransmit
         timer, otherwise reset it to start again */
      if (pcb->unacked == NULL) {
 800fb80:	687b      	ldr	r3, [r7, #4]
 800fb82:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800fb84:	2b00      	cmp	r3, #0
 800fb86:	d104      	bne.n	800fb92 <tcp_receive+0x3a2>
        pcb->rtime = -1;
 800fb88:	687b      	ldr	r3, [r7, #4]
 800fb8a:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800fb8e:	861a      	strh	r2, [r3, #48]	; 0x30
 800fb90:	e002      	b.n	800fb98 <tcp_receive+0x3a8>
      } else {
        pcb->rtime = 0;
 800fb92:	687b      	ldr	r3, [r7, #4]
 800fb94:	2200      	movs	r2, #0
 800fb96:	861a      	strh	r2, [r3, #48]	; 0x30
      }

      pcb->polltmr = 0;
 800fb98:	687b      	ldr	r3, [r7, #4]
 800fb9a:	2200      	movs	r2, #0
 800fb9c:	771a      	strb	r2, [r3, #28]

#if TCP_OVERSIZE
      if (pcb->unsent == NULL) {
 800fb9e:	687b      	ldr	r3, [r7, #4]
 800fba0:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800fba2:	2b00      	cmp	r3, #0
 800fba4:	d103      	bne.n	800fbae <tcp_receive+0x3be>
        pcb->unsent_oversize = 0;
 800fba6:	687b      	ldr	r3, [r7, #4]
 800fba8:	2200      	movs	r2, #0
 800fbaa:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
        /* Inform neighbor reachability of forward progress. */
        nd6_reachability_hint(ip6_current_src_addr());
      }
#endif /* LWIP_IPV6 && LWIP_ND6_TCP_REACHABILITY_HINTS*/

      pcb->snd_buf = (tcpwnd_size_t)(pcb->snd_buf + recv_acked);
 800fbae:	687b      	ldr	r3, [r7, #4]
 800fbb0:	f8b3 2064 	ldrh.w	r2, [r3, #100]	; 0x64
 800fbb4:	4b84      	ldr	r3, [pc, #528]	; (800fdc8 <tcp_receive+0x5d8>)
 800fbb6:	881b      	ldrh	r3, [r3, #0]
 800fbb8:	4413      	add	r3, r2
 800fbba:	b29a      	uxth	r2, r3
 800fbbc:	687b      	ldr	r3, [r7, #4]
 800fbbe:	f8a3 2064 	strh.w	r2, [r3, #100]	; 0x64
      /* check if this ACK ends our retransmission of in-flight data */
      if (pcb->flags & TF_RTO) {
 800fbc2:	687b      	ldr	r3, [r7, #4]
 800fbc4:	8b5b      	ldrh	r3, [r3, #26]
 800fbc6:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800fbca:	2b00      	cmp	r3, #0
 800fbcc:	d035      	beq.n	800fc3a <tcp_receive+0x44a>
        /* RTO is done if
            1) both queues are empty or
            2) unacked is empty and unsent head contains data not part of RTO or
            3) unacked head contains data not part of RTO */
        if (pcb->unacked == NULL) {
 800fbce:	687b      	ldr	r3, [r7, #4]
 800fbd0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800fbd2:	2b00      	cmp	r3, #0
 800fbd4:	d118      	bne.n	800fc08 <tcp_receive+0x418>
          if ((pcb->unsent == NULL) ||
 800fbd6:	687b      	ldr	r3, [r7, #4]
 800fbd8:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800fbda:	2b00      	cmp	r3, #0
 800fbdc:	d00c      	beq.n	800fbf8 <tcp_receive+0x408>
              (TCP_SEQ_LEQ(pcb->rto_end, lwip_ntohl(pcb->unsent->tcphdr->seqno)))) {
 800fbde:	687b      	ldr	r3, [r7, #4]
 800fbe0:	6cdc      	ldr	r4, [r3, #76]	; 0x4c
 800fbe2:	687b      	ldr	r3, [r7, #4]
 800fbe4:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800fbe6:	68db      	ldr	r3, [r3, #12]
 800fbe8:	685b      	ldr	r3, [r3, #4]
 800fbea:	4618      	mov	r0, r3
 800fbec:	f7fa fb65 	bl	800a2ba <lwip_htonl>
 800fbf0:	4603      	mov	r3, r0
 800fbf2:	1ae3      	subs	r3, r4, r3
          if ((pcb->unsent == NULL) ||
 800fbf4:	2b00      	cmp	r3, #0
 800fbf6:	dc20      	bgt.n	800fc3a <tcp_receive+0x44a>
            tcp_clear_flags(pcb, TF_RTO);
 800fbf8:	687b      	ldr	r3, [r7, #4]
 800fbfa:	8b5b      	ldrh	r3, [r3, #26]
 800fbfc:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 800fc00:	b29a      	uxth	r2, r3
 800fc02:	687b      	ldr	r3, [r7, #4]
 800fc04:	835a      	strh	r2, [r3, #26]
    } else if (TCP_SEQ_BETWEEN(ackno, pcb->lastack + 1, pcb->snd_nxt)) {
 800fc06:	e018      	b.n	800fc3a <tcp_receive+0x44a>
          }
        } else if (TCP_SEQ_LEQ(pcb->rto_end, lwip_ntohl(pcb->unacked->tcphdr->seqno))) {
 800fc08:	687b      	ldr	r3, [r7, #4]
 800fc0a:	6cdc      	ldr	r4, [r3, #76]	; 0x4c
 800fc0c:	687b      	ldr	r3, [r7, #4]
 800fc0e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800fc10:	68db      	ldr	r3, [r3, #12]
 800fc12:	685b      	ldr	r3, [r3, #4]
 800fc14:	4618      	mov	r0, r3
 800fc16:	f7fa fb50 	bl	800a2ba <lwip_htonl>
 800fc1a:	4603      	mov	r3, r0
 800fc1c:	1ae3      	subs	r3, r4, r3
 800fc1e:	2b00      	cmp	r3, #0
 800fc20:	dc0b      	bgt.n	800fc3a <tcp_receive+0x44a>
          tcp_clear_flags(pcb, TF_RTO);
 800fc22:	687b      	ldr	r3, [r7, #4]
 800fc24:	8b5b      	ldrh	r3, [r3, #26]
 800fc26:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 800fc2a:	b29a      	uxth	r2, r3
 800fc2c:	687b      	ldr	r3, [r7, #4]
 800fc2e:	835a      	strh	r2, [r3, #26]
    } else if (TCP_SEQ_BETWEEN(ackno, pcb->lastack + 1, pcb->snd_nxt)) {
 800fc30:	e003      	b.n	800fc3a <tcp_receive+0x44a>
        }
      }
      /* End of ACK for new data processing. */
    } else {
      /* Out of sequence ACK, didn't really ack anything */
      tcp_send_empty_ack(pcb);
 800fc32:	6878      	ldr	r0, [r7, #4]
 800fc34:	f002 fbce 	bl	80123d4 <tcp_send_empty_ack>
 800fc38:	e000      	b.n	800fc3c <tcp_receive+0x44c>
    } else if (TCP_SEQ_BETWEEN(ackno, pcb->lastack + 1, pcb->snd_nxt)) {
 800fc3a:	bf00      	nop
                                pcb->rttest, pcb->rtseq, ackno));

    /* RTT estimation calculations. This is done by checking if the
       incoming segment acknowledges the segment we use to take a
       round-trip time measurement. */
    if (pcb->rttest && TCP_SEQ_LT(pcb->rtseq, ackno)) {
 800fc3c:	687b      	ldr	r3, [r7, #4]
 800fc3e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800fc40:	2b00      	cmp	r3, #0
 800fc42:	d05b      	beq.n	800fcfc <tcp_receive+0x50c>
 800fc44:	687b      	ldr	r3, [r7, #4]
 800fc46:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800fc48:	4b60      	ldr	r3, [pc, #384]	; (800fdcc <tcp_receive+0x5dc>)
 800fc4a:	681b      	ldr	r3, [r3, #0]
 800fc4c:	1ad3      	subs	r3, r2, r3
 800fc4e:	2b00      	cmp	r3, #0
 800fc50:	da54      	bge.n	800fcfc <tcp_receive+0x50c>
      /* diff between this shouldn't exceed 32K since this are tcp timer ticks
         and a round-trip shouldn't be that long... */
      m = (s16_t)(tcp_ticks - pcb->rttest);
 800fc52:	4b5f      	ldr	r3, [pc, #380]	; (800fdd0 <tcp_receive+0x5e0>)
 800fc54:	681b      	ldr	r3, [r3, #0]
 800fc56:	b29a      	uxth	r2, r3
 800fc58:	687b      	ldr	r3, [r7, #4]
 800fc5a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800fc5c:	b29b      	uxth	r3, r3
 800fc5e:	1ad3      	subs	r3, r2, r3
 800fc60:	b29b      	uxth	r3, r3
 800fc62:	f8a7 304e 	strh.w	r3, [r7, #78]	; 0x4e

      LWIP_DEBUGF(TCP_RTO_DEBUG, ("tcp_receive: experienced rtt %"U16_F" ticks (%"U16_F" msec).\n",
                                  m, (u16_t)(m * TCP_SLOW_INTERVAL)));

      /* This is taken directly from VJs original code in his paper */
      m = (s16_t)(m - (pcb->sa >> 3));
 800fc66:	f8b7 204e 	ldrh.w	r2, [r7, #78]	; 0x4e
 800fc6a:	687b      	ldr	r3, [r7, #4]
 800fc6c:	f9b3 303c 	ldrsh.w	r3, [r3, #60]	; 0x3c
 800fc70:	10db      	asrs	r3, r3, #3
 800fc72:	b21b      	sxth	r3, r3
 800fc74:	b29b      	uxth	r3, r3
 800fc76:	1ad3      	subs	r3, r2, r3
 800fc78:	b29b      	uxth	r3, r3
 800fc7a:	f8a7 304e 	strh.w	r3, [r7, #78]	; 0x4e
      pcb->sa = (s16_t)(pcb->sa + m);
 800fc7e:	687b      	ldr	r3, [r7, #4]
 800fc80:	f9b3 303c 	ldrsh.w	r3, [r3, #60]	; 0x3c
 800fc84:	b29a      	uxth	r2, r3
 800fc86:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 800fc8a:	4413      	add	r3, r2
 800fc8c:	b29b      	uxth	r3, r3
 800fc8e:	b21a      	sxth	r2, r3
 800fc90:	687b      	ldr	r3, [r7, #4]
 800fc92:	879a      	strh	r2, [r3, #60]	; 0x3c
      if (m < 0) {
 800fc94:	f9b7 304e 	ldrsh.w	r3, [r7, #78]	; 0x4e
 800fc98:	2b00      	cmp	r3, #0
 800fc9a:	da05      	bge.n	800fca8 <tcp_receive+0x4b8>
        m = (s16_t) - m;
 800fc9c:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 800fca0:	425b      	negs	r3, r3
 800fca2:	b29b      	uxth	r3, r3
 800fca4:	f8a7 304e 	strh.w	r3, [r7, #78]	; 0x4e
      }
      m = (s16_t)(m - (pcb->sv >> 2));
 800fca8:	f8b7 204e 	ldrh.w	r2, [r7, #78]	; 0x4e
 800fcac:	687b      	ldr	r3, [r7, #4]
 800fcae:	f9b3 303e 	ldrsh.w	r3, [r3, #62]	; 0x3e
 800fcb2:	109b      	asrs	r3, r3, #2
 800fcb4:	b21b      	sxth	r3, r3
 800fcb6:	b29b      	uxth	r3, r3
 800fcb8:	1ad3      	subs	r3, r2, r3
 800fcba:	b29b      	uxth	r3, r3
 800fcbc:	f8a7 304e 	strh.w	r3, [r7, #78]	; 0x4e
      pcb->sv = (s16_t)(pcb->sv + m);
 800fcc0:	687b      	ldr	r3, [r7, #4]
 800fcc2:	f9b3 303e 	ldrsh.w	r3, [r3, #62]	; 0x3e
 800fcc6:	b29a      	uxth	r2, r3
 800fcc8:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 800fccc:	4413      	add	r3, r2
 800fcce:	b29b      	uxth	r3, r3
 800fcd0:	b21a      	sxth	r2, r3
 800fcd2:	687b      	ldr	r3, [r7, #4]
 800fcd4:	87da      	strh	r2, [r3, #62]	; 0x3e
      pcb->rto = (s16_t)((pcb->sa >> 3) + pcb->sv);
 800fcd6:	687b      	ldr	r3, [r7, #4]
 800fcd8:	f9b3 303c 	ldrsh.w	r3, [r3, #60]	; 0x3c
 800fcdc:	10db      	asrs	r3, r3, #3
 800fcde:	b21b      	sxth	r3, r3
 800fce0:	b29a      	uxth	r2, r3
 800fce2:	687b      	ldr	r3, [r7, #4]
 800fce4:	f9b3 303e 	ldrsh.w	r3, [r3, #62]	; 0x3e
 800fce8:	b29b      	uxth	r3, r3
 800fcea:	4413      	add	r3, r2
 800fcec:	b29b      	uxth	r3, r3
 800fcee:	b21a      	sxth	r2, r3
 800fcf0:	687b      	ldr	r3, [r7, #4]
 800fcf2:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

      LWIP_DEBUGF(TCP_RTO_DEBUG, ("tcp_receive: RTO %"U16_F" (%"U16_F" milliseconds)\n",
                                  pcb->rto, (u16_t)(pcb->rto * TCP_SLOW_INTERVAL)));

      pcb->rttest = 0;
 800fcf6:	687b      	ldr	r3, [r7, #4]
 800fcf8:	2200      	movs	r2, #0
 800fcfa:	635a      	str	r2, [r3, #52]	; 0x34

  /* If the incoming segment contains data, we must process it
     further unless the pcb already received a FIN.
     (RFC 793, chapter 3.9, "SEGMENT ARRIVES" in states CLOSE-WAIT, CLOSING,
     LAST-ACK and TIME-WAIT: "Ignore the segment text.") */
  if ((tcplen > 0) && (pcb->state < CLOSE_WAIT)) {
 800fcfc:	4b35      	ldr	r3, [pc, #212]	; (800fdd4 <tcp_receive+0x5e4>)
 800fcfe:	881b      	ldrh	r3, [r3, #0]
 800fd00:	2b00      	cmp	r3, #0
 800fd02:	f000 84e2 	beq.w	80106ca <tcp_receive+0xeda>
 800fd06:	687b      	ldr	r3, [r7, #4]
 800fd08:	7d1b      	ldrb	r3, [r3, #20]
 800fd0a:	2b06      	cmp	r3, #6
 800fd0c:	f200 84dd 	bhi.w	80106ca <tcp_receive+0xeda>
       this if the sequence number of the incoming segment is less
       than rcv_nxt, and the sequence number plus the length of the
       segment is larger than rcv_nxt. */
    /*    if (TCP_SEQ_LT(seqno, pcb->rcv_nxt)) {
          if (TCP_SEQ_LT(pcb->rcv_nxt, seqno + tcplen)) {*/
    if (TCP_SEQ_BETWEEN(pcb->rcv_nxt, seqno + 1, seqno + tcplen - 1)) {
 800fd10:	687b      	ldr	r3, [r7, #4]
 800fd12:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800fd14:	4b30      	ldr	r3, [pc, #192]	; (800fdd8 <tcp_receive+0x5e8>)
 800fd16:	681b      	ldr	r3, [r3, #0]
 800fd18:	1ad3      	subs	r3, r2, r3
 800fd1a:	3b01      	subs	r3, #1
 800fd1c:	2b00      	cmp	r3, #0
 800fd1e:	f2c0 808f 	blt.w	800fe40 <tcp_receive+0x650>
 800fd22:	687b      	ldr	r3, [r7, #4]
 800fd24:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800fd26:	4b2b      	ldr	r3, [pc, #172]	; (800fdd4 <tcp_receive+0x5e4>)
 800fd28:	881b      	ldrh	r3, [r3, #0]
 800fd2a:	4619      	mov	r1, r3
 800fd2c:	4b2a      	ldr	r3, [pc, #168]	; (800fdd8 <tcp_receive+0x5e8>)
 800fd2e:	681b      	ldr	r3, [r3, #0]
 800fd30:	440b      	add	r3, r1
 800fd32:	1ad3      	subs	r3, r2, r3
 800fd34:	3301      	adds	r3, #1
 800fd36:	2b00      	cmp	r3, #0
 800fd38:	f300 8082 	bgt.w	800fe40 <tcp_receive+0x650>

         After we are done with adjusting the pbuf pointers we must
         adjust the ->data pointer in the seg and the segment
         length.*/

      struct pbuf *p = inseg.p;
 800fd3c:	4b27      	ldr	r3, [pc, #156]	; (800fddc <tcp_receive+0x5ec>)
 800fd3e:	685b      	ldr	r3, [r3, #4]
 800fd40:	647b      	str	r3, [r7, #68]	; 0x44
      u32_t off32 = pcb->rcv_nxt - seqno;
 800fd42:	687b      	ldr	r3, [r7, #4]
 800fd44:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800fd46:	4b24      	ldr	r3, [pc, #144]	; (800fdd8 <tcp_receive+0x5e8>)
 800fd48:	681b      	ldr	r3, [r3, #0]
 800fd4a:	1ad3      	subs	r3, r2, r3
 800fd4c:	627b      	str	r3, [r7, #36]	; 0x24
      u16_t new_tot_len, off;
      LWIP_ASSERT("inseg.p != NULL", inseg.p);
 800fd4e:	4b23      	ldr	r3, [pc, #140]	; (800fddc <tcp_receive+0x5ec>)
 800fd50:	685b      	ldr	r3, [r3, #4]
 800fd52:	2b00      	cmp	r3, #0
 800fd54:	d106      	bne.n	800fd64 <tcp_receive+0x574>
 800fd56:	4b22      	ldr	r3, [pc, #136]	; (800fde0 <tcp_receive+0x5f0>)
 800fd58:	f240 5294 	movw	r2, #1428	; 0x594
 800fd5c:	4921      	ldr	r1, [pc, #132]	; (800fde4 <tcp_receive+0x5f4>)
 800fd5e:	4822      	ldr	r0, [pc, #136]	; (800fde8 <tcp_receive+0x5f8>)
 800fd60:	f008 fb92 	bl	8018488 <iprintf>
      LWIP_ASSERT("insane offset!", (off32 < 0xffff));
 800fd64:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800fd66:	f64f 72fe 	movw	r2, #65534	; 0xfffe
 800fd6a:	4293      	cmp	r3, r2
 800fd6c:	d906      	bls.n	800fd7c <tcp_receive+0x58c>
 800fd6e:	4b1c      	ldr	r3, [pc, #112]	; (800fde0 <tcp_receive+0x5f0>)
 800fd70:	f240 5295 	movw	r2, #1429	; 0x595
 800fd74:	491d      	ldr	r1, [pc, #116]	; (800fdec <tcp_receive+0x5fc>)
 800fd76:	481c      	ldr	r0, [pc, #112]	; (800fde8 <tcp_receive+0x5f8>)
 800fd78:	f008 fb86 	bl	8018488 <iprintf>
      off = (u16_t)off32;
 800fd7c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800fd7e:	f8a7 3042 	strh.w	r3, [r7, #66]	; 0x42
      LWIP_ASSERT("pbuf too short!", (((s32_t)inseg.p->tot_len) >= off));
 800fd82:	4b16      	ldr	r3, [pc, #88]	; (800fddc <tcp_receive+0x5ec>)
 800fd84:	685b      	ldr	r3, [r3, #4]
 800fd86:	891b      	ldrh	r3, [r3, #8]
 800fd88:	f8b7 2042 	ldrh.w	r2, [r7, #66]	; 0x42
 800fd8c:	429a      	cmp	r2, r3
 800fd8e:	d906      	bls.n	800fd9e <tcp_receive+0x5ae>
 800fd90:	4b13      	ldr	r3, [pc, #76]	; (800fde0 <tcp_receive+0x5f0>)
 800fd92:	f240 5297 	movw	r2, #1431	; 0x597
 800fd96:	4916      	ldr	r1, [pc, #88]	; (800fdf0 <tcp_receive+0x600>)
 800fd98:	4813      	ldr	r0, [pc, #76]	; (800fde8 <tcp_receive+0x5f8>)
 800fd9a:	f008 fb75 	bl	8018488 <iprintf>
      inseg.len -= off;
 800fd9e:	4b0f      	ldr	r3, [pc, #60]	; (800fddc <tcp_receive+0x5ec>)
 800fda0:	891a      	ldrh	r2, [r3, #8]
 800fda2:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 800fda6:	1ad3      	subs	r3, r2, r3
 800fda8:	b29a      	uxth	r2, r3
 800fdaa:	4b0c      	ldr	r3, [pc, #48]	; (800fddc <tcp_receive+0x5ec>)
 800fdac:	811a      	strh	r2, [r3, #8]
      new_tot_len = (u16_t)(inseg.p->tot_len - off);
 800fdae:	4b0b      	ldr	r3, [pc, #44]	; (800fddc <tcp_receive+0x5ec>)
 800fdb0:	685b      	ldr	r3, [r3, #4]
 800fdb2:	891a      	ldrh	r2, [r3, #8]
 800fdb4:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 800fdb8:	1ad3      	subs	r3, r2, r3
 800fdba:	847b      	strh	r3, [r7, #34]	; 0x22
      while (p->len < off) {
 800fdbc:	e02a      	b.n	800fe14 <tcp_receive+0x624>
 800fdbe:	bf00      	nop
 800fdc0:	0801a974 	.word	0x0801a974
 800fdc4:	0801a97c 	.word	0x0801a97c
 800fdc8:	2000895c 	.word	0x2000895c
 800fdcc:	20008958 	.word	0x20008958
 800fdd0:	2000891c 	.word	0x2000891c
 800fdd4:	2000895e 	.word	0x2000895e
 800fdd8:	20008954 	.word	0x20008954
 800fddc:	20008934 	.word	0x20008934
 800fde0:	0801a60c 	.word	0x0801a60c
 800fde4:	0801a984 	.word	0x0801a984
 800fde8:	0801a658 	.word	0x0801a658
 800fdec:	0801a994 	.word	0x0801a994
 800fdf0:	0801a9a4 	.word	0x0801a9a4
        off -= p->len;
 800fdf4:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800fdf6:	895b      	ldrh	r3, [r3, #10]
 800fdf8:	f8b7 2042 	ldrh.w	r2, [r7, #66]	; 0x42
 800fdfc:	1ad3      	subs	r3, r2, r3
 800fdfe:	f8a7 3042 	strh.w	r3, [r7, #66]	; 0x42
        /* all pbufs up to and including this one have len==0, so tot_len is equal */
        p->tot_len = new_tot_len;
 800fe02:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800fe04:	8c7a      	ldrh	r2, [r7, #34]	; 0x22
 800fe06:	811a      	strh	r2, [r3, #8]
        p->len = 0;
 800fe08:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800fe0a:	2200      	movs	r2, #0
 800fe0c:	815a      	strh	r2, [r3, #10]
        p = p->next;
 800fe0e:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800fe10:	681b      	ldr	r3, [r3, #0]
 800fe12:	647b      	str	r3, [r7, #68]	; 0x44
      while (p->len < off) {
 800fe14:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800fe16:	895b      	ldrh	r3, [r3, #10]
 800fe18:	f8b7 2042 	ldrh.w	r2, [r7, #66]	; 0x42
 800fe1c:	429a      	cmp	r2, r3
 800fe1e:	d8e9      	bhi.n	800fdf4 <tcp_receive+0x604>
      }
      /* cannot fail... */
      pbuf_remove_header(p, off);
 800fe20:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 800fe24:	4619      	mov	r1, r3
 800fe26:	6c78      	ldr	r0, [r7, #68]	; 0x44
 800fe28:	f7fc f804 	bl	800be34 <pbuf_remove_header>
      inseg.tcphdr->seqno = seqno = pcb->rcv_nxt;
 800fe2c:	687b      	ldr	r3, [r7, #4]
 800fe2e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800fe30:	4a91      	ldr	r2, [pc, #580]	; (8010078 <tcp_receive+0x888>)
 800fe32:	6013      	str	r3, [r2, #0]
 800fe34:	4b91      	ldr	r3, [pc, #580]	; (801007c <tcp_receive+0x88c>)
 800fe36:	68db      	ldr	r3, [r3, #12]
 800fe38:	4a8f      	ldr	r2, [pc, #572]	; (8010078 <tcp_receive+0x888>)
 800fe3a:	6812      	ldr	r2, [r2, #0]
 800fe3c:	605a      	str	r2, [r3, #4]
    if (TCP_SEQ_BETWEEN(pcb->rcv_nxt, seqno + 1, seqno + tcplen - 1)) {
 800fe3e:	e00d      	b.n	800fe5c <tcp_receive+0x66c>
    } else {
      if (TCP_SEQ_LT(seqno, pcb->rcv_nxt)) {
 800fe40:	4b8d      	ldr	r3, [pc, #564]	; (8010078 <tcp_receive+0x888>)
 800fe42:	681a      	ldr	r2, [r3, #0]
 800fe44:	687b      	ldr	r3, [r7, #4]
 800fe46:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800fe48:	1ad3      	subs	r3, r2, r3
 800fe4a:	2b00      	cmp	r3, #0
 800fe4c:	da06      	bge.n	800fe5c <tcp_receive+0x66c>
        /* the whole segment is < rcv_nxt */
        /* must be a duplicate of a packet that has already been correctly handled */

        LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_receive: duplicate seqno %"U32_F"\n", seqno));
        tcp_ack_now(pcb);
 800fe4e:	687b      	ldr	r3, [r7, #4]
 800fe50:	8b5b      	ldrh	r3, [r3, #26]
 800fe52:	f043 0302 	orr.w	r3, r3, #2
 800fe56:	b29a      	uxth	r2, r3
 800fe58:	687b      	ldr	r3, [r7, #4]
 800fe5a:	835a      	strh	r2, [r3, #26]
    }

    /* The sequence number must be within the window (above rcv_nxt
       and below rcv_nxt + rcv_wnd) in order to be further
       processed. */
    if (TCP_SEQ_BETWEEN(seqno, pcb->rcv_nxt,
 800fe5c:	4b86      	ldr	r3, [pc, #536]	; (8010078 <tcp_receive+0x888>)
 800fe5e:	681a      	ldr	r2, [r3, #0]
 800fe60:	687b      	ldr	r3, [r7, #4]
 800fe62:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800fe64:	1ad3      	subs	r3, r2, r3
 800fe66:	2b00      	cmp	r3, #0
 800fe68:	f2c0 842a 	blt.w	80106c0 <tcp_receive+0xed0>
 800fe6c:	4b82      	ldr	r3, [pc, #520]	; (8010078 <tcp_receive+0x888>)
 800fe6e:	681a      	ldr	r2, [r3, #0]
 800fe70:	687b      	ldr	r3, [r7, #4]
 800fe72:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800fe74:	6879      	ldr	r1, [r7, #4]
 800fe76:	8d09      	ldrh	r1, [r1, #40]	; 0x28
 800fe78:	440b      	add	r3, r1
 800fe7a:	1ad3      	subs	r3, r2, r3
 800fe7c:	3301      	adds	r3, #1
 800fe7e:	2b00      	cmp	r3, #0
 800fe80:	f300 841e 	bgt.w	80106c0 <tcp_receive+0xed0>
                        pcb->rcv_nxt + pcb->rcv_wnd - 1)) {
      if (pcb->rcv_nxt == seqno) {
 800fe84:	687b      	ldr	r3, [r7, #4]
 800fe86:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800fe88:	4b7b      	ldr	r3, [pc, #492]	; (8010078 <tcp_receive+0x888>)
 800fe8a:	681b      	ldr	r3, [r3, #0]
 800fe8c:	429a      	cmp	r2, r3
 800fe8e:	f040 829a 	bne.w	80103c6 <tcp_receive+0xbd6>
        /* The incoming segment is the next in sequence. We check if
           we have to trim the end of the segment and update rcv_nxt
           and pass the data to the application. */
        tcplen = TCP_TCPLEN(&inseg);
 800fe92:	4b7a      	ldr	r3, [pc, #488]	; (801007c <tcp_receive+0x88c>)
 800fe94:	891c      	ldrh	r4, [r3, #8]
 800fe96:	4b79      	ldr	r3, [pc, #484]	; (801007c <tcp_receive+0x88c>)
 800fe98:	68db      	ldr	r3, [r3, #12]
 800fe9a:	899b      	ldrh	r3, [r3, #12]
 800fe9c:	b29b      	uxth	r3, r3
 800fe9e:	4618      	mov	r0, r3
 800fea0:	f7fa f9f6 	bl	800a290 <lwip_htons>
 800fea4:	4603      	mov	r3, r0
 800fea6:	b2db      	uxtb	r3, r3
 800fea8:	f003 0303 	and.w	r3, r3, #3
 800feac:	2b00      	cmp	r3, #0
 800feae:	d001      	beq.n	800feb4 <tcp_receive+0x6c4>
 800feb0:	2301      	movs	r3, #1
 800feb2:	e000      	b.n	800feb6 <tcp_receive+0x6c6>
 800feb4:	2300      	movs	r3, #0
 800feb6:	4423      	add	r3, r4
 800feb8:	b29a      	uxth	r2, r3
 800feba:	4b71      	ldr	r3, [pc, #452]	; (8010080 <tcp_receive+0x890>)
 800febc:	801a      	strh	r2, [r3, #0]

        if (tcplen > pcb->rcv_wnd) {
 800febe:	687b      	ldr	r3, [r7, #4]
 800fec0:	8d1a      	ldrh	r2, [r3, #40]	; 0x28
 800fec2:	4b6f      	ldr	r3, [pc, #444]	; (8010080 <tcp_receive+0x890>)
 800fec4:	881b      	ldrh	r3, [r3, #0]
 800fec6:	429a      	cmp	r2, r3
 800fec8:	d275      	bcs.n	800ffb6 <tcp_receive+0x7c6>
          LWIP_DEBUGF(TCP_INPUT_DEBUG,
                      ("tcp_receive: other end overran receive window"
                       "seqno %"U32_F" len %"U16_F" right edge %"U32_F"\n",
                       seqno, tcplen, pcb->rcv_nxt + pcb->rcv_wnd));
          if (TCPH_FLAGS(inseg.tcphdr) & TCP_FIN) {
 800feca:	4b6c      	ldr	r3, [pc, #432]	; (801007c <tcp_receive+0x88c>)
 800fecc:	68db      	ldr	r3, [r3, #12]
 800fece:	899b      	ldrh	r3, [r3, #12]
 800fed0:	b29b      	uxth	r3, r3
 800fed2:	4618      	mov	r0, r3
 800fed4:	f7fa f9dc 	bl	800a290 <lwip_htons>
 800fed8:	4603      	mov	r3, r0
 800feda:	b2db      	uxtb	r3, r3
 800fedc:	f003 0301 	and.w	r3, r3, #1
 800fee0:	2b00      	cmp	r3, #0
 800fee2:	d01f      	beq.n	800ff24 <tcp_receive+0x734>
            /* Must remove the FIN from the header as we're trimming
             * that byte of sequence-space from the packet */
            TCPH_FLAGS_SET(inseg.tcphdr, TCPH_FLAGS(inseg.tcphdr) & ~(unsigned int)TCP_FIN);
 800fee4:	4b65      	ldr	r3, [pc, #404]	; (801007c <tcp_receive+0x88c>)
 800fee6:	68db      	ldr	r3, [r3, #12]
 800fee8:	899b      	ldrh	r3, [r3, #12]
 800feea:	b29b      	uxth	r3, r3
 800feec:	b21b      	sxth	r3, r3
 800feee:	f423 537c 	bic.w	r3, r3, #16128	; 0x3f00
 800fef2:	b21c      	sxth	r4, r3
 800fef4:	4b61      	ldr	r3, [pc, #388]	; (801007c <tcp_receive+0x88c>)
 800fef6:	68db      	ldr	r3, [r3, #12]
 800fef8:	899b      	ldrh	r3, [r3, #12]
 800fefa:	b29b      	uxth	r3, r3
 800fefc:	4618      	mov	r0, r3
 800fefe:	f7fa f9c7 	bl	800a290 <lwip_htons>
 800ff02:	4603      	mov	r3, r0
 800ff04:	b2db      	uxtb	r3, r3
 800ff06:	b29b      	uxth	r3, r3
 800ff08:	f003 033e 	and.w	r3, r3, #62	; 0x3e
 800ff0c:	b29b      	uxth	r3, r3
 800ff0e:	4618      	mov	r0, r3
 800ff10:	f7fa f9be 	bl	800a290 <lwip_htons>
 800ff14:	4603      	mov	r3, r0
 800ff16:	b21b      	sxth	r3, r3
 800ff18:	4323      	orrs	r3, r4
 800ff1a:	b21a      	sxth	r2, r3
 800ff1c:	4b57      	ldr	r3, [pc, #348]	; (801007c <tcp_receive+0x88c>)
 800ff1e:	68db      	ldr	r3, [r3, #12]
 800ff20:	b292      	uxth	r2, r2
 800ff22:	819a      	strh	r2, [r3, #12]
          }
          /* Adjust length of segment to fit in the window. */
          TCPWND_CHECK16(pcb->rcv_wnd);
          inseg.len = (u16_t)pcb->rcv_wnd;
 800ff24:	687b      	ldr	r3, [r7, #4]
 800ff26:	8d1a      	ldrh	r2, [r3, #40]	; 0x28
 800ff28:	4b54      	ldr	r3, [pc, #336]	; (801007c <tcp_receive+0x88c>)
 800ff2a:	811a      	strh	r2, [r3, #8]
          if (TCPH_FLAGS(inseg.tcphdr) & TCP_SYN) {
 800ff2c:	4b53      	ldr	r3, [pc, #332]	; (801007c <tcp_receive+0x88c>)
 800ff2e:	68db      	ldr	r3, [r3, #12]
 800ff30:	899b      	ldrh	r3, [r3, #12]
 800ff32:	b29b      	uxth	r3, r3
 800ff34:	4618      	mov	r0, r3
 800ff36:	f7fa f9ab 	bl	800a290 <lwip_htons>
 800ff3a:	4603      	mov	r3, r0
 800ff3c:	b2db      	uxtb	r3, r3
 800ff3e:	f003 0302 	and.w	r3, r3, #2
 800ff42:	2b00      	cmp	r3, #0
 800ff44:	d005      	beq.n	800ff52 <tcp_receive+0x762>
            inseg.len -= 1;
 800ff46:	4b4d      	ldr	r3, [pc, #308]	; (801007c <tcp_receive+0x88c>)
 800ff48:	891b      	ldrh	r3, [r3, #8]
 800ff4a:	3b01      	subs	r3, #1
 800ff4c:	b29a      	uxth	r2, r3
 800ff4e:	4b4b      	ldr	r3, [pc, #300]	; (801007c <tcp_receive+0x88c>)
 800ff50:	811a      	strh	r2, [r3, #8]
          }
          pbuf_realloc(inseg.p, inseg.len);
 800ff52:	4b4a      	ldr	r3, [pc, #296]	; (801007c <tcp_receive+0x88c>)
 800ff54:	685b      	ldr	r3, [r3, #4]
 800ff56:	4a49      	ldr	r2, [pc, #292]	; (801007c <tcp_receive+0x88c>)
 800ff58:	8912      	ldrh	r2, [r2, #8]
 800ff5a:	4611      	mov	r1, r2
 800ff5c:	4618      	mov	r0, r3
 800ff5e:	f7fb fe69 	bl	800bc34 <pbuf_realloc>
          tcplen = TCP_TCPLEN(&inseg);
 800ff62:	4b46      	ldr	r3, [pc, #280]	; (801007c <tcp_receive+0x88c>)
 800ff64:	891c      	ldrh	r4, [r3, #8]
 800ff66:	4b45      	ldr	r3, [pc, #276]	; (801007c <tcp_receive+0x88c>)
 800ff68:	68db      	ldr	r3, [r3, #12]
 800ff6a:	899b      	ldrh	r3, [r3, #12]
 800ff6c:	b29b      	uxth	r3, r3
 800ff6e:	4618      	mov	r0, r3
 800ff70:	f7fa f98e 	bl	800a290 <lwip_htons>
 800ff74:	4603      	mov	r3, r0
 800ff76:	b2db      	uxtb	r3, r3
 800ff78:	f003 0303 	and.w	r3, r3, #3
 800ff7c:	2b00      	cmp	r3, #0
 800ff7e:	d001      	beq.n	800ff84 <tcp_receive+0x794>
 800ff80:	2301      	movs	r3, #1
 800ff82:	e000      	b.n	800ff86 <tcp_receive+0x796>
 800ff84:	2300      	movs	r3, #0
 800ff86:	4423      	add	r3, r4
 800ff88:	b29a      	uxth	r2, r3
 800ff8a:	4b3d      	ldr	r3, [pc, #244]	; (8010080 <tcp_receive+0x890>)
 800ff8c:	801a      	strh	r2, [r3, #0]
          LWIP_ASSERT("tcp_receive: segment not trimmed correctly to rcv_wnd\n",
 800ff8e:	4b3c      	ldr	r3, [pc, #240]	; (8010080 <tcp_receive+0x890>)
 800ff90:	881b      	ldrh	r3, [r3, #0]
 800ff92:	461a      	mov	r2, r3
 800ff94:	4b38      	ldr	r3, [pc, #224]	; (8010078 <tcp_receive+0x888>)
 800ff96:	681b      	ldr	r3, [r3, #0]
 800ff98:	441a      	add	r2, r3
 800ff9a:	687b      	ldr	r3, [r7, #4]
 800ff9c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800ff9e:	6879      	ldr	r1, [r7, #4]
 800ffa0:	8d09      	ldrh	r1, [r1, #40]	; 0x28
 800ffa2:	440b      	add	r3, r1
 800ffa4:	429a      	cmp	r2, r3
 800ffa6:	d006      	beq.n	800ffb6 <tcp_receive+0x7c6>
 800ffa8:	4b36      	ldr	r3, [pc, #216]	; (8010084 <tcp_receive+0x894>)
 800ffaa:	f240 52cb 	movw	r2, #1483	; 0x5cb
 800ffae:	4936      	ldr	r1, [pc, #216]	; (8010088 <tcp_receive+0x898>)
 800ffb0:	4836      	ldr	r0, [pc, #216]	; (801008c <tcp_receive+0x89c>)
 800ffb2:	f008 fa69 	bl	8018488 <iprintf>
        }
#if TCP_QUEUE_OOSEQ
        /* Received in-sequence data, adjust ooseq data if:
           - FIN has been received or
           - inseq overlaps with ooseq */
        if (pcb->ooseq != NULL) {
 800ffb6:	687b      	ldr	r3, [r7, #4]
 800ffb8:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800ffba:	2b00      	cmp	r3, #0
 800ffbc:	f000 80e7 	beq.w	801018e <tcp_receive+0x99e>
          if (TCPH_FLAGS(inseg.tcphdr) & TCP_FIN) {
 800ffc0:	4b2e      	ldr	r3, [pc, #184]	; (801007c <tcp_receive+0x88c>)
 800ffc2:	68db      	ldr	r3, [r3, #12]
 800ffc4:	899b      	ldrh	r3, [r3, #12]
 800ffc6:	b29b      	uxth	r3, r3
 800ffc8:	4618      	mov	r0, r3
 800ffca:	f7fa f961 	bl	800a290 <lwip_htons>
 800ffce:	4603      	mov	r3, r0
 800ffd0:	b2db      	uxtb	r3, r3
 800ffd2:	f003 0301 	and.w	r3, r3, #1
 800ffd6:	2b00      	cmp	r3, #0
 800ffd8:	d010      	beq.n	800fffc <tcp_receive+0x80c>
            LWIP_DEBUGF(TCP_INPUT_DEBUG,
                        ("tcp_receive: received in-order FIN, binning ooseq queue\n"));
            /* Received in-order FIN means anything that was received
             * out of order must now have been received in-order, so
             * bin the ooseq queue */
            while (pcb->ooseq != NULL) {
 800ffda:	e00a      	b.n	800fff2 <tcp_receive+0x802>
              struct tcp_seg *old_ooseq = pcb->ooseq;
 800ffdc:	687b      	ldr	r3, [r7, #4]
 800ffde:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800ffe0:	60fb      	str	r3, [r7, #12]
              pcb->ooseq = pcb->ooseq->next;
 800ffe2:	687b      	ldr	r3, [r7, #4]
 800ffe4:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800ffe6:	681a      	ldr	r2, [r3, #0]
 800ffe8:	687b      	ldr	r3, [r7, #4]
 800ffea:	675a      	str	r2, [r3, #116]	; 0x74
              tcp_seg_free(old_ooseq);
 800ffec:	68f8      	ldr	r0, [r7, #12]
 800ffee:	f7fd fce2 	bl	800d9b6 <tcp_seg_free>
            while (pcb->ooseq != NULL) {
 800fff2:	687b      	ldr	r3, [r7, #4]
 800fff4:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800fff6:	2b00      	cmp	r3, #0
 800fff8:	d1f0      	bne.n	800ffdc <tcp_receive+0x7ec>
 800fffa:	e0c8      	b.n	801018e <tcp_receive+0x99e>
            }
          } else {
            struct tcp_seg *next = pcb->ooseq;
 800fffc:	687b      	ldr	r3, [r7, #4]
 800fffe:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8010000:	63fb      	str	r3, [r7, #60]	; 0x3c
            /* Remove all segments on ooseq that are covered by inseg already.
             * FIN is copied from ooseq to inseg if present. */
            while (next &&
 8010002:	e052      	b.n	80100aa <tcp_receive+0x8ba>
                   TCP_SEQ_GEQ(seqno + tcplen,
                               next->tcphdr->seqno + next->len)) {
              struct tcp_seg *tmp;
              /* inseg cannot have FIN here (already processed above) */
              if ((TCPH_FLAGS(next->tcphdr) & TCP_FIN) != 0 &&
 8010004:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8010006:	68db      	ldr	r3, [r3, #12]
 8010008:	899b      	ldrh	r3, [r3, #12]
 801000a:	b29b      	uxth	r3, r3
 801000c:	4618      	mov	r0, r3
 801000e:	f7fa f93f 	bl	800a290 <lwip_htons>
 8010012:	4603      	mov	r3, r0
 8010014:	b2db      	uxtb	r3, r3
 8010016:	f003 0301 	and.w	r3, r3, #1
 801001a:	2b00      	cmp	r3, #0
 801001c:	d03d      	beq.n	801009a <tcp_receive+0x8aa>
                  (TCPH_FLAGS(inseg.tcphdr) & TCP_SYN) == 0) {
 801001e:	4b17      	ldr	r3, [pc, #92]	; (801007c <tcp_receive+0x88c>)
 8010020:	68db      	ldr	r3, [r3, #12]
 8010022:	899b      	ldrh	r3, [r3, #12]
 8010024:	b29b      	uxth	r3, r3
 8010026:	4618      	mov	r0, r3
 8010028:	f7fa f932 	bl	800a290 <lwip_htons>
 801002c:	4603      	mov	r3, r0
 801002e:	b2db      	uxtb	r3, r3
 8010030:	f003 0302 	and.w	r3, r3, #2
              if ((TCPH_FLAGS(next->tcphdr) & TCP_FIN) != 0 &&
 8010034:	2b00      	cmp	r3, #0
 8010036:	d130      	bne.n	801009a <tcp_receive+0x8aa>
                TCPH_SET_FLAG(inseg.tcphdr, TCP_FIN);
 8010038:	4b10      	ldr	r3, [pc, #64]	; (801007c <tcp_receive+0x88c>)
 801003a:	68db      	ldr	r3, [r3, #12]
 801003c:	899b      	ldrh	r3, [r3, #12]
 801003e:	b29c      	uxth	r4, r3
 8010040:	2001      	movs	r0, #1
 8010042:	f7fa f925 	bl	800a290 <lwip_htons>
 8010046:	4603      	mov	r3, r0
 8010048:	461a      	mov	r2, r3
 801004a:	4b0c      	ldr	r3, [pc, #48]	; (801007c <tcp_receive+0x88c>)
 801004c:	68db      	ldr	r3, [r3, #12]
 801004e:	4322      	orrs	r2, r4
 8010050:	b292      	uxth	r2, r2
 8010052:	819a      	strh	r2, [r3, #12]
                tcplen = TCP_TCPLEN(&inseg);
 8010054:	4b09      	ldr	r3, [pc, #36]	; (801007c <tcp_receive+0x88c>)
 8010056:	891c      	ldrh	r4, [r3, #8]
 8010058:	4b08      	ldr	r3, [pc, #32]	; (801007c <tcp_receive+0x88c>)
 801005a:	68db      	ldr	r3, [r3, #12]
 801005c:	899b      	ldrh	r3, [r3, #12]
 801005e:	b29b      	uxth	r3, r3
 8010060:	4618      	mov	r0, r3
 8010062:	f7fa f915 	bl	800a290 <lwip_htons>
 8010066:	4603      	mov	r3, r0
 8010068:	b2db      	uxtb	r3, r3
 801006a:	f003 0303 	and.w	r3, r3, #3
 801006e:	2b00      	cmp	r3, #0
 8010070:	d00e      	beq.n	8010090 <tcp_receive+0x8a0>
 8010072:	2301      	movs	r3, #1
 8010074:	e00d      	b.n	8010092 <tcp_receive+0x8a2>
 8010076:	bf00      	nop
 8010078:	20008954 	.word	0x20008954
 801007c:	20008934 	.word	0x20008934
 8010080:	2000895e 	.word	0x2000895e
 8010084:	0801a60c 	.word	0x0801a60c
 8010088:	0801a9b4 	.word	0x0801a9b4
 801008c:	0801a658 	.word	0x0801a658
 8010090:	2300      	movs	r3, #0
 8010092:	4423      	add	r3, r4
 8010094:	b29a      	uxth	r2, r3
 8010096:	4b98      	ldr	r3, [pc, #608]	; (80102f8 <tcp_receive+0xb08>)
 8010098:	801a      	strh	r2, [r3, #0]
              }
              tmp = next;
 801009a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 801009c:	613b      	str	r3, [r7, #16]
              next = next->next;
 801009e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80100a0:	681b      	ldr	r3, [r3, #0]
 80100a2:	63fb      	str	r3, [r7, #60]	; 0x3c
              tcp_seg_free(tmp);
 80100a4:	6938      	ldr	r0, [r7, #16]
 80100a6:	f7fd fc86 	bl	800d9b6 <tcp_seg_free>
            while (next &&
 80100aa:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80100ac:	2b00      	cmp	r3, #0
 80100ae:	d00e      	beq.n	80100ce <tcp_receive+0x8de>
                   TCP_SEQ_GEQ(seqno + tcplen,
 80100b0:	4b91      	ldr	r3, [pc, #580]	; (80102f8 <tcp_receive+0xb08>)
 80100b2:	881b      	ldrh	r3, [r3, #0]
 80100b4:	461a      	mov	r2, r3
 80100b6:	4b91      	ldr	r3, [pc, #580]	; (80102fc <tcp_receive+0xb0c>)
 80100b8:	681b      	ldr	r3, [r3, #0]
 80100ba:	441a      	add	r2, r3
 80100bc:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80100be:	68db      	ldr	r3, [r3, #12]
 80100c0:	685b      	ldr	r3, [r3, #4]
 80100c2:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 80100c4:	8909      	ldrh	r1, [r1, #8]
 80100c6:	440b      	add	r3, r1
 80100c8:	1ad3      	subs	r3, r2, r3
            while (next &&
 80100ca:	2b00      	cmp	r3, #0
 80100cc:	da9a      	bge.n	8010004 <tcp_receive+0x814>
            }
            /* Now trim right side of inseg if it overlaps with the first
             * segment on ooseq */
            if (next &&
 80100ce:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80100d0:	2b00      	cmp	r3, #0
 80100d2:	d059      	beq.n	8010188 <tcp_receive+0x998>
                TCP_SEQ_GT(seqno + tcplen,
 80100d4:	4b88      	ldr	r3, [pc, #544]	; (80102f8 <tcp_receive+0xb08>)
 80100d6:	881b      	ldrh	r3, [r3, #0]
 80100d8:	461a      	mov	r2, r3
 80100da:	4b88      	ldr	r3, [pc, #544]	; (80102fc <tcp_receive+0xb0c>)
 80100dc:	681b      	ldr	r3, [r3, #0]
 80100de:	441a      	add	r2, r3
 80100e0:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80100e2:	68db      	ldr	r3, [r3, #12]
 80100e4:	685b      	ldr	r3, [r3, #4]
 80100e6:	1ad3      	subs	r3, r2, r3
            if (next &&
 80100e8:	2b00      	cmp	r3, #0
 80100ea:	dd4d      	ble.n	8010188 <tcp_receive+0x998>
                           next->tcphdr->seqno)) {
              /* inseg cannot have FIN here (already processed above) */
              inseg.len = (u16_t)(next->tcphdr->seqno - seqno);
 80100ec:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80100ee:	68db      	ldr	r3, [r3, #12]
 80100f0:	685b      	ldr	r3, [r3, #4]
 80100f2:	b29a      	uxth	r2, r3
 80100f4:	4b81      	ldr	r3, [pc, #516]	; (80102fc <tcp_receive+0xb0c>)
 80100f6:	681b      	ldr	r3, [r3, #0]
 80100f8:	b29b      	uxth	r3, r3
 80100fa:	1ad3      	subs	r3, r2, r3
 80100fc:	b29a      	uxth	r2, r3
 80100fe:	4b80      	ldr	r3, [pc, #512]	; (8010300 <tcp_receive+0xb10>)
 8010100:	811a      	strh	r2, [r3, #8]
              if (TCPH_FLAGS(inseg.tcphdr) & TCP_SYN) {
 8010102:	4b7f      	ldr	r3, [pc, #508]	; (8010300 <tcp_receive+0xb10>)
 8010104:	68db      	ldr	r3, [r3, #12]
 8010106:	899b      	ldrh	r3, [r3, #12]
 8010108:	b29b      	uxth	r3, r3
 801010a:	4618      	mov	r0, r3
 801010c:	f7fa f8c0 	bl	800a290 <lwip_htons>
 8010110:	4603      	mov	r3, r0
 8010112:	b2db      	uxtb	r3, r3
 8010114:	f003 0302 	and.w	r3, r3, #2
 8010118:	2b00      	cmp	r3, #0
 801011a:	d005      	beq.n	8010128 <tcp_receive+0x938>
                inseg.len -= 1;
 801011c:	4b78      	ldr	r3, [pc, #480]	; (8010300 <tcp_receive+0xb10>)
 801011e:	891b      	ldrh	r3, [r3, #8]
 8010120:	3b01      	subs	r3, #1
 8010122:	b29a      	uxth	r2, r3
 8010124:	4b76      	ldr	r3, [pc, #472]	; (8010300 <tcp_receive+0xb10>)
 8010126:	811a      	strh	r2, [r3, #8]
              }
              pbuf_realloc(inseg.p, inseg.len);
 8010128:	4b75      	ldr	r3, [pc, #468]	; (8010300 <tcp_receive+0xb10>)
 801012a:	685b      	ldr	r3, [r3, #4]
 801012c:	4a74      	ldr	r2, [pc, #464]	; (8010300 <tcp_receive+0xb10>)
 801012e:	8912      	ldrh	r2, [r2, #8]
 8010130:	4611      	mov	r1, r2
 8010132:	4618      	mov	r0, r3
 8010134:	f7fb fd7e 	bl	800bc34 <pbuf_realloc>
              tcplen = TCP_TCPLEN(&inseg);
 8010138:	4b71      	ldr	r3, [pc, #452]	; (8010300 <tcp_receive+0xb10>)
 801013a:	891c      	ldrh	r4, [r3, #8]
 801013c:	4b70      	ldr	r3, [pc, #448]	; (8010300 <tcp_receive+0xb10>)
 801013e:	68db      	ldr	r3, [r3, #12]
 8010140:	899b      	ldrh	r3, [r3, #12]
 8010142:	b29b      	uxth	r3, r3
 8010144:	4618      	mov	r0, r3
 8010146:	f7fa f8a3 	bl	800a290 <lwip_htons>
 801014a:	4603      	mov	r3, r0
 801014c:	b2db      	uxtb	r3, r3
 801014e:	f003 0303 	and.w	r3, r3, #3
 8010152:	2b00      	cmp	r3, #0
 8010154:	d001      	beq.n	801015a <tcp_receive+0x96a>
 8010156:	2301      	movs	r3, #1
 8010158:	e000      	b.n	801015c <tcp_receive+0x96c>
 801015a:	2300      	movs	r3, #0
 801015c:	4423      	add	r3, r4
 801015e:	b29a      	uxth	r2, r3
 8010160:	4b65      	ldr	r3, [pc, #404]	; (80102f8 <tcp_receive+0xb08>)
 8010162:	801a      	strh	r2, [r3, #0]
              LWIP_ASSERT("tcp_receive: segment not trimmed correctly to ooseq queue\n",
 8010164:	4b64      	ldr	r3, [pc, #400]	; (80102f8 <tcp_receive+0xb08>)
 8010166:	881b      	ldrh	r3, [r3, #0]
 8010168:	461a      	mov	r2, r3
 801016a:	4b64      	ldr	r3, [pc, #400]	; (80102fc <tcp_receive+0xb0c>)
 801016c:	681b      	ldr	r3, [r3, #0]
 801016e:	441a      	add	r2, r3
 8010170:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8010172:	68db      	ldr	r3, [r3, #12]
 8010174:	685b      	ldr	r3, [r3, #4]
 8010176:	429a      	cmp	r2, r3
 8010178:	d006      	beq.n	8010188 <tcp_receive+0x998>
 801017a:	4b62      	ldr	r3, [pc, #392]	; (8010304 <tcp_receive+0xb14>)
 801017c:	f240 52fc 	movw	r2, #1532	; 0x5fc
 8010180:	4961      	ldr	r1, [pc, #388]	; (8010308 <tcp_receive+0xb18>)
 8010182:	4862      	ldr	r0, [pc, #392]	; (801030c <tcp_receive+0xb1c>)
 8010184:	f008 f980 	bl	8018488 <iprintf>
                          (seqno + tcplen) == next->tcphdr->seqno);
            }
            pcb->ooseq = next;
 8010188:	687b      	ldr	r3, [r7, #4]
 801018a:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 801018c:	675a      	str	r2, [r3, #116]	; 0x74
          }
        }
#endif /* TCP_QUEUE_OOSEQ */

        pcb->rcv_nxt = seqno + tcplen;
 801018e:	4b5a      	ldr	r3, [pc, #360]	; (80102f8 <tcp_receive+0xb08>)
 8010190:	881b      	ldrh	r3, [r3, #0]
 8010192:	461a      	mov	r2, r3
 8010194:	4b59      	ldr	r3, [pc, #356]	; (80102fc <tcp_receive+0xb0c>)
 8010196:	681b      	ldr	r3, [r3, #0]
 8010198:	441a      	add	r2, r3
 801019a:	687b      	ldr	r3, [r7, #4]
 801019c:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update the receiver's (our) window. */
        LWIP_ASSERT("tcp_receive: tcplen > rcv_wnd\n", pcb->rcv_wnd >= tcplen);
 801019e:	687b      	ldr	r3, [r7, #4]
 80101a0:	8d1a      	ldrh	r2, [r3, #40]	; 0x28
 80101a2:	4b55      	ldr	r3, [pc, #340]	; (80102f8 <tcp_receive+0xb08>)
 80101a4:	881b      	ldrh	r3, [r3, #0]
 80101a6:	429a      	cmp	r2, r3
 80101a8:	d206      	bcs.n	80101b8 <tcp_receive+0x9c8>
 80101aa:	4b56      	ldr	r3, [pc, #344]	; (8010304 <tcp_receive+0xb14>)
 80101ac:	f240 6207 	movw	r2, #1543	; 0x607
 80101b0:	4957      	ldr	r1, [pc, #348]	; (8010310 <tcp_receive+0xb20>)
 80101b2:	4856      	ldr	r0, [pc, #344]	; (801030c <tcp_receive+0xb1c>)
 80101b4:	f008 f968 	bl	8018488 <iprintf>
        pcb->rcv_wnd -= tcplen;
 80101b8:	687b      	ldr	r3, [r7, #4]
 80101ba:	8d1a      	ldrh	r2, [r3, #40]	; 0x28
 80101bc:	4b4e      	ldr	r3, [pc, #312]	; (80102f8 <tcp_receive+0xb08>)
 80101be:	881b      	ldrh	r3, [r3, #0]
 80101c0:	1ad3      	subs	r3, r2, r3
 80101c2:	b29a      	uxth	r2, r3
 80101c4:	687b      	ldr	r3, [r7, #4]
 80101c6:	851a      	strh	r2, [r3, #40]	; 0x28

        tcp_update_rcv_ann_wnd(pcb);
 80101c8:	6878      	ldr	r0, [r7, #4]
 80101ca:	f7fc fdb7 	bl	800cd3c <tcp_update_rcv_ann_wnd>
           chains its data on this pbuf as well.

           If the segment was a FIN, we set the TF_GOT_FIN flag that will
           be used to indicate to the application that the remote side has
           closed its end of the connection. */
        if (inseg.p->tot_len > 0) {
 80101ce:	4b4c      	ldr	r3, [pc, #304]	; (8010300 <tcp_receive+0xb10>)
 80101d0:	685b      	ldr	r3, [r3, #4]
 80101d2:	891b      	ldrh	r3, [r3, #8]
 80101d4:	2b00      	cmp	r3, #0
 80101d6:	d006      	beq.n	80101e6 <tcp_receive+0x9f6>
          recv_data = inseg.p;
 80101d8:	4b49      	ldr	r3, [pc, #292]	; (8010300 <tcp_receive+0xb10>)
 80101da:	685b      	ldr	r3, [r3, #4]
 80101dc:	4a4d      	ldr	r2, [pc, #308]	; (8010314 <tcp_receive+0xb24>)
 80101de:	6013      	str	r3, [r2, #0]
          /* Since this pbuf now is the responsibility of the
             application, we delete our reference to it so that we won't
             (mistakingly) deallocate it. */
          inseg.p = NULL;
 80101e0:	4b47      	ldr	r3, [pc, #284]	; (8010300 <tcp_receive+0xb10>)
 80101e2:	2200      	movs	r2, #0
 80101e4:	605a      	str	r2, [r3, #4]
        }
        if (TCPH_FLAGS(inseg.tcphdr) & TCP_FIN) {
 80101e6:	4b46      	ldr	r3, [pc, #280]	; (8010300 <tcp_receive+0xb10>)
 80101e8:	68db      	ldr	r3, [r3, #12]
 80101ea:	899b      	ldrh	r3, [r3, #12]
 80101ec:	b29b      	uxth	r3, r3
 80101ee:	4618      	mov	r0, r3
 80101f0:	f7fa f84e 	bl	800a290 <lwip_htons>
 80101f4:	4603      	mov	r3, r0
 80101f6:	b2db      	uxtb	r3, r3
 80101f8:	f003 0301 	and.w	r3, r3, #1
 80101fc:	2b00      	cmp	r3, #0
 80101fe:	f000 80b8 	beq.w	8010372 <tcp_receive+0xb82>
          LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_receive: received FIN.\n"));
          recv_flags |= TF_GOT_FIN;
 8010202:	4b45      	ldr	r3, [pc, #276]	; (8010318 <tcp_receive+0xb28>)
 8010204:	781b      	ldrb	r3, [r3, #0]
 8010206:	f043 0320 	orr.w	r3, r3, #32
 801020a:	b2da      	uxtb	r2, r3
 801020c:	4b42      	ldr	r3, [pc, #264]	; (8010318 <tcp_receive+0xb28>)
 801020e:	701a      	strb	r2, [r3, #0]
        }

#if TCP_QUEUE_OOSEQ
        /* We now check if we have segments on the ->ooseq queue that
           are now in sequence. */
        while (pcb->ooseq != NULL &&
 8010210:	e0af      	b.n	8010372 <tcp_receive+0xb82>
               pcb->ooseq->tcphdr->seqno == pcb->rcv_nxt) {

          struct tcp_seg *cseg = pcb->ooseq;
 8010212:	687b      	ldr	r3, [r7, #4]
 8010214:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8010216:	60bb      	str	r3, [r7, #8]
          seqno = pcb->ooseq->tcphdr->seqno;
 8010218:	687b      	ldr	r3, [r7, #4]
 801021a:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 801021c:	68db      	ldr	r3, [r3, #12]
 801021e:	685b      	ldr	r3, [r3, #4]
 8010220:	4a36      	ldr	r2, [pc, #216]	; (80102fc <tcp_receive+0xb0c>)
 8010222:	6013      	str	r3, [r2, #0]

          pcb->rcv_nxt += TCP_TCPLEN(cseg);
 8010224:	68bb      	ldr	r3, [r7, #8]
 8010226:	891b      	ldrh	r3, [r3, #8]
 8010228:	461c      	mov	r4, r3
 801022a:	68bb      	ldr	r3, [r7, #8]
 801022c:	68db      	ldr	r3, [r3, #12]
 801022e:	899b      	ldrh	r3, [r3, #12]
 8010230:	b29b      	uxth	r3, r3
 8010232:	4618      	mov	r0, r3
 8010234:	f7fa f82c 	bl	800a290 <lwip_htons>
 8010238:	4603      	mov	r3, r0
 801023a:	b2db      	uxtb	r3, r3
 801023c:	f003 0303 	and.w	r3, r3, #3
 8010240:	2b00      	cmp	r3, #0
 8010242:	d001      	beq.n	8010248 <tcp_receive+0xa58>
 8010244:	2301      	movs	r3, #1
 8010246:	e000      	b.n	801024a <tcp_receive+0xa5a>
 8010248:	2300      	movs	r3, #0
 801024a:	191a      	adds	r2, r3, r4
 801024c:	687b      	ldr	r3, [r7, #4]
 801024e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8010250:	441a      	add	r2, r3
 8010252:	687b      	ldr	r3, [r7, #4]
 8010254:	625a      	str	r2, [r3, #36]	; 0x24
          LWIP_ASSERT("tcp_receive: ooseq tcplen > rcv_wnd\n",
 8010256:	687b      	ldr	r3, [r7, #4]
 8010258:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 801025a:	461c      	mov	r4, r3
 801025c:	68bb      	ldr	r3, [r7, #8]
 801025e:	891b      	ldrh	r3, [r3, #8]
 8010260:	461d      	mov	r5, r3
 8010262:	68bb      	ldr	r3, [r7, #8]
 8010264:	68db      	ldr	r3, [r3, #12]
 8010266:	899b      	ldrh	r3, [r3, #12]
 8010268:	b29b      	uxth	r3, r3
 801026a:	4618      	mov	r0, r3
 801026c:	f7fa f810 	bl	800a290 <lwip_htons>
 8010270:	4603      	mov	r3, r0
 8010272:	b2db      	uxtb	r3, r3
 8010274:	f003 0303 	and.w	r3, r3, #3
 8010278:	2b00      	cmp	r3, #0
 801027a:	d001      	beq.n	8010280 <tcp_receive+0xa90>
 801027c:	2301      	movs	r3, #1
 801027e:	e000      	b.n	8010282 <tcp_receive+0xa92>
 8010280:	2300      	movs	r3, #0
 8010282:	442b      	add	r3, r5
 8010284:	429c      	cmp	r4, r3
 8010286:	d206      	bcs.n	8010296 <tcp_receive+0xaa6>
 8010288:	4b1e      	ldr	r3, [pc, #120]	; (8010304 <tcp_receive+0xb14>)
 801028a:	f240 622b 	movw	r2, #1579	; 0x62b
 801028e:	4923      	ldr	r1, [pc, #140]	; (801031c <tcp_receive+0xb2c>)
 8010290:	481e      	ldr	r0, [pc, #120]	; (801030c <tcp_receive+0xb1c>)
 8010292:	f008 f8f9 	bl	8018488 <iprintf>
                      pcb->rcv_wnd >= TCP_TCPLEN(cseg));
          pcb->rcv_wnd -= TCP_TCPLEN(cseg);
 8010296:	68bb      	ldr	r3, [r7, #8]
 8010298:	891b      	ldrh	r3, [r3, #8]
 801029a:	461c      	mov	r4, r3
 801029c:	68bb      	ldr	r3, [r7, #8]
 801029e:	68db      	ldr	r3, [r3, #12]
 80102a0:	899b      	ldrh	r3, [r3, #12]
 80102a2:	b29b      	uxth	r3, r3
 80102a4:	4618      	mov	r0, r3
 80102a6:	f7f9 fff3 	bl	800a290 <lwip_htons>
 80102aa:	4603      	mov	r3, r0
 80102ac:	b2db      	uxtb	r3, r3
 80102ae:	f003 0303 	and.w	r3, r3, #3
 80102b2:	2b00      	cmp	r3, #0
 80102b4:	d001      	beq.n	80102ba <tcp_receive+0xaca>
 80102b6:	2301      	movs	r3, #1
 80102b8:	e000      	b.n	80102bc <tcp_receive+0xacc>
 80102ba:	2300      	movs	r3, #0
 80102bc:	1919      	adds	r1, r3, r4
 80102be:	687b      	ldr	r3, [r7, #4]
 80102c0:	8d1a      	ldrh	r2, [r3, #40]	; 0x28
 80102c2:	b28b      	uxth	r3, r1
 80102c4:	1ad3      	subs	r3, r2, r3
 80102c6:	b29a      	uxth	r2, r3
 80102c8:	687b      	ldr	r3, [r7, #4]
 80102ca:	851a      	strh	r2, [r3, #40]	; 0x28

          tcp_update_rcv_ann_wnd(pcb);
 80102cc:	6878      	ldr	r0, [r7, #4]
 80102ce:	f7fc fd35 	bl	800cd3c <tcp_update_rcv_ann_wnd>

          if (cseg->p->tot_len > 0) {
 80102d2:	68bb      	ldr	r3, [r7, #8]
 80102d4:	685b      	ldr	r3, [r3, #4]
 80102d6:	891b      	ldrh	r3, [r3, #8]
 80102d8:	2b00      	cmp	r3, #0
 80102da:	d028      	beq.n	801032e <tcp_receive+0xb3e>
            /* Chain this pbuf onto the pbuf that we will pass to
               the application. */
            /* With window scaling, this can overflow recv_data->tot_len, but
               that's not a problem since we explicitly fix that before passing
               recv_data to the application. */
            if (recv_data) {
 80102dc:	4b0d      	ldr	r3, [pc, #52]	; (8010314 <tcp_receive+0xb24>)
 80102de:	681b      	ldr	r3, [r3, #0]
 80102e0:	2b00      	cmp	r3, #0
 80102e2:	d01d      	beq.n	8010320 <tcp_receive+0xb30>
              pbuf_cat(recv_data, cseg->p);
 80102e4:	4b0b      	ldr	r3, [pc, #44]	; (8010314 <tcp_receive+0xb24>)
 80102e6:	681a      	ldr	r2, [r3, #0]
 80102e8:	68bb      	ldr	r3, [r7, #8]
 80102ea:	685b      	ldr	r3, [r3, #4]
 80102ec:	4619      	mov	r1, r3
 80102ee:	4610      	mov	r0, r2
 80102f0:	f7fb fee8 	bl	800c0c4 <pbuf_cat>
 80102f4:	e018      	b.n	8010328 <tcp_receive+0xb38>
 80102f6:	bf00      	nop
 80102f8:	2000895e 	.word	0x2000895e
 80102fc:	20008954 	.word	0x20008954
 8010300:	20008934 	.word	0x20008934
 8010304:	0801a60c 	.word	0x0801a60c
 8010308:	0801a9ec 	.word	0x0801a9ec
 801030c:	0801a658 	.word	0x0801a658
 8010310:	0801aa28 	.word	0x0801aa28
 8010314:	20008964 	.word	0x20008964
 8010318:	20008961 	.word	0x20008961
 801031c:	0801aa48 	.word	0x0801aa48
            } else {
              recv_data = cseg->p;
 8010320:	68bb      	ldr	r3, [r7, #8]
 8010322:	685b      	ldr	r3, [r3, #4]
 8010324:	4a70      	ldr	r2, [pc, #448]	; (80104e8 <tcp_receive+0xcf8>)
 8010326:	6013      	str	r3, [r2, #0]
            }
            cseg->p = NULL;
 8010328:	68bb      	ldr	r3, [r7, #8]
 801032a:	2200      	movs	r2, #0
 801032c:	605a      	str	r2, [r3, #4]
          }
          if (TCPH_FLAGS(cseg->tcphdr) & TCP_FIN) {
 801032e:	68bb      	ldr	r3, [r7, #8]
 8010330:	68db      	ldr	r3, [r3, #12]
 8010332:	899b      	ldrh	r3, [r3, #12]
 8010334:	b29b      	uxth	r3, r3
 8010336:	4618      	mov	r0, r3
 8010338:	f7f9 ffaa 	bl	800a290 <lwip_htons>
 801033c:	4603      	mov	r3, r0
 801033e:	b2db      	uxtb	r3, r3
 8010340:	f003 0301 	and.w	r3, r3, #1
 8010344:	2b00      	cmp	r3, #0
 8010346:	d00d      	beq.n	8010364 <tcp_receive+0xb74>
            LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_receive: dequeued FIN.\n"));
            recv_flags |= TF_GOT_FIN;
 8010348:	4b68      	ldr	r3, [pc, #416]	; (80104ec <tcp_receive+0xcfc>)
 801034a:	781b      	ldrb	r3, [r3, #0]
 801034c:	f043 0320 	orr.w	r3, r3, #32
 8010350:	b2da      	uxtb	r2, r3
 8010352:	4b66      	ldr	r3, [pc, #408]	; (80104ec <tcp_receive+0xcfc>)
 8010354:	701a      	strb	r2, [r3, #0]
            if (pcb->state == ESTABLISHED) { /* force passive close or we can move to active close */
 8010356:	687b      	ldr	r3, [r7, #4]
 8010358:	7d1b      	ldrb	r3, [r3, #20]
 801035a:	2b04      	cmp	r3, #4
 801035c:	d102      	bne.n	8010364 <tcp_receive+0xb74>
              pcb->state = CLOSE_WAIT;
 801035e:	687b      	ldr	r3, [r7, #4]
 8010360:	2207      	movs	r2, #7
 8010362:	751a      	strb	r2, [r3, #20]
            }
          }

          pcb->ooseq = cseg->next;
 8010364:	68bb      	ldr	r3, [r7, #8]
 8010366:	681a      	ldr	r2, [r3, #0]
 8010368:	687b      	ldr	r3, [r7, #4]
 801036a:	675a      	str	r2, [r3, #116]	; 0x74
          tcp_seg_free(cseg);
 801036c:	68b8      	ldr	r0, [r7, #8]
 801036e:	f7fd fb22 	bl	800d9b6 <tcp_seg_free>
        while (pcb->ooseq != NULL &&
 8010372:	687b      	ldr	r3, [r7, #4]
 8010374:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8010376:	2b00      	cmp	r3, #0
 8010378:	d008      	beq.n	801038c <tcp_receive+0xb9c>
               pcb->ooseq->tcphdr->seqno == pcb->rcv_nxt) {
 801037a:	687b      	ldr	r3, [r7, #4]
 801037c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 801037e:	68db      	ldr	r3, [r3, #12]
 8010380:	685a      	ldr	r2, [r3, #4]
 8010382:	687b      	ldr	r3, [r7, #4]
 8010384:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        while (pcb->ooseq != NULL &&
 8010386:	429a      	cmp	r2, r3
 8010388:	f43f af43 	beq.w	8010212 <tcp_receive+0xa22>
#endif /* LWIP_TCP_SACK_OUT */
#endif /* TCP_QUEUE_OOSEQ */


        /* Acknowledge the segment(s). */
        tcp_ack(pcb);
 801038c:	687b      	ldr	r3, [r7, #4]
 801038e:	8b5b      	ldrh	r3, [r3, #26]
 8010390:	f003 0301 	and.w	r3, r3, #1
 8010394:	2b00      	cmp	r3, #0
 8010396:	d00e      	beq.n	80103b6 <tcp_receive+0xbc6>
 8010398:	687b      	ldr	r3, [r7, #4]
 801039a:	8b5b      	ldrh	r3, [r3, #26]
 801039c:	f023 0301 	bic.w	r3, r3, #1
 80103a0:	b29a      	uxth	r2, r3
 80103a2:	687b      	ldr	r3, [r7, #4]
 80103a4:	835a      	strh	r2, [r3, #26]
 80103a6:	687b      	ldr	r3, [r7, #4]
 80103a8:	8b5b      	ldrh	r3, [r3, #26]
 80103aa:	f043 0302 	orr.w	r3, r3, #2
 80103ae:	b29a      	uxth	r2, r3
 80103b0:	687b      	ldr	r3, [r7, #4]
 80103b2:	835a      	strh	r2, [r3, #26]
      if (pcb->rcv_nxt == seqno) {
 80103b4:	e188      	b.n	80106c8 <tcp_receive+0xed8>
        tcp_ack(pcb);
 80103b6:	687b      	ldr	r3, [r7, #4]
 80103b8:	8b5b      	ldrh	r3, [r3, #26]
 80103ba:	f043 0301 	orr.w	r3, r3, #1
 80103be:	b29a      	uxth	r2, r3
 80103c0:	687b      	ldr	r3, [r7, #4]
 80103c2:	835a      	strh	r2, [r3, #26]
      if (pcb->rcv_nxt == seqno) {
 80103c4:	e180      	b.n	80106c8 <tcp_receive+0xed8>
      } else {
        /* We get here if the incoming segment is out-of-sequence. */

#if TCP_QUEUE_OOSEQ
        /* We queue the segment on the ->ooseq queue. */
        if (pcb->ooseq == NULL) {
 80103c6:	687b      	ldr	r3, [r7, #4]
 80103c8:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80103ca:	2b00      	cmp	r3, #0
 80103cc:	d106      	bne.n	80103dc <tcp_receive+0xbec>
          pcb->ooseq = tcp_seg_copy(&inseg);
 80103ce:	4848      	ldr	r0, [pc, #288]	; (80104f0 <tcp_receive+0xd00>)
 80103d0:	f7fd fb0a 	bl	800d9e8 <tcp_seg_copy>
 80103d4:	4602      	mov	r2, r0
 80103d6:	687b      	ldr	r3, [r7, #4]
 80103d8:	675a      	str	r2, [r3, #116]	; 0x74
 80103da:	e16d      	b.n	80106b8 <tcp_receive+0xec8>
#if LWIP_TCP_SACK_OUT
          /* This is the left edge of the lowest possible SACK range.
             It may start before the newly received segment (possibly adjusted below). */
          u32_t sackbeg = TCP_SEQ_LT(seqno, pcb->ooseq->tcphdr->seqno) ? seqno : pcb->ooseq->tcphdr->seqno;
#endif /* LWIP_TCP_SACK_OUT */
          struct tcp_seg *next, *prev = NULL;
 80103dc:	2300      	movs	r3, #0
 80103de:	637b      	str	r3, [r7, #52]	; 0x34
          for (next = pcb->ooseq; next != NULL; next = next->next) {
 80103e0:	687b      	ldr	r3, [r7, #4]
 80103e2:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80103e4:	63bb      	str	r3, [r7, #56]	; 0x38
 80103e6:	e157      	b.n	8010698 <tcp_receive+0xea8>
            if (seqno == next->tcphdr->seqno) {
 80103e8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80103ea:	68db      	ldr	r3, [r3, #12]
 80103ec:	685a      	ldr	r2, [r3, #4]
 80103ee:	4b41      	ldr	r3, [pc, #260]	; (80104f4 <tcp_receive+0xd04>)
 80103f0:	681b      	ldr	r3, [r3, #0]
 80103f2:	429a      	cmp	r2, r3
 80103f4:	d11d      	bne.n	8010432 <tcp_receive+0xc42>
              /* The sequence number of the incoming segment is the
                 same as the sequence number of the segment on
                 ->ooseq. We check the lengths to see which one to
                 discard. */
              if (inseg.len > next->len) {
 80103f6:	4b3e      	ldr	r3, [pc, #248]	; (80104f0 <tcp_receive+0xd00>)
 80103f8:	891a      	ldrh	r2, [r3, #8]
 80103fa:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80103fc:	891b      	ldrh	r3, [r3, #8]
 80103fe:	429a      	cmp	r2, r3
 8010400:	f240 814f 	bls.w	80106a2 <tcp_receive+0xeb2>
                /* The incoming segment is larger than the old
                   segment. We replace some segments with the new
                   one. */
                struct tcp_seg *cseg = tcp_seg_copy(&inseg);
 8010404:	483a      	ldr	r0, [pc, #232]	; (80104f0 <tcp_receive+0xd00>)
 8010406:	f7fd faef 	bl	800d9e8 <tcp_seg_copy>
 801040a:	6178      	str	r0, [r7, #20]
                if (cseg != NULL) {
 801040c:	697b      	ldr	r3, [r7, #20]
 801040e:	2b00      	cmp	r3, #0
 8010410:	f000 8149 	beq.w	80106a6 <tcp_receive+0xeb6>
                  if (prev != NULL) {
 8010414:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8010416:	2b00      	cmp	r3, #0
 8010418:	d003      	beq.n	8010422 <tcp_receive+0xc32>
                    prev->next = cseg;
 801041a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 801041c:	697a      	ldr	r2, [r7, #20]
 801041e:	601a      	str	r2, [r3, #0]
 8010420:	e002      	b.n	8010428 <tcp_receive+0xc38>
                  } else {
                    pcb->ooseq = cseg;
 8010422:	687b      	ldr	r3, [r7, #4]
 8010424:	697a      	ldr	r2, [r7, #20]
 8010426:	675a      	str	r2, [r3, #116]	; 0x74
                  }
                  tcp_oos_insert_segment(cseg, next);
 8010428:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 801042a:	6978      	ldr	r0, [r7, #20]
 801042c:	f7ff f8dc 	bl	800f5e8 <tcp_oos_insert_segment>
                }
                break;
 8010430:	e139      	b.n	80106a6 <tcp_receive+0xeb6>
                   segment was smaller than the old one; in either
                   case, we ditch the incoming segment. */
                break;
              }
            } else {
              if (prev == NULL) {
 8010432:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8010434:	2b00      	cmp	r3, #0
 8010436:	d117      	bne.n	8010468 <tcp_receive+0xc78>
                if (TCP_SEQ_LT(seqno, next->tcphdr->seqno)) {
 8010438:	4b2e      	ldr	r3, [pc, #184]	; (80104f4 <tcp_receive+0xd04>)
 801043a:	681a      	ldr	r2, [r3, #0]
 801043c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801043e:	68db      	ldr	r3, [r3, #12]
 8010440:	685b      	ldr	r3, [r3, #4]
 8010442:	1ad3      	subs	r3, r2, r3
 8010444:	2b00      	cmp	r3, #0
 8010446:	da57      	bge.n	80104f8 <tcp_receive+0xd08>
                  /* The sequence number of the incoming segment is lower
                     than the sequence number of the first segment on the
                     queue. We put the incoming segment first on the
                     queue. */
                  struct tcp_seg *cseg = tcp_seg_copy(&inseg);
 8010448:	4829      	ldr	r0, [pc, #164]	; (80104f0 <tcp_receive+0xd00>)
 801044a:	f7fd facd 	bl	800d9e8 <tcp_seg_copy>
 801044e:	61b8      	str	r0, [r7, #24]
                  if (cseg != NULL) {
 8010450:	69bb      	ldr	r3, [r7, #24]
 8010452:	2b00      	cmp	r3, #0
 8010454:	f000 8129 	beq.w	80106aa <tcp_receive+0xeba>
                    pcb->ooseq = cseg;
 8010458:	687b      	ldr	r3, [r7, #4]
 801045a:	69ba      	ldr	r2, [r7, #24]
 801045c:	675a      	str	r2, [r3, #116]	; 0x74
                    tcp_oos_insert_segment(cseg, next);
 801045e:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8010460:	69b8      	ldr	r0, [r7, #24]
 8010462:	f7ff f8c1 	bl	800f5e8 <tcp_oos_insert_segment>
                  }
                  break;
 8010466:	e120      	b.n	80106aa <tcp_receive+0xeba>
                }
              } else {
                /*if (TCP_SEQ_LT(prev->tcphdr->seqno, seqno) &&
                  TCP_SEQ_LT(seqno, next->tcphdr->seqno)) {*/
                if (TCP_SEQ_BETWEEN(seqno, prev->tcphdr->seqno + 1, next->tcphdr->seqno - 1)) {
 8010468:	4b22      	ldr	r3, [pc, #136]	; (80104f4 <tcp_receive+0xd04>)
 801046a:	681a      	ldr	r2, [r3, #0]
 801046c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 801046e:	68db      	ldr	r3, [r3, #12]
 8010470:	685b      	ldr	r3, [r3, #4]
 8010472:	1ad3      	subs	r3, r2, r3
 8010474:	3b01      	subs	r3, #1
 8010476:	2b00      	cmp	r3, #0
 8010478:	db3e      	blt.n	80104f8 <tcp_receive+0xd08>
 801047a:	4b1e      	ldr	r3, [pc, #120]	; (80104f4 <tcp_receive+0xd04>)
 801047c:	681a      	ldr	r2, [r3, #0]
 801047e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8010480:	68db      	ldr	r3, [r3, #12]
 8010482:	685b      	ldr	r3, [r3, #4]
 8010484:	1ad3      	subs	r3, r2, r3
 8010486:	3301      	adds	r3, #1
 8010488:	2b00      	cmp	r3, #0
 801048a:	dc35      	bgt.n	80104f8 <tcp_receive+0xd08>
                  /* The sequence number of the incoming segment is in
                     between the sequence numbers of the previous and
                     the next segment on ->ooseq. We trim trim the previous
                     segment, delete next segments that included in received segment
                     and trim received, if needed. */
                  struct tcp_seg *cseg = tcp_seg_copy(&inseg);
 801048c:	4818      	ldr	r0, [pc, #96]	; (80104f0 <tcp_receive+0xd00>)
 801048e:	f7fd faab 	bl	800d9e8 <tcp_seg_copy>
 8010492:	61f8      	str	r0, [r7, #28]
                  if (cseg != NULL) {
 8010494:	69fb      	ldr	r3, [r7, #28]
 8010496:	2b00      	cmp	r3, #0
 8010498:	f000 8109 	beq.w	80106ae <tcp_receive+0xebe>
                    if (TCP_SEQ_GT(prev->tcphdr->seqno + prev->len, seqno)) {
 801049c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 801049e:	68db      	ldr	r3, [r3, #12]
 80104a0:	685b      	ldr	r3, [r3, #4]
 80104a2:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80104a4:	8912      	ldrh	r2, [r2, #8]
 80104a6:	441a      	add	r2, r3
 80104a8:	4b12      	ldr	r3, [pc, #72]	; (80104f4 <tcp_receive+0xd04>)
 80104aa:	681b      	ldr	r3, [r3, #0]
 80104ac:	1ad3      	subs	r3, r2, r3
 80104ae:	2b00      	cmp	r3, #0
 80104b0:	dd12      	ble.n	80104d8 <tcp_receive+0xce8>
                      /* We need to trim the prev segment. */
                      prev->len = (u16_t)(seqno - prev->tcphdr->seqno);
 80104b2:	4b10      	ldr	r3, [pc, #64]	; (80104f4 <tcp_receive+0xd04>)
 80104b4:	681b      	ldr	r3, [r3, #0]
 80104b6:	b29a      	uxth	r2, r3
 80104b8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80104ba:	68db      	ldr	r3, [r3, #12]
 80104bc:	685b      	ldr	r3, [r3, #4]
 80104be:	b29b      	uxth	r3, r3
 80104c0:	1ad3      	subs	r3, r2, r3
 80104c2:	b29a      	uxth	r2, r3
 80104c4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80104c6:	811a      	strh	r2, [r3, #8]
                      pbuf_realloc(prev->p, prev->len);
 80104c8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80104ca:	685a      	ldr	r2, [r3, #4]
 80104cc:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80104ce:	891b      	ldrh	r3, [r3, #8]
 80104d0:	4619      	mov	r1, r3
 80104d2:	4610      	mov	r0, r2
 80104d4:	f7fb fbae 	bl	800bc34 <pbuf_realloc>
                    }
                    prev->next = cseg;
 80104d8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80104da:	69fa      	ldr	r2, [r7, #28]
 80104dc:	601a      	str	r2, [r3, #0]
                    tcp_oos_insert_segment(cseg, next);
 80104de:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 80104e0:	69f8      	ldr	r0, [r7, #28]
 80104e2:	f7ff f881 	bl	800f5e8 <tcp_oos_insert_segment>
                  }
                  break;
 80104e6:	e0e2      	b.n	80106ae <tcp_receive+0xebe>
 80104e8:	20008964 	.word	0x20008964
 80104ec:	20008961 	.word	0x20008961
 80104f0:	20008934 	.word	0x20008934
 80104f4:	20008954 	.word	0x20008954
#endif /* LWIP_TCP_SACK_OUT */

              /* We don't use 'prev' below, so let's set it to current 'next'.
                 This way even if we break the loop below, 'prev' will be pointing
                 at the segment right in front of the newly added one. */
              prev = next;
 80104f8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80104fa:	637b      	str	r3, [r7, #52]	; 0x34

              /* If the "next" segment is the last segment on the
                 ooseq queue, we add the incoming segment to the end
                 of the list. */
              if (next->next == NULL &&
 80104fc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80104fe:	681b      	ldr	r3, [r3, #0]
 8010500:	2b00      	cmp	r3, #0
 8010502:	f040 80c6 	bne.w	8010692 <tcp_receive+0xea2>
                  TCP_SEQ_GT(seqno, next->tcphdr->seqno)) {
 8010506:	4b80      	ldr	r3, [pc, #512]	; (8010708 <tcp_receive+0xf18>)
 8010508:	681a      	ldr	r2, [r3, #0]
 801050a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801050c:	68db      	ldr	r3, [r3, #12]
 801050e:	685b      	ldr	r3, [r3, #4]
 8010510:	1ad3      	subs	r3, r2, r3
              if (next->next == NULL &&
 8010512:	2b00      	cmp	r3, #0
 8010514:	f340 80bd 	ble.w	8010692 <tcp_receive+0xea2>
                if (TCPH_FLAGS(next->tcphdr) & TCP_FIN) {
 8010518:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801051a:	68db      	ldr	r3, [r3, #12]
 801051c:	899b      	ldrh	r3, [r3, #12]
 801051e:	b29b      	uxth	r3, r3
 8010520:	4618      	mov	r0, r3
 8010522:	f7f9 feb5 	bl	800a290 <lwip_htons>
 8010526:	4603      	mov	r3, r0
 8010528:	b2db      	uxtb	r3, r3
 801052a:	f003 0301 	and.w	r3, r3, #1
 801052e:	2b00      	cmp	r3, #0
 8010530:	f040 80bf 	bne.w	80106b2 <tcp_receive+0xec2>
                  /* segment "next" already contains all data */
                  break;
                }
                next->next = tcp_seg_copy(&inseg);
 8010534:	4875      	ldr	r0, [pc, #468]	; (801070c <tcp_receive+0xf1c>)
 8010536:	f7fd fa57 	bl	800d9e8 <tcp_seg_copy>
 801053a:	4602      	mov	r2, r0
 801053c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801053e:	601a      	str	r2, [r3, #0]
                if (next->next != NULL) {
 8010540:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8010542:	681b      	ldr	r3, [r3, #0]
 8010544:	2b00      	cmp	r3, #0
 8010546:	f000 80b6 	beq.w	80106b6 <tcp_receive+0xec6>
                  if (TCP_SEQ_GT(next->tcphdr->seqno + next->len, seqno)) {
 801054a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801054c:	68db      	ldr	r3, [r3, #12]
 801054e:	685b      	ldr	r3, [r3, #4]
 8010550:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8010552:	8912      	ldrh	r2, [r2, #8]
 8010554:	441a      	add	r2, r3
 8010556:	4b6c      	ldr	r3, [pc, #432]	; (8010708 <tcp_receive+0xf18>)
 8010558:	681b      	ldr	r3, [r3, #0]
 801055a:	1ad3      	subs	r3, r2, r3
 801055c:	2b00      	cmp	r3, #0
 801055e:	dd12      	ble.n	8010586 <tcp_receive+0xd96>
                    /* We need to trim the last segment. */
                    next->len = (u16_t)(seqno - next->tcphdr->seqno);
 8010560:	4b69      	ldr	r3, [pc, #420]	; (8010708 <tcp_receive+0xf18>)
 8010562:	681b      	ldr	r3, [r3, #0]
 8010564:	b29a      	uxth	r2, r3
 8010566:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8010568:	68db      	ldr	r3, [r3, #12]
 801056a:	685b      	ldr	r3, [r3, #4]
 801056c:	b29b      	uxth	r3, r3
 801056e:	1ad3      	subs	r3, r2, r3
 8010570:	b29a      	uxth	r2, r3
 8010572:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8010574:	811a      	strh	r2, [r3, #8]
                    pbuf_realloc(next->p, next->len);
 8010576:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8010578:	685a      	ldr	r2, [r3, #4]
 801057a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801057c:	891b      	ldrh	r3, [r3, #8]
 801057e:	4619      	mov	r1, r3
 8010580:	4610      	mov	r0, r2
 8010582:	f7fb fb57 	bl	800bc34 <pbuf_realloc>
                  }
                  /* check if the remote side overruns our receive window */
                  if (TCP_SEQ_GT((u32_t)tcplen + seqno, pcb->rcv_nxt + (u32_t)pcb->rcv_wnd)) {
 8010586:	4b62      	ldr	r3, [pc, #392]	; (8010710 <tcp_receive+0xf20>)
 8010588:	881b      	ldrh	r3, [r3, #0]
 801058a:	461a      	mov	r2, r3
 801058c:	4b5e      	ldr	r3, [pc, #376]	; (8010708 <tcp_receive+0xf18>)
 801058e:	681b      	ldr	r3, [r3, #0]
 8010590:	441a      	add	r2, r3
 8010592:	687b      	ldr	r3, [r7, #4]
 8010594:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8010596:	6879      	ldr	r1, [r7, #4]
 8010598:	8d09      	ldrh	r1, [r1, #40]	; 0x28
 801059a:	440b      	add	r3, r1
 801059c:	1ad3      	subs	r3, r2, r3
 801059e:	2b00      	cmp	r3, #0
 80105a0:	f340 8089 	ble.w	80106b6 <tcp_receive+0xec6>
                    LWIP_DEBUGF(TCP_INPUT_DEBUG,
                                ("tcp_receive: other end overran receive window"
                                 "seqno %"U32_F" len %"U16_F" right edge %"U32_F"\n",
                                 seqno, tcplen, pcb->rcv_nxt + pcb->rcv_wnd));
                    if (TCPH_FLAGS(next->next->tcphdr) & TCP_FIN) {
 80105a4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80105a6:	681b      	ldr	r3, [r3, #0]
 80105a8:	68db      	ldr	r3, [r3, #12]
 80105aa:	899b      	ldrh	r3, [r3, #12]
 80105ac:	b29b      	uxth	r3, r3
 80105ae:	4618      	mov	r0, r3
 80105b0:	f7f9 fe6e 	bl	800a290 <lwip_htons>
 80105b4:	4603      	mov	r3, r0
 80105b6:	b2db      	uxtb	r3, r3
 80105b8:	f003 0301 	and.w	r3, r3, #1
 80105bc:	2b00      	cmp	r3, #0
 80105be:	d022      	beq.n	8010606 <tcp_receive+0xe16>
                      /* Must remove the FIN from the header as we're trimming
                       * that byte of sequence-space from the packet */
                      TCPH_FLAGS_SET(next->next->tcphdr, TCPH_FLAGS(next->next->tcphdr) & ~TCP_FIN);
 80105c0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80105c2:	681b      	ldr	r3, [r3, #0]
 80105c4:	68db      	ldr	r3, [r3, #12]
 80105c6:	899b      	ldrh	r3, [r3, #12]
 80105c8:	b29b      	uxth	r3, r3
 80105ca:	b21b      	sxth	r3, r3
 80105cc:	f423 537c 	bic.w	r3, r3, #16128	; 0x3f00
 80105d0:	b21c      	sxth	r4, r3
 80105d2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80105d4:	681b      	ldr	r3, [r3, #0]
 80105d6:	68db      	ldr	r3, [r3, #12]
 80105d8:	899b      	ldrh	r3, [r3, #12]
 80105da:	b29b      	uxth	r3, r3
 80105dc:	4618      	mov	r0, r3
 80105de:	f7f9 fe57 	bl	800a290 <lwip_htons>
 80105e2:	4603      	mov	r3, r0
 80105e4:	b2db      	uxtb	r3, r3
 80105e6:	b29b      	uxth	r3, r3
 80105e8:	f003 033e 	and.w	r3, r3, #62	; 0x3e
 80105ec:	b29b      	uxth	r3, r3
 80105ee:	4618      	mov	r0, r3
 80105f0:	f7f9 fe4e 	bl	800a290 <lwip_htons>
 80105f4:	4603      	mov	r3, r0
 80105f6:	b21b      	sxth	r3, r3
 80105f8:	4323      	orrs	r3, r4
 80105fa:	b21a      	sxth	r2, r3
 80105fc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80105fe:	681b      	ldr	r3, [r3, #0]
 8010600:	68db      	ldr	r3, [r3, #12]
 8010602:	b292      	uxth	r2, r2
 8010604:	819a      	strh	r2, [r3, #12]
                    }
                    /* Adjust length of segment to fit in the window. */
                    next->next->len = (u16_t)(pcb->rcv_nxt + pcb->rcv_wnd - seqno);
 8010606:	687b      	ldr	r3, [r7, #4]
 8010608:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801060a:	b29a      	uxth	r2, r3
 801060c:	687b      	ldr	r3, [r7, #4]
 801060e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8010610:	4413      	add	r3, r2
 8010612:	b299      	uxth	r1, r3
 8010614:	4b3c      	ldr	r3, [pc, #240]	; (8010708 <tcp_receive+0xf18>)
 8010616:	681b      	ldr	r3, [r3, #0]
 8010618:	b29a      	uxth	r2, r3
 801061a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801061c:	681b      	ldr	r3, [r3, #0]
 801061e:	1a8a      	subs	r2, r1, r2
 8010620:	b292      	uxth	r2, r2
 8010622:	811a      	strh	r2, [r3, #8]
                    pbuf_realloc(next->next->p, next->next->len);
 8010624:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8010626:	681b      	ldr	r3, [r3, #0]
 8010628:	685a      	ldr	r2, [r3, #4]
 801062a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801062c:	681b      	ldr	r3, [r3, #0]
 801062e:	891b      	ldrh	r3, [r3, #8]
 8010630:	4619      	mov	r1, r3
 8010632:	4610      	mov	r0, r2
 8010634:	f7fb fafe 	bl	800bc34 <pbuf_realloc>
                    tcplen = TCP_TCPLEN(next->next);
 8010638:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801063a:	681b      	ldr	r3, [r3, #0]
 801063c:	891c      	ldrh	r4, [r3, #8]
 801063e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8010640:	681b      	ldr	r3, [r3, #0]
 8010642:	68db      	ldr	r3, [r3, #12]
 8010644:	899b      	ldrh	r3, [r3, #12]
 8010646:	b29b      	uxth	r3, r3
 8010648:	4618      	mov	r0, r3
 801064a:	f7f9 fe21 	bl	800a290 <lwip_htons>
 801064e:	4603      	mov	r3, r0
 8010650:	b2db      	uxtb	r3, r3
 8010652:	f003 0303 	and.w	r3, r3, #3
 8010656:	2b00      	cmp	r3, #0
 8010658:	d001      	beq.n	801065e <tcp_receive+0xe6e>
 801065a:	2301      	movs	r3, #1
 801065c:	e000      	b.n	8010660 <tcp_receive+0xe70>
 801065e:	2300      	movs	r3, #0
 8010660:	4423      	add	r3, r4
 8010662:	b29a      	uxth	r2, r3
 8010664:	4b2a      	ldr	r3, [pc, #168]	; (8010710 <tcp_receive+0xf20>)
 8010666:	801a      	strh	r2, [r3, #0]
                    LWIP_ASSERT("tcp_receive: segment not trimmed correctly to rcv_wnd\n",
 8010668:	4b29      	ldr	r3, [pc, #164]	; (8010710 <tcp_receive+0xf20>)
 801066a:	881b      	ldrh	r3, [r3, #0]
 801066c:	461a      	mov	r2, r3
 801066e:	4b26      	ldr	r3, [pc, #152]	; (8010708 <tcp_receive+0xf18>)
 8010670:	681b      	ldr	r3, [r3, #0]
 8010672:	441a      	add	r2, r3
 8010674:	687b      	ldr	r3, [r7, #4]
 8010676:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8010678:	6879      	ldr	r1, [r7, #4]
 801067a:	8d09      	ldrh	r1, [r1, #40]	; 0x28
 801067c:	440b      	add	r3, r1
 801067e:	429a      	cmp	r2, r3
 8010680:	d019      	beq.n	80106b6 <tcp_receive+0xec6>
 8010682:	4b24      	ldr	r3, [pc, #144]	; (8010714 <tcp_receive+0xf24>)
 8010684:	f44f 62df 	mov.w	r2, #1784	; 0x6f8
 8010688:	4923      	ldr	r1, [pc, #140]	; (8010718 <tcp_receive+0xf28>)
 801068a:	4824      	ldr	r0, [pc, #144]	; (801071c <tcp_receive+0xf2c>)
 801068c:	f007 fefc 	bl	8018488 <iprintf>
                                (seqno + tcplen) == (pcb->rcv_nxt + pcb->rcv_wnd));
                  }
                }
                break;
 8010690:	e011      	b.n	80106b6 <tcp_receive+0xec6>
          for (next = pcb->ooseq; next != NULL; next = next->next) {
 8010692:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8010694:	681b      	ldr	r3, [r3, #0]
 8010696:	63bb      	str	r3, [r7, #56]	; 0x38
 8010698:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801069a:	2b00      	cmp	r3, #0
 801069c:	f47f aea4 	bne.w	80103e8 <tcp_receive+0xbf8>
 80106a0:	e00a      	b.n	80106b8 <tcp_receive+0xec8>
                break;
 80106a2:	bf00      	nop
 80106a4:	e008      	b.n	80106b8 <tcp_receive+0xec8>
                break;
 80106a6:	bf00      	nop
 80106a8:	e006      	b.n	80106b8 <tcp_receive+0xec8>
                  break;
 80106aa:	bf00      	nop
 80106ac:	e004      	b.n	80106b8 <tcp_receive+0xec8>
                  break;
 80106ae:	bf00      	nop
 80106b0:	e002      	b.n	80106b8 <tcp_receive+0xec8>
                  break;
 80106b2:	bf00      	nop
 80106b4:	e000      	b.n	80106b8 <tcp_receive+0xec8>
                break;
 80106b6:	bf00      	nop
#endif /* TCP_OOSEQ_BYTES_LIMIT || TCP_OOSEQ_PBUFS_LIMIT */
#endif /* TCP_QUEUE_OOSEQ */

        /* We send the ACK packet after we've (potentially) dealt with SACKs,
           so they can be included in the acknowledgment. */
        tcp_send_empty_ack(pcb);
 80106b8:	6878      	ldr	r0, [r7, #4]
 80106ba:	f001 fe8b 	bl	80123d4 <tcp_send_empty_ack>
      if (pcb->rcv_nxt == seqno) {
 80106be:	e003      	b.n	80106c8 <tcp_receive+0xed8>
      }
    } else {
      /* The incoming segment is not within the window. */
      tcp_send_empty_ack(pcb);
 80106c0:	6878      	ldr	r0, [r7, #4]
 80106c2:	f001 fe87 	bl	80123d4 <tcp_send_empty_ack>
    if (TCP_SEQ_BETWEEN(seqno, pcb->rcv_nxt,
 80106c6:	e01a      	b.n	80106fe <tcp_receive+0xf0e>
 80106c8:	e019      	b.n	80106fe <tcp_receive+0xf0e>
    }
  } else {
    /* Segments with length 0 is taken care of here. Segments that
       fall out of the window are ACKed. */
    if (!TCP_SEQ_BETWEEN(seqno, pcb->rcv_nxt, pcb->rcv_nxt + pcb->rcv_wnd - 1)) {
 80106ca:	4b0f      	ldr	r3, [pc, #60]	; (8010708 <tcp_receive+0xf18>)
 80106cc:	681a      	ldr	r2, [r3, #0]
 80106ce:	687b      	ldr	r3, [r7, #4]
 80106d0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80106d2:	1ad3      	subs	r3, r2, r3
 80106d4:	2b00      	cmp	r3, #0
 80106d6:	db0a      	blt.n	80106ee <tcp_receive+0xefe>
 80106d8:	4b0b      	ldr	r3, [pc, #44]	; (8010708 <tcp_receive+0xf18>)
 80106da:	681a      	ldr	r2, [r3, #0]
 80106dc:	687b      	ldr	r3, [r7, #4]
 80106de:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80106e0:	6879      	ldr	r1, [r7, #4]
 80106e2:	8d09      	ldrh	r1, [r1, #40]	; 0x28
 80106e4:	440b      	add	r3, r1
 80106e6:	1ad3      	subs	r3, r2, r3
 80106e8:	3301      	adds	r3, #1
 80106ea:	2b00      	cmp	r3, #0
 80106ec:	dd07      	ble.n	80106fe <tcp_receive+0xf0e>
      tcp_ack_now(pcb);
 80106ee:	687b      	ldr	r3, [r7, #4]
 80106f0:	8b5b      	ldrh	r3, [r3, #26]
 80106f2:	f043 0302 	orr.w	r3, r3, #2
 80106f6:	b29a      	uxth	r2, r3
 80106f8:	687b      	ldr	r3, [r7, #4]
 80106fa:	835a      	strh	r2, [r3, #26]
    }
  }
}
 80106fc:	e7ff      	b.n	80106fe <tcp_receive+0xf0e>
 80106fe:	bf00      	nop
 8010700:	3750      	adds	r7, #80	; 0x50
 8010702:	46bd      	mov	sp, r7
 8010704:	bdb0      	pop	{r4, r5, r7, pc}
 8010706:	bf00      	nop
 8010708:	20008954 	.word	0x20008954
 801070c:	20008934 	.word	0x20008934
 8010710:	2000895e 	.word	0x2000895e
 8010714:	0801a60c 	.word	0x0801a60c
 8010718:	0801a9b4 	.word	0x0801a9b4
 801071c:	0801a658 	.word	0x0801a658

08010720 <tcp_get_next_optbyte>:

static u8_t
tcp_get_next_optbyte(void)
{
 8010720:	b480      	push	{r7}
 8010722:	b083      	sub	sp, #12
 8010724:	af00      	add	r7, sp, #0
  u16_t optidx = tcp_optidx++;
 8010726:	4b15      	ldr	r3, [pc, #84]	; (801077c <tcp_get_next_optbyte+0x5c>)
 8010728:	881b      	ldrh	r3, [r3, #0]
 801072a:	1c5a      	adds	r2, r3, #1
 801072c:	b291      	uxth	r1, r2
 801072e:	4a13      	ldr	r2, [pc, #76]	; (801077c <tcp_get_next_optbyte+0x5c>)
 8010730:	8011      	strh	r1, [r2, #0]
 8010732:	80fb      	strh	r3, [r7, #6]
  if ((tcphdr_opt2 == NULL) || (optidx < tcphdr_opt1len)) {
 8010734:	4b12      	ldr	r3, [pc, #72]	; (8010780 <tcp_get_next_optbyte+0x60>)
 8010736:	681b      	ldr	r3, [r3, #0]
 8010738:	2b00      	cmp	r3, #0
 801073a:	d004      	beq.n	8010746 <tcp_get_next_optbyte+0x26>
 801073c:	4b11      	ldr	r3, [pc, #68]	; (8010784 <tcp_get_next_optbyte+0x64>)
 801073e:	881b      	ldrh	r3, [r3, #0]
 8010740:	88fa      	ldrh	r2, [r7, #6]
 8010742:	429a      	cmp	r2, r3
 8010744:	d208      	bcs.n	8010758 <tcp_get_next_optbyte+0x38>
    u8_t *opts = (u8_t *)tcphdr + TCP_HLEN;
 8010746:	4b10      	ldr	r3, [pc, #64]	; (8010788 <tcp_get_next_optbyte+0x68>)
 8010748:	681b      	ldr	r3, [r3, #0]
 801074a:	3314      	adds	r3, #20
 801074c:	603b      	str	r3, [r7, #0]
    return opts[optidx];
 801074e:	88fb      	ldrh	r3, [r7, #6]
 8010750:	683a      	ldr	r2, [r7, #0]
 8010752:	4413      	add	r3, r2
 8010754:	781b      	ldrb	r3, [r3, #0]
 8010756:	e00b      	b.n	8010770 <tcp_get_next_optbyte+0x50>
  } else {
    u8_t idx = (u8_t)(optidx - tcphdr_opt1len);
 8010758:	88fb      	ldrh	r3, [r7, #6]
 801075a:	b2da      	uxtb	r2, r3
 801075c:	4b09      	ldr	r3, [pc, #36]	; (8010784 <tcp_get_next_optbyte+0x64>)
 801075e:	881b      	ldrh	r3, [r3, #0]
 8010760:	b2db      	uxtb	r3, r3
 8010762:	1ad3      	subs	r3, r2, r3
 8010764:	717b      	strb	r3, [r7, #5]
    return tcphdr_opt2[idx];
 8010766:	4b06      	ldr	r3, [pc, #24]	; (8010780 <tcp_get_next_optbyte+0x60>)
 8010768:	681a      	ldr	r2, [r3, #0]
 801076a:	797b      	ldrb	r3, [r7, #5]
 801076c:	4413      	add	r3, r2
 801076e:	781b      	ldrb	r3, [r3, #0]
  }
}
 8010770:	4618      	mov	r0, r3
 8010772:	370c      	adds	r7, #12
 8010774:	46bd      	mov	sp, r7
 8010776:	f85d 7b04 	ldr.w	r7, [sp], #4
 801077a:	4770      	bx	lr
 801077c:	20008950 	.word	0x20008950
 8010780:	2000894c 	.word	0x2000894c
 8010784:	2000894a 	.word	0x2000894a
 8010788:	20008944 	.word	0x20008944

0801078c <tcp_parseopt>:
 *
 * @param pcb the tcp_pcb for which a segment arrived
 */
static void
tcp_parseopt(struct tcp_pcb *pcb)
{
 801078c:	b580      	push	{r7, lr}
 801078e:	b084      	sub	sp, #16
 8010790:	af00      	add	r7, sp, #0
 8010792:	6078      	str	r0, [r7, #4]
  u16_t mss;
#if LWIP_TCP_TIMESTAMPS
  u32_t tsval;
#endif

  LWIP_ASSERT("tcp_parseopt: invalid pcb", pcb != NULL);
 8010794:	687b      	ldr	r3, [r7, #4]
 8010796:	2b00      	cmp	r3, #0
 8010798:	d106      	bne.n	80107a8 <tcp_parseopt+0x1c>
 801079a:	4b32      	ldr	r3, [pc, #200]	; (8010864 <tcp_parseopt+0xd8>)
 801079c:	f240 727d 	movw	r2, #1917	; 0x77d
 80107a0:	4931      	ldr	r1, [pc, #196]	; (8010868 <tcp_parseopt+0xdc>)
 80107a2:	4832      	ldr	r0, [pc, #200]	; (801086c <tcp_parseopt+0xe0>)
 80107a4:	f007 fe70 	bl	8018488 <iprintf>

  /* Parse the TCP MSS option, if present. */
  if (tcphdr_optlen != 0) {
 80107a8:	4b31      	ldr	r3, [pc, #196]	; (8010870 <tcp_parseopt+0xe4>)
 80107aa:	881b      	ldrh	r3, [r3, #0]
 80107ac:	2b00      	cmp	r3, #0
 80107ae:	d055      	beq.n	801085c <tcp_parseopt+0xd0>
    for (tcp_optidx = 0; tcp_optidx < tcphdr_optlen; ) {
 80107b0:	4b30      	ldr	r3, [pc, #192]	; (8010874 <tcp_parseopt+0xe8>)
 80107b2:	2200      	movs	r2, #0
 80107b4:	801a      	strh	r2, [r3, #0]
 80107b6:	e045      	b.n	8010844 <tcp_parseopt+0xb8>
      u8_t opt = tcp_get_next_optbyte();
 80107b8:	f7ff ffb2 	bl	8010720 <tcp_get_next_optbyte>
 80107bc:	4603      	mov	r3, r0
 80107be:	73fb      	strb	r3, [r7, #15]
      switch (opt) {
 80107c0:	7bfb      	ldrb	r3, [r7, #15]
 80107c2:	2b02      	cmp	r3, #2
 80107c4:	d006      	beq.n	80107d4 <tcp_parseopt+0x48>
 80107c6:	2b02      	cmp	r3, #2
 80107c8:	dc2b      	bgt.n	8010822 <tcp_parseopt+0x96>
 80107ca:	2b00      	cmp	r3, #0
 80107cc:	d041      	beq.n	8010852 <tcp_parseopt+0xc6>
 80107ce:	2b01      	cmp	r3, #1
 80107d0:	d127      	bne.n	8010822 <tcp_parseopt+0x96>
          LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_parseopt: EOL\n"));
          return;
        case LWIP_TCP_OPT_NOP:
          /* NOP option. */
          LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_parseopt: NOP\n"));
          break;
 80107d2:	e037      	b.n	8010844 <tcp_parseopt+0xb8>
        case LWIP_TCP_OPT_MSS:
          LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_parseopt: MSS\n"));
          if (tcp_get_next_optbyte() != LWIP_TCP_OPT_LEN_MSS || (tcp_optidx - 2 + LWIP_TCP_OPT_LEN_MSS) > tcphdr_optlen) {
 80107d4:	f7ff ffa4 	bl	8010720 <tcp_get_next_optbyte>
 80107d8:	4603      	mov	r3, r0
 80107da:	2b04      	cmp	r3, #4
 80107dc:	d13b      	bne.n	8010856 <tcp_parseopt+0xca>
 80107de:	4b25      	ldr	r3, [pc, #148]	; (8010874 <tcp_parseopt+0xe8>)
 80107e0:	881b      	ldrh	r3, [r3, #0]
 80107e2:	3301      	adds	r3, #1
 80107e4:	4a22      	ldr	r2, [pc, #136]	; (8010870 <tcp_parseopt+0xe4>)
 80107e6:	8812      	ldrh	r2, [r2, #0]
 80107e8:	4293      	cmp	r3, r2
 80107ea:	da34      	bge.n	8010856 <tcp_parseopt+0xca>
            /* Bad length */
            LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_parseopt: bad length\n"));
            return;
          }
          /* An MSS option with the right option length. */
          mss = (u16_t)(tcp_get_next_optbyte() << 8);
 80107ec:	f7ff ff98 	bl	8010720 <tcp_get_next_optbyte>
 80107f0:	4603      	mov	r3, r0
 80107f2:	b29b      	uxth	r3, r3
 80107f4:	021b      	lsls	r3, r3, #8
 80107f6:	81bb      	strh	r3, [r7, #12]
          mss |= tcp_get_next_optbyte();
 80107f8:	f7ff ff92 	bl	8010720 <tcp_get_next_optbyte>
 80107fc:	4603      	mov	r3, r0
 80107fe:	b29a      	uxth	r2, r3
 8010800:	89bb      	ldrh	r3, [r7, #12]
 8010802:	4313      	orrs	r3, r2
 8010804:	81bb      	strh	r3, [r7, #12]
          /* Limit the mss to the configured TCP_MSS and prevent division by zero */
          pcb->mss = ((mss > TCP_MSS) || (mss == 0)) ? TCP_MSS : mss;
 8010806:	89bb      	ldrh	r3, [r7, #12]
 8010808:	f5b3 7f06 	cmp.w	r3, #536	; 0x218
 801080c:	d804      	bhi.n	8010818 <tcp_parseopt+0x8c>
 801080e:	89bb      	ldrh	r3, [r7, #12]
 8010810:	2b00      	cmp	r3, #0
 8010812:	d001      	beq.n	8010818 <tcp_parseopt+0x8c>
 8010814:	89ba      	ldrh	r2, [r7, #12]
 8010816:	e001      	b.n	801081c <tcp_parseopt+0x90>
 8010818:	f44f 7206 	mov.w	r2, #536	; 0x218
 801081c:	687b      	ldr	r3, [r7, #4]
 801081e:	865a      	strh	r2, [r3, #50]	; 0x32
          break;
 8010820:	e010      	b.n	8010844 <tcp_parseopt+0xb8>
          }
          break;
#endif /* LWIP_TCP_SACK_OUT */
        default:
          LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_parseopt: other\n"));
          data = tcp_get_next_optbyte();
 8010822:	f7ff ff7d 	bl	8010720 <tcp_get_next_optbyte>
 8010826:	4603      	mov	r3, r0
 8010828:	72fb      	strb	r3, [r7, #11]
          if (data < 2) {
 801082a:	7afb      	ldrb	r3, [r7, #11]
 801082c:	2b01      	cmp	r3, #1
 801082e:	d914      	bls.n	801085a <tcp_parseopt+0xce>
               and we don't process them further. */
            return;
          }
          /* All other options have a length field, so that we easily
             can skip past them. */
          tcp_optidx += data - 2;
 8010830:	7afb      	ldrb	r3, [r7, #11]
 8010832:	b29a      	uxth	r2, r3
 8010834:	4b0f      	ldr	r3, [pc, #60]	; (8010874 <tcp_parseopt+0xe8>)
 8010836:	881b      	ldrh	r3, [r3, #0]
 8010838:	4413      	add	r3, r2
 801083a:	b29b      	uxth	r3, r3
 801083c:	3b02      	subs	r3, #2
 801083e:	b29a      	uxth	r2, r3
 8010840:	4b0c      	ldr	r3, [pc, #48]	; (8010874 <tcp_parseopt+0xe8>)
 8010842:	801a      	strh	r2, [r3, #0]
    for (tcp_optidx = 0; tcp_optidx < tcphdr_optlen; ) {
 8010844:	4b0b      	ldr	r3, [pc, #44]	; (8010874 <tcp_parseopt+0xe8>)
 8010846:	881a      	ldrh	r2, [r3, #0]
 8010848:	4b09      	ldr	r3, [pc, #36]	; (8010870 <tcp_parseopt+0xe4>)
 801084a:	881b      	ldrh	r3, [r3, #0]
 801084c:	429a      	cmp	r2, r3
 801084e:	d3b3      	bcc.n	80107b8 <tcp_parseopt+0x2c>
 8010850:	e004      	b.n	801085c <tcp_parseopt+0xd0>
          return;
 8010852:	bf00      	nop
 8010854:	e002      	b.n	801085c <tcp_parseopt+0xd0>
            return;
 8010856:	bf00      	nop
 8010858:	e000      	b.n	801085c <tcp_parseopt+0xd0>
            return;
 801085a:	bf00      	nop
      }
    }
  }
}
 801085c:	3710      	adds	r7, #16
 801085e:	46bd      	mov	sp, r7
 8010860:	bd80      	pop	{r7, pc}
 8010862:	bf00      	nop
 8010864:	0801a60c 	.word	0x0801a60c
 8010868:	0801aa70 	.word	0x0801aa70
 801086c:	0801a658 	.word	0x0801a658
 8010870:	20008948 	.word	0x20008948
 8010874:	20008950 	.word	0x20008950

08010878 <tcp_trigger_input_pcb_close>:

void
tcp_trigger_input_pcb_close(void)
{
 8010878:	b480      	push	{r7}
 801087a:	af00      	add	r7, sp, #0
  recv_flags |= TF_CLOSED;
 801087c:	4b05      	ldr	r3, [pc, #20]	; (8010894 <tcp_trigger_input_pcb_close+0x1c>)
 801087e:	781b      	ldrb	r3, [r3, #0]
 8010880:	f043 0310 	orr.w	r3, r3, #16
 8010884:	b2da      	uxtb	r2, r3
 8010886:	4b03      	ldr	r3, [pc, #12]	; (8010894 <tcp_trigger_input_pcb_close+0x1c>)
 8010888:	701a      	strb	r2, [r3, #0]
}
 801088a:	bf00      	nop
 801088c:	46bd      	mov	sp, r7
 801088e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010892:	4770      	bx	lr
 8010894:	20008961 	.word	0x20008961

08010898 <tcp_route>:
static err_t tcp_output_segment(struct tcp_seg *seg, struct tcp_pcb *pcb, struct netif *netif);

/* tcp_route: common code that returns a fixed bound netif or calls ip_route */
static struct netif *
tcp_route(const struct tcp_pcb *pcb, const ip_addr_t *src, const ip_addr_t *dst)
{
 8010898:	b580      	push	{r7, lr}
 801089a:	b084      	sub	sp, #16
 801089c:	af00      	add	r7, sp, #0
 801089e:	60f8      	str	r0, [r7, #12]
 80108a0:	60b9      	str	r1, [r7, #8]
 80108a2:	607a      	str	r2, [r7, #4]
  LWIP_UNUSED_ARG(src); /* in case IPv4-only and source-based routing is disabled */

  if ((pcb != NULL) && (pcb->netif_idx != NETIF_NO_INDEX)) {
 80108a4:	68fb      	ldr	r3, [r7, #12]
 80108a6:	2b00      	cmp	r3, #0
 80108a8:	d00a      	beq.n	80108c0 <tcp_route+0x28>
 80108aa:	68fb      	ldr	r3, [r7, #12]
 80108ac:	7a1b      	ldrb	r3, [r3, #8]
 80108ae:	2b00      	cmp	r3, #0
 80108b0:	d006      	beq.n	80108c0 <tcp_route+0x28>
    return netif_get_by_index(pcb->netif_idx);
 80108b2:	68fb      	ldr	r3, [r7, #12]
 80108b4:	7a1b      	ldrb	r3, [r3, #8]
 80108b6:	4618      	mov	r0, r3
 80108b8:	f7fa ffe2 	bl	800b880 <netif_get_by_index>
 80108bc:	4603      	mov	r3, r0
 80108be:	e003      	b.n	80108c8 <tcp_route+0x30>
  } else {
    return ip_route(src, dst);
 80108c0:	6878      	ldr	r0, [r7, #4]
 80108c2:	f005 fd19 	bl	80162f8 <ip4_route>
 80108c6:	4603      	mov	r3, r0
  }
}
 80108c8:	4618      	mov	r0, r3
 80108ca:	3710      	adds	r7, #16
 80108cc:	46bd      	mov	sp, r7
 80108ce:	bd80      	pop	{r7, pc}

080108d0 <tcp_create_segment>:
 * The TCP header is filled in except ackno and wnd.
 * p is freed on failure.
 */
static struct tcp_seg *
tcp_create_segment(const struct tcp_pcb *pcb, struct pbuf *p, u8_t hdrflags, u32_t seqno, u8_t optflags)
{
 80108d0:	b590      	push	{r4, r7, lr}
 80108d2:	b087      	sub	sp, #28
 80108d4:	af00      	add	r7, sp, #0
 80108d6:	60f8      	str	r0, [r7, #12]
 80108d8:	60b9      	str	r1, [r7, #8]
 80108da:	603b      	str	r3, [r7, #0]
 80108dc:	4613      	mov	r3, r2
 80108de:	71fb      	strb	r3, [r7, #7]
  struct tcp_seg *seg;
  u8_t optlen;

  LWIP_ASSERT("tcp_create_segment: invalid pcb", pcb != NULL);
 80108e0:	68fb      	ldr	r3, [r7, #12]
 80108e2:	2b00      	cmp	r3, #0
 80108e4:	d105      	bne.n	80108f2 <tcp_create_segment+0x22>
 80108e6:	4b44      	ldr	r3, [pc, #272]	; (80109f8 <tcp_create_segment+0x128>)
 80108e8:	22a3      	movs	r2, #163	; 0xa3
 80108ea:	4944      	ldr	r1, [pc, #272]	; (80109fc <tcp_create_segment+0x12c>)
 80108ec:	4844      	ldr	r0, [pc, #272]	; (8010a00 <tcp_create_segment+0x130>)
 80108ee:	f007 fdcb 	bl	8018488 <iprintf>
  LWIP_ASSERT("tcp_create_segment: invalid pbuf", p != NULL);
 80108f2:	68bb      	ldr	r3, [r7, #8]
 80108f4:	2b00      	cmp	r3, #0
 80108f6:	d105      	bne.n	8010904 <tcp_create_segment+0x34>
 80108f8:	4b3f      	ldr	r3, [pc, #252]	; (80109f8 <tcp_create_segment+0x128>)
 80108fa:	22a4      	movs	r2, #164	; 0xa4
 80108fc:	4941      	ldr	r1, [pc, #260]	; (8010a04 <tcp_create_segment+0x134>)
 80108fe:	4840      	ldr	r0, [pc, #256]	; (8010a00 <tcp_create_segment+0x130>)
 8010900:	f007 fdc2 	bl	8018488 <iprintf>

  optlen = LWIP_TCP_OPT_LENGTH_SEGMENT(optflags, pcb);
 8010904:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 8010908:	009b      	lsls	r3, r3, #2
 801090a:	b2db      	uxtb	r3, r3
 801090c:	f003 0304 	and.w	r3, r3, #4
 8010910:	75fb      	strb	r3, [r7, #23]

  if ((seg = (struct tcp_seg *)memp_malloc(MEMP_TCP_SEG)) == NULL) {
 8010912:	2003      	movs	r0, #3
 8010914:	f7fa fc22 	bl	800b15c <memp_malloc>
 8010918:	6138      	str	r0, [r7, #16]
 801091a:	693b      	ldr	r3, [r7, #16]
 801091c:	2b00      	cmp	r3, #0
 801091e:	d104      	bne.n	801092a <tcp_create_segment+0x5a>
    LWIP_DEBUGF(TCP_OUTPUT_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("tcp_create_segment: no memory.\n"));
    pbuf_free(p);
 8010920:	68b8      	ldr	r0, [r7, #8]
 8010922:	f7fb fb0d 	bl	800bf40 <pbuf_free>
    return NULL;
 8010926:	2300      	movs	r3, #0
 8010928:	e061      	b.n	80109ee <tcp_create_segment+0x11e>
  }
  seg->flags = optflags;
 801092a:	693b      	ldr	r3, [r7, #16]
 801092c:	f897 2028 	ldrb.w	r2, [r7, #40]	; 0x28
 8010930:	729a      	strb	r2, [r3, #10]
  seg->next = NULL;
 8010932:	693b      	ldr	r3, [r7, #16]
 8010934:	2200      	movs	r2, #0
 8010936:	601a      	str	r2, [r3, #0]
  seg->p = p;
 8010938:	693b      	ldr	r3, [r7, #16]
 801093a:	68ba      	ldr	r2, [r7, #8]
 801093c:	605a      	str	r2, [r3, #4]
  LWIP_ASSERT("p->tot_len >= optlen", p->tot_len >= optlen);
 801093e:	68bb      	ldr	r3, [r7, #8]
 8010940:	891a      	ldrh	r2, [r3, #8]
 8010942:	7dfb      	ldrb	r3, [r7, #23]
 8010944:	b29b      	uxth	r3, r3
 8010946:	429a      	cmp	r2, r3
 8010948:	d205      	bcs.n	8010956 <tcp_create_segment+0x86>
 801094a:	4b2b      	ldr	r3, [pc, #172]	; (80109f8 <tcp_create_segment+0x128>)
 801094c:	22b0      	movs	r2, #176	; 0xb0
 801094e:	492e      	ldr	r1, [pc, #184]	; (8010a08 <tcp_create_segment+0x138>)
 8010950:	482b      	ldr	r0, [pc, #172]	; (8010a00 <tcp_create_segment+0x130>)
 8010952:	f007 fd99 	bl	8018488 <iprintf>
  seg->len = p->tot_len - optlen;
 8010956:	68bb      	ldr	r3, [r7, #8]
 8010958:	891a      	ldrh	r2, [r3, #8]
 801095a:	7dfb      	ldrb	r3, [r7, #23]
 801095c:	b29b      	uxth	r3, r3
 801095e:	1ad3      	subs	r3, r2, r3
 8010960:	b29a      	uxth	r2, r3
 8010962:	693b      	ldr	r3, [r7, #16]
 8010964:	811a      	strh	r2, [r3, #8]
  LWIP_ASSERT("invalid optflags passed: TF_SEG_DATA_CHECKSUMMED",
              (optflags & TF_SEG_DATA_CHECKSUMMED) == 0);
#endif /* TCP_CHECKSUM_ON_COPY */

  /* build TCP header */
  if (pbuf_add_header(p, TCP_HLEN)) {
 8010966:	2114      	movs	r1, #20
 8010968:	68b8      	ldr	r0, [r7, #8]
 801096a:	f7fb fa53 	bl	800be14 <pbuf_add_header>
 801096e:	4603      	mov	r3, r0
 8010970:	2b00      	cmp	r3, #0
 8010972:	d004      	beq.n	801097e <tcp_create_segment+0xae>
    LWIP_DEBUGF(TCP_OUTPUT_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("tcp_create_segment: no room for TCP header in pbuf.\n"));
    TCP_STATS_INC(tcp.err);
    tcp_seg_free(seg);
 8010974:	6938      	ldr	r0, [r7, #16]
 8010976:	f7fd f81e 	bl	800d9b6 <tcp_seg_free>
    return NULL;
 801097a:	2300      	movs	r3, #0
 801097c:	e037      	b.n	80109ee <tcp_create_segment+0x11e>
  }
  seg->tcphdr = (struct tcp_hdr *)seg->p->payload;
 801097e:	693b      	ldr	r3, [r7, #16]
 8010980:	685b      	ldr	r3, [r3, #4]
 8010982:	685a      	ldr	r2, [r3, #4]
 8010984:	693b      	ldr	r3, [r7, #16]
 8010986:	60da      	str	r2, [r3, #12]
  seg->tcphdr->src = lwip_htons(pcb->local_port);
 8010988:	68fb      	ldr	r3, [r7, #12]
 801098a:	8ada      	ldrh	r2, [r3, #22]
 801098c:	693b      	ldr	r3, [r7, #16]
 801098e:	68dc      	ldr	r4, [r3, #12]
 8010990:	4610      	mov	r0, r2
 8010992:	f7f9 fc7d 	bl	800a290 <lwip_htons>
 8010996:	4603      	mov	r3, r0
 8010998:	8023      	strh	r3, [r4, #0]
  seg->tcphdr->dest = lwip_htons(pcb->remote_port);
 801099a:	68fb      	ldr	r3, [r7, #12]
 801099c:	8b1a      	ldrh	r2, [r3, #24]
 801099e:	693b      	ldr	r3, [r7, #16]
 80109a0:	68dc      	ldr	r4, [r3, #12]
 80109a2:	4610      	mov	r0, r2
 80109a4:	f7f9 fc74 	bl	800a290 <lwip_htons>
 80109a8:	4603      	mov	r3, r0
 80109aa:	8063      	strh	r3, [r4, #2]
  seg->tcphdr->seqno = lwip_htonl(seqno);
 80109ac:	693b      	ldr	r3, [r7, #16]
 80109ae:	68dc      	ldr	r4, [r3, #12]
 80109b0:	6838      	ldr	r0, [r7, #0]
 80109b2:	f7f9 fc82 	bl	800a2ba <lwip_htonl>
 80109b6:	4603      	mov	r3, r0
 80109b8:	6063      	str	r3, [r4, #4]
  /* ackno is set in tcp_output */
  TCPH_HDRLEN_FLAGS_SET(seg->tcphdr, (5 + optlen / 4), hdrflags);
 80109ba:	7dfb      	ldrb	r3, [r7, #23]
 80109bc:	089b      	lsrs	r3, r3, #2
 80109be:	b2db      	uxtb	r3, r3
 80109c0:	b29b      	uxth	r3, r3
 80109c2:	3305      	adds	r3, #5
 80109c4:	b29b      	uxth	r3, r3
 80109c6:	031b      	lsls	r3, r3, #12
 80109c8:	b29a      	uxth	r2, r3
 80109ca:	79fb      	ldrb	r3, [r7, #7]
 80109cc:	b29b      	uxth	r3, r3
 80109ce:	4313      	orrs	r3, r2
 80109d0:	b29a      	uxth	r2, r3
 80109d2:	693b      	ldr	r3, [r7, #16]
 80109d4:	68dc      	ldr	r4, [r3, #12]
 80109d6:	4610      	mov	r0, r2
 80109d8:	f7f9 fc5a 	bl	800a290 <lwip_htons>
 80109dc:	4603      	mov	r3, r0
 80109de:	81a3      	strh	r3, [r4, #12]
  /* wnd and chksum are set in tcp_output */
  seg->tcphdr->urgp = 0;
 80109e0:	693b      	ldr	r3, [r7, #16]
 80109e2:	68db      	ldr	r3, [r3, #12]
 80109e4:	2200      	movs	r2, #0
 80109e6:	749a      	strb	r2, [r3, #18]
 80109e8:	2200      	movs	r2, #0
 80109ea:	74da      	strb	r2, [r3, #19]
  return seg;
 80109ec:	693b      	ldr	r3, [r7, #16]
}
 80109ee:	4618      	mov	r0, r3
 80109f0:	371c      	adds	r7, #28
 80109f2:	46bd      	mov	sp, r7
 80109f4:	bd90      	pop	{r4, r7, pc}
 80109f6:	bf00      	nop
 80109f8:	0801aa8c 	.word	0x0801aa8c
 80109fc:	0801aac0 	.word	0x0801aac0
 8010a00:	0801aae0 	.word	0x0801aae0
 8010a04:	0801ab08 	.word	0x0801ab08
 8010a08:	0801ab2c 	.word	0x0801ab2c

08010a0c <tcp_pbuf_prealloc>:
#if TCP_OVERSIZE
static struct pbuf *
tcp_pbuf_prealloc(pbuf_layer layer, u16_t length, u16_t max_length,
                  u16_t *oversize, const struct tcp_pcb *pcb, u8_t apiflags,
                  u8_t first_seg)
{
 8010a0c:	b580      	push	{r7, lr}
 8010a0e:	b086      	sub	sp, #24
 8010a10:	af00      	add	r7, sp, #0
 8010a12:	607b      	str	r3, [r7, #4]
 8010a14:	4603      	mov	r3, r0
 8010a16:	73fb      	strb	r3, [r7, #15]
 8010a18:	460b      	mov	r3, r1
 8010a1a:	81bb      	strh	r3, [r7, #12]
 8010a1c:	4613      	mov	r3, r2
 8010a1e:	817b      	strh	r3, [r7, #10]
  struct pbuf *p;
  u16_t alloc = length;
 8010a20:	89bb      	ldrh	r3, [r7, #12]
 8010a22:	82fb      	strh	r3, [r7, #22]

  LWIP_ASSERT("tcp_pbuf_prealloc: invalid oversize", oversize != NULL);
 8010a24:	687b      	ldr	r3, [r7, #4]
 8010a26:	2b00      	cmp	r3, #0
 8010a28:	d105      	bne.n	8010a36 <tcp_pbuf_prealloc+0x2a>
 8010a2a:	4b30      	ldr	r3, [pc, #192]	; (8010aec <tcp_pbuf_prealloc+0xe0>)
 8010a2c:	22e8      	movs	r2, #232	; 0xe8
 8010a2e:	4930      	ldr	r1, [pc, #192]	; (8010af0 <tcp_pbuf_prealloc+0xe4>)
 8010a30:	4830      	ldr	r0, [pc, #192]	; (8010af4 <tcp_pbuf_prealloc+0xe8>)
 8010a32:	f007 fd29 	bl	8018488 <iprintf>
  LWIP_ASSERT("tcp_pbuf_prealloc: invalid pcb", pcb != NULL);
 8010a36:	6a3b      	ldr	r3, [r7, #32]
 8010a38:	2b00      	cmp	r3, #0
 8010a3a:	d105      	bne.n	8010a48 <tcp_pbuf_prealloc+0x3c>
 8010a3c:	4b2b      	ldr	r3, [pc, #172]	; (8010aec <tcp_pbuf_prealloc+0xe0>)
 8010a3e:	22e9      	movs	r2, #233	; 0xe9
 8010a40:	492d      	ldr	r1, [pc, #180]	; (8010af8 <tcp_pbuf_prealloc+0xec>)
 8010a42:	482c      	ldr	r0, [pc, #176]	; (8010af4 <tcp_pbuf_prealloc+0xe8>)
 8010a44:	f007 fd20 	bl	8018488 <iprintf>
  LWIP_UNUSED_ARG(pcb);
  LWIP_UNUSED_ARG(apiflags);
  LWIP_UNUSED_ARG(first_seg);
  alloc = max_length;
#else /* LWIP_NETIF_TX_SINGLE_PBUF */
  if (length < max_length) {
 8010a48:	89ba      	ldrh	r2, [r7, #12]
 8010a4a:	897b      	ldrh	r3, [r7, #10]
 8010a4c:	429a      	cmp	r2, r3
 8010a4e:	d221      	bcs.n	8010a94 <tcp_pbuf_prealloc+0x88>
     *
     * Did the user set TCP_WRITE_FLAG_MORE?
     *
     * Will the Nagle algorithm defer transmission of this segment?
     */
    if ((apiflags & TCP_WRITE_FLAG_MORE) ||
 8010a50:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 8010a54:	f003 0302 	and.w	r3, r3, #2
 8010a58:	2b00      	cmp	r3, #0
 8010a5a:	d111      	bne.n	8010a80 <tcp_pbuf_prealloc+0x74>
        (!(pcb->flags & TF_NODELAY) &&
 8010a5c:	6a3b      	ldr	r3, [r7, #32]
 8010a5e:	8b5b      	ldrh	r3, [r3, #26]
 8010a60:	f003 0340 	and.w	r3, r3, #64	; 0x40
    if ((apiflags & TCP_WRITE_FLAG_MORE) ||
 8010a64:	2b00      	cmp	r3, #0
 8010a66:	d115      	bne.n	8010a94 <tcp_pbuf_prealloc+0x88>
        (!(pcb->flags & TF_NODELAY) &&
 8010a68:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 8010a6c:	2b00      	cmp	r3, #0
 8010a6e:	d007      	beq.n	8010a80 <tcp_pbuf_prealloc+0x74>
         (!first_seg ||
          pcb->unsent != NULL ||
 8010a70:	6a3b      	ldr	r3, [r7, #32]
 8010a72:	6edb      	ldr	r3, [r3, #108]	; 0x6c
         (!first_seg ||
 8010a74:	2b00      	cmp	r3, #0
 8010a76:	d103      	bne.n	8010a80 <tcp_pbuf_prealloc+0x74>
          pcb->unacked != NULL))) {
 8010a78:	6a3b      	ldr	r3, [r7, #32]
 8010a7a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
          pcb->unsent != NULL ||
 8010a7c:	2b00      	cmp	r3, #0
 8010a7e:	d009      	beq.n	8010a94 <tcp_pbuf_prealloc+0x88>
      alloc = LWIP_MIN(max_length, LWIP_MEM_ALIGN_SIZE(TCP_OVERSIZE_CALC_LENGTH(length)));
 8010a80:	89bb      	ldrh	r3, [r7, #12]
 8010a82:	f203 231b 	addw	r3, r3, #539	; 0x21b
 8010a86:	f023 0203 	bic.w	r2, r3, #3
 8010a8a:	897b      	ldrh	r3, [r7, #10]
 8010a8c:	4293      	cmp	r3, r2
 8010a8e:	bf28      	it	cs
 8010a90:	4613      	movcs	r3, r2
 8010a92:	82fb      	strh	r3, [r7, #22]
    }
  }
#endif /* LWIP_NETIF_TX_SINGLE_PBUF */
  p = pbuf_alloc(layer, alloc, PBUF_RAM);
 8010a94:	8af9      	ldrh	r1, [r7, #22]
 8010a96:	7bfb      	ldrb	r3, [r7, #15]
 8010a98:	f44f 7220 	mov.w	r2, #640	; 0x280
 8010a9c:	4618      	mov	r0, r3
 8010a9e:	f7fa ff6b 	bl	800b978 <pbuf_alloc>
 8010aa2:	6138      	str	r0, [r7, #16]
  if (p == NULL) {
 8010aa4:	693b      	ldr	r3, [r7, #16]
 8010aa6:	2b00      	cmp	r3, #0
 8010aa8:	d101      	bne.n	8010aae <tcp_pbuf_prealloc+0xa2>
    return NULL;
 8010aaa:	2300      	movs	r3, #0
 8010aac:	e019      	b.n	8010ae2 <tcp_pbuf_prealloc+0xd6>
  }
  LWIP_ASSERT("need unchained pbuf", p->next == NULL);
 8010aae:	693b      	ldr	r3, [r7, #16]
 8010ab0:	681b      	ldr	r3, [r3, #0]
 8010ab2:	2b00      	cmp	r3, #0
 8010ab4:	d006      	beq.n	8010ac4 <tcp_pbuf_prealloc+0xb8>
 8010ab6:	4b0d      	ldr	r3, [pc, #52]	; (8010aec <tcp_pbuf_prealloc+0xe0>)
 8010ab8:	f240 120b 	movw	r2, #267	; 0x10b
 8010abc:	490f      	ldr	r1, [pc, #60]	; (8010afc <tcp_pbuf_prealloc+0xf0>)
 8010abe:	480d      	ldr	r0, [pc, #52]	; (8010af4 <tcp_pbuf_prealloc+0xe8>)
 8010ac0:	f007 fce2 	bl	8018488 <iprintf>
  *oversize = p->len - length;
 8010ac4:	693b      	ldr	r3, [r7, #16]
 8010ac6:	895a      	ldrh	r2, [r3, #10]
 8010ac8:	89bb      	ldrh	r3, [r7, #12]
 8010aca:	1ad3      	subs	r3, r2, r3
 8010acc:	b29a      	uxth	r2, r3
 8010ace:	687b      	ldr	r3, [r7, #4]
 8010ad0:	801a      	strh	r2, [r3, #0]
  /* trim p->len to the currently used size */
  p->len = p->tot_len = length;
 8010ad2:	693b      	ldr	r3, [r7, #16]
 8010ad4:	89ba      	ldrh	r2, [r7, #12]
 8010ad6:	811a      	strh	r2, [r3, #8]
 8010ad8:	693b      	ldr	r3, [r7, #16]
 8010ada:	891a      	ldrh	r2, [r3, #8]
 8010adc:	693b      	ldr	r3, [r7, #16]
 8010ade:	815a      	strh	r2, [r3, #10]
  return p;
 8010ae0:	693b      	ldr	r3, [r7, #16]
}
 8010ae2:	4618      	mov	r0, r3
 8010ae4:	3718      	adds	r7, #24
 8010ae6:	46bd      	mov	sp, r7
 8010ae8:	bd80      	pop	{r7, pc}
 8010aea:	bf00      	nop
 8010aec:	0801aa8c 	.word	0x0801aa8c
 8010af0:	0801ab44 	.word	0x0801ab44
 8010af4:	0801aae0 	.word	0x0801aae0
 8010af8:	0801ab68 	.word	0x0801ab68
 8010afc:	0801ab88 	.word	0x0801ab88

08010b00 <tcp_write_checks>:
 * @param len length of data to send (checked agains snd_buf)
 * @return ERR_OK if tcp_write is allowed to proceed, another err_t otherwise
 */
static err_t
tcp_write_checks(struct tcp_pcb *pcb, u16_t len)
{
 8010b00:	b580      	push	{r7, lr}
 8010b02:	b082      	sub	sp, #8
 8010b04:	af00      	add	r7, sp, #0
 8010b06:	6078      	str	r0, [r7, #4]
 8010b08:	460b      	mov	r3, r1
 8010b0a:	807b      	strh	r3, [r7, #2]
  LWIP_ASSERT("tcp_write_checks: invalid pcb", pcb != NULL);
 8010b0c:	687b      	ldr	r3, [r7, #4]
 8010b0e:	2b00      	cmp	r3, #0
 8010b10:	d106      	bne.n	8010b20 <tcp_write_checks+0x20>
 8010b12:	4b33      	ldr	r3, [pc, #204]	; (8010be0 <tcp_write_checks+0xe0>)
 8010b14:	f240 1233 	movw	r2, #307	; 0x133
 8010b18:	4932      	ldr	r1, [pc, #200]	; (8010be4 <tcp_write_checks+0xe4>)
 8010b1a:	4833      	ldr	r0, [pc, #204]	; (8010be8 <tcp_write_checks+0xe8>)
 8010b1c:	f007 fcb4 	bl	8018488 <iprintf>

  /* connection is in invalid state for data transmission? */
  if ((pcb->state != ESTABLISHED) &&
 8010b20:	687b      	ldr	r3, [r7, #4]
 8010b22:	7d1b      	ldrb	r3, [r3, #20]
 8010b24:	2b04      	cmp	r3, #4
 8010b26:	d00e      	beq.n	8010b46 <tcp_write_checks+0x46>
      (pcb->state != CLOSE_WAIT) &&
 8010b28:	687b      	ldr	r3, [r7, #4]
 8010b2a:	7d1b      	ldrb	r3, [r3, #20]
  if ((pcb->state != ESTABLISHED) &&
 8010b2c:	2b07      	cmp	r3, #7
 8010b2e:	d00a      	beq.n	8010b46 <tcp_write_checks+0x46>
      (pcb->state != SYN_SENT) &&
 8010b30:	687b      	ldr	r3, [r7, #4]
 8010b32:	7d1b      	ldrb	r3, [r3, #20]
      (pcb->state != CLOSE_WAIT) &&
 8010b34:	2b02      	cmp	r3, #2
 8010b36:	d006      	beq.n	8010b46 <tcp_write_checks+0x46>
      (pcb->state != SYN_RCVD)) {
 8010b38:	687b      	ldr	r3, [r7, #4]
 8010b3a:	7d1b      	ldrb	r3, [r3, #20]
      (pcb->state != SYN_SENT) &&
 8010b3c:	2b03      	cmp	r3, #3
 8010b3e:	d002      	beq.n	8010b46 <tcp_write_checks+0x46>
    LWIP_DEBUGF(TCP_OUTPUT_DEBUG | LWIP_DBG_STATE | LWIP_DBG_LEVEL_SEVERE, ("tcp_write() called in invalid state\n"));
    return ERR_CONN;
 8010b40:	f06f 030a 	mvn.w	r3, #10
 8010b44:	e048      	b.n	8010bd8 <tcp_write_checks+0xd8>
  } else if (len == 0) {
 8010b46:	887b      	ldrh	r3, [r7, #2]
 8010b48:	2b00      	cmp	r3, #0
 8010b4a:	d101      	bne.n	8010b50 <tcp_write_checks+0x50>
    return ERR_OK;
 8010b4c:	2300      	movs	r3, #0
 8010b4e:	e043      	b.n	8010bd8 <tcp_write_checks+0xd8>
  }

  /* fail on too much data */
  if (len > pcb->snd_buf) {
 8010b50:	687b      	ldr	r3, [r7, #4]
 8010b52:	f8b3 3064 	ldrh.w	r3, [r3, #100]	; 0x64
 8010b56:	887a      	ldrh	r2, [r7, #2]
 8010b58:	429a      	cmp	r2, r3
 8010b5a:	d909      	bls.n	8010b70 <tcp_write_checks+0x70>
    LWIP_DEBUGF(TCP_OUTPUT_DEBUG | LWIP_DBG_LEVEL_SEVERE, ("tcp_write: too much data (len=%"U16_F" > snd_buf=%"TCPWNDSIZE_F")\n",
                len, pcb->snd_buf));
    tcp_set_flags(pcb, TF_NAGLEMEMERR);
 8010b5c:	687b      	ldr	r3, [r7, #4]
 8010b5e:	8b5b      	ldrh	r3, [r3, #26]
 8010b60:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8010b64:	b29a      	uxth	r2, r3
 8010b66:	687b      	ldr	r3, [r7, #4]
 8010b68:	835a      	strh	r2, [r3, #26]
    return ERR_MEM;
 8010b6a:	f04f 33ff 	mov.w	r3, #4294967295
 8010b6e:	e033      	b.n	8010bd8 <tcp_write_checks+0xd8>
  LWIP_DEBUGF(TCP_QLEN_DEBUG, ("tcp_write: queuelen: %"TCPWNDSIZE_F"\n", (tcpwnd_size_t)pcb->snd_queuelen));

  /* If total number of pbufs on the unsent/unacked queues exceeds the
   * configured maximum, return an error */
  /* check for configured max queuelen and possible overflow */
  if (pcb->snd_queuelen >= LWIP_MIN(TCP_SND_QUEUELEN, (TCP_SNDQUEUELEN_OVERFLOW + 1))) {
 8010b70:	687b      	ldr	r3, [r7, #4]
 8010b72:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 8010b76:	2b08      	cmp	r3, #8
 8010b78:	d909      	bls.n	8010b8e <tcp_write_checks+0x8e>
    LWIP_DEBUGF(TCP_OUTPUT_DEBUG | LWIP_DBG_LEVEL_SEVERE, ("tcp_write: too long queue %"U16_F" (max %"U16_F")\n",
                pcb->snd_queuelen, (u16_t)TCP_SND_QUEUELEN));
    TCP_STATS_INC(tcp.memerr);
    tcp_set_flags(pcb, TF_NAGLEMEMERR);
 8010b7a:	687b      	ldr	r3, [r7, #4]
 8010b7c:	8b5b      	ldrh	r3, [r3, #26]
 8010b7e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8010b82:	b29a      	uxth	r2, r3
 8010b84:	687b      	ldr	r3, [r7, #4]
 8010b86:	835a      	strh	r2, [r3, #26]
    return ERR_MEM;
 8010b88:	f04f 33ff 	mov.w	r3, #4294967295
 8010b8c:	e024      	b.n	8010bd8 <tcp_write_checks+0xd8>
  }
  if (pcb->snd_queuelen != 0) {
 8010b8e:	687b      	ldr	r3, [r7, #4]
 8010b90:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 8010b94:	2b00      	cmp	r3, #0
 8010b96:	d00f      	beq.n	8010bb8 <tcp_write_checks+0xb8>
    LWIP_ASSERT("tcp_write: pbufs on queue => at least one queue non-empty",
 8010b98:	687b      	ldr	r3, [r7, #4]
 8010b9a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8010b9c:	2b00      	cmp	r3, #0
 8010b9e:	d11a      	bne.n	8010bd6 <tcp_write_checks+0xd6>
 8010ba0:	687b      	ldr	r3, [r7, #4]
 8010ba2:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8010ba4:	2b00      	cmp	r3, #0
 8010ba6:	d116      	bne.n	8010bd6 <tcp_write_checks+0xd6>
 8010ba8:	4b0d      	ldr	r3, [pc, #52]	; (8010be0 <tcp_write_checks+0xe0>)
 8010baa:	f240 1255 	movw	r2, #341	; 0x155
 8010bae:	490f      	ldr	r1, [pc, #60]	; (8010bec <tcp_write_checks+0xec>)
 8010bb0:	480d      	ldr	r0, [pc, #52]	; (8010be8 <tcp_write_checks+0xe8>)
 8010bb2:	f007 fc69 	bl	8018488 <iprintf>
 8010bb6:	e00e      	b.n	8010bd6 <tcp_write_checks+0xd6>
                pcb->unacked != NULL || pcb->unsent != NULL);
  } else {
    LWIP_ASSERT("tcp_write: no pbufs on queue => both queues empty",
 8010bb8:	687b      	ldr	r3, [r7, #4]
 8010bba:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8010bbc:	2b00      	cmp	r3, #0
 8010bbe:	d103      	bne.n	8010bc8 <tcp_write_checks+0xc8>
 8010bc0:	687b      	ldr	r3, [r7, #4]
 8010bc2:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8010bc4:	2b00      	cmp	r3, #0
 8010bc6:	d006      	beq.n	8010bd6 <tcp_write_checks+0xd6>
 8010bc8:	4b05      	ldr	r3, [pc, #20]	; (8010be0 <tcp_write_checks+0xe0>)
 8010bca:	f44f 72ac 	mov.w	r2, #344	; 0x158
 8010bce:	4908      	ldr	r1, [pc, #32]	; (8010bf0 <tcp_write_checks+0xf0>)
 8010bd0:	4805      	ldr	r0, [pc, #20]	; (8010be8 <tcp_write_checks+0xe8>)
 8010bd2:	f007 fc59 	bl	8018488 <iprintf>
                pcb->unacked == NULL && pcb->unsent == NULL);
  }
  return ERR_OK;
 8010bd6:	2300      	movs	r3, #0
}
 8010bd8:	4618      	mov	r0, r3
 8010bda:	3708      	adds	r7, #8
 8010bdc:	46bd      	mov	sp, r7
 8010bde:	bd80      	pop	{r7, pc}
 8010be0:	0801aa8c 	.word	0x0801aa8c
 8010be4:	0801ab9c 	.word	0x0801ab9c
 8010be8:	0801aae0 	.word	0x0801aae0
 8010bec:	0801abbc 	.word	0x0801abbc
 8010bf0:	0801abf8 	.word	0x0801abf8

08010bf4 <tcp_write>:
 * - TCP_WRITE_FLAG_MORE (0x02) for TCP connection, PSH flag will not be set on last segment sent,
 * @return ERR_OK if enqueued, another err_t on error
 */
err_t
tcp_write(struct tcp_pcb *pcb, const void *arg, u16_t len, u8_t apiflags)
{
 8010bf4:	b590      	push	{r4, r7, lr}
 8010bf6:	b09b      	sub	sp, #108	; 0x6c
 8010bf8:	af04      	add	r7, sp, #16
 8010bfa:	60f8      	str	r0, [r7, #12]
 8010bfc:	60b9      	str	r1, [r7, #8]
 8010bfe:	4611      	mov	r1, r2
 8010c00:	461a      	mov	r2, r3
 8010c02:	460b      	mov	r3, r1
 8010c04:	80fb      	strh	r3, [r7, #6]
 8010c06:	4613      	mov	r3, r2
 8010c08:	717b      	strb	r3, [r7, #5]
  struct pbuf *concat_p = NULL;
 8010c0a:	2300      	movs	r3, #0
 8010c0c:	657b      	str	r3, [r7, #84]	; 0x54
  struct tcp_seg *last_unsent = NULL, *seg = NULL, *prev_seg = NULL, *queue = NULL;
 8010c0e:	2300      	movs	r3, #0
 8010c10:	653b      	str	r3, [r7, #80]	; 0x50
 8010c12:	2300      	movs	r3, #0
 8010c14:	64fb      	str	r3, [r7, #76]	; 0x4c
 8010c16:	2300      	movs	r3, #0
 8010c18:	64bb      	str	r3, [r7, #72]	; 0x48
 8010c1a:	2300      	movs	r3, #0
 8010c1c:	647b      	str	r3, [r7, #68]	; 0x44
  u16_t pos = 0; /* position in 'arg' data */
 8010c1e:	2300      	movs	r3, #0
 8010c20:	f8a7 3042 	strh.w	r3, [r7, #66]	; 0x42
  u16_t queuelen;
  u8_t optlen;
  u8_t optflags = 0;
 8010c24:	2300      	movs	r3, #0
 8010c26:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
#if TCP_OVERSIZE
  u16_t oversize = 0;
 8010c2a:	2300      	movs	r3, #0
 8010c2c:	827b      	strh	r3, [r7, #18]
  u16_t oversize_used = 0;
 8010c2e:	2300      	movs	r3, #0
 8010c30:	87fb      	strh	r3, [r7, #62]	; 0x3e
#if TCP_OVERSIZE_DBGCHECK
  u16_t oversize_add = 0;
#endif /* TCP_OVERSIZE_DBGCHECK*/
#endif /* TCP_OVERSIZE */
  u16_t extendlen = 0;
 8010c32:	2300      	movs	r3, #0
 8010c34:	87bb      	strh	r3, [r7, #60]	; 0x3c
  u16_t concat_chksummed = 0;
#endif /* TCP_CHECKSUM_ON_COPY */
  err_t err;
  u16_t mss_local;

  LWIP_ERROR("tcp_write: invalid pcb", pcb != NULL, return ERR_ARG);
 8010c36:	68fb      	ldr	r3, [r7, #12]
 8010c38:	2b00      	cmp	r3, #0
 8010c3a:	d109      	bne.n	8010c50 <tcp_write+0x5c>
 8010c3c:	4ba4      	ldr	r3, [pc, #656]	; (8010ed0 <tcp_write+0x2dc>)
 8010c3e:	f44f 72cf 	mov.w	r2, #414	; 0x19e
 8010c42:	49a4      	ldr	r1, [pc, #656]	; (8010ed4 <tcp_write+0x2e0>)
 8010c44:	48a4      	ldr	r0, [pc, #656]	; (8010ed8 <tcp_write+0x2e4>)
 8010c46:	f007 fc1f 	bl	8018488 <iprintf>
 8010c4a:	f06f 030f 	mvn.w	r3, #15
 8010c4e:	e32a      	b.n	80112a6 <tcp_write+0x6b2>

  /* don't allocate segments bigger than half the maximum window we ever received */
  mss_local = LWIP_MIN(pcb->mss, TCPWND_MIN16(pcb->snd_wnd_max / 2));
 8010c50:	68fb      	ldr	r3, [r7, #12]
 8010c52:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 8010c56:	085b      	lsrs	r3, r3, #1
 8010c58:	b29a      	uxth	r2, r3
 8010c5a:	68fb      	ldr	r3, [r7, #12]
 8010c5c:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8010c5e:	4293      	cmp	r3, r2
 8010c60:	bf28      	it	cs
 8010c62:	4613      	movcs	r3, r2
 8010c64:	84bb      	strh	r3, [r7, #36]	; 0x24
  mss_local = mss_local ? mss_local : pcb->mss;
 8010c66:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8010c68:	2b00      	cmp	r3, #0
 8010c6a:	d102      	bne.n	8010c72 <tcp_write+0x7e>
 8010c6c:	68fb      	ldr	r3, [r7, #12]
 8010c6e:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8010c70:	e000      	b.n	8010c74 <tcp_write+0x80>
 8010c72:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8010c74:	84bb      	strh	r3, [r7, #36]	; 0x24
  apiflags |= TCP_WRITE_FLAG_COPY;
#endif /* LWIP_NETIF_TX_SINGLE_PBUF */

  LWIP_DEBUGF(TCP_OUTPUT_DEBUG, ("tcp_write(pcb=%p, data=%p, len=%"U16_F", apiflags=%"U16_F")\n",
                                 (void *)pcb, arg, len, (u16_t)apiflags));
  LWIP_ERROR("tcp_write: arg == NULL (programmer violates API)",
 8010c76:	68bb      	ldr	r3, [r7, #8]
 8010c78:	2b00      	cmp	r3, #0
 8010c7a:	d109      	bne.n	8010c90 <tcp_write+0x9c>
 8010c7c:	4b94      	ldr	r3, [pc, #592]	; (8010ed0 <tcp_write+0x2dc>)
 8010c7e:	f240 12ad 	movw	r2, #429	; 0x1ad
 8010c82:	4996      	ldr	r1, [pc, #600]	; (8010edc <tcp_write+0x2e8>)
 8010c84:	4894      	ldr	r0, [pc, #592]	; (8010ed8 <tcp_write+0x2e4>)
 8010c86:	f007 fbff 	bl	8018488 <iprintf>
 8010c8a:	f06f 030f 	mvn.w	r3, #15
 8010c8e:	e30a      	b.n	80112a6 <tcp_write+0x6b2>
             arg != NULL, return ERR_ARG;);

  err = tcp_write_checks(pcb, len);
 8010c90:	88fb      	ldrh	r3, [r7, #6]
 8010c92:	4619      	mov	r1, r3
 8010c94:	68f8      	ldr	r0, [r7, #12]
 8010c96:	f7ff ff33 	bl	8010b00 <tcp_write_checks>
 8010c9a:	4603      	mov	r3, r0
 8010c9c:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
  if (err != ERR_OK) {
 8010ca0:	f997 3023 	ldrsb.w	r3, [r7, #35]	; 0x23
 8010ca4:	2b00      	cmp	r3, #0
 8010ca6:	d002      	beq.n	8010cae <tcp_write+0xba>
    return err;
 8010ca8:	f997 3023 	ldrsb.w	r3, [r7, #35]	; 0x23
 8010cac:	e2fb      	b.n	80112a6 <tcp_write+0x6b2>
  }
  queuelen = pcb->snd_queuelen;
 8010cae:	68fb      	ldr	r3, [r7, #12]
 8010cb0:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 8010cb4:	f8a7 3040 	strh.w	r3, [r7, #64]	; 0x40
    /* ensure that segments can hold at least one data byte... */
    mss_local = LWIP_MAX(mss_local, LWIP_TCP_OPT_LEN_TS + 1);
  } else
#endif /* LWIP_TCP_TIMESTAMPS */
  {
    optlen = LWIP_TCP_OPT_LENGTH_SEGMENT(0, pcb);
 8010cb8:	2300      	movs	r3, #0
 8010cba:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
   *
   * pos records progress as data is segmented.
   */

  /* Find the tail of the unsent queue. */
  if (pcb->unsent != NULL) {
 8010cbe:	68fb      	ldr	r3, [r7, #12]
 8010cc0:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8010cc2:	2b00      	cmp	r3, #0
 8010cc4:	f000 80f6 	beq.w	8010eb4 <tcp_write+0x2c0>
    u16_t space;
    u16_t unsent_optlen;

    /* @todo: this could be sped up by keeping last_unsent in the pcb */
    for (last_unsent = pcb->unsent; last_unsent->next != NULL;
 8010cc8:	68fb      	ldr	r3, [r7, #12]
 8010cca:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8010ccc:	653b      	str	r3, [r7, #80]	; 0x50
 8010cce:	e002      	b.n	8010cd6 <tcp_write+0xe2>
         last_unsent = last_unsent->next);
 8010cd0:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8010cd2:	681b      	ldr	r3, [r3, #0]
 8010cd4:	653b      	str	r3, [r7, #80]	; 0x50
    for (last_unsent = pcb->unsent; last_unsent->next != NULL;
 8010cd6:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8010cd8:	681b      	ldr	r3, [r3, #0]
 8010cda:	2b00      	cmp	r3, #0
 8010cdc:	d1f8      	bne.n	8010cd0 <tcp_write+0xdc>

    /* Usable space at the end of the last unsent segment */
    unsent_optlen = LWIP_TCP_OPT_LENGTH_SEGMENT(last_unsent->flags, pcb);
 8010cde:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8010ce0:	7a9b      	ldrb	r3, [r3, #10]
 8010ce2:	009b      	lsls	r3, r3, #2
 8010ce4:	b29b      	uxth	r3, r3
 8010ce6:	f003 0304 	and.w	r3, r3, #4
 8010cea:	843b      	strh	r3, [r7, #32]
    LWIP_ASSERT("mss_local is too small", mss_local >= last_unsent->len + unsent_optlen);
 8010cec:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 8010cee:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8010cf0:	891b      	ldrh	r3, [r3, #8]
 8010cf2:	4619      	mov	r1, r3
 8010cf4:	8c3b      	ldrh	r3, [r7, #32]
 8010cf6:	440b      	add	r3, r1
 8010cf8:	429a      	cmp	r2, r3
 8010cfa:	da06      	bge.n	8010d0a <tcp_write+0x116>
 8010cfc:	4b74      	ldr	r3, [pc, #464]	; (8010ed0 <tcp_write+0x2dc>)
 8010cfe:	f44f 72f3 	mov.w	r2, #486	; 0x1e6
 8010d02:	4977      	ldr	r1, [pc, #476]	; (8010ee0 <tcp_write+0x2ec>)
 8010d04:	4874      	ldr	r0, [pc, #464]	; (8010ed8 <tcp_write+0x2e4>)
 8010d06:	f007 fbbf 	bl	8018488 <iprintf>
    space = mss_local - (last_unsent->len + unsent_optlen);
 8010d0a:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8010d0c:	891a      	ldrh	r2, [r3, #8]
 8010d0e:	8c3b      	ldrh	r3, [r7, #32]
 8010d10:	4413      	add	r3, r2
 8010d12:	b29b      	uxth	r3, r3
 8010d14:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 8010d16:	1ad3      	subs	r3, r2, r3
 8010d18:	877b      	strh	r3, [r7, #58]	; 0x3a
#if TCP_OVERSIZE_DBGCHECK
    /* check that pcb->unsent_oversize matches last_unsent->oversize_left */
    LWIP_ASSERT("unsent_oversize mismatch (pcb vs. last_unsent)",
                pcb->unsent_oversize == last_unsent->oversize_left);
#endif /* TCP_OVERSIZE_DBGCHECK */
    oversize = pcb->unsent_oversize;
 8010d1a:	68fb      	ldr	r3, [r7, #12]
 8010d1c:	f8b3 3068 	ldrh.w	r3, [r3, #104]	; 0x68
 8010d20:	827b      	strh	r3, [r7, #18]
    if (oversize > 0) {
 8010d22:	8a7b      	ldrh	r3, [r7, #18]
 8010d24:	2b00      	cmp	r3, #0
 8010d26:	d026      	beq.n	8010d76 <tcp_write+0x182>
      LWIP_ASSERT("inconsistent oversize vs. space", oversize <= space);
 8010d28:	8a7b      	ldrh	r3, [r7, #18]
 8010d2a:	8f7a      	ldrh	r2, [r7, #58]	; 0x3a
 8010d2c:	429a      	cmp	r2, r3
 8010d2e:	d206      	bcs.n	8010d3e <tcp_write+0x14a>
 8010d30:	4b67      	ldr	r3, [pc, #412]	; (8010ed0 <tcp_write+0x2dc>)
 8010d32:	f44f 72fc 	mov.w	r2, #504	; 0x1f8
 8010d36:	496b      	ldr	r1, [pc, #428]	; (8010ee4 <tcp_write+0x2f0>)
 8010d38:	4867      	ldr	r0, [pc, #412]	; (8010ed8 <tcp_write+0x2e4>)
 8010d3a:	f007 fba5 	bl	8018488 <iprintf>
      seg = last_unsent;
 8010d3e:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8010d40:	64fb      	str	r3, [r7, #76]	; 0x4c
      oversize_used = LWIP_MIN(space, LWIP_MIN(oversize, len));
 8010d42:	8a7b      	ldrh	r3, [r7, #18]
 8010d44:	88fa      	ldrh	r2, [r7, #6]
 8010d46:	4293      	cmp	r3, r2
 8010d48:	bf28      	it	cs
 8010d4a:	4613      	movcs	r3, r2
 8010d4c:	b29b      	uxth	r3, r3
 8010d4e:	8f7a      	ldrh	r2, [r7, #58]	; 0x3a
 8010d50:	4293      	cmp	r3, r2
 8010d52:	bf28      	it	cs
 8010d54:	4613      	movcs	r3, r2
 8010d56:	87fb      	strh	r3, [r7, #62]	; 0x3e
      pos += oversize_used;
 8010d58:	f8b7 2042 	ldrh.w	r2, [r7, #66]	; 0x42
 8010d5c:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 8010d5e:	4413      	add	r3, r2
 8010d60:	f8a7 3042 	strh.w	r3, [r7, #66]	; 0x42
      oversize -= oversize_used;
 8010d64:	8a7a      	ldrh	r2, [r7, #18]
 8010d66:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 8010d68:	1ad3      	subs	r3, r2, r3
 8010d6a:	b29b      	uxth	r3, r3
 8010d6c:	827b      	strh	r3, [r7, #18]
      space -= oversize_used;
 8010d6e:	8f7a      	ldrh	r2, [r7, #58]	; 0x3a
 8010d70:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 8010d72:	1ad3      	subs	r3, r2, r3
 8010d74:	877b      	strh	r3, [r7, #58]	; 0x3a
    }
    /* now we are either finished or oversize is zero */
    LWIP_ASSERT("inconsistent oversize vs. len", (oversize == 0) || (pos == len));
 8010d76:	8a7b      	ldrh	r3, [r7, #18]
 8010d78:	2b00      	cmp	r3, #0
 8010d7a:	d00b      	beq.n	8010d94 <tcp_write+0x1a0>
 8010d7c:	f8b7 2042 	ldrh.w	r2, [r7, #66]	; 0x42
 8010d80:	88fb      	ldrh	r3, [r7, #6]
 8010d82:	429a      	cmp	r2, r3
 8010d84:	d006      	beq.n	8010d94 <tcp_write+0x1a0>
 8010d86:	4b52      	ldr	r3, [pc, #328]	; (8010ed0 <tcp_write+0x2dc>)
 8010d88:	f44f 7200 	mov.w	r2, #512	; 0x200
 8010d8c:	4956      	ldr	r1, [pc, #344]	; (8010ee8 <tcp_write+0x2f4>)
 8010d8e:	4852      	ldr	r0, [pc, #328]	; (8010ed8 <tcp_write+0x2e4>)
 8010d90:	f007 fb7a 	bl	8018488 <iprintf>
     *
     * This phase is skipped for LWIP_NETIF_TX_SINGLE_PBUF as we could only execute
     * it after rexmit puts a segment from unacked to unsent and at this point,
     * oversize info is lost.
     */
    if ((pos < len) && (space > 0) && (last_unsent->len > 0)) {
 8010d94:	f8b7 2042 	ldrh.w	r2, [r7, #66]	; 0x42
 8010d98:	88fb      	ldrh	r3, [r7, #6]
 8010d9a:	429a      	cmp	r2, r3
 8010d9c:	f080 8167 	bcs.w	801106e <tcp_write+0x47a>
 8010da0:	8f7b      	ldrh	r3, [r7, #58]	; 0x3a
 8010da2:	2b00      	cmp	r3, #0
 8010da4:	f000 8163 	beq.w	801106e <tcp_write+0x47a>
 8010da8:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8010daa:	891b      	ldrh	r3, [r3, #8]
 8010dac:	2b00      	cmp	r3, #0
 8010dae:	f000 815e 	beq.w	801106e <tcp_write+0x47a>
      u16_t seglen = LWIP_MIN(space, len - pos);
 8010db2:	88fa      	ldrh	r2, [r7, #6]
 8010db4:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 8010db8:	1ad2      	subs	r2, r2, r3
 8010dba:	8f7b      	ldrh	r3, [r7, #58]	; 0x3a
 8010dbc:	4293      	cmp	r3, r2
 8010dbe:	bfa8      	it	ge
 8010dc0:	4613      	movge	r3, r2
 8010dc2:	83fb      	strh	r3, [r7, #30]
      seg = last_unsent;
 8010dc4:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8010dc6:	64fb      	str	r3, [r7, #76]	; 0x4c

      /* Create a pbuf with a copy or reference to seglen bytes. We
       * can use PBUF_RAW here since the data appears in the middle of
       * a segment. A header will never be prepended. */
      if (apiflags & TCP_WRITE_FLAG_COPY) {
 8010dc8:	797b      	ldrb	r3, [r7, #5]
 8010dca:	f003 0301 	and.w	r3, r3, #1
 8010dce:	2b00      	cmp	r3, #0
 8010dd0:	d027      	beq.n	8010e22 <tcp_write+0x22e>
        /* Data is copied */
        if ((concat_p = tcp_pbuf_prealloc(PBUF_RAW, seglen, space, &oversize, pcb, apiflags, 1)) == NULL) {
 8010dd2:	f107 0012 	add.w	r0, r7, #18
 8010dd6:	8f7a      	ldrh	r2, [r7, #58]	; 0x3a
 8010dd8:	8bf9      	ldrh	r1, [r7, #30]
 8010dda:	2301      	movs	r3, #1
 8010ddc:	9302      	str	r3, [sp, #8]
 8010dde:	797b      	ldrb	r3, [r7, #5]
 8010de0:	9301      	str	r3, [sp, #4]
 8010de2:	68fb      	ldr	r3, [r7, #12]
 8010de4:	9300      	str	r3, [sp, #0]
 8010de6:	4603      	mov	r3, r0
 8010de8:	2000      	movs	r0, #0
 8010dea:	f7ff fe0f 	bl	8010a0c <tcp_pbuf_prealloc>
 8010dee:	6578      	str	r0, [r7, #84]	; 0x54
 8010df0:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8010df2:	2b00      	cmp	r3, #0
 8010df4:	f000 8225 	beq.w	8011242 <tcp_write+0x64e>
          goto memerr;
        }
#if TCP_OVERSIZE_DBGCHECK
        oversize_add = oversize;
#endif /* TCP_OVERSIZE_DBGCHECK */
        TCP_DATA_COPY2(concat_p->payload, (const u8_t *)arg + pos, seglen, &concat_chksum, &concat_chksum_swapped);
 8010df8:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8010dfa:	6858      	ldr	r0, [r3, #4]
 8010dfc:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 8010e00:	68ba      	ldr	r2, [r7, #8]
 8010e02:	4413      	add	r3, r2
 8010e04:	8bfa      	ldrh	r2, [r7, #30]
 8010e06:	4619      	mov	r1, r3
 8010e08:	f007 fc31 	bl	801866e <memcpy>
#if TCP_CHECKSUM_ON_COPY
        concat_chksummed += seglen;
#endif /* TCP_CHECKSUM_ON_COPY */
        queuelen += pbuf_clen(concat_p);
 8010e0c:	6d78      	ldr	r0, [r7, #84]	; 0x54
 8010e0e:	f7fb f91f 	bl	800c050 <pbuf_clen>
 8010e12:	4603      	mov	r3, r0
 8010e14:	461a      	mov	r2, r3
 8010e16:	f8b7 3040 	ldrh.w	r3, [r7, #64]	; 0x40
 8010e1a:	4413      	add	r3, r2
 8010e1c:	f8a7 3040 	strh.w	r3, [r7, #64]	; 0x40
 8010e20:	e041      	b.n	8010ea6 <tcp_write+0x2b2>
      } else {
        /* Data is not copied */
        /* If the last unsent pbuf is of type PBUF_ROM, try to extend it. */
        struct pbuf *p;
        for (p = last_unsent->p; p->next != NULL; p = p->next);
 8010e22:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8010e24:	685b      	ldr	r3, [r3, #4]
 8010e26:	637b      	str	r3, [r7, #52]	; 0x34
 8010e28:	e002      	b.n	8010e30 <tcp_write+0x23c>
 8010e2a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8010e2c:	681b      	ldr	r3, [r3, #0]
 8010e2e:	637b      	str	r3, [r7, #52]	; 0x34
 8010e30:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8010e32:	681b      	ldr	r3, [r3, #0]
 8010e34:	2b00      	cmp	r3, #0
 8010e36:	d1f8      	bne.n	8010e2a <tcp_write+0x236>
        if (((p->type_internal & (PBUF_TYPE_FLAG_STRUCT_DATA_CONTIGUOUS | PBUF_TYPE_FLAG_DATA_VOLATILE)) == 0) &&
 8010e38:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8010e3a:	7b1b      	ldrb	r3, [r3, #12]
 8010e3c:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 8010e40:	2b00      	cmp	r3, #0
 8010e42:	d115      	bne.n	8010e70 <tcp_write+0x27c>
            (const u8_t *)p->payload + p->len == (const u8_t *)arg) {
 8010e44:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8010e46:	685b      	ldr	r3, [r3, #4]
 8010e48:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8010e4a:	8952      	ldrh	r2, [r2, #10]
 8010e4c:	4413      	add	r3, r2
        if (((p->type_internal & (PBUF_TYPE_FLAG_STRUCT_DATA_CONTIGUOUS | PBUF_TYPE_FLAG_DATA_VOLATILE)) == 0) &&
 8010e4e:	68ba      	ldr	r2, [r7, #8]
 8010e50:	429a      	cmp	r2, r3
 8010e52:	d10d      	bne.n	8010e70 <tcp_write+0x27c>
          LWIP_ASSERT("tcp_write: ROM pbufs cannot be oversized", pos == 0);
 8010e54:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 8010e58:	2b00      	cmp	r3, #0
 8010e5a:	d006      	beq.n	8010e6a <tcp_write+0x276>
 8010e5c:	4b1c      	ldr	r3, [pc, #112]	; (8010ed0 <tcp_write+0x2dc>)
 8010e5e:	f240 2231 	movw	r2, #561	; 0x231
 8010e62:	4922      	ldr	r1, [pc, #136]	; (8010eec <tcp_write+0x2f8>)
 8010e64:	481c      	ldr	r0, [pc, #112]	; (8010ed8 <tcp_write+0x2e4>)
 8010e66:	f007 fb0f 	bl	8018488 <iprintf>
          extendlen = seglen;
 8010e6a:	8bfb      	ldrh	r3, [r7, #30]
 8010e6c:	87bb      	strh	r3, [r7, #60]	; 0x3c
 8010e6e:	e01a      	b.n	8010ea6 <tcp_write+0x2b2>
        } else {
          if ((concat_p = pbuf_alloc(PBUF_RAW, seglen, PBUF_ROM)) == NULL) {
 8010e70:	8bfb      	ldrh	r3, [r7, #30]
 8010e72:	2201      	movs	r2, #1
 8010e74:	4619      	mov	r1, r3
 8010e76:	2000      	movs	r0, #0
 8010e78:	f7fa fd7e 	bl	800b978 <pbuf_alloc>
 8010e7c:	6578      	str	r0, [r7, #84]	; 0x54
 8010e7e:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8010e80:	2b00      	cmp	r3, #0
 8010e82:	f000 81e0 	beq.w	8011246 <tcp_write+0x652>
            LWIP_DEBUGF(TCP_OUTPUT_DEBUG | LWIP_DBG_LEVEL_SERIOUS,
                        ("tcp_write: could not allocate memory for zero-copy pbuf\n"));
            goto memerr;
          }
          /* reference the non-volatile payload data */
          ((struct pbuf_rom *)concat_p)->payload = (const u8_t *)arg + pos;
 8010e86:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 8010e8a:	68ba      	ldr	r2, [r7, #8]
 8010e8c:	441a      	add	r2, r3
 8010e8e:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8010e90:	605a      	str	r2, [r3, #4]
          queuelen += pbuf_clen(concat_p);
 8010e92:	6d78      	ldr	r0, [r7, #84]	; 0x54
 8010e94:	f7fb f8dc 	bl	800c050 <pbuf_clen>
 8010e98:	4603      	mov	r3, r0
 8010e9a:	461a      	mov	r2, r3
 8010e9c:	f8b7 3040 	ldrh.w	r3, [r7, #64]	; 0x40
 8010ea0:	4413      	add	r3, r2
 8010ea2:	f8a7 3040 	strh.w	r3, [r7, #64]	; 0x40
                           &concat_chksum, &concat_chksum_swapped);
        concat_chksummed += seglen;
#endif /* TCP_CHECKSUM_ON_COPY */
      }

      pos += seglen;
 8010ea6:	f8b7 2042 	ldrh.w	r2, [r7, #66]	; 0x42
 8010eaa:	8bfb      	ldrh	r3, [r7, #30]
 8010eac:	4413      	add	r3, r2
 8010eae:	f8a7 3042 	strh.w	r3, [r7, #66]	; 0x42
 8010eb2:	e0dc      	b.n	801106e <tcp_write+0x47a>
    }
#endif /* !LWIP_NETIF_TX_SINGLE_PBUF */
  } else {
#if TCP_OVERSIZE
    LWIP_ASSERT("unsent_oversize mismatch (pcb->unsent is NULL)",
 8010eb4:	68fb      	ldr	r3, [r7, #12]
 8010eb6:	f8b3 3068 	ldrh.w	r3, [r3, #104]	; 0x68
 8010eba:	2b00      	cmp	r3, #0
 8010ebc:	f000 80d7 	beq.w	801106e <tcp_write+0x47a>
 8010ec0:	4b03      	ldr	r3, [pc, #12]	; (8010ed0 <tcp_write+0x2dc>)
 8010ec2:	f240 224a 	movw	r2, #586	; 0x24a
 8010ec6:	490a      	ldr	r1, [pc, #40]	; (8010ef0 <tcp_write+0x2fc>)
 8010ec8:	4803      	ldr	r0, [pc, #12]	; (8010ed8 <tcp_write+0x2e4>)
 8010eca:	f007 fadd 	bl	8018488 <iprintf>
   * Phase 3: Create new segments.
   *
   * The new segments are chained together in the local 'queue'
   * variable, ready to be appended to pcb->unsent.
   */
  while (pos < len) {
 8010ece:	e0ce      	b.n	801106e <tcp_write+0x47a>
 8010ed0:	0801aa8c 	.word	0x0801aa8c
 8010ed4:	0801ac2c 	.word	0x0801ac2c
 8010ed8:	0801aae0 	.word	0x0801aae0
 8010edc:	0801ac44 	.word	0x0801ac44
 8010ee0:	0801ac78 	.word	0x0801ac78
 8010ee4:	0801ac90 	.word	0x0801ac90
 8010ee8:	0801acb0 	.word	0x0801acb0
 8010eec:	0801acd0 	.word	0x0801acd0
 8010ef0:	0801acfc 	.word	0x0801acfc
    struct pbuf *p;
    u16_t left = len - pos;
 8010ef4:	88fa      	ldrh	r2, [r7, #6]
 8010ef6:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 8010efa:	1ad3      	subs	r3, r2, r3
 8010efc:	83bb      	strh	r3, [r7, #28]
    u16_t max_len = mss_local - optlen;
 8010efe:	f897 3022 	ldrb.w	r3, [r7, #34]	; 0x22
 8010f02:	b29b      	uxth	r3, r3
 8010f04:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 8010f06:	1ad3      	subs	r3, r2, r3
 8010f08:	837b      	strh	r3, [r7, #26]
    u16_t seglen = LWIP_MIN(left, max_len);
 8010f0a:	8b7a      	ldrh	r2, [r7, #26]
 8010f0c:	8bbb      	ldrh	r3, [r7, #28]
 8010f0e:	4293      	cmp	r3, r2
 8010f10:	bf28      	it	cs
 8010f12:	4613      	movcs	r3, r2
 8010f14:	833b      	strh	r3, [r7, #24]
#if TCP_CHECKSUM_ON_COPY
    u16_t chksum = 0;
    u8_t chksum_swapped = 0;
#endif /* TCP_CHECKSUM_ON_COPY */

    if (apiflags & TCP_WRITE_FLAG_COPY) {
 8010f16:	797b      	ldrb	r3, [r7, #5]
 8010f18:	f003 0301 	and.w	r3, r3, #1
 8010f1c:	2b00      	cmp	r3, #0
 8010f1e:	d036      	beq.n	8010f8e <tcp_write+0x39a>
      /* If copy is set, memory should be allocated and data copied
       * into pbuf */
      if ((p = tcp_pbuf_prealloc(PBUF_TRANSPORT, seglen + optlen, mss_local, &oversize, pcb, apiflags, queue == NULL)) == NULL) {
 8010f20:	f897 3022 	ldrb.w	r3, [r7, #34]	; 0x22
 8010f24:	b29a      	uxth	r2, r3
 8010f26:	8b3b      	ldrh	r3, [r7, #24]
 8010f28:	4413      	add	r3, r2
 8010f2a:	b299      	uxth	r1, r3
 8010f2c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8010f2e:	2b00      	cmp	r3, #0
 8010f30:	bf0c      	ite	eq
 8010f32:	2301      	moveq	r3, #1
 8010f34:	2300      	movne	r3, #0
 8010f36:	b2db      	uxtb	r3, r3
 8010f38:	f107 0012 	add.w	r0, r7, #18
 8010f3c:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 8010f3e:	9302      	str	r3, [sp, #8]
 8010f40:	797b      	ldrb	r3, [r7, #5]
 8010f42:	9301      	str	r3, [sp, #4]
 8010f44:	68fb      	ldr	r3, [r7, #12]
 8010f46:	9300      	str	r3, [sp, #0]
 8010f48:	4603      	mov	r3, r0
 8010f4a:	2036      	movs	r0, #54	; 0x36
 8010f4c:	f7ff fd5e 	bl	8010a0c <tcp_pbuf_prealloc>
 8010f50:	6338      	str	r0, [r7, #48]	; 0x30
 8010f52:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8010f54:	2b00      	cmp	r3, #0
 8010f56:	f000 8178 	beq.w	801124a <tcp_write+0x656>
        LWIP_DEBUGF(TCP_OUTPUT_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("tcp_write : could not allocate memory for pbuf copy size %"U16_F"\n", seglen));
        goto memerr;
      }
      LWIP_ASSERT("tcp_write: check that first pbuf can hold the complete seglen",
 8010f5a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8010f5c:	895b      	ldrh	r3, [r3, #10]
 8010f5e:	8b3a      	ldrh	r2, [r7, #24]
 8010f60:	429a      	cmp	r2, r3
 8010f62:	d906      	bls.n	8010f72 <tcp_write+0x37e>
 8010f64:	4b8c      	ldr	r3, [pc, #560]	; (8011198 <tcp_write+0x5a4>)
 8010f66:	f240 2266 	movw	r2, #614	; 0x266
 8010f6a:	498c      	ldr	r1, [pc, #560]	; (801119c <tcp_write+0x5a8>)
 8010f6c:	488c      	ldr	r0, [pc, #560]	; (80111a0 <tcp_write+0x5ac>)
 8010f6e:	f007 fa8b 	bl	8018488 <iprintf>
                  (p->len >= seglen));
      TCP_DATA_COPY2((char *)p->payload + optlen, (const u8_t *)arg + pos, seglen, &chksum, &chksum_swapped);
 8010f72:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8010f74:	685a      	ldr	r2, [r3, #4]
 8010f76:	f897 3022 	ldrb.w	r3, [r7, #34]	; 0x22
 8010f7a:	18d0      	adds	r0, r2, r3
 8010f7c:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 8010f80:	68ba      	ldr	r2, [r7, #8]
 8010f82:	4413      	add	r3, r2
 8010f84:	8b3a      	ldrh	r2, [r7, #24]
 8010f86:	4619      	mov	r1, r3
 8010f88:	f007 fb71 	bl	801866e <memcpy>
 8010f8c:	e02f      	b.n	8010fee <tcp_write+0x3fa>
       * sent out on the link (as it has to be ACKed by the remote
       * party) we can safely use PBUF_ROM instead of PBUF_REF here.
       */
      struct pbuf *p2;
#if TCP_OVERSIZE
      LWIP_ASSERT("oversize == 0", oversize == 0);
 8010f8e:	8a7b      	ldrh	r3, [r7, #18]
 8010f90:	2b00      	cmp	r3, #0
 8010f92:	d006      	beq.n	8010fa2 <tcp_write+0x3ae>
 8010f94:	4b80      	ldr	r3, [pc, #512]	; (8011198 <tcp_write+0x5a4>)
 8010f96:	f240 2271 	movw	r2, #625	; 0x271
 8010f9a:	4982      	ldr	r1, [pc, #520]	; (80111a4 <tcp_write+0x5b0>)
 8010f9c:	4880      	ldr	r0, [pc, #512]	; (80111a0 <tcp_write+0x5ac>)
 8010f9e:	f007 fa73 	bl	8018488 <iprintf>
#endif /* TCP_OVERSIZE */
      if ((p2 = pbuf_alloc(PBUF_TRANSPORT, seglen, PBUF_ROM)) == NULL) {
 8010fa2:	8b3b      	ldrh	r3, [r7, #24]
 8010fa4:	2201      	movs	r2, #1
 8010fa6:	4619      	mov	r1, r3
 8010fa8:	2036      	movs	r0, #54	; 0x36
 8010faa:	f7fa fce5 	bl	800b978 <pbuf_alloc>
 8010fae:	6178      	str	r0, [r7, #20]
 8010fb0:	697b      	ldr	r3, [r7, #20]
 8010fb2:	2b00      	cmp	r3, #0
 8010fb4:	f000 814b 	beq.w	801124e <tcp_write+0x65a>
        chksum_swapped = 1;
        chksum = SWAP_BYTES_IN_WORD(chksum);
      }
#endif /* TCP_CHECKSUM_ON_COPY */
      /* reference the non-volatile payload data */
      ((struct pbuf_rom *)p2)->payload = (const u8_t *)arg + pos;
 8010fb8:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 8010fbc:	68ba      	ldr	r2, [r7, #8]
 8010fbe:	441a      	add	r2, r3
 8010fc0:	697b      	ldr	r3, [r7, #20]
 8010fc2:	605a      	str	r2, [r3, #4]

      /* Second, allocate a pbuf for the headers. */
      if ((p = pbuf_alloc(PBUF_TRANSPORT, optlen, PBUF_RAM)) == NULL) {
 8010fc4:	f897 3022 	ldrb.w	r3, [r7, #34]	; 0x22
 8010fc8:	b29b      	uxth	r3, r3
 8010fca:	f44f 7220 	mov.w	r2, #640	; 0x280
 8010fce:	4619      	mov	r1, r3
 8010fd0:	2036      	movs	r0, #54	; 0x36
 8010fd2:	f7fa fcd1 	bl	800b978 <pbuf_alloc>
 8010fd6:	6338      	str	r0, [r7, #48]	; 0x30
 8010fd8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8010fda:	2b00      	cmp	r3, #0
 8010fdc:	d103      	bne.n	8010fe6 <tcp_write+0x3f2>
        /* If allocation fails, we have to deallocate the data pbuf as
         * well. */
        pbuf_free(p2);
 8010fde:	6978      	ldr	r0, [r7, #20]
 8010fe0:	f7fa ffae 	bl	800bf40 <pbuf_free>
        LWIP_DEBUGF(TCP_OUTPUT_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("tcp_write: could not allocate memory for header pbuf\n"));
        goto memerr;
 8010fe4:	e136      	b.n	8011254 <tcp_write+0x660>
      }
      /* Concatenate the headers and data pbufs together. */
      pbuf_cat(p/*header*/, p2/*data*/);
 8010fe6:	6979      	ldr	r1, [r7, #20]
 8010fe8:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8010fea:	f7fb f86b 	bl	800c0c4 <pbuf_cat>
    }

    queuelen += pbuf_clen(p);
 8010fee:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8010ff0:	f7fb f82e 	bl	800c050 <pbuf_clen>
 8010ff4:	4603      	mov	r3, r0
 8010ff6:	461a      	mov	r2, r3
 8010ff8:	f8b7 3040 	ldrh.w	r3, [r7, #64]	; 0x40
 8010ffc:	4413      	add	r3, r2
 8010ffe:	f8a7 3040 	strh.w	r3, [r7, #64]	; 0x40

    /* Now that there are more segments queued, we check again if the
     * length of the queue exceeds the configured maximum or
     * overflows. */
    if (queuelen > LWIP_MIN(TCP_SND_QUEUELEN, TCP_SNDQUEUELEN_OVERFLOW)) {
 8011002:	f8b7 3040 	ldrh.w	r3, [r7, #64]	; 0x40
 8011006:	2b09      	cmp	r3, #9
 8011008:	d903      	bls.n	8011012 <tcp_write+0x41e>
      LWIP_DEBUGF(TCP_OUTPUT_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("tcp_write: queue too long %"U16_F" (%d)\n",
                  queuelen, (int)TCP_SND_QUEUELEN));
      pbuf_free(p);
 801100a:	6b38      	ldr	r0, [r7, #48]	; 0x30
 801100c:	f7fa ff98 	bl	800bf40 <pbuf_free>
      goto memerr;
 8011010:	e120      	b.n	8011254 <tcp_write+0x660>
    }

    if ((seg = tcp_create_segment(pcb, p, 0, pcb->snd_lbb + pos, optflags)) == NULL) {
 8011012:	68fb      	ldr	r3, [r7, #12]
 8011014:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8011016:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 801101a:	441a      	add	r2, r3
 801101c:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8011020:	9300      	str	r3, [sp, #0]
 8011022:	4613      	mov	r3, r2
 8011024:	2200      	movs	r2, #0
 8011026:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8011028:	68f8      	ldr	r0, [r7, #12]
 801102a:	f7ff fc51 	bl	80108d0 <tcp_create_segment>
 801102e:	64f8      	str	r0, [r7, #76]	; 0x4c
 8011030:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8011032:	2b00      	cmp	r3, #0
 8011034:	f000 810d 	beq.w	8011252 <tcp_write+0x65e>
    seg->chksum_swapped = chksum_swapped;
    seg->flags |= TF_SEG_DATA_CHECKSUMMED;
#endif /* TCP_CHECKSUM_ON_COPY */

    /* first segment of to-be-queued data? */
    if (queue == NULL) {
 8011038:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 801103a:	2b00      	cmp	r3, #0
 801103c:	d102      	bne.n	8011044 <tcp_write+0x450>
      queue = seg;
 801103e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8011040:	647b      	str	r3, [r7, #68]	; 0x44
 8011042:	e00c      	b.n	801105e <tcp_write+0x46a>
    } else {
      /* Attach the segment to the end of the queued segments */
      LWIP_ASSERT("prev_seg != NULL", prev_seg != NULL);
 8011044:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8011046:	2b00      	cmp	r3, #0
 8011048:	d106      	bne.n	8011058 <tcp_write+0x464>
 801104a:	4b53      	ldr	r3, [pc, #332]	; (8011198 <tcp_write+0x5a4>)
 801104c:	f240 22ab 	movw	r2, #683	; 0x2ab
 8011050:	4955      	ldr	r1, [pc, #340]	; (80111a8 <tcp_write+0x5b4>)
 8011052:	4853      	ldr	r0, [pc, #332]	; (80111a0 <tcp_write+0x5ac>)
 8011054:	f007 fa18 	bl	8018488 <iprintf>
      prev_seg->next = seg;
 8011058:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 801105a:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 801105c:	601a      	str	r2, [r3, #0]
    }
    /* remember last segment of to-be-queued data for next iteration */
    prev_seg = seg;
 801105e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8011060:	64bb      	str	r3, [r7, #72]	; 0x48

    LWIP_DEBUGF(TCP_OUTPUT_DEBUG | LWIP_DBG_TRACE, ("tcp_write: queueing %"U32_F":%"U32_F"\n",
                lwip_ntohl(seg->tcphdr->seqno),
                lwip_ntohl(seg->tcphdr->seqno) + TCP_TCPLEN(seg)));

    pos += seglen;
 8011062:	f8b7 2042 	ldrh.w	r2, [r7, #66]	; 0x42
 8011066:	8b3b      	ldrh	r3, [r7, #24]
 8011068:	4413      	add	r3, r2
 801106a:	f8a7 3042 	strh.w	r3, [r7, #66]	; 0x42
  while (pos < len) {
 801106e:	f8b7 2042 	ldrh.w	r2, [r7, #66]	; 0x42
 8011072:	88fb      	ldrh	r3, [r7, #6]
 8011074:	429a      	cmp	r2, r3
 8011076:	f4ff af3d 	bcc.w	8010ef4 <tcp_write+0x300>
  /*
   * Phase 1: If data has been added to the preallocated tail of
   * last_unsent, we update the length fields of the pbuf chain.
   */
#if TCP_OVERSIZE
  if (oversize_used > 0) {
 801107a:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 801107c:	2b00      	cmp	r3, #0
 801107e:	d02c      	beq.n	80110da <tcp_write+0x4e6>
    struct pbuf *p;
    /* Bump tot_len of whole chain, len of tail */
    for (p = last_unsent->p; p; p = p->next) {
 8011080:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8011082:	685b      	ldr	r3, [r3, #4]
 8011084:	62fb      	str	r3, [r7, #44]	; 0x2c
 8011086:	e01e      	b.n	80110c6 <tcp_write+0x4d2>
      p->tot_len += oversize_used;
 8011088:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801108a:	891a      	ldrh	r2, [r3, #8]
 801108c:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 801108e:	4413      	add	r3, r2
 8011090:	b29a      	uxth	r2, r3
 8011092:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8011094:	811a      	strh	r2, [r3, #8]
      if (p->next == NULL) {
 8011096:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8011098:	681b      	ldr	r3, [r3, #0]
 801109a:	2b00      	cmp	r3, #0
 801109c:	d110      	bne.n	80110c0 <tcp_write+0x4cc>
        TCP_DATA_COPY((char *)p->payload + p->len, arg, oversize_used, last_unsent);
 801109e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80110a0:	685b      	ldr	r3, [r3, #4]
 80110a2:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80110a4:	8952      	ldrh	r2, [r2, #10]
 80110a6:	4413      	add	r3, r2
 80110a8:	8ffa      	ldrh	r2, [r7, #62]	; 0x3e
 80110aa:	68b9      	ldr	r1, [r7, #8]
 80110ac:	4618      	mov	r0, r3
 80110ae:	f007 fade 	bl	801866e <memcpy>
        p->len += oversize_used;
 80110b2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80110b4:	895a      	ldrh	r2, [r3, #10]
 80110b6:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 80110b8:	4413      	add	r3, r2
 80110ba:	b29a      	uxth	r2, r3
 80110bc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80110be:	815a      	strh	r2, [r3, #10]
    for (p = last_unsent->p; p; p = p->next) {
 80110c0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80110c2:	681b      	ldr	r3, [r3, #0]
 80110c4:	62fb      	str	r3, [r7, #44]	; 0x2c
 80110c6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80110c8:	2b00      	cmp	r3, #0
 80110ca:	d1dd      	bne.n	8011088 <tcp_write+0x494>
      }
    }
    last_unsent->len += oversize_used;
 80110cc:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80110ce:	891a      	ldrh	r2, [r3, #8]
 80110d0:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 80110d2:	4413      	add	r3, r2
 80110d4:	b29a      	uxth	r2, r3
 80110d6:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80110d8:	811a      	strh	r2, [r3, #8]
    LWIP_ASSERT("last_unsent->oversize_left >= oversize_used",
                last_unsent->oversize_left >= oversize_used);
    last_unsent->oversize_left -= oversize_used;
#endif /* TCP_OVERSIZE_DBGCHECK */
  }
  pcb->unsent_oversize = oversize;
 80110da:	8a7a      	ldrh	r2, [r7, #18]
 80110dc:	68fb      	ldr	r3, [r7, #12]
 80110de:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68

  /*
   * Phase 2: concat_p can be concatenated onto last_unsent->p, unless we
   * determined that the last ROM pbuf can be extended to include the new data.
   */
  if (concat_p != NULL) {
 80110e2:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80110e4:	2b00      	cmp	r3, #0
 80110e6:	d018      	beq.n	801111a <tcp_write+0x526>
    LWIP_ASSERT("tcp_write: cannot concatenate when pcb->unsent is empty",
 80110e8:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80110ea:	2b00      	cmp	r3, #0
 80110ec:	d106      	bne.n	80110fc <tcp_write+0x508>
 80110ee:	4b2a      	ldr	r3, [pc, #168]	; (8011198 <tcp_write+0x5a4>)
 80110f0:	f44f 7238 	mov.w	r2, #736	; 0x2e0
 80110f4:	492d      	ldr	r1, [pc, #180]	; (80111ac <tcp_write+0x5b8>)
 80110f6:	482a      	ldr	r0, [pc, #168]	; (80111a0 <tcp_write+0x5ac>)
 80110f8:	f007 f9c6 	bl	8018488 <iprintf>
                (last_unsent != NULL));
    pbuf_cat(last_unsent->p, concat_p);
 80110fc:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80110fe:	685b      	ldr	r3, [r3, #4]
 8011100:	6d79      	ldr	r1, [r7, #84]	; 0x54
 8011102:	4618      	mov	r0, r3
 8011104:	f7fa ffde 	bl	800c0c4 <pbuf_cat>
    last_unsent->len += concat_p->tot_len;
 8011108:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 801110a:	891a      	ldrh	r2, [r3, #8]
 801110c:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 801110e:	891b      	ldrh	r3, [r3, #8]
 8011110:	4413      	add	r3, r2
 8011112:	b29a      	uxth	r2, r3
 8011114:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8011116:	811a      	strh	r2, [r3, #8]
 8011118:	e037      	b.n	801118a <tcp_write+0x596>
  } else if (extendlen > 0) {
 801111a:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 801111c:	2b00      	cmp	r3, #0
 801111e:	d034      	beq.n	801118a <tcp_write+0x596>
    struct pbuf *p;
    LWIP_ASSERT("tcp_write: extension of reference requires reference",
 8011120:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8011122:	2b00      	cmp	r3, #0
 8011124:	d003      	beq.n	801112e <tcp_write+0x53a>
 8011126:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8011128:	685b      	ldr	r3, [r3, #4]
 801112a:	2b00      	cmp	r3, #0
 801112c:	d106      	bne.n	801113c <tcp_write+0x548>
 801112e:	4b1a      	ldr	r3, [pc, #104]	; (8011198 <tcp_write+0x5a4>)
 8011130:	f240 22e6 	movw	r2, #742	; 0x2e6
 8011134:	491e      	ldr	r1, [pc, #120]	; (80111b0 <tcp_write+0x5bc>)
 8011136:	481a      	ldr	r0, [pc, #104]	; (80111a0 <tcp_write+0x5ac>)
 8011138:	f007 f9a6 	bl	8018488 <iprintf>
                last_unsent != NULL && last_unsent->p != NULL);
    for (p = last_unsent->p; p->next != NULL; p = p->next) {
 801113c:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 801113e:	685b      	ldr	r3, [r3, #4]
 8011140:	62bb      	str	r3, [r7, #40]	; 0x28
 8011142:	e009      	b.n	8011158 <tcp_write+0x564>
      p->tot_len += extendlen;
 8011144:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8011146:	891a      	ldrh	r2, [r3, #8]
 8011148:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 801114a:	4413      	add	r3, r2
 801114c:	b29a      	uxth	r2, r3
 801114e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8011150:	811a      	strh	r2, [r3, #8]
    for (p = last_unsent->p; p->next != NULL; p = p->next) {
 8011152:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8011154:	681b      	ldr	r3, [r3, #0]
 8011156:	62bb      	str	r3, [r7, #40]	; 0x28
 8011158:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801115a:	681b      	ldr	r3, [r3, #0]
 801115c:	2b00      	cmp	r3, #0
 801115e:	d1f1      	bne.n	8011144 <tcp_write+0x550>
    }
    p->tot_len += extendlen;
 8011160:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8011162:	891a      	ldrh	r2, [r3, #8]
 8011164:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 8011166:	4413      	add	r3, r2
 8011168:	b29a      	uxth	r2, r3
 801116a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801116c:	811a      	strh	r2, [r3, #8]
    p->len += extendlen;
 801116e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8011170:	895a      	ldrh	r2, [r3, #10]
 8011172:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 8011174:	4413      	add	r3, r2
 8011176:	b29a      	uxth	r2, r3
 8011178:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801117a:	815a      	strh	r2, [r3, #10]
    last_unsent->len += extendlen;
 801117c:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 801117e:	891a      	ldrh	r2, [r3, #8]
 8011180:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 8011182:	4413      	add	r3, r2
 8011184:	b29a      	uxth	r2, r3
 8011186:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8011188:	811a      	strh	r2, [r3, #8]

  /*
   * Phase 3: Append queue to pcb->unsent. Queue may be NULL, but that
   * is harmless
   */
  if (last_unsent == NULL) {
 801118a:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 801118c:	2b00      	cmp	r3, #0
 801118e:	d111      	bne.n	80111b4 <tcp_write+0x5c0>
    pcb->unsent = queue;
 8011190:	68fb      	ldr	r3, [r7, #12]
 8011192:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8011194:	66da      	str	r2, [r3, #108]	; 0x6c
 8011196:	e010      	b.n	80111ba <tcp_write+0x5c6>
 8011198:	0801aa8c 	.word	0x0801aa8c
 801119c:	0801ad2c 	.word	0x0801ad2c
 80111a0:	0801aae0 	.word	0x0801aae0
 80111a4:	0801ad6c 	.word	0x0801ad6c
 80111a8:	0801ad7c 	.word	0x0801ad7c
 80111ac:	0801ad90 	.word	0x0801ad90
 80111b0:	0801adc8 	.word	0x0801adc8
  } else {
    last_unsent->next = queue;
 80111b4:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80111b6:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 80111b8:	601a      	str	r2, [r3, #0]
  }

  /*
   * Finally update the pcb state.
   */
  pcb->snd_lbb += len;
 80111ba:	68fb      	ldr	r3, [r7, #12]
 80111bc:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 80111be:	88fb      	ldrh	r3, [r7, #6]
 80111c0:	441a      	add	r2, r3
 80111c2:	68fb      	ldr	r3, [r7, #12]
 80111c4:	65da      	str	r2, [r3, #92]	; 0x5c
  pcb->snd_buf -= len;
 80111c6:	68fb      	ldr	r3, [r7, #12]
 80111c8:	f8b3 2064 	ldrh.w	r2, [r3, #100]	; 0x64
 80111cc:	88fb      	ldrh	r3, [r7, #6]
 80111ce:	1ad3      	subs	r3, r2, r3
 80111d0:	b29a      	uxth	r2, r3
 80111d2:	68fb      	ldr	r3, [r7, #12]
 80111d4:	f8a3 2064 	strh.w	r2, [r3, #100]	; 0x64
  pcb->snd_queuelen = queuelen;
 80111d8:	68fb      	ldr	r3, [r7, #12]
 80111da:	f8b7 2040 	ldrh.w	r2, [r7, #64]	; 0x40
 80111de:	f8a3 2066 	strh.w	r2, [r3, #102]	; 0x66

  LWIP_DEBUGF(TCP_QLEN_DEBUG, ("tcp_write: %"S16_F" (after enqueued)\n",
                               pcb->snd_queuelen));
  if (pcb->snd_queuelen != 0) {
 80111e2:	68fb      	ldr	r3, [r7, #12]
 80111e4:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 80111e8:	2b00      	cmp	r3, #0
 80111ea:	d00e      	beq.n	801120a <tcp_write+0x616>
    LWIP_ASSERT("tcp_write: valid queue length",
 80111ec:	68fb      	ldr	r3, [r7, #12]
 80111ee:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80111f0:	2b00      	cmp	r3, #0
 80111f2:	d10a      	bne.n	801120a <tcp_write+0x616>
 80111f4:	68fb      	ldr	r3, [r7, #12]
 80111f6:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80111f8:	2b00      	cmp	r3, #0
 80111fa:	d106      	bne.n	801120a <tcp_write+0x616>
 80111fc:	4b2c      	ldr	r3, [pc, #176]	; (80112b0 <tcp_write+0x6bc>)
 80111fe:	f240 3212 	movw	r2, #786	; 0x312
 8011202:	492c      	ldr	r1, [pc, #176]	; (80112b4 <tcp_write+0x6c0>)
 8011204:	482c      	ldr	r0, [pc, #176]	; (80112b8 <tcp_write+0x6c4>)
 8011206:	f007 f93f 	bl	8018488 <iprintf>
                pcb->unacked != NULL || pcb->unsent != NULL);
  }

  /* Set the PSH flag in the last segment that we enqueued. */
  if (seg != NULL && seg->tcphdr != NULL && ((apiflags & TCP_WRITE_FLAG_MORE) == 0)) {
 801120a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 801120c:	2b00      	cmp	r3, #0
 801120e:	d016      	beq.n	801123e <tcp_write+0x64a>
 8011210:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8011212:	68db      	ldr	r3, [r3, #12]
 8011214:	2b00      	cmp	r3, #0
 8011216:	d012      	beq.n	801123e <tcp_write+0x64a>
 8011218:	797b      	ldrb	r3, [r7, #5]
 801121a:	f003 0302 	and.w	r3, r3, #2
 801121e:	2b00      	cmp	r3, #0
 8011220:	d10d      	bne.n	801123e <tcp_write+0x64a>
    TCPH_SET_FLAG(seg->tcphdr, TCP_PSH);
 8011222:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8011224:	68db      	ldr	r3, [r3, #12]
 8011226:	899b      	ldrh	r3, [r3, #12]
 8011228:	b29c      	uxth	r4, r3
 801122a:	2008      	movs	r0, #8
 801122c:	f7f9 f830 	bl	800a290 <lwip_htons>
 8011230:	4603      	mov	r3, r0
 8011232:	461a      	mov	r2, r3
 8011234:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8011236:	68db      	ldr	r3, [r3, #12]
 8011238:	4322      	orrs	r2, r4
 801123a:	b292      	uxth	r2, r2
 801123c:	819a      	strh	r2, [r3, #12]
  }

  return ERR_OK;
 801123e:	2300      	movs	r3, #0
 8011240:	e031      	b.n	80112a6 <tcp_write+0x6b2>
          goto memerr;
 8011242:	bf00      	nop
 8011244:	e006      	b.n	8011254 <tcp_write+0x660>
            goto memerr;
 8011246:	bf00      	nop
 8011248:	e004      	b.n	8011254 <tcp_write+0x660>
        goto memerr;
 801124a:	bf00      	nop
 801124c:	e002      	b.n	8011254 <tcp_write+0x660>
        goto memerr;
 801124e:	bf00      	nop
 8011250:	e000      	b.n	8011254 <tcp_write+0x660>
      goto memerr;
 8011252:	bf00      	nop
memerr:
  tcp_set_flags(pcb, TF_NAGLEMEMERR);
 8011254:	68fb      	ldr	r3, [r7, #12]
 8011256:	8b5b      	ldrh	r3, [r3, #26]
 8011258:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 801125c:	b29a      	uxth	r2, r3
 801125e:	68fb      	ldr	r3, [r7, #12]
 8011260:	835a      	strh	r2, [r3, #26]
  TCP_STATS_INC(tcp.memerr);

  if (concat_p != NULL) {
 8011262:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8011264:	2b00      	cmp	r3, #0
 8011266:	d002      	beq.n	801126e <tcp_write+0x67a>
    pbuf_free(concat_p);
 8011268:	6d78      	ldr	r0, [r7, #84]	; 0x54
 801126a:	f7fa fe69 	bl	800bf40 <pbuf_free>
  }
  if (queue != NULL) {
 801126e:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8011270:	2b00      	cmp	r3, #0
 8011272:	d002      	beq.n	801127a <tcp_write+0x686>
    tcp_segs_free(queue);
 8011274:	6c78      	ldr	r0, [r7, #68]	; 0x44
 8011276:	f7fc fb89 	bl	800d98c <tcp_segs_free>
  }
  if (pcb->snd_queuelen != 0) {
 801127a:	68fb      	ldr	r3, [r7, #12]
 801127c:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 8011280:	2b00      	cmp	r3, #0
 8011282:	d00e      	beq.n	80112a2 <tcp_write+0x6ae>
    LWIP_ASSERT("tcp_write: valid queue length", pcb->unacked != NULL ||
 8011284:	68fb      	ldr	r3, [r7, #12]
 8011286:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8011288:	2b00      	cmp	r3, #0
 801128a:	d10a      	bne.n	80112a2 <tcp_write+0x6ae>
 801128c:	68fb      	ldr	r3, [r7, #12]
 801128e:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8011290:	2b00      	cmp	r3, #0
 8011292:	d106      	bne.n	80112a2 <tcp_write+0x6ae>
 8011294:	4b06      	ldr	r3, [pc, #24]	; (80112b0 <tcp_write+0x6bc>)
 8011296:	f240 3227 	movw	r2, #807	; 0x327
 801129a:	4906      	ldr	r1, [pc, #24]	; (80112b4 <tcp_write+0x6c0>)
 801129c:	4806      	ldr	r0, [pc, #24]	; (80112b8 <tcp_write+0x6c4>)
 801129e:	f007 f8f3 	bl	8018488 <iprintf>
                pcb->unsent != NULL);
  }
  LWIP_DEBUGF(TCP_QLEN_DEBUG | LWIP_DBG_STATE, ("tcp_write: %"S16_F" (with mem err)\n", pcb->snd_queuelen));
  return ERR_MEM;
 80112a2:	f04f 33ff 	mov.w	r3, #4294967295
}
 80112a6:	4618      	mov	r0, r3
 80112a8:	375c      	adds	r7, #92	; 0x5c
 80112aa:	46bd      	mov	sp, r7
 80112ac:	bd90      	pop	{r4, r7, pc}
 80112ae:	bf00      	nop
 80112b0:	0801aa8c 	.word	0x0801aa8c
 80112b4:	0801ae00 	.word	0x0801ae00
 80112b8:	0801aae0 	.word	0x0801aae0

080112bc <tcp_split_unsent_seg>:
 * @param pcb the tcp_pcb for which to split the unsent head
 * @param split the amount of payload to remain in the head
 */
err_t
tcp_split_unsent_seg(struct tcp_pcb *pcb, u16_t split)
{
 80112bc:	b590      	push	{r4, r7, lr}
 80112be:	b08b      	sub	sp, #44	; 0x2c
 80112c0:	af02      	add	r7, sp, #8
 80112c2:	6078      	str	r0, [r7, #4]
 80112c4:	460b      	mov	r3, r1
 80112c6:	807b      	strh	r3, [r7, #2]
  struct tcp_seg *seg = NULL, *useg = NULL;
 80112c8:	2300      	movs	r3, #0
 80112ca:	61fb      	str	r3, [r7, #28]
 80112cc:	2300      	movs	r3, #0
 80112ce:	617b      	str	r3, [r7, #20]
  struct pbuf *p = NULL;
 80112d0:	2300      	movs	r3, #0
 80112d2:	613b      	str	r3, [r7, #16]
  u16_t chksum = 0;
  u8_t chksum_swapped = 0;
  struct pbuf *q;
#endif /* TCP_CHECKSUM_ON_COPY */

  LWIP_ASSERT("tcp_split_unsent_seg: invalid pcb", pcb != NULL);
 80112d4:	687b      	ldr	r3, [r7, #4]
 80112d6:	2b00      	cmp	r3, #0
 80112d8:	d106      	bne.n	80112e8 <tcp_split_unsent_seg+0x2c>
 80112da:	4b95      	ldr	r3, [pc, #596]	; (8011530 <tcp_split_unsent_seg+0x274>)
 80112dc:	f240 324b 	movw	r2, #843	; 0x34b
 80112e0:	4994      	ldr	r1, [pc, #592]	; (8011534 <tcp_split_unsent_seg+0x278>)
 80112e2:	4895      	ldr	r0, [pc, #596]	; (8011538 <tcp_split_unsent_seg+0x27c>)
 80112e4:	f007 f8d0 	bl	8018488 <iprintf>

  useg = pcb->unsent;
 80112e8:	687b      	ldr	r3, [r7, #4]
 80112ea:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80112ec:	617b      	str	r3, [r7, #20]
  if (useg == NULL) {
 80112ee:	697b      	ldr	r3, [r7, #20]
 80112f0:	2b00      	cmp	r3, #0
 80112f2:	d102      	bne.n	80112fa <tcp_split_unsent_seg+0x3e>
    return ERR_MEM;
 80112f4:	f04f 33ff 	mov.w	r3, #4294967295
 80112f8:	e116      	b.n	8011528 <tcp_split_unsent_seg+0x26c>
  }

  if (split == 0) {
 80112fa:	887b      	ldrh	r3, [r7, #2]
 80112fc:	2b00      	cmp	r3, #0
 80112fe:	d109      	bne.n	8011314 <tcp_split_unsent_seg+0x58>
    LWIP_ASSERT("Can't split segment into length 0", 0);
 8011300:	4b8b      	ldr	r3, [pc, #556]	; (8011530 <tcp_split_unsent_seg+0x274>)
 8011302:	f240 3253 	movw	r2, #851	; 0x353
 8011306:	498d      	ldr	r1, [pc, #564]	; (801153c <tcp_split_unsent_seg+0x280>)
 8011308:	488b      	ldr	r0, [pc, #556]	; (8011538 <tcp_split_unsent_seg+0x27c>)
 801130a:	f007 f8bd 	bl	8018488 <iprintf>
    return ERR_VAL;
 801130e:	f06f 0305 	mvn.w	r3, #5
 8011312:	e109      	b.n	8011528 <tcp_split_unsent_seg+0x26c>
  }

  if (useg->len <= split) {
 8011314:	697b      	ldr	r3, [r7, #20]
 8011316:	891b      	ldrh	r3, [r3, #8]
 8011318:	887a      	ldrh	r2, [r7, #2]
 801131a:	429a      	cmp	r2, r3
 801131c:	d301      	bcc.n	8011322 <tcp_split_unsent_seg+0x66>
    return ERR_OK;
 801131e:	2300      	movs	r3, #0
 8011320:	e102      	b.n	8011528 <tcp_split_unsent_seg+0x26c>
  }

  LWIP_ASSERT("split <= mss", split <= pcb->mss);
 8011322:	687b      	ldr	r3, [r7, #4]
 8011324:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8011326:	887a      	ldrh	r2, [r7, #2]
 8011328:	429a      	cmp	r2, r3
 801132a:	d906      	bls.n	801133a <tcp_split_unsent_seg+0x7e>
 801132c:	4b80      	ldr	r3, [pc, #512]	; (8011530 <tcp_split_unsent_seg+0x274>)
 801132e:	f240 325b 	movw	r2, #859	; 0x35b
 8011332:	4983      	ldr	r1, [pc, #524]	; (8011540 <tcp_split_unsent_seg+0x284>)
 8011334:	4880      	ldr	r0, [pc, #512]	; (8011538 <tcp_split_unsent_seg+0x27c>)
 8011336:	f007 f8a7 	bl	8018488 <iprintf>
  LWIP_ASSERT("useg->len > 0", useg->len > 0);
 801133a:	697b      	ldr	r3, [r7, #20]
 801133c:	891b      	ldrh	r3, [r3, #8]
 801133e:	2b00      	cmp	r3, #0
 8011340:	d106      	bne.n	8011350 <tcp_split_unsent_seg+0x94>
 8011342:	4b7b      	ldr	r3, [pc, #492]	; (8011530 <tcp_split_unsent_seg+0x274>)
 8011344:	f44f 7257 	mov.w	r2, #860	; 0x35c
 8011348:	497e      	ldr	r1, [pc, #504]	; (8011544 <tcp_split_unsent_seg+0x288>)
 801134a:	487b      	ldr	r0, [pc, #492]	; (8011538 <tcp_split_unsent_seg+0x27c>)
 801134c:	f007 f89c 	bl	8018488 <iprintf>
   * to split this packet so we may actually exceed the max value by
   * one!
   */
  LWIP_DEBUGF(TCP_QLEN_DEBUG, ("tcp_enqueue: split_unsent_seg: %u\n", (unsigned int)pcb->snd_queuelen));

  optflags = useg->flags;
 8011350:	697b      	ldr	r3, [r7, #20]
 8011352:	7a9b      	ldrb	r3, [r3, #10]
 8011354:	73fb      	strb	r3, [r7, #15]
#if TCP_CHECKSUM_ON_COPY
  /* Remove since checksum is not stored until after tcp_create_segment() */
  optflags &= ~TF_SEG_DATA_CHECKSUMMED;
#endif /* TCP_CHECKSUM_ON_COPY */
  optlen = LWIP_TCP_OPT_LENGTH(optflags);
 8011356:	7bfb      	ldrb	r3, [r7, #15]
 8011358:	009b      	lsls	r3, r3, #2
 801135a:	b2db      	uxtb	r3, r3
 801135c:	f003 0304 	and.w	r3, r3, #4
 8011360:	73bb      	strb	r3, [r7, #14]
  remainder = useg->len - split;
 8011362:	697b      	ldr	r3, [r7, #20]
 8011364:	891a      	ldrh	r2, [r3, #8]
 8011366:	887b      	ldrh	r3, [r7, #2]
 8011368:	1ad3      	subs	r3, r2, r3
 801136a:	81bb      	strh	r3, [r7, #12]

  /* Create new pbuf for the remainder of the split */
  p = pbuf_alloc(PBUF_TRANSPORT, remainder + optlen, PBUF_RAM);
 801136c:	7bbb      	ldrb	r3, [r7, #14]
 801136e:	b29a      	uxth	r2, r3
 8011370:	89bb      	ldrh	r3, [r7, #12]
 8011372:	4413      	add	r3, r2
 8011374:	b29b      	uxth	r3, r3
 8011376:	f44f 7220 	mov.w	r2, #640	; 0x280
 801137a:	4619      	mov	r1, r3
 801137c:	2036      	movs	r0, #54	; 0x36
 801137e:	f7fa fafb 	bl	800b978 <pbuf_alloc>
 8011382:	6138      	str	r0, [r7, #16]
  if (p == NULL) {
 8011384:	693b      	ldr	r3, [r7, #16]
 8011386:	2b00      	cmp	r3, #0
 8011388:	f000 80b7 	beq.w	80114fa <tcp_split_unsent_seg+0x23e>
                ("tcp_split_unsent_seg: could not allocate memory for pbuf remainder %u\n", remainder));
    goto memerr;
  }

  /* Offset into the original pbuf is past TCP/IP headers, options, and split amount */
  offset = useg->p->tot_len - useg->len + split;
 801138c:	697b      	ldr	r3, [r7, #20]
 801138e:	685b      	ldr	r3, [r3, #4]
 8011390:	891a      	ldrh	r2, [r3, #8]
 8011392:	697b      	ldr	r3, [r7, #20]
 8011394:	891b      	ldrh	r3, [r3, #8]
 8011396:	1ad3      	subs	r3, r2, r3
 8011398:	b29a      	uxth	r2, r3
 801139a:	887b      	ldrh	r3, [r7, #2]
 801139c:	4413      	add	r3, r2
 801139e:	817b      	strh	r3, [r7, #10]
  /* Copy remainder into new pbuf, headers and options will not be filled out */
  if (pbuf_copy_partial(useg->p, (u8_t *)p->payload + optlen, remainder, offset ) != remainder) {
 80113a0:	697b      	ldr	r3, [r7, #20]
 80113a2:	6858      	ldr	r0, [r3, #4]
 80113a4:	693b      	ldr	r3, [r7, #16]
 80113a6:	685a      	ldr	r2, [r3, #4]
 80113a8:	7bbb      	ldrb	r3, [r7, #14]
 80113aa:	18d1      	adds	r1, r2, r3
 80113ac:	897b      	ldrh	r3, [r7, #10]
 80113ae:	89ba      	ldrh	r2, [r7, #12]
 80113b0:	f7fa ffc0 	bl	800c334 <pbuf_copy_partial>
 80113b4:	4603      	mov	r3, r0
 80113b6:	461a      	mov	r2, r3
 80113b8:	89bb      	ldrh	r3, [r7, #12]
 80113ba:	4293      	cmp	r3, r2
 80113bc:	f040 809f 	bne.w	80114fe <tcp_split_unsent_seg+0x242>
#endif /* TCP_CHECKSUM_ON_COPY */

  /* Options are created when calling tcp_output() */

  /* Migrate flags from original segment */
  split_flags = TCPH_FLAGS(useg->tcphdr);
 80113c0:	697b      	ldr	r3, [r7, #20]
 80113c2:	68db      	ldr	r3, [r3, #12]
 80113c4:	899b      	ldrh	r3, [r3, #12]
 80113c6:	b29b      	uxth	r3, r3
 80113c8:	4618      	mov	r0, r3
 80113ca:	f7f8 ff61 	bl	800a290 <lwip_htons>
 80113ce:	4603      	mov	r3, r0
 80113d0:	b2db      	uxtb	r3, r3
 80113d2:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80113d6:	76fb      	strb	r3, [r7, #27]
  remainder_flags = 0; /* ACK added in tcp_output() */
 80113d8:	2300      	movs	r3, #0
 80113da:	76bb      	strb	r3, [r7, #26]

  if (split_flags & TCP_PSH) {
 80113dc:	7efb      	ldrb	r3, [r7, #27]
 80113de:	f003 0308 	and.w	r3, r3, #8
 80113e2:	2b00      	cmp	r3, #0
 80113e4:	d007      	beq.n	80113f6 <tcp_split_unsent_seg+0x13a>
    split_flags &= ~TCP_PSH;
 80113e6:	7efb      	ldrb	r3, [r7, #27]
 80113e8:	f023 0308 	bic.w	r3, r3, #8
 80113ec:	76fb      	strb	r3, [r7, #27]
    remainder_flags |= TCP_PSH;
 80113ee:	7ebb      	ldrb	r3, [r7, #26]
 80113f0:	f043 0308 	orr.w	r3, r3, #8
 80113f4:	76bb      	strb	r3, [r7, #26]
  }
  if (split_flags & TCP_FIN) {
 80113f6:	7efb      	ldrb	r3, [r7, #27]
 80113f8:	f003 0301 	and.w	r3, r3, #1
 80113fc:	2b00      	cmp	r3, #0
 80113fe:	d007      	beq.n	8011410 <tcp_split_unsent_seg+0x154>
    split_flags &= ~TCP_FIN;
 8011400:	7efb      	ldrb	r3, [r7, #27]
 8011402:	f023 0301 	bic.w	r3, r3, #1
 8011406:	76fb      	strb	r3, [r7, #27]
    remainder_flags |= TCP_FIN;
 8011408:	7ebb      	ldrb	r3, [r7, #26]
 801140a:	f043 0301 	orr.w	r3, r3, #1
 801140e:	76bb      	strb	r3, [r7, #26]
  }
  /* SYN should be left on split, RST should not be present with data */

  seg = tcp_create_segment(pcb, p, remainder_flags, lwip_ntohl(useg->tcphdr->seqno) + split, optflags);
 8011410:	697b      	ldr	r3, [r7, #20]
 8011412:	68db      	ldr	r3, [r3, #12]
 8011414:	685b      	ldr	r3, [r3, #4]
 8011416:	4618      	mov	r0, r3
 8011418:	f7f8 ff4f 	bl	800a2ba <lwip_htonl>
 801141c:	4602      	mov	r2, r0
 801141e:	887b      	ldrh	r3, [r7, #2]
 8011420:	18d1      	adds	r1, r2, r3
 8011422:	7eba      	ldrb	r2, [r7, #26]
 8011424:	7bfb      	ldrb	r3, [r7, #15]
 8011426:	9300      	str	r3, [sp, #0]
 8011428:	460b      	mov	r3, r1
 801142a:	6939      	ldr	r1, [r7, #16]
 801142c:	6878      	ldr	r0, [r7, #4]
 801142e:	f7ff fa4f 	bl	80108d0 <tcp_create_segment>
 8011432:	61f8      	str	r0, [r7, #28]
  if (seg == NULL) {
 8011434:	69fb      	ldr	r3, [r7, #28]
 8011436:	2b00      	cmp	r3, #0
 8011438:	d063      	beq.n	8011502 <tcp_split_unsent_seg+0x246>
  seg->chksum_swapped = chksum_swapped;
  seg->flags |= TF_SEG_DATA_CHECKSUMMED;
#endif /* TCP_CHECKSUM_ON_COPY */

  /* Remove this segment from the queue since trimming it may free pbufs */
  pcb->snd_queuelen -= pbuf_clen(useg->p);
 801143a:	697b      	ldr	r3, [r7, #20]
 801143c:	685b      	ldr	r3, [r3, #4]
 801143e:	4618      	mov	r0, r3
 8011440:	f7fa fe06 	bl	800c050 <pbuf_clen>
 8011444:	4603      	mov	r3, r0
 8011446:	461a      	mov	r2, r3
 8011448:	687b      	ldr	r3, [r7, #4]
 801144a:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 801144e:	1a9b      	subs	r3, r3, r2
 8011450:	b29a      	uxth	r2, r3
 8011452:	687b      	ldr	r3, [r7, #4]
 8011454:	f8a3 2066 	strh.w	r2, [r3, #102]	; 0x66

  /* Trim the original pbuf into our split size.  At this point our remainder segment must be setup
  successfully because we are modifying the original segment */
  pbuf_realloc(useg->p, useg->p->tot_len - remainder);
 8011458:	697b      	ldr	r3, [r7, #20]
 801145a:	6858      	ldr	r0, [r3, #4]
 801145c:	697b      	ldr	r3, [r7, #20]
 801145e:	685b      	ldr	r3, [r3, #4]
 8011460:	891a      	ldrh	r2, [r3, #8]
 8011462:	89bb      	ldrh	r3, [r7, #12]
 8011464:	1ad3      	subs	r3, r2, r3
 8011466:	b29b      	uxth	r3, r3
 8011468:	4619      	mov	r1, r3
 801146a:	f7fa fbe3 	bl	800bc34 <pbuf_realloc>
  useg->len -= remainder;
 801146e:	697b      	ldr	r3, [r7, #20]
 8011470:	891a      	ldrh	r2, [r3, #8]
 8011472:	89bb      	ldrh	r3, [r7, #12]
 8011474:	1ad3      	subs	r3, r2, r3
 8011476:	b29a      	uxth	r2, r3
 8011478:	697b      	ldr	r3, [r7, #20]
 801147a:	811a      	strh	r2, [r3, #8]
  TCPH_SET_FLAG(useg->tcphdr, split_flags);
 801147c:	697b      	ldr	r3, [r7, #20]
 801147e:	68db      	ldr	r3, [r3, #12]
 8011480:	899b      	ldrh	r3, [r3, #12]
 8011482:	b29c      	uxth	r4, r3
 8011484:	7efb      	ldrb	r3, [r7, #27]
 8011486:	b29b      	uxth	r3, r3
 8011488:	4618      	mov	r0, r3
 801148a:	f7f8 ff01 	bl	800a290 <lwip_htons>
 801148e:	4603      	mov	r3, r0
 8011490:	461a      	mov	r2, r3
 8011492:	697b      	ldr	r3, [r7, #20]
 8011494:	68db      	ldr	r3, [r3, #12]
 8011496:	4322      	orrs	r2, r4
 8011498:	b292      	uxth	r2, r2
 801149a:	819a      	strh	r2, [r3, #12]
  /* By trimming, realloc may have actually shrunk the pbuf, so clear oversize_left */
  useg->oversize_left = 0;
#endif /* TCP_OVERSIZE_DBGCHECK */

  /* Add back to the queue with new trimmed pbuf */
  pcb->snd_queuelen += pbuf_clen(useg->p);
 801149c:	697b      	ldr	r3, [r7, #20]
 801149e:	685b      	ldr	r3, [r3, #4]
 80114a0:	4618      	mov	r0, r3
 80114a2:	f7fa fdd5 	bl	800c050 <pbuf_clen>
 80114a6:	4603      	mov	r3, r0
 80114a8:	461a      	mov	r2, r3
 80114aa:	687b      	ldr	r3, [r7, #4]
 80114ac:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 80114b0:	4413      	add	r3, r2
 80114b2:	b29a      	uxth	r2, r3
 80114b4:	687b      	ldr	r3, [r7, #4]
 80114b6:	f8a3 2066 	strh.w	r2, [r3, #102]	; 0x66
#endif /* TCP_CHECKSUM_ON_COPY */

  /* Update number of segments on the queues. Note that length now may
   * exceed TCP_SND_QUEUELEN! We don't have to touch pcb->snd_buf
   * because the total amount of data is constant when packet is split */
  pcb->snd_queuelen += pbuf_clen(seg->p);
 80114ba:	69fb      	ldr	r3, [r7, #28]
 80114bc:	685b      	ldr	r3, [r3, #4]
 80114be:	4618      	mov	r0, r3
 80114c0:	f7fa fdc6 	bl	800c050 <pbuf_clen>
 80114c4:	4603      	mov	r3, r0
 80114c6:	461a      	mov	r2, r3
 80114c8:	687b      	ldr	r3, [r7, #4]
 80114ca:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 80114ce:	4413      	add	r3, r2
 80114d0:	b29a      	uxth	r2, r3
 80114d2:	687b      	ldr	r3, [r7, #4]
 80114d4:	f8a3 2066 	strh.w	r2, [r3, #102]	; 0x66

  /* Finally insert remainder into queue after split (which stays head) */
  seg->next = useg->next;
 80114d8:	697b      	ldr	r3, [r7, #20]
 80114da:	681a      	ldr	r2, [r3, #0]
 80114dc:	69fb      	ldr	r3, [r7, #28]
 80114de:	601a      	str	r2, [r3, #0]
  useg->next = seg;
 80114e0:	697b      	ldr	r3, [r7, #20]
 80114e2:	69fa      	ldr	r2, [r7, #28]
 80114e4:	601a      	str	r2, [r3, #0]

#if TCP_OVERSIZE
  /* If remainder is last segment on the unsent, ensure we clear the oversize amount
   * because the remainder is always sized to the exact remaining amount */
  if (seg->next == NULL) {
 80114e6:	69fb      	ldr	r3, [r7, #28]
 80114e8:	681b      	ldr	r3, [r3, #0]
 80114ea:	2b00      	cmp	r3, #0
 80114ec:	d103      	bne.n	80114f6 <tcp_split_unsent_seg+0x23a>
    pcb->unsent_oversize = 0;
 80114ee:	687b      	ldr	r3, [r7, #4]
 80114f0:	2200      	movs	r2, #0
 80114f2:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
  }
#endif /* TCP_OVERSIZE */

  return ERR_OK;
 80114f6:	2300      	movs	r3, #0
 80114f8:	e016      	b.n	8011528 <tcp_split_unsent_seg+0x26c>
    goto memerr;
 80114fa:	bf00      	nop
 80114fc:	e002      	b.n	8011504 <tcp_split_unsent_seg+0x248>
    goto memerr;
 80114fe:	bf00      	nop
 8011500:	e000      	b.n	8011504 <tcp_split_unsent_seg+0x248>
    goto memerr;
 8011502:	bf00      	nop
memerr:
  TCP_STATS_INC(tcp.memerr);

  LWIP_ASSERT("seg == NULL", seg == NULL);
 8011504:	69fb      	ldr	r3, [r7, #28]
 8011506:	2b00      	cmp	r3, #0
 8011508:	d006      	beq.n	8011518 <tcp_split_unsent_seg+0x25c>
 801150a:	4b09      	ldr	r3, [pc, #36]	; (8011530 <tcp_split_unsent_seg+0x274>)
 801150c:	f44f 7276 	mov.w	r2, #984	; 0x3d8
 8011510:	490d      	ldr	r1, [pc, #52]	; (8011548 <tcp_split_unsent_seg+0x28c>)
 8011512:	4809      	ldr	r0, [pc, #36]	; (8011538 <tcp_split_unsent_seg+0x27c>)
 8011514:	f006 ffb8 	bl	8018488 <iprintf>
  if (p != NULL) {
 8011518:	693b      	ldr	r3, [r7, #16]
 801151a:	2b00      	cmp	r3, #0
 801151c:	d002      	beq.n	8011524 <tcp_split_unsent_seg+0x268>
    pbuf_free(p);
 801151e:	6938      	ldr	r0, [r7, #16]
 8011520:	f7fa fd0e 	bl	800bf40 <pbuf_free>
  }

  return ERR_MEM;
 8011524:	f04f 33ff 	mov.w	r3, #4294967295
}
 8011528:	4618      	mov	r0, r3
 801152a:	3724      	adds	r7, #36	; 0x24
 801152c:	46bd      	mov	sp, r7
 801152e:	bd90      	pop	{r4, r7, pc}
 8011530:	0801aa8c 	.word	0x0801aa8c
 8011534:	0801ae20 	.word	0x0801ae20
 8011538:	0801aae0 	.word	0x0801aae0
 801153c:	0801ae44 	.word	0x0801ae44
 8011540:	0801ae68 	.word	0x0801ae68
 8011544:	0801ae78 	.word	0x0801ae78
 8011548:	0801ae88 	.word	0x0801ae88

0801154c <tcp_send_fin>:
 * @param pcb the tcp_pcb over which to send a segment
 * @return ERR_OK if sent, another err_t otherwise
 */
err_t
tcp_send_fin(struct tcp_pcb *pcb)
{
 801154c:	b590      	push	{r4, r7, lr}
 801154e:	b085      	sub	sp, #20
 8011550:	af00      	add	r7, sp, #0
 8011552:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_send_fin: invalid pcb", pcb != NULL);
 8011554:	687b      	ldr	r3, [r7, #4]
 8011556:	2b00      	cmp	r3, #0
 8011558:	d106      	bne.n	8011568 <tcp_send_fin+0x1c>
 801155a:	4b21      	ldr	r3, [pc, #132]	; (80115e0 <tcp_send_fin+0x94>)
 801155c:	f240 32eb 	movw	r2, #1003	; 0x3eb
 8011560:	4920      	ldr	r1, [pc, #128]	; (80115e4 <tcp_send_fin+0x98>)
 8011562:	4821      	ldr	r0, [pc, #132]	; (80115e8 <tcp_send_fin+0x9c>)
 8011564:	f006 ff90 	bl	8018488 <iprintf>

  /* first, try to add the fin to the last unsent segment */
  if (pcb->unsent != NULL) {
 8011568:	687b      	ldr	r3, [r7, #4]
 801156a:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 801156c:	2b00      	cmp	r3, #0
 801156e:	d02e      	beq.n	80115ce <tcp_send_fin+0x82>
    struct tcp_seg *last_unsent;
    for (last_unsent = pcb->unsent; last_unsent->next != NULL;
 8011570:	687b      	ldr	r3, [r7, #4]
 8011572:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8011574:	60fb      	str	r3, [r7, #12]
 8011576:	e002      	b.n	801157e <tcp_send_fin+0x32>
         last_unsent = last_unsent->next);
 8011578:	68fb      	ldr	r3, [r7, #12]
 801157a:	681b      	ldr	r3, [r3, #0]
 801157c:	60fb      	str	r3, [r7, #12]
    for (last_unsent = pcb->unsent; last_unsent->next != NULL;
 801157e:	68fb      	ldr	r3, [r7, #12]
 8011580:	681b      	ldr	r3, [r3, #0]
 8011582:	2b00      	cmp	r3, #0
 8011584:	d1f8      	bne.n	8011578 <tcp_send_fin+0x2c>

    if ((TCPH_FLAGS(last_unsent->tcphdr) & (TCP_SYN | TCP_FIN | TCP_RST)) == 0) {
 8011586:	68fb      	ldr	r3, [r7, #12]
 8011588:	68db      	ldr	r3, [r3, #12]
 801158a:	899b      	ldrh	r3, [r3, #12]
 801158c:	b29b      	uxth	r3, r3
 801158e:	4618      	mov	r0, r3
 8011590:	f7f8 fe7e 	bl	800a290 <lwip_htons>
 8011594:	4603      	mov	r3, r0
 8011596:	b2db      	uxtb	r3, r3
 8011598:	f003 0307 	and.w	r3, r3, #7
 801159c:	2b00      	cmp	r3, #0
 801159e:	d116      	bne.n	80115ce <tcp_send_fin+0x82>
      /* no SYN/FIN/RST flag in the header, we can add the FIN flag */
      TCPH_SET_FLAG(last_unsent->tcphdr, TCP_FIN);
 80115a0:	68fb      	ldr	r3, [r7, #12]
 80115a2:	68db      	ldr	r3, [r3, #12]
 80115a4:	899b      	ldrh	r3, [r3, #12]
 80115a6:	b29c      	uxth	r4, r3
 80115a8:	2001      	movs	r0, #1
 80115aa:	f7f8 fe71 	bl	800a290 <lwip_htons>
 80115ae:	4603      	mov	r3, r0
 80115b0:	461a      	mov	r2, r3
 80115b2:	68fb      	ldr	r3, [r7, #12]
 80115b4:	68db      	ldr	r3, [r3, #12]
 80115b6:	4322      	orrs	r2, r4
 80115b8:	b292      	uxth	r2, r2
 80115ba:	819a      	strh	r2, [r3, #12]
      tcp_set_flags(pcb, TF_FIN);
 80115bc:	687b      	ldr	r3, [r7, #4]
 80115be:	8b5b      	ldrh	r3, [r3, #26]
 80115c0:	f043 0320 	orr.w	r3, r3, #32
 80115c4:	b29a      	uxth	r2, r3
 80115c6:	687b      	ldr	r3, [r7, #4]
 80115c8:	835a      	strh	r2, [r3, #26]
      return ERR_OK;
 80115ca:	2300      	movs	r3, #0
 80115cc:	e004      	b.n	80115d8 <tcp_send_fin+0x8c>
    }
  }
  /* no data, no length, flags, copy=1, no optdata */
  return tcp_enqueue_flags(pcb, TCP_FIN);
 80115ce:	2101      	movs	r1, #1
 80115d0:	6878      	ldr	r0, [r7, #4]
 80115d2:	f000 f80b 	bl	80115ec <tcp_enqueue_flags>
 80115d6:	4603      	mov	r3, r0
}
 80115d8:	4618      	mov	r0, r3
 80115da:	3714      	adds	r7, #20
 80115dc:	46bd      	mov	sp, r7
 80115de:	bd90      	pop	{r4, r7, pc}
 80115e0:	0801aa8c 	.word	0x0801aa8c
 80115e4:	0801ae94 	.word	0x0801ae94
 80115e8:	0801aae0 	.word	0x0801aae0

080115ec <tcp_enqueue_flags>:
 * @param pcb Protocol control block for the TCP connection.
 * @param flags TCP header flags to set in the outgoing segment.
 */
err_t
tcp_enqueue_flags(struct tcp_pcb *pcb, u8_t flags)
{
 80115ec:	b580      	push	{r7, lr}
 80115ee:	b08a      	sub	sp, #40	; 0x28
 80115f0:	af02      	add	r7, sp, #8
 80115f2:	6078      	str	r0, [r7, #4]
 80115f4:	460b      	mov	r3, r1
 80115f6:	70fb      	strb	r3, [r7, #3]
  struct pbuf *p;
  struct tcp_seg *seg;
  u8_t optflags = 0;
 80115f8:	2300      	movs	r3, #0
 80115fa:	77fb      	strb	r3, [r7, #31]
  u8_t optlen = 0;
 80115fc:	2300      	movs	r3, #0
 80115fe:	75fb      	strb	r3, [r7, #23]

  LWIP_DEBUGF(TCP_QLEN_DEBUG, ("tcp_enqueue_flags: queuelen: %"U16_F"\n", (u16_t)pcb->snd_queuelen));

  LWIP_ASSERT("tcp_enqueue_flags: need either TCP_SYN or TCP_FIN in flags (programmer violates API)",
 8011600:	78fb      	ldrb	r3, [r7, #3]
 8011602:	f003 0303 	and.w	r3, r3, #3
 8011606:	2b00      	cmp	r3, #0
 8011608:	d106      	bne.n	8011618 <tcp_enqueue_flags+0x2c>
 801160a:	4b67      	ldr	r3, [pc, #412]	; (80117a8 <tcp_enqueue_flags+0x1bc>)
 801160c:	f240 4211 	movw	r2, #1041	; 0x411
 8011610:	4966      	ldr	r1, [pc, #408]	; (80117ac <tcp_enqueue_flags+0x1c0>)
 8011612:	4867      	ldr	r0, [pc, #412]	; (80117b0 <tcp_enqueue_flags+0x1c4>)
 8011614:	f006 ff38 	bl	8018488 <iprintf>
              (flags & (TCP_SYN | TCP_FIN)) != 0);
  LWIP_ASSERT("tcp_enqueue_flags: invalid pcb", pcb != NULL);
 8011618:	687b      	ldr	r3, [r7, #4]
 801161a:	2b00      	cmp	r3, #0
 801161c:	d106      	bne.n	801162c <tcp_enqueue_flags+0x40>
 801161e:	4b62      	ldr	r3, [pc, #392]	; (80117a8 <tcp_enqueue_flags+0x1bc>)
 8011620:	f240 4213 	movw	r2, #1043	; 0x413
 8011624:	4963      	ldr	r1, [pc, #396]	; (80117b4 <tcp_enqueue_flags+0x1c8>)
 8011626:	4862      	ldr	r0, [pc, #392]	; (80117b0 <tcp_enqueue_flags+0x1c4>)
 8011628:	f006 ff2e 	bl	8018488 <iprintf>

  /* No need to check pcb->snd_queuelen if only SYN or FIN are allowed! */

  /* Get options for this segment. This is a special case since this is the
     only place where a SYN can be sent. */
  if (flags & TCP_SYN) {
 801162c:	78fb      	ldrb	r3, [r7, #3]
 801162e:	f003 0302 	and.w	r3, r3, #2
 8011632:	2b00      	cmp	r3, #0
 8011634:	d001      	beq.n	801163a <tcp_enqueue_flags+0x4e>
    optflags = TF_SEG_OPTS_MSS;
 8011636:	2301      	movs	r3, #1
 8011638:	77fb      	strb	r3, [r7, #31]
    /* Make sure the timestamp option is only included in data segments if we
       agreed about it with the remote host (and in active open SYN segments). */
    optflags |= TF_SEG_OPTS_TS;
  }
#endif /* LWIP_TCP_TIMESTAMPS */
  optlen = LWIP_TCP_OPT_LENGTH_SEGMENT(optflags, pcb);
 801163a:	7ffb      	ldrb	r3, [r7, #31]
 801163c:	009b      	lsls	r3, r3, #2
 801163e:	b2db      	uxtb	r3, r3
 8011640:	f003 0304 	and.w	r3, r3, #4
 8011644:	75fb      	strb	r3, [r7, #23]

  /* Allocate pbuf with room for TCP header + options */
  if ((p = pbuf_alloc(PBUF_TRANSPORT, optlen, PBUF_RAM)) == NULL) {
 8011646:	7dfb      	ldrb	r3, [r7, #23]
 8011648:	b29b      	uxth	r3, r3
 801164a:	f44f 7220 	mov.w	r2, #640	; 0x280
 801164e:	4619      	mov	r1, r3
 8011650:	2036      	movs	r0, #54	; 0x36
 8011652:	f7fa f991 	bl	800b978 <pbuf_alloc>
 8011656:	6138      	str	r0, [r7, #16]
 8011658:	693b      	ldr	r3, [r7, #16]
 801165a:	2b00      	cmp	r3, #0
 801165c:	d109      	bne.n	8011672 <tcp_enqueue_flags+0x86>
    tcp_set_flags(pcb, TF_NAGLEMEMERR);
 801165e:	687b      	ldr	r3, [r7, #4]
 8011660:	8b5b      	ldrh	r3, [r3, #26]
 8011662:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8011666:	b29a      	uxth	r2, r3
 8011668:	687b      	ldr	r3, [r7, #4]
 801166a:	835a      	strh	r2, [r3, #26]
    TCP_STATS_INC(tcp.memerr);
    return ERR_MEM;
 801166c:	f04f 33ff 	mov.w	r3, #4294967295
 8011670:	e095      	b.n	801179e <tcp_enqueue_flags+0x1b2>
  }
  LWIP_ASSERT("tcp_enqueue_flags: check that first pbuf can hold optlen",
 8011672:	693b      	ldr	r3, [r7, #16]
 8011674:	895a      	ldrh	r2, [r3, #10]
 8011676:	7dfb      	ldrb	r3, [r7, #23]
 8011678:	b29b      	uxth	r3, r3
 801167a:	429a      	cmp	r2, r3
 801167c:	d206      	bcs.n	801168c <tcp_enqueue_flags+0xa0>
 801167e:	4b4a      	ldr	r3, [pc, #296]	; (80117a8 <tcp_enqueue_flags+0x1bc>)
 8011680:	f240 4239 	movw	r2, #1081	; 0x439
 8011684:	494c      	ldr	r1, [pc, #304]	; (80117b8 <tcp_enqueue_flags+0x1cc>)
 8011686:	484a      	ldr	r0, [pc, #296]	; (80117b0 <tcp_enqueue_flags+0x1c4>)
 8011688:	f006 fefe 	bl	8018488 <iprintf>
              (p->len >= optlen));

  /* Allocate memory for tcp_seg, and fill in fields. */
  if ((seg = tcp_create_segment(pcb, p, flags, pcb->snd_lbb, optflags)) == NULL) {
 801168c:	687b      	ldr	r3, [r7, #4]
 801168e:	6dd9      	ldr	r1, [r3, #92]	; 0x5c
 8011690:	78fa      	ldrb	r2, [r7, #3]
 8011692:	7ffb      	ldrb	r3, [r7, #31]
 8011694:	9300      	str	r3, [sp, #0]
 8011696:	460b      	mov	r3, r1
 8011698:	6939      	ldr	r1, [r7, #16]
 801169a:	6878      	ldr	r0, [r7, #4]
 801169c:	f7ff f918 	bl	80108d0 <tcp_create_segment>
 80116a0:	60f8      	str	r0, [r7, #12]
 80116a2:	68fb      	ldr	r3, [r7, #12]
 80116a4:	2b00      	cmp	r3, #0
 80116a6:	d109      	bne.n	80116bc <tcp_enqueue_flags+0xd0>
    tcp_set_flags(pcb, TF_NAGLEMEMERR);
 80116a8:	687b      	ldr	r3, [r7, #4]
 80116aa:	8b5b      	ldrh	r3, [r3, #26]
 80116ac:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80116b0:	b29a      	uxth	r2, r3
 80116b2:	687b      	ldr	r3, [r7, #4]
 80116b4:	835a      	strh	r2, [r3, #26]
    TCP_STATS_INC(tcp.memerr);
    return ERR_MEM;
 80116b6:	f04f 33ff 	mov.w	r3, #4294967295
 80116ba:	e070      	b.n	801179e <tcp_enqueue_flags+0x1b2>
  }
  LWIP_ASSERT("seg->tcphdr not aligned", ((mem_ptr_t)seg->tcphdr % LWIP_MIN(MEM_ALIGNMENT, 4)) == 0);
 80116bc:	68fb      	ldr	r3, [r7, #12]
 80116be:	68db      	ldr	r3, [r3, #12]
 80116c0:	f003 0303 	and.w	r3, r3, #3
 80116c4:	2b00      	cmp	r3, #0
 80116c6:	d006      	beq.n	80116d6 <tcp_enqueue_flags+0xea>
 80116c8:	4b37      	ldr	r3, [pc, #220]	; (80117a8 <tcp_enqueue_flags+0x1bc>)
 80116ca:	f240 4242 	movw	r2, #1090	; 0x442
 80116ce:	493b      	ldr	r1, [pc, #236]	; (80117bc <tcp_enqueue_flags+0x1d0>)
 80116d0:	4837      	ldr	r0, [pc, #220]	; (80117b0 <tcp_enqueue_flags+0x1c4>)
 80116d2:	f006 fed9 	bl	8018488 <iprintf>
  LWIP_ASSERT("tcp_enqueue_flags: invalid segment length", seg->len == 0);
 80116d6:	68fb      	ldr	r3, [r7, #12]
 80116d8:	891b      	ldrh	r3, [r3, #8]
 80116da:	2b00      	cmp	r3, #0
 80116dc:	d006      	beq.n	80116ec <tcp_enqueue_flags+0x100>
 80116de:	4b32      	ldr	r3, [pc, #200]	; (80117a8 <tcp_enqueue_flags+0x1bc>)
 80116e0:	f240 4243 	movw	r2, #1091	; 0x443
 80116e4:	4936      	ldr	r1, [pc, #216]	; (80117c0 <tcp_enqueue_flags+0x1d4>)
 80116e6:	4832      	ldr	r0, [pc, #200]	; (80117b0 <tcp_enqueue_flags+0x1c4>)
 80116e8:	f006 fece 	bl	8018488 <iprintf>
               lwip_ntohl(seg->tcphdr->seqno),
               lwip_ntohl(seg->tcphdr->seqno) + TCP_TCPLEN(seg),
               (u16_t)flags));

  /* Now append seg to pcb->unsent queue */
  if (pcb->unsent == NULL) {
 80116ec:	687b      	ldr	r3, [r7, #4]
 80116ee:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80116f0:	2b00      	cmp	r3, #0
 80116f2:	d103      	bne.n	80116fc <tcp_enqueue_flags+0x110>
    pcb->unsent = seg;
 80116f4:	687b      	ldr	r3, [r7, #4]
 80116f6:	68fa      	ldr	r2, [r7, #12]
 80116f8:	66da      	str	r2, [r3, #108]	; 0x6c
 80116fa:	e00d      	b.n	8011718 <tcp_enqueue_flags+0x12c>
  } else {
    struct tcp_seg *useg;
    for (useg = pcb->unsent; useg->next != NULL; useg = useg->next);
 80116fc:	687b      	ldr	r3, [r7, #4]
 80116fe:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8011700:	61bb      	str	r3, [r7, #24]
 8011702:	e002      	b.n	801170a <tcp_enqueue_flags+0x11e>
 8011704:	69bb      	ldr	r3, [r7, #24]
 8011706:	681b      	ldr	r3, [r3, #0]
 8011708:	61bb      	str	r3, [r7, #24]
 801170a:	69bb      	ldr	r3, [r7, #24]
 801170c:	681b      	ldr	r3, [r3, #0]
 801170e:	2b00      	cmp	r3, #0
 8011710:	d1f8      	bne.n	8011704 <tcp_enqueue_flags+0x118>
    useg->next = seg;
 8011712:	69bb      	ldr	r3, [r7, #24]
 8011714:	68fa      	ldr	r2, [r7, #12]
 8011716:	601a      	str	r2, [r3, #0]
  }
#if TCP_OVERSIZE
  /* The new unsent tail has no space */
  pcb->unsent_oversize = 0;
 8011718:	687b      	ldr	r3, [r7, #4]
 801171a:	2200      	movs	r2, #0
 801171c:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
#endif /* TCP_OVERSIZE */

  /* SYN and FIN bump the sequence number */
  if ((flags & TCP_SYN) || (flags & TCP_FIN)) {
 8011720:	78fb      	ldrb	r3, [r7, #3]
 8011722:	f003 0302 	and.w	r3, r3, #2
 8011726:	2b00      	cmp	r3, #0
 8011728:	d104      	bne.n	8011734 <tcp_enqueue_flags+0x148>
 801172a:	78fb      	ldrb	r3, [r7, #3]
 801172c:	f003 0301 	and.w	r3, r3, #1
 8011730:	2b00      	cmp	r3, #0
 8011732:	d004      	beq.n	801173e <tcp_enqueue_flags+0x152>
    pcb->snd_lbb++;
 8011734:	687b      	ldr	r3, [r7, #4]
 8011736:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8011738:	1c5a      	adds	r2, r3, #1
 801173a:	687b      	ldr	r3, [r7, #4]
 801173c:	65da      	str	r2, [r3, #92]	; 0x5c
    /* optlen does not influence snd_buf */
  }
  if (flags & TCP_FIN) {
 801173e:	78fb      	ldrb	r3, [r7, #3]
 8011740:	f003 0301 	and.w	r3, r3, #1
 8011744:	2b00      	cmp	r3, #0
 8011746:	d006      	beq.n	8011756 <tcp_enqueue_flags+0x16a>
    tcp_set_flags(pcb, TF_FIN);
 8011748:	687b      	ldr	r3, [r7, #4]
 801174a:	8b5b      	ldrh	r3, [r3, #26]
 801174c:	f043 0320 	orr.w	r3, r3, #32
 8011750:	b29a      	uxth	r2, r3
 8011752:	687b      	ldr	r3, [r7, #4]
 8011754:	835a      	strh	r2, [r3, #26]
  }

  /* update number of segments on the queues */
  pcb->snd_queuelen += pbuf_clen(seg->p);
 8011756:	68fb      	ldr	r3, [r7, #12]
 8011758:	685b      	ldr	r3, [r3, #4]
 801175a:	4618      	mov	r0, r3
 801175c:	f7fa fc78 	bl	800c050 <pbuf_clen>
 8011760:	4603      	mov	r3, r0
 8011762:	461a      	mov	r2, r3
 8011764:	687b      	ldr	r3, [r7, #4]
 8011766:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 801176a:	4413      	add	r3, r2
 801176c:	b29a      	uxth	r2, r3
 801176e:	687b      	ldr	r3, [r7, #4]
 8011770:	f8a3 2066 	strh.w	r2, [r3, #102]	; 0x66
  LWIP_DEBUGF(TCP_QLEN_DEBUG, ("tcp_enqueue_flags: %"S16_F" (after enqueued)\n", pcb->snd_queuelen));
  if (pcb->snd_queuelen != 0) {
 8011774:	687b      	ldr	r3, [r7, #4]
 8011776:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 801177a:	2b00      	cmp	r3, #0
 801177c:	d00e      	beq.n	801179c <tcp_enqueue_flags+0x1b0>
    LWIP_ASSERT("tcp_enqueue_flags: invalid queue length",
 801177e:	687b      	ldr	r3, [r7, #4]
 8011780:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8011782:	2b00      	cmp	r3, #0
 8011784:	d10a      	bne.n	801179c <tcp_enqueue_flags+0x1b0>
 8011786:	687b      	ldr	r3, [r7, #4]
 8011788:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 801178a:	2b00      	cmp	r3, #0
 801178c:	d106      	bne.n	801179c <tcp_enqueue_flags+0x1b0>
 801178e:	4b06      	ldr	r3, [pc, #24]	; (80117a8 <tcp_enqueue_flags+0x1bc>)
 8011790:	f240 4265 	movw	r2, #1125	; 0x465
 8011794:	490b      	ldr	r1, [pc, #44]	; (80117c4 <tcp_enqueue_flags+0x1d8>)
 8011796:	4806      	ldr	r0, [pc, #24]	; (80117b0 <tcp_enqueue_flags+0x1c4>)
 8011798:	f006 fe76 	bl	8018488 <iprintf>
                pcb->unacked != NULL || pcb->unsent != NULL);
  }

  return ERR_OK;
 801179c:	2300      	movs	r3, #0
}
 801179e:	4618      	mov	r0, r3
 80117a0:	3720      	adds	r7, #32
 80117a2:	46bd      	mov	sp, r7
 80117a4:	bd80      	pop	{r7, pc}
 80117a6:	bf00      	nop
 80117a8:	0801aa8c 	.word	0x0801aa8c
 80117ac:	0801aeb0 	.word	0x0801aeb0
 80117b0:	0801aae0 	.word	0x0801aae0
 80117b4:	0801af08 	.word	0x0801af08
 80117b8:	0801af28 	.word	0x0801af28
 80117bc:	0801af64 	.word	0x0801af64
 80117c0:	0801af7c 	.word	0x0801af7c
 80117c4:	0801afa8 	.word	0x0801afa8

080117c8 <tcp_output>:
 * @return ERR_OK if data has been sent or nothing to send
 *         another err_t on error
 */
err_t
tcp_output(struct tcp_pcb *pcb)
{
 80117c8:	b5b0      	push	{r4, r5, r7, lr}
 80117ca:	b08a      	sub	sp, #40	; 0x28
 80117cc:	af00      	add	r7, sp, #0
 80117ce:	6078      	str	r0, [r7, #4]
  s16_t i = 0;
#endif /* TCP_CWND_DEBUG */

  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ASSERT("tcp_output: invalid pcb", pcb != NULL);
 80117d0:	687b      	ldr	r3, [r7, #4]
 80117d2:	2b00      	cmp	r3, #0
 80117d4:	d106      	bne.n	80117e4 <tcp_output+0x1c>
 80117d6:	4b8a      	ldr	r3, [pc, #552]	; (8011a00 <tcp_output+0x238>)
 80117d8:	f240 42e1 	movw	r2, #1249	; 0x4e1
 80117dc:	4989      	ldr	r1, [pc, #548]	; (8011a04 <tcp_output+0x23c>)
 80117de:	488a      	ldr	r0, [pc, #552]	; (8011a08 <tcp_output+0x240>)
 80117e0:	f006 fe52 	bl	8018488 <iprintf>
  /* pcb->state LISTEN not allowed here */
  LWIP_ASSERT("don't call tcp_output for listen-pcbs",
 80117e4:	687b      	ldr	r3, [r7, #4]
 80117e6:	7d1b      	ldrb	r3, [r3, #20]
 80117e8:	2b01      	cmp	r3, #1
 80117ea:	d106      	bne.n	80117fa <tcp_output+0x32>
 80117ec:	4b84      	ldr	r3, [pc, #528]	; (8011a00 <tcp_output+0x238>)
 80117ee:	f240 42e3 	movw	r2, #1251	; 0x4e3
 80117f2:	4986      	ldr	r1, [pc, #536]	; (8011a0c <tcp_output+0x244>)
 80117f4:	4884      	ldr	r0, [pc, #528]	; (8011a08 <tcp_output+0x240>)
 80117f6:	f006 fe47 	bl	8018488 <iprintf>

  /* First, check if we are invoked by the TCP input processing
     code. If so, we do not output anything. Instead, we rely on the
     input processing code to call us when input processing is done
     with. */
  if (tcp_input_pcb == pcb) {
 80117fa:	4b85      	ldr	r3, [pc, #532]	; (8011a10 <tcp_output+0x248>)
 80117fc:	681b      	ldr	r3, [r3, #0]
 80117fe:	687a      	ldr	r2, [r7, #4]
 8011800:	429a      	cmp	r2, r3
 8011802:	d101      	bne.n	8011808 <tcp_output+0x40>
    return ERR_OK;
 8011804:	2300      	movs	r3, #0
 8011806:	e1ce      	b.n	8011ba6 <tcp_output+0x3de>
  }

  wnd = LWIP_MIN(pcb->snd_wnd, pcb->cwnd);
 8011808:	687b      	ldr	r3, [r7, #4]
 801180a:	f8b3 2048 	ldrh.w	r2, [r3, #72]	; 0x48
 801180e:	687b      	ldr	r3, [r7, #4]
 8011810:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 8011814:	4293      	cmp	r3, r2
 8011816:	bf28      	it	cs
 8011818:	4613      	movcs	r3, r2
 801181a:	b29b      	uxth	r3, r3
 801181c:	61bb      	str	r3, [r7, #24]

  seg = pcb->unsent;
 801181e:	687b      	ldr	r3, [r7, #4]
 8011820:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8011822:	627b      	str	r3, [r7, #36]	; 0x24

  if (seg == NULL) {
 8011824:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8011826:	2b00      	cmp	r3, #0
 8011828:	d10b      	bne.n	8011842 <tcp_output+0x7a>
                                 ", seg == NULL, ack %"U32_F"\n",
                                 pcb->snd_wnd, pcb->cwnd, wnd, pcb->lastack));

    /* If the TF_ACK_NOW flag is set and the ->unsent queue is empty, construct
     * an empty ACK segment and send it. */
    if (pcb->flags & TF_ACK_NOW) {
 801182a:	687b      	ldr	r3, [r7, #4]
 801182c:	8b5b      	ldrh	r3, [r3, #26]
 801182e:	f003 0302 	and.w	r3, r3, #2
 8011832:	2b00      	cmp	r3, #0
 8011834:	f000 81aa 	beq.w	8011b8c <tcp_output+0x3c4>
      return tcp_send_empty_ack(pcb);
 8011838:	6878      	ldr	r0, [r7, #4]
 801183a:	f000 fdcb 	bl	80123d4 <tcp_send_empty_ack>
 801183e:	4603      	mov	r3, r0
 8011840:	e1b1      	b.n	8011ba6 <tcp_output+0x3de>
                 pcb->snd_wnd, pcb->cwnd, wnd,
                 lwip_ntohl(seg->tcphdr->seqno) - pcb->lastack + seg->len,
                 lwip_ntohl(seg->tcphdr->seqno), pcb->lastack));
  }

  netif = tcp_route(pcb, &pcb->local_ip, &pcb->remote_ip);
 8011842:	6879      	ldr	r1, [r7, #4]
 8011844:	687b      	ldr	r3, [r7, #4]
 8011846:	3304      	adds	r3, #4
 8011848:	461a      	mov	r2, r3
 801184a:	6878      	ldr	r0, [r7, #4]
 801184c:	f7ff f824 	bl	8010898 <tcp_route>
 8011850:	6178      	str	r0, [r7, #20]
  if (netif == NULL) {
 8011852:	697b      	ldr	r3, [r7, #20]
 8011854:	2b00      	cmp	r3, #0
 8011856:	d102      	bne.n	801185e <tcp_output+0x96>
    return ERR_RTE;
 8011858:	f06f 0303 	mvn.w	r3, #3
 801185c:	e1a3      	b.n	8011ba6 <tcp_output+0x3de>
  }

  /* If we don't have a local IP address, we get one from netif */
  if (ip_addr_isany(&pcb->local_ip)) {
 801185e:	687b      	ldr	r3, [r7, #4]
 8011860:	2b00      	cmp	r3, #0
 8011862:	d003      	beq.n	801186c <tcp_output+0xa4>
 8011864:	687b      	ldr	r3, [r7, #4]
 8011866:	681b      	ldr	r3, [r3, #0]
 8011868:	2b00      	cmp	r3, #0
 801186a:	d111      	bne.n	8011890 <tcp_output+0xc8>
    const ip_addr_t *local_ip = ip_netif_get_local_ip(netif, &pcb->remote_ip);
 801186c:	697b      	ldr	r3, [r7, #20]
 801186e:	2b00      	cmp	r3, #0
 8011870:	d002      	beq.n	8011878 <tcp_output+0xb0>
 8011872:	697b      	ldr	r3, [r7, #20]
 8011874:	3304      	adds	r3, #4
 8011876:	e000      	b.n	801187a <tcp_output+0xb2>
 8011878:	2300      	movs	r3, #0
 801187a:	613b      	str	r3, [r7, #16]
    if (local_ip == NULL) {
 801187c:	693b      	ldr	r3, [r7, #16]
 801187e:	2b00      	cmp	r3, #0
 8011880:	d102      	bne.n	8011888 <tcp_output+0xc0>
      return ERR_RTE;
 8011882:	f06f 0303 	mvn.w	r3, #3
 8011886:	e18e      	b.n	8011ba6 <tcp_output+0x3de>
    }
    ip_addr_copy(pcb->local_ip, *local_ip);
 8011888:	693b      	ldr	r3, [r7, #16]
 801188a:	681a      	ldr	r2, [r3, #0]
 801188c:	687b      	ldr	r3, [r7, #4]
 801188e:	601a      	str	r2, [r3, #0]
  }

  /* Handle the current segment not fitting within the window */
  if (lwip_ntohl(seg->tcphdr->seqno) - pcb->lastack + seg->len > wnd) {
 8011890:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8011892:	68db      	ldr	r3, [r3, #12]
 8011894:	685b      	ldr	r3, [r3, #4]
 8011896:	4618      	mov	r0, r3
 8011898:	f7f8 fd0f 	bl	800a2ba <lwip_htonl>
 801189c:	4602      	mov	r2, r0
 801189e:	687b      	ldr	r3, [r7, #4]
 80118a0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80118a2:	1ad3      	subs	r3, r2, r3
 80118a4:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80118a6:	8912      	ldrh	r2, [r2, #8]
 80118a8:	4413      	add	r3, r2
 80118aa:	69ba      	ldr	r2, [r7, #24]
 80118ac:	429a      	cmp	r2, r3
 80118ae:	d227      	bcs.n	8011900 <tcp_output+0x138>
     * within the remaining (could be 0) send window and RTO timer is not running (we
     * have no in-flight data). If window is still too small after persist timer fires,
     * then we split the segment. We don't consider the congestion window since a cwnd
     * smaller than 1 SMSS implies in-flight data
     */
    if (wnd == pcb->snd_wnd && pcb->unacked == NULL && pcb->persist_backoff == 0) {
 80118b0:	687b      	ldr	r3, [r7, #4]
 80118b2:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 80118b6:	461a      	mov	r2, r3
 80118b8:	69bb      	ldr	r3, [r7, #24]
 80118ba:	4293      	cmp	r3, r2
 80118bc:	d114      	bne.n	80118e8 <tcp_output+0x120>
 80118be:	687b      	ldr	r3, [r7, #4]
 80118c0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80118c2:	2b00      	cmp	r3, #0
 80118c4:	d110      	bne.n	80118e8 <tcp_output+0x120>
 80118c6:	687b      	ldr	r3, [r7, #4]
 80118c8:	f893 3099 	ldrb.w	r3, [r3, #153]	; 0x99
 80118cc:	2b00      	cmp	r3, #0
 80118ce:	d10b      	bne.n	80118e8 <tcp_output+0x120>
      pcb->persist_cnt = 0;
 80118d0:	687b      	ldr	r3, [r7, #4]
 80118d2:	2200      	movs	r2, #0
 80118d4:	f883 2098 	strb.w	r2, [r3, #152]	; 0x98
      pcb->persist_backoff = 1;
 80118d8:	687b      	ldr	r3, [r7, #4]
 80118da:	2201      	movs	r2, #1
 80118dc:	f883 2099 	strb.w	r2, [r3, #153]	; 0x99
      pcb->persist_probe = 0;
 80118e0:	687b      	ldr	r3, [r7, #4]
 80118e2:	2200      	movs	r2, #0
 80118e4:	f883 209a 	strb.w	r2, [r3, #154]	; 0x9a
    }
    /* We need an ACK, but can't send data now, so send an empty ACK */
    if (pcb->flags & TF_ACK_NOW) {
 80118e8:	687b      	ldr	r3, [r7, #4]
 80118ea:	8b5b      	ldrh	r3, [r3, #26]
 80118ec:	f003 0302 	and.w	r3, r3, #2
 80118f0:	2b00      	cmp	r3, #0
 80118f2:	f000 814d 	beq.w	8011b90 <tcp_output+0x3c8>
      return tcp_send_empty_ack(pcb);
 80118f6:	6878      	ldr	r0, [r7, #4]
 80118f8:	f000 fd6c 	bl	80123d4 <tcp_send_empty_ack>
 80118fc:	4603      	mov	r3, r0
 80118fe:	e152      	b.n	8011ba6 <tcp_output+0x3de>
    }
    goto output_done;
  }
  /* Stop persist timer, above conditions are not active */
  pcb->persist_backoff = 0;
 8011900:	687b      	ldr	r3, [r7, #4]
 8011902:	2200      	movs	r2, #0
 8011904:	f883 2099 	strb.w	r2, [r3, #153]	; 0x99

  /* useg should point to last segment on unacked queue */
  useg = pcb->unacked;
 8011908:	687b      	ldr	r3, [r7, #4]
 801190a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 801190c:	623b      	str	r3, [r7, #32]
  if (useg != NULL) {
 801190e:	6a3b      	ldr	r3, [r7, #32]
 8011910:	2b00      	cmp	r3, #0
 8011912:	f000 811c 	beq.w	8011b4e <tcp_output+0x386>
    for (; useg->next != NULL; useg = useg->next);
 8011916:	e002      	b.n	801191e <tcp_output+0x156>
 8011918:	6a3b      	ldr	r3, [r7, #32]
 801191a:	681b      	ldr	r3, [r3, #0]
 801191c:	623b      	str	r3, [r7, #32]
 801191e:	6a3b      	ldr	r3, [r7, #32]
 8011920:	681b      	ldr	r3, [r3, #0]
 8011922:	2b00      	cmp	r3, #0
 8011924:	d1f8      	bne.n	8011918 <tcp_output+0x150>
  }
  /* data available and window allows it to be sent? */
  while (seg != NULL &&
 8011926:	e112      	b.n	8011b4e <tcp_output+0x386>
         lwip_ntohl(seg->tcphdr->seqno) - pcb->lastack + seg->len <= wnd) {
    LWIP_ASSERT("RST not expected here!",
 8011928:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801192a:	68db      	ldr	r3, [r3, #12]
 801192c:	899b      	ldrh	r3, [r3, #12]
 801192e:	b29b      	uxth	r3, r3
 8011930:	4618      	mov	r0, r3
 8011932:	f7f8 fcad 	bl	800a290 <lwip_htons>
 8011936:	4603      	mov	r3, r0
 8011938:	b2db      	uxtb	r3, r3
 801193a:	f003 0304 	and.w	r3, r3, #4
 801193e:	2b00      	cmp	r3, #0
 8011940:	d006      	beq.n	8011950 <tcp_output+0x188>
 8011942:	4b2f      	ldr	r3, [pc, #188]	; (8011a00 <tcp_output+0x238>)
 8011944:	f240 5236 	movw	r2, #1334	; 0x536
 8011948:	4932      	ldr	r1, [pc, #200]	; (8011a14 <tcp_output+0x24c>)
 801194a:	482f      	ldr	r0, [pc, #188]	; (8011a08 <tcp_output+0x240>)
 801194c:	f006 fd9c 	bl	8018488 <iprintf>
     * - if tcp_write had a memory error before (prevent delayed ACK timeout) or
     * - if FIN was already enqueued for this PCB (SYN is always alone in a segment -
     *   either seg->next != NULL or pcb->unacked == NULL;
     *   RST is no sent using tcp_write/tcp_output.
     */
    if ((tcp_do_output_nagle(pcb) == 0) &&
 8011950:	687b      	ldr	r3, [r7, #4]
 8011952:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8011954:	2b00      	cmp	r3, #0
 8011956:	d01f      	beq.n	8011998 <tcp_output+0x1d0>
 8011958:	687b      	ldr	r3, [r7, #4]
 801195a:	8b5b      	ldrh	r3, [r3, #26]
 801195c:	f003 0344 	and.w	r3, r3, #68	; 0x44
 8011960:	2b00      	cmp	r3, #0
 8011962:	d119      	bne.n	8011998 <tcp_output+0x1d0>
 8011964:	687b      	ldr	r3, [r7, #4]
 8011966:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8011968:	2b00      	cmp	r3, #0
 801196a:	d00b      	beq.n	8011984 <tcp_output+0x1bc>
 801196c:	687b      	ldr	r3, [r7, #4]
 801196e:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8011970:	681b      	ldr	r3, [r3, #0]
 8011972:	2b00      	cmp	r3, #0
 8011974:	d110      	bne.n	8011998 <tcp_output+0x1d0>
 8011976:	687b      	ldr	r3, [r7, #4]
 8011978:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 801197a:	891a      	ldrh	r2, [r3, #8]
 801197c:	687b      	ldr	r3, [r7, #4]
 801197e:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8011980:	429a      	cmp	r2, r3
 8011982:	d209      	bcs.n	8011998 <tcp_output+0x1d0>
 8011984:	687b      	ldr	r3, [r7, #4]
 8011986:	f8b3 3064 	ldrh.w	r3, [r3, #100]	; 0x64
 801198a:	2b00      	cmp	r3, #0
 801198c:	d004      	beq.n	8011998 <tcp_output+0x1d0>
 801198e:	687b      	ldr	r3, [r7, #4]
 8011990:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 8011994:	2b08      	cmp	r3, #8
 8011996:	d901      	bls.n	801199c <tcp_output+0x1d4>
 8011998:	2301      	movs	r3, #1
 801199a:	e000      	b.n	801199e <tcp_output+0x1d6>
 801199c:	2300      	movs	r3, #0
 801199e:	2b00      	cmp	r3, #0
 80119a0:	d106      	bne.n	80119b0 <tcp_output+0x1e8>
        ((pcb->flags & (TF_NAGLEMEMERR | TF_FIN)) == 0)) {
 80119a2:	687b      	ldr	r3, [r7, #4]
 80119a4:	8b5b      	ldrh	r3, [r3, #26]
 80119a6:	f003 03a0 	and.w	r3, r3, #160	; 0xa0
    if ((tcp_do_output_nagle(pcb) == 0) &&
 80119aa:	2b00      	cmp	r3, #0
 80119ac:	f000 80e4 	beq.w	8011b78 <tcp_output+0x3b0>
                                 pcb->lastack,
                                 lwip_ntohl(seg->tcphdr->seqno), pcb->lastack, i));
    ++i;
#endif /* TCP_CWND_DEBUG */

    if (pcb->state != SYN_SENT) {
 80119b0:	687b      	ldr	r3, [r7, #4]
 80119b2:	7d1b      	ldrb	r3, [r3, #20]
 80119b4:	2b02      	cmp	r3, #2
 80119b6:	d00d      	beq.n	80119d4 <tcp_output+0x20c>
      TCPH_SET_FLAG(seg->tcphdr, TCP_ACK);
 80119b8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80119ba:	68db      	ldr	r3, [r3, #12]
 80119bc:	899b      	ldrh	r3, [r3, #12]
 80119be:	b29c      	uxth	r4, r3
 80119c0:	2010      	movs	r0, #16
 80119c2:	f7f8 fc65 	bl	800a290 <lwip_htons>
 80119c6:	4603      	mov	r3, r0
 80119c8:	461a      	mov	r2, r3
 80119ca:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80119cc:	68db      	ldr	r3, [r3, #12]
 80119ce:	4322      	orrs	r2, r4
 80119d0:	b292      	uxth	r2, r2
 80119d2:	819a      	strh	r2, [r3, #12]
    }

    err = tcp_output_segment(seg, pcb, netif);
 80119d4:	697a      	ldr	r2, [r7, #20]
 80119d6:	6879      	ldr	r1, [r7, #4]
 80119d8:	6a78      	ldr	r0, [r7, #36]	; 0x24
 80119da:	f000 f909 	bl	8011bf0 <tcp_output_segment>
 80119de:	4603      	mov	r3, r0
 80119e0:	73fb      	strb	r3, [r7, #15]
    if (err != ERR_OK) {
 80119e2:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80119e6:	2b00      	cmp	r3, #0
 80119e8:	d016      	beq.n	8011a18 <tcp_output+0x250>
      /* segment could not be sent, for whatever reason */
      tcp_set_flags(pcb, TF_NAGLEMEMERR);
 80119ea:	687b      	ldr	r3, [r7, #4]
 80119ec:	8b5b      	ldrh	r3, [r3, #26]
 80119ee:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80119f2:	b29a      	uxth	r2, r3
 80119f4:	687b      	ldr	r3, [r7, #4]
 80119f6:	835a      	strh	r2, [r3, #26]
      return err;
 80119f8:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80119fc:	e0d3      	b.n	8011ba6 <tcp_output+0x3de>
 80119fe:	bf00      	nop
 8011a00:	0801aa8c 	.word	0x0801aa8c
 8011a04:	0801afd0 	.word	0x0801afd0
 8011a08:	0801aae0 	.word	0x0801aae0
 8011a0c:	0801afe8 	.word	0x0801afe8
 8011a10:	20008968 	.word	0x20008968
 8011a14:	0801b010 	.word	0x0801b010
    }
#if TCP_OVERSIZE_DBGCHECK
    seg->oversize_left = 0;
#endif /* TCP_OVERSIZE_DBGCHECK */
    pcb->unsent = seg->next;
 8011a18:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8011a1a:	681a      	ldr	r2, [r3, #0]
 8011a1c:	687b      	ldr	r3, [r7, #4]
 8011a1e:	66da      	str	r2, [r3, #108]	; 0x6c
    if (pcb->state != SYN_SENT) {
 8011a20:	687b      	ldr	r3, [r7, #4]
 8011a22:	7d1b      	ldrb	r3, [r3, #20]
 8011a24:	2b02      	cmp	r3, #2
 8011a26:	d006      	beq.n	8011a36 <tcp_output+0x26e>
      tcp_clear_flags(pcb, TF_ACK_DELAY | TF_ACK_NOW);
 8011a28:	687b      	ldr	r3, [r7, #4]
 8011a2a:	8b5b      	ldrh	r3, [r3, #26]
 8011a2c:	f023 0303 	bic.w	r3, r3, #3
 8011a30:	b29a      	uxth	r2, r3
 8011a32:	687b      	ldr	r3, [r7, #4]
 8011a34:	835a      	strh	r2, [r3, #26]
    }
    snd_nxt = lwip_ntohl(seg->tcphdr->seqno) + TCP_TCPLEN(seg);
 8011a36:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8011a38:	68db      	ldr	r3, [r3, #12]
 8011a3a:	685b      	ldr	r3, [r3, #4]
 8011a3c:	4618      	mov	r0, r3
 8011a3e:	f7f8 fc3c 	bl	800a2ba <lwip_htonl>
 8011a42:	4604      	mov	r4, r0
 8011a44:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8011a46:	891b      	ldrh	r3, [r3, #8]
 8011a48:	461d      	mov	r5, r3
 8011a4a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8011a4c:	68db      	ldr	r3, [r3, #12]
 8011a4e:	899b      	ldrh	r3, [r3, #12]
 8011a50:	b29b      	uxth	r3, r3
 8011a52:	4618      	mov	r0, r3
 8011a54:	f7f8 fc1c 	bl	800a290 <lwip_htons>
 8011a58:	4603      	mov	r3, r0
 8011a5a:	b2db      	uxtb	r3, r3
 8011a5c:	f003 0303 	and.w	r3, r3, #3
 8011a60:	2b00      	cmp	r3, #0
 8011a62:	d001      	beq.n	8011a68 <tcp_output+0x2a0>
 8011a64:	2301      	movs	r3, #1
 8011a66:	e000      	b.n	8011a6a <tcp_output+0x2a2>
 8011a68:	2300      	movs	r3, #0
 8011a6a:	442b      	add	r3, r5
 8011a6c:	4423      	add	r3, r4
 8011a6e:	60bb      	str	r3, [r7, #8]
    if (TCP_SEQ_LT(pcb->snd_nxt, snd_nxt)) {
 8011a70:	687b      	ldr	r3, [r7, #4]
 8011a72:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8011a74:	68bb      	ldr	r3, [r7, #8]
 8011a76:	1ad3      	subs	r3, r2, r3
 8011a78:	2b00      	cmp	r3, #0
 8011a7a:	da02      	bge.n	8011a82 <tcp_output+0x2ba>
      pcb->snd_nxt = snd_nxt;
 8011a7c:	687b      	ldr	r3, [r7, #4]
 8011a7e:	68ba      	ldr	r2, [r7, #8]
 8011a80:	651a      	str	r2, [r3, #80]	; 0x50
    }
    /* put segment on unacknowledged list if length > 0 */
    if (TCP_TCPLEN(seg) > 0) {
 8011a82:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8011a84:	891b      	ldrh	r3, [r3, #8]
 8011a86:	461c      	mov	r4, r3
 8011a88:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8011a8a:	68db      	ldr	r3, [r3, #12]
 8011a8c:	899b      	ldrh	r3, [r3, #12]
 8011a8e:	b29b      	uxth	r3, r3
 8011a90:	4618      	mov	r0, r3
 8011a92:	f7f8 fbfd 	bl	800a290 <lwip_htons>
 8011a96:	4603      	mov	r3, r0
 8011a98:	b2db      	uxtb	r3, r3
 8011a9a:	f003 0303 	and.w	r3, r3, #3
 8011a9e:	2b00      	cmp	r3, #0
 8011aa0:	d001      	beq.n	8011aa6 <tcp_output+0x2de>
 8011aa2:	2301      	movs	r3, #1
 8011aa4:	e000      	b.n	8011aa8 <tcp_output+0x2e0>
 8011aa6:	2300      	movs	r3, #0
 8011aa8:	4423      	add	r3, r4
 8011aaa:	2b00      	cmp	r3, #0
 8011aac:	d049      	beq.n	8011b42 <tcp_output+0x37a>
      seg->next = NULL;
 8011aae:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8011ab0:	2200      	movs	r2, #0
 8011ab2:	601a      	str	r2, [r3, #0]
      /* unacked list is empty? */
      if (pcb->unacked == NULL) {
 8011ab4:	687b      	ldr	r3, [r7, #4]
 8011ab6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8011ab8:	2b00      	cmp	r3, #0
 8011aba:	d105      	bne.n	8011ac8 <tcp_output+0x300>
        pcb->unacked = seg;
 8011abc:	687b      	ldr	r3, [r7, #4]
 8011abe:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8011ac0:	671a      	str	r2, [r3, #112]	; 0x70
        useg = seg;
 8011ac2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8011ac4:	623b      	str	r3, [r7, #32]
 8011ac6:	e03f      	b.n	8011b48 <tcp_output+0x380>
        /* unacked list is not empty? */
      } else {
        /* In the case of fast retransmit, the packet should not go to the tail
         * of the unacked queue, but rather somewhere before it. We need to check for
         * this case. -STJ Jul 27, 2004 */
        if (TCP_SEQ_LT(lwip_ntohl(seg->tcphdr->seqno), lwip_ntohl(useg->tcphdr->seqno))) {
 8011ac8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8011aca:	68db      	ldr	r3, [r3, #12]
 8011acc:	685b      	ldr	r3, [r3, #4]
 8011ace:	4618      	mov	r0, r3
 8011ad0:	f7f8 fbf3 	bl	800a2ba <lwip_htonl>
 8011ad4:	4604      	mov	r4, r0
 8011ad6:	6a3b      	ldr	r3, [r7, #32]
 8011ad8:	68db      	ldr	r3, [r3, #12]
 8011ada:	685b      	ldr	r3, [r3, #4]
 8011adc:	4618      	mov	r0, r3
 8011ade:	f7f8 fbec 	bl	800a2ba <lwip_htonl>
 8011ae2:	4603      	mov	r3, r0
 8011ae4:	1ae3      	subs	r3, r4, r3
 8011ae6:	2b00      	cmp	r3, #0
 8011ae8:	da24      	bge.n	8011b34 <tcp_output+0x36c>
          /* add segment to before tail of unacked list, keeping the list sorted */
          struct tcp_seg **cur_seg = &(pcb->unacked);
 8011aea:	687b      	ldr	r3, [r7, #4]
 8011aec:	3370      	adds	r3, #112	; 0x70
 8011aee:	61fb      	str	r3, [r7, #28]
          while (*cur_seg &&
 8011af0:	e002      	b.n	8011af8 <tcp_output+0x330>
                 TCP_SEQ_LT(lwip_ntohl((*cur_seg)->tcphdr->seqno), lwip_ntohl(seg->tcphdr->seqno))) {
            cur_seg = &((*cur_seg)->next );
 8011af2:	69fb      	ldr	r3, [r7, #28]
 8011af4:	681b      	ldr	r3, [r3, #0]
 8011af6:	61fb      	str	r3, [r7, #28]
          while (*cur_seg &&
 8011af8:	69fb      	ldr	r3, [r7, #28]
 8011afa:	681b      	ldr	r3, [r3, #0]
 8011afc:	2b00      	cmp	r3, #0
 8011afe:	d011      	beq.n	8011b24 <tcp_output+0x35c>
                 TCP_SEQ_LT(lwip_ntohl((*cur_seg)->tcphdr->seqno), lwip_ntohl(seg->tcphdr->seqno))) {
 8011b00:	69fb      	ldr	r3, [r7, #28]
 8011b02:	681b      	ldr	r3, [r3, #0]
 8011b04:	68db      	ldr	r3, [r3, #12]
 8011b06:	685b      	ldr	r3, [r3, #4]
 8011b08:	4618      	mov	r0, r3
 8011b0a:	f7f8 fbd6 	bl	800a2ba <lwip_htonl>
 8011b0e:	4604      	mov	r4, r0
 8011b10:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8011b12:	68db      	ldr	r3, [r3, #12]
 8011b14:	685b      	ldr	r3, [r3, #4]
 8011b16:	4618      	mov	r0, r3
 8011b18:	f7f8 fbcf 	bl	800a2ba <lwip_htonl>
 8011b1c:	4603      	mov	r3, r0
 8011b1e:	1ae3      	subs	r3, r4, r3
          while (*cur_seg &&
 8011b20:	2b00      	cmp	r3, #0
 8011b22:	dbe6      	blt.n	8011af2 <tcp_output+0x32a>
          }
          seg->next = (*cur_seg);
 8011b24:	69fb      	ldr	r3, [r7, #28]
 8011b26:	681a      	ldr	r2, [r3, #0]
 8011b28:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8011b2a:	601a      	str	r2, [r3, #0]
          (*cur_seg) = seg;
 8011b2c:	69fb      	ldr	r3, [r7, #28]
 8011b2e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8011b30:	601a      	str	r2, [r3, #0]
 8011b32:	e009      	b.n	8011b48 <tcp_output+0x380>
        } else {
          /* add segment to tail of unacked list */
          useg->next = seg;
 8011b34:	6a3b      	ldr	r3, [r7, #32]
 8011b36:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8011b38:	601a      	str	r2, [r3, #0]
          useg = useg->next;
 8011b3a:	6a3b      	ldr	r3, [r7, #32]
 8011b3c:	681b      	ldr	r3, [r3, #0]
 8011b3e:	623b      	str	r3, [r7, #32]
 8011b40:	e002      	b.n	8011b48 <tcp_output+0x380>
        }
      }
      /* do not queue empty segments on the unacked list */
    } else {
      tcp_seg_free(seg);
 8011b42:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8011b44:	f7fb ff37 	bl	800d9b6 <tcp_seg_free>
    }
    seg = pcb->unsent;
 8011b48:	687b      	ldr	r3, [r7, #4]
 8011b4a:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8011b4c:	627b      	str	r3, [r7, #36]	; 0x24
  while (seg != NULL &&
 8011b4e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8011b50:	2b00      	cmp	r3, #0
 8011b52:	d012      	beq.n	8011b7a <tcp_output+0x3b2>
         lwip_ntohl(seg->tcphdr->seqno) - pcb->lastack + seg->len <= wnd) {
 8011b54:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8011b56:	68db      	ldr	r3, [r3, #12]
 8011b58:	685b      	ldr	r3, [r3, #4]
 8011b5a:	4618      	mov	r0, r3
 8011b5c:	f7f8 fbad 	bl	800a2ba <lwip_htonl>
 8011b60:	4602      	mov	r2, r0
 8011b62:	687b      	ldr	r3, [r7, #4]
 8011b64:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8011b66:	1ad3      	subs	r3, r2, r3
 8011b68:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8011b6a:	8912      	ldrh	r2, [r2, #8]
 8011b6c:	4413      	add	r3, r2
  while (seg != NULL &&
 8011b6e:	69ba      	ldr	r2, [r7, #24]
 8011b70:	429a      	cmp	r2, r3
 8011b72:	f4bf aed9 	bcs.w	8011928 <tcp_output+0x160>
 8011b76:	e000      	b.n	8011b7a <tcp_output+0x3b2>
      break;
 8011b78:	bf00      	nop
  }
#if TCP_OVERSIZE
  if (pcb->unsent == NULL) {
 8011b7a:	687b      	ldr	r3, [r7, #4]
 8011b7c:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8011b7e:	2b00      	cmp	r3, #0
 8011b80:	d108      	bne.n	8011b94 <tcp_output+0x3cc>
    /* last unsent has been removed, reset unsent_oversize */
    pcb->unsent_oversize = 0;
 8011b82:	687b      	ldr	r3, [r7, #4]
 8011b84:	2200      	movs	r2, #0
 8011b86:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
 8011b8a:	e004      	b.n	8011b96 <tcp_output+0x3ce>
    goto output_done;
 8011b8c:	bf00      	nop
 8011b8e:	e002      	b.n	8011b96 <tcp_output+0x3ce>
    goto output_done;
 8011b90:	bf00      	nop
 8011b92:	e000      	b.n	8011b96 <tcp_output+0x3ce>
  }
#endif /* TCP_OVERSIZE */

output_done:
 8011b94:	bf00      	nop
  tcp_clear_flags(pcb, TF_NAGLEMEMERR);
 8011b96:	687b      	ldr	r3, [r7, #4]
 8011b98:	8b5b      	ldrh	r3, [r3, #26]
 8011b9a:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8011b9e:	b29a      	uxth	r2, r3
 8011ba0:	687b      	ldr	r3, [r7, #4]
 8011ba2:	835a      	strh	r2, [r3, #26]
  return ERR_OK;
 8011ba4:	2300      	movs	r3, #0
}
 8011ba6:	4618      	mov	r0, r3
 8011ba8:	3728      	adds	r7, #40	; 0x28
 8011baa:	46bd      	mov	sp, r7
 8011bac:	bdb0      	pop	{r4, r5, r7, pc}
 8011bae:	bf00      	nop

08011bb0 <tcp_output_segment_busy>:
 * @arg seg the tcp segment to check
 * @return 1 if ref != 1, 0 if ref == 1
 */
static int
tcp_output_segment_busy(const struct tcp_seg *seg)
{
 8011bb0:	b580      	push	{r7, lr}
 8011bb2:	b082      	sub	sp, #8
 8011bb4:	af00      	add	r7, sp, #0
 8011bb6:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_output_segment_busy: invalid seg", seg != NULL);
 8011bb8:	687b      	ldr	r3, [r7, #4]
 8011bba:	2b00      	cmp	r3, #0
 8011bbc:	d106      	bne.n	8011bcc <tcp_output_segment_busy+0x1c>
 8011bbe:	4b09      	ldr	r3, [pc, #36]	; (8011be4 <tcp_output_segment_busy+0x34>)
 8011bc0:	f240 529a 	movw	r2, #1434	; 0x59a
 8011bc4:	4908      	ldr	r1, [pc, #32]	; (8011be8 <tcp_output_segment_busy+0x38>)
 8011bc6:	4809      	ldr	r0, [pc, #36]	; (8011bec <tcp_output_segment_busy+0x3c>)
 8011bc8:	f006 fc5e 	bl	8018488 <iprintf>

  /* We only need to check the first pbuf here:
     If a pbuf is queued for transmission, a driver calls pbuf_ref(),
     which only changes the ref count of the first pbuf */
  if (seg->p->ref != 1) {
 8011bcc:	687b      	ldr	r3, [r7, #4]
 8011bce:	685b      	ldr	r3, [r3, #4]
 8011bd0:	7b9b      	ldrb	r3, [r3, #14]
 8011bd2:	2b01      	cmp	r3, #1
 8011bd4:	d001      	beq.n	8011bda <tcp_output_segment_busy+0x2a>
    /* other reference found */
    return 1;
 8011bd6:	2301      	movs	r3, #1
 8011bd8:	e000      	b.n	8011bdc <tcp_output_segment_busy+0x2c>
  }
  /* no other references found */
  return 0;
 8011bda:	2300      	movs	r3, #0
}
 8011bdc:	4618      	mov	r0, r3
 8011bde:	3708      	adds	r7, #8
 8011be0:	46bd      	mov	sp, r7
 8011be2:	bd80      	pop	{r7, pc}
 8011be4:	0801aa8c 	.word	0x0801aa8c
 8011be8:	0801b028 	.word	0x0801b028
 8011bec:	0801aae0 	.word	0x0801aae0

08011bf0 <tcp_output_segment>:
 * @param pcb the tcp_pcb for the TCP connection used to send the segment
 * @param netif the netif used to send the segment
 */
static err_t
tcp_output_segment(struct tcp_seg *seg, struct tcp_pcb *pcb, struct netif *netif)
{
 8011bf0:	b5b0      	push	{r4, r5, r7, lr}
 8011bf2:	b08c      	sub	sp, #48	; 0x30
 8011bf4:	af04      	add	r7, sp, #16
 8011bf6:	60f8      	str	r0, [r7, #12]
 8011bf8:	60b9      	str	r1, [r7, #8]
 8011bfa:	607a      	str	r2, [r7, #4]
  u32_t *opts;
#if TCP_CHECKSUM_ON_COPY
  int seg_chksum_was_swapped = 0;
#endif

  LWIP_ASSERT("tcp_output_segment: invalid seg", seg != NULL);
 8011bfc:	68fb      	ldr	r3, [r7, #12]
 8011bfe:	2b00      	cmp	r3, #0
 8011c00:	d106      	bne.n	8011c10 <tcp_output_segment+0x20>
 8011c02:	4b64      	ldr	r3, [pc, #400]	; (8011d94 <tcp_output_segment+0x1a4>)
 8011c04:	f44f 62b7 	mov.w	r2, #1464	; 0x5b8
 8011c08:	4963      	ldr	r1, [pc, #396]	; (8011d98 <tcp_output_segment+0x1a8>)
 8011c0a:	4864      	ldr	r0, [pc, #400]	; (8011d9c <tcp_output_segment+0x1ac>)
 8011c0c:	f006 fc3c 	bl	8018488 <iprintf>
  LWIP_ASSERT("tcp_output_segment: invalid pcb", pcb != NULL);
 8011c10:	68bb      	ldr	r3, [r7, #8]
 8011c12:	2b00      	cmp	r3, #0
 8011c14:	d106      	bne.n	8011c24 <tcp_output_segment+0x34>
 8011c16:	4b5f      	ldr	r3, [pc, #380]	; (8011d94 <tcp_output_segment+0x1a4>)
 8011c18:	f240 52b9 	movw	r2, #1465	; 0x5b9
 8011c1c:	4960      	ldr	r1, [pc, #384]	; (8011da0 <tcp_output_segment+0x1b0>)
 8011c1e:	485f      	ldr	r0, [pc, #380]	; (8011d9c <tcp_output_segment+0x1ac>)
 8011c20:	f006 fc32 	bl	8018488 <iprintf>
  LWIP_ASSERT("tcp_output_segment: invalid netif", netif != NULL);
 8011c24:	687b      	ldr	r3, [r7, #4]
 8011c26:	2b00      	cmp	r3, #0
 8011c28:	d106      	bne.n	8011c38 <tcp_output_segment+0x48>
 8011c2a:	4b5a      	ldr	r3, [pc, #360]	; (8011d94 <tcp_output_segment+0x1a4>)
 8011c2c:	f240 52ba 	movw	r2, #1466	; 0x5ba
 8011c30:	495c      	ldr	r1, [pc, #368]	; (8011da4 <tcp_output_segment+0x1b4>)
 8011c32:	485a      	ldr	r0, [pc, #360]	; (8011d9c <tcp_output_segment+0x1ac>)
 8011c34:	f006 fc28 	bl	8018488 <iprintf>

  if (tcp_output_segment_busy(seg)) {
 8011c38:	68f8      	ldr	r0, [r7, #12]
 8011c3a:	f7ff ffb9 	bl	8011bb0 <tcp_output_segment_busy>
 8011c3e:	4603      	mov	r3, r0
 8011c40:	2b00      	cmp	r3, #0
 8011c42:	d001      	beq.n	8011c48 <tcp_output_segment+0x58>
    /* This should not happen: rexmit functions should have checked this.
       However, since this function modifies p->len, we must not continue in this case. */
    LWIP_DEBUGF(TCP_RTO_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("tcp_output_segment: segment busy\n"));
    return ERR_OK;
 8011c44:	2300      	movs	r3, #0
 8011c46:	e0a1      	b.n	8011d8c <tcp_output_segment+0x19c>
  }

  /* The TCP header has already been constructed, but the ackno and
   wnd fields remain. */
  seg->tcphdr->ackno = lwip_htonl(pcb->rcv_nxt);
 8011c48:	68bb      	ldr	r3, [r7, #8]
 8011c4a:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8011c4c:	68fb      	ldr	r3, [r7, #12]
 8011c4e:	68dc      	ldr	r4, [r3, #12]
 8011c50:	4610      	mov	r0, r2
 8011c52:	f7f8 fb32 	bl	800a2ba <lwip_htonl>
 8011c56:	4603      	mov	r3, r0
 8011c58:	60a3      	str	r3, [r4, #8]
       the window scale option) is never scaled. */
    seg->tcphdr->wnd = lwip_htons(TCPWND_MIN16(pcb->rcv_ann_wnd));
  } else
#endif /* LWIP_WND_SCALE */
  {
    seg->tcphdr->wnd = lwip_htons(TCPWND_MIN16(RCV_WND_SCALE(pcb, pcb->rcv_ann_wnd)));
 8011c5a:	68bb      	ldr	r3, [r7, #8]
 8011c5c:	8d5a      	ldrh	r2, [r3, #42]	; 0x2a
 8011c5e:	68fb      	ldr	r3, [r7, #12]
 8011c60:	68dc      	ldr	r4, [r3, #12]
 8011c62:	4610      	mov	r0, r2
 8011c64:	f7f8 fb14 	bl	800a290 <lwip_htons>
 8011c68:	4603      	mov	r3, r0
 8011c6a:	81e3      	strh	r3, [r4, #14]
  }

  pcb->rcv_ann_right_edge = pcb->rcv_nxt + pcb->rcv_ann_wnd;
 8011c6c:	68bb      	ldr	r3, [r7, #8]
 8011c6e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8011c70:	68ba      	ldr	r2, [r7, #8]
 8011c72:	8d52      	ldrh	r2, [r2, #42]	; 0x2a
 8011c74:	441a      	add	r2, r3
 8011c76:	68bb      	ldr	r3, [r7, #8]
 8011c78:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Add any requested options.  NB MSS option is only set on SYN
     packets, so ignore it here */
  /* cast through void* to get rid of alignment warnings */
  opts = (u32_t *)(void *)(seg->tcphdr + 1);
 8011c7a:	68fb      	ldr	r3, [r7, #12]
 8011c7c:	68db      	ldr	r3, [r3, #12]
 8011c7e:	3314      	adds	r3, #20
 8011c80:	61fb      	str	r3, [r7, #28]
  if (seg->flags & TF_SEG_OPTS_MSS) {
 8011c82:	68fb      	ldr	r3, [r7, #12]
 8011c84:	7a9b      	ldrb	r3, [r3, #10]
 8011c86:	f003 0301 	and.w	r3, r3, #1
 8011c8a:	2b00      	cmp	r3, #0
 8011c8c:	d015      	beq.n	8011cba <tcp_output_segment+0xca>
    u16_t mss;
#if TCP_CALCULATE_EFF_SEND_MSS
    mss = tcp_eff_send_mss_netif(TCP_MSS, netif, &pcb->remote_ip);
 8011c8e:	68bb      	ldr	r3, [r7, #8]
 8011c90:	3304      	adds	r3, #4
 8011c92:	461a      	mov	r2, r3
 8011c94:	6879      	ldr	r1, [r7, #4]
 8011c96:	f44f 7006 	mov.w	r0, #536	; 0x218
 8011c9a:	f7fc fa33 	bl	800e104 <tcp_eff_send_mss_netif>
 8011c9e:	4603      	mov	r3, r0
 8011ca0:	837b      	strh	r3, [r7, #26]
#else /* TCP_CALCULATE_EFF_SEND_MSS */
    mss = TCP_MSS;
#endif /* TCP_CALCULATE_EFF_SEND_MSS */
    *opts = TCP_BUILD_MSS_OPTION(mss);
 8011ca2:	8b7b      	ldrh	r3, [r7, #26]
 8011ca4:	f043 7301 	orr.w	r3, r3, #33816576	; 0x2040000
 8011ca8:	4618      	mov	r0, r3
 8011caa:	f7f8 fb06 	bl	800a2ba <lwip_htonl>
 8011cae:	4602      	mov	r2, r0
 8011cb0:	69fb      	ldr	r3, [r7, #28]
 8011cb2:	601a      	str	r2, [r3, #0]
    opts += 1;
 8011cb4:	69fb      	ldr	r3, [r7, #28]
 8011cb6:	3304      	adds	r3, #4
 8011cb8:	61fb      	str	r3, [r7, #28]
  }
#endif

  /* Set retransmission timer running if it is not currently enabled
     This must be set before checking the route. */
  if (pcb->rtime < 0) {
 8011cba:	68bb      	ldr	r3, [r7, #8]
 8011cbc:	f9b3 3030 	ldrsh.w	r3, [r3, #48]	; 0x30
 8011cc0:	2b00      	cmp	r3, #0
 8011cc2:	da02      	bge.n	8011cca <tcp_output_segment+0xda>
    pcb->rtime = 0;
 8011cc4:	68bb      	ldr	r3, [r7, #8]
 8011cc6:	2200      	movs	r2, #0
 8011cc8:	861a      	strh	r2, [r3, #48]	; 0x30
  }

  if (pcb->rttest == 0) {
 8011cca:	68bb      	ldr	r3, [r7, #8]
 8011ccc:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8011cce:	2b00      	cmp	r3, #0
 8011cd0:	d10c      	bne.n	8011cec <tcp_output_segment+0xfc>
    pcb->rttest = tcp_ticks;
 8011cd2:	4b35      	ldr	r3, [pc, #212]	; (8011da8 <tcp_output_segment+0x1b8>)
 8011cd4:	681a      	ldr	r2, [r3, #0]
 8011cd6:	68bb      	ldr	r3, [r7, #8]
 8011cd8:	635a      	str	r2, [r3, #52]	; 0x34
    pcb->rtseq = lwip_ntohl(seg->tcphdr->seqno);
 8011cda:	68fb      	ldr	r3, [r7, #12]
 8011cdc:	68db      	ldr	r3, [r3, #12]
 8011cde:	685b      	ldr	r3, [r3, #4]
 8011ce0:	4618      	mov	r0, r3
 8011ce2:	f7f8 faea 	bl	800a2ba <lwip_htonl>
 8011ce6:	4602      	mov	r2, r0
 8011ce8:	68bb      	ldr	r3, [r7, #8]
 8011cea:	639a      	str	r2, [r3, #56]	; 0x38
  }
  LWIP_DEBUGF(TCP_OUTPUT_DEBUG, ("tcp_output_segment: %"U32_F":%"U32_F"\n",
                                 lwip_htonl(seg->tcphdr->seqno), lwip_htonl(seg->tcphdr->seqno) +
                                 seg->len));

  len = (u16_t)((u8_t *)seg->tcphdr - (u8_t *)seg->p->payload);
 8011cec:	68fb      	ldr	r3, [r7, #12]
 8011cee:	68da      	ldr	r2, [r3, #12]
 8011cf0:	68fb      	ldr	r3, [r7, #12]
 8011cf2:	685b      	ldr	r3, [r3, #4]
 8011cf4:	685b      	ldr	r3, [r3, #4]
 8011cf6:	1ad3      	subs	r3, r2, r3
 8011cf8:	833b      	strh	r3, [r7, #24]
  if (len == 0) {
    /** Exclude retransmitted segments from this count. */
    MIB2_STATS_INC(mib2.tcpoutsegs);
  }

  seg->p->len -= len;
 8011cfa:	68fb      	ldr	r3, [r7, #12]
 8011cfc:	685b      	ldr	r3, [r3, #4]
 8011cfe:	8959      	ldrh	r1, [r3, #10]
 8011d00:	68fb      	ldr	r3, [r7, #12]
 8011d02:	685b      	ldr	r3, [r3, #4]
 8011d04:	8b3a      	ldrh	r2, [r7, #24]
 8011d06:	1a8a      	subs	r2, r1, r2
 8011d08:	b292      	uxth	r2, r2
 8011d0a:	815a      	strh	r2, [r3, #10]
  seg->p->tot_len -= len;
 8011d0c:	68fb      	ldr	r3, [r7, #12]
 8011d0e:	685b      	ldr	r3, [r3, #4]
 8011d10:	8919      	ldrh	r1, [r3, #8]
 8011d12:	68fb      	ldr	r3, [r7, #12]
 8011d14:	685b      	ldr	r3, [r3, #4]
 8011d16:	8b3a      	ldrh	r2, [r7, #24]
 8011d18:	1a8a      	subs	r2, r1, r2
 8011d1a:	b292      	uxth	r2, r2
 8011d1c:	811a      	strh	r2, [r3, #8]

  seg->p->payload = seg->tcphdr;
 8011d1e:	68fb      	ldr	r3, [r7, #12]
 8011d20:	685b      	ldr	r3, [r3, #4]
 8011d22:	68fa      	ldr	r2, [r7, #12]
 8011d24:	68d2      	ldr	r2, [r2, #12]
 8011d26:	605a      	str	r2, [r3, #4]

  seg->tcphdr->chksum = 0;
 8011d28:	68fb      	ldr	r3, [r7, #12]
 8011d2a:	68db      	ldr	r3, [r3, #12]
 8011d2c:	2200      	movs	r2, #0
 8011d2e:	741a      	strb	r2, [r3, #16]
 8011d30:	2200      	movs	r2, #0
 8011d32:	745a      	strb	r2, [r3, #17]

#ifdef LWIP_HOOK_TCP_OUT_ADD_TCPOPTS
  opts = LWIP_HOOK_TCP_OUT_ADD_TCPOPTS(seg->p, seg->tcphdr, pcb, opts);
#endif
  LWIP_ASSERT("options not filled", (u8_t *)opts == ((u8_t *)(seg->tcphdr + 1)) + LWIP_TCP_OPT_LENGTH_SEGMENT(seg->flags, pcb));
 8011d34:	68fb      	ldr	r3, [r7, #12]
 8011d36:	68da      	ldr	r2, [r3, #12]
 8011d38:	68fb      	ldr	r3, [r7, #12]
 8011d3a:	7a9b      	ldrb	r3, [r3, #10]
 8011d3c:	f003 0301 	and.w	r3, r3, #1
 8011d40:	2b00      	cmp	r3, #0
 8011d42:	d001      	beq.n	8011d48 <tcp_output_segment+0x158>
 8011d44:	2318      	movs	r3, #24
 8011d46:	e000      	b.n	8011d4a <tcp_output_segment+0x15a>
 8011d48:	2314      	movs	r3, #20
 8011d4a:	4413      	add	r3, r2
 8011d4c:	69fa      	ldr	r2, [r7, #28]
 8011d4e:	429a      	cmp	r2, r3
 8011d50:	d006      	beq.n	8011d60 <tcp_output_segment+0x170>
 8011d52:	4b10      	ldr	r3, [pc, #64]	; (8011d94 <tcp_output_segment+0x1a4>)
 8011d54:	f240 621c 	movw	r2, #1564	; 0x61c
 8011d58:	4914      	ldr	r1, [pc, #80]	; (8011dac <tcp_output_segment+0x1bc>)
 8011d5a:	4810      	ldr	r0, [pc, #64]	; (8011d9c <tcp_output_segment+0x1ac>)
 8011d5c:	f006 fb94 	bl	8018488 <iprintf>
  }
#endif /* CHECKSUM_GEN_TCP */
  TCP_STATS_INC(tcp.xmit);

  NETIF_SET_HINTS(netif, &(pcb->netif_hints));
  err = ip_output_if(seg->p, &pcb->local_ip, &pcb->remote_ip, pcb->ttl,
 8011d60:	68fb      	ldr	r3, [r7, #12]
 8011d62:	6858      	ldr	r0, [r3, #4]
 8011d64:	68b9      	ldr	r1, [r7, #8]
 8011d66:	68bb      	ldr	r3, [r7, #8]
 8011d68:	1d1c      	adds	r4, r3, #4
 8011d6a:	68bb      	ldr	r3, [r7, #8]
 8011d6c:	7add      	ldrb	r5, [r3, #11]
 8011d6e:	68bb      	ldr	r3, [r7, #8]
 8011d70:	7a9b      	ldrb	r3, [r3, #10]
 8011d72:	687a      	ldr	r2, [r7, #4]
 8011d74:	9202      	str	r2, [sp, #8]
 8011d76:	2206      	movs	r2, #6
 8011d78:	9201      	str	r2, [sp, #4]
 8011d7a:	9300      	str	r3, [sp, #0]
 8011d7c:	462b      	mov	r3, r5
 8011d7e:	4622      	mov	r2, r4
 8011d80:	f004 fc96 	bl	80166b0 <ip4_output_if>
 8011d84:	4603      	mov	r3, r0
 8011d86:	75fb      	strb	r3, [r7, #23]
    seg->chksum = SWAP_BYTES_IN_WORD(seg->chksum);
    seg->chksum_swapped = 1;
  }
#endif

  return err;
 8011d88:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 8011d8c:	4618      	mov	r0, r3
 8011d8e:	3720      	adds	r7, #32
 8011d90:	46bd      	mov	sp, r7
 8011d92:	bdb0      	pop	{r4, r5, r7, pc}
 8011d94:	0801aa8c 	.word	0x0801aa8c
 8011d98:	0801b050 	.word	0x0801b050
 8011d9c:	0801aae0 	.word	0x0801aae0
 8011da0:	0801b070 	.word	0x0801b070
 8011da4:	0801b090 	.word	0x0801b090
 8011da8:	2000891c 	.word	0x2000891c
 8011dac:	0801b0b4 	.word	0x0801b0b4

08011db0 <tcp_rexmit_rto_prepare>:
 *
 * @param pcb the tcp_pcb for which to re-enqueue all unacked segments
 */
err_t
tcp_rexmit_rto_prepare(struct tcp_pcb *pcb)
{
 8011db0:	b5b0      	push	{r4, r5, r7, lr}
 8011db2:	b084      	sub	sp, #16
 8011db4:	af00      	add	r7, sp, #0
 8011db6:	6078      	str	r0, [r7, #4]
  struct tcp_seg *seg;

  LWIP_ASSERT("tcp_rexmit_rto_prepare: invalid pcb", pcb != NULL);
 8011db8:	687b      	ldr	r3, [r7, #4]
 8011dba:	2b00      	cmp	r3, #0
 8011dbc:	d106      	bne.n	8011dcc <tcp_rexmit_rto_prepare+0x1c>
 8011dbe:	4b31      	ldr	r3, [pc, #196]	; (8011e84 <tcp_rexmit_rto_prepare+0xd4>)
 8011dc0:	f240 6263 	movw	r2, #1635	; 0x663
 8011dc4:	4930      	ldr	r1, [pc, #192]	; (8011e88 <tcp_rexmit_rto_prepare+0xd8>)
 8011dc6:	4831      	ldr	r0, [pc, #196]	; (8011e8c <tcp_rexmit_rto_prepare+0xdc>)
 8011dc8:	f006 fb5e 	bl	8018488 <iprintf>

  if (pcb->unacked == NULL) {
 8011dcc:	687b      	ldr	r3, [r7, #4]
 8011dce:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8011dd0:	2b00      	cmp	r3, #0
 8011dd2:	d102      	bne.n	8011dda <tcp_rexmit_rto_prepare+0x2a>
    return ERR_VAL;
 8011dd4:	f06f 0305 	mvn.w	r3, #5
 8011dd8:	e050      	b.n	8011e7c <tcp_rexmit_rto_prepare+0xcc>

  /* Move all unacked segments to the head of the unsent queue.
     However, give up if any of the unsent pbufs are still referenced by the
     netif driver due to deferred transmission. No point loading the link further
     if it is struggling to flush its buffered writes. */
  for (seg = pcb->unacked; seg->next != NULL; seg = seg->next) {
 8011dda:	687b      	ldr	r3, [r7, #4]
 8011ddc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8011dde:	60fb      	str	r3, [r7, #12]
 8011de0:	e00b      	b.n	8011dfa <tcp_rexmit_rto_prepare+0x4a>
    if (tcp_output_segment_busy(seg)) {
 8011de2:	68f8      	ldr	r0, [r7, #12]
 8011de4:	f7ff fee4 	bl	8011bb0 <tcp_output_segment_busy>
 8011de8:	4603      	mov	r3, r0
 8011dea:	2b00      	cmp	r3, #0
 8011dec:	d002      	beq.n	8011df4 <tcp_rexmit_rto_prepare+0x44>
      LWIP_DEBUGF(TCP_RTO_DEBUG, ("tcp_rexmit_rto: segment busy\n"));
      return ERR_VAL;
 8011dee:	f06f 0305 	mvn.w	r3, #5
 8011df2:	e043      	b.n	8011e7c <tcp_rexmit_rto_prepare+0xcc>
  for (seg = pcb->unacked; seg->next != NULL; seg = seg->next) {
 8011df4:	68fb      	ldr	r3, [r7, #12]
 8011df6:	681b      	ldr	r3, [r3, #0]
 8011df8:	60fb      	str	r3, [r7, #12]
 8011dfa:	68fb      	ldr	r3, [r7, #12]
 8011dfc:	681b      	ldr	r3, [r3, #0]
 8011dfe:	2b00      	cmp	r3, #0
 8011e00:	d1ef      	bne.n	8011de2 <tcp_rexmit_rto_prepare+0x32>
    }
  }
  if (tcp_output_segment_busy(seg)) {
 8011e02:	68f8      	ldr	r0, [r7, #12]
 8011e04:	f7ff fed4 	bl	8011bb0 <tcp_output_segment_busy>
 8011e08:	4603      	mov	r3, r0
 8011e0a:	2b00      	cmp	r3, #0
 8011e0c:	d002      	beq.n	8011e14 <tcp_rexmit_rto_prepare+0x64>
    LWIP_DEBUGF(TCP_RTO_DEBUG, ("tcp_rexmit_rto: segment busy\n"));
    return ERR_VAL;
 8011e0e:	f06f 0305 	mvn.w	r3, #5
 8011e12:	e033      	b.n	8011e7c <tcp_rexmit_rto_prepare+0xcc>
  }
  /* concatenate unsent queue after unacked queue */
  seg->next = pcb->unsent;
 8011e14:	687b      	ldr	r3, [r7, #4]
 8011e16:	6eda      	ldr	r2, [r3, #108]	; 0x6c
 8011e18:	68fb      	ldr	r3, [r7, #12]
 8011e1a:	601a      	str	r2, [r3, #0]
  if (pcb->unsent == NULL) {
    pcb->unsent_oversize = seg->oversize_left;
  }
#endif /* TCP_OVERSIZE_DBGCHECK */
  /* unsent queue is the concatenated queue (of unacked, unsent) */
  pcb->unsent = pcb->unacked;
 8011e1c:	687b      	ldr	r3, [r7, #4]
 8011e1e:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8011e20:	687b      	ldr	r3, [r7, #4]
 8011e22:	66da      	str	r2, [r3, #108]	; 0x6c
  /* unacked queue is now empty */
  pcb->unacked = NULL;
 8011e24:	687b      	ldr	r3, [r7, #4]
 8011e26:	2200      	movs	r2, #0
 8011e28:	671a      	str	r2, [r3, #112]	; 0x70

  /* Mark RTO in-progress */
  tcp_set_flags(pcb, TF_RTO);
 8011e2a:	687b      	ldr	r3, [r7, #4]
 8011e2c:	8b5b      	ldrh	r3, [r3, #26]
 8011e2e:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8011e32:	b29a      	uxth	r2, r3
 8011e34:	687b      	ldr	r3, [r7, #4]
 8011e36:	835a      	strh	r2, [r3, #26]
  /* Record the next byte following retransmit */
  pcb->rto_end = lwip_ntohl(seg->tcphdr->seqno) + TCP_TCPLEN(seg);
 8011e38:	68fb      	ldr	r3, [r7, #12]
 8011e3a:	68db      	ldr	r3, [r3, #12]
 8011e3c:	685b      	ldr	r3, [r3, #4]
 8011e3e:	4618      	mov	r0, r3
 8011e40:	f7f8 fa3b 	bl	800a2ba <lwip_htonl>
 8011e44:	4604      	mov	r4, r0
 8011e46:	68fb      	ldr	r3, [r7, #12]
 8011e48:	891b      	ldrh	r3, [r3, #8]
 8011e4a:	461d      	mov	r5, r3
 8011e4c:	68fb      	ldr	r3, [r7, #12]
 8011e4e:	68db      	ldr	r3, [r3, #12]
 8011e50:	899b      	ldrh	r3, [r3, #12]
 8011e52:	b29b      	uxth	r3, r3
 8011e54:	4618      	mov	r0, r3
 8011e56:	f7f8 fa1b 	bl	800a290 <lwip_htons>
 8011e5a:	4603      	mov	r3, r0
 8011e5c:	b2db      	uxtb	r3, r3
 8011e5e:	f003 0303 	and.w	r3, r3, #3
 8011e62:	2b00      	cmp	r3, #0
 8011e64:	d001      	beq.n	8011e6a <tcp_rexmit_rto_prepare+0xba>
 8011e66:	2301      	movs	r3, #1
 8011e68:	e000      	b.n	8011e6c <tcp_rexmit_rto_prepare+0xbc>
 8011e6a:	2300      	movs	r3, #0
 8011e6c:	442b      	add	r3, r5
 8011e6e:	18e2      	adds	r2, r4, r3
 8011e70:	687b      	ldr	r3, [r7, #4]
 8011e72:	64da      	str	r2, [r3, #76]	; 0x4c
  /* Don't take any RTT measurements after retransmitting. */
  pcb->rttest = 0;
 8011e74:	687b      	ldr	r3, [r7, #4]
 8011e76:	2200      	movs	r2, #0
 8011e78:	635a      	str	r2, [r3, #52]	; 0x34

  return ERR_OK;
 8011e7a:	2300      	movs	r3, #0
}
 8011e7c:	4618      	mov	r0, r3
 8011e7e:	3710      	adds	r7, #16
 8011e80:	46bd      	mov	sp, r7
 8011e82:	bdb0      	pop	{r4, r5, r7, pc}
 8011e84:	0801aa8c 	.word	0x0801aa8c
 8011e88:	0801b0c8 	.word	0x0801b0c8
 8011e8c:	0801aae0 	.word	0x0801aae0

08011e90 <tcp_rexmit_rto_commit>:
 *
 * @param pcb the tcp_pcb for which to re-enqueue all unacked segments
 */
void
tcp_rexmit_rto_commit(struct tcp_pcb *pcb)
{
 8011e90:	b580      	push	{r7, lr}
 8011e92:	b082      	sub	sp, #8
 8011e94:	af00      	add	r7, sp, #0
 8011e96:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_rexmit_rto_commit: invalid pcb", pcb != NULL);
 8011e98:	687b      	ldr	r3, [r7, #4]
 8011e9a:	2b00      	cmp	r3, #0
 8011e9c:	d106      	bne.n	8011eac <tcp_rexmit_rto_commit+0x1c>
 8011e9e:	4b0d      	ldr	r3, [pc, #52]	; (8011ed4 <tcp_rexmit_rto_commit+0x44>)
 8011ea0:	f44f 62d3 	mov.w	r2, #1688	; 0x698
 8011ea4:	490c      	ldr	r1, [pc, #48]	; (8011ed8 <tcp_rexmit_rto_commit+0x48>)
 8011ea6:	480d      	ldr	r0, [pc, #52]	; (8011edc <tcp_rexmit_rto_commit+0x4c>)
 8011ea8:	f006 faee 	bl	8018488 <iprintf>

  /* increment number of retransmissions */
  if (pcb->nrtx < 0xFF) {
 8011eac:	687b      	ldr	r3, [r7, #4]
 8011eae:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8011eb2:	2bff      	cmp	r3, #255	; 0xff
 8011eb4:	d007      	beq.n	8011ec6 <tcp_rexmit_rto_commit+0x36>
    ++pcb->nrtx;
 8011eb6:	687b      	ldr	r3, [r7, #4]
 8011eb8:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8011ebc:	3301      	adds	r3, #1
 8011ebe:	b2da      	uxtb	r2, r3
 8011ec0:	687b      	ldr	r3, [r7, #4]
 8011ec2:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  }
  /* Do the actual retransmission */
  tcp_output(pcb);
 8011ec6:	6878      	ldr	r0, [r7, #4]
 8011ec8:	f7ff fc7e 	bl	80117c8 <tcp_output>
}
 8011ecc:	bf00      	nop
 8011ece:	3708      	adds	r7, #8
 8011ed0:	46bd      	mov	sp, r7
 8011ed2:	bd80      	pop	{r7, pc}
 8011ed4:	0801aa8c 	.word	0x0801aa8c
 8011ed8:	0801b0ec 	.word	0x0801b0ec
 8011edc:	0801aae0 	.word	0x0801aae0

08011ee0 <tcp_rexmit_rto>:
 *
 * @param pcb the tcp_pcb for which to re-enqueue all unacked segments
 */
void
tcp_rexmit_rto(struct tcp_pcb *pcb)
{
 8011ee0:	b580      	push	{r7, lr}
 8011ee2:	b082      	sub	sp, #8
 8011ee4:	af00      	add	r7, sp, #0
 8011ee6:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_rexmit_rto: invalid pcb", pcb != NULL);
 8011ee8:	687b      	ldr	r3, [r7, #4]
 8011eea:	2b00      	cmp	r3, #0
 8011eec:	d106      	bne.n	8011efc <tcp_rexmit_rto+0x1c>
 8011eee:	4b0a      	ldr	r3, [pc, #40]	; (8011f18 <tcp_rexmit_rto+0x38>)
 8011ef0:	f240 62ad 	movw	r2, #1709	; 0x6ad
 8011ef4:	4909      	ldr	r1, [pc, #36]	; (8011f1c <tcp_rexmit_rto+0x3c>)
 8011ef6:	480a      	ldr	r0, [pc, #40]	; (8011f20 <tcp_rexmit_rto+0x40>)
 8011ef8:	f006 fac6 	bl	8018488 <iprintf>

  if (tcp_rexmit_rto_prepare(pcb) == ERR_OK) {
 8011efc:	6878      	ldr	r0, [r7, #4]
 8011efe:	f7ff ff57 	bl	8011db0 <tcp_rexmit_rto_prepare>
 8011f02:	4603      	mov	r3, r0
 8011f04:	2b00      	cmp	r3, #0
 8011f06:	d102      	bne.n	8011f0e <tcp_rexmit_rto+0x2e>
    tcp_rexmit_rto_commit(pcb);
 8011f08:	6878      	ldr	r0, [r7, #4]
 8011f0a:	f7ff ffc1 	bl	8011e90 <tcp_rexmit_rto_commit>
  }
}
 8011f0e:	bf00      	nop
 8011f10:	3708      	adds	r7, #8
 8011f12:	46bd      	mov	sp, r7
 8011f14:	bd80      	pop	{r7, pc}
 8011f16:	bf00      	nop
 8011f18:	0801aa8c 	.word	0x0801aa8c
 8011f1c:	0801b110 	.word	0x0801b110
 8011f20:	0801aae0 	.word	0x0801aae0

08011f24 <tcp_rexmit>:
 *
 * @param pcb the tcp_pcb for which to retransmit the first unacked segment
 */
err_t
tcp_rexmit(struct tcp_pcb *pcb)
{
 8011f24:	b590      	push	{r4, r7, lr}
 8011f26:	b085      	sub	sp, #20
 8011f28:	af00      	add	r7, sp, #0
 8011f2a:	6078      	str	r0, [r7, #4]
  struct tcp_seg *seg;
  struct tcp_seg **cur_seg;

  LWIP_ASSERT("tcp_rexmit: invalid pcb", pcb != NULL);
 8011f2c:	687b      	ldr	r3, [r7, #4]
 8011f2e:	2b00      	cmp	r3, #0
 8011f30:	d106      	bne.n	8011f40 <tcp_rexmit+0x1c>
 8011f32:	4b2f      	ldr	r3, [pc, #188]	; (8011ff0 <tcp_rexmit+0xcc>)
 8011f34:	f240 62c1 	movw	r2, #1729	; 0x6c1
 8011f38:	492e      	ldr	r1, [pc, #184]	; (8011ff4 <tcp_rexmit+0xd0>)
 8011f3a:	482f      	ldr	r0, [pc, #188]	; (8011ff8 <tcp_rexmit+0xd4>)
 8011f3c:	f006 faa4 	bl	8018488 <iprintf>

  if (pcb->unacked == NULL) {
 8011f40:	687b      	ldr	r3, [r7, #4]
 8011f42:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8011f44:	2b00      	cmp	r3, #0
 8011f46:	d102      	bne.n	8011f4e <tcp_rexmit+0x2a>
    return ERR_VAL;
 8011f48:	f06f 0305 	mvn.w	r3, #5
 8011f4c:	e04c      	b.n	8011fe8 <tcp_rexmit+0xc4>
  }

  seg = pcb->unacked;
 8011f4e:	687b      	ldr	r3, [r7, #4]
 8011f50:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8011f52:	60bb      	str	r3, [r7, #8]

  /* Give up if the segment is still referenced by the netif driver
     due to deferred transmission. */
  if (tcp_output_segment_busy(seg)) {
 8011f54:	68b8      	ldr	r0, [r7, #8]
 8011f56:	f7ff fe2b 	bl	8011bb0 <tcp_output_segment_busy>
 8011f5a:	4603      	mov	r3, r0
 8011f5c:	2b00      	cmp	r3, #0
 8011f5e:	d002      	beq.n	8011f66 <tcp_rexmit+0x42>
    LWIP_DEBUGF(TCP_RTO_DEBUG, ("tcp_rexmit busy\n"));
    return ERR_VAL;
 8011f60:	f06f 0305 	mvn.w	r3, #5
 8011f64:	e040      	b.n	8011fe8 <tcp_rexmit+0xc4>
  }

  /* Move the first unacked segment to the unsent queue */
  /* Keep the unsent queue sorted. */
  pcb->unacked = seg->next;
 8011f66:	68bb      	ldr	r3, [r7, #8]
 8011f68:	681a      	ldr	r2, [r3, #0]
 8011f6a:	687b      	ldr	r3, [r7, #4]
 8011f6c:	671a      	str	r2, [r3, #112]	; 0x70

  cur_seg = &(pcb->unsent);
 8011f6e:	687b      	ldr	r3, [r7, #4]
 8011f70:	336c      	adds	r3, #108	; 0x6c
 8011f72:	60fb      	str	r3, [r7, #12]
  while (*cur_seg &&
 8011f74:	e002      	b.n	8011f7c <tcp_rexmit+0x58>
         TCP_SEQ_LT(lwip_ntohl((*cur_seg)->tcphdr->seqno), lwip_ntohl(seg->tcphdr->seqno))) {
    cur_seg = &((*cur_seg)->next );
 8011f76:	68fb      	ldr	r3, [r7, #12]
 8011f78:	681b      	ldr	r3, [r3, #0]
 8011f7a:	60fb      	str	r3, [r7, #12]
  while (*cur_seg &&
 8011f7c:	68fb      	ldr	r3, [r7, #12]
 8011f7e:	681b      	ldr	r3, [r3, #0]
 8011f80:	2b00      	cmp	r3, #0
 8011f82:	d011      	beq.n	8011fa8 <tcp_rexmit+0x84>
         TCP_SEQ_LT(lwip_ntohl((*cur_seg)->tcphdr->seqno), lwip_ntohl(seg->tcphdr->seqno))) {
 8011f84:	68fb      	ldr	r3, [r7, #12]
 8011f86:	681b      	ldr	r3, [r3, #0]
 8011f88:	68db      	ldr	r3, [r3, #12]
 8011f8a:	685b      	ldr	r3, [r3, #4]
 8011f8c:	4618      	mov	r0, r3
 8011f8e:	f7f8 f994 	bl	800a2ba <lwip_htonl>
 8011f92:	4604      	mov	r4, r0
 8011f94:	68bb      	ldr	r3, [r7, #8]
 8011f96:	68db      	ldr	r3, [r3, #12]
 8011f98:	685b      	ldr	r3, [r3, #4]
 8011f9a:	4618      	mov	r0, r3
 8011f9c:	f7f8 f98d 	bl	800a2ba <lwip_htonl>
 8011fa0:	4603      	mov	r3, r0
 8011fa2:	1ae3      	subs	r3, r4, r3
  while (*cur_seg &&
 8011fa4:	2b00      	cmp	r3, #0
 8011fa6:	dbe6      	blt.n	8011f76 <tcp_rexmit+0x52>
  }
  seg->next = *cur_seg;
 8011fa8:	68fb      	ldr	r3, [r7, #12]
 8011faa:	681a      	ldr	r2, [r3, #0]
 8011fac:	68bb      	ldr	r3, [r7, #8]
 8011fae:	601a      	str	r2, [r3, #0]
  *cur_seg = seg;
 8011fb0:	68fb      	ldr	r3, [r7, #12]
 8011fb2:	68ba      	ldr	r2, [r7, #8]
 8011fb4:	601a      	str	r2, [r3, #0]
#if TCP_OVERSIZE
  if (seg->next == NULL) {
 8011fb6:	68bb      	ldr	r3, [r7, #8]
 8011fb8:	681b      	ldr	r3, [r3, #0]
 8011fba:	2b00      	cmp	r3, #0
 8011fbc:	d103      	bne.n	8011fc6 <tcp_rexmit+0xa2>
    /* the retransmitted segment is last in unsent, so reset unsent_oversize */
    pcb->unsent_oversize = 0;
 8011fbe:	687b      	ldr	r3, [r7, #4]
 8011fc0:	2200      	movs	r2, #0
 8011fc2:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
  }
#endif /* TCP_OVERSIZE */

  if (pcb->nrtx < 0xFF) {
 8011fc6:	687b      	ldr	r3, [r7, #4]
 8011fc8:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8011fcc:	2bff      	cmp	r3, #255	; 0xff
 8011fce:	d007      	beq.n	8011fe0 <tcp_rexmit+0xbc>
    ++pcb->nrtx;
 8011fd0:	687b      	ldr	r3, [r7, #4]
 8011fd2:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8011fd6:	3301      	adds	r3, #1
 8011fd8:	b2da      	uxtb	r2, r3
 8011fda:	687b      	ldr	r3, [r7, #4]
 8011fdc:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  }

  /* Don't take any rtt measurements after retransmitting. */
  pcb->rttest = 0;
 8011fe0:	687b      	ldr	r3, [r7, #4]
 8011fe2:	2200      	movs	r2, #0
 8011fe4:	635a      	str	r2, [r3, #52]	; 0x34

  /* Do the actual retransmission. */
  MIB2_STATS_INC(mib2.tcpretranssegs);
  /* No need to call tcp_output: we are always called from tcp_input()
     and thus tcp_output directly returns. */
  return ERR_OK;
 8011fe6:	2300      	movs	r3, #0
}
 8011fe8:	4618      	mov	r0, r3
 8011fea:	3714      	adds	r7, #20
 8011fec:	46bd      	mov	sp, r7
 8011fee:	bd90      	pop	{r4, r7, pc}
 8011ff0:	0801aa8c 	.word	0x0801aa8c
 8011ff4:	0801b12c 	.word	0x0801b12c
 8011ff8:	0801aae0 	.word	0x0801aae0

08011ffc <tcp_rexmit_fast>:
 *
 * @param pcb the tcp_pcb for which to retransmit the first unacked segment
 */
void
tcp_rexmit_fast(struct tcp_pcb *pcb)
{
 8011ffc:	b580      	push	{r7, lr}
 8011ffe:	b082      	sub	sp, #8
 8012000:	af00      	add	r7, sp, #0
 8012002:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_rexmit_fast: invalid pcb", pcb != NULL);
 8012004:	687b      	ldr	r3, [r7, #4]
 8012006:	2b00      	cmp	r3, #0
 8012008:	d106      	bne.n	8012018 <tcp_rexmit_fast+0x1c>
 801200a:	4b2a      	ldr	r3, [pc, #168]	; (80120b4 <tcp_rexmit_fast+0xb8>)
 801200c:	f240 62f9 	movw	r2, #1785	; 0x6f9
 8012010:	4929      	ldr	r1, [pc, #164]	; (80120b8 <tcp_rexmit_fast+0xbc>)
 8012012:	482a      	ldr	r0, [pc, #168]	; (80120bc <tcp_rexmit_fast+0xc0>)
 8012014:	f006 fa38 	bl	8018488 <iprintf>

  if (pcb->unacked != NULL && !(pcb->flags & TF_INFR)) {
 8012018:	687b      	ldr	r3, [r7, #4]
 801201a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 801201c:	2b00      	cmp	r3, #0
 801201e:	d044      	beq.n	80120aa <tcp_rexmit_fast+0xae>
 8012020:	687b      	ldr	r3, [r7, #4]
 8012022:	8b5b      	ldrh	r3, [r3, #26]
 8012024:	f003 0304 	and.w	r3, r3, #4
 8012028:	2b00      	cmp	r3, #0
 801202a:	d13e      	bne.n	80120aa <tcp_rexmit_fast+0xae>
    LWIP_DEBUGF(TCP_FR_DEBUG,
                ("tcp_receive: dupacks %"U16_F" (%"U32_F
                 "), fast retransmit %"U32_F"\n",
                 (u16_t)pcb->dupacks, pcb->lastack,
                 lwip_ntohl(pcb->unacked->tcphdr->seqno)));
    if (tcp_rexmit(pcb) == ERR_OK) {
 801202c:	6878      	ldr	r0, [r7, #4]
 801202e:	f7ff ff79 	bl	8011f24 <tcp_rexmit>
 8012032:	4603      	mov	r3, r0
 8012034:	2b00      	cmp	r3, #0
 8012036:	d138      	bne.n	80120aa <tcp_rexmit_fast+0xae>
      /* Set ssthresh to half of the minimum of the current
       * cwnd and the advertised window */
      pcb->ssthresh = LWIP_MIN(pcb->cwnd, pcb->snd_wnd) / 2;
 8012038:	687b      	ldr	r3, [r7, #4]
 801203a:	f8b3 2060 	ldrh.w	r2, [r3, #96]	; 0x60
 801203e:	687b      	ldr	r3, [r7, #4]
 8012040:	f8b3 3048 	ldrh.w	r3, [r3, #72]	; 0x48
 8012044:	4293      	cmp	r3, r2
 8012046:	bf28      	it	cs
 8012048:	4613      	movcs	r3, r2
 801204a:	b29b      	uxth	r3, r3
 801204c:	0fda      	lsrs	r2, r3, #31
 801204e:	4413      	add	r3, r2
 8012050:	105b      	asrs	r3, r3, #1
 8012052:	b29a      	uxth	r2, r3
 8012054:	687b      	ldr	r3, [r7, #4]
 8012056:	f8a3 204a 	strh.w	r2, [r3, #74]	; 0x4a

      /* The minimum value for ssthresh should be 2 MSS */
      if (pcb->ssthresh < (2U * pcb->mss)) {
 801205a:	687b      	ldr	r3, [r7, #4]
 801205c:	f8b3 304a 	ldrh.w	r3, [r3, #74]	; 0x4a
 8012060:	461a      	mov	r2, r3
 8012062:	687b      	ldr	r3, [r7, #4]
 8012064:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8012066:	005b      	lsls	r3, r3, #1
 8012068:	429a      	cmp	r2, r3
 801206a:	d206      	bcs.n	801207a <tcp_rexmit_fast+0x7e>
        LWIP_DEBUGF(TCP_FR_DEBUG,
                    ("tcp_receive: The minimum value for ssthresh %"TCPWNDSIZE_F
                     " should be min 2 mss %"U16_F"...\n",
                     pcb->ssthresh, (u16_t)(2 * pcb->mss)));
        pcb->ssthresh = 2 * pcb->mss;
 801206c:	687b      	ldr	r3, [r7, #4]
 801206e:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8012070:	005b      	lsls	r3, r3, #1
 8012072:	b29a      	uxth	r2, r3
 8012074:	687b      	ldr	r3, [r7, #4]
 8012076:	f8a3 204a 	strh.w	r2, [r3, #74]	; 0x4a
      }

      pcb->cwnd = pcb->ssthresh + 3 * pcb->mss;
 801207a:	687b      	ldr	r3, [r7, #4]
 801207c:	f8b3 204a 	ldrh.w	r2, [r3, #74]	; 0x4a
 8012080:	687b      	ldr	r3, [r7, #4]
 8012082:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8012084:	4619      	mov	r1, r3
 8012086:	0049      	lsls	r1, r1, #1
 8012088:	440b      	add	r3, r1
 801208a:	b29b      	uxth	r3, r3
 801208c:	4413      	add	r3, r2
 801208e:	b29a      	uxth	r2, r3
 8012090:	687b      	ldr	r3, [r7, #4]
 8012092:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
      tcp_set_flags(pcb, TF_INFR);
 8012096:	687b      	ldr	r3, [r7, #4]
 8012098:	8b5b      	ldrh	r3, [r3, #26]
 801209a:	f043 0304 	orr.w	r3, r3, #4
 801209e:	b29a      	uxth	r2, r3
 80120a0:	687b      	ldr	r3, [r7, #4]
 80120a2:	835a      	strh	r2, [r3, #26]

      /* Reset the retransmission timer to prevent immediate rto retransmissions */
      pcb->rtime = 0;
 80120a4:	687b      	ldr	r3, [r7, #4]
 80120a6:	2200      	movs	r2, #0
 80120a8:	861a      	strh	r2, [r3, #48]	; 0x30
    }
  }
}
 80120aa:	bf00      	nop
 80120ac:	3708      	adds	r7, #8
 80120ae:	46bd      	mov	sp, r7
 80120b0:	bd80      	pop	{r7, pc}
 80120b2:	bf00      	nop
 80120b4:	0801aa8c 	.word	0x0801aa8c
 80120b8:	0801b144 	.word	0x0801b144
 80120bc:	0801aae0 	.word	0x0801aae0

080120c0 <tcp_output_alloc_header_common>:

static struct pbuf *
tcp_output_alloc_header_common(u32_t ackno, u16_t optlen, u16_t datalen,
                        u32_t seqno_be /* already in network byte order */,
                        u16_t src_port, u16_t dst_port, u8_t flags, u16_t wnd)
{
 80120c0:	b580      	push	{r7, lr}
 80120c2:	b086      	sub	sp, #24
 80120c4:	af00      	add	r7, sp, #0
 80120c6:	60f8      	str	r0, [r7, #12]
 80120c8:	607b      	str	r3, [r7, #4]
 80120ca:	460b      	mov	r3, r1
 80120cc:	817b      	strh	r3, [r7, #10]
 80120ce:	4613      	mov	r3, r2
 80120d0:	813b      	strh	r3, [r7, #8]
  struct tcp_hdr *tcphdr;
  struct pbuf *p;

  p = pbuf_alloc(PBUF_IP, TCP_HLEN + optlen + datalen, PBUF_RAM);
 80120d2:	897a      	ldrh	r2, [r7, #10]
 80120d4:	893b      	ldrh	r3, [r7, #8]
 80120d6:	4413      	add	r3, r2
 80120d8:	b29b      	uxth	r3, r3
 80120da:	3314      	adds	r3, #20
 80120dc:	b29b      	uxth	r3, r3
 80120de:	f44f 7220 	mov.w	r2, #640	; 0x280
 80120e2:	4619      	mov	r1, r3
 80120e4:	2022      	movs	r0, #34	; 0x22
 80120e6:	f7f9 fc47 	bl	800b978 <pbuf_alloc>
 80120ea:	6178      	str	r0, [r7, #20]
  if (p != NULL) {
 80120ec:	697b      	ldr	r3, [r7, #20]
 80120ee:	2b00      	cmp	r3, #0
 80120f0:	d04d      	beq.n	801218e <tcp_output_alloc_header_common+0xce>
    LWIP_ASSERT("check that first pbuf can hold struct tcp_hdr",
 80120f2:	897b      	ldrh	r3, [r7, #10]
 80120f4:	3313      	adds	r3, #19
 80120f6:	697a      	ldr	r2, [r7, #20]
 80120f8:	8952      	ldrh	r2, [r2, #10]
 80120fa:	4293      	cmp	r3, r2
 80120fc:	db06      	blt.n	801210c <tcp_output_alloc_header_common+0x4c>
 80120fe:	4b26      	ldr	r3, [pc, #152]	; (8012198 <tcp_output_alloc_header_common+0xd8>)
 8012100:	f240 7223 	movw	r2, #1827	; 0x723
 8012104:	4925      	ldr	r1, [pc, #148]	; (801219c <tcp_output_alloc_header_common+0xdc>)
 8012106:	4826      	ldr	r0, [pc, #152]	; (80121a0 <tcp_output_alloc_header_common+0xe0>)
 8012108:	f006 f9be 	bl	8018488 <iprintf>
                (p->len >= TCP_HLEN + optlen));
    tcphdr = (struct tcp_hdr *)p->payload;
 801210c:	697b      	ldr	r3, [r7, #20]
 801210e:	685b      	ldr	r3, [r3, #4]
 8012110:	613b      	str	r3, [r7, #16]
    tcphdr->src = lwip_htons(src_port);
 8012112:	8c3b      	ldrh	r3, [r7, #32]
 8012114:	4618      	mov	r0, r3
 8012116:	f7f8 f8bb 	bl	800a290 <lwip_htons>
 801211a:	4603      	mov	r3, r0
 801211c:	461a      	mov	r2, r3
 801211e:	693b      	ldr	r3, [r7, #16]
 8012120:	801a      	strh	r2, [r3, #0]
    tcphdr->dest = lwip_htons(dst_port);
 8012122:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8012124:	4618      	mov	r0, r3
 8012126:	f7f8 f8b3 	bl	800a290 <lwip_htons>
 801212a:	4603      	mov	r3, r0
 801212c:	461a      	mov	r2, r3
 801212e:	693b      	ldr	r3, [r7, #16]
 8012130:	805a      	strh	r2, [r3, #2]
    tcphdr->seqno = seqno_be;
 8012132:	693b      	ldr	r3, [r7, #16]
 8012134:	687a      	ldr	r2, [r7, #4]
 8012136:	605a      	str	r2, [r3, #4]
    tcphdr->ackno = lwip_htonl(ackno);
 8012138:	68f8      	ldr	r0, [r7, #12]
 801213a:	f7f8 f8be 	bl	800a2ba <lwip_htonl>
 801213e:	4602      	mov	r2, r0
 8012140:	693b      	ldr	r3, [r7, #16]
 8012142:	609a      	str	r2, [r3, #8]
    TCPH_HDRLEN_FLAGS_SET(tcphdr, (5 + optlen / 4), flags);
 8012144:	897b      	ldrh	r3, [r7, #10]
 8012146:	089b      	lsrs	r3, r3, #2
 8012148:	b29b      	uxth	r3, r3
 801214a:	3305      	adds	r3, #5
 801214c:	b29b      	uxth	r3, r3
 801214e:	031b      	lsls	r3, r3, #12
 8012150:	b29a      	uxth	r2, r3
 8012152:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 8012156:	b29b      	uxth	r3, r3
 8012158:	4313      	orrs	r3, r2
 801215a:	b29b      	uxth	r3, r3
 801215c:	4618      	mov	r0, r3
 801215e:	f7f8 f897 	bl	800a290 <lwip_htons>
 8012162:	4603      	mov	r3, r0
 8012164:	461a      	mov	r2, r3
 8012166:	693b      	ldr	r3, [r7, #16]
 8012168:	819a      	strh	r2, [r3, #12]
    tcphdr->wnd = lwip_htons(wnd);
 801216a:	8dbb      	ldrh	r3, [r7, #44]	; 0x2c
 801216c:	4618      	mov	r0, r3
 801216e:	f7f8 f88f 	bl	800a290 <lwip_htons>
 8012172:	4603      	mov	r3, r0
 8012174:	461a      	mov	r2, r3
 8012176:	693b      	ldr	r3, [r7, #16]
 8012178:	81da      	strh	r2, [r3, #14]
    tcphdr->chksum = 0;
 801217a:	693b      	ldr	r3, [r7, #16]
 801217c:	2200      	movs	r2, #0
 801217e:	741a      	strb	r2, [r3, #16]
 8012180:	2200      	movs	r2, #0
 8012182:	745a      	strb	r2, [r3, #17]
    tcphdr->urgp = 0;
 8012184:	693b      	ldr	r3, [r7, #16]
 8012186:	2200      	movs	r2, #0
 8012188:	749a      	strb	r2, [r3, #18]
 801218a:	2200      	movs	r2, #0
 801218c:	74da      	strb	r2, [r3, #19]
  }
  return p;
 801218e:	697b      	ldr	r3, [r7, #20]
}
 8012190:	4618      	mov	r0, r3
 8012192:	3718      	adds	r7, #24
 8012194:	46bd      	mov	sp, r7
 8012196:	bd80      	pop	{r7, pc}
 8012198:	0801aa8c 	.word	0x0801aa8c
 801219c:	0801b164 	.word	0x0801b164
 80121a0:	0801aae0 	.word	0x0801aae0

080121a4 <tcp_output_alloc_header>:
 * @return pbuf with p->payload being the tcp_hdr
 */
static struct pbuf *
tcp_output_alloc_header(struct tcp_pcb *pcb, u16_t optlen, u16_t datalen,
                        u32_t seqno_be /* already in network byte order */)
{
 80121a4:	b5b0      	push	{r4, r5, r7, lr}
 80121a6:	b08a      	sub	sp, #40	; 0x28
 80121a8:	af04      	add	r7, sp, #16
 80121aa:	60f8      	str	r0, [r7, #12]
 80121ac:	607b      	str	r3, [r7, #4]
 80121ae:	460b      	mov	r3, r1
 80121b0:	817b      	strh	r3, [r7, #10]
 80121b2:	4613      	mov	r3, r2
 80121b4:	813b      	strh	r3, [r7, #8]
  struct pbuf *p;

  LWIP_ASSERT("tcp_output_alloc_header: invalid pcb", pcb != NULL);
 80121b6:	68fb      	ldr	r3, [r7, #12]
 80121b8:	2b00      	cmp	r3, #0
 80121ba:	d106      	bne.n	80121ca <tcp_output_alloc_header+0x26>
 80121bc:	4b15      	ldr	r3, [pc, #84]	; (8012214 <tcp_output_alloc_header+0x70>)
 80121be:	f240 7242 	movw	r2, #1858	; 0x742
 80121c2:	4915      	ldr	r1, [pc, #84]	; (8012218 <tcp_output_alloc_header+0x74>)
 80121c4:	4815      	ldr	r0, [pc, #84]	; (801221c <tcp_output_alloc_header+0x78>)
 80121c6:	f006 f95f 	bl	8018488 <iprintf>

  p = tcp_output_alloc_header_common(pcb->rcv_nxt, optlen, datalen,
 80121ca:	68fb      	ldr	r3, [r7, #12]
 80121cc:	6a58      	ldr	r0, [r3, #36]	; 0x24
 80121ce:	68fb      	ldr	r3, [r7, #12]
 80121d0:	8adb      	ldrh	r3, [r3, #22]
 80121d2:	68fa      	ldr	r2, [r7, #12]
 80121d4:	8b12      	ldrh	r2, [r2, #24]
 80121d6:	68f9      	ldr	r1, [r7, #12]
 80121d8:	8d49      	ldrh	r1, [r1, #42]	; 0x2a
 80121da:	893d      	ldrh	r5, [r7, #8]
 80121dc:	897c      	ldrh	r4, [r7, #10]
 80121de:	9103      	str	r1, [sp, #12]
 80121e0:	2110      	movs	r1, #16
 80121e2:	9102      	str	r1, [sp, #8]
 80121e4:	9201      	str	r2, [sp, #4]
 80121e6:	9300      	str	r3, [sp, #0]
 80121e8:	687b      	ldr	r3, [r7, #4]
 80121ea:	462a      	mov	r2, r5
 80121ec:	4621      	mov	r1, r4
 80121ee:	f7ff ff67 	bl	80120c0 <tcp_output_alloc_header_common>
 80121f2:	6178      	str	r0, [r7, #20]
    seqno_be, pcb->local_port, pcb->remote_port, TCP_ACK,
    TCPWND_MIN16(RCV_WND_SCALE(pcb, pcb->rcv_ann_wnd)));
  if (p != NULL) {
 80121f4:	697b      	ldr	r3, [r7, #20]
 80121f6:	2b00      	cmp	r3, #0
 80121f8:	d006      	beq.n	8012208 <tcp_output_alloc_header+0x64>
    /* If we're sending a packet, update the announced right window edge */
    pcb->rcv_ann_right_edge = pcb->rcv_nxt + pcb->rcv_ann_wnd;
 80121fa:	68fb      	ldr	r3, [r7, #12]
 80121fc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80121fe:	68fa      	ldr	r2, [r7, #12]
 8012200:	8d52      	ldrh	r2, [r2, #42]	; 0x2a
 8012202:	441a      	add	r2, r3
 8012204:	68fb      	ldr	r3, [r7, #12]
 8012206:	62da      	str	r2, [r3, #44]	; 0x2c
  }
  return p;
 8012208:	697b      	ldr	r3, [r7, #20]
}
 801220a:	4618      	mov	r0, r3
 801220c:	3718      	adds	r7, #24
 801220e:	46bd      	mov	sp, r7
 8012210:	bdb0      	pop	{r4, r5, r7, pc}
 8012212:	bf00      	nop
 8012214:	0801aa8c 	.word	0x0801aa8c
 8012218:	0801b194 	.word	0x0801b194
 801221c:	0801aae0 	.word	0x0801aae0

08012220 <tcp_output_fill_options>:

/* Fill in options for control segments */
static void
tcp_output_fill_options(const struct tcp_pcb *pcb, struct pbuf *p, u8_t optflags, u8_t num_sacks)
{
 8012220:	b580      	push	{r7, lr}
 8012222:	b088      	sub	sp, #32
 8012224:	af00      	add	r7, sp, #0
 8012226:	60f8      	str	r0, [r7, #12]
 8012228:	60b9      	str	r1, [r7, #8]
 801222a:	4611      	mov	r1, r2
 801222c:	461a      	mov	r2, r3
 801222e:	460b      	mov	r3, r1
 8012230:	71fb      	strb	r3, [r7, #7]
 8012232:	4613      	mov	r3, r2
 8012234:	71bb      	strb	r3, [r7, #6]
  struct tcp_hdr *tcphdr;
  u32_t *opts;
  u16_t sacks_len = 0;
 8012236:	2300      	movs	r3, #0
 8012238:	83fb      	strh	r3, [r7, #30]

  LWIP_ASSERT("tcp_output_fill_options: invalid pbuf", p != NULL);
 801223a:	68bb      	ldr	r3, [r7, #8]
 801223c:	2b00      	cmp	r3, #0
 801223e:	d106      	bne.n	801224e <tcp_output_fill_options+0x2e>
 8012240:	4b12      	ldr	r3, [pc, #72]	; (801228c <tcp_output_fill_options+0x6c>)
 8012242:	f240 7256 	movw	r2, #1878	; 0x756
 8012246:	4912      	ldr	r1, [pc, #72]	; (8012290 <tcp_output_fill_options+0x70>)
 8012248:	4812      	ldr	r0, [pc, #72]	; (8012294 <tcp_output_fill_options+0x74>)
 801224a:	f006 f91d 	bl	8018488 <iprintf>

  tcphdr = (struct tcp_hdr *)p->payload;
 801224e:	68bb      	ldr	r3, [r7, #8]
 8012250:	685b      	ldr	r3, [r3, #4]
 8012252:	61bb      	str	r3, [r7, #24]
  opts = (u32_t *)(void *)(tcphdr + 1);
 8012254:	69bb      	ldr	r3, [r7, #24]
 8012256:	3314      	adds	r3, #20
 8012258:	617b      	str	r3, [r7, #20]
  opts = LWIP_HOOK_TCP_OUT_ADD_TCPOPTS(p, tcphdr, pcb, opts);
#endif

  LWIP_UNUSED_ARG(pcb);
  LWIP_UNUSED_ARG(sacks_len);
  LWIP_ASSERT("options not filled", (u8_t *)opts == ((u8_t *)(tcphdr + 1)) + sacks_len * 4 + LWIP_TCP_OPT_LENGTH_SEGMENT(optflags, pcb));
 801225a:	8bfb      	ldrh	r3, [r7, #30]
 801225c:	009b      	lsls	r3, r3, #2
 801225e:	461a      	mov	r2, r3
 8012260:	79fb      	ldrb	r3, [r7, #7]
 8012262:	009b      	lsls	r3, r3, #2
 8012264:	f003 0304 	and.w	r3, r3, #4
 8012268:	4413      	add	r3, r2
 801226a:	3314      	adds	r3, #20
 801226c:	69ba      	ldr	r2, [r7, #24]
 801226e:	4413      	add	r3, r2
 8012270:	697a      	ldr	r2, [r7, #20]
 8012272:	429a      	cmp	r2, r3
 8012274:	d006      	beq.n	8012284 <tcp_output_fill_options+0x64>
 8012276:	4b05      	ldr	r3, [pc, #20]	; (801228c <tcp_output_fill_options+0x6c>)
 8012278:	f240 7275 	movw	r2, #1909	; 0x775
 801227c:	4906      	ldr	r1, [pc, #24]	; (8012298 <tcp_output_fill_options+0x78>)
 801227e:	4805      	ldr	r0, [pc, #20]	; (8012294 <tcp_output_fill_options+0x74>)
 8012280:	f006 f902 	bl	8018488 <iprintf>
  LWIP_UNUSED_ARG(optflags); /* for LWIP_NOASSERT */
  LWIP_UNUSED_ARG(opts); /* for LWIP_NOASSERT */
}
 8012284:	bf00      	nop
 8012286:	3720      	adds	r7, #32
 8012288:	46bd      	mov	sp, r7
 801228a:	bd80      	pop	{r7, pc}
 801228c:	0801aa8c 	.word	0x0801aa8c
 8012290:	0801b1bc 	.word	0x0801b1bc
 8012294:	0801aae0 	.word	0x0801aae0
 8012298:	0801b0b4 	.word	0x0801b0b4

0801229c <tcp_output_control_segment>:
 * header checksum and calling ip_output_if while handling netif hints and stats.
 */
static err_t
tcp_output_control_segment(const struct tcp_pcb *pcb, struct pbuf *p,
                           const ip_addr_t *src, const ip_addr_t *dst)
{
 801229c:	b580      	push	{r7, lr}
 801229e:	b08a      	sub	sp, #40	; 0x28
 80122a0:	af04      	add	r7, sp, #16
 80122a2:	60f8      	str	r0, [r7, #12]
 80122a4:	60b9      	str	r1, [r7, #8]
 80122a6:	607a      	str	r2, [r7, #4]
 80122a8:	603b      	str	r3, [r7, #0]
  err_t err;
  struct netif *netif;

  LWIP_ASSERT("tcp_output_control_segment: invalid pbuf", p != NULL);
 80122aa:	68bb      	ldr	r3, [r7, #8]
 80122ac:	2b00      	cmp	r3, #0
 80122ae:	d106      	bne.n	80122be <tcp_output_control_segment+0x22>
 80122b0:	4b1c      	ldr	r3, [pc, #112]	; (8012324 <tcp_output_control_segment+0x88>)
 80122b2:	f240 7287 	movw	r2, #1927	; 0x787
 80122b6:	491c      	ldr	r1, [pc, #112]	; (8012328 <tcp_output_control_segment+0x8c>)
 80122b8:	481c      	ldr	r0, [pc, #112]	; (801232c <tcp_output_control_segment+0x90>)
 80122ba:	f006 f8e5 	bl	8018488 <iprintf>

  netif = tcp_route(pcb, src, dst);
 80122be:	683a      	ldr	r2, [r7, #0]
 80122c0:	6879      	ldr	r1, [r7, #4]
 80122c2:	68f8      	ldr	r0, [r7, #12]
 80122c4:	f7fe fae8 	bl	8010898 <tcp_route>
 80122c8:	6138      	str	r0, [r7, #16]
  if (netif == NULL) {
 80122ca:	693b      	ldr	r3, [r7, #16]
 80122cc:	2b00      	cmp	r3, #0
 80122ce:	d102      	bne.n	80122d6 <tcp_output_control_segment+0x3a>
    err = ERR_RTE;
 80122d0:	23fc      	movs	r3, #252	; 0xfc
 80122d2:	75fb      	strb	r3, [r7, #23]
 80122d4:	e01c      	b.n	8012310 <tcp_output_control_segment+0x74>
      struct tcp_hdr *tcphdr = (struct tcp_hdr *)p->payload;
      tcphdr->chksum = ip_chksum_pseudo(p, IP_PROTO_TCP, p->tot_len,
                                        src, dst);
    }
#endif
    if (pcb != NULL) {
 80122d6:	68fb      	ldr	r3, [r7, #12]
 80122d8:	2b00      	cmp	r3, #0
 80122da:	d006      	beq.n	80122ea <tcp_output_control_segment+0x4e>
      NETIF_SET_HINTS(netif, LWIP_CONST_CAST(struct netif_hint*, &(pcb->netif_hints)));
      ttl = pcb->ttl;
 80122dc:	68fb      	ldr	r3, [r7, #12]
 80122de:	7adb      	ldrb	r3, [r3, #11]
 80122e0:	75bb      	strb	r3, [r7, #22]
      tos = pcb->tos;
 80122e2:	68fb      	ldr	r3, [r7, #12]
 80122e4:	7a9b      	ldrb	r3, [r3, #10]
 80122e6:	757b      	strb	r3, [r7, #21]
 80122e8:	e003      	b.n	80122f2 <tcp_output_control_segment+0x56>
    } else {
      /* Send output with hardcoded TTL/HL since we have no access to the pcb */
      ttl = TCP_TTL;
 80122ea:	23ff      	movs	r3, #255	; 0xff
 80122ec:	75bb      	strb	r3, [r7, #22]
      tos = 0;
 80122ee:	2300      	movs	r3, #0
 80122f0:	757b      	strb	r3, [r7, #21]
    }
    TCP_STATS_INC(tcp.xmit);
    err = ip_output_if(p, src, dst, ttl, tos, IP_PROTO_TCP, netif);
 80122f2:	7dba      	ldrb	r2, [r7, #22]
 80122f4:	693b      	ldr	r3, [r7, #16]
 80122f6:	9302      	str	r3, [sp, #8]
 80122f8:	2306      	movs	r3, #6
 80122fa:	9301      	str	r3, [sp, #4]
 80122fc:	7d7b      	ldrb	r3, [r7, #21]
 80122fe:	9300      	str	r3, [sp, #0]
 8012300:	4613      	mov	r3, r2
 8012302:	683a      	ldr	r2, [r7, #0]
 8012304:	6879      	ldr	r1, [r7, #4]
 8012306:	68b8      	ldr	r0, [r7, #8]
 8012308:	f004 f9d2 	bl	80166b0 <ip4_output_if>
 801230c:	4603      	mov	r3, r0
 801230e:	75fb      	strb	r3, [r7, #23]
    NETIF_RESET_HINTS(netif);
  }
  pbuf_free(p);
 8012310:	68b8      	ldr	r0, [r7, #8]
 8012312:	f7f9 fe15 	bl	800bf40 <pbuf_free>
  return err;
 8012316:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 801231a:	4618      	mov	r0, r3
 801231c:	3718      	adds	r7, #24
 801231e:	46bd      	mov	sp, r7
 8012320:	bd80      	pop	{r7, pc}
 8012322:	bf00      	nop
 8012324:	0801aa8c 	.word	0x0801aa8c
 8012328:	0801b1e4 	.word	0x0801b1e4
 801232c:	0801aae0 	.word	0x0801aae0

08012330 <tcp_rst>:
 */
void
tcp_rst(const struct tcp_pcb *pcb, u32_t seqno, u32_t ackno,
        const ip_addr_t *local_ip, const ip_addr_t *remote_ip,
        u16_t local_port, u16_t remote_port)
{
 8012330:	b590      	push	{r4, r7, lr}
 8012332:	b08b      	sub	sp, #44	; 0x2c
 8012334:	af04      	add	r7, sp, #16
 8012336:	60f8      	str	r0, [r7, #12]
 8012338:	60b9      	str	r1, [r7, #8]
 801233a:	607a      	str	r2, [r7, #4]
 801233c:	603b      	str	r3, [r7, #0]
  struct pbuf *p;
  u16_t wnd;
  u8_t optlen;

  LWIP_ASSERT("tcp_rst: invalid local_ip", local_ip != NULL);
 801233e:	683b      	ldr	r3, [r7, #0]
 8012340:	2b00      	cmp	r3, #0
 8012342:	d106      	bne.n	8012352 <tcp_rst+0x22>
 8012344:	4b1f      	ldr	r3, [pc, #124]	; (80123c4 <tcp_rst+0x94>)
 8012346:	f240 72c4 	movw	r2, #1988	; 0x7c4
 801234a:	491f      	ldr	r1, [pc, #124]	; (80123c8 <tcp_rst+0x98>)
 801234c:	481f      	ldr	r0, [pc, #124]	; (80123cc <tcp_rst+0x9c>)
 801234e:	f006 f89b 	bl	8018488 <iprintf>
  LWIP_ASSERT("tcp_rst: invalid remote_ip", remote_ip != NULL);
 8012352:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8012354:	2b00      	cmp	r3, #0
 8012356:	d106      	bne.n	8012366 <tcp_rst+0x36>
 8012358:	4b1a      	ldr	r3, [pc, #104]	; (80123c4 <tcp_rst+0x94>)
 801235a:	f240 72c5 	movw	r2, #1989	; 0x7c5
 801235e:	491c      	ldr	r1, [pc, #112]	; (80123d0 <tcp_rst+0xa0>)
 8012360:	481a      	ldr	r0, [pc, #104]	; (80123cc <tcp_rst+0x9c>)
 8012362:	f006 f891 	bl	8018488 <iprintf>

  optlen = LWIP_TCP_OPT_LENGTH_SEGMENT(0, pcb);
 8012366:	2300      	movs	r3, #0
 8012368:	75fb      	strb	r3, [r7, #23]

#if LWIP_WND_SCALE
  wnd = PP_HTONS(((TCP_WND >> TCP_RCV_SCALE) & 0xFFFF));
#else
  wnd = PP_HTONS(TCP_WND);
 801236a:	f246 0308 	movw	r3, #24584	; 0x6008
 801236e:	82bb      	strh	r3, [r7, #20]
#endif

  p = tcp_output_alloc_header_common(ackno, optlen, 0, lwip_htonl(seqno), local_port,
 8012370:	7dfb      	ldrb	r3, [r7, #23]
 8012372:	b29c      	uxth	r4, r3
 8012374:	68b8      	ldr	r0, [r7, #8]
 8012376:	f7f7 ffa0 	bl	800a2ba <lwip_htonl>
 801237a:	4602      	mov	r2, r0
 801237c:	8abb      	ldrh	r3, [r7, #20]
 801237e:	9303      	str	r3, [sp, #12]
 8012380:	2314      	movs	r3, #20
 8012382:	9302      	str	r3, [sp, #8]
 8012384:	8e3b      	ldrh	r3, [r7, #48]	; 0x30
 8012386:	9301      	str	r3, [sp, #4]
 8012388:	8dbb      	ldrh	r3, [r7, #44]	; 0x2c
 801238a:	9300      	str	r3, [sp, #0]
 801238c:	4613      	mov	r3, r2
 801238e:	2200      	movs	r2, #0
 8012390:	4621      	mov	r1, r4
 8012392:	6878      	ldr	r0, [r7, #4]
 8012394:	f7ff fe94 	bl	80120c0 <tcp_output_alloc_header_common>
 8012398:	6138      	str	r0, [r7, #16]
    remote_port, TCP_RST | TCP_ACK, wnd);
  if (p == NULL) {
 801239a:	693b      	ldr	r3, [r7, #16]
 801239c:	2b00      	cmp	r3, #0
 801239e:	d00c      	beq.n	80123ba <tcp_rst+0x8a>
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_rst: could not allocate memory for pbuf\n"));
    return;
  }
  tcp_output_fill_options(pcb, p, 0, optlen);
 80123a0:	7dfb      	ldrb	r3, [r7, #23]
 80123a2:	2200      	movs	r2, #0
 80123a4:	6939      	ldr	r1, [r7, #16]
 80123a6:	68f8      	ldr	r0, [r7, #12]
 80123a8:	f7ff ff3a 	bl	8012220 <tcp_output_fill_options>

  MIB2_STATS_INC(mib2.tcpoutrsts);

  tcp_output_control_segment(pcb, p, local_ip, remote_ip);
 80123ac:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80123ae:	683a      	ldr	r2, [r7, #0]
 80123b0:	6939      	ldr	r1, [r7, #16]
 80123b2:	68f8      	ldr	r0, [r7, #12]
 80123b4:	f7ff ff72 	bl	801229c <tcp_output_control_segment>
 80123b8:	e000      	b.n	80123bc <tcp_rst+0x8c>
    return;
 80123ba:	bf00      	nop
  LWIP_DEBUGF(TCP_RST_DEBUG, ("tcp_rst: seqno %"U32_F" ackno %"U32_F".\n", seqno, ackno));
}
 80123bc:	371c      	adds	r7, #28
 80123be:	46bd      	mov	sp, r7
 80123c0:	bd90      	pop	{r4, r7, pc}
 80123c2:	bf00      	nop
 80123c4:	0801aa8c 	.word	0x0801aa8c
 80123c8:	0801b210 	.word	0x0801b210
 80123cc:	0801aae0 	.word	0x0801aae0
 80123d0:	0801b22c 	.word	0x0801b22c

080123d4 <tcp_send_empty_ack>:
 *
 * @param pcb Protocol control block for the TCP connection to send the ACK
 */
err_t
tcp_send_empty_ack(struct tcp_pcb *pcb)
{
 80123d4:	b590      	push	{r4, r7, lr}
 80123d6:	b087      	sub	sp, #28
 80123d8:	af00      	add	r7, sp, #0
 80123da:	6078      	str	r0, [r7, #4]
  err_t err;
  struct pbuf *p;
  u8_t optlen, optflags = 0;
 80123dc:	2300      	movs	r3, #0
 80123de:	75fb      	strb	r3, [r7, #23]
  u8_t num_sacks = 0;
 80123e0:	2300      	movs	r3, #0
 80123e2:	75bb      	strb	r3, [r7, #22]

  LWIP_ASSERT("tcp_send_empty_ack: invalid pcb", pcb != NULL);
 80123e4:	687b      	ldr	r3, [r7, #4]
 80123e6:	2b00      	cmp	r3, #0
 80123e8:	d106      	bne.n	80123f8 <tcp_send_empty_ack+0x24>
 80123ea:	4b28      	ldr	r3, [pc, #160]	; (801248c <tcp_send_empty_ack+0xb8>)
 80123ec:	f240 72ea 	movw	r2, #2026	; 0x7ea
 80123f0:	4927      	ldr	r1, [pc, #156]	; (8012490 <tcp_send_empty_ack+0xbc>)
 80123f2:	4828      	ldr	r0, [pc, #160]	; (8012494 <tcp_send_empty_ack+0xc0>)
 80123f4:	f006 f848 	bl	8018488 <iprintf>
#if LWIP_TCP_TIMESTAMPS
  if (pcb->flags & TF_TIMESTAMP) {
    optflags = TF_SEG_OPTS_TS;
  }
#endif
  optlen = LWIP_TCP_OPT_LENGTH_SEGMENT(optflags, pcb);
 80123f8:	7dfb      	ldrb	r3, [r7, #23]
 80123fa:	009b      	lsls	r3, r3, #2
 80123fc:	b2db      	uxtb	r3, r3
 80123fe:	f003 0304 	and.w	r3, r3, #4
 8012402:	757b      	strb	r3, [r7, #21]
  if ((num_sacks = tcp_get_num_sacks(pcb, optlen)) > 0) {
    optlen += 4 + num_sacks * 8; /* 4 bytes for header (including 2*NOP), plus 8B for each SACK */
  }
#endif

  p = tcp_output_alloc_header(pcb, optlen, 0, lwip_htonl(pcb->snd_nxt));
 8012404:	7d7b      	ldrb	r3, [r7, #21]
 8012406:	b29c      	uxth	r4, r3
 8012408:	687b      	ldr	r3, [r7, #4]
 801240a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 801240c:	4618      	mov	r0, r3
 801240e:	f7f7 ff54 	bl	800a2ba <lwip_htonl>
 8012412:	4603      	mov	r3, r0
 8012414:	2200      	movs	r2, #0
 8012416:	4621      	mov	r1, r4
 8012418:	6878      	ldr	r0, [r7, #4]
 801241a:	f7ff fec3 	bl	80121a4 <tcp_output_alloc_header>
 801241e:	6138      	str	r0, [r7, #16]
  if (p == NULL) {
 8012420:	693b      	ldr	r3, [r7, #16]
 8012422:	2b00      	cmp	r3, #0
 8012424:	d109      	bne.n	801243a <tcp_send_empty_ack+0x66>
    /* let tcp_fasttmr retry sending this ACK */
    tcp_set_flags(pcb, TF_ACK_DELAY | TF_ACK_NOW);
 8012426:	687b      	ldr	r3, [r7, #4]
 8012428:	8b5b      	ldrh	r3, [r3, #26]
 801242a:	f043 0303 	orr.w	r3, r3, #3
 801242e:	b29a      	uxth	r2, r3
 8012430:	687b      	ldr	r3, [r7, #4]
 8012432:	835a      	strh	r2, [r3, #26]
    LWIP_DEBUGF(TCP_OUTPUT_DEBUG, ("tcp_output: (ACK) could not allocate pbuf\n"));
    return ERR_BUF;
 8012434:	f06f 0301 	mvn.w	r3, #1
 8012438:	e023      	b.n	8012482 <tcp_send_empty_ack+0xae>
  }
  tcp_output_fill_options(pcb, p, optflags, num_sacks);
 801243a:	7dbb      	ldrb	r3, [r7, #22]
 801243c:	7dfa      	ldrb	r2, [r7, #23]
 801243e:	6939      	ldr	r1, [r7, #16]
 8012440:	6878      	ldr	r0, [r7, #4]
 8012442:	f7ff feed 	bl	8012220 <tcp_output_fill_options>
  pcb->ts_lastacksent = pcb->rcv_nxt;
#endif

  LWIP_DEBUGF(TCP_OUTPUT_DEBUG,
              ("tcp_output: sending ACK for %"U32_F"\n", pcb->rcv_nxt));
  err = tcp_output_control_segment(pcb, p, &pcb->local_ip, &pcb->remote_ip);
 8012446:	687a      	ldr	r2, [r7, #4]
 8012448:	687b      	ldr	r3, [r7, #4]
 801244a:	3304      	adds	r3, #4
 801244c:	6939      	ldr	r1, [r7, #16]
 801244e:	6878      	ldr	r0, [r7, #4]
 8012450:	f7ff ff24 	bl	801229c <tcp_output_control_segment>
 8012454:	4603      	mov	r3, r0
 8012456:	73fb      	strb	r3, [r7, #15]
  if (err != ERR_OK) {
 8012458:	f997 300f 	ldrsb.w	r3, [r7, #15]
 801245c:	2b00      	cmp	r3, #0
 801245e:	d007      	beq.n	8012470 <tcp_send_empty_ack+0x9c>
    /* let tcp_fasttmr retry sending this ACK */
    tcp_set_flags(pcb, TF_ACK_DELAY | TF_ACK_NOW);
 8012460:	687b      	ldr	r3, [r7, #4]
 8012462:	8b5b      	ldrh	r3, [r3, #26]
 8012464:	f043 0303 	orr.w	r3, r3, #3
 8012468:	b29a      	uxth	r2, r3
 801246a:	687b      	ldr	r3, [r7, #4]
 801246c:	835a      	strh	r2, [r3, #26]
 801246e:	e006      	b.n	801247e <tcp_send_empty_ack+0xaa>
  } else {
    /* remove ACK flags from the PCB, as we sent an empty ACK now */
    tcp_clear_flags(pcb, TF_ACK_DELAY | TF_ACK_NOW);
 8012470:	687b      	ldr	r3, [r7, #4]
 8012472:	8b5b      	ldrh	r3, [r3, #26]
 8012474:	f023 0303 	bic.w	r3, r3, #3
 8012478:	b29a      	uxth	r2, r3
 801247a:	687b      	ldr	r3, [r7, #4]
 801247c:	835a      	strh	r2, [r3, #26]
  }

  return err;
 801247e:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8012482:	4618      	mov	r0, r3
 8012484:	371c      	adds	r7, #28
 8012486:	46bd      	mov	sp, r7
 8012488:	bd90      	pop	{r4, r7, pc}
 801248a:	bf00      	nop
 801248c:	0801aa8c 	.word	0x0801aa8c
 8012490:	0801b248 	.word	0x0801b248
 8012494:	0801aae0 	.word	0x0801aae0

08012498 <tcp_keepalive>:
 *
 * @param pcb the tcp_pcb for which to send a keepalive packet
 */
err_t
tcp_keepalive(struct tcp_pcb *pcb)
{
 8012498:	b590      	push	{r4, r7, lr}
 801249a:	b087      	sub	sp, #28
 801249c:	af00      	add	r7, sp, #0
 801249e:	6078      	str	r0, [r7, #4]
  err_t err;
  struct pbuf *p;
  u8_t optlen = LWIP_TCP_OPT_LENGTH_SEGMENT(0, pcb);
 80124a0:	2300      	movs	r3, #0
 80124a2:	75fb      	strb	r3, [r7, #23]

  LWIP_ASSERT("tcp_keepalive: invalid pcb", pcb != NULL);
 80124a4:	687b      	ldr	r3, [r7, #4]
 80124a6:	2b00      	cmp	r3, #0
 80124a8:	d106      	bne.n	80124b8 <tcp_keepalive+0x20>
 80124aa:	4b18      	ldr	r3, [pc, #96]	; (801250c <tcp_keepalive+0x74>)
 80124ac:	f640 0224 	movw	r2, #2084	; 0x824
 80124b0:	4917      	ldr	r1, [pc, #92]	; (8012510 <tcp_keepalive+0x78>)
 80124b2:	4818      	ldr	r0, [pc, #96]	; (8012514 <tcp_keepalive+0x7c>)
 80124b4:	f005 ffe8 	bl	8018488 <iprintf>
  LWIP_DEBUGF(TCP_DEBUG, ("\n"));

  LWIP_DEBUGF(TCP_DEBUG, ("tcp_keepalive: tcp_ticks %"U32_F"   pcb->tmr %"U32_F" pcb->keep_cnt_sent %"U16_F"\n",
                          tcp_ticks, pcb->tmr, (u16_t)pcb->keep_cnt_sent));

  p = tcp_output_alloc_header(pcb, optlen, 0, lwip_htonl(pcb->snd_nxt - 1));
 80124b8:	7dfb      	ldrb	r3, [r7, #23]
 80124ba:	b29c      	uxth	r4, r3
 80124bc:	687b      	ldr	r3, [r7, #4]
 80124be:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80124c0:	3b01      	subs	r3, #1
 80124c2:	4618      	mov	r0, r3
 80124c4:	f7f7 fef9 	bl	800a2ba <lwip_htonl>
 80124c8:	4603      	mov	r3, r0
 80124ca:	2200      	movs	r2, #0
 80124cc:	4621      	mov	r1, r4
 80124ce:	6878      	ldr	r0, [r7, #4]
 80124d0:	f7ff fe68 	bl	80121a4 <tcp_output_alloc_header>
 80124d4:	6138      	str	r0, [r7, #16]
  if (p == NULL) {
 80124d6:	693b      	ldr	r3, [r7, #16]
 80124d8:	2b00      	cmp	r3, #0
 80124da:	d102      	bne.n	80124e2 <tcp_keepalive+0x4a>
    LWIP_DEBUGF(TCP_DEBUG,
                ("tcp_keepalive: could not allocate memory for pbuf\n"));
    return ERR_MEM;
 80124dc:	f04f 33ff 	mov.w	r3, #4294967295
 80124e0:	e010      	b.n	8012504 <tcp_keepalive+0x6c>
  }
  tcp_output_fill_options(pcb, p, 0, optlen);
 80124e2:	7dfb      	ldrb	r3, [r7, #23]
 80124e4:	2200      	movs	r2, #0
 80124e6:	6939      	ldr	r1, [r7, #16]
 80124e8:	6878      	ldr	r0, [r7, #4]
 80124ea:	f7ff fe99 	bl	8012220 <tcp_output_fill_options>
  err = tcp_output_control_segment(pcb, p, &pcb->local_ip, &pcb->remote_ip);
 80124ee:	687a      	ldr	r2, [r7, #4]
 80124f0:	687b      	ldr	r3, [r7, #4]
 80124f2:	3304      	adds	r3, #4
 80124f4:	6939      	ldr	r1, [r7, #16]
 80124f6:	6878      	ldr	r0, [r7, #4]
 80124f8:	f7ff fed0 	bl	801229c <tcp_output_control_segment>
 80124fc:	4603      	mov	r3, r0
 80124fe:	73fb      	strb	r3, [r7, #15]

  LWIP_DEBUGF(TCP_DEBUG, ("tcp_keepalive: seqno %"U32_F" ackno %"U32_F" err %d.\n",
                          pcb->snd_nxt - 1, pcb->rcv_nxt, (int)err));
  return err;
 8012500:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8012504:	4618      	mov	r0, r3
 8012506:	371c      	adds	r7, #28
 8012508:	46bd      	mov	sp, r7
 801250a:	bd90      	pop	{r4, r7, pc}
 801250c:	0801aa8c 	.word	0x0801aa8c
 8012510:	0801b268 	.word	0x0801b268
 8012514:	0801aae0 	.word	0x0801aae0

08012518 <tcp_zero_window_probe>:
 *
 * @param pcb the tcp_pcb for which to send a zero-window probe packet
 */
err_t
tcp_zero_window_probe(struct tcp_pcb *pcb)
{
 8012518:	b590      	push	{r4, r7, lr}
 801251a:	b08b      	sub	sp, #44	; 0x2c
 801251c:	af00      	add	r7, sp, #0
 801251e:	6078      	str	r0, [r7, #4]
  struct tcp_hdr *tcphdr;
  struct tcp_seg *seg;
  u16_t len;
  u8_t is_fin;
  u32_t snd_nxt;
  u8_t optlen = LWIP_TCP_OPT_LENGTH_SEGMENT(0, pcb);
 8012520:	2300      	movs	r3, #0
 8012522:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

  LWIP_ASSERT("tcp_zero_window_probe: invalid pcb", pcb != NULL);
 8012526:	687b      	ldr	r3, [r7, #4]
 8012528:	2b00      	cmp	r3, #0
 801252a:	d106      	bne.n	801253a <tcp_zero_window_probe+0x22>
 801252c:	4b4c      	ldr	r3, [pc, #304]	; (8012660 <tcp_zero_window_probe+0x148>)
 801252e:	f640 024f 	movw	r2, #2127	; 0x84f
 8012532:	494c      	ldr	r1, [pc, #304]	; (8012664 <tcp_zero_window_probe+0x14c>)
 8012534:	484c      	ldr	r0, [pc, #304]	; (8012668 <tcp_zero_window_probe+0x150>)
 8012536:	f005 ffa7 	bl	8018488 <iprintf>
              ("tcp_zero_window_probe: tcp_ticks %"U32_F
               "   pcb->tmr %"U32_F" pcb->keep_cnt_sent %"U16_F"\n",
               tcp_ticks, pcb->tmr, (u16_t)pcb->keep_cnt_sent));

  /* Only consider unsent, persist timer should be off when there is data in-flight */
  seg = pcb->unsent;
 801253a:	687b      	ldr	r3, [r7, #4]
 801253c:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 801253e:	623b      	str	r3, [r7, #32]
  if (seg == NULL) {
 8012540:	6a3b      	ldr	r3, [r7, #32]
 8012542:	2b00      	cmp	r3, #0
 8012544:	d101      	bne.n	801254a <tcp_zero_window_probe+0x32>
    /* Not expected, persist timer should be off when the send buffer is empty */
    return ERR_OK;
 8012546:	2300      	movs	r3, #0
 8012548:	e086      	b.n	8012658 <tcp_zero_window_probe+0x140>

  /* increment probe count. NOTE: we record probe even if it fails
     to actually transmit due to an error. This ensures memory exhaustion/
     routing problem doesn't leave a zero-window pcb as an indefinite zombie.
     RTO mechanism has similar behavior, see pcb->nrtx */
  if (pcb->persist_probe < 0xFF) {
 801254a:	687b      	ldr	r3, [r7, #4]
 801254c:	f893 309a 	ldrb.w	r3, [r3, #154]	; 0x9a
 8012550:	2bff      	cmp	r3, #255	; 0xff
 8012552:	d007      	beq.n	8012564 <tcp_zero_window_probe+0x4c>
    ++pcb->persist_probe;
 8012554:	687b      	ldr	r3, [r7, #4]
 8012556:	f893 309a 	ldrb.w	r3, [r3, #154]	; 0x9a
 801255a:	3301      	adds	r3, #1
 801255c:	b2da      	uxtb	r2, r3
 801255e:	687b      	ldr	r3, [r7, #4]
 8012560:	f883 209a 	strb.w	r2, [r3, #154]	; 0x9a
  }

  is_fin = ((TCPH_FLAGS(seg->tcphdr) & TCP_FIN) != 0) && (seg->len == 0);
 8012564:	6a3b      	ldr	r3, [r7, #32]
 8012566:	68db      	ldr	r3, [r3, #12]
 8012568:	899b      	ldrh	r3, [r3, #12]
 801256a:	b29b      	uxth	r3, r3
 801256c:	4618      	mov	r0, r3
 801256e:	f7f7 fe8f 	bl	800a290 <lwip_htons>
 8012572:	4603      	mov	r3, r0
 8012574:	b2db      	uxtb	r3, r3
 8012576:	f003 0301 	and.w	r3, r3, #1
 801257a:	2b00      	cmp	r3, #0
 801257c:	d005      	beq.n	801258a <tcp_zero_window_probe+0x72>
 801257e:	6a3b      	ldr	r3, [r7, #32]
 8012580:	891b      	ldrh	r3, [r3, #8]
 8012582:	2b00      	cmp	r3, #0
 8012584:	d101      	bne.n	801258a <tcp_zero_window_probe+0x72>
 8012586:	2301      	movs	r3, #1
 8012588:	e000      	b.n	801258c <tcp_zero_window_probe+0x74>
 801258a:	2300      	movs	r3, #0
 801258c:	77fb      	strb	r3, [r7, #31]
  /* we want to send one seqno: either FIN or data (no options) */
  len = is_fin ? 0 : 1;
 801258e:	7ffb      	ldrb	r3, [r7, #31]
 8012590:	2b00      	cmp	r3, #0
 8012592:	bf0c      	ite	eq
 8012594:	2301      	moveq	r3, #1
 8012596:	2300      	movne	r3, #0
 8012598:	b2db      	uxtb	r3, r3
 801259a:	83bb      	strh	r3, [r7, #28]

  p = tcp_output_alloc_header(pcb, optlen, len, seg->tcphdr->seqno);
 801259c:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80125a0:	b299      	uxth	r1, r3
 80125a2:	6a3b      	ldr	r3, [r7, #32]
 80125a4:	68db      	ldr	r3, [r3, #12]
 80125a6:	685b      	ldr	r3, [r3, #4]
 80125a8:	8bba      	ldrh	r2, [r7, #28]
 80125aa:	6878      	ldr	r0, [r7, #4]
 80125ac:	f7ff fdfa 	bl	80121a4 <tcp_output_alloc_header>
 80125b0:	61b8      	str	r0, [r7, #24]
  if (p == NULL) {
 80125b2:	69bb      	ldr	r3, [r7, #24]
 80125b4:	2b00      	cmp	r3, #0
 80125b6:	d102      	bne.n	80125be <tcp_zero_window_probe+0xa6>
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_zero_window_probe: no memory for pbuf\n"));
    return ERR_MEM;
 80125b8:	f04f 33ff 	mov.w	r3, #4294967295
 80125bc:	e04c      	b.n	8012658 <tcp_zero_window_probe+0x140>
  }
  tcphdr = (struct tcp_hdr *)p->payload;
 80125be:	69bb      	ldr	r3, [r7, #24]
 80125c0:	685b      	ldr	r3, [r3, #4]
 80125c2:	617b      	str	r3, [r7, #20]

  if (is_fin) {
 80125c4:	7ffb      	ldrb	r3, [r7, #31]
 80125c6:	2b00      	cmp	r3, #0
 80125c8:	d011      	beq.n	80125ee <tcp_zero_window_probe+0xd6>
    /* FIN segment, no data */
    TCPH_FLAGS_SET(tcphdr, TCP_ACK | TCP_FIN);
 80125ca:	697b      	ldr	r3, [r7, #20]
 80125cc:	899b      	ldrh	r3, [r3, #12]
 80125ce:	b29b      	uxth	r3, r3
 80125d0:	b21b      	sxth	r3, r3
 80125d2:	f423 537c 	bic.w	r3, r3, #16128	; 0x3f00
 80125d6:	b21c      	sxth	r4, r3
 80125d8:	2011      	movs	r0, #17
 80125da:	f7f7 fe59 	bl	800a290 <lwip_htons>
 80125de:	4603      	mov	r3, r0
 80125e0:	b21b      	sxth	r3, r3
 80125e2:	4323      	orrs	r3, r4
 80125e4:	b21b      	sxth	r3, r3
 80125e6:	b29a      	uxth	r2, r3
 80125e8:	697b      	ldr	r3, [r7, #20]
 80125ea:	819a      	strh	r2, [r3, #12]
 80125ec:	e010      	b.n	8012610 <tcp_zero_window_probe+0xf8>
  } else {
    /* Data segment, copy in one byte from the head of the unacked queue */
    char *d = ((char *)p->payload + TCP_HLEN);
 80125ee:	69bb      	ldr	r3, [r7, #24]
 80125f0:	685b      	ldr	r3, [r3, #4]
 80125f2:	3314      	adds	r3, #20
 80125f4:	613b      	str	r3, [r7, #16]
    /* Depending on whether the segment has already been sent (unacked) or not
       (unsent), seg->p->payload points to the IP header or TCP header.
       Ensure we copy the first TCP data byte: */
    pbuf_copy_partial(seg->p, d, 1, seg->p->tot_len - seg->len);
 80125f6:	6a3b      	ldr	r3, [r7, #32]
 80125f8:	6858      	ldr	r0, [r3, #4]
 80125fa:	6a3b      	ldr	r3, [r7, #32]
 80125fc:	685b      	ldr	r3, [r3, #4]
 80125fe:	891a      	ldrh	r2, [r3, #8]
 8012600:	6a3b      	ldr	r3, [r7, #32]
 8012602:	891b      	ldrh	r3, [r3, #8]
 8012604:	1ad3      	subs	r3, r2, r3
 8012606:	b29b      	uxth	r3, r3
 8012608:	2201      	movs	r2, #1
 801260a:	6939      	ldr	r1, [r7, #16]
 801260c:	f7f9 fe92 	bl	800c334 <pbuf_copy_partial>
  }

  /* The byte may be acknowledged without the window being opened. */
  snd_nxt = lwip_ntohl(seg->tcphdr->seqno) + 1;
 8012610:	6a3b      	ldr	r3, [r7, #32]
 8012612:	68db      	ldr	r3, [r3, #12]
 8012614:	685b      	ldr	r3, [r3, #4]
 8012616:	4618      	mov	r0, r3
 8012618:	f7f7 fe4f 	bl	800a2ba <lwip_htonl>
 801261c:	4603      	mov	r3, r0
 801261e:	3301      	adds	r3, #1
 8012620:	60fb      	str	r3, [r7, #12]
  if (TCP_SEQ_LT(pcb->snd_nxt, snd_nxt)) {
 8012622:	687b      	ldr	r3, [r7, #4]
 8012624:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8012626:	68fb      	ldr	r3, [r7, #12]
 8012628:	1ad3      	subs	r3, r2, r3
 801262a:	2b00      	cmp	r3, #0
 801262c:	da02      	bge.n	8012634 <tcp_zero_window_probe+0x11c>
    pcb->snd_nxt = snd_nxt;
 801262e:	687b      	ldr	r3, [r7, #4]
 8012630:	68fa      	ldr	r2, [r7, #12]
 8012632:	651a      	str	r2, [r3, #80]	; 0x50
  }
  tcp_output_fill_options(pcb, p, 0, optlen);
 8012634:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8012638:	2200      	movs	r2, #0
 801263a:	69b9      	ldr	r1, [r7, #24]
 801263c:	6878      	ldr	r0, [r7, #4]
 801263e:	f7ff fdef 	bl	8012220 <tcp_output_fill_options>

  err = tcp_output_control_segment(pcb, p, &pcb->local_ip, &pcb->remote_ip);
 8012642:	687a      	ldr	r2, [r7, #4]
 8012644:	687b      	ldr	r3, [r7, #4]
 8012646:	3304      	adds	r3, #4
 8012648:	69b9      	ldr	r1, [r7, #24]
 801264a:	6878      	ldr	r0, [r7, #4]
 801264c:	f7ff fe26 	bl	801229c <tcp_output_control_segment>
 8012650:	4603      	mov	r3, r0
 8012652:	72fb      	strb	r3, [r7, #11]

  LWIP_DEBUGF(TCP_DEBUG, ("tcp_zero_window_probe: seqno %"U32_F
                          " ackno %"U32_F" err %d.\n",
                          pcb->snd_nxt - 1, pcb->rcv_nxt, (int)err));
  return err;
 8012654:	f997 300b 	ldrsb.w	r3, [r7, #11]
}
 8012658:	4618      	mov	r0, r3
 801265a:	372c      	adds	r7, #44	; 0x2c
 801265c:	46bd      	mov	sp, r7
 801265e:	bd90      	pop	{r4, r7, pc}
 8012660:	0801aa8c 	.word	0x0801aa8c
 8012664:	0801b284 	.word	0x0801b284
 8012668:	0801aae0 	.word	0x0801aae0

0801266c <tcpip_tcp_timer>:
 *
 * @param arg unused argument
 */
static void
tcpip_tcp_timer(void *arg)
{
 801266c:	b580      	push	{r7, lr}
 801266e:	b082      	sub	sp, #8
 8012670:	af00      	add	r7, sp, #0
 8012672:	6078      	str	r0, [r7, #4]
  LWIP_UNUSED_ARG(arg);

  /* call TCP timer handler */
  tcp_tmr();
 8012674:	f7fa f8a6 	bl	800c7c4 <tcp_tmr>
  /* timer still needed? */
  if (tcp_active_pcbs || tcp_tw_pcbs) {
 8012678:	4b0a      	ldr	r3, [pc, #40]	; (80126a4 <tcpip_tcp_timer+0x38>)
 801267a:	681b      	ldr	r3, [r3, #0]
 801267c:	2b00      	cmp	r3, #0
 801267e:	d103      	bne.n	8012688 <tcpip_tcp_timer+0x1c>
 8012680:	4b09      	ldr	r3, [pc, #36]	; (80126a8 <tcpip_tcp_timer+0x3c>)
 8012682:	681b      	ldr	r3, [r3, #0]
 8012684:	2b00      	cmp	r3, #0
 8012686:	d005      	beq.n	8012694 <tcpip_tcp_timer+0x28>
    /* restart timer */
    sys_timeout(TCP_TMR_INTERVAL, tcpip_tcp_timer, NULL);
 8012688:	2200      	movs	r2, #0
 801268a:	4908      	ldr	r1, [pc, #32]	; (80126ac <tcpip_tcp_timer+0x40>)
 801268c:	20fa      	movs	r0, #250	; 0xfa
 801268e:	f000 f8f3 	bl	8012878 <sys_timeout>
 8012692:	e003      	b.n	801269c <tcpip_tcp_timer+0x30>
  } else {
    /* disable timer */
    tcpip_tcp_timer_active = 0;
 8012694:	4b06      	ldr	r3, [pc, #24]	; (80126b0 <tcpip_tcp_timer+0x44>)
 8012696:	2200      	movs	r2, #0
 8012698:	601a      	str	r2, [r3, #0]
  }
}
 801269a:	bf00      	nop
 801269c:	bf00      	nop
 801269e:	3708      	adds	r7, #8
 80126a0:	46bd      	mov	sp, r7
 80126a2:	bd80      	pop	{r7, pc}
 80126a4:	20008928 	.word	0x20008928
 80126a8:	2000892c 	.word	0x2000892c
 80126ac:	0801266d 	.word	0x0801266d
 80126b0:	20008974 	.word	0x20008974

080126b4 <tcp_timer_needed>:
 * the reason is to have the TCP timer only running when
 * there are active (or time-wait) PCBs.
 */
void
tcp_timer_needed(void)
{
 80126b4:	b580      	push	{r7, lr}
 80126b6:	af00      	add	r7, sp, #0
  LWIP_ASSERT_CORE_LOCKED();

  /* timer is off but needed again? */
  if (!tcpip_tcp_timer_active && (tcp_active_pcbs || tcp_tw_pcbs)) {
 80126b8:	4b0a      	ldr	r3, [pc, #40]	; (80126e4 <tcp_timer_needed+0x30>)
 80126ba:	681b      	ldr	r3, [r3, #0]
 80126bc:	2b00      	cmp	r3, #0
 80126be:	d10f      	bne.n	80126e0 <tcp_timer_needed+0x2c>
 80126c0:	4b09      	ldr	r3, [pc, #36]	; (80126e8 <tcp_timer_needed+0x34>)
 80126c2:	681b      	ldr	r3, [r3, #0]
 80126c4:	2b00      	cmp	r3, #0
 80126c6:	d103      	bne.n	80126d0 <tcp_timer_needed+0x1c>
 80126c8:	4b08      	ldr	r3, [pc, #32]	; (80126ec <tcp_timer_needed+0x38>)
 80126ca:	681b      	ldr	r3, [r3, #0]
 80126cc:	2b00      	cmp	r3, #0
 80126ce:	d007      	beq.n	80126e0 <tcp_timer_needed+0x2c>
    /* enable and start timer */
    tcpip_tcp_timer_active = 1;
 80126d0:	4b04      	ldr	r3, [pc, #16]	; (80126e4 <tcp_timer_needed+0x30>)
 80126d2:	2201      	movs	r2, #1
 80126d4:	601a      	str	r2, [r3, #0]
    sys_timeout(TCP_TMR_INTERVAL, tcpip_tcp_timer, NULL);
 80126d6:	2200      	movs	r2, #0
 80126d8:	4905      	ldr	r1, [pc, #20]	; (80126f0 <tcp_timer_needed+0x3c>)
 80126da:	20fa      	movs	r0, #250	; 0xfa
 80126dc:	f000 f8cc 	bl	8012878 <sys_timeout>
  }
}
 80126e0:	bf00      	nop
 80126e2:	bd80      	pop	{r7, pc}
 80126e4:	20008974 	.word	0x20008974
 80126e8:	20008928 	.word	0x20008928
 80126ec:	2000892c 	.word	0x2000892c
 80126f0:	0801266d 	.word	0x0801266d

080126f4 <sys_timeout_abs>:
#if LWIP_DEBUG_TIMERNAMES
sys_timeout_abs(u32_t abs_time, sys_timeout_handler handler, void *arg, const char *handler_name)
#else /* LWIP_DEBUG_TIMERNAMES */
sys_timeout_abs(u32_t abs_time, sys_timeout_handler handler, void *arg)
#endif
{
 80126f4:	b580      	push	{r7, lr}
 80126f6:	b086      	sub	sp, #24
 80126f8:	af00      	add	r7, sp, #0
 80126fa:	60f8      	str	r0, [r7, #12]
 80126fc:	60b9      	str	r1, [r7, #8]
 80126fe:	607a      	str	r2, [r7, #4]
  struct sys_timeo *timeout, *t;

  timeout = (struct sys_timeo *)memp_malloc(MEMP_SYS_TIMEOUT);
 8012700:	2006      	movs	r0, #6
 8012702:	f7f8 fd2b 	bl	800b15c <memp_malloc>
 8012706:	6138      	str	r0, [r7, #16]
  if (timeout == NULL) {
 8012708:	693b      	ldr	r3, [r7, #16]
 801270a:	2b00      	cmp	r3, #0
 801270c:	d109      	bne.n	8012722 <sys_timeout_abs+0x2e>
    LWIP_ASSERT("sys_timeout: timeout != NULL, pool MEMP_SYS_TIMEOUT is empty", timeout != NULL);
 801270e:	693b      	ldr	r3, [r7, #16]
 8012710:	2b00      	cmp	r3, #0
 8012712:	d151      	bne.n	80127b8 <sys_timeout_abs+0xc4>
 8012714:	4b2a      	ldr	r3, [pc, #168]	; (80127c0 <sys_timeout_abs+0xcc>)
 8012716:	22be      	movs	r2, #190	; 0xbe
 8012718:	492a      	ldr	r1, [pc, #168]	; (80127c4 <sys_timeout_abs+0xd0>)
 801271a:	482b      	ldr	r0, [pc, #172]	; (80127c8 <sys_timeout_abs+0xd4>)
 801271c:	f005 feb4 	bl	8018488 <iprintf>
    return;
 8012720:	e04a      	b.n	80127b8 <sys_timeout_abs+0xc4>
  }

  timeout->next = NULL;
 8012722:	693b      	ldr	r3, [r7, #16]
 8012724:	2200      	movs	r2, #0
 8012726:	601a      	str	r2, [r3, #0]
  timeout->h = handler;
 8012728:	693b      	ldr	r3, [r7, #16]
 801272a:	68ba      	ldr	r2, [r7, #8]
 801272c:	609a      	str	r2, [r3, #8]
  timeout->arg = arg;
 801272e:	693b      	ldr	r3, [r7, #16]
 8012730:	687a      	ldr	r2, [r7, #4]
 8012732:	60da      	str	r2, [r3, #12]
  timeout->time = abs_time;
 8012734:	693b      	ldr	r3, [r7, #16]
 8012736:	68fa      	ldr	r2, [r7, #12]
 8012738:	605a      	str	r2, [r3, #4]
  timeout->handler_name = handler_name;
  LWIP_DEBUGF(TIMERS_DEBUG, ("sys_timeout: %p abs_time=%"U32_F" handler=%s arg=%p\n",
                             (void *)timeout, abs_time, handler_name, (void *)arg));
#endif /* LWIP_DEBUG_TIMERNAMES */

  if (next_timeout == NULL) {
 801273a:	4b24      	ldr	r3, [pc, #144]	; (80127cc <sys_timeout_abs+0xd8>)
 801273c:	681b      	ldr	r3, [r3, #0]
 801273e:	2b00      	cmp	r3, #0
 8012740:	d103      	bne.n	801274a <sys_timeout_abs+0x56>
    next_timeout = timeout;
 8012742:	4a22      	ldr	r2, [pc, #136]	; (80127cc <sys_timeout_abs+0xd8>)
 8012744:	693b      	ldr	r3, [r7, #16]
 8012746:	6013      	str	r3, [r2, #0]
    return;
 8012748:	e037      	b.n	80127ba <sys_timeout_abs+0xc6>
  }
  if (TIME_LESS_THAN(timeout->time, next_timeout->time)) {
 801274a:	693b      	ldr	r3, [r7, #16]
 801274c:	685a      	ldr	r2, [r3, #4]
 801274e:	4b1f      	ldr	r3, [pc, #124]	; (80127cc <sys_timeout_abs+0xd8>)
 8012750:	681b      	ldr	r3, [r3, #0]
 8012752:	685b      	ldr	r3, [r3, #4]
 8012754:	1ad3      	subs	r3, r2, r3
 8012756:	0fdb      	lsrs	r3, r3, #31
 8012758:	f003 0301 	and.w	r3, r3, #1
 801275c:	b2db      	uxtb	r3, r3
 801275e:	2b00      	cmp	r3, #0
 8012760:	d007      	beq.n	8012772 <sys_timeout_abs+0x7e>
    timeout->next = next_timeout;
 8012762:	4b1a      	ldr	r3, [pc, #104]	; (80127cc <sys_timeout_abs+0xd8>)
 8012764:	681a      	ldr	r2, [r3, #0]
 8012766:	693b      	ldr	r3, [r7, #16]
 8012768:	601a      	str	r2, [r3, #0]
    next_timeout = timeout;
 801276a:	4a18      	ldr	r2, [pc, #96]	; (80127cc <sys_timeout_abs+0xd8>)
 801276c:	693b      	ldr	r3, [r7, #16]
 801276e:	6013      	str	r3, [r2, #0]
 8012770:	e023      	b.n	80127ba <sys_timeout_abs+0xc6>
  } else {
    for (t = next_timeout; t != NULL; t = t->next) {
 8012772:	4b16      	ldr	r3, [pc, #88]	; (80127cc <sys_timeout_abs+0xd8>)
 8012774:	681b      	ldr	r3, [r3, #0]
 8012776:	617b      	str	r3, [r7, #20]
 8012778:	e01a      	b.n	80127b0 <sys_timeout_abs+0xbc>
      if ((t->next == NULL) || TIME_LESS_THAN(timeout->time, t->next->time)) {
 801277a:	697b      	ldr	r3, [r7, #20]
 801277c:	681b      	ldr	r3, [r3, #0]
 801277e:	2b00      	cmp	r3, #0
 8012780:	d00b      	beq.n	801279a <sys_timeout_abs+0xa6>
 8012782:	693b      	ldr	r3, [r7, #16]
 8012784:	685a      	ldr	r2, [r3, #4]
 8012786:	697b      	ldr	r3, [r7, #20]
 8012788:	681b      	ldr	r3, [r3, #0]
 801278a:	685b      	ldr	r3, [r3, #4]
 801278c:	1ad3      	subs	r3, r2, r3
 801278e:	0fdb      	lsrs	r3, r3, #31
 8012790:	f003 0301 	and.w	r3, r3, #1
 8012794:	b2db      	uxtb	r3, r3
 8012796:	2b00      	cmp	r3, #0
 8012798:	d007      	beq.n	80127aa <sys_timeout_abs+0xb6>
        timeout->next = t->next;
 801279a:	697b      	ldr	r3, [r7, #20]
 801279c:	681a      	ldr	r2, [r3, #0]
 801279e:	693b      	ldr	r3, [r7, #16]
 80127a0:	601a      	str	r2, [r3, #0]
        t->next = timeout;
 80127a2:	697b      	ldr	r3, [r7, #20]
 80127a4:	693a      	ldr	r2, [r7, #16]
 80127a6:	601a      	str	r2, [r3, #0]
        break;
 80127a8:	e007      	b.n	80127ba <sys_timeout_abs+0xc6>
    for (t = next_timeout; t != NULL; t = t->next) {
 80127aa:	697b      	ldr	r3, [r7, #20]
 80127ac:	681b      	ldr	r3, [r3, #0]
 80127ae:	617b      	str	r3, [r7, #20]
 80127b0:	697b      	ldr	r3, [r7, #20]
 80127b2:	2b00      	cmp	r3, #0
 80127b4:	d1e1      	bne.n	801277a <sys_timeout_abs+0x86>
 80127b6:	e000      	b.n	80127ba <sys_timeout_abs+0xc6>
    return;
 80127b8:	bf00      	nop
      }
    }
  }
}
 80127ba:	3718      	adds	r7, #24
 80127bc:	46bd      	mov	sp, r7
 80127be:	bd80      	pop	{r7, pc}
 80127c0:	0801b2a8 	.word	0x0801b2a8
 80127c4:	0801b2dc 	.word	0x0801b2dc
 80127c8:	0801b31c 	.word	0x0801b31c
 80127cc:	2000896c 	.word	0x2000896c

080127d0 <lwip_cyclic_timer>:
#if !LWIP_TESTMODE
static
#endif
void
lwip_cyclic_timer(void *arg)
{
 80127d0:	b580      	push	{r7, lr}
 80127d2:	b086      	sub	sp, #24
 80127d4:	af00      	add	r7, sp, #0
 80127d6:	6078      	str	r0, [r7, #4]
  u32_t now;
  u32_t next_timeout_time;
  const struct lwip_cyclic_timer *cyclic = (const struct lwip_cyclic_timer *)arg;
 80127d8:	687b      	ldr	r3, [r7, #4]
 80127da:	617b      	str	r3, [r7, #20]

#if LWIP_DEBUG_TIMERNAMES
  LWIP_DEBUGF(TIMERS_DEBUG, ("tcpip: %s()\n", cyclic->handler_name));
#endif
  cyclic->handler();
 80127dc:	697b      	ldr	r3, [r7, #20]
 80127de:	685b      	ldr	r3, [r3, #4]
 80127e0:	4798      	blx	r3

  now = sys_now();
 80127e2:	f7f5 fb89 	bl	8007ef8 <sys_now>
 80127e6:	6138      	str	r0, [r7, #16]
  next_timeout_time = (u32_t)(current_timeout_due_time + cyclic->interval_ms);  /* overflow handled by TIME_LESS_THAN macro */ 
 80127e8:	697b      	ldr	r3, [r7, #20]
 80127ea:	681a      	ldr	r2, [r3, #0]
 80127ec:	4b0f      	ldr	r3, [pc, #60]	; (801282c <lwip_cyclic_timer+0x5c>)
 80127ee:	681b      	ldr	r3, [r3, #0]
 80127f0:	4413      	add	r3, r2
 80127f2:	60fb      	str	r3, [r7, #12]
  if (TIME_LESS_THAN(next_timeout_time, now)) {
 80127f4:	68fa      	ldr	r2, [r7, #12]
 80127f6:	693b      	ldr	r3, [r7, #16]
 80127f8:	1ad3      	subs	r3, r2, r3
 80127fa:	0fdb      	lsrs	r3, r3, #31
 80127fc:	f003 0301 	and.w	r3, r3, #1
 8012800:	b2db      	uxtb	r3, r3
 8012802:	2b00      	cmp	r3, #0
 8012804:	d009      	beq.n	801281a <lwip_cyclic_timer+0x4a>
    /* timer would immediately expire again -> "overload" -> restart without any correction */
#if LWIP_DEBUG_TIMERNAMES
    sys_timeout_abs((u32_t)(now + cyclic->interval_ms), lwip_cyclic_timer, arg, cyclic->handler_name);
#else
    sys_timeout_abs((u32_t)(now + cyclic->interval_ms), lwip_cyclic_timer, arg);
 8012806:	697b      	ldr	r3, [r7, #20]
 8012808:	681a      	ldr	r2, [r3, #0]
 801280a:	693b      	ldr	r3, [r7, #16]
 801280c:	4413      	add	r3, r2
 801280e:	687a      	ldr	r2, [r7, #4]
 8012810:	4907      	ldr	r1, [pc, #28]	; (8012830 <lwip_cyclic_timer+0x60>)
 8012812:	4618      	mov	r0, r3
 8012814:	f7ff ff6e 	bl	80126f4 <sys_timeout_abs>
    sys_timeout_abs(next_timeout_time, lwip_cyclic_timer, arg, cyclic->handler_name);
#else
    sys_timeout_abs(next_timeout_time, lwip_cyclic_timer, arg);
#endif
  }
}
 8012818:	e004      	b.n	8012824 <lwip_cyclic_timer+0x54>
    sys_timeout_abs(next_timeout_time, lwip_cyclic_timer, arg);
 801281a:	687a      	ldr	r2, [r7, #4]
 801281c:	4904      	ldr	r1, [pc, #16]	; (8012830 <lwip_cyclic_timer+0x60>)
 801281e:	68f8      	ldr	r0, [r7, #12]
 8012820:	f7ff ff68 	bl	80126f4 <sys_timeout_abs>
}
 8012824:	bf00      	nop
 8012826:	3718      	adds	r7, #24
 8012828:	46bd      	mov	sp, r7
 801282a:	bd80      	pop	{r7, pc}
 801282c:	20008970 	.word	0x20008970
 8012830:	080127d1 	.word	0x080127d1

08012834 <sys_timeouts_init>:

/** Initialize this module */
void sys_timeouts_init(void)
{
 8012834:	b580      	push	{r7, lr}
 8012836:	b082      	sub	sp, #8
 8012838:	af00      	add	r7, sp, #0
  size_t i;
  /* tcp_tmr() at index 0 is started on demand */
  for (i = (LWIP_TCP ? 1 : 0); i < LWIP_ARRAYSIZE(lwip_cyclic_timers); i++) {
 801283a:	2301      	movs	r3, #1
 801283c:	607b      	str	r3, [r7, #4]
 801283e:	e00e      	b.n	801285e <sys_timeouts_init+0x2a>
    /* we have to cast via size_t to get rid of const warning
      (this is OK as cyclic_timer() casts back to const* */
    sys_timeout(lwip_cyclic_timers[i].interval_ms, lwip_cyclic_timer, LWIP_CONST_CAST(void *, &lwip_cyclic_timers[i]));
 8012840:	4a0b      	ldr	r2, [pc, #44]	; (8012870 <sys_timeouts_init+0x3c>)
 8012842:	687b      	ldr	r3, [r7, #4]
 8012844:	f852 0033 	ldr.w	r0, [r2, r3, lsl #3]
 8012848:	687b      	ldr	r3, [r7, #4]
 801284a:	00db      	lsls	r3, r3, #3
 801284c:	4a08      	ldr	r2, [pc, #32]	; (8012870 <sys_timeouts_init+0x3c>)
 801284e:	4413      	add	r3, r2
 8012850:	461a      	mov	r2, r3
 8012852:	4908      	ldr	r1, [pc, #32]	; (8012874 <sys_timeouts_init+0x40>)
 8012854:	f000 f810 	bl	8012878 <sys_timeout>
  for (i = (LWIP_TCP ? 1 : 0); i < LWIP_ARRAYSIZE(lwip_cyclic_timers); i++) {
 8012858:	687b      	ldr	r3, [r7, #4]
 801285a:	3301      	adds	r3, #1
 801285c:	607b      	str	r3, [r7, #4]
 801285e:	687b      	ldr	r3, [r7, #4]
 8012860:	2b05      	cmp	r3, #5
 8012862:	d9ed      	bls.n	8012840 <sys_timeouts_init+0xc>
  }
}
 8012864:	bf00      	nop
 8012866:	bf00      	nop
 8012868:	3708      	adds	r7, #8
 801286a:	46bd      	mov	sp, r7
 801286c:	bd80      	pop	{r7, pc}
 801286e:	bf00      	nop
 8012870:	0801c294 	.word	0x0801c294
 8012874:	080127d1 	.word	0x080127d1

08012878 <sys_timeout>:
sys_timeout_debug(u32_t msecs, sys_timeout_handler handler, void *arg, const char *handler_name)
#else /* LWIP_DEBUG_TIMERNAMES */
void
sys_timeout(u32_t msecs, sys_timeout_handler handler, void *arg)
#endif /* LWIP_DEBUG_TIMERNAMES */
{
 8012878:	b580      	push	{r7, lr}
 801287a:	b086      	sub	sp, #24
 801287c:	af00      	add	r7, sp, #0
 801287e:	60f8      	str	r0, [r7, #12]
 8012880:	60b9      	str	r1, [r7, #8]
 8012882:	607a      	str	r2, [r7, #4]
  u32_t next_timeout_time;

  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ASSERT("Timeout time too long, max is LWIP_UINT32_MAX/4 msecs", msecs <= (LWIP_UINT32_MAX / 4));
 8012884:	68fb      	ldr	r3, [r7, #12]
 8012886:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 801288a:	d306      	bcc.n	801289a <sys_timeout+0x22>
 801288c:	4b0a      	ldr	r3, [pc, #40]	; (80128b8 <sys_timeout+0x40>)
 801288e:	f240 1229 	movw	r2, #297	; 0x129
 8012892:	490a      	ldr	r1, [pc, #40]	; (80128bc <sys_timeout+0x44>)
 8012894:	480a      	ldr	r0, [pc, #40]	; (80128c0 <sys_timeout+0x48>)
 8012896:	f005 fdf7 	bl	8018488 <iprintf>

  next_timeout_time = (u32_t)(sys_now() + msecs); /* overflow handled by TIME_LESS_THAN macro */ 
 801289a:	f7f5 fb2d 	bl	8007ef8 <sys_now>
 801289e:	4602      	mov	r2, r0
 80128a0:	68fb      	ldr	r3, [r7, #12]
 80128a2:	4413      	add	r3, r2
 80128a4:	617b      	str	r3, [r7, #20]

#if LWIP_DEBUG_TIMERNAMES
  sys_timeout_abs(next_timeout_time, handler, arg, handler_name);
#else
  sys_timeout_abs(next_timeout_time, handler, arg);
 80128a6:	687a      	ldr	r2, [r7, #4]
 80128a8:	68b9      	ldr	r1, [r7, #8]
 80128aa:	6978      	ldr	r0, [r7, #20]
 80128ac:	f7ff ff22 	bl	80126f4 <sys_timeout_abs>
#endif
}
 80128b0:	bf00      	nop
 80128b2:	3718      	adds	r7, #24
 80128b4:	46bd      	mov	sp, r7
 80128b6:	bd80      	pop	{r7, pc}
 80128b8:	0801b2a8 	.word	0x0801b2a8
 80128bc:	0801b344 	.word	0x0801b344
 80128c0:	0801b31c 	.word	0x0801b31c

080128c4 <sys_check_timeouts>:
 *
 * Must be called periodically from your main loop.
 */
void
sys_check_timeouts(void)
{
 80128c4:	b580      	push	{r7, lr}
 80128c6:	b084      	sub	sp, #16
 80128c8:	af00      	add	r7, sp, #0
  u32_t now;

  LWIP_ASSERT_CORE_LOCKED();

  /* Process only timers expired at the start of the function. */
  now = sys_now();
 80128ca:	f7f5 fb15 	bl	8007ef8 <sys_now>
 80128ce:	60f8      	str	r0, [r7, #12]
  do {
    struct sys_timeo *tmptimeout;
    sys_timeout_handler handler;
    void *arg;

    PBUF_CHECK_FREE_OOSEQ();
 80128d0:	4b1a      	ldr	r3, [pc, #104]	; (801293c <sys_check_timeouts+0x78>)
 80128d2:	781b      	ldrb	r3, [r3, #0]
 80128d4:	b2db      	uxtb	r3, r3
 80128d6:	2b00      	cmp	r3, #0
 80128d8:	d001      	beq.n	80128de <sys_check_timeouts+0x1a>
 80128da:	f7f8 fff7 	bl	800b8cc <pbuf_free_ooseq>

    tmptimeout = next_timeout;
 80128de:	4b18      	ldr	r3, [pc, #96]	; (8012940 <sys_check_timeouts+0x7c>)
 80128e0:	681b      	ldr	r3, [r3, #0]
 80128e2:	60bb      	str	r3, [r7, #8]
    if (tmptimeout == NULL) {
 80128e4:	68bb      	ldr	r3, [r7, #8]
 80128e6:	2b00      	cmp	r3, #0
 80128e8:	d022      	beq.n	8012930 <sys_check_timeouts+0x6c>
      return;
    }

    if (TIME_LESS_THAN(now, tmptimeout->time)) {
 80128ea:	68bb      	ldr	r3, [r7, #8]
 80128ec:	685b      	ldr	r3, [r3, #4]
 80128ee:	68fa      	ldr	r2, [r7, #12]
 80128f0:	1ad3      	subs	r3, r2, r3
 80128f2:	0fdb      	lsrs	r3, r3, #31
 80128f4:	f003 0301 	and.w	r3, r3, #1
 80128f8:	b2db      	uxtb	r3, r3
 80128fa:	2b00      	cmp	r3, #0
 80128fc:	d11a      	bne.n	8012934 <sys_check_timeouts+0x70>
      return;
    }

    /* Timeout has expired */
    next_timeout = tmptimeout->next;
 80128fe:	68bb      	ldr	r3, [r7, #8]
 8012900:	681b      	ldr	r3, [r3, #0]
 8012902:	4a0f      	ldr	r2, [pc, #60]	; (8012940 <sys_check_timeouts+0x7c>)
 8012904:	6013      	str	r3, [r2, #0]
    handler = tmptimeout->h;
 8012906:	68bb      	ldr	r3, [r7, #8]
 8012908:	689b      	ldr	r3, [r3, #8]
 801290a:	607b      	str	r3, [r7, #4]
    arg = tmptimeout->arg;
 801290c:	68bb      	ldr	r3, [r7, #8]
 801290e:	68db      	ldr	r3, [r3, #12]
 8012910:	603b      	str	r3, [r7, #0]
    current_timeout_due_time = tmptimeout->time;
 8012912:	68bb      	ldr	r3, [r7, #8]
 8012914:	685b      	ldr	r3, [r3, #4]
 8012916:	4a0b      	ldr	r2, [pc, #44]	; (8012944 <sys_check_timeouts+0x80>)
 8012918:	6013      	str	r3, [r2, #0]
    if (handler != NULL) {
      LWIP_DEBUGF(TIMERS_DEBUG, ("sct calling h=%s t=%"U32_F" arg=%p\n",
                                 tmptimeout->handler_name, sys_now() - tmptimeout->time, arg));
    }
#endif /* LWIP_DEBUG_TIMERNAMES */
    memp_free(MEMP_SYS_TIMEOUT, tmptimeout);
 801291a:	68b9      	ldr	r1, [r7, #8]
 801291c:	2006      	movs	r0, #6
 801291e:	f7f8 fc8d 	bl	800b23c <memp_free>
    if (handler != NULL) {
 8012922:	687b      	ldr	r3, [r7, #4]
 8012924:	2b00      	cmp	r3, #0
 8012926:	d0d3      	beq.n	80128d0 <sys_check_timeouts+0xc>
      handler(arg);
 8012928:	687b      	ldr	r3, [r7, #4]
 801292a:	6838      	ldr	r0, [r7, #0]
 801292c:	4798      	blx	r3
  do {
 801292e:	e7cf      	b.n	80128d0 <sys_check_timeouts+0xc>
      return;
 8012930:	bf00      	nop
 8012932:	e000      	b.n	8012936 <sys_check_timeouts+0x72>
      return;
 8012934:	bf00      	nop
    }
    LWIP_TCPIP_THREAD_ALIVE();

    /* Repeat until all expired timers have been called */
  } while (1);
}
 8012936:	3710      	adds	r7, #16
 8012938:	46bd      	mov	sp, r7
 801293a:	bd80      	pop	{r7, pc}
 801293c:	20008919 	.word	0x20008919
 8012940:	2000896c 	.word	0x2000896c
 8012944:	20008970 	.word	0x20008970

08012948 <udp_init>:
/**
 * Initialize this module.
 */
void
udp_init(void)
{
 8012948:	b580      	push	{r7, lr}
 801294a:	af00      	add	r7, sp, #0
#ifdef LWIP_RAND
  udp_port = UDP_ENSURE_LOCAL_PORT_RANGE(LWIP_RAND());
 801294c:	f005 fc10 	bl	8018170 <rand>
 8012950:	4603      	mov	r3, r0
 8012952:	b29b      	uxth	r3, r3
 8012954:	f3c3 030d 	ubfx	r3, r3, #0, #14
 8012958:	b29b      	uxth	r3, r3
 801295a:	f5a3 4380 	sub.w	r3, r3, #16384	; 0x4000
 801295e:	b29a      	uxth	r2, r3
 8012960:	4b01      	ldr	r3, [pc, #4]	; (8012968 <udp_init+0x20>)
 8012962:	801a      	strh	r2, [r3, #0]
#endif /* LWIP_RAND */
}
 8012964:	bf00      	nop
 8012966:	bd80      	pop	{r7, pc}
 8012968:	200000b0 	.word	0x200000b0

0801296c <udp_new_port>:
 *
 * @return a new (free) local UDP port number
 */
static u16_t
udp_new_port(void)
{
 801296c:	b480      	push	{r7}
 801296e:	b083      	sub	sp, #12
 8012970:	af00      	add	r7, sp, #0
  u16_t n = 0;
 8012972:	2300      	movs	r3, #0
 8012974:	80fb      	strh	r3, [r7, #6]
  struct udp_pcb *pcb;

again:
  if (udp_port++ == UDP_LOCAL_PORT_RANGE_END) {
 8012976:	4b17      	ldr	r3, [pc, #92]	; (80129d4 <udp_new_port+0x68>)
 8012978:	881b      	ldrh	r3, [r3, #0]
 801297a:	1c5a      	adds	r2, r3, #1
 801297c:	b291      	uxth	r1, r2
 801297e:	4a15      	ldr	r2, [pc, #84]	; (80129d4 <udp_new_port+0x68>)
 8012980:	8011      	strh	r1, [r2, #0]
 8012982:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8012986:	4293      	cmp	r3, r2
 8012988:	d103      	bne.n	8012992 <udp_new_port+0x26>
    udp_port = UDP_LOCAL_PORT_RANGE_START;
 801298a:	4b12      	ldr	r3, [pc, #72]	; (80129d4 <udp_new_port+0x68>)
 801298c:	f44f 4240 	mov.w	r2, #49152	; 0xc000
 8012990:	801a      	strh	r2, [r3, #0]
  }
  /* Check all PCBs. */
  for (pcb = udp_pcbs; pcb != NULL; pcb = pcb->next) {
 8012992:	4b11      	ldr	r3, [pc, #68]	; (80129d8 <udp_new_port+0x6c>)
 8012994:	681b      	ldr	r3, [r3, #0]
 8012996:	603b      	str	r3, [r7, #0]
 8012998:	e011      	b.n	80129be <udp_new_port+0x52>
    if (pcb->local_port == udp_port) {
 801299a:	683b      	ldr	r3, [r7, #0]
 801299c:	8a5a      	ldrh	r2, [r3, #18]
 801299e:	4b0d      	ldr	r3, [pc, #52]	; (80129d4 <udp_new_port+0x68>)
 80129a0:	881b      	ldrh	r3, [r3, #0]
 80129a2:	429a      	cmp	r2, r3
 80129a4:	d108      	bne.n	80129b8 <udp_new_port+0x4c>
      if (++n > (UDP_LOCAL_PORT_RANGE_END - UDP_LOCAL_PORT_RANGE_START)) {
 80129a6:	88fb      	ldrh	r3, [r7, #6]
 80129a8:	3301      	adds	r3, #1
 80129aa:	80fb      	strh	r3, [r7, #6]
 80129ac:	88fb      	ldrh	r3, [r7, #6]
 80129ae:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 80129b2:	d3e0      	bcc.n	8012976 <udp_new_port+0xa>
        return 0;
 80129b4:	2300      	movs	r3, #0
 80129b6:	e007      	b.n	80129c8 <udp_new_port+0x5c>
  for (pcb = udp_pcbs; pcb != NULL; pcb = pcb->next) {
 80129b8:	683b      	ldr	r3, [r7, #0]
 80129ba:	68db      	ldr	r3, [r3, #12]
 80129bc:	603b      	str	r3, [r7, #0]
 80129be:	683b      	ldr	r3, [r7, #0]
 80129c0:	2b00      	cmp	r3, #0
 80129c2:	d1ea      	bne.n	801299a <udp_new_port+0x2e>
      }
      goto again;
    }
  }
  return udp_port;
 80129c4:	4b03      	ldr	r3, [pc, #12]	; (80129d4 <udp_new_port+0x68>)
 80129c6:	881b      	ldrh	r3, [r3, #0]
}
 80129c8:	4618      	mov	r0, r3
 80129ca:	370c      	adds	r7, #12
 80129cc:	46bd      	mov	sp, r7
 80129ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80129d2:	4770      	bx	lr
 80129d4:	200000b0 	.word	0x200000b0
 80129d8:	20008978 	.word	0x20008978

080129dc <udp_input_local_match>:
 * @param broadcast 1 if his is an IPv4 broadcast (global or subnet-only), 0 otherwise (only used for IPv4)
 * @return 1 on match, 0 otherwise
 */
static u8_t
udp_input_local_match(struct udp_pcb *pcb, struct netif *inp, u8_t broadcast)
{
 80129dc:	b580      	push	{r7, lr}
 80129de:	b084      	sub	sp, #16
 80129e0:	af00      	add	r7, sp, #0
 80129e2:	60f8      	str	r0, [r7, #12]
 80129e4:	60b9      	str	r1, [r7, #8]
 80129e6:	4613      	mov	r3, r2
 80129e8:	71fb      	strb	r3, [r7, #7]
  LWIP_UNUSED_ARG(inp);       /* in IPv6 only case */
  LWIP_UNUSED_ARG(broadcast); /* in IPv6 only case */

  LWIP_ASSERT("udp_input_local_match: invalid pcb", pcb != NULL);
 80129ea:	68fb      	ldr	r3, [r7, #12]
 80129ec:	2b00      	cmp	r3, #0
 80129ee:	d105      	bne.n	80129fc <udp_input_local_match+0x20>
 80129f0:	4b27      	ldr	r3, [pc, #156]	; (8012a90 <udp_input_local_match+0xb4>)
 80129f2:	2287      	movs	r2, #135	; 0x87
 80129f4:	4927      	ldr	r1, [pc, #156]	; (8012a94 <udp_input_local_match+0xb8>)
 80129f6:	4828      	ldr	r0, [pc, #160]	; (8012a98 <udp_input_local_match+0xbc>)
 80129f8:	f005 fd46 	bl	8018488 <iprintf>
  LWIP_ASSERT("udp_input_local_match: invalid netif", inp != NULL);
 80129fc:	68bb      	ldr	r3, [r7, #8]
 80129fe:	2b00      	cmp	r3, #0
 8012a00:	d105      	bne.n	8012a0e <udp_input_local_match+0x32>
 8012a02:	4b23      	ldr	r3, [pc, #140]	; (8012a90 <udp_input_local_match+0xb4>)
 8012a04:	2288      	movs	r2, #136	; 0x88
 8012a06:	4925      	ldr	r1, [pc, #148]	; (8012a9c <udp_input_local_match+0xc0>)
 8012a08:	4823      	ldr	r0, [pc, #140]	; (8012a98 <udp_input_local_match+0xbc>)
 8012a0a:	f005 fd3d 	bl	8018488 <iprintf>

  /* check if PCB is bound to specific netif */
  if ((pcb->netif_idx != NETIF_NO_INDEX) &&
 8012a0e:	68fb      	ldr	r3, [r7, #12]
 8012a10:	7a1b      	ldrb	r3, [r3, #8]
 8012a12:	2b00      	cmp	r3, #0
 8012a14:	d00b      	beq.n	8012a2e <udp_input_local_match+0x52>
      (pcb->netif_idx != netif_get_index(ip_data.current_input_netif))) {
 8012a16:	68fb      	ldr	r3, [r7, #12]
 8012a18:	7a1a      	ldrb	r2, [r3, #8]
 8012a1a:	4b21      	ldr	r3, [pc, #132]	; (8012aa0 <udp_input_local_match+0xc4>)
 8012a1c:	685b      	ldr	r3, [r3, #4]
 8012a1e:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 8012a22:	3301      	adds	r3, #1
 8012a24:	b2db      	uxtb	r3, r3
  if ((pcb->netif_idx != NETIF_NO_INDEX) &&
 8012a26:	429a      	cmp	r2, r3
 8012a28:	d001      	beq.n	8012a2e <udp_input_local_match+0x52>
    return 0;
 8012a2a:	2300      	movs	r3, #0
 8012a2c:	e02b      	b.n	8012a86 <udp_input_local_match+0xaa>
  /* Only need to check PCB if incoming IP version matches PCB IP version */
  if (IP_ADDR_PCB_VERSION_MATCH_EXACT(pcb, ip_current_dest_addr())) {
#if LWIP_IPV4
    /* Special case: IPv4 broadcast: all or broadcasts in my subnet
     * Note: broadcast variable can only be 1 if it is an IPv4 broadcast */
    if (broadcast != 0) {
 8012a2e:	79fb      	ldrb	r3, [r7, #7]
 8012a30:	2b00      	cmp	r3, #0
 8012a32:	d018      	beq.n	8012a66 <udp_input_local_match+0x8a>
#if IP_SOF_BROADCAST_RECV
      if (ip_get_option(pcb, SOF_BROADCAST))
#endif /* IP_SOF_BROADCAST_RECV */
      {
        if (ip4_addr_isany(ip_2_ip4(&pcb->local_ip)) ||
 8012a34:	68fb      	ldr	r3, [r7, #12]
 8012a36:	2b00      	cmp	r3, #0
 8012a38:	d013      	beq.n	8012a62 <udp_input_local_match+0x86>
 8012a3a:	68fb      	ldr	r3, [r7, #12]
 8012a3c:	681b      	ldr	r3, [r3, #0]
 8012a3e:	2b00      	cmp	r3, #0
 8012a40:	d00f      	beq.n	8012a62 <udp_input_local_match+0x86>
            ((ip4_current_dest_addr()->addr == IPADDR_BROADCAST)) ||
 8012a42:	4b17      	ldr	r3, [pc, #92]	; (8012aa0 <udp_input_local_match+0xc4>)
 8012a44:	695b      	ldr	r3, [r3, #20]
        if (ip4_addr_isany(ip_2_ip4(&pcb->local_ip)) ||
 8012a46:	f1b3 3fff 	cmp.w	r3, #4294967295
 8012a4a:	d00a      	beq.n	8012a62 <udp_input_local_match+0x86>
            ip4_addr_netcmp(ip_2_ip4(&pcb->local_ip), ip4_current_dest_addr(), netif_ip4_netmask(inp))) {
 8012a4c:	68fb      	ldr	r3, [r7, #12]
 8012a4e:	681a      	ldr	r2, [r3, #0]
 8012a50:	4b13      	ldr	r3, [pc, #76]	; (8012aa0 <udp_input_local_match+0xc4>)
 8012a52:	695b      	ldr	r3, [r3, #20]
 8012a54:	405a      	eors	r2, r3
 8012a56:	68bb      	ldr	r3, [r7, #8]
 8012a58:	3308      	adds	r3, #8
 8012a5a:	681b      	ldr	r3, [r3, #0]
 8012a5c:	4013      	ands	r3, r2
            ((ip4_current_dest_addr()->addr == IPADDR_BROADCAST)) ||
 8012a5e:	2b00      	cmp	r3, #0
 8012a60:	d110      	bne.n	8012a84 <udp_input_local_match+0xa8>
          return 1;
 8012a62:	2301      	movs	r3, #1
 8012a64:	e00f      	b.n	8012a86 <udp_input_local_match+0xaa>
        }
      }
    } else
#endif /* LWIP_IPV4 */
      /* Handle IPv4 and IPv6: all or exact match */
      if (ip_addr_isany(&pcb->local_ip) || ip_addr_cmp(&pcb->local_ip, ip_current_dest_addr())) {
 8012a66:	68fb      	ldr	r3, [r7, #12]
 8012a68:	2b00      	cmp	r3, #0
 8012a6a:	d009      	beq.n	8012a80 <udp_input_local_match+0xa4>
 8012a6c:	68fb      	ldr	r3, [r7, #12]
 8012a6e:	681b      	ldr	r3, [r3, #0]
 8012a70:	2b00      	cmp	r3, #0
 8012a72:	d005      	beq.n	8012a80 <udp_input_local_match+0xa4>
 8012a74:	68fb      	ldr	r3, [r7, #12]
 8012a76:	681a      	ldr	r2, [r3, #0]
 8012a78:	4b09      	ldr	r3, [pc, #36]	; (8012aa0 <udp_input_local_match+0xc4>)
 8012a7a:	695b      	ldr	r3, [r3, #20]
 8012a7c:	429a      	cmp	r2, r3
 8012a7e:	d101      	bne.n	8012a84 <udp_input_local_match+0xa8>
        return 1;
 8012a80:	2301      	movs	r3, #1
 8012a82:	e000      	b.n	8012a86 <udp_input_local_match+0xaa>
      }
  }

  return 0;
 8012a84:	2300      	movs	r3, #0
}
 8012a86:	4618      	mov	r0, r3
 8012a88:	3710      	adds	r7, #16
 8012a8a:	46bd      	mov	sp, r7
 8012a8c:	bd80      	pop	{r7, pc}
 8012a8e:	bf00      	nop
 8012a90:	0801b390 	.word	0x0801b390
 8012a94:	0801b3c0 	.word	0x0801b3c0
 8012a98:	0801b3e4 	.word	0x0801b3e4
 8012a9c:	0801b40c 	.word	0x0801b40c
 8012aa0:	2000537c 	.word	0x2000537c

08012aa4 <udp_input>:
 * @param inp network interface on which the datagram was received.
 *
 */
void
udp_input(struct pbuf *p, struct netif *inp)
{
 8012aa4:	b590      	push	{r4, r7, lr}
 8012aa6:	b08d      	sub	sp, #52	; 0x34
 8012aa8:	af02      	add	r7, sp, #8
 8012aaa:	6078      	str	r0, [r7, #4]
 8012aac:	6039      	str	r1, [r7, #0]
  struct udp_hdr *udphdr;
  struct udp_pcb *pcb, *prev;
  struct udp_pcb *uncon_pcb;
  u16_t src, dest;
  u8_t broadcast;
  u8_t for_us = 0;
 8012aae:	2300      	movs	r3, #0
 8012ab0:	76fb      	strb	r3, [r7, #27]

  LWIP_UNUSED_ARG(inp);

  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ASSERT("udp_input: invalid pbuf", p != NULL);
 8012ab2:	687b      	ldr	r3, [r7, #4]
 8012ab4:	2b00      	cmp	r3, #0
 8012ab6:	d105      	bne.n	8012ac4 <udp_input+0x20>
 8012ab8:	4b7c      	ldr	r3, [pc, #496]	; (8012cac <udp_input+0x208>)
 8012aba:	22cf      	movs	r2, #207	; 0xcf
 8012abc:	497c      	ldr	r1, [pc, #496]	; (8012cb0 <udp_input+0x20c>)
 8012abe:	487d      	ldr	r0, [pc, #500]	; (8012cb4 <udp_input+0x210>)
 8012ac0:	f005 fce2 	bl	8018488 <iprintf>
  LWIP_ASSERT("udp_input: invalid netif", inp != NULL);
 8012ac4:	683b      	ldr	r3, [r7, #0]
 8012ac6:	2b00      	cmp	r3, #0
 8012ac8:	d105      	bne.n	8012ad6 <udp_input+0x32>
 8012aca:	4b78      	ldr	r3, [pc, #480]	; (8012cac <udp_input+0x208>)
 8012acc:	22d0      	movs	r2, #208	; 0xd0
 8012ace:	497a      	ldr	r1, [pc, #488]	; (8012cb8 <udp_input+0x214>)
 8012ad0:	4878      	ldr	r0, [pc, #480]	; (8012cb4 <udp_input+0x210>)
 8012ad2:	f005 fcd9 	bl	8018488 <iprintf>
  PERF_START;

  UDP_STATS_INC(udp.recv);

  /* Check minimum length (UDP header) */
  if (p->len < UDP_HLEN) {
 8012ad6:	687b      	ldr	r3, [r7, #4]
 8012ad8:	895b      	ldrh	r3, [r3, #10]
 8012ada:	2b07      	cmp	r3, #7
 8012adc:	d803      	bhi.n	8012ae6 <udp_input+0x42>
    LWIP_DEBUGF(UDP_DEBUG,
                ("udp_input: short UDP datagram (%"U16_F" bytes) discarded\n", p->tot_len));
    UDP_STATS_INC(udp.lenerr);
    UDP_STATS_INC(udp.drop);
    MIB2_STATS_INC(mib2.udpinerrors);
    pbuf_free(p);
 8012ade:	6878      	ldr	r0, [r7, #4]
 8012ae0:	f7f9 fa2e 	bl	800bf40 <pbuf_free>
    goto end;
 8012ae4:	e0de      	b.n	8012ca4 <udp_input+0x200>
  }

  udphdr = (struct udp_hdr *)p->payload;
 8012ae6:	687b      	ldr	r3, [r7, #4]
 8012ae8:	685b      	ldr	r3, [r3, #4]
 8012aea:	617b      	str	r3, [r7, #20]

  /* is broadcast packet ? */
  broadcast = ip_addr_isbroadcast(ip_current_dest_addr(), ip_current_netif());
 8012aec:	4b73      	ldr	r3, [pc, #460]	; (8012cbc <udp_input+0x218>)
 8012aee:	695b      	ldr	r3, [r3, #20]
 8012af0:	4a72      	ldr	r2, [pc, #456]	; (8012cbc <udp_input+0x218>)
 8012af2:	6812      	ldr	r2, [r2, #0]
 8012af4:	4611      	mov	r1, r2
 8012af6:	4618      	mov	r0, r3
 8012af8:	f003 feb2 	bl	8016860 <ip4_addr_isbroadcast_u32>
 8012afc:	4603      	mov	r3, r0
 8012afe:	74fb      	strb	r3, [r7, #19]

  LWIP_DEBUGF(UDP_DEBUG, ("udp_input: received datagram of length %"U16_F"\n", p->tot_len));

  /* convert src and dest ports to host byte order */
  src = lwip_ntohs(udphdr->src);
 8012b00:	697b      	ldr	r3, [r7, #20]
 8012b02:	881b      	ldrh	r3, [r3, #0]
 8012b04:	b29b      	uxth	r3, r3
 8012b06:	4618      	mov	r0, r3
 8012b08:	f7f7 fbc2 	bl	800a290 <lwip_htons>
 8012b0c:	4603      	mov	r3, r0
 8012b0e:	823b      	strh	r3, [r7, #16]
  dest = lwip_ntohs(udphdr->dest);
 8012b10:	697b      	ldr	r3, [r7, #20]
 8012b12:	885b      	ldrh	r3, [r3, #2]
 8012b14:	b29b      	uxth	r3, r3
 8012b16:	4618      	mov	r0, r3
 8012b18:	f7f7 fbba 	bl	800a290 <lwip_htons>
 8012b1c:	4603      	mov	r3, r0
 8012b1e:	81fb      	strh	r3, [r7, #14]
  ip_addr_debug_print_val(UDP_DEBUG, *ip_current_dest_addr());
  LWIP_DEBUGF(UDP_DEBUG, (", %"U16_F") <-- (", lwip_ntohs(udphdr->dest)));
  ip_addr_debug_print_val(UDP_DEBUG, *ip_current_src_addr());
  LWIP_DEBUGF(UDP_DEBUG, (", %"U16_F")\n", lwip_ntohs(udphdr->src)));

  pcb = NULL;
 8012b20:	2300      	movs	r3, #0
 8012b22:	627b      	str	r3, [r7, #36]	; 0x24
  prev = NULL;
 8012b24:	2300      	movs	r3, #0
 8012b26:	623b      	str	r3, [r7, #32]
  uncon_pcb = NULL;
 8012b28:	2300      	movs	r3, #0
 8012b2a:	61fb      	str	r3, [r7, #28]
  /* Iterate through the UDP pcb list for a matching pcb.
   * 'Perfect match' pcbs (connected to the remote port & ip address) are
   * preferred. If no perfect match is found, the first unconnected pcb that
   * matches the local port and ip address gets the datagram. */
  for (pcb = udp_pcbs; pcb != NULL; pcb = pcb->next) {
 8012b2c:	4b64      	ldr	r3, [pc, #400]	; (8012cc0 <udp_input+0x21c>)
 8012b2e:	681b      	ldr	r3, [r3, #0]
 8012b30:	627b      	str	r3, [r7, #36]	; 0x24
 8012b32:	e054      	b.n	8012bde <udp_input+0x13a>
    LWIP_DEBUGF(UDP_DEBUG, (", %"U16_F") <-- (", pcb->local_port));
    ip_addr_debug_print_val(UDP_DEBUG, pcb->remote_ip);
    LWIP_DEBUGF(UDP_DEBUG, (", %"U16_F")\n", pcb->remote_port));

    /* compare PCB local addr+port to UDP destination addr+port */
    if ((pcb->local_port == dest) &&
 8012b34:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8012b36:	8a5b      	ldrh	r3, [r3, #18]
 8012b38:	89fa      	ldrh	r2, [r7, #14]
 8012b3a:	429a      	cmp	r2, r3
 8012b3c:	d14a      	bne.n	8012bd4 <udp_input+0x130>
        (udp_input_local_match(pcb, inp, broadcast) != 0)) {
 8012b3e:	7cfb      	ldrb	r3, [r7, #19]
 8012b40:	461a      	mov	r2, r3
 8012b42:	6839      	ldr	r1, [r7, #0]
 8012b44:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8012b46:	f7ff ff49 	bl	80129dc <udp_input_local_match>
 8012b4a:	4603      	mov	r3, r0
    if ((pcb->local_port == dest) &&
 8012b4c:	2b00      	cmp	r3, #0
 8012b4e:	d041      	beq.n	8012bd4 <udp_input+0x130>
      if ((pcb->flags & UDP_FLAGS_CONNECTED) == 0) {
 8012b50:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8012b52:	7c1b      	ldrb	r3, [r3, #16]
 8012b54:	f003 0304 	and.w	r3, r3, #4
 8012b58:	2b00      	cmp	r3, #0
 8012b5a:	d11d      	bne.n	8012b98 <udp_input+0xf4>
        if (uncon_pcb == NULL) {
 8012b5c:	69fb      	ldr	r3, [r7, #28]
 8012b5e:	2b00      	cmp	r3, #0
 8012b60:	d102      	bne.n	8012b68 <udp_input+0xc4>
          /* the first unconnected matching PCB */
          uncon_pcb = pcb;
 8012b62:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8012b64:	61fb      	str	r3, [r7, #28]
 8012b66:	e017      	b.n	8012b98 <udp_input+0xf4>
#if LWIP_IPV4
        } else if (broadcast && ip4_current_dest_addr()->addr == IPADDR_BROADCAST) {
 8012b68:	7cfb      	ldrb	r3, [r7, #19]
 8012b6a:	2b00      	cmp	r3, #0
 8012b6c:	d014      	beq.n	8012b98 <udp_input+0xf4>
 8012b6e:	4b53      	ldr	r3, [pc, #332]	; (8012cbc <udp_input+0x218>)
 8012b70:	695b      	ldr	r3, [r3, #20]
 8012b72:	f1b3 3fff 	cmp.w	r3, #4294967295
 8012b76:	d10f      	bne.n	8012b98 <udp_input+0xf4>
          /* global broadcast address (only valid for IPv4; match was checked before) */
          if (!IP_IS_V4_VAL(uncon_pcb->local_ip) || !ip4_addr_cmp(ip_2_ip4(&uncon_pcb->local_ip), netif_ip4_addr(inp))) {
 8012b78:	69fb      	ldr	r3, [r7, #28]
 8012b7a:	681a      	ldr	r2, [r3, #0]
 8012b7c:	683b      	ldr	r3, [r7, #0]
 8012b7e:	3304      	adds	r3, #4
 8012b80:	681b      	ldr	r3, [r3, #0]
 8012b82:	429a      	cmp	r2, r3
 8012b84:	d008      	beq.n	8012b98 <udp_input+0xf4>
            /* uncon_pcb does not match the input netif, check this pcb */
            if (IP_IS_V4_VAL(pcb->local_ip) && ip4_addr_cmp(ip_2_ip4(&pcb->local_ip), netif_ip4_addr(inp))) {
 8012b86:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8012b88:	681a      	ldr	r2, [r3, #0]
 8012b8a:	683b      	ldr	r3, [r7, #0]
 8012b8c:	3304      	adds	r3, #4
 8012b8e:	681b      	ldr	r3, [r3, #0]
 8012b90:	429a      	cmp	r2, r3
 8012b92:	d101      	bne.n	8012b98 <udp_input+0xf4>
              /* better match */
              uncon_pcb = pcb;
 8012b94:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8012b96:	61fb      	str	r3, [r7, #28]
        }
#endif /* SO_REUSE */
      }

      /* compare PCB remote addr+port to UDP source addr+port */
      if ((pcb->remote_port == src) &&
 8012b98:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8012b9a:	8a9b      	ldrh	r3, [r3, #20]
 8012b9c:	8a3a      	ldrh	r2, [r7, #16]
 8012b9e:	429a      	cmp	r2, r3
 8012ba0:	d118      	bne.n	8012bd4 <udp_input+0x130>
          (ip_addr_isany_val(pcb->remote_ip) ||
 8012ba2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8012ba4:	685b      	ldr	r3, [r3, #4]
      if ((pcb->remote_port == src) &&
 8012ba6:	2b00      	cmp	r3, #0
 8012ba8:	d005      	beq.n	8012bb6 <udp_input+0x112>
           ip_addr_cmp(&pcb->remote_ip, ip_current_src_addr()))) {
 8012baa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8012bac:	685a      	ldr	r2, [r3, #4]
 8012bae:	4b43      	ldr	r3, [pc, #268]	; (8012cbc <udp_input+0x218>)
 8012bb0:	691b      	ldr	r3, [r3, #16]
          (ip_addr_isany_val(pcb->remote_ip) ||
 8012bb2:	429a      	cmp	r2, r3
 8012bb4:	d10e      	bne.n	8012bd4 <udp_input+0x130>
        /* the first fully matching PCB */
        if (prev != NULL) {
 8012bb6:	6a3b      	ldr	r3, [r7, #32]
 8012bb8:	2b00      	cmp	r3, #0
 8012bba:	d014      	beq.n	8012be6 <udp_input+0x142>
          /* move the pcb to the front of udp_pcbs so that is
             found faster next time */
          prev->next = pcb->next;
 8012bbc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8012bbe:	68da      	ldr	r2, [r3, #12]
 8012bc0:	6a3b      	ldr	r3, [r7, #32]
 8012bc2:	60da      	str	r2, [r3, #12]
          pcb->next = udp_pcbs;
 8012bc4:	4b3e      	ldr	r3, [pc, #248]	; (8012cc0 <udp_input+0x21c>)
 8012bc6:	681a      	ldr	r2, [r3, #0]
 8012bc8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8012bca:	60da      	str	r2, [r3, #12]
          udp_pcbs = pcb;
 8012bcc:	4a3c      	ldr	r2, [pc, #240]	; (8012cc0 <udp_input+0x21c>)
 8012bce:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8012bd0:	6013      	str	r3, [r2, #0]
        } else {
          UDP_STATS_INC(udp.cachehit);
        }
        break;
 8012bd2:	e008      	b.n	8012be6 <udp_input+0x142>
      }
    }

    prev = pcb;
 8012bd4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8012bd6:	623b      	str	r3, [r7, #32]
  for (pcb = udp_pcbs; pcb != NULL; pcb = pcb->next) {
 8012bd8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8012bda:	68db      	ldr	r3, [r3, #12]
 8012bdc:	627b      	str	r3, [r7, #36]	; 0x24
 8012bde:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8012be0:	2b00      	cmp	r3, #0
 8012be2:	d1a7      	bne.n	8012b34 <udp_input+0x90>
 8012be4:	e000      	b.n	8012be8 <udp_input+0x144>
        break;
 8012be6:	bf00      	nop
  }
  /* no fully matching pcb found? then look for an unconnected pcb */
  if (pcb == NULL) {
 8012be8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8012bea:	2b00      	cmp	r3, #0
 8012bec:	d101      	bne.n	8012bf2 <udp_input+0x14e>
    pcb = uncon_pcb;
 8012bee:	69fb      	ldr	r3, [r7, #28]
 8012bf0:	627b      	str	r3, [r7, #36]	; 0x24
  }

  /* Check checksum if this is a match or if it was directed at us. */
  if (pcb != NULL) {
 8012bf2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8012bf4:	2b00      	cmp	r3, #0
 8012bf6:	d002      	beq.n	8012bfe <udp_input+0x15a>
    for_us = 1;
 8012bf8:	2301      	movs	r3, #1
 8012bfa:	76fb      	strb	r3, [r7, #27]
 8012bfc:	e00a      	b.n	8012c14 <udp_input+0x170>
      for_us = netif_get_ip6_addr_match(inp, ip6_current_dest_addr()) >= 0;
    }
#endif /* LWIP_IPV6 */
#if LWIP_IPV4
    if (!ip_current_is_v6()) {
      for_us = ip4_addr_cmp(netif_ip4_addr(inp), ip4_current_dest_addr());
 8012bfe:	683b      	ldr	r3, [r7, #0]
 8012c00:	3304      	adds	r3, #4
 8012c02:	681a      	ldr	r2, [r3, #0]
 8012c04:	4b2d      	ldr	r3, [pc, #180]	; (8012cbc <udp_input+0x218>)
 8012c06:	695b      	ldr	r3, [r3, #20]
 8012c08:	429a      	cmp	r2, r3
 8012c0a:	bf0c      	ite	eq
 8012c0c:	2301      	moveq	r3, #1
 8012c0e:	2300      	movne	r3, #0
 8012c10:	b2db      	uxtb	r3, r3
 8012c12:	76fb      	strb	r3, [r7, #27]
    }
#endif /* LWIP_IPV4 */
  }

  if (for_us) {
 8012c14:	7efb      	ldrb	r3, [r7, #27]
 8012c16:	2b00      	cmp	r3, #0
 8012c18:	d041      	beq.n	8012c9e <udp_input+0x1fa>
          }
        }
      }
    }
#endif /* CHECKSUM_CHECK_UDP */
    if (pbuf_remove_header(p, UDP_HLEN)) {
 8012c1a:	2108      	movs	r1, #8
 8012c1c:	6878      	ldr	r0, [r7, #4]
 8012c1e:	f7f9 f909 	bl	800be34 <pbuf_remove_header>
 8012c22:	4603      	mov	r3, r0
 8012c24:	2b00      	cmp	r3, #0
 8012c26:	d00a      	beq.n	8012c3e <udp_input+0x19a>
      /* Can we cope with this failing? Just assert for now */
      LWIP_ASSERT("pbuf_remove_header failed\n", 0);
 8012c28:	4b20      	ldr	r3, [pc, #128]	; (8012cac <udp_input+0x208>)
 8012c2a:	f44f 72b8 	mov.w	r2, #368	; 0x170
 8012c2e:	4925      	ldr	r1, [pc, #148]	; (8012cc4 <udp_input+0x220>)
 8012c30:	4820      	ldr	r0, [pc, #128]	; (8012cb4 <udp_input+0x210>)
 8012c32:	f005 fc29 	bl	8018488 <iprintf>
      UDP_STATS_INC(udp.drop);
      MIB2_STATS_INC(mib2.udpinerrors);
      pbuf_free(p);
 8012c36:	6878      	ldr	r0, [r7, #4]
 8012c38:	f7f9 f982 	bl	800bf40 <pbuf_free>
      goto end;
 8012c3c:	e032      	b.n	8012ca4 <udp_input+0x200>
    }

    if (pcb != NULL) {
 8012c3e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8012c40:	2b00      	cmp	r3, #0
 8012c42:	d012      	beq.n	8012c6a <udp_input+0x1c6>
          }
        }
      }
#endif /* SO_REUSE && SO_REUSE_RXTOALL */
      /* callback */
      if (pcb->recv != NULL) {
 8012c44:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8012c46:	699b      	ldr	r3, [r3, #24]
 8012c48:	2b00      	cmp	r3, #0
 8012c4a:	d00a      	beq.n	8012c62 <udp_input+0x1be>
        /* now the recv function is responsible for freeing p */
        pcb->recv(pcb->recv_arg, pcb, p, ip_current_src_addr(), src);
 8012c4c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8012c4e:	699c      	ldr	r4, [r3, #24]
 8012c50:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8012c52:	69d8      	ldr	r0, [r3, #28]
 8012c54:	8a3b      	ldrh	r3, [r7, #16]
 8012c56:	9300      	str	r3, [sp, #0]
 8012c58:	4b1b      	ldr	r3, [pc, #108]	; (8012cc8 <udp_input+0x224>)
 8012c5a:	687a      	ldr	r2, [r7, #4]
 8012c5c:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8012c5e:	47a0      	blx	r4
  } else {
    pbuf_free(p);
  }
end:
  PERF_STOP("udp_input");
  return;
 8012c60:	e021      	b.n	8012ca6 <udp_input+0x202>
        pbuf_free(p);
 8012c62:	6878      	ldr	r0, [r7, #4]
 8012c64:	f7f9 f96c 	bl	800bf40 <pbuf_free>
        goto end;
 8012c68:	e01c      	b.n	8012ca4 <udp_input+0x200>
      if (!broadcast && !ip_addr_ismulticast(ip_current_dest_addr())) {
 8012c6a:	7cfb      	ldrb	r3, [r7, #19]
 8012c6c:	2b00      	cmp	r3, #0
 8012c6e:	d112      	bne.n	8012c96 <udp_input+0x1f2>
 8012c70:	4b12      	ldr	r3, [pc, #72]	; (8012cbc <udp_input+0x218>)
 8012c72:	695b      	ldr	r3, [r3, #20]
 8012c74:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8012c78:	2be0      	cmp	r3, #224	; 0xe0
 8012c7a:	d00c      	beq.n	8012c96 <udp_input+0x1f2>
        pbuf_header_force(p, (s16_t)(ip_current_header_tot_len() + UDP_HLEN));
 8012c7c:	4b0f      	ldr	r3, [pc, #60]	; (8012cbc <udp_input+0x218>)
 8012c7e:	899b      	ldrh	r3, [r3, #12]
 8012c80:	3308      	adds	r3, #8
 8012c82:	b29b      	uxth	r3, r3
 8012c84:	b21b      	sxth	r3, r3
 8012c86:	4619      	mov	r1, r3
 8012c88:	6878      	ldr	r0, [r7, #4]
 8012c8a:	f7f9 f946 	bl	800bf1a <pbuf_header_force>
        icmp_port_unreach(ip_current_is_v6(), p);
 8012c8e:	2103      	movs	r1, #3
 8012c90:	6878      	ldr	r0, [r7, #4]
 8012c92:	f003 faa7 	bl	80161e4 <icmp_dest_unreach>
      pbuf_free(p);
 8012c96:	6878      	ldr	r0, [r7, #4]
 8012c98:	f7f9 f952 	bl	800bf40 <pbuf_free>
  return;
 8012c9c:	e003      	b.n	8012ca6 <udp_input+0x202>
    pbuf_free(p);
 8012c9e:	6878      	ldr	r0, [r7, #4]
 8012ca0:	f7f9 f94e 	bl	800bf40 <pbuf_free>
  return;
 8012ca4:	bf00      	nop
  UDP_STATS_INC(udp.drop);
  MIB2_STATS_INC(mib2.udpinerrors);
  pbuf_free(p);
  PERF_STOP("udp_input");
#endif /* CHECKSUM_CHECK_UDP */
}
 8012ca6:	372c      	adds	r7, #44	; 0x2c
 8012ca8:	46bd      	mov	sp, r7
 8012caa:	bd90      	pop	{r4, r7, pc}
 8012cac:	0801b390 	.word	0x0801b390
 8012cb0:	0801b434 	.word	0x0801b434
 8012cb4:	0801b3e4 	.word	0x0801b3e4
 8012cb8:	0801b44c 	.word	0x0801b44c
 8012cbc:	2000537c 	.word	0x2000537c
 8012cc0:	20008978 	.word	0x20008978
 8012cc4:	0801b468 	.word	0x0801b468
 8012cc8:	2000538c 	.word	0x2000538c

08012ccc <udp_sendto>:
 * @see udp_disconnect() udp_send()
 */
err_t
udp_sendto(struct udp_pcb *pcb, struct pbuf *p,
           const ip_addr_t *dst_ip, u16_t dst_port)
{
 8012ccc:	b580      	push	{r7, lr}
 8012cce:	b088      	sub	sp, #32
 8012cd0:	af02      	add	r7, sp, #8
 8012cd2:	60f8      	str	r0, [r7, #12]
 8012cd4:	60b9      	str	r1, [r7, #8]
 8012cd6:	607a      	str	r2, [r7, #4]
 8012cd8:	807b      	strh	r3, [r7, #2]
                  u16_t dst_port, u8_t have_chksum, u16_t chksum)
{
#endif /* LWIP_CHECKSUM_ON_COPY && CHECKSUM_GEN_UDP */
  struct netif *netif;

  LWIP_ERROR("udp_sendto: invalid pcb", pcb != NULL, return ERR_ARG);
 8012cda:	68fb      	ldr	r3, [r7, #12]
 8012cdc:	2b00      	cmp	r3, #0
 8012cde:	d109      	bne.n	8012cf4 <udp_sendto+0x28>
 8012ce0:	4b23      	ldr	r3, [pc, #140]	; (8012d70 <udp_sendto+0xa4>)
 8012ce2:	f44f 7206 	mov.w	r2, #536	; 0x218
 8012ce6:	4923      	ldr	r1, [pc, #140]	; (8012d74 <udp_sendto+0xa8>)
 8012ce8:	4823      	ldr	r0, [pc, #140]	; (8012d78 <udp_sendto+0xac>)
 8012cea:	f005 fbcd 	bl	8018488 <iprintf>
 8012cee:	f06f 030f 	mvn.w	r3, #15
 8012cf2:	e038      	b.n	8012d66 <udp_sendto+0x9a>
  LWIP_ERROR("udp_sendto: invalid pbuf", p != NULL, return ERR_ARG);
 8012cf4:	68bb      	ldr	r3, [r7, #8]
 8012cf6:	2b00      	cmp	r3, #0
 8012cf8:	d109      	bne.n	8012d0e <udp_sendto+0x42>
 8012cfa:	4b1d      	ldr	r3, [pc, #116]	; (8012d70 <udp_sendto+0xa4>)
 8012cfc:	f240 2219 	movw	r2, #537	; 0x219
 8012d00:	491e      	ldr	r1, [pc, #120]	; (8012d7c <udp_sendto+0xb0>)
 8012d02:	481d      	ldr	r0, [pc, #116]	; (8012d78 <udp_sendto+0xac>)
 8012d04:	f005 fbc0 	bl	8018488 <iprintf>
 8012d08:	f06f 030f 	mvn.w	r3, #15
 8012d0c:	e02b      	b.n	8012d66 <udp_sendto+0x9a>
  LWIP_ERROR("udp_sendto: invalid dst_ip", dst_ip != NULL, return ERR_ARG);
 8012d0e:	687b      	ldr	r3, [r7, #4]
 8012d10:	2b00      	cmp	r3, #0
 8012d12:	d109      	bne.n	8012d28 <udp_sendto+0x5c>
 8012d14:	4b16      	ldr	r3, [pc, #88]	; (8012d70 <udp_sendto+0xa4>)
 8012d16:	f240 221a 	movw	r2, #538	; 0x21a
 8012d1a:	4919      	ldr	r1, [pc, #100]	; (8012d80 <udp_sendto+0xb4>)
 8012d1c:	4816      	ldr	r0, [pc, #88]	; (8012d78 <udp_sendto+0xac>)
 8012d1e:	f005 fbb3 	bl	8018488 <iprintf>
 8012d22:	f06f 030f 	mvn.w	r3, #15
 8012d26:	e01e      	b.n	8012d66 <udp_sendto+0x9a>
    return ERR_VAL;
  }

  LWIP_DEBUGF(UDP_DEBUG | LWIP_DBG_TRACE, ("udp_send\n"));

  if (pcb->netif_idx != NETIF_NO_INDEX) {
 8012d28:	68fb      	ldr	r3, [r7, #12]
 8012d2a:	7a1b      	ldrb	r3, [r3, #8]
 8012d2c:	2b00      	cmp	r3, #0
 8012d2e:	d006      	beq.n	8012d3e <udp_sendto+0x72>
    netif = netif_get_by_index(pcb->netif_idx);
 8012d30:	68fb      	ldr	r3, [r7, #12]
 8012d32:	7a1b      	ldrb	r3, [r3, #8]
 8012d34:	4618      	mov	r0, r3
 8012d36:	f7f8 fda3 	bl	800b880 <netif_get_by_index>
 8012d3a:	6178      	str	r0, [r7, #20]
 8012d3c:	e003      	b.n	8012d46 <udp_sendto+0x7a>

    if (netif == NULL)
#endif /* LWIP_MULTICAST_TX_OPTIONS */
    {
      /* find the outgoing network interface for this packet */
      netif = ip_route(&pcb->local_ip, dst_ip);
 8012d3e:	6878      	ldr	r0, [r7, #4]
 8012d40:	f003 fada 	bl	80162f8 <ip4_route>
 8012d44:	6178      	str	r0, [r7, #20]
    }
  }

  /* no outgoing network interface could be found? */
  if (netif == NULL) {
 8012d46:	697b      	ldr	r3, [r7, #20]
 8012d48:	2b00      	cmp	r3, #0
 8012d4a:	d102      	bne.n	8012d52 <udp_sendto+0x86>
    LWIP_DEBUGF(UDP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("udp_send: No route to "));
    ip_addr_debug_print(UDP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, dst_ip);
    LWIP_DEBUGF(UDP_DEBUG, ("\n"));
    UDP_STATS_INC(udp.rterr);
    return ERR_RTE;
 8012d4c:	f06f 0303 	mvn.w	r3, #3
 8012d50:	e009      	b.n	8012d66 <udp_sendto+0x9a>
  }
#if LWIP_CHECKSUM_ON_COPY && CHECKSUM_GEN_UDP
  return udp_sendto_if_chksum(pcb, p, dst_ip, dst_port, netif, have_chksum, chksum);
#else /* LWIP_CHECKSUM_ON_COPY && CHECKSUM_GEN_UDP */
  return udp_sendto_if(pcb, p, dst_ip, dst_port, netif);
 8012d52:	887a      	ldrh	r2, [r7, #2]
 8012d54:	697b      	ldr	r3, [r7, #20]
 8012d56:	9300      	str	r3, [sp, #0]
 8012d58:	4613      	mov	r3, r2
 8012d5a:	687a      	ldr	r2, [r7, #4]
 8012d5c:	68b9      	ldr	r1, [r7, #8]
 8012d5e:	68f8      	ldr	r0, [r7, #12]
 8012d60:	f000 f810 	bl	8012d84 <udp_sendto_if>
 8012d64:	4603      	mov	r3, r0
#endif /* LWIP_CHECKSUM_ON_COPY && CHECKSUM_GEN_UDP */
}
 8012d66:	4618      	mov	r0, r3
 8012d68:	3718      	adds	r7, #24
 8012d6a:	46bd      	mov	sp, r7
 8012d6c:	bd80      	pop	{r7, pc}
 8012d6e:	bf00      	nop
 8012d70:	0801b390 	.word	0x0801b390
 8012d74:	0801b4b4 	.word	0x0801b4b4
 8012d78:	0801b3e4 	.word	0x0801b3e4
 8012d7c:	0801b4cc 	.word	0x0801b4cc
 8012d80:	0801b4e8 	.word	0x0801b4e8

08012d84 <udp_sendto_if>:
 * @see udp_disconnect() udp_send()
 */
err_t
udp_sendto_if(struct udp_pcb *pcb, struct pbuf *p,
              const ip_addr_t *dst_ip, u16_t dst_port, struct netif *netif)
{
 8012d84:	b580      	push	{r7, lr}
 8012d86:	b088      	sub	sp, #32
 8012d88:	af02      	add	r7, sp, #8
 8012d8a:	60f8      	str	r0, [r7, #12]
 8012d8c:	60b9      	str	r1, [r7, #8]
 8012d8e:	607a      	str	r2, [r7, #4]
 8012d90:	807b      	strh	r3, [r7, #2]
                     u16_t chksum)
{
#endif /* LWIP_CHECKSUM_ON_COPY && CHECKSUM_GEN_UDP */
  const ip_addr_t *src_ip;

  LWIP_ERROR("udp_sendto_if: invalid pcb", pcb != NULL, return ERR_ARG);
 8012d92:	68fb      	ldr	r3, [r7, #12]
 8012d94:	2b00      	cmp	r3, #0
 8012d96:	d109      	bne.n	8012dac <udp_sendto_if+0x28>
 8012d98:	4b2e      	ldr	r3, [pc, #184]	; (8012e54 <udp_sendto_if+0xd0>)
 8012d9a:	f44f 7220 	mov.w	r2, #640	; 0x280
 8012d9e:	492e      	ldr	r1, [pc, #184]	; (8012e58 <udp_sendto_if+0xd4>)
 8012da0:	482e      	ldr	r0, [pc, #184]	; (8012e5c <udp_sendto_if+0xd8>)
 8012da2:	f005 fb71 	bl	8018488 <iprintf>
 8012da6:	f06f 030f 	mvn.w	r3, #15
 8012daa:	e04f      	b.n	8012e4c <udp_sendto_if+0xc8>
  LWIP_ERROR("udp_sendto_if: invalid pbuf", p != NULL, return ERR_ARG);
 8012dac:	68bb      	ldr	r3, [r7, #8]
 8012dae:	2b00      	cmp	r3, #0
 8012db0:	d109      	bne.n	8012dc6 <udp_sendto_if+0x42>
 8012db2:	4b28      	ldr	r3, [pc, #160]	; (8012e54 <udp_sendto_if+0xd0>)
 8012db4:	f240 2281 	movw	r2, #641	; 0x281
 8012db8:	4929      	ldr	r1, [pc, #164]	; (8012e60 <udp_sendto_if+0xdc>)
 8012dba:	4828      	ldr	r0, [pc, #160]	; (8012e5c <udp_sendto_if+0xd8>)
 8012dbc:	f005 fb64 	bl	8018488 <iprintf>
 8012dc0:	f06f 030f 	mvn.w	r3, #15
 8012dc4:	e042      	b.n	8012e4c <udp_sendto_if+0xc8>
  LWIP_ERROR("udp_sendto_if: invalid dst_ip", dst_ip != NULL, return ERR_ARG);
 8012dc6:	687b      	ldr	r3, [r7, #4]
 8012dc8:	2b00      	cmp	r3, #0
 8012dca:	d109      	bne.n	8012de0 <udp_sendto_if+0x5c>
 8012dcc:	4b21      	ldr	r3, [pc, #132]	; (8012e54 <udp_sendto_if+0xd0>)
 8012dce:	f240 2282 	movw	r2, #642	; 0x282
 8012dd2:	4924      	ldr	r1, [pc, #144]	; (8012e64 <udp_sendto_if+0xe0>)
 8012dd4:	4821      	ldr	r0, [pc, #132]	; (8012e5c <udp_sendto_if+0xd8>)
 8012dd6:	f005 fb57 	bl	8018488 <iprintf>
 8012dda:	f06f 030f 	mvn.w	r3, #15
 8012dde:	e035      	b.n	8012e4c <udp_sendto_if+0xc8>
  LWIP_ERROR("udp_sendto_if: invalid netif", netif != NULL, return ERR_ARG);
 8012de0:	6a3b      	ldr	r3, [r7, #32]
 8012de2:	2b00      	cmp	r3, #0
 8012de4:	d109      	bne.n	8012dfa <udp_sendto_if+0x76>
 8012de6:	4b1b      	ldr	r3, [pc, #108]	; (8012e54 <udp_sendto_if+0xd0>)
 8012de8:	f240 2283 	movw	r2, #643	; 0x283
 8012dec:	491e      	ldr	r1, [pc, #120]	; (8012e68 <udp_sendto_if+0xe4>)
 8012dee:	481b      	ldr	r0, [pc, #108]	; (8012e5c <udp_sendto_if+0xd8>)
 8012df0:	f005 fb4a 	bl	8018488 <iprintf>
 8012df4:	f06f 030f 	mvn.w	r3, #15
 8012df8:	e028      	b.n	8012e4c <udp_sendto_if+0xc8>
#endif /* LWIP_IPV6 */
#if LWIP_IPV4 && LWIP_IPV6
  else
#endif /* LWIP_IPV4 && LWIP_IPV6 */
#if LWIP_IPV4
    if (ip4_addr_isany(ip_2_ip4(&pcb->local_ip)) ||
 8012dfa:	68fb      	ldr	r3, [r7, #12]
 8012dfc:	2b00      	cmp	r3, #0
 8012dfe:	d009      	beq.n	8012e14 <udp_sendto_if+0x90>
 8012e00:	68fb      	ldr	r3, [r7, #12]
 8012e02:	681b      	ldr	r3, [r3, #0]
 8012e04:	2b00      	cmp	r3, #0
 8012e06:	d005      	beq.n	8012e14 <udp_sendto_if+0x90>
        ip4_addr_ismulticast(ip_2_ip4(&pcb->local_ip))) {
 8012e08:	68fb      	ldr	r3, [r7, #12]
 8012e0a:	681b      	ldr	r3, [r3, #0]
 8012e0c:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
    if (ip4_addr_isany(ip_2_ip4(&pcb->local_ip)) ||
 8012e10:	2be0      	cmp	r3, #224	; 0xe0
 8012e12:	d103      	bne.n	8012e1c <udp_sendto_if+0x98>
      /* if the local_ip is any or multicast
       * use the outgoing network interface IP address as source address */
      src_ip = netif_ip_addr4(netif);
 8012e14:	6a3b      	ldr	r3, [r7, #32]
 8012e16:	3304      	adds	r3, #4
 8012e18:	617b      	str	r3, [r7, #20]
 8012e1a:	e00b      	b.n	8012e34 <udp_sendto_if+0xb0>
    } else {
      /* check if UDP PCB local IP address is correct
       * this could be an old address if netif->ip_addr has changed */
      if (!ip4_addr_cmp(ip_2_ip4(&(pcb->local_ip)), netif_ip4_addr(netif))) {
 8012e1c:	68fb      	ldr	r3, [r7, #12]
 8012e1e:	681a      	ldr	r2, [r3, #0]
 8012e20:	6a3b      	ldr	r3, [r7, #32]
 8012e22:	3304      	adds	r3, #4
 8012e24:	681b      	ldr	r3, [r3, #0]
 8012e26:	429a      	cmp	r2, r3
 8012e28:	d002      	beq.n	8012e30 <udp_sendto_if+0xac>
        /* local_ip doesn't match, drop the packet */
        return ERR_RTE;
 8012e2a:	f06f 0303 	mvn.w	r3, #3
 8012e2e:	e00d      	b.n	8012e4c <udp_sendto_if+0xc8>
      }
      /* use UDP PCB local IP address as source address */
      src_ip = &pcb->local_ip;
 8012e30:	68fb      	ldr	r3, [r7, #12]
 8012e32:	617b      	str	r3, [r7, #20]
    }
#endif /* LWIP_IPV4 */
#if LWIP_CHECKSUM_ON_COPY && CHECKSUM_GEN_UDP
  return udp_sendto_if_src_chksum(pcb, p, dst_ip, dst_port, netif, have_chksum, chksum, src_ip);
#else /* LWIP_CHECKSUM_ON_COPY && CHECKSUM_GEN_UDP */
  return udp_sendto_if_src(pcb, p, dst_ip, dst_port, netif, src_ip);
 8012e34:	887a      	ldrh	r2, [r7, #2]
 8012e36:	697b      	ldr	r3, [r7, #20]
 8012e38:	9301      	str	r3, [sp, #4]
 8012e3a:	6a3b      	ldr	r3, [r7, #32]
 8012e3c:	9300      	str	r3, [sp, #0]
 8012e3e:	4613      	mov	r3, r2
 8012e40:	687a      	ldr	r2, [r7, #4]
 8012e42:	68b9      	ldr	r1, [r7, #8]
 8012e44:	68f8      	ldr	r0, [r7, #12]
 8012e46:	f000 f811 	bl	8012e6c <udp_sendto_if_src>
 8012e4a:	4603      	mov	r3, r0
#endif /* LWIP_CHECKSUM_ON_COPY && CHECKSUM_GEN_UDP */
}
 8012e4c:	4618      	mov	r0, r3
 8012e4e:	3718      	adds	r7, #24
 8012e50:	46bd      	mov	sp, r7
 8012e52:	bd80      	pop	{r7, pc}
 8012e54:	0801b390 	.word	0x0801b390
 8012e58:	0801b504 	.word	0x0801b504
 8012e5c:	0801b3e4 	.word	0x0801b3e4
 8012e60:	0801b520 	.word	0x0801b520
 8012e64:	0801b53c 	.word	0x0801b53c
 8012e68:	0801b55c 	.word	0x0801b55c

08012e6c <udp_sendto_if_src>:
/** @ingroup udp_raw
 * Same as @ref udp_sendto_if, but with source address */
err_t
udp_sendto_if_src(struct udp_pcb *pcb, struct pbuf *p,
                  const ip_addr_t *dst_ip, u16_t dst_port, struct netif *netif, const ip_addr_t *src_ip)
{
 8012e6c:	b580      	push	{r7, lr}
 8012e6e:	b08c      	sub	sp, #48	; 0x30
 8012e70:	af04      	add	r7, sp, #16
 8012e72:	60f8      	str	r0, [r7, #12]
 8012e74:	60b9      	str	r1, [r7, #8]
 8012e76:	607a      	str	r2, [r7, #4]
 8012e78:	807b      	strh	r3, [r7, #2]
  u8_t ip_proto;
  u8_t ttl;

  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("udp_sendto_if_src: invalid pcb", pcb != NULL, return ERR_ARG);
 8012e7a:	68fb      	ldr	r3, [r7, #12]
 8012e7c:	2b00      	cmp	r3, #0
 8012e7e:	d109      	bne.n	8012e94 <udp_sendto_if_src+0x28>
 8012e80:	4b65      	ldr	r3, [pc, #404]	; (8013018 <udp_sendto_if_src+0x1ac>)
 8012e82:	f240 22d1 	movw	r2, #721	; 0x2d1
 8012e86:	4965      	ldr	r1, [pc, #404]	; (801301c <udp_sendto_if_src+0x1b0>)
 8012e88:	4865      	ldr	r0, [pc, #404]	; (8013020 <udp_sendto_if_src+0x1b4>)
 8012e8a:	f005 fafd 	bl	8018488 <iprintf>
 8012e8e:	f06f 030f 	mvn.w	r3, #15
 8012e92:	e0bc      	b.n	801300e <udp_sendto_if_src+0x1a2>
  LWIP_ERROR("udp_sendto_if_src: invalid pbuf", p != NULL, return ERR_ARG);
 8012e94:	68bb      	ldr	r3, [r7, #8]
 8012e96:	2b00      	cmp	r3, #0
 8012e98:	d109      	bne.n	8012eae <udp_sendto_if_src+0x42>
 8012e9a:	4b5f      	ldr	r3, [pc, #380]	; (8013018 <udp_sendto_if_src+0x1ac>)
 8012e9c:	f240 22d2 	movw	r2, #722	; 0x2d2
 8012ea0:	4960      	ldr	r1, [pc, #384]	; (8013024 <udp_sendto_if_src+0x1b8>)
 8012ea2:	485f      	ldr	r0, [pc, #380]	; (8013020 <udp_sendto_if_src+0x1b4>)
 8012ea4:	f005 faf0 	bl	8018488 <iprintf>
 8012ea8:	f06f 030f 	mvn.w	r3, #15
 8012eac:	e0af      	b.n	801300e <udp_sendto_if_src+0x1a2>
  LWIP_ERROR("udp_sendto_if_src: invalid dst_ip", dst_ip != NULL, return ERR_ARG);
 8012eae:	687b      	ldr	r3, [r7, #4]
 8012eb0:	2b00      	cmp	r3, #0
 8012eb2:	d109      	bne.n	8012ec8 <udp_sendto_if_src+0x5c>
 8012eb4:	4b58      	ldr	r3, [pc, #352]	; (8013018 <udp_sendto_if_src+0x1ac>)
 8012eb6:	f240 22d3 	movw	r2, #723	; 0x2d3
 8012eba:	495b      	ldr	r1, [pc, #364]	; (8013028 <udp_sendto_if_src+0x1bc>)
 8012ebc:	4858      	ldr	r0, [pc, #352]	; (8013020 <udp_sendto_if_src+0x1b4>)
 8012ebe:	f005 fae3 	bl	8018488 <iprintf>
 8012ec2:	f06f 030f 	mvn.w	r3, #15
 8012ec6:	e0a2      	b.n	801300e <udp_sendto_if_src+0x1a2>
  LWIP_ERROR("udp_sendto_if_src: invalid src_ip", src_ip != NULL, return ERR_ARG);
 8012ec8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8012eca:	2b00      	cmp	r3, #0
 8012ecc:	d109      	bne.n	8012ee2 <udp_sendto_if_src+0x76>
 8012ece:	4b52      	ldr	r3, [pc, #328]	; (8013018 <udp_sendto_if_src+0x1ac>)
 8012ed0:	f44f 7235 	mov.w	r2, #724	; 0x2d4
 8012ed4:	4955      	ldr	r1, [pc, #340]	; (801302c <udp_sendto_if_src+0x1c0>)
 8012ed6:	4852      	ldr	r0, [pc, #328]	; (8013020 <udp_sendto_if_src+0x1b4>)
 8012ed8:	f005 fad6 	bl	8018488 <iprintf>
 8012edc:	f06f 030f 	mvn.w	r3, #15
 8012ee0:	e095      	b.n	801300e <udp_sendto_if_src+0x1a2>
  LWIP_ERROR("udp_sendto_if_src: invalid netif", netif != NULL, return ERR_ARG);
 8012ee2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8012ee4:	2b00      	cmp	r3, #0
 8012ee6:	d109      	bne.n	8012efc <udp_sendto_if_src+0x90>
 8012ee8:	4b4b      	ldr	r3, [pc, #300]	; (8013018 <udp_sendto_if_src+0x1ac>)
 8012eea:	f240 22d5 	movw	r2, #725	; 0x2d5
 8012eee:	4950      	ldr	r1, [pc, #320]	; (8013030 <udp_sendto_if_src+0x1c4>)
 8012ef0:	484b      	ldr	r0, [pc, #300]	; (8013020 <udp_sendto_if_src+0x1b4>)
 8012ef2:	f005 fac9 	bl	8018488 <iprintf>
 8012ef6:	f06f 030f 	mvn.w	r3, #15
 8012efa:	e088      	b.n	801300e <udp_sendto_if_src+0x1a2>
    return ERR_VAL;
  }
#endif /* LWIP_IPV4 && IP_SOF_BROADCAST */

  /* if the PCB is not yet bound to a port, bind it here */
  if (pcb->local_port == 0) {
 8012efc:	68fb      	ldr	r3, [r7, #12]
 8012efe:	8a5b      	ldrh	r3, [r3, #18]
 8012f00:	2b00      	cmp	r3, #0
 8012f02:	d10f      	bne.n	8012f24 <udp_sendto_if_src+0xb8>
    LWIP_DEBUGF(UDP_DEBUG | LWIP_DBG_TRACE, ("udp_send: not yet bound to a port, binding now\n"));
    err = udp_bind(pcb, &pcb->local_ip, pcb->local_port);
 8012f04:	68f9      	ldr	r1, [r7, #12]
 8012f06:	68fb      	ldr	r3, [r7, #12]
 8012f08:	8a5b      	ldrh	r3, [r3, #18]
 8012f0a:	461a      	mov	r2, r3
 8012f0c:	68f8      	ldr	r0, [r7, #12]
 8012f0e:	f000 f893 	bl	8013038 <udp_bind>
 8012f12:	4603      	mov	r3, r0
 8012f14:	76fb      	strb	r3, [r7, #27]
    if (err != ERR_OK) {
 8012f16:	f997 301b 	ldrsb.w	r3, [r7, #27]
 8012f1a:	2b00      	cmp	r3, #0
 8012f1c:	d002      	beq.n	8012f24 <udp_sendto_if_src+0xb8>
      LWIP_DEBUGF(UDP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_SERIOUS, ("udp_send: forced port bind failed\n"));
      return err;
 8012f1e:	f997 301b 	ldrsb.w	r3, [r7, #27]
 8012f22:	e074      	b.n	801300e <udp_sendto_if_src+0x1a2>
    }
  }

  /* packet too large to add a UDP header without causing an overflow? */
  if ((u16_t)(p->tot_len + UDP_HLEN) < p->tot_len) {
 8012f24:	68bb      	ldr	r3, [r7, #8]
 8012f26:	891b      	ldrh	r3, [r3, #8]
 8012f28:	f64f 72f7 	movw	r2, #65527	; 0xfff7
 8012f2c:	4293      	cmp	r3, r2
 8012f2e:	d902      	bls.n	8012f36 <udp_sendto_if_src+0xca>
    return ERR_MEM;
 8012f30:	f04f 33ff 	mov.w	r3, #4294967295
 8012f34:	e06b      	b.n	801300e <udp_sendto_if_src+0x1a2>
  }
  /* not enough space to add an UDP header to first pbuf in given p chain? */
  if (pbuf_add_header(p, UDP_HLEN)) {
 8012f36:	2108      	movs	r1, #8
 8012f38:	68b8      	ldr	r0, [r7, #8]
 8012f3a:	f7f8 ff6b 	bl	800be14 <pbuf_add_header>
 8012f3e:	4603      	mov	r3, r0
 8012f40:	2b00      	cmp	r3, #0
 8012f42:	d015      	beq.n	8012f70 <udp_sendto_if_src+0x104>
    /* allocate header in a separate new pbuf */
    q = pbuf_alloc(PBUF_IP, UDP_HLEN, PBUF_RAM);
 8012f44:	f44f 7220 	mov.w	r2, #640	; 0x280
 8012f48:	2108      	movs	r1, #8
 8012f4a:	2022      	movs	r0, #34	; 0x22
 8012f4c:	f7f8 fd14 	bl	800b978 <pbuf_alloc>
 8012f50:	61f8      	str	r0, [r7, #28]
    /* new header pbuf could not be allocated? */
    if (q == NULL) {
 8012f52:	69fb      	ldr	r3, [r7, #28]
 8012f54:	2b00      	cmp	r3, #0
 8012f56:	d102      	bne.n	8012f5e <udp_sendto_if_src+0xf2>
      LWIP_DEBUGF(UDP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_SERIOUS, ("udp_send: could not allocate header\n"));
      return ERR_MEM;
 8012f58:	f04f 33ff 	mov.w	r3, #4294967295
 8012f5c:	e057      	b.n	801300e <udp_sendto_if_src+0x1a2>
    }
    if (p->tot_len != 0) {
 8012f5e:	68bb      	ldr	r3, [r7, #8]
 8012f60:	891b      	ldrh	r3, [r3, #8]
 8012f62:	2b00      	cmp	r3, #0
 8012f64:	d006      	beq.n	8012f74 <udp_sendto_if_src+0x108>
      /* chain header q in front of given pbuf p (only if p contains data) */
      pbuf_chain(q, p);
 8012f66:	68b9      	ldr	r1, [r7, #8]
 8012f68:	69f8      	ldr	r0, [r7, #28]
 8012f6a:	f7f9 f901 	bl	800c170 <pbuf_chain>
 8012f6e:	e001      	b.n	8012f74 <udp_sendto_if_src+0x108>
    LWIP_DEBUGF(UDP_DEBUG,
                ("udp_send: added header pbuf %p before given pbuf %p\n", (void *)q, (void *)p));
  } else {
    /* adding space for header within p succeeded */
    /* first pbuf q equals given pbuf */
    q = p;
 8012f70:	68bb      	ldr	r3, [r7, #8]
 8012f72:	61fb      	str	r3, [r7, #28]
    LWIP_DEBUGF(UDP_DEBUG, ("udp_send: added header in given pbuf %p\n", (void *)p));
  }
  LWIP_ASSERT("check that first pbuf can hold struct udp_hdr",
 8012f74:	69fb      	ldr	r3, [r7, #28]
 8012f76:	895b      	ldrh	r3, [r3, #10]
 8012f78:	2b07      	cmp	r3, #7
 8012f7a:	d806      	bhi.n	8012f8a <udp_sendto_if_src+0x11e>
 8012f7c:	4b26      	ldr	r3, [pc, #152]	; (8013018 <udp_sendto_if_src+0x1ac>)
 8012f7e:	f240 320d 	movw	r2, #781	; 0x30d
 8012f82:	492c      	ldr	r1, [pc, #176]	; (8013034 <udp_sendto_if_src+0x1c8>)
 8012f84:	4826      	ldr	r0, [pc, #152]	; (8013020 <udp_sendto_if_src+0x1b4>)
 8012f86:	f005 fa7f 	bl	8018488 <iprintf>
              (q->len >= sizeof(struct udp_hdr)));
  /* q now represents the packet to be sent */
  udphdr = (struct udp_hdr *)q->payload;
 8012f8a:	69fb      	ldr	r3, [r7, #28]
 8012f8c:	685b      	ldr	r3, [r3, #4]
 8012f8e:	617b      	str	r3, [r7, #20]
  udphdr->src = lwip_htons(pcb->local_port);
 8012f90:	68fb      	ldr	r3, [r7, #12]
 8012f92:	8a5b      	ldrh	r3, [r3, #18]
 8012f94:	4618      	mov	r0, r3
 8012f96:	f7f7 f97b 	bl	800a290 <lwip_htons>
 8012f9a:	4603      	mov	r3, r0
 8012f9c:	461a      	mov	r2, r3
 8012f9e:	697b      	ldr	r3, [r7, #20]
 8012fa0:	801a      	strh	r2, [r3, #0]
  udphdr->dest = lwip_htons(dst_port);
 8012fa2:	887b      	ldrh	r3, [r7, #2]
 8012fa4:	4618      	mov	r0, r3
 8012fa6:	f7f7 f973 	bl	800a290 <lwip_htons>
 8012faa:	4603      	mov	r3, r0
 8012fac:	461a      	mov	r2, r3
 8012fae:	697b      	ldr	r3, [r7, #20]
 8012fb0:	805a      	strh	r2, [r3, #2]
  /* in UDP, 0 checksum means 'no checksum' */
  udphdr->chksum = 0x0000;
 8012fb2:	697b      	ldr	r3, [r7, #20]
 8012fb4:	2200      	movs	r2, #0
 8012fb6:	719a      	strb	r2, [r3, #6]
 8012fb8:	2200      	movs	r2, #0
 8012fba:	71da      	strb	r2, [r3, #7]
    ip_proto = IP_PROTO_UDPLITE;
  } else
#endif /* LWIP_UDPLITE */
  {      /* UDP */
    LWIP_DEBUGF(UDP_DEBUG, ("udp_send: UDP packet length %"U16_F"\n", q->tot_len));
    udphdr->len = lwip_htons(q->tot_len);
 8012fbc:	69fb      	ldr	r3, [r7, #28]
 8012fbe:	891b      	ldrh	r3, [r3, #8]
 8012fc0:	4618      	mov	r0, r3
 8012fc2:	f7f7 f965 	bl	800a290 <lwip_htons>
 8012fc6:	4603      	mov	r3, r0
 8012fc8:	461a      	mov	r2, r3
 8012fca:	697b      	ldr	r3, [r7, #20]
 8012fcc:	809a      	strh	r2, [r3, #4]
        }
        udphdr->chksum = udpchksum;
      }
    }
#endif /* CHECKSUM_GEN_UDP */
    ip_proto = IP_PROTO_UDP;
 8012fce:	2311      	movs	r3, #17
 8012fd0:	74fb      	strb	r3, [r7, #19]

  /* Determine TTL to use */
#if LWIP_MULTICAST_TX_OPTIONS
  ttl = (ip_addr_ismulticast(dst_ip) ? udp_get_multicast_ttl(pcb) : pcb->ttl);
#else /* LWIP_MULTICAST_TX_OPTIONS */
  ttl = pcb->ttl;
 8012fd2:	68fb      	ldr	r3, [r7, #12]
 8012fd4:	7adb      	ldrb	r3, [r3, #11]
 8012fd6:	74bb      	strb	r3, [r7, #18]

  LWIP_DEBUGF(UDP_DEBUG, ("udp_send: UDP checksum 0x%04"X16_F"\n", udphdr->chksum));
  LWIP_DEBUGF(UDP_DEBUG, ("udp_send: ip_output_if (,,,,0x%02"X16_F",)\n", (u16_t)ip_proto));
  /* output to IP */
  NETIF_SET_HINTS(netif, &(pcb->netif_hints));
  err = ip_output_if_src(q, src_ip, dst_ip, ttl, pcb->tos, ip_proto, netif);
 8012fd8:	68fb      	ldr	r3, [r7, #12]
 8012fda:	7a9b      	ldrb	r3, [r3, #10]
 8012fdc:	7cb9      	ldrb	r1, [r7, #18]
 8012fde:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8012fe0:	9202      	str	r2, [sp, #8]
 8012fe2:	7cfa      	ldrb	r2, [r7, #19]
 8012fe4:	9201      	str	r2, [sp, #4]
 8012fe6:	9300      	str	r3, [sp, #0]
 8012fe8:	460b      	mov	r3, r1
 8012fea:	687a      	ldr	r2, [r7, #4]
 8012fec:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8012fee:	69f8      	ldr	r0, [r7, #28]
 8012ff0:	f003 fb88 	bl	8016704 <ip4_output_if_src>
 8012ff4:	4603      	mov	r3, r0
 8012ff6:	76fb      	strb	r3, [r7, #27]

  /* @todo: must this be increased even if error occurred? */
  MIB2_STATS_INC(mib2.udpoutdatagrams);

  /* did we chain a separate header pbuf earlier? */
  if (q != p) {
 8012ff8:	69fa      	ldr	r2, [r7, #28]
 8012ffa:	68bb      	ldr	r3, [r7, #8]
 8012ffc:	429a      	cmp	r2, r3
 8012ffe:	d004      	beq.n	801300a <udp_sendto_if_src+0x19e>
    /* free the header pbuf */
    pbuf_free(q);
 8013000:	69f8      	ldr	r0, [r7, #28]
 8013002:	f7f8 ff9d 	bl	800bf40 <pbuf_free>
    q = NULL;
 8013006:	2300      	movs	r3, #0
 8013008:	61fb      	str	r3, [r7, #28]
    /* p is still referenced by the caller, and will live on */
  }

  UDP_STATS_INC(udp.xmit);
  return err;
 801300a:	f997 301b 	ldrsb.w	r3, [r7, #27]
}
 801300e:	4618      	mov	r0, r3
 8013010:	3720      	adds	r7, #32
 8013012:	46bd      	mov	sp, r7
 8013014:	bd80      	pop	{r7, pc}
 8013016:	bf00      	nop
 8013018:	0801b390 	.word	0x0801b390
 801301c:	0801b57c 	.word	0x0801b57c
 8013020:	0801b3e4 	.word	0x0801b3e4
 8013024:	0801b59c 	.word	0x0801b59c
 8013028:	0801b5bc 	.word	0x0801b5bc
 801302c:	0801b5e0 	.word	0x0801b5e0
 8013030:	0801b604 	.word	0x0801b604
 8013034:	0801b628 	.word	0x0801b628

08013038 <udp_bind>:
 *
 * @see udp_disconnect()
 */
err_t
udp_bind(struct udp_pcb *pcb, const ip_addr_t *ipaddr, u16_t port)
{
 8013038:	b580      	push	{r7, lr}
 801303a:	b086      	sub	sp, #24
 801303c:	af00      	add	r7, sp, #0
 801303e:	60f8      	str	r0, [r7, #12]
 8013040:	60b9      	str	r1, [r7, #8]
 8013042:	4613      	mov	r3, r2
 8013044:	80fb      	strh	r3, [r7, #6]

  LWIP_ASSERT_CORE_LOCKED();

#if LWIP_IPV4
  /* Don't propagate NULL pointer (IPv4 ANY) to subsequent functions */
  if (ipaddr == NULL) {
 8013046:	68bb      	ldr	r3, [r7, #8]
 8013048:	2b00      	cmp	r3, #0
 801304a:	d101      	bne.n	8013050 <udp_bind+0x18>
    ipaddr = IP4_ADDR_ANY;
 801304c:	4b39      	ldr	r3, [pc, #228]	; (8013134 <udp_bind+0xfc>)
 801304e:	60bb      	str	r3, [r7, #8]
  }
#else /* LWIP_IPV4 */
  LWIP_ERROR("udp_bind: invalid ipaddr", ipaddr != NULL, return ERR_ARG);
#endif /* LWIP_IPV4 */

  LWIP_ERROR("udp_bind: invalid pcb", pcb != NULL, return ERR_ARG);
 8013050:	68fb      	ldr	r3, [r7, #12]
 8013052:	2b00      	cmp	r3, #0
 8013054:	d109      	bne.n	801306a <udp_bind+0x32>
 8013056:	4b38      	ldr	r3, [pc, #224]	; (8013138 <udp_bind+0x100>)
 8013058:	f240 32b7 	movw	r2, #951	; 0x3b7
 801305c:	4937      	ldr	r1, [pc, #220]	; (801313c <udp_bind+0x104>)
 801305e:	4838      	ldr	r0, [pc, #224]	; (8013140 <udp_bind+0x108>)
 8013060:	f005 fa12 	bl	8018488 <iprintf>
 8013064:	f06f 030f 	mvn.w	r3, #15
 8013068:	e060      	b.n	801312c <udp_bind+0xf4>

  LWIP_DEBUGF(UDP_DEBUG | LWIP_DBG_TRACE, ("udp_bind(ipaddr = "));
  ip_addr_debug_print(UDP_DEBUG | LWIP_DBG_TRACE, ipaddr);
  LWIP_DEBUGF(UDP_DEBUG | LWIP_DBG_TRACE, (", port = %"U16_F")\n", port));

  rebind = 0;
 801306a:	2300      	movs	r3, #0
 801306c:	74fb      	strb	r3, [r7, #19]
  /* Check for double bind and rebind of the same pcb */
  for (ipcb = udp_pcbs; ipcb != NULL; ipcb = ipcb->next) {
 801306e:	4b35      	ldr	r3, [pc, #212]	; (8013144 <udp_bind+0x10c>)
 8013070:	681b      	ldr	r3, [r3, #0]
 8013072:	617b      	str	r3, [r7, #20]
 8013074:	e009      	b.n	801308a <udp_bind+0x52>
    /* is this UDP PCB already on active list? */
    if (pcb == ipcb) {
 8013076:	68fa      	ldr	r2, [r7, #12]
 8013078:	697b      	ldr	r3, [r7, #20]
 801307a:	429a      	cmp	r2, r3
 801307c:	d102      	bne.n	8013084 <udp_bind+0x4c>
      rebind = 1;
 801307e:	2301      	movs	r3, #1
 8013080:	74fb      	strb	r3, [r7, #19]
      break;
 8013082:	e005      	b.n	8013090 <udp_bind+0x58>
  for (ipcb = udp_pcbs; ipcb != NULL; ipcb = ipcb->next) {
 8013084:	697b      	ldr	r3, [r7, #20]
 8013086:	68db      	ldr	r3, [r3, #12]
 8013088:	617b      	str	r3, [r7, #20]
 801308a:	697b      	ldr	r3, [r7, #20]
 801308c:	2b00      	cmp	r3, #0
 801308e:	d1f2      	bne.n	8013076 <udp_bind+0x3e>
    ipaddr = &zoned_ipaddr;
  }
#endif /* LWIP_IPV6 && LWIP_IPV6_SCOPES */

  /* no port specified? */
  if (port == 0) {
 8013090:	88fb      	ldrh	r3, [r7, #6]
 8013092:	2b00      	cmp	r3, #0
 8013094:	d109      	bne.n	80130aa <udp_bind+0x72>
    port = udp_new_port();
 8013096:	f7ff fc69 	bl	801296c <udp_new_port>
 801309a:	4603      	mov	r3, r0
 801309c:	80fb      	strh	r3, [r7, #6]
    if (port == 0) {
 801309e:	88fb      	ldrh	r3, [r7, #6]
 80130a0:	2b00      	cmp	r3, #0
 80130a2:	d12c      	bne.n	80130fe <udp_bind+0xc6>
      /* no more ports available in local range */
      LWIP_DEBUGF(UDP_DEBUG, ("udp_bind: out of free UDP ports\n"));
      return ERR_USE;
 80130a4:	f06f 0307 	mvn.w	r3, #7
 80130a8:	e040      	b.n	801312c <udp_bind+0xf4>
    }
  } else {
    for (ipcb = udp_pcbs; ipcb != NULL; ipcb = ipcb->next) {
 80130aa:	4b26      	ldr	r3, [pc, #152]	; (8013144 <udp_bind+0x10c>)
 80130ac:	681b      	ldr	r3, [r3, #0]
 80130ae:	617b      	str	r3, [r7, #20]
 80130b0:	e022      	b.n	80130f8 <udp_bind+0xc0>
      if (pcb != ipcb) {
 80130b2:	68fa      	ldr	r2, [r7, #12]
 80130b4:	697b      	ldr	r3, [r7, #20]
 80130b6:	429a      	cmp	r2, r3
 80130b8:	d01b      	beq.n	80130f2 <udp_bind+0xba>
        if (!ip_get_option(pcb, SOF_REUSEADDR) ||
            !ip_get_option(ipcb, SOF_REUSEADDR))
#endif /* SO_REUSE */
        {
          /* port matches that of PCB in list and REUSEADDR not set -> reject */
          if ((ipcb->local_port == port) &&
 80130ba:	697b      	ldr	r3, [r7, #20]
 80130bc:	8a5b      	ldrh	r3, [r3, #18]
 80130be:	88fa      	ldrh	r2, [r7, #6]
 80130c0:	429a      	cmp	r2, r3
 80130c2:	d116      	bne.n	80130f2 <udp_bind+0xba>
              /* IP address matches or any IP used? */
              (ip_addr_cmp(&ipcb->local_ip, ipaddr) || ip_addr_isany(ipaddr) ||
 80130c4:	697b      	ldr	r3, [r7, #20]
 80130c6:	681a      	ldr	r2, [r3, #0]
 80130c8:	68bb      	ldr	r3, [r7, #8]
 80130ca:	681b      	ldr	r3, [r3, #0]
          if ((ipcb->local_port == port) &&
 80130cc:	429a      	cmp	r2, r3
 80130ce:	d00d      	beq.n	80130ec <udp_bind+0xb4>
              (ip_addr_cmp(&ipcb->local_ip, ipaddr) || ip_addr_isany(ipaddr) ||
 80130d0:	68bb      	ldr	r3, [r7, #8]
 80130d2:	2b00      	cmp	r3, #0
 80130d4:	d00a      	beq.n	80130ec <udp_bind+0xb4>
 80130d6:	68bb      	ldr	r3, [r7, #8]
 80130d8:	681b      	ldr	r3, [r3, #0]
 80130da:	2b00      	cmp	r3, #0
 80130dc:	d006      	beq.n	80130ec <udp_bind+0xb4>
              ip_addr_isany(&ipcb->local_ip))) {
 80130de:	697b      	ldr	r3, [r7, #20]
              (ip_addr_cmp(&ipcb->local_ip, ipaddr) || ip_addr_isany(ipaddr) ||
 80130e0:	2b00      	cmp	r3, #0
 80130e2:	d003      	beq.n	80130ec <udp_bind+0xb4>
              ip_addr_isany(&ipcb->local_ip))) {
 80130e4:	697b      	ldr	r3, [r7, #20]
 80130e6:	681b      	ldr	r3, [r3, #0]
 80130e8:	2b00      	cmp	r3, #0
 80130ea:	d102      	bne.n	80130f2 <udp_bind+0xba>
            /* other PCB already binds to this local IP and port */
            LWIP_DEBUGF(UDP_DEBUG,
                        ("udp_bind: local port %"U16_F" already bound by another pcb\n", port));
            return ERR_USE;
 80130ec:	f06f 0307 	mvn.w	r3, #7
 80130f0:	e01c      	b.n	801312c <udp_bind+0xf4>
    for (ipcb = udp_pcbs; ipcb != NULL; ipcb = ipcb->next) {
 80130f2:	697b      	ldr	r3, [r7, #20]
 80130f4:	68db      	ldr	r3, [r3, #12]
 80130f6:	617b      	str	r3, [r7, #20]
 80130f8:	697b      	ldr	r3, [r7, #20]
 80130fa:	2b00      	cmp	r3, #0
 80130fc:	d1d9      	bne.n	80130b2 <udp_bind+0x7a>
        }
      }
    }
  }

  ip_addr_set_ipaddr(&pcb->local_ip, ipaddr);
 80130fe:	68bb      	ldr	r3, [r7, #8]
 8013100:	2b00      	cmp	r3, #0
 8013102:	d002      	beq.n	801310a <udp_bind+0xd2>
 8013104:	68bb      	ldr	r3, [r7, #8]
 8013106:	681b      	ldr	r3, [r3, #0]
 8013108:	e000      	b.n	801310c <udp_bind+0xd4>
 801310a:	2300      	movs	r3, #0
 801310c:	68fa      	ldr	r2, [r7, #12]
 801310e:	6013      	str	r3, [r2, #0]

  pcb->local_port = port;
 8013110:	68fb      	ldr	r3, [r7, #12]
 8013112:	88fa      	ldrh	r2, [r7, #6]
 8013114:	825a      	strh	r2, [r3, #18]
  mib2_udp_bind(pcb);
  /* pcb not active yet? */
  if (rebind == 0) {
 8013116:	7cfb      	ldrb	r3, [r7, #19]
 8013118:	2b00      	cmp	r3, #0
 801311a:	d106      	bne.n	801312a <udp_bind+0xf2>
    /* place the PCB on the active list if not already there */
    pcb->next = udp_pcbs;
 801311c:	4b09      	ldr	r3, [pc, #36]	; (8013144 <udp_bind+0x10c>)
 801311e:	681a      	ldr	r2, [r3, #0]
 8013120:	68fb      	ldr	r3, [r7, #12]
 8013122:	60da      	str	r2, [r3, #12]
    udp_pcbs = pcb;
 8013124:	4a07      	ldr	r2, [pc, #28]	; (8013144 <udp_bind+0x10c>)
 8013126:	68fb      	ldr	r3, [r7, #12]
 8013128:	6013      	str	r3, [r2, #0]
  }
  LWIP_DEBUGF(UDP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("udp_bind: bound to "));
  ip_addr_debug_print_val(UDP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, pcb->local_ip);
  LWIP_DEBUGF(UDP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, (", port %"U16_F")\n", pcb->local_port));
  return ERR_OK;
 801312a:	2300      	movs	r3, #0
}
 801312c:	4618      	mov	r0, r3
 801312e:	3718      	adds	r7, #24
 8013130:	46bd      	mov	sp, r7
 8013132:	bd80      	pop	{r7, pc}
 8013134:	0801c2c4 	.word	0x0801c2c4
 8013138:	0801b390 	.word	0x0801b390
 801313c:	0801b658 	.word	0x0801b658
 8013140:	0801b3e4 	.word	0x0801b3e4
 8013144:	20008978 	.word	0x20008978

08013148 <udp_connect>:
 *
 * @see udp_disconnect()
 */
err_t
udp_connect(struct udp_pcb *pcb, const ip_addr_t *ipaddr, u16_t port)
{
 8013148:	b580      	push	{r7, lr}
 801314a:	b086      	sub	sp, #24
 801314c:	af00      	add	r7, sp, #0
 801314e:	60f8      	str	r0, [r7, #12]
 8013150:	60b9      	str	r1, [r7, #8]
 8013152:	4613      	mov	r3, r2
 8013154:	80fb      	strh	r3, [r7, #6]
  struct udp_pcb *ipcb;

  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("udp_connect: invalid pcb", pcb != NULL, return ERR_ARG);
 8013156:	68fb      	ldr	r3, [r7, #12]
 8013158:	2b00      	cmp	r3, #0
 801315a:	d109      	bne.n	8013170 <udp_connect+0x28>
 801315c:	4b2c      	ldr	r3, [pc, #176]	; (8013210 <udp_connect+0xc8>)
 801315e:	f240 4235 	movw	r2, #1077	; 0x435
 8013162:	492c      	ldr	r1, [pc, #176]	; (8013214 <udp_connect+0xcc>)
 8013164:	482c      	ldr	r0, [pc, #176]	; (8013218 <udp_connect+0xd0>)
 8013166:	f005 f98f 	bl	8018488 <iprintf>
 801316a:	f06f 030f 	mvn.w	r3, #15
 801316e:	e04b      	b.n	8013208 <udp_connect+0xc0>
  LWIP_ERROR("udp_connect: invalid ipaddr", ipaddr != NULL, return ERR_ARG);
 8013170:	68bb      	ldr	r3, [r7, #8]
 8013172:	2b00      	cmp	r3, #0
 8013174:	d109      	bne.n	801318a <udp_connect+0x42>
 8013176:	4b26      	ldr	r3, [pc, #152]	; (8013210 <udp_connect+0xc8>)
 8013178:	f240 4236 	movw	r2, #1078	; 0x436
 801317c:	4927      	ldr	r1, [pc, #156]	; (801321c <udp_connect+0xd4>)
 801317e:	4826      	ldr	r0, [pc, #152]	; (8013218 <udp_connect+0xd0>)
 8013180:	f005 f982 	bl	8018488 <iprintf>
 8013184:	f06f 030f 	mvn.w	r3, #15
 8013188:	e03e      	b.n	8013208 <udp_connect+0xc0>

  if (pcb->local_port == 0) {
 801318a:	68fb      	ldr	r3, [r7, #12]
 801318c:	8a5b      	ldrh	r3, [r3, #18]
 801318e:	2b00      	cmp	r3, #0
 8013190:	d10f      	bne.n	80131b2 <udp_connect+0x6a>
    err_t err = udp_bind(pcb, &pcb->local_ip, pcb->local_port);
 8013192:	68f9      	ldr	r1, [r7, #12]
 8013194:	68fb      	ldr	r3, [r7, #12]
 8013196:	8a5b      	ldrh	r3, [r3, #18]
 8013198:	461a      	mov	r2, r3
 801319a:	68f8      	ldr	r0, [r7, #12]
 801319c:	f7ff ff4c 	bl	8013038 <udp_bind>
 80131a0:	4603      	mov	r3, r0
 80131a2:	74fb      	strb	r3, [r7, #19]
    if (err != ERR_OK) {
 80131a4:	f997 3013 	ldrsb.w	r3, [r7, #19]
 80131a8:	2b00      	cmp	r3, #0
 80131aa:	d002      	beq.n	80131b2 <udp_connect+0x6a>
      return err;
 80131ac:	f997 3013 	ldrsb.w	r3, [r7, #19]
 80131b0:	e02a      	b.n	8013208 <udp_connect+0xc0>
    }
  }

  ip_addr_set_ipaddr(&pcb->remote_ip, ipaddr);
 80131b2:	68bb      	ldr	r3, [r7, #8]
 80131b4:	2b00      	cmp	r3, #0
 80131b6:	d002      	beq.n	80131be <udp_connect+0x76>
 80131b8:	68bb      	ldr	r3, [r7, #8]
 80131ba:	681b      	ldr	r3, [r3, #0]
 80131bc:	e000      	b.n	80131c0 <udp_connect+0x78>
 80131be:	2300      	movs	r3, #0
 80131c0:	68fa      	ldr	r2, [r7, #12]
 80131c2:	6053      	str	r3, [r2, #4]
      ip6_addr_lacks_zone(ip_2_ip6(&pcb->remote_ip), IP6_UNKNOWN)) {
    ip6_addr_select_zone(ip_2_ip6(&pcb->remote_ip), ip_2_ip6(&pcb->local_ip));
  }
#endif /* LWIP_IPV6 && LWIP_IPV6_SCOPES */

  pcb->remote_port = port;
 80131c4:	68fb      	ldr	r3, [r7, #12]
 80131c6:	88fa      	ldrh	r2, [r7, #6]
 80131c8:	829a      	strh	r2, [r3, #20]
  pcb->flags |= UDP_FLAGS_CONNECTED;
 80131ca:	68fb      	ldr	r3, [r7, #12]
 80131cc:	7c1b      	ldrb	r3, [r3, #16]
 80131ce:	f043 0304 	orr.w	r3, r3, #4
 80131d2:	b2da      	uxtb	r2, r3
 80131d4:	68fb      	ldr	r3, [r7, #12]
 80131d6:	741a      	strb	r2, [r3, #16]
  ip_addr_debug_print_val(UDP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE,
                          pcb->remote_ip);
  LWIP_DEBUGF(UDP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, (", port %"U16_F")\n", pcb->remote_port));

  /* Insert UDP PCB into the list of active UDP PCBs. */
  for (ipcb = udp_pcbs; ipcb != NULL; ipcb = ipcb->next) {
 80131d8:	4b11      	ldr	r3, [pc, #68]	; (8013220 <udp_connect+0xd8>)
 80131da:	681b      	ldr	r3, [r3, #0]
 80131dc:	617b      	str	r3, [r7, #20]
 80131de:	e008      	b.n	80131f2 <udp_connect+0xaa>
    if (pcb == ipcb) {
 80131e0:	68fa      	ldr	r2, [r7, #12]
 80131e2:	697b      	ldr	r3, [r7, #20]
 80131e4:	429a      	cmp	r2, r3
 80131e6:	d101      	bne.n	80131ec <udp_connect+0xa4>
      /* already on the list, just return */
      return ERR_OK;
 80131e8:	2300      	movs	r3, #0
 80131ea:	e00d      	b.n	8013208 <udp_connect+0xc0>
  for (ipcb = udp_pcbs; ipcb != NULL; ipcb = ipcb->next) {
 80131ec:	697b      	ldr	r3, [r7, #20]
 80131ee:	68db      	ldr	r3, [r3, #12]
 80131f0:	617b      	str	r3, [r7, #20]
 80131f2:	697b      	ldr	r3, [r7, #20]
 80131f4:	2b00      	cmp	r3, #0
 80131f6:	d1f3      	bne.n	80131e0 <udp_connect+0x98>
    }
  }
  /* PCB not yet on the list, add PCB now */
  pcb->next = udp_pcbs;
 80131f8:	4b09      	ldr	r3, [pc, #36]	; (8013220 <udp_connect+0xd8>)
 80131fa:	681a      	ldr	r2, [r3, #0]
 80131fc:	68fb      	ldr	r3, [r7, #12]
 80131fe:	60da      	str	r2, [r3, #12]
  udp_pcbs = pcb;
 8013200:	4a07      	ldr	r2, [pc, #28]	; (8013220 <udp_connect+0xd8>)
 8013202:	68fb      	ldr	r3, [r7, #12]
 8013204:	6013      	str	r3, [r2, #0]
  return ERR_OK;
 8013206:	2300      	movs	r3, #0
}
 8013208:	4618      	mov	r0, r3
 801320a:	3718      	adds	r7, #24
 801320c:	46bd      	mov	sp, r7
 801320e:	bd80      	pop	{r7, pc}
 8013210:	0801b390 	.word	0x0801b390
 8013214:	0801b670 	.word	0x0801b670
 8013218:	0801b3e4 	.word	0x0801b3e4
 801321c:	0801b68c 	.word	0x0801b68c
 8013220:	20008978 	.word	0x20008978

08013224 <udp_recv>:
 * @param recv function pointer of the callback function
 * @param recv_arg additional argument to pass to the callback function
 */
void
udp_recv(struct udp_pcb *pcb, udp_recv_fn recv, void *recv_arg)
{
 8013224:	b580      	push	{r7, lr}
 8013226:	b084      	sub	sp, #16
 8013228:	af00      	add	r7, sp, #0
 801322a:	60f8      	str	r0, [r7, #12]
 801322c:	60b9      	str	r1, [r7, #8]
 801322e:	607a      	str	r2, [r7, #4]
  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("udp_recv: invalid pcb", pcb != NULL, return);
 8013230:	68fb      	ldr	r3, [r7, #12]
 8013232:	2b00      	cmp	r3, #0
 8013234:	d107      	bne.n	8013246 <udp_recv+0x22>
 8013236:	4b08      	ldr	r3, [pc, #32]	; (8013258 <udp_recv+0x34>)
 8013238:	f240 428a 	movw	r2, #1162	; 0x48a
 801323c:	4907      	ldr	r1, [pc, #28]	; (801325c <udp_recv+0x38>)
 801323e:	4808      	ldr	r0, [pc, #32]	; (8013260 <udp_recv+0x3c>)
 8013240:	f005 f922 	bl	8018488 <iprintf>
 8013244:	e005      	b.n	8013252 <udp_recv+0x2e>

  /* remember recv() callback and user data */
  pcb->recv = recv;
 8013246:	68fb      	ldr	r3, [r7, #12]
 8013248:	68ba      	ldr	r2, [r7, #8]
 801324a:	619a      	str	r2, [r3, #24]
  pcb->recv_arg = recv_arg;
 801324c:	68fb      	ldr	r3, [r7, #12]
 801324e:	687a      	ldr	r2, [r7, #4]
 8013250:	61da      	str	r2, [r3, #28]
}
 8013252:	3710      	adds	r7, #16
 8013254:	46bd      	mov	sp, r7
 8013256:	bd80      	pop	{r7, pc}
 8013258:	0801b390 	.word	0x0801b390
 801325c:	0801b6c4 	.word	0x0801b6c4
 8013260:	0801b3e4 	.word	0x0801b3e4

08013264 <udp_remove>:
 *
 * @see udp_new()
 */
void
udp_remove(struct udp_pcb *pcb)
{
 8013264:	b580      	push	{r7, lr}
 8013266:	b084      	sub	sp, #16
 8013268:	af00      	add	r7, sp, #0
 801326a:	6078      	str	r0, [r7, #4]
  struct udp_pcb *pcb2;

  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("udp_remove: invalid pcb", pcb != NULL, return);
 801326c:	687b      	ldr	r3, [r7, #4]
 801326e:	2b00      	cmp	r3, #0
 8013270:	d107      	bne.n	8013282 <udp_remove+0x1e>
 8013272:	4b19      	ldr	r3, [pc, #100]	; (80132d8 <udp_remove+0x74>)
 8013274:	f240 42a1 	movw	r2, #1185	; 0x4a1
 8013278:	4918      	ldr	r1, [pc, #96]	; (80132dc <udp_remove+0x78>)
 801327a:	4819      	ldr	r0, [pc, #100]	; (80132e0 <udp_remove+0x7c>)
 801327c:	f005 f904 	bl	8018488 <iprintf>
 8013280:	e026      	b.n	80132d0 <udp_remove+0x6c>

  mib2_udp_unbind(pcb);
  /* pcb to be removed is first in list? */
  if (udp_pcbs == pcb) {
 8013282:	4b18      	ldr	r3, [pc, #96]	; (80132e4 <udp_remove+0x80>)
 8013284:	681b      	ldr	r3, [r3, #0]
 8013286:	687a      	ldr	r2, [r7, #4]
 8013288:	429a      	cmp	r2, r3
 801328a:	d105      	bne.n	8013298 <udp_remove+0x34>
    /* make list start at 2nd pcb */
    udp_pcbs = udp_pcbs->next;
 801328c:	4b15      	ldr	r3, [pc, #84]	; (80132e4 <udp_remove+0x80>)
 801328e:	681b      	ldr	r3, [r3, #0]
 8013290:	68db      	ldr	r3, [r3, #12]
 8013292:	4a14      	ldr	r2, [pc, #80]	; (80132e4 <udp_remove+0x80>)
 8013294:	6013      	str	r3, [r2, #0]
 8013296:	e017      	b.n	80132c8 <udp_remove+0x64>
    /* pcb not 1st in list */
  } else {
    for (pcb2 = udp_pcbs; pcb2 != NULL; pcb2 = pcb2->next) {
 8013298:	4b12      	ldr	r3, [pc, #72]	; (80132e4 <udp_remove+0x80>)
 801329a:	681b      	ldr	r3, [r3, #0]
 801329c:	60fb      	str	r3, [r7, #12]
 801329e:	e010      	b.n	80132c2 <udp_remove+0x5e>
      /* find pcb in udp_pcbs list */
      if (pcb2->next != NULL && pcb2->next == pcb) {
 80132a0:	68fb      	ldr	r3, [r7, #12]
 80132a2:	68db      	ldr	r3, [r3, #12]
 80132a4:	2b00      	cmp	r3, #0
 80132a6:	d009      	beq.n	80132bc <udp_remove+0x58>
 80132a8:	68fb      	ldr	r3, [r7, #12]
 80132aa:	68db      	ldr	r3, [r3, #12]
 80132ac:	687a      	ldr	r2, [r7, #4]
 80132ae:	429a      	cmp	r2, r3
 80132b0:	d104      	bne.n	80132bc <udp_remove+0x58>
        /* remove pcb from list */
        pcb2->next = pcb->next;
 80132b2:	687b      	ldr	r3, [r7, #4]
 80132b4:	68da      	ldr	r2, [r3, #12]
 80132b6:	68fb      	ldr	r3, [r7, #12]
 80132b8:	60da      	str	r2, [r3, #12]
        break;
 80132ba:	e005      	b.n	80132c8 <udp_remove+0x64>
    for (pcb2 = udp_pcbs; pcb2 != NULL; pcb2 = pcb2->next) {
 80132bc:	68fb      	ldr	r3, [r7, #12]
 80132be:	68db      	ldr	r3, [r3, #12]
 80132c0:	60fb      	str	r3, [r7, #12]
 80132c2:	68fb      	ldr	r3, [r7, #12]
 80132c4:	2b00      	cmp	r3, #0
 80132c6:	d1eb      	bne.n	80132a0 <udp_remove+0x3c>
      }
    }
  }
  memp_free(MEMP_UDP_PCB, pcb);
 80132c8:	6879      	ldr	r1, [r7, #4]
 80132ca:	2000      	movs	r0, #0
 80132cc:	f7f7 ffb6 	bl	800b23c <memp_free>
}
 80132d0:	3710      	adds	r7, #16
 80132d2:	46bd      	mov	sp, r7
 80132d4:	bd80      	pop	{r7, pc}
 80132d6:	bf00      	nop
 80132d8:	0801b390 	.word	0x0801b390
 80132dc:	0801b6dc 	.word	0x0801b6dc
 80132e0:	0801b3e4 	.word	0x0801b3e4
 80132e4:	20008978 	.word	0x20008978

080132e8 <udp_new>:
 *
 * @see udp_remove()
 */
struct udp_pcb *
udp_new(void)
{
 80132e8:	b580      	push	{r7, lr}
 80132ea:	b082      	sub	sp, #8
 80132ec:	af00      	add	r7, sp, #0
  struct udp_pcb *pcb;

  LWIP_ASSERT_CORE_LOCKED();

  pcb = (struct udp_pcb *)memp_malloc(MEMP_UDP_PCB);
 80132ee:	2000      	movs	r0, #0
 80132f0:	f7f7 ff34 	bl	800b15c <memp_malloc>
 80132f4:	6078      	str	r0, [r7, #4]
  /* could allocate UDP PCB? */
  if (pcb != NULL) {
 80132f6:	687b      	ldr	r3, [r7, #4]
 80132f8:	2b00      	cmp	r3, #0
 80132fa:	d007      	beq.n	801330c <udp_new+0x24>
    /* UDP Lite: by initializing to all zeroes, chksum_len is set to 0
     * which means checksum is generated over the whole datagram per default
     * (recommended as default by RFC 3828). */
    /* initialize PCB to all zeroes */
    memset(pcb, 0, sizeof(struct udp_pcb));
 80132fc:	2220      	movs	r2, #32
 80132fe:	2100      	movs	r1, #0
 8013300:	6878      	ldr	r0, [r7, #4]
 8013302:	f005 f926 	bl	8018552 <memset>
    pcb->ttl = UDP_TTL;
 8013306:	687b      	ldr	r3, [r7, #4]
 8013308:	22ff      	movs	r2, #255	; 0xff
 801330a:	72da      	strb	r2, [r3, #11]
#if LWIP_MULTICAST_TX_OPTIONS
    udp_set_multicast_ttl(pcb, UDP_TTL);
#endif /* LWIP_MULTICAST_TX_OPTIONS */
  }
  return pcb;
 801330c:	687b      	ldr	r3, [r7, #4]
}
 801330e:	4618      	mov	r0, r3
 8013310:	3708      	adds	r7, #8
 8013312:	46bd      	mov	sp, r7
 8013314:	bd80      	pop	{r7, pc}
	...

08013318 <udp_netif_ip_addr_changed>:
 *
 * @param old_addr IP address of the netif before change
 * @param new_addr IP address of the netif after change
 */
void udp_netif_ip_addr_changed(const ip_addr_t *old_addr, const ip_addr_t *new_addr)
{
 8013318:	b480      	push	{r7}
 801331a:	b085      	sub	sp, #20
 801331c:	af00      	add	r7, sp, #0
 801331e:	6078      	str	r0, [r7, #4]
 8013320:	6039      	str	r1, [r7, #0]
  struct udp_pcb *upcb;

  if (!ip_addr_isany(old_addr) && !ip_addr_isany(new_addr)) {
 8013322:	687b      	ldr	r3, [r7, #4]
 8013324:	2b00      	cmp	r3, #0
 8013326:	d01e      	beq.n	8013366 <udp_netif_ip_addr_changed+0x4e>
 8013328:	687b      	ldr	r3, [r7, #4]
 801332a:	681b      	ldr	r3, [r3, #0]
 801332c:	2b00      	cmp	r3, #0
 801332e:	d01a      	beq.n	8013366 <udp_netif_ip_addr_changed+0x4e>
 8013330:	683b      	ldr	r3, [r7, #0]
 8013332:	2b00      	cmp	r3, #0
 8013334:	d017      	beq.n	8013366 <udp_netif_ip_addr_changed+0x4e>
 8013336:	683b      	ldr	r3, [r7, #0]
 8013338:	681b      	ldr	r3, [r3, #0]
 801333a:	2b00      	cmp	r3, #0
 801333c:	d013      	beq.n	8013366 <udp_netif_ip_addr_changed+0x4e>
    for (upcb = udp_pcbs; upcb != NULL; upcb = upcb->next) {
 801333e:	4b0d      	ldr	r3, [pc, #52]	; (8013374 <udp_netif_ip_addr_changed+0x5c>)
 8013340:	681b      	ldr	r3, [r3, #0]
 8013342:	60fb      	str	r3, [r7, #12]
 8013344:	e00c      	b.n	8013360 <udp_netif_ip_addr_changed+0x48>
      /* PCB bound to current local interface address? */
      if (ip_addr_cmp(&upcb->local_ip, old_addr)) {
 8013346:	68fb      	ldr	r3, [r7, #12]
 8013348:	681a      	ldr	r2, [r3, #0]
 801334a:	687b      	ldr	r3, [r7, #4]
 801334c:	681b      	ldr	r3, [r3, #0]
 801334e:	429a      	cmp	r2, r3
 8013350:	d103      	bne.n	801335a <udp_netif_ip_addr_changed+0x42>
        /* The PCB is bound to the old ipaddr and
         * is set to bound to the new one instead */
        ip_addr_copy(upcb->local_ip, *new_addr);
 8013352:	683b      	ldr	r3, [r7, #0]
 8013354:	681a      	ldr	r2, [r3, #0]
 8013356:	68fb      	ldr	r3, [r7, #12]
 8013358:	601a      	str	r2, [r3, #0]
    for (upcb = udp_pcbs; upcb != NULL; upcb = upcb->next) {
 801335a:	68fb      	ldr	r3, [r7, #12]
 801335c:	68db      	ldr	r3, [r3, #12]
 801335e:	60fb      	str	r3, [r7, #12]
 8013360:	68fb      	ldr	r3, [r7, #12]
 8013362:	2b00      	cmp	r3, #0
 8013364:	d1ef      	bne.n	8013346 <udp_netif_ip_addr_changed+0x2e>
      }
    }
  }
}
 8013366:	bf00      	nop
 8013368:	3714      	adds	r7, #20
 801336a:	46bd      	mov	sp, r7
 801336c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013370:	4770      	bx	lr
 8013372:	bf00      	nop
 8013374:	20008978 	.word	0x20008978

08013378 <dhcp_inc_pcb_refcount>:
static void dhcp_option_trailer(u16_t options_out_len, u8_t *options, struct pbuf *p_out);

/** Ensure DHCP PCB is allocated and bound */
static err_t
dhcp_inc_pcb_refcount(void)
{
 8013378:	b580      	push	{r7, lr}
 801337a:	af00      	add	r7, sp, #0
  if (dhcp_pcb_refcount == 0) {
 801337c:	4b20      	ldr	r3, [pc, #128]	; (8013400 <dhcp_inc_pcb_refcount+0x88>)
 801337e:	781b      	ldrb	r3, [r3, #0]
 8013380:	2b00      	cmp	r3, #0
 8013382:	d133      	bne.n	80133ec <dhcp_inc_pcb_refcount+0x74>
    LWIP_ASSERT("dhcp_inc_pcb_refcount(): memory leak", dhcp_pcb == NULL);
 8013384:	4b1f      	ldr	r3, [pc, #124]	; (8013404 <dhcp_inc_pcb_refcount+0x8c>)
 8013386:	681b      	ldr	r3, [r3, #0]
 8013388:	2b00      	cmp	r3, #0
 801338a:	d005      	beq.n	8013398 <dhcp_inc_pcb_refcount+0x20>
 801338c:	4b1e      	ldr	r3, [pc, #120]	; (8013408 <dhcp_inc_pcb_refcount+0x90>)
 801338e:	22e5      	movs	r2, #229	; 0xe5
 8013390:	491e      	ldr	r1, [pc, #120]	; (801340c <dhcp_inc_pcb_refcount+0x94>)
 8013392:	481f      	ldr	r0, [pc, #124]	; (8013410 <dhcp_inc_pcb_refcount+0x98>)
 8013394:	f005 f878 	bl	8018488 <iprintf>

    /* allocate UDP PCB */
    dhcp_pcb = udp_new();
 8013398:	f7ff ffa6 	bl	80132e8 <udp_new>
 801339c:	4603      	mov	r3, r0
 801339e:	4a19      	ldr	r2, [pc, #100]	; (8013404 <dhcp_inc_pcb_refcount+0x8c>)
 80133a0:	6013      	str	r3, [r2, #0]

    if (dhcp_pcb == NULL) {
 80133a2:	4b18      	ldr	r3, [pc, #96]	; (8013404 <dhcp_inc_pcb_refcount+0x8c>)
 80133a4:	681b      	ldr	r3, [r3, #0]
 80133a6:	2b00      	cmp	r3, #0
 80133a8:	d102      	bne.n	80133b0 <dhcp_inc_pcb_refcount+0x38>
      return ERR_MEM;
 80133aa:	f04f 33ff 	mov.w	r3, #4294967295
 80133ae:	e024      	b.n	80133fa <dhcp_inc_pcb_refcount+0x82>
    }

    ip_set_option(dhcp_pcb, SOF_BROADCAST);
 80133b0:	4b14      	ldr	r3, [pc, #80]	; (8013404 <dhcp_inc_pcb_refcount+0x8c>)
 80133b2:	681b      	ldr	r3, [r3, #0]
 80133b4:	7a5a      	ldrb	r2, [r3, #9]
 80133b6:	4b13      	ldr	r3, [pc, #76]	; (8013404 <dhcp_inc_pcb_refcount+0x8c>)
 80133b8:	681b      	ldr	r3, [r3, #0]
 80133ba:	f042 0220 	orr.w	r2, r2, #32
 80133be:	b2d2      	uxtb	r2, r2
 80133c0:	725a      	strb	r2, [r3, #9]

    /* set up local and remote port for the pcb -> listen on all interfaces on all src/dest IPs */
    udp_bind(dhcp_pcb, IP4_ADDR_ANY, LWIP_IANA_PORT_DHCP_CLIENT);
 80133c2:	4b10      	ldr	r3, [pc, #64]	; (8013404 <dhcp_inc_pcb_refcount+0x8c>)
 80133c4:	681b      	ldr	r3, [r3, #0]
 80133c6:	2244      	movs	r2, #68	; 0x44
 80133c8:	4912      	ldr	r1, [pc, #72]	; (8013414 <dhcp_inc_pcb_refcount+0x9c>)
 80133ca:	4618      	mov	r0, r3
 80133cc:	f7ff fe34 	bl	8013038 <udp_bind>
    udp_connect(dhcp_pcb, IP4_ADDR_ANY, LWIP_IANA_PORT_DHCP_SERVER);
 80133d0:	4b0c      	ldr	r3, [pc, #48]	; (8013404 <dhcp_inc_pcb_refcount+0x8c>)
 80133d2:	681b      	ldr	r3, [r3, #0]
 80133d4:	2243      	movs	r2, #67	; 0x43
 80133d6:	490f      	ldr	r1, [pc, #60]	; (8013414 <dhcp_inc_pcb_refcount+0x9c>)
 80133d8:	4618      	mov	r0, r3
 80133da:	f7ff feb5 	bl	8013148 <udp_connect>
    udp_recv(dhcp_pcb, dhcp_recv, NULL);
 80133de:	4b09      	ldr	r3, [pc, #36]	; (8013404 <dhcp_inc_pcb_refcount+0x8c>)
 80133e0:	681b      	ldr	r3, [r3, #0]
 80133e2:	2200      	movs	r2, #0
 80133e4:	490c      	ldr	r1, [pc, #48]	; (8013418 <dhcp_inc_pcb_refcount+0xa0>)
 80133e6:	4618      	mov	r0, r3
 80133e8:	f7ff ff1c 	bl	8013224 <udp_recv>
  }

  dhcp_pcb_refcount++;
 80133ec:	4b04      	ldr	r3, [pc, #16]	; (8013400 <dhcp_inc_pcb_refcount+0x88>)
 80133ee:	781b      	ldrb	r3, [r3, #0]
 80133f0:	3301      	adds	r3, #1
 80133f2:	b2da      	uxtb	r2, r3
 80133f4:	4b02      	ldr	r3, [pc, #8]	; (8013400 <dhcp_inc_pcb_refcount+0x88>)
 80133f6:	701a      	strb	r2, [r3, #0]

  return ERR_OK;
 80133f8:	2300      	movs	r3, #0
}
 80133fa:	4618      	mov	r0, r3
 80133fc:	bd80      	pop	{r7, pc}
 80133fe:	bf00      	nop
 8013400:	200089b4 	.word	0x200089b4
 8013404:	200089b0 	.word	0x200089b0
 8013408:	0801b6f4 	.word	0x0801b6f4
 801340c:	0801b72c 	.word	0x0801b72c
 8013410:	0801b754 	.word	0x0801b754
 8013414:	0801c2c4 	.word	0x0801c2c4
 8013418:	08014d4d 	.word	0x08014d4d

0801341c <dhcp_dec_pcb_refcount>:

/** Free DHCP PCB if the last netif stops using it */
static void
dhcp_dec_pcb_refcount(void)
{
 801341c:	b580      	push	{r7, lr}
 801341e:	af00      	add	r7, sp, #0
  LWIP_ASSERT("dhcp_pcb_refcount(): refcount error", (dhcp_pcb_refcount > 0));
 8013420:	4b0e      	ldr	r3, [pc, #56]	; (801345c <dhcp_dec_pcb_refcount+0x40>)
 8013422:	781b      	ldrb	r3, [r3, #0]
 8013424:	2b00      	cmp	r3, #0
 8013426:	d105      	bne.n	8013434 <dhcp_dec_pcb_refcount+0x18>
 8013428:	4b0d      	ldr	r3, [pc, #52]	; (8013460 <dhcp_dec_pcb_refcount+0x44>)
 801342a:	22ff      	movs	r2, #255	; 0xff
 801342c:	490d      	ldr	r1, [pc, #52]	; (8013464 <dhcp_dec_pcb_refcount+0x48>)
 801342e:	480e      	ldr	r0, [pc, #56]	; (8013468 <dhcp_dec_pcb_refcount+0x4c>)
 8013430:	f005 f82a 	bl	8018488 <iprintf>
  dhcp_pcb_refcount--;
 8013434:	4b09      	ldr	r3, [pc, #36]	; (801345c <dhcp_dec_pcb_refcount+0x40>)
 8013436:	781b      	ldrb	r3, [r3, #0]
 8013438:	3b01      	subs	r3, #1
 801343a:	b2da      	uxtb	r2, r3
 801343c:	4b07      	ldr	r3, [pc, #28]	; (801345c <dhcp_dec_pcb_refcount+0x40>)
 801343e:	701a      	strb	r2, [r3, #0]

  if (dhcp_pcb_refcount == 0) {
 8013440:	4b06      	ldr	r3, [pc, #24]	; (801345c <dhcp_dec_pcb_refcount+0x40>)
 8013442:	781b      	ldrb	r3, [r3, #0]
 8013444:	2b00      	cmp	r3, #0
 8013446:	d107      	bne.n	8013458 <dhcp_dec_pcb_refcount+0x3c>
    udp_remove(dhcp_pcb);
 8013448:	4b08      	ldr	r3, [pc, #32]	; (801346c <dhcp_dec_pcb_refcount+0x50>)
 801344a:	681b      	ldr	r3, [r3, #0]
 801344c:	4618      	mov	r0, r3
 801344e:	f7ff ff09 	bl	8013264 <udp_remove>
    dhcp_pcb = NULL;
 8013452:	4b06      	ldr	r3, [pc, #24]	; (801346c <dhcp_dec_pcb_refcount+0x50>)
 8013454:	2200      	movs	r2, #0
 8013456:	601a      	str	r2, [r3, #0]
  }
}
 8013458:	bf00      	nop
 801345a:	bd80      	pop	{r7, pc}
 801345c:	200089b4 	.word	0x200089b4
 8013460:	0801b6f4 	.word	0x0801b6f4
 8013464:	0801b77c 	.word	0x0801b77c
 8013468:	0801b754 	.word	0x0801b754
 801346c:	200089b0 	.word	0x200089b0

08013470 <dhcp_handle_nak>:
 *
 * @param netif the netif under DHCP control
 */
static void
dhcp_handle_nak(struct netif *netif)
{
 8013470:	b580      	push	{r7, lr}
 8013472:	b084      	sub	sp, #16
 8013474:	af00      	add	r7, sp, #0
 8013476:	6078      	str	r0, [r7, #4]
  struct dhcp *dhcp = netif_dhcp_data(netif);
 8013478:	687b      	ldr	r3, [r7, #4]
 801347a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801347c:	60fb      	str	r3, [r7, #12]

  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("dhcp_handle_nak(netif=%p) %c%c%"U16_F"\n",
              (void *)netif, netif->name[0], netif->name[1], (u16_t)netif->num));
  /* Change to a defined state - set this before assigning the address
     to ensure the callback can use dhcp_supplied_address() */
  dhcp_set_state(dhcp, DHCP_STATE_BACKING_OFF);
 801347e:	210c      	movs	r1, #12
 8013480:	68f8      	ldr	r0, [r7, #12]
 8013482:	f001 f875 	bl	8014570 <dhcp_set_state>
  /* remove IP address from interface (must no longer be used, as per RFC2131) */
  netif_set_addr(netif, IP4_ADDR_ANY4, IP4_ADDR_ANY4, IP4_ADDR_ANY4);
 8013486:	4b06      	ldr	r3, [pc, #24]	; (80134a0 <dhcp_handle_nak+0x30>)
 8013488:	4a05      	ldr	r2, [pc, #20]	; (80134a0 <dhcp_handle_nak+0x30>)
 801348a:	4905      	ldr	r1, [pc, #20]	; (80134a0 <dhcp_handle_nak+0x30>)
 801348c:	6878      	ldr	r0, [r7, #4]
 801348e:	f7f8 f877 	bl	800b580 <netif_set_addr>
  /* We can immediately restart discovery */
  dhcp_discover(netif);
 8013492:	6878      	ldr	r0, [r7, #4]
 8013494:	f000 fc68 	bl	8013d68 <dhcp_discover>
}
 8013498:	bf00      	nop
 801349a:	3710      	adds	r7, #16
 801349c:	46bd      	mov	sp, r7
 801349e:	bd80      	pop	{r7, pc}
 80134a0:	0801c2c4 	.word	0x0801c2c4

080134a4 <dhcp_check>:
 *
 * @param netif the netif under DHCP control
 */
static void
dhcp_check(struct netif *netif)
{
 80134a4:	b580      	push	{r7, lr}
 80134a6:	b084      	sub	sp, #16
 80134a8:	af00      	add	r7, sp, #0
 80134aa:	6078      	str	r0, [r7, #4]
  struct dhcp *dhcp = netif_dhcp_data(netif);
 80134ac:	687b      	ldr	r3, [r7, #4]
 80134ae:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80134b0:	60fb      	str	r3, [r7, #12]
  err_t result;
  u16_t msecs;
  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("dhcp_check(netif=%p) %c%c\n", (void *)netif, (s16_t)netif->name[0],
              (s16_t)netif->name[1]));
  dhcp_set_state(dhcp, DHCP_STATE_CHECKING);
 80134b2:	2108      	movs	r1, #8
 80134b4:	68f8      	ldr	r0, [r7, #12]
 80134b6:	f001 f85b 	bl	8014570 <dhcp_set_state>
  /* create an ARP query for the offered IP address, expecting that no host
     responds, as the IP address should not be in use. */
  result = etharp_query(netif, &dhcp->offered_ip_addr, NULL);
 80134ba:	68fb      	ldr	r3, [r7, #12]
 80134bc:	331c      	adds	r3, #28
 80134be:	2200      	movs	r2, #0
 80134c0:	4619      	mov	r1, r3
 80134c2:	6878      	ldr	r0, [r7, #4]
 80134c4:	f002 fb8c 	bl	8015be0 <etharp_query>
 80134c8:	4603      	mov	r3, r0
 80134ca:	72fb      	strb	r3, [r7, #11]
  if (result != ERR_OK) {
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_WARNING, ("dhcp_check: could not perform ARP query\n"));
  }
  if (dhcp->tries < 255) {
 80134cc:	68fb      	ldr	r3, [r7, #12]
 80134ce:	799b      	ldrb	r3, [r3, #6]
 80134d0:	2bff      	cmp	r3, #255	; 0xff
 80134d2:	d005      	beq.n	80134e0 <dhcp_check+0x3c>
    dhcp->tries++;
 80134d4:	68fb      	ldr	r3, [r7, #12]
 80134d6:	799b      	ldrb	r3, [r3, #6]
 80134d8:	3301      	adds	r3, #1
 80134da:	b2da      	uxtb	r2, r3
 80134dc:	68fb      	ldr	r3, [r7, #12]
 80134de:	719a      	strb	r2, [r3, #6]
  }
  msecs = 500;
 80134e0:	f44f 73fa 	mov.w	r3, #500	; 0x1f4
 80134e4:	813b      	strh	r3, [r7, #8]
  dhcp->request_timeout = (u16_t)((msecs + DHCP_FINE_TIMER_MSECS - 1) / DHCP_FINE_TIMER_MSECS);
 80134e6:	893b      	ldrh	r3, [r7, #8]
 80134e8:	f203 13f3 	addw	r3, r3, #499	; 0x1f3
 80134ec:	4a06      	ldr	r2, [pc, #24]	; (8013508 <dhcp_check+0x64>)
 80134ee:	fb82 1203 	smull	r1, r2, r2, r3
 80134f2:	1152      	asrs	r2, r2, #5
 80134f4:	17db      	asrs	r3, r3, #31
 80134f6:	1ad3      	subs	r3, r2, r3
 80134f8:	b29a      	uxth	r2, r3
 80134fa:	68fb      	ldr	r3, [r7, #12]
 80134fc:	811a      	strh	r2, [r3, #8]
  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("dhcp_check(): set request timeout %"U16_F" msecs\n", msecs));
}
 80134fe:	bf00      	nop
 8013500:	3710      	adds	r7, #16
 8013502:	46bd      	mov	sp, r7
 8013504:	bd80      	pop	{r7, pc}
 8013506:	bf00      	nop
 8013508:	10624dd3 	.word	0x10624dd3

0801350c <dhcp_handle_offer>:
 *
 * @param netif the netif under DHCP control
 */
static void
dhcp_handle_offer(struct netif *netif, struct dhcp_msg *msg_in)
{
 801350c:	b580      	push	{r7, lr}
 801350e:	b084      	sub	sp, #16
 8013510:	af00      	add	r7, sp, #0
 8013512:	6078      	str	r0, [r7, #4]
 8013514:	6039      	str	r1, [r7, #0]
  struct dhcp *dhcp = netif_dhcp_data(netif);
 8013516:	687b      	ldr	r3, [r7, #4]
 8013518:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801351a:	60fb      	str	r3, [r7, #12]

  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("dhcp_handle_offer(netif=%p) %c%c%"U16_F"\n",
              (void *)netif, netif->name[0], netif->name[1], (u16_t)netif->num));
  /* obtain the server address */
  if (dhcp_option_given(dhcp, DHCP_OPTION_IDX_SERVER_ID)) {
 801351c:	4b0c      	ldr	r3, [pc, #48]	; (8013550 <dhcp_handle_offer+0x44>)
 801351e:	789b      	ldrb	r3, [r3, #2]
 8013520:	2b00      	cmp	r3, #0
 8013522:	d011      	beq.n	8013548 <dhcp_handle_offer+0x3c>
    dhcp->request_timeout = 0; /* stop timer */
 8013524:	68fb      	ldr	r3, [r7, #12]
 8013526:	2200      	movs	r2, #0
 8013528:	811a      	strh	r2, [r3, #8]

    ip_addr_set_ip4_u32(&dhcp->server_ip_addr, lwip_htonl(dhcp_get_option_value(dhcp, DHCP_OPTION_IDX_SERVER_ID)));
 801352a:	4b0a      	ldr	r3, [pc, #40]	; (8013554 <dhcp_handle_offer+0x48>)
 801352c:	689b      	ldr	r3, [r3, #8]
 801352e:	4618      	mov	r0, r3
 8013530:	f7f6 fec3 	bl	800a2ba <lwip_htonl>
 8013534:	4602      	mov	r2, r0
 8013536:	68fb      	ldr	r3, [r7, #12]
 8013538:	619a      	str	r2, [r3, #24]
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_STATE, ("dhcp_handle_offer(): server 0x%08"X32_F"\n",
                ip4_addr_get_u32(ip_2_ip4(&dhcp->server_ip_addr))));
    /* remember offered address */
    ip4_addr_copy(dhcp->offered_ip_addr, msg_in->yiaddr);
 801353a:	683b      	ldr	r3, [r7, #0]
 801353c:	691a      	ldr	r2, [r3, #16]
 801353e:	68fb      	ldr	r3, [r7, #12]
 8013540:	61da      	str	r2, [r3, #28]
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_STATE, ("dhcp_handle_offer(): offer for 0x%08"X32_F"\n",
                ip4_addr_get_u32(&dhcp->offered_ip_addr)));

    dhcp_select(netif);
 8013542:	6878      	ldr	r0, [r7, #4]
 8013544:	f000 f808 	bl	8013558 <dhcp_select>
  } else {
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_SERIOUS,
                ("dhcp_handle_offer(netif=%p) did not get server ID!\n", (void *)netif));
  }
}
 8013548:	bf00      	nop
 801354a:	3710      	adds	r7, #16
 801354c:	46bd      	mov	sp, r7
 801354e:	bd80      	pop	{r7, pc}
 8013550:	200089a4 	.word	0x200089a4
 8013554:	2000897c 	.word	0x2000897c

08013558 <dhcp_select>:
 * @param netif the netif under DHCP control
 * @return lwIP specific error (see error.h)
 */
static err_t
dhcp_select(struct netif *netif)
{
 8013558:	b5b0      	push	{r4, r5, r7, lr}
 801355a:	b08a      	sub	sp, #40	; 0x28
 801355c:	af02      	add	r7, sp, #8
 801355e:	6078      	str	r0, [r7, #4]
  u16_t msecs;
  u8_t i;
  struct pbuf *p_out;
  u16_t options_out_len;

  LWIP_ERROR("dhcp_select: netif != NULL", (netif != NULL), return ERR_ARG;);
 8013560:	687b      	ldr	r3, [r7, #4]
 8013562:	2b00      	cmp	r3, #0
 8013564:	d109      	bne.n	801357a <dhcp_select+0x22>
 8013566:	4b71      	ldr	r3, [pc, #452]	; (801372c <dhcp_select+0x1d4>)
 8013568:	f240 1277 	movw	r2, #375	; 0x177
 801356c:	4970      	ldr	r1, [pc, #448]	; (8013730 <dhcp_select+0x1d8>)
 801356e:	4871      	ldr	r0, [pc, #452]	; (8013734 <dhcp_select+0x1dc>)
 8013570:	f004 ff8a 	bl	8018488 <iprintf>
 8013574:	f06f 030f 	mvn.w	r3, #15
 8013578:	e0d3      	b.n	8013722 <dhcp_select+0x1ca>
  dhcp = netif_dhcp_data(netif);
 801357a:	687b      	ldr	r3, [r7, #4]
 801357c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801357e:	61bb      	str	r3, [r7, #24]
  LWIP_ERROR("dhcp_select: dhcp != NULL", (dhcp != NULL), return ERR_VAL;);
 8013580:	69bb      	ldr	r3, [r7, #24]
 8013582:	2b00      	cmp	r3, #0
 8013584:	d109      	bne.n	801359a <dhcp_select+0x42>
 8013586:	4b69      	ldr	r3, [pc, #420]	; (801372c <dhcp_select+0x1d4>)
 8013588:	f240 1279 	movw	r2, #377	; 0x179
 801358c:	496a      	ldr	r1, [pc, #424]	; (8013738 <dhcp_select+0x1e0>)
 801358e:	4869      	ldr	r0, [pc, #420]	; (8013734 <dhcp_select+0x1dc>)
 8013590:	f004 ff7a 	bl	8018488 <iprintf>
 8013594:	f06f 0305 	mvn.w	r3, #5
 8013598:	e0c3      	b.n	8013722 <dhcp_select+0x1ca>

  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("dhcp_select(netif=%p) %c%c%"U16_F"\n", (void *)netif, netif->name[0], netif->name[1], (u16_t)netif->num));
  dhcp_set_state(dhcp, DHCP_STATE_REQUESTING);
 801359a:	2101      	movs	r1, #1
 801359c:	69b8      	ldr	r0, [r7, #24]
 801359e:	f000 ffe7 	bl	8014570 <dhcp_set_state>

  /* create and initialize the DHCP message header */
  p_out = dhcp_create_msg(netif, dhcp, DHCP_REQUEST, &options_out_len);
 80135a2:	f107 030c 	add.w	r3, r7, #12
 80135a6:	2203      	movs	r2, #3
 80135a8:	69b9      	ldr	r1, [r7, #24]
 80135aa:	6878      	ldr	r0, [r7, #4]
 80135ac:	f001 fc9c 	bl	8014ee8 <dhcp_create_msg>
 80135b0:	6178      	str	r0, [r7, #20]
  if (p_out != NULL) {
 80135b2:	697b      	ldr	r3, [r7, #20]
 80135b4:	2b00      	cmp	r3, #0
 80135b6:	f000 8085 	beq.w	80136c4 <dhcp_select+0x16c>
    struct dhcp_msg *msg_out = (struct dhcp_msg *)p_out->payload;
 80135ba:	697b      	ldr	r3, [r7, #20]
 80135bc:	685b      	ldr	r3, [r3, #4]
 80135be:	613b      	str	r3, [r7, #16]
    options_out_len = dhcp_option(options_out_len, msg_out->options, DHCP_OPTION_MAX_MSG_SIZE, DHCP_OPTION_MAX_MSG_SIZE_LEN);
 80135c0:	89b8      	ldrh	r0, [r7, #12]
 80135c2:	693b      	ldr	r3, [r7, #16]
 80135c4:	f103 01f0 	add.w	r1, r3, #240	; 0xf0
 80135c8:	2302      	movs	r3, #2
 80135ca:	2239      	movs	r2, #57	; 0x39
 80135cc:	f000 ffea 	bl	80145a4 <dhcp_option>
 80135d0:	4603      	mov	r3, r0
 80135d2:	81bb      	strh	r3, [r7, #12]
    options_out_len = dhcp_option_short(options_out_len, msg_out->options, DHCP_MAX_MSG_LEN(netif));
 80135d4:	89b8      	ldrh	r0, [r7, #12]
 80135d6:	693b      	ldr	r3, [r7, #16]
 80135d8:	f103 01f0 	add.w	r1, r3, #240	; 0xf0
 80135dc:	687b      	ldr	r3, [r7, #4]
 80135de:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80135e0:	461a      	mov	r2, r3
 80135e2:	f001 f839 	bl	8014658 <dhcp_option_short>
 80135e6:	4603      	mov	r3, r0
 80135e8:	81bb      	strh	r3, [r7, #12]

    /* MUST request the offered IP address */
    options_out_len = dhcp_option(options_out_len, msg_out->options, DHCP_OPTION_REQUESTED_IP, 4);
 80135ea:	89b8      	ldrh	r0, [r7, #12]
 80135ec:	693b      	ldr	r3, [r7, #16]
 80135ee:	f103 01f0 	add.w	r1, r3, #240	; 0xf0
 80135f2:	2304      	movs	r3, #4
 80135f4:	2232      	movs	r2, #50	; 0x32
 80135f6:	f000 ffd5 	bl	80145a4 <dhcp_option>
 80135fa:	4603      	mov	r3, r0
 80135fc:	81bb      	strh	r3, [r7, #12]
    options_out_len = dhcp_option_long(options_out_len, msg_out->options, lwip_ntohl(ip4_addr_get_u32(&dhcp->offered_ip_addr)));
 80135fe:	89bc      	ldrh	r4, [r7, #12]
 8013600:	693b      	ldr	r3, [r7, #16]
 8013602:	f103 05f0 	add.w	r5, r3, #240	; 0xf0
 8013606:	69bb      	ldr	r3, [r7, #24]
 8013608:	69db      	ldr	r3, [r3, #28]
 801360a:	4618      	mov	r0, r3
 801360c:	f7f6 fe55 	bl	800a2ba <lwip_htonl>
 8013610:	4603      	mov	r3, r0
 8013612:	461a      	mov	r2, r3
 8013614:	4629      	mov	r1, r5
 8013616:	4620      	mov	r0, r4
 8013618:	f001 f850 	bl	80146bc <dhcp_option_long>
 801361c:	4603      	mov	r3, r0
 801361e:	81bb      	strh	r3, [r7, #12]

    options_out_len = dhcp_option(options_out_len, msg_out->options, DHCP_OPTION_SERVER_ID, 4);
 8013620:	89b8      	ldrh	r0, [r7, #12]
 8013622:	693b      	ldr	r3, [r7, #16]
 8013624:	f103 01f0 	add.w	r1, r3, #240	; 0xf0
 8013628:	2304      	movs	r3, #4
 801362a:	2236      	movs	r2, #54	; 0x36
 801362c:	f000 ffba 	bl	80145a4 <dhcp_option>
 8013630:	4603      	mov	r3, r0
 8013632:	81bb      	strh	r3, [r7, #12]
    options_out_len = dhcp_option_long(options_out_len, msg_out->options, lwip_ntohl(ip4_addr_get_u32(ip_2_ip4(&dhcp->server_ip_addr))));
 8013634:	89bc      	ldrh	r4, [r7, #12]
 8013636:	693b      	ldr	r3, [r7, #16]
 8013638:	f103 05f0 	add.w	r5, r3, #240	; 0xf0
 801363c:	69bb      	ldr	r3, [r7, #24]
 801363e:	699b      	ldr	r3, [r3, #24]
 8013640:	4618      	mov	r0, r3
 8013642:	f7f6 fe3a 	bl	800a2ba <lwip_htonl>
 8013646:	4603      	mov	r3, r0
 8013648:	461a      	mov	r2, r3
 801364a:	4629      	mov	r1, r5
 801364c:	4620      	mov	r0, r4
 801364e:	f001 f835 	bl	80146bc <dhcp_option_long>
 8013652:	4603      	mov	r3, r0
 8013654:	81bb      	strh	r3, [r7, #12]

    options_out_len = dhcp_option(options_out_len, msg_out->options, DHCP_OPTION_PARAMETER_REQUEST_LIST, LWIP_ARRAYSIZE(dhcp_discover_request_options));
 8013656:	89b8      	ldrh	r0, [r7, #12]
 8013658:	693b      	ldr	r3, [r7, #16]
 801365a:	f103 01f0 	add.w	r1, r3, #240	; 0xf0
 801365e:	2304      	movs	r3, #4
 8013660:	2237      	movs	r2, #55	; 0x37
 8013662:	f000 ff9f 	bl	80145a4 <dhcp_option>
 8013666:	4603      	mov	r3, r0
 8013668:	81bb      	strh	r3, [r7, #12]
    for (i = 0; i < LWIP_ARRAYSIZE(dhcp_discover_request_options); i++) {
 801366a:	2300      	movs	r3, #0
 801366c:	77bb      	strb	r3, [r7, #30]
 801366e:	e00e      	b.n	801368e <dhcp_select+0x136>
      options_out_len = dhcp_option_byte(options_out_len, msg_out->options, dhcp_discover_request_options[i]);
 8013670:	89b8      	ldrh	r0, [r7, #12]
 8013672:	693b      	ldr	r3, [r7, #16]
 8013674:	f103 01f0 	add.w	r1, r3, #240	; 0xf0
 8013678:	7fbb      	ldrb	r3, [r7, #30]
 801367a:	4a30      	ldr	r2, [pc, #192]	; (801373c <dhcp_select+0x1e4>)
 801367c:	5cd3      	ldrb	r3, [r2, r3]
 801367e:	461a      	mov	r2, r3
 8013680:	f000 ffc4 	bl	801460c <dhcp_option_byte>
 8013684:	4603      	mov	r3, r0
 8013686:	81bb      	strh	r3, [r7, #12]
    for (i = 0; i < LWIP_ARRAYSIZE(dhcp_discover_request_options); i++) {
 8013688:	7fbb      	ldrb	r3, [r7, #30]
 801368a:	3301      	adds	r3, #1
 801368c:	77bb      	strb	r3, [r7, #30]
 801368e:	7fbb      	ldrb	r3, [r7, #30]
 8013690:	2b03      	cmp	r3, #3
 8013692:	d9ed      	bls.n	8013670 <dhcp_select+0x118>
#if LWIP_NETIF_HOSTNAME
    options_out_len = dhcp_option_hostname(options_out_len, msg_out->options, netif);
#endif /* LWIP_NETIF_HOSTNAME */

    LWIP_HOOK_DHCP_APPEND_OPTIONS(netif, dhcp, DHCP_STATE_REQUESTING, msg_out, DHCP_REQUEST, &options_out_len);
    dhcp_option_trailer(options_out_len, msg_out->options, p_out);
 8013694:	89b8      	ldrh	r0, [r7, #12]
 8013696:	693b      	ldr	r3, [r7, #16]
 8013698:	33f0      	adds	r3, #240	; 0xf0
 801369a:	697a      	ldr	r2, [r7, #20]
 801369c:	4619      	mov	r1, r3
 801369e:	f001 fcf9 	bl	8015094 <dhcp_option_trailer>

    /* send broadcast to any DHCP server */
    result = udp_sendto_if_src(dhcp_pcb, p_out, IP_ADDR_BROADCAST, LWIP_IANA_PORT_DHCP_SERVER, netif, IP4_ADDR_ANY);
 80136a2:	4b27      	ldr	r3, [pc, #156]	; (8013740 <dhcp_select+0x1e8>)
 80136a4:	6818      	ldr	r0, [r3, #0]
 80136a6:	4b27      	ldr	r3, [pc, #156]	; (8013744 <dhcp_select+0x1ec>)
 80136a8:	9301      	str	r3, [sp, #4]
 80136aa:	687b      	ldr	r3, [r7, #4]
 80136ac:	9300      	str	r3, [sp, #0]
 80136ae:	2343      	movs	r3, #67	; 0x43
 80136b0:	4a25      	ldr	r2, [pc, #148]	; (8013748 <dhcp_select+0x1f0>)
 80136b2:	6979      	ldr	r1, [r7, #20]
 80136b4:	f7ff fbda 	bl	8012e6c <udp_sendto_if_src>
 80136b8:	4603      	mov	r3, r0
 80136ba:	77fb      	strb	r3, [r7, #31]
    pbuf_free(p_out);
 80136bc:	6978      	ldr	r0, [r7, #20]
 80136be:	f7f8 fc3f 	bl	800bf40 <pbuf_free>
 80136c2:	e001      	b.n	80136c8 <dhcp_select+0x170>
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("dhcp_select: REQUESTING\n"));
  } else {
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_WARNING, ("dhcp_select: could not allocate DHCP request\n"));
    result = ERR_MEM;
 80136c4:	23ff      	movs	r3, #255	; 0xff
 80136c6:	77fb      	strb	r3, [r7, #31]
  }
  if (dhcp->tries < 255) {
 80136c8:	69bb      	ldr	r3, [r7, #24]
 80136ca:	799b      	ldrb	r3, [r3, #6]
 80136cc:	2bff      	cmp	r3, #255	; 0xff
 80136ce:	d005      	beq.n	80136dc <dhcp_select+0x184>
    dhcp->tries++;
 80136d0:	69bb      	ldr	r3, [r7, #24]
 80136d2:	799b      	ldrb	r3, [r3, #6]
 80136d4:	3301      	adds	r3, #1
 80136d6:	b2da      	uxtb	r2, r3
 80136d8:	69bb      	ldr	r3, [r7, #24]
 80136da:	719a      	strb	r2, [r3, #6]
  }
  msecs = (u16_t)((dhcp->tries < 6 ? 1 << dhcp->tries : 60) * 1000);
 80136dc:	69bb      	ldr	r3, [r7, #24]
 80136de:	799b      	ldrb	r3, [r3, #6]
 80136e0:	2b05      	cmp	r3, #5
 80136e2:	d80d      	bhi.n	8013700 <dhcp_select+0x1a8>
 80136e4:	69bb      	ldr	r3, [r7, #24]
 80136e6:	799b      	ldrb	r3, [r3, #6]
 80136e8:	461a      	mov	r2, r3
 80136ea:	2301      	movs	r3, #1
 80136ec:	4093      	lsls	r3, r2
 80136ee:	b29b      	uxth	r3, r3
 80136f0:	461a      	mov	r2, r3
 80136f2:	0152      	lsls	r2, r2, #5
 80136f4:	1ad2      	subs	r2, r2, r3
 80136f6:	0092      	lsls	r2, r2, #2
 80136f8:	4413      	add	r3, r2
 80136fa:	00db      	lsls	r3, r3, #3
 80136fc:	b29b      	uxth	r3, r3
 80136fe:	e001      	b.n	8013704 <dhcp_select+0x1ac>
 8013700:	f64e 2360 	movw	r3, #60000	; 0xea60
 8013704:	81fb      	strh	r3, [r7, #14]
  dhcp->request_timeout = (u16_t)((msecs + DHCP_FINE_TIMER_MSECS - 1) / DHCP_FINE_TIMER_MSECS);
 8013706:	89fb      	ldrh	r3, [r7, #14]
 8013708:	f203 13f3 	addw	r3, r3, #499	; 0x1f3
 801370c:	4a0f      	ldr	r2, [pc, #60]	; (801374c <dhcp_select+0x1f4>)
 801370e:	fb82 1203 	smull	r1, r2, r2, r3
 8013712:	1152      	asrs	r2, r2, #5
 8013714:	17db      	asrs	r3, r3, #31
 8013716:	1ad3      	subs	r3, r2, r3
 8013718:	b29a      	uxth	r2, r3
 801371a:	69bb      	ldr	r3, [r7, #24]
 801371c:	811a      	strh	r2, [r3, #8]
  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_STATE, ("dhcp_select(): set request timeout %"U16_F" msecs\n", msecs));
  return result;
 801371e:	f997 301f 	ldrsb.w	r3, [r7, #31]
}
 8013722:	4618      	mov	r0, r3
 8013724:	3720      	adds	r7, #32
 8013726:	46bd      	mov	sp, r7
 8013728:	bdb0      	pop	{r4, r5, r7, pc}
 801372a:	bf00      	nop
 801372c:	0801b6f4 	.word	0x0801b6f4
 8013730:	0801b7a0 	.word	0x0801b7a0
 8013734:	0801b754 	.word	0x0801b754
 8013738:	0801b7bc 	.word	0x0801b7bc
 801373c:	200000b4 	.word	0x200000b4
 8013740:	200089b0 	.word	0x200089b0
 8013744:	0801c2c4 	.word	0x0801c2c4
 8013748:	0801c2c8 	.word	0x0801c2c8
 801374c:	10624dd3 	.word	0x10624dd3

08013750 <dhcp_coarse_tmr>:
 * The DHCP timer that checks for lease renewal/rebind timeouts.
 * Must be called once a minute (see @ref DHCP_COARSE_TIMER_SECS).
 */
void
dhcp_coarse_tmr(void)
{
 8013750:	b580      	push	{r7, lr}
 8013752:	b082      	sub	sp, #8
 8013754:	af00      	add	r7, sp, #0
  struct netif *netif;
  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("dhcp_coarse_tmr()\n"));
  /* iterate through all network interfaces */
  NETIF_FOREACH(netif) {
 8013756:	4b27      	ldr	r3, [pc, #156]	; (80137f4 <dhcp_coarse_tmr+0xa4>)
 8013758:	681b      	ldr	r3, [r3, #0]
 801375a:	607b      	str	r3, [r7, #4]
 801375c:	e042      	b.n	80137e4 <dhcp_coarse_tmr+0x94>
    /* only act on DHCP configured interfaces */
    struct dhcp *dhcp = netif_dhcp_data(netif);
 801375e:	687b      	ldr	r3, [r7, #4]
 8013760:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8013762:	603b      	str	r3, [r7, #0]
    if ((dhcp != NULL) && (dhcp->state != DHCP_STATE_OFF)) {
 8013764:	683b      	ldr	r3, [r7, #0]
 8013766:	2b00      	cmp	r3, #0
 8013768:	d039      	beq.n	80137de <dhcp_coarse_tmr+0x8e>
 801376a:	683b      	ldr	r3, [r7, #0]
 801376c:	795b      	ldrb	r3, [r3, #5]
 801376e:	2b00      	cmp	r3, #0
 8013770:	d035      	beq.n	80137de <dhcp_coarse_tmr+0x8e>
      /* compare lease time to expire timeout */
      if (dhcp->t0_timeout && (++dhcp->lease_used == dhcp->t0_timeout)) {
 8013772:	683b      	ldr	r3, [r7, #0]
 8013774:	8a9b      	ldrh	r3, [r3, #20]
 8013776:	2b00      	cmp	r3, #0
 8013778:	d012      	beq.n	80137a0 <dhcp_coarse_tmr+0x50>
 801377a:	683b      	ldr	r3, [r7, #0]
 801377c:	8a5b      	ldrh	r3, [r3, #18]
 801377e:	3301      	adds	r3, #1
 8013780:	b29a      	uxth	r2, r3
 8013782:	683b      	ldr	r3, [r7, #0]
 8013784:	825a      	strh	r2, [r3, #18]
 8013786:	683b      	ldr	r3, [r7, #0]
 8013788:	8a5a      	ldrh	r2, [r3, #18]
 801378a:	683b      	ldr	r3, [r7, #0]
 801378c:	8a9b      	ldrh	r3, [r3, #20]
 801378e:	429a      	cmp	r2, r3
 8013790:	d106      	bne.n	80137a0 <dhcp_coarse_tmr+0x50>
        LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("dhcp_coarse_tmr(): t0 timeout\n"));
        /* this clients' lease time has expired */
        dhcp_release_and_stop(netif);
 8013792:	6878      	ldr	r0, [r7, #4]
 8013794:	f000 fe52 	bl	801443c <dhcp_release_and_stop>
        dhcp_start(netif);
 8013798:	6878      	ldr	r0, [r7, #4]
 801379a:	f000 f989 	bl	8013ab0 <dhcp_start>
 801379e:	e01e      	b.n	80137de <dhcp_coarse_tmr+0x8e>
        /* timer is active (non zero), and triggers (zeroes) now? */
      } else if (dhcp->t2_rebind_time && (dhcp->t2_rebind_time-- == 1)) {
 80137a0:	683b      	ldr	r3, [r7, #0]
 80137a2:	8a1b      	ldrh	r3, [r3, #16]
 80137a4:	2b00      	cmp	r3, #0
 80137a6:	d00b      	beq.n	80137c0 <dhcp_coarse_tmr+0x70>
 80137a8:	683b      	ldr	r3, [r7, #0]
 80137aa:	8a1b      	ldrh	r3, [r3, #16]
 80137ac:	1e5a      	subs	r2, r3, #1
 80137ae:	b291      	uxth	r1, r2
 80137b0:	683a      	ldr	r2, [r7, #0]
 80137b2:	8211      	strh	r1, [r2, #16]
 80137b4:	2b01      	cmp	r3, #1
 80137b6:	d103      	bne.n	80137c0 <dhcp_coarse_tmr+0x70>
        LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("dhcp_coarse_tmr(): t2 timeout\n"));
        /* this clients' rebind timeout triggered */
        dhcp_t2_timeout(netif);
 80137b8:	6878      	ldr	r0, [r7, #4]
 80137ba:	f000 f8c6 	bl	801394a <dhcp_t2_timeout>
 80137be:	e00e      	b.n	80137de <dhcp_coarse_tmr+0x8e>
        /* timer is active (non zero), and triggers (zeroes) now */
      } else if (dhcp->t1_renew_time && (dhcp->t1_renew_time-- == 1)) {
 80137c0:	683b      	ldr	r3, [r7, #0]
 80137c2:	89db      	ldrh	r3, [r3, #14]
 80137c4:	2b00      	cmp	r3, #0
 80137c6:	d00a      	beq.n	80137de <dhcp_coarse_tmr+0x8e>
 80137c8:	683b      	ldr	r3, [r7, #0]
 80137ca:	89db      	ldrh	r3, [r3, #14]
 80137cc:	1e5a      	subs	r2, r3, #1
 80137ce:	b291      	uxth	r1, r2
 80137d0:	683a      	ldr	r2, [r7, #0]
 80137d2:	81d1      	strh	r1, [r2, #14]
 80137d4:	2b01      	cmp	r3, #1
 80137d6:	d102      	bne.n	80137de <dhcp_coarse_tmr+0x8e>
        LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("dhcp_coarse_tmr(): t1 timeout\n"));
        /* this clients' renewal timeout triggered */
        dhcp_t1_timeout(netif);
 80137d8:	6878      	ldr	r0, [r7, #4]
 80137da:	f000 f888 	bl	80138ee <dhcp_t1_timeout>
  NETIF_FOREACH(netif) {
 80137de:	687b      	ldr	r3, [r7, #4]
 80137e0:	681b      	ldr	r3, [r3, #0]
 80137e2:	607b      	str	r3, [r7, #4]
 80137e4:	687b      	ldr	r3, [r7, #4]
 80137e6:	2b00      	cmp	r3, #0
 80137e8:	d1b9      	bne.n	801375e <dhcp_coarse_tmr+0xe>
      }
    }
  }
}
 80137ea:	bf00      	nop
 80137ec:	bf00      	nop
 80137ee:	3708      	adds	r7, #8
 80137f0:	46bd      	mov	sp, r7
 80137f2:	bd80      	pop	{r7, pc}
 80137f4:	20008910 	.word	0x20008910

080137f8 <dhcp_fine_tmr>:
 * A DHCP server is expected to respond within a short period of time.
 * This timer checks whether an outstanding DHCP request is timed out.
 */
void
dhcp_fine_tmr(void)
{
 80137f8:	b580      	push	{r7, lr}
 80137fa:	b082      	sub	sp, #8
 80137fc:	af00      	add	r7, sp, #0
  struct netif *netif;
  /* loop through netif's */
  NETIF_FOREACH(netif) {
 80137fe:	4b16      	ldr	r3, [pc, #88]	; (8013858 <dhcp_fine_tmr+0x60>)
 8013800:	681b      	ldr	r3, [r3, #0]
 8013802:	607b      	str	r3, [r7, #4]
 8013804:	e020      	b.n	8013848 <dhcp_fine_tmr+0x50>
    struct dhcp *dhcp = netif_dhcp_data(netif);
 8013806:	687b      	ldr	r3, [r7, #4]
 8013808:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801380a:	603b      	str	r3, [r7, #0]
    /* only act on DHCP configured interfaces */
    if (dhcp != NULL) {
 801380c:	683b      	ldr	r3, [r7, #0]
 801380e:	2b00      	cmp	r3, #0
 8013810:	d017      	beq.n	8013842 <dhcp_fine_tmr+0x4a>
      /* timer is active (non zero), and is about to trigger now */
      if (dhcp->request_timeout > 1) {
 8013812:	683b      	ldr	r3, [r7, #0]
 8013814:	891b      	ldrh	r3, [r3, #8]
 8013816:	2b01      	cmp	r3, #1
 8013818:	d906      	bls.n	8013828 <dhcp_fine_tmr+0x30>
        dhcp->request_timeout--;
 801381a:	683b      	ldr	r3, [r7, #0]
 801381c:	891b      	ldrh	r3, [r3, #8]
 801381e:	3b01      	subs	r3, #1
 8013820:	b29a      	uxth	r2, r3
 8013822:	683b      	ldr	r3, [r7, #0]
 8013824:	811a      	strh	r2, [r3, #8]
 8013826:	e00c      	b.n	8013842 <dhcp_fine_tmr+0x4a>
      } else if (dhcp->request_timeout == 1) {
 8013828:	683b      	ldr	r3, [r7, #0]
 801382a:	891b      	ldrh	r3, [r3, #8]
 801382c:	2b01      	cmp	r3, #1
 801382e:	d108      	bne.n	8013842 <dhcp_fine_tmr+0x4a>
        dhcp->request_timeout--;
 8013830:	683b      	ldr	r3, [r7, #0]
 8013832:	891b      	ldrh	r3, [r3, #8]
 8013834:	3b01      	subs	r3, #1
 8013836:	b29a      	uxth	r2, r3
 8013838:	683b      	ldr	r3, [r7, #0]
 801383a:	811a      	strh	r2, [r3, #8]
        /* { dhcp->request_timeout == 0 } */
        LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("dhcp_fine_tmr(): request timeout\n"));
        /* this client's request timeout triggered */
        dhcp_timeout(netif);
 801383c:	6878      	ldr	r0, [r7, #4]
 801383e:	f000 f80d 	bl	801385c <dhcp_timeout>
  NETIF_FOREACH(netif) {
 8013842:	687b      	ldr	r3, [r7, #4]
 8013844:	681b      	ldr	r3, [r3, #0]
 8013846:	607b      	str	r3, [r7, #4]
 8013848:	687b      	ldr	r3, [r7, #4]
 801384a:	2b00      	cmp	r3, #0
 801384c:	d1db      	bne.n	8013806 <dhcp_fine_tmr+0xe>
      }
    }
  }
}
 801384e:	bf00      	nop
 8013850:	bf00      	nop
 8013852:	3708      	adds	r7, #8
 8013854:	46bd      	mov	sp, r7
 8013856:	bd80      	pop	{r7, pc}
 8013858:	20008910 	.word	0x20008910

0801385c <dhcp_timeout>:
 *
 * @param netif the netif under DHCP control
 */
static void
dhcp_timeout(struct netif *netif)
{
 801385c:	b580      	push	{r7, lr}
 801385e:	b084      	sub	sp, #16
 8013860:	af00      	add	r7, sp, #0
 8013862:	6078      	str	r0, [r7, #4]
  struct dhcp *dhcp = netif_dhcp_data(netif);
 8013864:	687b      	ldr	r3, [r7, #4]
 8013866:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8013868:	60fb      	str	r3, [r7, #12]

  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("dhcp_timeout()\n"));
  /* back-off period has passed, or server selection timed out */
  if ((dhcp->state == DHCP_STATE_BACKING_OFF) || (dhcp->state == DHCP_STATE_SELECTING)) {
 801386a:	68fb      	ldr	r3, [r7, #12]
 801386c:	795b      	ldrb	r3, [r3, #5]
 801386e:	2b0c      	cmp	r3, #12
 8013870:	d003      	beq.n	801387a <dhcp_timeout+0x1e>
 8013872:	68fb      	ldr	r3, [r7, #12]
 8013874:	795b      	ldrb	r3, [r3, #5]
 8013876:	2b06      	cmp	r3, #6
 8013878:	d103      	bne.n	8013882 <dhcp_timeout+0x26>
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("dhcp_timeout(): restarting discovery\n"));
    dhcp_discover(netif);
 801387a:	6878      	ldr	r0, [r7, #4]
 801387c:	f000 fa74 	bl	8013d68 <dhcp_discover>
      dhcp_reboot(netif);
    } else {
      dhcp_discover(netif);
    }
  }
}
 8013880:	e031      	b.n	80138e6 <dhcp_timeout+0x8a>
  } else if (dhcp->state == DHCP_STATE_REQUESTING) {
 8013882:	68fb      	ldr	r3, [r7, #12]
 8013884:	795b      	ldrb	r3, [r3, #5]
 8013886:	2b01      	cmp	r3, #1
 8013888:	d10e      	bne.n	80138a8 <dhcp_timeout+0x4c>
    if (dhcp->tries <= 5) {
 801388a:	68fb      	ldr	r3, [r7, #12]
 801388c:	799b      	ldrb	r3, [r3, #6]
 801388e:	2b05      	cmp	r3, #5
 8013890:	d803      	bhi.n	801389a <dhcp_timeout+0x3e>
      dhcp_select(netif);
 8013892:	6878      	ldr	r0, [r7, #4]
 8013894:	f7ff fe60 	bl	8013558 <dhcp_select>
}
 8013898:	e025      	b.n	80138e6 <dhcp_timeout+0x8a>
      dhcp_release_and_stop(netif);
 801389a:	6878      	ldr	r0, [r7, #4]
 801389c:	f000 fdce 	bl	801443c <dhcp_release_and_stop>
      dhcp_start(netif);
 80138a0:	6878      	ldr	r0, [r7, #4]
 80138a2:	f000 f905 	bl	8013ab0 <dhcp_start>
}
 80138a6:	e01e      	b.n	80138e6 <dhcp_timeout+0x8a>
  } else if (dhcp->state == DHCP_STATE_CHECKING) {
 80138a8:	68fb      	ldr	r3, [r7, #12]
 80138aa:	795b      	ldrb	r3, [r3, #5]
 80138ac:	2b08      	cmp	r3, #8
 80138ae:	d10b      	bne.n	80138c8 <dhcp_timeout+0x6c>
    if (dhcp->tries <= 1) {
 80138b0:	68fb      	ldr	r3, [r7, #12]
 80138b2:	799b      	ldrb	r3, [r3, #6]
 80138b4:	2b01      	cmp	r3, #1
 80138b6:	d803      	bhi.n	80138c0 <dhcp_timeout+0x64>
      dhcp_check(netif);
 80138b8:	6878      	ldr	r0, [r7, #4]
 80138ba:	f7ff fdf3 	bl	80134a4 <dhcp_check>
}
 80138be:	e012      	b.n	80138e6 <dhcp_timeout+0x8a>
      dhcp_bind(netif);
 80138c0:	6878      	ldr	r0, [r7, #4]
 80138c2:	f000 faf3 	bl	8013eac <dhcp_bind>
}
 80138c6:	e00e      	b.n	80138e6 <dhcp_timeout+0x8a>
  } else if (dhcp->state == DHCP_STATE_REBOOTING) {
 80138c8:	68fb      	ldr	r3, [r7, #12]
 80138ca:	795b      	ldrb	r3, [r3, #5]
 80138cc:	2b03      	cmp	r3, #3
 80138ce:	d10a      	bne.n	80138e6 <dhcp_timeout+0x8a>
    if (dhcp->tries < REBOOT_TRIES) {
 80138d0:	68fb      	ldr	r3, [r7, #12]
 80138d2:	799b      	ldrb	r3, [r3, #6]
 80138d4:	2b01      	cmp	r3, #1
 80138d6:	d803      	bhi.n	80138e0 <dhcp_timeout+0x84>
      dhcp_reboot(netif);
 80138d8:	6878      	ldr	r0, [r7, #4]
 80138da:	f000 fcf9 	bl	80142d0 <dhcp_reboot>
}
 80138de:	e002      	b.n	80138e6 <dhcp_timeout+0x8a>
      dhcp_discover(netif);
 80138e0:	6878      	ldr	r0, [r7, #4]
 80138e2:	f000 fa41 	bl	8013d68 <dhcp_discover>
}
 80138e6:	bf00      	nop
 80138e8:	3710      	adds	r7, #16
 80138ea:	46bd      	mov	sp, r7
 80138ec:	bd80      	pop	{r7, pc}

080138ee <dhcp_t1_timeout>:
 *
 * @param netif the netif under DHCP control
 */
static void
dhcp_t1_timeout(struct netif *netif)
{
 80138ee:	b580      	push	{r7, lr}
 80138f0:	b084      	sub	sp, #16
 80138f2:	af00      	add	r7, sp, #0
 80138f4:	6078      	str	r0, [r7, #4]
  struct dhcp *dhcp = netif_dhcp_data(netif);
 80138f6:	687b      	ldr	r3, [r7, #4]
 80138f8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80138fa:	60fb      	str	r3, [r7, #12]

  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_STATE, ("dhcp_t1_timeout()\n"));
  if ((dhcp->state == DHCP_STATE_REQUESTING) || (dhcp->state == DHCP_STATE_BOUND) ||
 80138fc:	68fb      	ldr	r3, [r7, #12]
 80138fe:	795b      	ldrb	r3, [r3, #5]
 8013900:	2b01      	cmp	r3, #1
 8013902:	d007      	beq.n	8013914 <dhcp_t1_timeout+0x26>
 8013904:	68fb      	ldr	r3, [r7, #12]
 8013906:	795b      	ldrb	r3, [r3, #5]
 8013908:	2b0a      	cmp	r3, #10
 801390a:	d003      	beq.n	8013914 <dhcp_t1_timeout+0x26>
      (dhcp->state == DHCP_STATE_RENEWING)) {
 801390c:	68fb      	ldr	r3, [r7, #12]
 801390e:	795b      	ldrb	r3, [r3, #5]
  if ((dhcp->state == DHCP_STATE_REQUESTING) || (dhcp->state == DHCP_STATE_BOUND) ||
 8013910:	2b05      	cmp	r3, #5
 8013912:	d116      	bne.n	8013942 <dhcp_t1_timeout+0x54>
     * eventually time-out if renew tries fail. */
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE,
                ("dhcp_t1_timeout(): must renew\n"));
    /* This slightly different to RFC2131: DHCPREQUEST will be sent from state
       DHCP_STATE_RENEWING, not DHCP_STATE_BOUND */
    dhcp_renew(netif);
 8013914:	6878      	ldr	r0, [r7, #4]
 8013916:	f000 fba3 	bl	8014060 <dhcp_renew>
    /* Calculate next timeout */
    if (((dhcp->t2_timeout - dhcp->lease_used) / 2) >= ((60 + DHCP_COARSE_TIMER_SECS / 2) / DHCP_COARSE_TIMER_SECS)) {
 801391a:	68fb      	ldr	r3, [r7, #12]
 801391c:	899b      	ldrh	r3, [r3, #12]
 801391e:	461a      	mov	r2, r3
 8013920:	68fb      	ldr	r3, [r7, #12]
 8013922:	8a5b      	ldrh	r3, [r3, #18]
 8013924:	1ad3      	subs	r3, r2, r3
 8013926:	2b01      	cmp	r3, #1
 8013928:	dd0b      	ble.n	8013942 <dhcp_t1_timeout+0x54>
      dhcp->t1_renew_time = (u16_t)((dhcp->t2_timeout - dhcp->lease_used) / 2);
 801392a:	68fb      	ldr	r3, [r7, #12]
 801392c:	899b      	ldrh	r3, [r3, #12]
 801392e:	461a      	mov	r2, r3
 8013930:	68fb      	ldr	r3, [r7, #12]
 8013932:	8a5b      	ldrh	r3, [r3, #18]
 8013934:	1ad3      	subs	r3, r2, r3
 8013936:	0fda      	lsrs	r2, r3, #31
 8013938:	4413      	add	r3, r2
 801393a:	105b      	asrs	r3, r3, #1
 801393c:	b29a      	uxth	r2, r3
 801393e:	68fb      	ldr	r3, [r7, #12]
 8013940:	81da      	strh	r2, [r3, #14]
    }
  }
}
 8013942:	bf00      	nop
 8013944:	3710      	adds	r7, #16
 8013946:	46bd      	mov	sp, r7
 8013948:	bd80      	pop	{r7, pc}

0801394a <dhcp_t2_timeout>:
 *
 * @param netif the netif under DHCP control
 */
static void
dhcp_t2_timeout(struct netif *netif)
{
 801394a:	b580      	push	{r7, lr}
 801394c:	b084      	sub	sp, #16
 801394e:	af00      	add	r7, sp, #0
 8013950:	6078      	str	r0, [r7, #4]
  struct dhcp *dhcp = netif_dhcp_data(netif);
 8013952:	687b      	ldr	r3, [r7, #4]
 8013954:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8013956:	60fb      	str	r3, [r7, #12]

  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("dhcp_t2_timeout()\n"));
  if ((dhcp->state == DHCP_STATE_REQUESTING) || (dhcp->state == DHCP_STATE_BOUND) ||
 8013958:	68fb      	ldr	r3, [r7, #12]
 801395a:	795b      	ldrb	r3, [r3, #5]
 801395c:	2b01      	cmp	r3, #1
 801395e:	d00b      	beq.n	8013978 <dhcp_t2_timeout+0x2e>
 8013960:	68fb      	ldr	r3, [r7, #12]
 8013962:	795b      	ldrb	r3, [r3, #5]
 8013964:	2b0a      	cmp	r3, #10
 8013966:	d007      	beq.n	8013978 <dhcp_t2_timeout+0x2e>
      (dhcp->state == DHCP_STATE_RENEWING) || (dhcp->state == DHCP_STATE_REBINDING)) {
 8013968:	68fb      	ldr	r3, [r7, #12]
 801396a:	795b      	ldrb	r3, [r3, #5]
  if ((dhcp->state == DHCP_STATE_REQUESTING) || (dhcp->state == DHCP_STATE_BOUND) ||
 801396c:	2b05      	cmp	r3, #5
 801396e:	d003      	beq.n	8013978 <dhcp_t2_timeout+0x2e>
      (dhcp->state == DHCP_STATE_RENEWING) || (dhcp->state == DHCP_STATE_REBINDING)) {
 8013970:	68fb      	ldr	r3, [r7, #12]
 8013972:	795b      	ldrb	r3, [r3, #5]
 8013974:	2b04      	cmp	r3, #4
 8013976:	d116      	bne.n	80139a6 <dhcp_t2_timeout+0x5c>
    /* just retry to rebind */
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE,
                ("dhcp_t2_timeout(): must rebind\n"));
    /* This slightly different to RFC2131: DHCPREQUEST will be sent from state
       DHCP_STATE_REBINDING, not DHCP_STATE_BOUND */
    dhcp_rebind(netif);
 8013978:	6878      	ldr	r0, [r7, #4]
 801397a:	f000 fc0d 	bl	8014198 <dhcp_rebind>
    /* Calculate next timeout */
    if (((dhcp->t0_timeout - dhcp->lease_used) / 2) >= ((60 + DHCP_COARSE_TIMER_SECS / 2) / DHCP_COARSE_TIMER_SECS)) {
 801397e:	68fb      	ldr	r3, [r7, #12]
 8013980:	8a9b      	ldrh	r3, [r3, #20]
 8013982:	461a      	mov	r2, r3
 8013984:	68fb      	ldr	r3, [r7, #12]
 8013986:	8a5b      	ldrh	r3, [r3, #18]
 8013988:	1ad3      	subs	r3, r2, r3
 801398a:	2b01      	cmp	r3, #1
 801398c:	dd0b      	ble.n	80139a6 <dhcp_t2_timeout+0x5c>
      dhcp->t2_rebind_time = (u16_t)((dhcp->t0_timeout - dhcp->lease_used) / 2);
 801398e:	68fb      	ldr	r3, [r7, #12]
 8013990:	8a9b      	ldrh	r3, [r3, #20]
 8013992:	461a      	mov	r2, r3
 8013994:	68fb      	ldr	r3, [r7, #12]
 8013996:	8a5b      	ldrh	r3, [r3, #18]
 8013998:	1ad3      	subs	r3, r2, r3
 801399a:	0fda      	lsrs	r2, r3, #31
 801399c:	4413      	add	r3, r2
 801399e:	105b      	asrs	r3, r3, #1
 80139a0:	b29a      	uxth	r2, r3
 80139a2:	68fb      	ldr	r3, [r7, #12]
 80139a4:	821a      	strh	r2, [r3, #16]
    }
  }
}
 80139a6:	bf00      	nop
 80139a8:	3710      	adds	r7, #16
 80139aa:	46bd      	mov	sp, r7
 80139ac:	bd80      	pop	{r7, pc}
	...

080139b0 <dhcp_handle_ack>:
 *
 * @param netif the netif under DHCP control
 */
static void
dhcp_handle_ack(struct netif *netif, struct dhcp_msg *msg_in)
{
 80139b0:	b580      	push	{r7, lr}
 80139b2:	b086      	sub	sp, #24
 80139b4:	af00      	add	r7, sp, #0
 80139b6:	6078      	str	r0, [r7, #4]
 80139b8:	6039      	str	r1, [r7, #0]
  struct dhcp *dhcp = netif_dhcp_data(netif);
 80139ba:	687b      	ldr	r3, [r7, #4]
 80139bc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80139be:	613b      	str	r3, [r7, #16]
#if LWIP_DHCP_GET_NTP_SRV
  ip4_addr_t ntp_server_addrs[LWIP_DHCP_MAX_NTP_SERVERS];
#endif

  /* clear options we might not get from the ACK */
  ip4_addr_set_zero(&dhcp->offered_sn_mask);
 80139c0:	693b      	ldr	r3, [r7, #16]
 80139c2:	2200      	movs	r2, #0
 80139c4:	621a      	str	r2, [r3, #32]
  ip4_addr_set_zero(&dhcp->offered_gw_addr);
 80139c6:	693b      	ldr	r3, [r7, #16]
 80139c8:	2200      	movs	r2, #0
 80139ca:	625a      	str	r2, [r3, #36]	; 0x24
#if LWIP_DHCP_BOOTP_FILE
  ip4_addr_set_zero(&dhcp->offered_si_addr);
#endif /* LWIP_DHCP_BOOTP_FILE */

  /* lease time given? */
  if (dhcp_option_given(dhcp, DHCP_OPTION_IDX_LEASE_TIME)) {
 80139cc:	4b36      	ldr	r3, [pc, #216]	; (8013aa8 <dhcp_handle_ack+0xf8>)
 80139ce:	78db      	ldrb	r3, [r3, #3]
 80139d0:	2b00      	cmp	r3, #0
 80139d2:	d003      	beq.n	80139dc <dhcp_handle_ack+0x2c>
    /* remember offered lease time */
    dhcp->offered_t0_lease = dhcp_get_option_value(dhcp, DHCP_OPTION_IDX_LEASE_TIME);
 80139d4:	4b35      	ldr	r3, [pc, #212]	; (8013aac <dhcp_handle_ack+0xfc>)
 80139d6:	68da      	ldr	r2, [r3, #12]
 80139d8:	693b      	ldr	r3, [r7, #16]
 80139da:	629a      	str	r2, [r3, #40]	; 0x28
  }
  /* renewal period given? */
  if (dhcp_option_given(dhcp, DHCP_OPTION_IDX_T1)) {
 80139dc:	4b32      	ldr	r3, [pc, #200]	; (8013aa8 <dhcp_handle_ack+0xf8>)
 80139de:	791b      	ldrb	r3, [r3, #4]
 80139e0:	2b00      	cmp	r3, #0
 80139e2:	d004      	beq.n	80139ee <dhcp_handle_ack+0x3e>
    /* remember given renewal period */
    dhcp->offered_t1_renew = dhcp_get_option_value(dhcp, DHCP_OPTION_IDX_T1);
 80139e4:	4b31      	ldr	r3, [pc, #196]	; (8013aac <dhcp_handle_ack+0xfc>)
 80139e6:	691a      	ldr	r2, [r3, #16]
 80139e8:	693b      	ldr	r3, [r7, #16]
 80139ea:	62da      	str	r2, [r3, #44]	; 0x2c
 80139ec:	e004      	b.n	80139f8 <dhcp_handle_ack+0x48>
  } else {
    /* calculate safe periods for renewal */
    dhcp->offered_t1_renew = dhcp->offered_t0_lease / 2;
 80139ee:	693b      	ldr	r3, [r7, #16]
 80139f0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80139f2:	085a      	lsrs	r2, r3, #1
 80139f4:	693b      	ldr	r3, [r7, #16]
 80139f6:	62da      	str	r2, [r3, #44]	; 0x2c
  }

  /* renewal period given? */
  if (dhcp_option_given(dhcp, DHCP_OPTION_IDX_T2)) {
 80139f8:	4b2b      	ldr	r3, [pc, #172]	; (8013aa8 <dhcp_handle_ack+0xf8>)
 80139fa:	795b      	ldrb	r3, [r3, #5]
 80139fc:	2b00      	cmp	r3, #0
 80139fe:	d004      	beq.n	8013a0a <dhcp_handle_ack+0x5a>
    /* remember given rebind period */
    dhcp->offered_t2_rebind = dhcp_get_option_value(dhcp, DHCP_OPTION_IDX_T2);
 8013a00:	4b2a      	ldr	r3, [pc, #168]	; (8013aac <dhcp_handle_ack+0xfc>)
 8013a02:	695a      	ldr	r2, [r3, #20]
 8013a04:	693b      	ldr	r3, [r7, #16]
 8013a06:	631a      	str	r2, [r3, #48]	; 0x30
 8013a08:	e007      	b.n	8013a1a <dhcp_handle_ack+0x6a>
  } else {
    /* calculate safe periods for rebinding (offered_t0_lease * 0.875 -> 87.5%)*/
    dhcp->offered_t2_rebind = (dhcp->offered_t0_lease * 7U) / 8U;
 8013a0a:	693b      	ldr	r3, [r7, #16]
 8013a0c:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8013a0e:	4613      	mov	r3, r2
 8013a10:	00db      	lsls	r3, r3, #3
 8013a12:	1a9b      	subs	r3, r3, r2
 8013a14:	08da      	lsrs	r2, r3, #3
 8013a16:	693b      	ldr	r3, [r7, #16]
 8013a18:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* (y)our internet address */
  ip4_addr_copy(dhcp->offered_ip_addr, msg_in->yiaddr);
 8013a1a:	683b      	ldr	r3, [r7, #0]
 8013a1c:	691a      	ldr	r2, [r3, #16]
 8013a1e:	693b      	ldr	r3, [r7, #16]
 8013a20:	61da      	str	r2, [r3, #28]
     boot file name copied in dhcp_parse_reply if not overloaded */
  ip4_addr_copy(dhcp->offered_si_addr, msg_in->siaddr);
#endif /* LWIP_DHCP_BOOTP_FILE */

  /* subnet mask given? */
  if (dhcp_option_given(dhcp, DHCP_OPTION_IDX_SUBNET_MASK)) {
 8013a22:	4b21      	ldr	r3, [pc, #132]	; (8013aa8 <dhcp_handle_ack+0xf8>)
 8013a24:	799b      	ldrb	r3, [r3, #6]
 8013a26:	2b00      	cmp	r3, #0
 8013a28:	d00b      	beq.n	8013a42 <dhcp_handle_ack+0x92>
    /* remember given subnet mask */
    ip4_addr_set_u32(&dhcp->offered_sn_mask, lwip_htonl(dhcp_get_option_value(dhcp, DHCP_OPTION_IDX_SUBNET_MASK)));
 8013a2a:	4b20      	ldr	r3, [pc, #128]	; (8013aac <dhcp_handle_ack+0xfc>)
 8013a2c:	699b      	ldr	r3, [r3, #24]
 8013a2e:	4618      	mov	r0, r3
 8013a30:	f7f6 fc43 	bl	800a2ba <lwip_htonl>
 8013a34:	4602      	mov	r2, r0
 8013a36:	693b      	ldr	r3, [r7, #16]
 8013a38:	621a      	str	r2, [r3, #32]
    dhcp->subnet_mask_given = 1;
 8013a3a:	693b      	ldr	r3, [r7, #16]
 8013a3c:	2201      	movs	r2, #1
 8013a3e:	71da      	strb	r2, [r3, #7]
 8013a40:	e002      	b.n	8013a48 <dhcp_handle_ack+0x98>
  } else {
    dhcp->subnet_mask_given = 0;
 8013a42:	693b      	ldr	r3, [r7, #16]
 8013a44:	2200      	movs	r2, #0
 8013a46:	71da      	strb	r2, [r3, #7]
  }

  /* gateway router */
  if (dhcp_option_given(dhcp, DHCP_OPTION_IDX_ROUTER)) {
 8013a48:	4b17      	ldr	r3, [pc, #92]	; (8013aa8 <dhcp_handle_ack+0xf8>)
 8013a4a:	79db      	ldrb	r3, [r3, #7]
 8013a4c:	2b00      	cmp	r3, #0
 8013a4e:	d007      	beq.n	8013a60 <dhcp_handle_ack+0xb0>
    ip4_addr_set_u32(&dhcp->offered_gw_addr, lwip_htonl(dhcp_get_option_value(dhcp, DHCP_OPTION_IDX_ROUTER)));
 8013a50:	4b16      	ldr	r3, [pc, #88]	; (8013aac <dhcp_handle_ack+0xfc>)
 8013a52:	69db      	ldr	r3, [r3, #28]
 8013a54:	4618      	mov	r0, r3
 8013a56:	f7f6 fc30 	bl	800a2ba <lwip_htonl>
 8013a5a:	4602      	mov	r2, r0
 8013a5c:	693b      	ldr	r3, [r7, #16]
 8013a5e:	625a      	str	r2, [r3, #36]	; 0x24
  dhcp_set_ntp_servers(n, ntp_server_addrs);
#endif /* LWIP_DHCP_GET_NTP_SRV */

#if LWIP_DHCP_PROVIDE_DNS_SERVERS
  /* DNS servers */
  for (n = 0; (n < LWIP_DHCP_PROVIDE_DNS_SERVERS) && dhcp_option_given(dhcp, DHCP_OPTION_IDX_DNS_SERVER + n); n++) {
 8013a60:	2300      	movs	r3, #0
 8013a62:	75fb      	strb	r3, [r7, #23]
 8013a64:	e013      	b.n	8013a8e <dhcp_handle_ack+0xde>
    ip_addr_t dns_addr;
    ip_addr_set_ip4_u32_val(dns_addr, lwip_htonl(dhcp_get_option_value(dhcp, DHCP_OPTION_IDX_DNS_SERVER + n)));
 8013a66:	7dfb      	ldrb	r3, [r7, #23]
 8013a68:	3308      	adds	r3, #8
 8013a6a:	4a10      	ldr	r2, [pc, #64]	; (8013aac <dhcp_handle_ack+0xfc>)
 8013a6c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8013a70:	4618      	mov	r0, r3
 8013a72:	f7f6 fc22 	bl	800a2ba <lwip_htonl>
 8013a76:	4603      	mov	r3, r0
 8013a78:	60fb      	str	r3, [r7, #12]
    dns_setserver(n, &dns_addr);
 8013a7a:	f107 020c 	add.w	r2, r7, #12
 8013a7e:	7dfb      	ldrb	r3, [r7, #23]
 8013a80:	4611      	mov	r1, r2
 8013a82:	4618      	mov	r0, r3
 8013a84:	f7f6 fc3a 	bl	800a2fc <dns_setserver>
  for (n = 0; (n < LWIP_DHCP_PROVIDE_DNS_SERVERS) && dhcp_option_given(dhcp, DHCP_OPTION_IDX_DNS_SERVER + n); n++) {
 8013a88:	7dfb      	ldrb	r3, [r7, #23]
 8013a8a:	3301      	adds	r3, #1
 8013a8c:	75fb      	strb	r3, [r7, #23]
 8013a8e:	7dfb      	ldrb	r3, [r7, #23]
 8013a90:	2b01      	cmp	r3, #1
 8013a92:	d805      	bhi.n	8013aa0 <dhcp_handle_ack+0xf0>
 8013a94:	7dfb      	ldrb	r3, [r7, #23]
 8013a96:	3308      	adds	r3, #8
 8013a98:	4a03      	ldr	r2, [pc, #12]	; (8013aa8 <dhcp_handle_ack+0xf8>)
 8013a9a:	5cd3      	ldrb	r3, [r2, r3]
 8013a9c:	2b00      	cmp	r3, #0
 8013a9e:	d1e2      	bne.n	8013a66 <dhcp_handle_ack+0xb6>
  }
#endif /* LWIP_DHCP_PROVIDE_DNS_SERVERS */
}
 8013aa0:	bf00      	nop
 8013aa2:	3718      	adds	r7, #24
 8013aa4:	46bd      	mov	sp, r7
 8013aa6:	bd80      	pop	{r7, pc}
 8013aa8:	200089a4 	.word	0x200089a4
 8013aac:	2000897c 	.word	0x2000897c

08013ab0 <dhcp_start>:
 * - ERR_OK - No error
 * - ERR_MEM - Out of memory
 */
err_t
dhcp_start(struct netif *netif)
{
 8013ab0:	b580      	push	{r7, lr}
 8013ab2:	b084      	sub	sp, #16
 8013ab4:	af00      	add	r7, sp, #0
 8013ab6:	6078      	str	r0, [r7, #4]
  struct dhcp *dhcp;
  err_t result;

  LWIP_ASSERT_CORE_LOCKED();
  LWIP_ERROR("netif != NULL", (netif != NULL), return ERR_ARG;);
 8013ab8:	687b      	ldr	r3, [r7, #4]
 8013aba:	2b00      	cmp	r3, #0
 8013abc:	d109      	bne.n	8013ad2 <dhcp_start+0x22>
 8013abe:	4b37      	ldr	r3, [pc, #220]	; (8013b9c <dhcp_start+0xec>)
 8013ac0:	f240 22e7 	movw	r2, #743	; 0x2e7
 8013ac4:	4936      	ldr	r1, [pc, #216]	; (8013ba0 <dhcp_start+0xf0>)
 8013ac6:	4837      	ldr	r0, [pc, #220]	; (8013ba4 <dhcp_start+0xf4>)
 8013ac8:	f004 fcde 	bl	8018488 <iprintf>
 8013acc:	f06f 030f 	mvn.w	r3, #15
 8013ad0:	e060      	b.n	8013b94 <dhcp_start+0xe4>
  LWIP_ERROR("netif is not up, old style port?", netif_is_up(netif), return ERR_ARG;);
 8013ad2:	687b      	ldr	r3, [r7, #4]
 8013ad4:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 8013ad8:	f003 0301 	and.w	r3, r3, #1
 8013adc:	2b00      	cmp	r3, #0
 8013ade:	d109      	bne.n	8013af4 <dhcp_start+0x44>
 8013ae0:	4b2e      	ldr	r3, [pc, #184]	; (8013b9c <dhcp_start+0xec>)
 8013ae2:	f44f 723a 	mov.w	r2, #744	; 0x2e8
 8013ae6:	4930      	ldr	r1, [pc, #192]	; (8013ba8 <dhcp_start+0xf8>)
 8013ae8:	482e      	ldr	r0, [pc, #184]	; (8013ba4 <dhcp_start+0xf4>)
 8013aea:	f004 fccd 	bl	8018488 <iprintf>
 8013aee:	f06f 030f 	mvn.w	r3, #15
 8013af2:	e04f      	b.n	8013b94 <dhcp_start+0xe4>
  dhcp = netif_dhcp_data(netif);
 8013af4:	687b      	ldr	r3, [r7, #4]
 8013af6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8013af8:	60fb      	str	r3, [r7, #12]
  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("dhcp_start(netif=%p) %c%c%"U16_F"\n", (void *)netif, netif->name[0], netif->name[1], (u16_t)netif->num));

  /* check MTU of the netif */
  if (netif->mtu < DHCP_MAX_MSG_LEN_MIN_REQUIRED) {
 8013afa:	687b      	ldr	r3, [r7, #4]
 8013afc:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8013afe:	f5b3 7f10 	cmp.w	r3, #576	; 0x240
 8013b02:	d202      	bcs.n	8013b0a <dhcp_start+0x5a>
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("dhcp_start(): Cannot use this netif with DHCP: MTU is too small\n"));
    return ERR_MEM;
 8013b04:	f04f 33ff 	mov.w	r3, #4294967295
 8013b08:	e044      	b.n	8013b94 <dhcp_start+0xe4>
  }

  /* no DHCP client attached yet? */
  if (dhcp == NULL) {
 8013b0a:	68fb      	ldr	r3, [r7, #12]
 8013b0c:	2b00      	cmp	r3, #0
 8013b0e:	d10d      	bne.n	8013b2c <dhcp_start+0x7c>
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("dhcp_start(): mallocing new DHCP client\n"));
    dhcp = (struct dhcp *)mem_malloc(sizeof(struct dhcp));
 8013b10:	2034      	movs	r0, #52	; 0x34
 8013b12:	f7f7 f993 	bl	800ae3c <mem_malloc>
 8013b16:	60f8      	str	r0, [r7, #12]
    if (dhcp == NULL) {
 8013b18:	68fb      	ldr	r3, [r7, #12]
 8013b1a:	2b00      	cmp	r3, #0
 8013b1c:	d102      	bne.n	8013b24 <dhcp_start+0x74>
      LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("dhcp_start(): could not allocate dhcp\n"));
      return ERR_MEM;
 8013b1e:	f04f 33ff 	mov.w	r3, #4294967295
 8013b22:	e037      	b.n	8013b94 <dhcp_start+0xe4>
    }

    /* store this dhcp client in the netif */
    netif_set_client_data(netif, LWIP_NETIF_CLIENT_DATA_INDEX_DHCP, dhcp);
 8013b24:	687b      	ldr	r3, [r7, #4]
 8013b26:	68fa      	ldr	r2, [r7, #12]
 8013b28:	625a      	str	r2, [r3, #36]	; 0x24
 8013b2a:	e005      	b.n	8013b38 <dhcp_start+0x88>
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("dhcp_start(): allocated dhcp"));
    /* already has DHCP client attached */
  } else {
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("dhcp_start(): restarting DHCP configuration\n"));

    if (dhcp->pcb_allocated != 0) {
 8013b2c:	68fb      	ldr	r3, [r7, #12]
 8013b2e:	791b      	ldrb	r3, [r3, #4]
 8013b30:	2b00      	cmp	r3, #0
 8013b32:	d001      	beq.n	8013b38 <dhcp_start+0x88>
      dhcp_dec_pcb_refcount(); /* free DHCP PCB if not needed any more */
 8013b34:	f7ff fc72 	bl	801341c <dhcp_dec_pcb_refcount>
    }
    /* dhcp is cleared below, no need to reset flag*/
  }

  /* clear data structure */
  memset(dhcp, 0, sizeof(struct dhcp));
 8013b38:	2234      	movs	r2, #52	; 0x34
 8013b3a:	2100      	movs	r1, #0
 8013b3c:	68f8      	ldr	r0, [r7, #12]
 8013b3e:	f004 fd08 	bl	8018552 <memset>
  /* dhcp_set_state(&dhcp, DHCP_STATE_OFF); */

  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("dhcp_start(): starting DHCP configuration\n"));

  if (dhcp_inc_pcb_refcount() != ERR_OK) { /* ensure DHCP PCB is allocated */
 8013b42:	f7ff fc19 	bl	8013378 <dhcp_inc_pcb_refcount>
 8013b46:	4603      	mov	r3, r0
 8013b48:	2b00      	cmp	r3, #0
 8013b4a:	d002      	beq.n	8013b52 <dhcp_start+0xa2>
    return ERR_MEM;
 8013b4c:	f04f 33ff 	mov.w	r3, #4294967295
 8013b50:	e020      	b.n	8013b94 <dhcp_start+0xe4>
  }
  dhcp->pcb_allocated = 1;
 8013b52:	68fb      	ldr	r3, [r7, #12]
 8013b54:	2201      	movs	r2, #1
 8013b56:	711a      	strb	r2, [r3, #4]

  if (!netif_is_link_up(netif)) {
 8013b58:	687b      	ldr	r3, [r7, #4]
 8013b5a:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 8013b5e:	f003 0304 	and.w	r3, r3, #4
 8013b62:	2b00      	cmp	r3, #0
 8013b64:	d105      	bne.n	8013b72 <dhcp_start+0xc2>
    /* set state INIT and wait for dhcp_network_changed() to call dhcp_discover() */
    dhcp_set_state(dhcp, DHCP_STATE_INIT);
 8013b66:	2102      	movs	r1, #2
 8013b68:	68f8      	ldr	r0, [r7, #12]
 8013b6a:	f000 fd01 	bl	8014570 <dhcp_set_state>
    return ERR_OK;
 8013b6e:	2300      	movs	r3, #0
 8013b70:	e010      	b.n	8013b94 <dhcp_start+0xe4>
  }

  /* (re)start the DHCP negotiation */
  result = dhcp_discover(netif);
 8013b72:	6878      	ldr	r0, [r7, #4]
 8013b74:	f000 f8f8 	bl	8013d68 <dhcp_discover>
 8013b78:	4603      	mov	r3, r0
 8013b7a:	72fb      	strb	r3, [r7, #11]
  if (result != ERR_OK) {
 8013b7c:	f997 300b 	ldrsb.w	r3, [r7, #11]
 8013b80:	2b00      	cmp	r3, #0
 8013b82:	d005      	beq.n	8013b90 <dhcp_start+0xe0>
    /* free resources allocated above */
    dhcp_release_and_stop(netif);
 8013b84:	6878      	ldr	r0, [r7, #4]
 8013b86:	f000 fc59 	bl	801443c <dhcp_release_and_stop>
    return ERR_MEM;
 8013b8a:	f04f 33ff 	mov.w	r3, #4294967295
 8013b8e:	e001      	b.n	8013b94 <dhcp_start+0xe4>
  }
  return result;
 8013b90:	f997 300b 	ldrsb.w	r3, [r7, #11]
}
 8013b94:	4618      	mov	r0, r3
 8013b96:	3710      	adds	r7, #16
 8013b98:	46bd      	mov	sp, r7
 8013b9a:	bd80      	pop	{r7, pc}
 8013b9c:	0801b6f4 	.word	0x0801b6f4
 8013ba0:	0801b7d8 	.word	0x0801b7d8
 8013ba4:	0801b754 	.word	0x0801b754
 8013ba8:	0801b81c 	.word	0x0801b81c

08013bac <dhcp_network_changed>:
 * This enters the REBOOTING state to verify that the currently bound
 * address is still valid.
 */
void
dhcp_network_changed(struct netif *netif)
{
 8013bac:	b580      	push	{r7, lr}
 8013bae:	b084      	sub	sp, #16
 8013bb0:	af00      	add	r7, sp, #0
 8013bb2:	6078      	str	r0, [r7, #4]
  struct dhcp *dhcp = netif_dhcp_data(netif);
 8013bb4:	687b      	ldr	r3, [r7, #4]
 8013bb6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8013bb8:	60fb      	str	r3, [r7, #12]

  if (!dhcp) {
 8013bba:	68fb      	ldr	r3, [r7, #12]
 8013bbc:	2b00      	cmp	r3, #0
 8013bbe:	d025      	beq.n	8013c0c <dhcp_network_changed+0x60>
    return;
  }
  switch (dhcp->state) {
 8013bc0:	68fb      	ldr	r3, [r7, #12]
 8013bc2:	795b      	ldrb	r3, [r3, #5]
 8013bc4:	2b0a      	cmp	r3, #10
 8013bc6:	d008      	beq.n	8013bda <dhcp_network_changed+0x2e>
 8013bc8:	2b0a      	cmp	r3, #10
 8013bca:	dc0d      	bgt.n	8013be8 <dhcp_network_changed+0x3c>
 8013bcc:	2b00      	cmp	r3, #0
 8013bce:	d01f      	beq.n	8013c10 <dhcp_network_changed+0x64>
 8013bd0:	2b00      	cmp	r3, #0
 8013bd2:	db09      	blt.n	8013be8 <dhcp_network_changed+0x3c>
 8013bd4:	3b03      	subs	r3, #3
 8013bd6:	2b02      	cmp	r3, #2
 8013bd8:	d806      	bhi.n	8013be8 <dhcp_network_changed+0x3c>
    case DHCP_STATE_REBINDING:
    case DHCP_STATE_RENEWING:
    case DHCP_STATE_BOUND:
    case DHCP_STATE_REBOOTING:
      dhcp->tries = 0;
 8013bda:	68fb      	ldr	r3, [r7, #12]
 8013bdc:	2200      	movs	r2, #0
 8013bde:	719a      	strb	r2, [r3, #6]
      dhcp_reboot(netif);
 8013be0:	6878      	ldr	r0, [r7, #4]
 8013be2:	f000 fb75 	bl	80142d0 <dhcp_reboot>
      break;
 8013be6:	e014      	b.n	8013c12 <dhcp_network_changed+0x66>
    case DHCP_STATE_OFF:
      /* stay off */
      break;
    default:
      LWIP_ASSERT("invalid dhcp->state", dhcp->state <= DHCP_STATE_BACKING_OFF);
 8013be8:	68fb      	ldr	r3, [r7, #12]
 8013bea:	795b      	ldrb	r3, [r3, #5]
 8013bec:	2b0c      	cmp	r3, #12
 8013bee:	d906      	bls.n	8013bfe <dhcp_network_changed+0x52>
 8013bf0:	4b09      	ldr	r3, [pc, #36]	; (8013c18 <dhcp_network_changed+0x6c>)
 8013bf2:	f240 326d 	movw	r2, #877	; 0x36d
 8013bf6:	4909      	ldr	r1, [pc, #36]	; (8013c1c <dhcp_network_changed+0x70>)
 8013bf8:	4809      	ldr	r0, [pc, #36]	; (8013c20 <dhcp_network_changed+0x74>)
 8013bfa:	f004 fc45 	bl	8018488 <iprintf>
        autoip_stop(netif);
        dhcp->autoip_coop_state = DHCP_AUTOIP_COOP_STATE_OFF;
      }
#endif /* LWIP_DHCP_AUTOIP_COOP */
      /* ensure we start with short timeouts, even if already discovering */
      dhcp->tries = 0;
 8013bfe:	68fb      	ldr	r3, [r7, #12]
 8013c00:	2200      	movs	r2, #0
 8013c02:	719a      	strb	r2, [r3, #6]
      dhcp_discover(netif);
 8013c04:	6878      	ldr	r0, [r7, #4]
 8013c06:	f000 f8af 	bl	8013d68 <dhcp_discover>
      break;
 8013c0a:	e002      	b.n	8013c12 <dhcp_network_changed+0x66>
    return;
 8013c0c:	bf00      	nop
 8013c0e:	e000      	b.n	8013c12 <dhcp_network_changed+0x66>
      break;
 8013c10:	bf00      	nop
  }
}
 8013c12:	3710      	adds	r7, #16
 8013c14:	46bd      	mov	sp, r7
 8013c16:	bd80      	pop	{r7, pc}
 8013c18:	0801b6f4 	.word	0x0801b6f4
 8013c1c:	0801b840 	.word	0x0801b840
 8013c20:	0801b754 	.word	0x0801b754

08013c24 <dhcp_arp_reply>:
 * @param netif the network interface on which the reply was received
 * @param addr The IP address we received a reply from
 */
void
dhcp_arp_reply(struct netif *netif, const ip4_addr_t *addr)
{
 8013c24:	b580      	push	{r7, lr}
 8013c26:	b084      	sub	sp, #16
 8013c28:	af00      	add	r7, sp, #0
 8013c2a:	6078      	str	r0, [r7, #4]
 8013c2c:	6039      	str	r1, [r7, #0]
  struct dhcp *dhcp;

  LWIP_ERROR("netif != NULL", (netif != NULL), return;);
 8013c2e:	687b      	ldr	r3, [r7, #4]
 8013c30:	2b00      	cmp	r3, #0
 8013c32:	d107      	bne.n	8013c44 <dhcp_arp_reply+0x20>
 8013c34:	4b0e      	ldr	r3, [pc, #56]	; (8013c70 <dhcp_arp_reply+0x4c>)
 8013c36:	f240 328b 	movw	r2, #907	; 0x38b
 8013c3a:	490e      	ldr	r1, [pc, #56]	; (8013c74 <dhcp_arp_reply+0x50>)
 8013c3c:	480e      	ldr	r0, [pc, #56]	; (8013c78 <dhcp_arp_reply+0x54>)
 8013c3e:	f004 fc23 	bl	8018488 <iprintf>
 8013c42:	e012      	b.n	8013c6a <dhcp_arp_reply+0x46>
  dhcp = netif_dhcp_data(netif);
 8013c44:	687b      	ldr	r3, [r7, #4]
 8013c46:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8013c48:	60fb      	str	r3, [r7, #12]
  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("dhcp_arp_reply()\n"));
  /* is a DHCP client doing an ARP check? */
  if ((dhcp != NULL) && (dhcp->state == DHCP_STATE_CHECKING)) {
 8013c4a:	68fb      	ldr	r3, [r7, #12]
 8013c4c:	2b00      	cmp	r3, #0
 8013c4e:	d00c      	beq.n	8013c6a <dhcp_arp_reply+0x46>
 8013c50:	68fb      	ldr	r3, [r7, #12]
 8013c52:	795b      	ldrb	r3, [r3, #5]
 8013c54:	2b08      	cmp	r3, #8
 8013c56:	d108      	bne.n	8013c6a <dhcp_arp_reply+0x46>
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("dhcp_arp_reply(): CHECKING, arp reply for 0x%08"X32_F"\n",
                ip4_addr_get_u32(addr)));
    /* did a host respond with the address we
       were offered by the DHCP server? */
    if (ip4_addr_cmp(addr, &dhcp->offered_ip_addr)) {
 8013c58:	683b      	ldr	r3, [r7, #0]
 8013c5a:	681a      	ldr	r2, [r3, #0]
 8013c5c:	68fb      	ldr	r3, [r7, #12]
 8013c5e:	69db      	ldr	r3, [r3, #28]
 8013c60:	429a      	cmp	r2, r3
 8013c62:	d102      	bne.n	8013c6a <dhcp_arp_reply+0x46>
      /* we will not accept the offered address */
      LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE | LWIP_DBG_LEVEL_WARNING,
                  ("dhcp_arp_reply(): arp reply matched with offered address, declining\n"));
      dhcp_decline(netif);
 8013c64:	6878      	ldr	r0, [r7, #4]
 8013c66:	f000 f809 	bl	8013c7c <dhcp_decline>
    }
  }
}
 8013c6a:	3710      	adds	r7, #16
 8013c6c:	46bd      	mov	sp, r7
 8013c6e:	bd80      	pop	{r7, pc}
 8013c70:	0801b6f4 	.word	0x0801b6f4
 8013c74:	0801b7d8 	.word	0x0801b7d8
 8013c78:	0801b754 	.word	0x0801b754

08013c7c <dhcp_decline>:
 *
 * @param netif the netif under DHCP control
 */
static err_t
dhcp_decline(struct netif *netif)
{
 8013c7c:	b5b0      	push	{r4, r5, r7, lr}
 8013c7e:	b08a      	sub	sp, #40	; 0x28
 8013c80:	af02      	add	r7, sp, #8
 8013c82:	6078      	str	r0, [r7, #4]
  struct dhcp *dhcp = netif_dhcp_data(netif);
 8013c84:	687b      	ldr	r3, [r7, #4]
 8013c86:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8013c88:	61bb      	str	r3, [r7, #24]
  u16_t msecs;
  struct pbuf *p_out;
  u16_t options_out_len;

  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("dhcp_decline()\n"));
  dhcp_set_state(dhcp, DHCP_STATE_BACKING_OFF);
 8013c8a:	210c      	movs	r1, #12
 8013c8c:	69b8      	ldr	r0, [r7, #24]
 8013c8e:	f000 fc6f 	bl	8014570 <dhcp_set_state>
  /* create and initialize the DHCP message header */
  p_out = dhcp_create_msg(netif, dhcp, DHCP_DECLINE, &options_out_len);
 8013c92:	f107 030c 	add.w	r3, r7, #12
 8013c96:	2204      	movs	r2, #4
 8013c98:	69b9      	ldr	r1, [r7, #24]
 8013c9a:	6878      	ldr	r0, [r7, #4]
 8013c9c:	f001 f924 	bl	8014ee8 <dhcp_create_msg>
 8013ca0:	6178      	str	r0, [r7, #20]
  if (p_out != NULL) {
 8013ca2:	697b      	ldr	r3, [r7, #20]
 8013ca4:	2b00      	cmp	r3, #0
 8013ca6:	d035      	beq.n	8013d14 <dhcp_decline+0x98>
    struct dhcp_msg *msg_out = (struct dhcp_msg *)p_out->payload;
 8013ca8:	697b      	ldr	r3, [r7, #20]
 8013caa:	685b      	ldr	r3, [r3, #4]
 8013cac:	613b      	str	r3, [r7, #16]
    options_out_len = dhcp_option(options_out_len, msg_out->options, DHCP_OPTION_REQUESTED_IP, 4);
 8013cae:	89b8      	ldrh	r0, [r7, #12]
 8013cb0:	693b      	ldr	r3, [r7, #16]
 8013cb2:	f103 01f0 	add.w	r1, r3, #240	; 0xf0
 8013cb6:	2304      	movs	r3, #4
 8013cb8:	2232      	movs	r2, #50	; 0x32
 8013cba:	f000 fc73 	bl	80145a4 <dhcp_option>
 8013cbe:	4603      	mov	r3, r0
 8013cc0:	81bb      	strh	r3, [r7, #12]
    options_out_len = dhcp_option_long(options_out_len, msg_out->options, lwip_ntohl(ip4_addr_get_u32(&dhcp->offered_ip_addr)));
 8013cc2:	89bc      	ldrh	r4, [r7, #12]
 8013cc4:	693b      	ldr	r3, [r7, #16]
 8013cc6:	f103 05f0 	add.w	r5, r3, #240	; 0xf0
 8013cca:	69bb      	ldr	r3, [r7, #24]
 8013ccc:	69db      	ldr	r3, [r3, #28]
 8013cce:	4618      	mov	r0, r3
 8013cd0:	f7f6 faf3 	bl	800a2ba <lwip_htonl>
 8013cd4:	4603      	mov	r3, r0
 8013cd6:	461a      	mov	r2, r3
 8013cd8:	4629      	mov	r1, r5
 8013cda:	4620      	mov	r0, r4
 8013cdc:	f000 fcee 	bl	80146bc <dhcp_option_long>
 8013ce0:	4603      	mov	r3, r0
 8013ce2:	81bb      	strh	r3, [r7, #12]

    LWIP_HOOK_DHCP_APPEND_OPTIONS(netif, dhcp, DHCP_STATE_BACKING_OFF, msg_out, DHCP_DECLINE, &options_out_len);
    dhcp_option_trailer(options_out_len, msg_out->options, p_out);
 8013ce4:	89b8      	ldrh	r0, [r7, #12]
 8013ce6:	693b      	ldr	r3, [r7, #16]
 8013ce8:	33f0      	adds	r3, #240	; 0xf0
 8013cea:	697a      	ldr	r2, [r7, #20]
 8013cec:	4619      	mov	r1, r3
 8013cee:	f001 f9d1 	bl	8015094 <dhcp_option_trailer>

    /* per section 4.4.4, broadcast DECLINE messages */
    result = udp_sendto_if_src(dhcp_pcb, p_out, IP_ADDR_BROADCAST, LWIP_IANA_PORT_DHCP_SERVER, netif, IP4_ADDR_ANY);
 8013cf2:	4b19      	ldr	r3, [pc, #100]	; (8013d58 <dhcp_decline+0xdc>)
 8013cf4:	6818      	ldr	r0, [r3, #0]
 8013cf6:	4b19      	ldr	r3, [pc, #100]	; (8013d5c <dhcp_decline+0xe0>)
 8013cf8:	9301      	str	r3, [sp, #4]
 8013cfa:	687b      	ldr	r3, [r7, #4]
 8013cfc:	9300      	str	r3, [sp, #0]
 8013cfe:	2343      	movs	r3, #67	; 0x43
 8013d00:	4a17      	ldr	r2, [pc, #92]	; (8013d60 <dhcp_decline+0xe4>)
 8013d02:	6979      	ldr	r1, [r7, #20]
 8013d04:	f7ff f8b2 	bl	8012e6c <udp_sendto_if_src>
 8013d08:	4603      	mov	r3, r0
 8013d0a:	77fb      	strb	r3, [r7, #31]
    pbuf_free(p_out);
 8013d0c:	6978      	ldr	r0, [r7, #20]
 8013d0e:	f7f8 f917 	bl	800bf40 <pbuf_free>
 8013d12:	e001      	b.n	8013d18 <dhcp_decline+0x9c>
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("dhcp_decline: BACKING OFF\n"));
  } else {
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_SERIOUS,
                ("dhcp_decline: could not allocate DHCP request\n"));
    result = ERR_MEM;
 8013d14:	23ff      	movs	r3, #255	; 0xff
 8013d16:	77fb      	strb	r3, [r7, #31]
  }
  if (dhcp->tries < 255) {
 8013d18:	69bb      	ldr	r3, [r7, #24]
 8013d1a:	799b      	ldrb	r3, [r3, #6]
 8013d1c:	2bff      	cmp	r3, #255	; 0xff
 8013d1e:	d005      	beq.n	8013d2c <dhcp_decline+0xb0>
    dhcp->tries++;
 8013d20:	69bb      	ldr	r3, [r7, #24]
 8013d22:	799b      	ldrb	r3, [r3, #6]
 8013d24:	3301      	adds	r3, #1
 8013d26:	b2da      	uxtb	r2, r3
 8013d28:	69bb      	ldr	r3, [r7, #24]
 8013d2a:	719a      	strb	r2, [r3, #6]
  }
  msecs = 10 * 1000;
 8013d2c:	f242 7310 	movw	r3, #10000	; 0x2710
 8013d30:	81fb      	strh	r3, [r7, #14]
  dhcp->request_timeout = (u16_t)((msecs + DHCP_FINE_TIMER_MSECS - 1) / DHCP_FINE_TIMER_MSECS);
 8013d32:	89fb      	ldrh	r3, [r7, #14]
 8013d34:	f203 13f3 	addw	r3, r3, #499	; 0x1f3
 8013d38:	4a0a      	ldr	r2, [pc, #40]	; (8013d64 <dhcp_decline+0xe8>)
 8013d3a:	fb82 1203 	smull	r1, r2, r2, r3
 8013d3e:	1152      	asrs	r2, r2, #5
 8013d40:	17db      	asrs	r3, r3, #31
 8013d42:	1ad3      	subs	r3, r2, r3
 8013d44:	b29a      	uxth	r2, r3
 8013d46:	69bb      	ldr	r3, [r7, #24]
 8013d48:	811a      	strh	r2, [r3, #8]
  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("dhcp_decline(): set request timeout %"U16_F" msecs\n", msecs));
  return result;
 8013d4a:	f997 301f 	ldrsb.w	r3, [r7, #31]
}
 8013d4e:	4618      	mov	r0, r3
 8013d50:	3720      	adds	r7, #32
 8013d52:	46bd      	mov	sp, r7
 8013d54:	bdb0      	pop	{r4, r5, r7, pc}
 8013d56:	bf00      	nop
 8013d58:	200089b0 	.word	0x200089b0
 8013d5c:	0801c2c4 	.word	0x0801c2c4
 8013d60:	0801c2c8 	.word	0x0801c2c8
 8013d64:	10624dd3 	.word	0x10624dd3

08013d68 <dhcp_discover>:
 *
 * @param netif the netif under DHCP control
 */
static err_t
dhcp_discover(struct netif *netif)
{
 8013d68:	b580      	push	{r7, lr}
 8013d6a:	b08a      	sub	sp, #40	; 0x28
 8013d6c:	af02      	add	r7, sp, #8
 8013d6e:	6078      	str	r0, [r7, #4]
  struct dhcp *dhcp = netif_dhcp_data(netif);
 8013d70:	687b      	ldr	r3, [r7, #4]
 8013d72:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8013d74:	61bb      	str	r3, [r7, #24]
  err_t result = ERR_OK;
 8013d76:	2300      	movs	r3, #0
 8013d78:	75fb      	strb	r3, [r7, #23]
  struct pbuf *p_out;
  u16_t options_out_len;

  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("dhcp_discover()\n"));

  ip4_addr_set_any(&dhcp->offered_ip_addr);
 8013d7a:	69bb      	ldr	r3, [r7, #24]
 8013d7c:	2200      	movs	r2, #0
 8013d7e:	61da      	str	r2, [r3, #28]
  dhcp_set_state(dhcp, DHCP_STATE_SELECTING);
 8013d80:	2106      	movs	r1, #6
 8013d82:	69b8      	ldr	r0, [r7, #24]
 8013d84:	f000 fbf4 	bl	8014570 <dhcp_set_state>
  /* create and initialize the DHCP message header */
  p_out = dhcp_create_msg(netif, dhcp, DHCP_DISCOVER, &options_out_len);
 8013d88:	f107 0308 	add.w	r3, r7, #8
 8013d8c:	2201      	movs	r2, #1
 8013d8e:	69b9      	ldr	r1, [r7, #24]
 8013d90:	6878      	ldr	r0, [r7, #4]
 8013d92:	f001 f8a9 	bl	8014ee8 <dhcp_create_msg>
 8013d96:	6138      	str	r0, [r7, #16]
  if (p_out != NULL) {
 8013d98:	693b      	ldr	r3, [r7, #16]
 8013d9a:	2b00      	cmp	r3, #0
 8013d9c:	d04b      	beq.n	8013e36 <dhcp_discover+0xce>
    struct dhcp_msg *msg_out = (struct dhcp_msg *)p_out->payload;
 8013d9e:	693b      	ldr	r3, [r7, #16]
 8013da0:	685b      	ldr	r3, [r3, #4]
 8013da2:	60fb      	str	r3, [r7, #12]
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("dhcp_discover: making request\n"));

    options_out_len = dhcp_option(options_out_len, msg_out->options, DHCP_OPTION_MAX_MSG_SIZE, DHCP_OPTION_MAX_MSG_SIZE_LEN);
 8013da4:	8938      	ldrh	r0, [r7, #8]
 8013da6:	68fb      	ldr	r3, [r7, #12]
 8013da8:	f103 01f0 	add.w	r1, r3, #240	; 0xf0
 8013dac:	2302      	movs	r3, #2
 8013dae:	2239      	movs	r2, #57	; 0x39
 8013db0:	f000 fbf8 	bl	80145a4 <dhcp_option>
 8013db4:	4603      	mov	r3, r0
 8013db6:	813b      	strh	r3, [r7, #8]
    options_out_len = dhcp_option_short(options_out_len, msg_out->options, DHCP_MAX_MSG_LEN(netif));
 8013db8:	8938      	ldrh	r0, [r7, #8]
 8013dba:	68fb      	ldr	r3, [r7, #12]
 8013dbc:	f103 01f0 	add.w	r1, r3, #240	; 0xf0
 8013dc0:	687b      	ldr	r3, [r7, #4]
 8013dc2:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8013dc4:	461a      	mov	r2, r3
 8013dc6:	f000 fc47 	bl	8014658 <dhcp_option_short>
 8013dca:	4603      	mov	r3, r0
 8013dcc:	813b      	strh	r3, [r7, #8]

    options_out_len = dhcp_option(options_out_len, msg_out->options, DHCP_OPTION_PARAMETER_REQUEST_LIST, LWIP_ARRAYSIZE(dhcp_discover_request_options));
 8013dce:	8938      	ldrh	r0, [r7, #8]
 8013dd0:	68fb      	ldr	r3, [r7, #12]
 8013dd2:	f103 01f0 	add.w	r1, r3, #240	; 0xf0
 8013dd6:	2304      	movs	r3, #4
 8013dd8:	2237      	movs	r2, #55	; 0x37
 8013dda:	f000 fbe3 	bl	80145a4 <dhcp_option>
 8013dde:	4603      	mov	r3, r0
 8013de0:	813b      	strh	r3, [r7, #8]
    for (i = 0; i < LWIP_ARRAYSIZE(dhcp_discover_request_options); i++) {
 8013de2:	2300      	movs	r3, #0
 8013de4:	77fb      	strb	r3, [r7, #31]
 8013de6:	e00e      	b.n	8013e06 <dhcp_discover+0x9e>
      options_out_len = dhcp_option_byte(options_out_len, msg_out->options, dhcp_discover_request_options[i]);
 8013de8:	8938      	ldrh	r0, [r7, #8]
 8013dea:	68fb      	ldr	r3, [r7, #12]
 8013dec:	f103 01f0 	add.w	r1, r3, #240	; 0xf0
 8013df0:	7ffb      	ldrb	r3, [r7, #31]
 8013df2:	4a29      	ldr	r2, [pc, #164]	; (8013e98 <dhcp_discover+0x130>)
 8013df4:	5cd3      	ldrb	r3, [r2, r3]
 8013df6:	461a      	mov	r2, r3
 8013df8:	f000 fc08 	bl	801460c <dhcp_option_byte>
 8013dfc:	4603      	mov	r3, r0
 8013dfe:	813b      	strh	r3, [r7, #8]
    for (i = 0; i < LWIP_ARRAYSIZE(dhcp_discover_request_options); i++) {
 8013e00:	7ffb      	ldrb	r3, [r7, #31]
 8013e02:	3301      	adds	r3, #1
 8013e04:	77fb      	strb	r3, [r7, #31]
 8013e06:	7ffb      	ldrb	r3, [r7, #31]
 8013e08:	2b03      	cmp	r3, #3
 8013e0a:	d9ed      	bls.n	8013de8 <dhcp_discover+0x80>
    }
    LWIP_HOOK_DHCP_APPEND_OPTIONS(netif, dhcp, DHCP_STATE_SELECTING, msg_out, DHCP_DISCOVER, &options_out_len);
    dhcp_option_trailer(options_out_len, msg_out->options, p_out);
 8013e0c:	8938      	ldrh	r0, [r7, #8]
 8013e0e:	68fb      	ldr	r3, [r7, #12]
 8013e10:	33f0      	adds	r3, #240	; 0xf0
 8013e12:	693a      	ldr	r2, [r7, #16]
 8013e14:	4619      	mov	r1, r3
 8013e16:	f001 f93d 	bl	8015094 <dhcp_option_trailer>

    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("dhcp_discover: sendto(DISCOVER, IP_ADDR_BROADCAST, LWIP_IANA_PORT_DHCP_SERVER)\n"));
    udp_sendto_if_src(dhcp_pcb, p_out, IP_ADDR_BROADCAST, LWIP_IANA_PORT_DHCP_SERVER, netif, IP4_ADDR_ANY);
 8013e1a:	4b20      	ldr	r3, [pc, #128]	; (8013e9c <dhcp_discover+0x134>)
 8013e1c:	6818      	ldr	r0, [r3, #0]
 8013e1e:	4b20      	ldr	r3, [pc, #128]	; (8013ea0 <dhcp_discover+0x138>)
 8013e20:	9301      	str	r3, [sp, #4]
 8013e22:	687b      	ldr	r3, [r7, #4]
 8013e24:	9300      	str	r3, [sp, #0]
 8013e26:	2343      	movs	r3, #67	; 0x43
 8013e28:	4a1e      	ldr	r2, [pc, #120]	; (8013ea4 <dhcp_discover+0x13c>)
 8013e2a:	6939      	ldr	r1, [r7, #16]
 8013e2c:	f7ff f81e 	bl	8012e6c <udp_sendto_if_src>
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("dhcp_discover: deleting()ing\n"));
    pbuf_free(p_out);
 8013e30:	6938      	ldr	r0, [r7, #16]
 8013e32:	f7f8 f885 	bl	800bf40 <pbuf_free>
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("dhcp_discover: SELECTING\n"));
  } else {
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_SERIOUS, ("dhcp_discover: could not allocate DHCP request\n"));
  }
  if (dhcp->tries < 255) {
 8013e36:	69bb      	ldr	r3, [r7, #24]
 8013e38:	799b      	ldrb	r3, [r3, #6]
 8013e3a:	2bff      	cmp	r3, #255	; 0xff
 8013e3c:	d005      	beq.n	8013e4a <dhcp_discover+0xe2>
    dhcp->tries++;
 8013e3e:	69bb      	ldr	r3, [r7, #24]
 8013e40:	799b      	ldrb	r3, [r3, #6]
 8013e42:	3301      	adds	r3, #1
 8013e44:	b2da      	uxtb	r2, r3
 8013e46:	69bb      	ldr	r3, [r7, #24]
 8013e48:	719a      	strb	r2, [r3, #6]
  if (dhcp->tries >= LWIP_DHCP_AUTOIP_COOP_TRIES && dhcp->autoip_coop_state == DHCP_AUTOIP_COOP_STATE_OFF) {
    dhcp->autoip_coop_state = DHCP_AUTOIP_COOP_STATE_ON;
    autoip_start(netif);
  }
#endif /* LWIP_DHCP_AUTOIP_COOP */
  msecs = (u16_t)((dhcp->tries < 6 ? 1 << dhcp->tries : 60) * 1000);
 8013e4a:	69bb      	ldr	r3, [r7, #24]
 8013e4c:	799b      	ldrb	r3, [r3, #6]
 8013e4e:	2b05      	cmp	r3, #5
 8013e50:	d80d      	bhi.n	8013e6e <dhcp_discover+0x106>
 8013e52:	69bb      	ldr	r3, [r7, #24]
 8013e54:	799b      	ldrb	r3, [r3, #6]
 8013e56:	461a      	mov	r2, r3
 8013e58:	2301      	movs	r3, #1
 8013e5a:	4093      	lsls	r3, r2
 8013e5c:	b29b      	uxth	r3, r3
 8013e5e:	461a      	mov	r2, r3
 8013e60:	0152      	lsls	r2, r2, #5
 8013e62:	1ad2      	subs	r2, r2, r3
 8013e64:	0092      	lsls	r2, r2, #2
 8013e66:	4413      	add	r3, r2
 8013e68:	00db      	lsls	r3, r3, #3
 8013e6a:	b29b      	uxth	r3, r3
 8013e6c:	e001      	b.n	8013e72 <dhcp_discover+0x10a>
 8013e6e:	f64e 2360 	movw	r3, #60000	; 0xea60
 8013e72:	817b      	strh	r3, [r7, #10]
  dhcp->request_timeout = (u16_t)((msecs + DHCP_FINE_TIMER_MSECS - 1) / DHCP_FINE_TIMER_MSECS);
 8013e74:	897b      	ldrh	r3, [r7, #10]
 8013e76:	f203 13f3 	addw	r3, r3, #499	; 0x1f3
 8013e7a:	4a0b      	ldr	r2, [pc, #44]	; (8013ea8 <dhcp_discover+0x140>)
 8013e7c:	fb82 1203 	smull	r1, r2, r2, r3
 8013e80:	1152      	asrs	r2, r2, #5
 8013e82:	17db      	asrs	r3, r3, #31
 8013e84:	1ad3      	subs	r3, r2, r3
 8013e86:	b29a      	uxth	r2, r3
 8013e88:	69bb      	ldr	r3, [r7, #24]
 8013e8a:	811a      	strh	r2, [r3, #8]
  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("dhcp_discover(): set request timeout %"U16_F" msecs\n", msecs));
  return result;
 8013e8c:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 8013e90:	4618      	mov	r0, r3
 8013e92:	3720      	adds	r7, #32
 8013e94:	46bd      	mov	sp, r7
 8013e96:	bd80      	pop	{r7, pc}
 8013e98:	200000b4 	.word	0x200000b4
 8013e9c:	200089b0 	.word	0x200089b0
 8013ea0:	0801c2c4 	.word	0x0801c2c4
 8013ea4:	0801c2c8 	.word	0x0801c2c8
 8013ea8:	10624dd3 	.word	0x10624dd3

08013eac <dhcp_bind>:
 *
 * @param netif network interface to bind to the offered address
 */
static void
dhcp_bind(struct netif *netif)
{
 8013eac:	b580      	push	{r7, lr}
 8013eae:	b088      	sub	sp, #32
 8013eb0:	af00      	add	r7, sp, #0
 8013eb2:	6078      	str	r0, [r7, #4]
  u32_t timeout;
  struct dhcp *dhcp;
  ip4_addr_t sn_mask, gw_addr;
  LWIP_ERROR("dhcp_bind: netif != NULL", (netif != NULL), return;);
 8013eb4:	687b      	ldr	r3, [r7, #4]
 8013eb6:	2b00      	cmp	r3, #0
 8013eb8:	d107      	bne.n	8013eca <dhcp_bind+0x1e>
 8013eba:	4b64      	ldr	r3, [pc, #400]	; (801404c <dhcp_bind+0x1a0>)
 8013ebc:	f240 4215 	movw	r2, #1045	; 0x415
 8013ec0:	4963      	ldr	r1, [pc, #396]	; (8014050 <dhcp_bind+0x1a4>)
 8013ec2:	4864      	ldr	r0, [pc, #400]	; (8014054 <dhcp_bind+0x1a8>)
 8013ec4:	f004 fae0 	bl	8018488 <iprintf>
 8013ec8:	e0bc      	b.n	8014044 <dhcp_bind+0x198>
  dhcp = netif_dhcp_data(netif);
 8013eca:	687b      	ldr	r3, [r7, #4]
 8013ecc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8013ece:	61bb      	str	r3, [r7, #24]
  LWIP_ERROR("dhcp_bind: dhcp != NULL", (dhcp != NULL), return;);
 8013ed0:	69bb      	ldr	r3, [r7, #24]
 8013ed2:	2b00      	cmp	r3, #0
 8013ed4:	d107      	bne.n	8013ee6 <dhcp_bind+0x3a>
 8013ed6:	4b5d      	ldr	r3, [pc, #372]	; (801404c <dhcp_bind+0x1a0>)
 8013ed8:	f240 4217 	movw	r2, #1047	; 0x417
 8013edc:	495e      	ldr	r1, [pc, #376]	; (8014058 <dhcp_bind+0x1ac>)
 8013ede:	485d      	ldr	r0, [pc, #372]	; (8014054 <dhcp_bind+0x1a8>)
 8013ee0:	f004 fad2 	bl	8018488 <iprintf>
 8013ee4:	e0ae      	b.n	8014044 <dhcp_bind+0x198>
  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("dhcp_bind(netif=%p) %c%c%"U16_F"\n", (void *)netif, netif->name[0], netif->name[1], (u16_t)netif->num));

  /* reset time used of lease */
  dhcp->lease_used = 0;
 8013ee6:	69bb      	ldr	r3, [r7, #24]
 8013ee8:	2200      	movs	r2, #0
 8013eea:	825a      	strh	r2, [r3, #18]

  if (dhcp->offered_t0_lease != 0xffffffffUL) {
 8013eec:	69bb      	ldr	r3, [r7, #24]
 8013eee:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8013ef0:	f1b3 3fff 	cmp.w	r3, #4294967295
 8013ef4:	d019      	beq.n	8013f2a <dhcp_bind+0x7e>
    /* set renewal period timer */
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("dhcp_bind(): t0 renewal timer %"U32_F" secs\n", dhcp->offered_t0_lease));
    timeout = (dhcp->offered_t0_lease + DHCP_COARSE_TIMER_SECS / 2) / DHCP_COARSE_TIMER_SECS;
 8013ef6:	69bb      	ldr	r3, [r7, #24]
 8013ef8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8013efa:	331e      	adds	r3, #30
 8013efc:	4a57      	ldr	r2, [pc, #348]	; (801405c <dhcp_bind+0x1b0>)
 8013efe:	fba2 2303 	umull	r2, r3, r2, r3
 8013f02:	095b      	lsrs	r3, r3, #5
 8013f04:	61fb      	str	r3, [r7, #28]
    if (timeout > 0xffff) {
 8013f06:	69fb      	ldr	r3, [r7, #28]
 8013f08:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8013f0c:	d302      	bcc.n	8013f14 <dhcp_bind+0x68>
      timeout = 0xffff;
 8013f0e:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8013f12:	61fb      	str	r3, [r7, #28]
    }
    dhcp->t0_timeout = (u16_t)timeout;
 8013f14:	69fb      	ldr	r3, [r7, #28]
 8013f16:	b29a      	uxth	r2, r3
 8013f18:	69bb      	ldr	r3, [r7, #24]
 8013f1a:	829a      	strh	r2, [r3, #20]
    if (dhcp->t0_timeout == 0) {
 8013f1c:	69bb      	ldr	r3, [r7, #24]
 8013f1e:	8a9b      	ldrh	r3, [r3, #20]
 8013f20:	2b00      	cmp	r3, #0
 8013f22:	d102      	bne.n	8013f2a <dhcp_bind+0x7e>
      dhcp->t0_timeout = 1;
 8013f24:	69bb      	ldr	r3, [r7, #24]
 8013f26:	2201      	movs	r2, #1
 8013f28:	829a      	strh	r2, [r3, #20]
    }
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("dhcp_bind(): set request timeout %"U32_F" msecs\n", dhcp->offered_t0_lease * 1000));
  }

  /* temporary DHCP lease? */
  if (dhcp->offered_t1_renew != 0xffffffffUL) {
 8013f2a:	69bb      	ldr	r3, [r7, #24]
 8013f2c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8013f2e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8013f32:	d01d      	beq.n	8013f70 <dhcp_bind+0xc4>
    /* set renewal period timer */
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("dhcp_bind(): t1 renewal timer %"U32_F" secs\n", dhcp->offered_t1_renew));
    timeout = (dhcp->offered_t1_renew + DHCP_COARSE_TIMER_SECS / 2) / DHCP_COARSE_TIMER_SECS;
 8013f34:	69bb      	ldr	r3, [r7, #24]
 8013f36:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8013f38:	331e      	adds	r3, #30
 8013f3a:	4a48      	ldr	r2, [pc, #288]	; (801405c <dhcp_bind+0x1b0>)
 8013f3c:	fba2 2303 	umull	r2, r3, r2, r3
 8013f40:	095b      	lsrs	r3, r3, #5
 8013f42:	61fb      	str	r3, [r7, #28]
    if (timeout > 0xffff) {
 8013f44:	69fb      	ldr	r3, [r7, #28]
 8013f46:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8013f4a:	d302      	bcc.n	8013f52 <dhcp_bind+0xa6>
      timeout = 0xffff;
 8013f4c:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8013f50:	61fb      	str	r3, [r7, #28]
    }
    dhcp->t1_timeout = (u16_t)timeout;
 8013f52:	69fb      	ldr	r3, [r7, #28]
 8013f54:	b29a      	uxth	r2, r3
 8013f56:	69bb      	ldr	r3, [r7, #24]
 8013f58:	815a      	strh	r2, [r3, #10]
    if (dhcp->t1_timeout == 0) {
 8013f5a:	69bb      	ldr	r3, [r7, #24]
 8013f5c:	895b      	ldrh	r3, [r3, #10]
 8013f5e:	2b00      	cmp	r3, #0
 8013f60:	d102      	bne.n	8013f68 <dhcp_bind+0xbc>
      dhcp->t1_timeout = 1;
 8013f62:	69bb      	ldr	r3, [r7, #24]
 8013f64:	2201      	movs	r2, #1
 8013f66:	815a      	strh	r2, [r3, #10]
    }
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("dhcp_bind(): set request timeout %"U32_F" msecs\n", dhcp->offered_t1_renew * 1000));
    dhcp->t1_renew_time = dhcp->t1_timeout;
 8013f68:	69bb      	ldr	r3, [r7, #24]
 8013f6a:	895a      	ldrh	r2, [r3, #10]
 8013f6c:	69bb      	ldr	r3, [r7, #24]
 8013f6e:	81da      	strh	r2, [r3, #14]
  }
  /* set renewal period timer */
  if (dhcp->offered_t2_rebind != 0xffffffffUL) {
 8013f70:	69bb      	ldr	r3, [r7, #24]
 8013f72:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8013f74:	f1b3 3fff 	cmp.w	r3, #4294967295
 8013f78:	d01d      	beq.n	8013fb6 <dhcp_bind+0x10a>
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("dhcp_bind(): t2 rebind timer %"U32_F" secs\n", dhcp->offered_t2_rebind));
    timeout = (dhcp->offered_t2_rebind + DHCP_COARSE_TIMER_SECS / 2) / DHCP_COARSE_TIMER_SECS;
 8013f7a:	69bb      	ldr	r3, [r7, #24]
 8013f7c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8013f7e:	331e      	adds	r3, #30
 8013f80:	4a36      	ldr	r2, [pc, #216]	; (801405c <dhcp_bind+0x1b0>)
 8013f82:	fba2 2303 	umull	r2, r3, r2, r3
 8013f86:	095b      	lsrs	r3, r3, #5
 8013f88:	61fb      	str	r3, [r7, #28]
    if (timeout > 0xffff) {
 8013f8a:	69fb      	ldr	r3, [r7, #28]
 8013f8c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8013f90:	d302      	bcc.n	8013f98 <dhcp_bind+0xec>
      timeout = 0xffff;
 8013f92:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8013f96:	61fb      	str	r3, [r7, #28]
    }
    dhcp->t2_timeout = (u16_t)timeout;
 8013f98:	69fb      	ldr	r3, [r7, #28]
 8013f9a:	b29a      	uxth	r2, r3
 8013f9c:	69bb      	ldr	r3, [r7, #24]
 8013f9e:	819a      	strh	r2, [r3, #12]
    if (dhcp->t2_timeout == 0) {
 8013fa0:	69bb      	ldr	r3, [r7, #24]
 8013fa2:	899b      	ldrh	r3, [r3, #12]
 8013fa4:	2b00      	cmp	r3, #0
 8013fa6:	d102      	bne.n	8013fae <dhcp_bind+0x102>
      dhcp->t2_timeout = 1;
 8013fa8:	69bb      	ldr	r3, [r7, #24]
 8013faa:	2201      	movs	r2, #1
 8013fac:	819a      	strh	r2, [r3, #12]
    }
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("dhcp_bind(): set request timeout %"U32_F" msecs\n", dhcp->offered_t2_rebind * 1000));
    dhcp->t2_rebind_time = dhcp->t2_timeout;
 8013fae:	69bb      	ldr	r3, [r7, #24]
 8013fb0:	899a      	ldrh	r2, [r3, #12]
 8013fb2:	69bb      	ldr	r3, [r7, #24]
 8013fb4:	821a      	strh	r2, [r3, #16]
  }

  /* If we have sub 1 minute lease, t2 and t1 will kick in at the same time. */
  if ((dhcp->t1_timeout >= dhcp->t2_timeout) && (dhcp->t2_timeout > 0)) {
 8013fb6:	69bb      	ldr	r3, [r7, #24]
 8013fb8:	895a      	ldrh	r2, [r3, #10]
 8013fba:	69bb      	ldr	r3, [r7, #24]
 8013fbc:	899b      	ldrh	r3, [r3, #12]
 8013fbe:	429a      	cmp	r2, r3
 8013fc0:	d306      	bcc.n	8013fd0 <dhcp_bind+0x124>
 8013fc2:	69bb      	ldr	r3, [r7, #24]
 8013fc4:	899b      	ldrh	r3, [r3, #12]
 8013fc6:	2b00      	cmp	r3, #0
 8013fc8:	d002      	beq.n	8013fd0 <dhcp_bind+0x124>
    dhcp->t1_timeout = 0;
 8013fca:	69bb      	ldr	r3, [r7, #24]
 8013fcc:	2200      	movs	r2, #0
 8013fce:	815a      	strh	r2, [r3, #10]
  }

  if (dhcp->subnet_mask_given) {
 8013fd0:	69bb      	ldr	r3, [r7, #24]
 8013fd2:	79db      	ldrb	r3, [r3, #7]
 8013fd4:	2b00      	cmp	r3, #0
 8013fd6:	d003      	beq.n	8013fe0 <dhcp_bind+0x134>
    /* copy offered network mask */
    ip4_addr_copy(sn_mask, dhcp->offered_sn_mask);
 8013fd8:	69bb      	ldr	r3, [r7, #24]
 8013fda:	6a1b      	ldr	r3, [r3, #32]
 8013fdc:	613b      	str	r3, [r7, #16]
 8013fde:	e014      	b.n	801400a <dhcp_bind+0x15e>
  } else {
    /* subnet mask not given, choose a safe subnet mask given the network class */
    u8_t first_octet = ip4_addr1(&dhcp->offered_ip_addr);
 8013fe0:	69bb      	ldr	r3, [r7, #24]
 8013fe2:	331c      	adds	r3, #28
 8013fe4:	781b      	ldrb	r3, [r3, #0]
 8013fe6:	75fb      	strb	r3, [r7, #23]
    if (first_octet <= 127) {
 8013fe8:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8013fec:	2b00      	cmp	r3, #0
 8013fee:	db02      	blt.n	8013ff6 <dhcp_bind+0x14a>
      ip4_addr_set_u32(&sn_mask, PP_HTONL(0xff000000UL));
 8013ff0:	23ff      	movs	r3, #255	; 0xff
 8013ff2:	613b      	str	r3, [r7, #16]
 8013ff4:	e009      	b.n	801400a <dhcp_bind+0x15e>
    } else if (first_octet >= 192) {
 8013ff6:	7dfb      	ldrb	r3, [r7, #23]
 8013ff8:	2bbf      	cmp	r3, #191	; 0xbf
 8013ffa:	d903      	bls.n	8014004 <dhcp_bind+0x158>
      ip4_addr_set_u32(&sn_mask, PP_HTONL(0xffffff00UL));
 8013ffc:	f06f 437f 	mvn.w	r3, #4278190080	; 0xff000000
 8014000:	613b      	str	r3, [r7, #16]
 8014002:	e002      	b.n	801400a <dhcp_bind+0x15e>
    } else {
      ip4_addr_set_u32(&sn_mask, PP_HTONL(0xffff0000UL));
 8014004:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8014008:	613b      	str	r3, [r7, #16]
    }
  }

  ip4_addr_copy(gw_addr, dhcp->offered_gw_addr);
 801400a:	69bb      	ldr	r3, [r7, #24]
 801400c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801400e:	60fb      	str	r3, [r7, #12]
  /* gateway address not given? */
  if (ip4_addr_isany_val(gw_addr)) {
 8014010:	68fb      	ldr	r3, [r7, #12]
 8014012:	2b00      	cmp	r3, #0
 8014014:	d108      	bne.n	8014028 <dhcp_bind+0x17c>
    /* copy network address */
    ip4_addr_get_network(&gw_addr, &dhcp->offered_ip_addr, &sn_mask);
 8014016:	69bb      	ldr	r3, [r7, #24]
 8014018:	69da      	ldr	r2, [r3, #28]
 801401a:	693b      	ldr	r3, [r7, #16]
 801401c:	4013      	ands	r3, r2
 801401e:	60fb      	str	r3, [r7, #12]
    /* use first host address on network as gateway */
    ip4_addr_set_u32(&gw_addr, ip4_addr_get_u32(&gw_addr) | PP_HTONL(0x00000001UL));
 8014020:	68fb      	ldr	r3, [r7, #12]
 8014022:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8014026:	60fb      	str	r3, [r7, #12]

  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_STATE, ("dhcp_bind(): IP: 0x%08"X32_F" SN: 0x%08"X32_F" GW: 0x%08"X32_F"\n",
              ip4_addr_get_u32(&dhcp->offered_ip_addr), ip4_addr_get_u32(&sn_mask), ip4_addr_get_u32(&gw_addr)));
  /* netif is now bound to DHCP leased address - set this before assigning the address
     to ensure the callback can use dhcp_supplied_address() */
  dhcp_set_state(dhcp, DHCP_STATE_BOUND);
 8014028:	210a      	movs	r1, #10
 801402a:	69b8      	ldr	r0, [r7, #24]
 801402c:	f000 faa0 	bl	8014570 <dhcp_set_state>

  netif_set_addr(netif, &dhcp->offered_ip_addr, &sn_mask, &gw_addr);
 8014030:	69bb      	ldr	r3, [r7, #24]
 8014032:	f103 011c 	add.w	r1, r3, #28
 8014036:	f107 030c 	add.w	r3, r7, #12
 801403a:	f107 0210 	add.w	r2, r7, #16
 801403e:	6878      	ldr	r0, [r7, #4]
 8014040:	f7f7 fa9e 	bl	800b580 <netif_set_addr>
  /* interface is used by routing now that an address is set */
}
 8014044:	3720      	adds	r7, #32
 8014046:	46bd      	mov	sp, r7
 8014048:	bd80      	pop	{r7, pc}
 801404a:	bf00      	nop
 801404c:	0801b6f4 	.word	0x0801b6f4
 8014050:	0801b854 	.word	0x0801b854
 8014054:	0801b754 	.word	0x0801b754
 8014058:	0801b870 	.word	0x0801b870
 801405c:	88888889 	.word	0x88888889

08014060 <dhcp_renew>:
 *
 * @param netif network interface which must renew its lease
 */
err_t
dhcp_renew(struct netif *netif)
{
 8014060:	b580      	push	{r7, lr}
 8014062:	b08a      	sub	sp, #40	; 0x28
 8014064:	af02      	add	r7, sp, #8
 8014066:	6078      	str	r0, [r7, #4]
  struct dhcp *dhcp = netif_dhcp_data(netif);
 8014068:	687b      	ldr	r3, [r7, #4]
 801406a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801406c:	61bb      	str	r3, [r7, #24]
  struct pbuf *p_out;
  u16_t options_out_len;

  LWIP_ASSERT_CORE_LOCKED();
  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("dhcp_renew()\n"));
  dhcp_set_state(dhcp, DHCP_STATE_RENEWING);
 801406e:	2105      	movs	r1, #5
 8014070:	69b8      	ldr	r0, [r7, #24]
 8014072:	f000 fa7d 	bl	8014570 <dhcp_set_state>

  /* create and initialize the DHCP message header */
  p_out = dhcp_create_msg(netif, dhcp, DHCP_REQUEST, &options_out_len);
 8014076:	f107 030c 	add.w	r3, r7, #12
 801407a:	2203      	movs	r2, #3
 801407c:	69b9      	ldr	r1, [r7, #24]
 801407e:	6878      	ldr	r0, [r7, #4]
 8014080:	f000 ff32 	bl	8014ee8 <dhcp_create_msg>
 8014084:	6178      	str	r0, [r7, #20]
  if (p_out != NULL) {
 8014086:	697b      	ldr	r3, [r7, #20]
 8014088:	2b00      	cmp	r3, #0
 801408a:	d04e      	beq.n	801412a <dhcp_renew+0xca>
    struct dhcp_msg *msg_out = (struct dhcp_msg *)p_out->payload;
 801408c:	697b      	ldr	r3, [r7, #20]
 801408e:	685b      	ldr	r3, [r3, #4]
 8014090:	613b      	str	r3, [r7, #16]
    options_out_len = dhcp_option(options_out_len, msg_out->options, DHCP_OPTION_MAX_MSG_SIZE, DHCP_OPTION_MAX_MSG_SIZE_LEN);
 8014092:	89b8      	ldrh	r0, [r7, #12]
 8014094:	693b      	ldr	r3, [r7, #16]
 8014096:	f103 01f0 	add.w	r1, r3, #240	; 0xf0
 801409a:	2302      	movs	r3, #2
 801409c:	2239      	movs	r2, #57	; 0x39
 801409e:	f000 fa81 	bl	80145a4 <dhcp_option>
 80140a2:	4603      	mov	r3, r0
 80140a4:	81bb      	strh	r3, [r7, #12]
    options_out_len = dhcp_option_short(options_out_len, msg_out->options, DHCP_MAX_MSG_LEN(netif));
 80140a6:	89b8      	ldrh	r0, [r7, #12]
 80140a8:	693b      	ldr	r3, [r7, #16]
 80140aa:	f103 01f0 	add.w	r1, r3, #240	; 0xf0
 80140ae:	687b      	ldr	r3, [r7, #4]
 80140b0:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80140b2:	461a      	mov	r2, r3
 80140b4:	f000 fad0 	bl	8014658 <dhcp_option_short>
 80140b8:	4603      	mov	r3, r0
 80140ba:	81bb      	strh	r3, [r7, #12]

    options_out_len = dhcp_option(options_out_len, msg_out->options, DHCP_OPTION_PARAMETER_REQUEST_LIST, LWIP_ARRAYSIZE(dhcp_discover_request_options));
 80140bc:	89b8      	ldrh	r0, [r7, #12]
 80140be:	693b      	ldr	r3, [r7, #16]
 80140c0:	f103 01f0 	add.w	r1, r3, #240	; 0xf0
 80140c4:	2304      	movs	r3, #4
 80140c6:	2237      	movs	r2, #55	; 0x37
 80140c8:	f000 fa6c 	bl	80145a4 <dhcp_option>
 80140cc:	4603      	mov	r3, r0
 80140ce:	81bb      	strh	r3, [r7, #12]
    for (i = 0; i < LWIP_ARRAYSIZE(dhcp_discover_request_options); i++) {
 80140d0:	2300      	movs	r3, #0
 80140d2:	77bb      	strb	r3, [r7, #30]
 80140d4:	e00e      	b.n	80140f4 <dhcp_renew+0x94>
      options_out_len = dhcp_option_byte(options_out_len, msg_out->options, dhcp_discover_request_options[i]);
 80140d6:	89b8      	ldrh	r0, [r7, #12]
 80140d8:	693b      	ldr	r3, [r7, #16]
 80140da:	f103 01f0 	add.w	r1, r3, #240	; 0xf0
 80140de:	7fbb      	ldrb	r3, [r7, #30]
 80140e0:	4a2a      	ldr	r2, [pc, #168]	; (801418c <dhcp_renew+0x12c>)
 80140e2:	5cd3      	ldrb	r3, [r2, r3]
 80140e4:	461a      	mov	r2, r3
 80140e6:	f000 fa91 	bl	801460c <dhcp_option_byte>
 80140ea:	4603      	mov	r3, r0
 80140ec:	81bb      	strh	r3, [r7, #12]
    for (i = 0; i < LWIP_ARRAYSIZE(dhcp_discover_request_options); i++) {
 80140ee:	7fbb      	ldrb	r3, [r7, #30]
 80140f0:	3301      	adds	r3, #1
 80140f2:	77bb      	strb	r3, [r7, #30]
 80140f4:	7fbb      	ldrb	r3, [r7, #30]
 80140f6:	2b03      	cmp	r3, #3
 80140f8:	d9ed      	bls.n	80140d6 <dhcp_renew+0x76>
#if LWIP_NETIF_HOSTNAME
    options_out_len = dhcp_option_hostname(options_out_len, msg_out->options, netif);
#endif /* LWIP_NETIF_HOSTNAME */

    LWIP_HOOK_DHCP_APPEND_OPTIONS(netif, dhcp, DHCP_STATE_RENEWING, msg_out, DHCP_REQUEST, &options_out_len);
    dhcp_option_trailer(options_out_len, msg_out->options, p_out);
 80140fa:	89b8      	ldrh	r0, [r7, #12]
 80140fc:	693b      	ldr	r3, [r7, #16]
 80140fe:	33f0      	adds	r3, #240	; 0xf0
 8014100:	697a      	ldr	r2, [r7, #20]
 8014102:	4619      	mov	r1, r3
 8014104:	f000 ffc6 	bl	8015094 <dhcp_option_trailer>

    result = udp_sendto_if(dhcp_pcb, p_out, &dhcp->server_ip_addr, LWIP_IANA_PORT_DHCP_SERVER, netif);
 8014108:	4b21      	ldr	r3, [pc, #132]	; (8014190 <dhcp_renew+0x130>)
 801410a:	6818      	ldr	r0, [r3, #0]
 801410c:	69bb      	ldr	r3, [r7, #24]
 801410e:	f103 0218 	add.w	r2, r3, #24
 8014112:	687b      	ldr	r3, [r7, #4]
 8014114:	9300      	str	r3, [sp, #0]
 8014116:	2343      	movs	r3, #67	; 0x43
 8014118:	6979      	ldr	r1, [r7, #20]
 801411a:	f7fe fe33 	bl	8012d84 <udp_sendto_if>
 801411e:	4603      	mov	r3, r0
 8014120:	77fb      	strb	r3, [r7, #31]
    pbuf_free(p_out);
 8014122:	6978      	ldr	r0, [r7, #20]
 8014124:	f7f7 ff0c 	bl	800bf40 <pbuf_free>
 8014128:	e001      	b.n	801412e <dhcp_renew+0xce>

    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("dhcp_renew: RENEWING\n"));
  } else {
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_SERIOUS, ("dhcp_renew: could not allocate DHCP request\n"));
    result = ERR_MEM;
 801412a:	23ff      	movs	r3, #255	; 0xff
 801412c:	77fb      	strb	r3, [r7, #31]
  }
  if (dhcp->tries < 255) {
 801412e:	69bb      	ldr	r3, [r7, #24]
 8014130:	799b      	ldrb	r3, [r3, #6]
 8014132:	2bff      	cmp	r3, #255	; 0xff
 8014134:	d005      	beq.n	8014142 <dhcp_renew+0xe2>
    dhcp->tries++;
 8014136:	69bb      	ldr	r3, [r7, #24]
 8014138:	799b      	ldrb	r3, [r3, #6]
 801413a:	3301      	adds	r3, #1
 801413c:	b2da      	uxtb	r2, r3
 801413e:	69bb      	ldr	r3, [r7, #24]
 8014140:	719a      	strb	r2, [r3, #6]
  }
  /* back-off on retries, but to a maximum of 20 seconds */
  msecs = (u16_t)(dhcp->tries < 10 ? dhcp->tries * 2000 : 20 * 1000);
 8014142:	69bb      	ldr	r3, [r7, #24]
 8014144:	799b      	ldrb	r3, [r3, #6]
 8014146:	2b09      	cmp	r3, #9
 8014148:	d80a      	bhi.n	8014160 <dhcp_renew+0x100>
 801414a:	69bb      	ldr	r3, [r7, #24]
 801414c:	799b      	ldrb	r3, [r3, #6]
 801414e:	b29b      	uxth	r3, r3
 8014150:	461a      	mov	r2, r3
 8014152:	0152      	lsls	r2, r2, #5
 8014154:	1ad2      	subs	r2, r2, r3
 8014156:	0092      	lsls	r2, r2, #2
 8014158:	4413      	add	r3, r2
 801415a:	011b      	lsls	r3, r3, #4
 801415c:	b29b      	uxth	r3, r3
 801415e:	e001      	b.n	8014164 <dhcp_renew+0x104>
 8014160:	f644 6320 	movw	r3, #20000	; 0x4e20
 8014164:	81fb      	strh	r3, [r7, #14]
  dhcp->request_timeout = (u16_t)((msecs + DHCP_FINE_TIMER_MSECS - 1) / DHCP_FINE_TIMER_MSECS);
 8014166:	89fb      	ldrh	r3, [r7, #14]
 8014168:	f203 13f3 	addw	r3, r3, #499	; 0x1f3
 801416c:	4a09      	ldr	r2, [pc, #36]	; (8014194 <dhcp_renew+0x134>)
 801416e:	fb82 1203 	smull	r1, r2, r2, r3
 8014172:	1152      	asrs	r2, r2, #5
 8014174:	17db      	asrs	r3, r3, #31
 8014176:	1ad3      	subs	r3, r2, r3
 8014178:	b29a      	uxth	r2, r3
 801417a:	69bb      	ldr	r3, [r7, #24]
 801417c:	811a      	strh	r2, [r3, #8]
  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("dhcp_renew(): set request timeout %"U16_F" msecs\n", msecs));
  return result;
 801417e:	f997 301f 	ldrsb.w	r3, [r7, #31]
}
 8014182:	4618      	mov	r0, r3
 8014184:	3720      	adds	r7, #32
 8014186:	46bd      	mov	sp, r7
 8014188:	bd80      	pop	{r7, pc}
 801418a:	bf00      	nop
 801418c:	200000b4 	.word	0x200000b4
 8014190:	200089b0 	.word	0x200089b0
 8014194:	10624dd3 	.word	0x10624dd3

08014198 <dhcp_rebind>:
 *
 * @param netif network interface which must rebind with a DHCP server
 */
static err_t
dhcp_rebind(struct netif *netif)
{
 8014198:	b580      	push	{r7, lr}
 801419a:	b08a      	sub	sp, #40	; 0x28
 801419c:	af02      	add	r7, sp, #8
 801419e:	6078      	str	r0, [r7, #4]
  struct dhcp *dhcp = netif_dhcp_data(netif);
 80141a0:	687b      	ldr	r3, [r7, #4]
 80141a2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80141a4:	61bb      	str	r3, [r7, #24]
  u8_t i;
  struct pbuf *p_out;
  u16_t options_out_len;

  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("dhcp_rebind()\n"));
  dhcp_set_state(dhcp, DHCP_STATE_REBINDING);
 80141a6:	2104      	movs	r1, #4
 80141a8:	69b8      	ldr	r0, [r7, #24]
 80141aa:	f000 f9e1 	bl	8014570 <dhcp_set_state>

  /* create and initialize the DHCP message header */
  p_out = dhcp_create_msg(netif, dhcp, DHCP_REQUEST, &options_out_len);
 80141ae:	f107 030c 	add.w	r3, r7, #12
 80141b2:	2203      	movs	r2, #3
 80141b4:	69b9      	ldr	r1, [r7, #24]
 80141b6:	6878      	ldr	r0, [r7, #4]
 80141b8:	f000 fe96 	bl	8014ee8 <dhcp_create_msg>
 80141bc:	6178      	str	r0, [r7, #20]
  if (p_out != NULL) {
 80141be:	697b      	ldr	r3, [r7, #20]
 80141c0:	2b00      	cmp	r3, #0
 80141c2:	d04c      	beq.n	801425e <dhcp_rebind+0xc6>
    struct dhcp_msg *msg_out = (struct dhcp_msg *)p_out->payload;
 80141c4:	697b      	ldr	r3, [r7, #20]
 80141c6:	685b      	ldr	r3, [r3, #4]
 80141c8:	613b      	str	r3, [r7, #16]
    options_out_len = dhcp_option(options_out_len, msg_out->options, DHCP_OPTION_MAX_MSG_SIZE, DHCP_OPTION_MAX_MSG_SIZE_LEN);
 80141ca:	89b8      	ldrh	r0, [r7, #12]
 80141cc:	693b      	ldr	r3, [r7, #16]
 80141ce:	f103 01f0 	add.w	r1, r3, #240	; 0xf0
 80141d2:	2302      	movs	r3, #2
 80141d4:	2239      	movs	r2, #57	; 0x39
 80141d6:	f000 f9e5 	bl	80145a4 <dhcp_option>
 80141da:	4603      	mov	r3, r0
 80141dc:	81bb      	strh	r3, [r7, #12]
    options_out_len = dhcp_option_short(options_out_len, msg_out->options, DHCP_MAX_MSG_LEN(netif));
 80141de:	89b8      	ldrh	r0, [r7, #12]
 80141e0:	693b      	ldr	r3, [r7, #16]
 80141e2:	f103 01f0 	add.w	r1, r3, #240	; 0xf0
 80141e6:	687b      	ldr	r3, [r7, #4]
 80141e8:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80141ea:	461a      	mov	r2, r3
 80141ec:	f000 fa34 	bl	8014658 <dhcp_option_short>
 80141f0:	4603      	mov	r3, r0
 80141f2:	81bb      	strh	r3, [r7, #12]

    options_out_len = dhcp_option(options_out_len, msg_out->options, DHCP_OPTION_PARAMETER_REQUEST_LIST, LWIP_ARRAYSIZE(dhcp_discover_request_options));
 80141f4:	89b8      	ldrh	r0, [r7, #12]
 80141f6:	693b      	ldr	r3, [r7, #16]
 80141f8:	f103 01f0 	add.w	r1, r3, #240	; 0xf0
 80141fc:	2304      	movs	r3, #4
 80141fe:	2237      	movs	r2, #55	; 0x37
 8014200:	f000 f9d0 	bl	80145a4 <dhcp_option>
 8014204:	4603      	mov	r3, r0
 8014206:	81bb      	strh	r3, [r7, #12]
    for (i = 0; i < LWIP_ARRAYSIZE(dhcp_discover_request_options); i++) {
 8014208:	2300      	movs	r3, #0
 801420a:	77bb      	strb	r3, [r7, #30]
 801420c:	e00e      	b.n	801422c <dhcp_rebind+0x94>
      options_out_len = dhcp_option_byte(options_out_len, msg_out->options, dhcp_discover_request_options[i]);
 801420e:	89b8      	ldrh	r0, [r7, #12]
 8014210:	693b      	ldr	r3, [r7, #16]
 8014212:	f103 01f0 	add.w	r1, r3, #240	; 0xf0
 8014216:	7fbb      	ldrb	r3, [r7, #30]
 8014218:	4a29      	ldr	r2, [pc, #164]	; (80142c0 <dhcp_rebind+0x128>)
 801421a:	5cd3      	ldrb	r3, [r2, r3]
 801421c:	461a      	mov	r2, r3
 801421e:	f000 f9f5 	bl	801460c <dhcp_option_byte>
 8014222:	4603      	mov	r3, r0
 8014224:	81bb      	strh	r3, [r7, #12]
    for (i = 0; i < LWIP_ARRAYSIZE(dhcp_discover_request_options); i++) {
 8014226:	7fbb      	ldrb	r3, [r7, #30]
 8014228:	3301      	adds	r3, #1
 801422a:	77bb      	strb	r3, [r7, #30]
 801422c:	7fbb      	ldrb	r3, [r7, #30]
 801422e:	2b03      	cmp	r3, #3
 8014230:	d9ed      	bls.n	801420e <dhcp_rebind+0x76>
#if LWIP_NETIF_HOSTNAME
    options_out_len = dhcp_option_hostname(options_out_len, msg_out->options, netif);
#endif /* LWIP_NETIF_HOSTNAME */

    LWIP_HOOK_DHCP_APPEND_OPTIONS(netif, dhcp, DHCP_STATE_REBINDING, msg_out, DHCP_DISCOVER, &options_out_len);
    dhcp_option_trailer(options_out_len, msg_out->options, p_out);
 8014232:	89b8      	ldrh	r0, [r7, #12]
 8014234:	693b      	ldr	r3, [r7, #16]
 8014236:	33f0      	adds	r3, #240	; 0xf0
 8014238:	697a      	ldr	r2, [r7, #20]
 801423a:	4619      	mov	r1, r3
 801423c:	f000 ff2a 	bl	8015094 <dhcp_option_trailer>

    /* broadcast to server */
    result = udp_sendto_if(dhcp_pcb, p_out, IP_ADDR_BROADCAST, LWIP_IANA_PORT_DHCP_SERVER, netif);
 8014240:	4b20      	ldr	r3, [pc, #128]	; (80142c4 <dhcp_rebind+0x12c>)
 8014242:	6818      	ldr	r0, [r3, #0]
 8014244:	687b      	ldr	r3, [r7, #4]
 8014246:	9300      	str	r3, [sp, #0]
 8014248:	2343      	movs	r3, #67	; 0x43
 801424a:	4a1f      	ldr	r2, [pc, #124]	; (80142c8 <dhcp_rebind+0x130>)
 801424c:	6979      	ldr	r1, [r7, #20]
 801424e:	f7fe fd99 	bl	8012d84 <udp_sendto_if>
 8014252:	4603      	mov	r3, r0
 8014254:	77fb      	strb	r3, [r7, #31]
    pbuf_free(p_out);
 8014256:	6978      	ldr	r0, [r7, #20]
 8014258:	f7f7 fe72 	bl	800bf40 <pbuf_free>
 801425c:	e001      	b.n	8014262 <dhcp_rebind+0xca>
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("dhcp_rebind: REBINDING\n"));
  } else {
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_SERIOUS, ("dhcp_rebind: could not allocate DHCP request\n"));
    result = ERR_MEM;
 801425e:	23ff      	movs	r3, #255	; 0xff
 8014260:	77fb      	strb	r3, [r7, #31]
  }
  if (dhcp->tries < 255) {
 8014262:	69bb      	ldr	r3, [r7, #24]
 8014264:	799b      	ldrb	r3, [r3, #6]
 8014266:	2bff      	cmp	r3, #255	; 0xff
 8014268:	d005      	beq.n	8014276 <dhcp_rebind+0xde>
    dhcp->tries++;
 801426a:	69bb      	ldr	r3, [r7, #24]
 801426c:	799b      	ldrb	r3, [r3, #6]
 801426e:	3301      	adds	r3, #1
 8014270:	b2da      	uxtb	r2, r3
 8014272:	69bb      	ldr	r3, [r7, #24]
 8014274:	719a      	strb	r2, [r3, #6]
  }
  msecs = (u16_t)(dhcp->tries < 10 ? dhcp->tries * 1000 : 10 * 1000);
 8014276:	69bb      	ldr	r3, [r7, #24]
 8014278:	799b      	ldrb	r3, [r3, #6]
 801427a:	2b09      	cmp	r3, #9
 801427c:	d80a      	bhi.n	8014294 <dhcp_rebind+0xfc>
 801427e:	69bb      	ldr	r3, [r7, #24]
 8014280:	799b      	ldrb	r3, [r3, #6]
 8014282:	b29b      	uxth	r3, r3
 8014284:	461a      	mov	r2, r3
 8014286:	0152      	lsls	r2, r2, #5
 8014288:	1ad2      	subs	r2, r2, r3
 801428a:	0092      	lsls	r2, r2, #2
 801428c:	4413      	add	r3, r2
 801428e:	00db      	lsls	r3, r3, #3
 8014290:	b29b      	uxth	r3, r3
 8014292:	e001      	b.n	8014298 <dhcp_rebind+0x100>
 8014294:	f242 7310 	movw	r3, #10000	; 0x2710
 8014298:	81fb      	strh	r3, [r7, #14]
  dhcp->request_timeout = (u16_t)((msecs + DHCP_FINE_TIMER_MSECS - 1) / DHCP_FINE_TIMER_MSECS);
 801429a:	89fb      	ldrh	r3, [r7, #14]
 801429c:	f203 13f3 	addw	r3, r3, #499	; 0x1f3
 80142a0:	4a0a      	ldr	r2, [pc, #40]	; (80142cc <dhcp_rebind+0x134>)
 80142a2:	fb82 1203 	smull	r1, r2, r2, r3
 80142a6:	1152      	asrs	r2, r2, #5
 80142a8:	17db      	asrs	r3, r3, #31
 80142aa:	1ad3      	subs	r3, r2, r3
 80142ac:	b29a      	uxth	r2, r3
 80142ae:	69bb      	ldr	r3, [r7, #24]
 80142b0:	811a      	strh	r2, [r3, #8]
  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("dhcp_rebind(): set request timeout %"U16_F" msecs\n", msecs));
  return result;
 80142b2:	f997 301f 	ldrsb.w	r3, [r7, #31]
}
 80142b6:	4618      	mov	r0, r3
 80142b8:	3720      	adds	r7, #32
 80142ba:	46bd      	mov	sp, r7
 80142bc:	bd80      	pop	{r7, pc}
 80142be:	bf00      	nop
 80142c0:	200000b4 	.word	0x200000b4
 80142c4:	200089b0 	.word	0x200089b0
 80142c8:	0801c2c8 	.word	0x0801c2c8
 80142cc:	10624dd3 	.word	0x10624dd3

080142d0 <dhcp_reboot>:
 *
 * @param netif network interface which must reboot
 */
static err_t
dhcp_reboot(struct netif *netif)
{
 80142d0:	b5b0      	push	{r4, r5, r7, lr}
 80142d2:	b08a      	sub	sp, #40	; 0x28
 80142d4:	af02      	add	r7, sp, #8
 80142d6:	6078      	str	r0, [r7, #4]
  struct dhcp *dhcp = netif_dhcp_data(netif);
 80142d8:	687b      	ldr	r3, [r7, #4]
 80142da:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80142dc:	61bb      	str	r3, [r7, #24]
  u8_t i;
  struct pbuf *p_out;
  u16_t options_out_len;

  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("dhcp_reboot()\n"));
  dhcp_set_state(dhcp, DHCP_STATE_REBOOTING);
 80142de:	2103      	movs	r1, #3
 80142e0:	69b8      	ldr	r0, [r7, #24]
 80142e2:	f000 f945 	bl	8014570 <dhcp_set_state>

  /* create and initialize the DHCP message header */
  p_out = dhcp_create_msg(netif, dhcp, DHCP_REQUEST, &options_out_len);
 80142e6:	f107 030c 	add.w	r3, r7, #12
 80142ea:	2203      	movs	r2, #3
 80142ec:	69b9      	ldr	r1, [r7, #24]
 80142ee:	6878      	ldr	r0, [r7, #4]
 80142f0:	f000 fdfa 	bl	8014ee8 <dhcp_create_msg>
 80142f4:	6178      	str	r0, [r7, #20]
  if (p_out != NULL) {
 80142f6:	697b      	ldr	r3, [r7, #20]
 80142f8:	2b00      	cmp	r3, #0
 80142fa:	d066      	beq.n	80143ca <dhcp_reboot+0xfa>
    struct dhcp_msg *msg_out = (struct dhcp_msg *)p_out->payload;
 80142fc:	697b      	ldr	r3, [r7, #20]
 80142fe:	685b      	ldr	r3, [r3, #4]
 8014300:	613b      	str	r3, [r7, #16]
    options_out_len = dhcp_option(options_out_len, msg_out->options, DHCP_OPTION_MAX_MSG_SIZE, DHCP_OPTION_MAX_MSG_SIZE_LEN);
 8014302:	89b8      	ldrh	r0, [r7, #12]
 8014304:	693b      	ldr	r3, [r7, #16]
 8014306:	f103 01f0 	add.w	r1, r3, #240	; 0xf0
 801430a:	2302      	movs	r3, #2
 801430c:	2239      	movs	r2, #57	; 0x39
 801430e:	f000 f949 	bl	80145a4 <dhcp_option>
 8014312:	4603      	mov	r3, r0
 8014314:	81bb      	strh	r3, [r7, #12]
    options_out_len = dhcp_option_short(options_out_len, msg_out->options, DHCP_MAX_MSG_LEN_MIN_REQUIRED);
 8014316:	89b8      	ldrh	r0, [r7, #12]
 8014318:	693b      	ldr	r3, [r7, #16]
 801431a:	33f0      	adds	r3, #240	; 0xf0
 801431c:	f44f 7210 	mov.w	r2, #576	; 0x240
 8014320:	4619      	mov	r1, r3
 8014322:	f000 f999 	bl	8014658 <dhcp_option_short>
 8014326:	4603      	mov	r3, r0
 8014328:	81bb      	strh	r3, [r7, #12]

    options_out_len = dhcp_option(options_out_len, msg_out->options, DHCP_OPTION_REQUESTED_IP, 4);
 801432a:	89b8      	ldrh	r0, [r7, #12]
 801432c:	693b      	ldr	r3, [r7, #16]
 801432e:	f103 01f0 	add.w	r1, r3, #240	; 0xf0
 8014332:	2304      	movs	r3, #4
 8014334:	2232      	movs	r2, #50	; 0x32
 8014336:	f000 f935 	bl	80145a4 <dhcp_option>
 801433a:	4603      	mov	r3, r0
 801433c:	81bb      	strh	r3, [r7, #12]
    options_out_len = dhcp_option_long(options_out_len, msg_out->options, lwip_ntohl(ip4_addr_get_u32(&dhcp->offered_ip_addr)));
 801433e:	89bc      	ldrh	r4, [r7, #12]
 8014340:	693b      	ldr	r3, [r7, #16]
 8014342:	f103 05f0 	add.w	r5, r3, #240	; 0xf0
 8014346:	69bb      	ldr	r3, [r7, #24]
 8014348:	69db      	ldr	r3, [r3, #28]
 801434a:	4618      	mov	r0, r3
 801434c:	f7f5 ffb5 	bl	800a2ba <lwip_htonl>
 8014350:	4603      	mov	r3, r0
 8014352:	461a      	mov	r2, r3
 8014354:	4629      	mov	r1, r5
 8014356:	4620      	mov	r0, r4
 8014358:	f000 f9b0 	bl	80146bc <dhcp_option_long>
 801435c:	4603      	mov	r3, r0
 801435e:	81bb      	strh	r3, [r7, #12]

    options_out_len = dhcp_option(options_out_len, msg_out->options, DHCP_OPTION_PARAMETER_REQUEST_LIST, LWIP_ARRAYSIZE(dhcp_discover_request_options));
 8014360:	89b8      	ldrh	r0, [r7, #12]
 8014362:	693b      	ldr	r3, [r7, #16]
 8014364:	f103 01f0 	add.w	r1, r3, #240	; 0xf0
 8014368:	2304      	movs	r3, #4
 801436a:	2237      	movs	r2, #55	; 0x37
 801436c:	f000 f91a 	bl	80145a4 <dhcp_option>
 8014370:	4603      	mov	r3, r0
 8014372:	81bb      	strh	r3, [r7, #12]
    for (i = 0; i < LWIP_ARRAYSIZE(dhcp_discover_request_options); i++) {
 8014374:	2300      	movs	r3, #0
 8014376:	77bb      	strb	r3, [r7, #30]
 8014378:	e00e      	b.n	8014398 <dhcp_reboot+0xc8>
      options_out_len = dhcp_option_byte(options_out_len, msg_out->options, dhcp_discover_request_options[i]);
 801437a:	89b8      	ldrh	r0, [r7, #12]
 801437c:	693b      	ldr	r3, [r7, #16]
 801437e:	f103 01f0 	add.w	r1, r3, #240	; 0xf0
 8014382:	7fbb      	ldrb	r3, [r7, #30]
 8014384:	4a29      	ldr	r2, [pc, #164]	; (801442c <dhcp_reboot+0x15c>)
 8014386:	5cd3      	ldrb	r3, [r2, r3]
 8014388:	461a      	mov	r2, r3
 801438a:	f000 f93f 	bl	801460c <dhcp_option_byte>
 801438e:	4603      	mov	r3, r0
 8014390:	81bb      	strh	r3, [r7, #12]
    for (i = 0; i < LWIP_ARRAYSIZE(dhcp_discover_request_options); i++) {
 8014392:	7fbb      	ldrb	r3, [r7, #30]
 8014394:	3301      	adds	r3, #1
 8014396:	77bb      	strb	r3, [r7, #30]
 8014398:	7fbb      	ldrb	r3, [r7, #30]
 801439a:	2b03      	cmp	r3, #3
 801439c:	d9ed      	bls.n	801437a <dhcp_reboot+0xaa>
#if LWIP_NETIF_HOSTNAME
    options_out_len = dhcp_option_hostname(options_out_len, msg_out->options, netif);
#endif /* LWIP_NETIF_HOSTNAME */

    LWIP_HOOK_DHCP_APPEND_OPTIONS(netif, dhcp, DHCP_STATE_REBOOTING, msg_out, DHCP_REQUEST, &options_out_len);
    dhcp_option_trailer(options_out_len, msg_out->options, p_out);
 801439e:	89b8      	ldrh	r0, [r7, #12]
 80143a0:	693b      	ldr	r3, [r7, #16]
 80143a2:	33f0      	adds	r3, #240	; 0xf0
 80143a4:	697a      	ldr	r2, [r7, #20]
 80143a6:	4619      	mov	r1, r3
 80143a8:	f000 fe74 	bl	8015094 <dhcp_option_trailer>

    /* broadcast to server */
    result = udp_sendto_if(dhcp_pcb, p_out, IP_ADDR_BROADCAST, LWIP_IANA_PORT_DHCP_SERVER, netif);
 80143ac:	4b20      	ldr	r3, [pc, #128]	; (8014430 <dhcp_reboot+0x160>)
 80143ae:	6818      	ldr	r0, [r3, #0]
 80143b0:	687b      	ldr	r3, [r7, #4]
 80143b2:	9300      	str	r3, [sp, #0]
 80143b4:	2343      	movs	r3, #67	; 0x43
 80143b6:	4a1f      	ldr	r2, [pc, #124]	; (8014434 <dhcp_reboot+0x164>)
 80143b8:	6979      	ldr	r1, [r7, #20]
 80143ba:	f7fe fce3 	bl	8012d84 <udp_sendto_if>
 80143be:	4603      	mov	r3, r0
 80143c0:	77fb      	strb	r3, [r7, #31]
    pbuf_free(p_out);
 80143c2:	6978      	ldr	r0, [r7, #20]
 80143c4:	f7f7 fdbc 	bl	800bf40 <pbuf_free>
 80143c8:	e001      	b.n	80143ce <dhcp_reboot+0xfe>
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("dhcp_reboot: REBOOTING\n"));
  } else {
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_SERIOUS, ("dhcp_reboot: could not allocate DHCP request\n"));
    result = ERR_MEM;
 80143ca:	23ff      	movs	r3, #255	; 0xff
 80143cc:	77fb      	strb	r3, [r7, #31]
  }
  if (dhcp->tries < 255) {
 80143ce:	69bb      	ldr	r3, [r7, #24]
 80143d0:	799b      	ldrb	r3, [r3, #6]
 80143d2:	2bff      	cmp	r3, #255	; 0xff
 80143d4:	d005      	beq.n	80143e2 <dhcp_reboot+0x112>
    dhcp->tries++;
 80143d6:	69bb      	ldr	r3, [r7, #24]
 80143d8:	799b      	ldrb	r3, [r3, #6]
 80143da:	3301      	adds	r3, #1
 80143dc:	b2da      	uxtb	r2, r3
 80143de:	69bb      	ldr	r3, [r7, #24]
 80143e0:	719a      	strb	r2, [r3, #6]
  }
  msecs = (u16_t)(dhcp->tries < 10 ? dhcp->tries * 1000 : 10 * 1000);
 80143e2:	69bb      	ldr	r3, [r7, #24]
 80143e4:	799b      	ldrb	r3, [r3, #6]
 80143e6:	2b09      	cmp	r3, #9
 80143e8:	d80a      	bhi.n	8014400 <dhcp_reboot+0x130>
 80143ea:	69bb      	ldr	r3, [r7, #24]
 80143ec:	799b      	ldrb	r3, [r3, #6]
 80143ee:	b29b      	uxth	r3, r3
 80143f0:	461a      	mov	r2, r3
 80143f2:	0152      	lsls	r2, r2, #5
 80143f4:	1ad2      	subs	r2, r2, r3
 80143f6:	0092      	lsls	r2, r2, #2
 80143f8:	4413      	add	r3, r2
 80143fa:	00db      	lsls	r3, r3, #3
 80143fc:	b29b      	uxth	r3, r3
 80143fe:	e001      	b.n	8014404 <dhcp_reboot+0x134>
 8014400:	f242 7310 	movw	r3, #10000	; 0x2710
 8014404:	81fb      	strh	r3, [r7, #14]
  dhcp->request_timeout = (u16_t)((msecs + DHCP_FINE_TIMER_MSECS - 1) / DHCP_FINE_TIMER_MSECS);
 8014406:	89fb      	ldrh	r3, [r7, #14]
 8014408:	f203 13f3 	addw	r3, r3, #499	; 0x1f3
 801440c:	4a0a      	ldr	r2, [pc, #40]	; (8014438 <dhcp_reboot+0x168>)
 801440e:	fb82 1203 	smull	r1, r2, r2, r3
 8014412:	1152      	asrs	r2, r2, #5
 8014414:	17db      	asrs	r3, r3, #31
 8014416:	1ad3      	subs	r3, r2, r3
 8014418:	b29a      	uxth	r2, r3
 801441a:	69bb      	ldr	r3, [r7, #24]
 801441c:	811a      	strh	r2, [r3, #8]
  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("dhcp_reboot(): set request timeout %"U16_F" msecs\n", msecs));
  return result;
 801441e:	f997 301f 	ldrsb.w	r3, [r7, #31]
}
 8014422:	4618      	mov	r0, r3
 8014424:	3720      	adds	r7, #32
 8014426:	46bd      	mov	sp, r7
 8014428:	bdb0      	pop	{r4, r5, r7, pc}
 801442a:	bf00      	nop
 801442c:	200000b4 	.word	0x200000b4
 8014430:	200089b0 	.word	0x200089b0
 8014434:	0801c2c8 	.word	0x0801c2c8
 8014438:	10624dd3 	.word	0x10624dd3

0801443c <dhcp_release_and_stop>:
 *
 * @param netif network interface
 */
void
dhcp_release_and_stop(struct netif *netif)
{
 801443c:	b5b0      	push	{r4, r5, r7, lr}
 801443e:	b08a      	sub	sp, #40	; 0x28
 8014440:	af02      	add	r7, sp, #8
 8014442:	6078      	str	r0, [r7, #4]
  struct dhcp *dhcp = netif_dhcp_data(netif);
 8014444:	687b      	ldr	r3, [r7, #4]
 8014446:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8014448:	61fb      	str	r3, [r7, #28]
  ip_addr_t server_ip_addr;

  LWIP_ASSERT_CORE_LOCKED();
  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("dhcp_release_and_stop()\n"));
  if (dhcp == NULL) {
 801444a:	69fb      	ldr	r3, [r7, #28]
 801444c:	2b00      	cmp	r3, #0
 801444e:	f000 8084 	beq.w	801455a <dhcp_release_and_stop+0x11e>
    return;
  }

  /* already off? -> nothing to do */
  if (dhcp->state == DHCP_STATE_OFF) {
 8014452:	69fb      	ldr	r3, [r7, #28]
 8014454:	795b      	ldrb	r3, [r3, #5]
 8014456:	2b00      	cmp	r3, #0
 8014458:	f000 8081 	beq.w	801455e <dhcp_release_and_stop+0x122>
    return;
  }

  ip_addr_copy(server_ip_addr, dhcp->server_ip_addr);
 801445c:	69fb      	ldr	r3, [r7, #28]
 801445e:	699b      	ldr	r3, [r3, #24]
 8014460:	613b      	str	r3, [r7, #16]

  /* clean old DHCP offer */
  ip_addr_set_zero_ip4(&dhcp->server_ip_addr);
 8014462:	69fb      	ldr	r3, [r7, #28]
 8014464:	2200      	movs	r2, #0
 8014466:	619a      	str	r2, [r3, #24]
  ip4_addr_set_zero(&dhcp->offered_ip_addr);
 8014468:	69fb      	ldr	r3, [r7, #28]
 801446a:	2200      	movs	r2, #0
 801446c:	61da      	str	r2, [r3, #28]
  ip4_addr_set_zero(&dhcp->offered_sn_mask);
 801446e:	69fb      	ldr	r3, [r7, #28]
 8014470:	2200      	movs	r2, #0
 8014472:	621a      	str	r2, [r3, #32]
  ip4_addr_set_zero(&dhcp->offered_gw_addr);
 8014474:	69fb      	ldr	r3, [r7, #28]
 8014476:	2200      	movs	r2, #0
 8014478:	625a      	str	r2, [r3, #36]	; 0x24
#if LWIP_DHCP_BOOTP_FILE
  ip4_addr_set_zero(&dhcp->offered_si_addr);
#endif /* LWIP_DHCP_BOOTP_FILE */
  dhcp->offered_t0_lease = dhcp->offered_t1_renew = dhcp->offered_t2_rebind = 0;
 801447a:	69fb      	ldr	r3, [r7, #28]
 801447c:	2200      	movs	r2, #0
 801447e:	631a      	str	r2, [r3, #48]	; 0x30
 8014480:	69fb      	ldr	r3, [r7, #28]
 8014482:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8014484:	69fb      	ldr	r3, [r7, #28]
 8014486:	62da      	str	r2, [r3, #44]	; 0x2c
 8014488:	69fb      	ldr	r3, [r7, #28]
 801448a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 801448c:	69fb      	ldr	r3, [r7, #28]
 801448e:	629a      	str	r2, [r3, #40]	; 0x28
  dhcp->t1_renew_time = dhcp->t2_rebind_time = dhcp->lease_used = dhcp->t0_timeout = 0;
 8014490:	69fb      	ldr	r3, [r7, #28]
 8014492:	2200      	movs	r2, #0
 8014494:	829a      	strh	r2, [r3, #20]
 8014496:	69fb      	ldr	r3, [r7, #28]
 8014498:	8a9a      	ldrh	r2, [r3, #20]
 801449a:	69fb      	ldr	r3, [r7, #28]
 801449c:	825a      	strh	r2, [r3, #18]
 801449e:	69fb      	ldr	r3, [r7, #28]
 80144a0:	8a5a      	ldrh	r2, [r3, #18]
 80144a2:	69fb      	ldr	r3, [r7, #28]
 80144a4:	821a      	strh	r2, [r3, #16]
 80144a6:	69fb      	ldr	r3, [r7, #28]
 80144a8:	8a1a      	ldrh	r2, [r3, #16]
 80144aa:	69fb      	ldr	r3, [r7, #28]
 80144ac:	81da      	strh	r2, [r3, #14]

  /* send release message when current IP was assigned via DHCP */
  if (dhcp_supplied_address(netif)) {
 80144ae:	6878      	ldr	r0, [r7, #4]
 80144b0:	f000 fe1e 	bl	80150f0 <dhcp_supplied_address>
 80144b4:	4603      	mov	r3, r0
 80144b6:	2b00      	cmp	r3, #0
 80144b8:	d03b      	beq.n	8014532 <dhcp_release_and_stop+0xf6>
    /* create and initialize the DHCP message header */
    struct pbuf *p_out;
    u16_t options_out_len;
    p_out = dhcp_create_msg(netif, dhcp, DHCP_RELEASE, &options_out_len);
 80144ba:	f107 030e 	add.w	r3, r7, #14
 80144be:	2207      	movs	r2, #7
 80144c0:	69f9      	ldr	r1, [r7, #28]
 80144c2:	6878      	ldr	r0, [r7, #4]
 80144c4:	f000 fd10 	bl	8014ee8 <dhcp_create_msg>
 80144c8:	61b8      	str	r0, [r7, #24]
    if (p_out != NULL) {
 80144ca:	69bb      	ldr	r3, [r7, #24]
 80144cc:	2b00      	cmp	r3, #0
 80144ce:	d030      	beq.n	8014532 <dhcp_release_and_stop+0xf6>
      struct dhcp_msg *msg_out = (struct dhcp_msg *)p_out->payload;
 80144d0:	69bb      	ldr	r3, [r7, #24]
 80144d2:	685b      	ldr	r3, [r3, #4]
 80144d4:	617b      	str	r3, [r7, #20]
      options_out_len = dhcp_option(options_out_len, msg_out->options, DHCP_OPTION_SERVER_ID, 4);
 80144d6:	89f8      	ldrh	r0, [r7, #14]
 80144d8:	697b      	ldr	r3, [r7, #20]
 80144da:	f103 01f0 	add.w	r1, r3, #240	; 0xf0
 80144de:	2304      	movs	r3, #4
 80144e0:	2236      	movs	r2, #54	; 0x36
 80144e2:	f000 f85f 	bl	80145a4 <dhcp_option>
 80144e6:	4603      	mov	r3, r0
 80144e8:	81fb      	strh	r3, [r7, #14]
      options_out_len = dhcp_option_long(options_out_len, msg_out->options, lwip_ntohl(ip4_addr_get_u32(ip_2_ip4(&server_ip_addr))));
 80144ea:	89fc      	ldrh	r4, [r7, #14]
 80144ec:	697b      	ldr	r3, [r7, #20]
 80144ee:	f103 05f0 	add.w	r5, r3, #240	; 0xf0
 80144f2:	693b      	ldr	r3, [r7, #16]
 80144f4:	4618      	mov	r0, r3
 80144f6:	f7f5 fee0 	bl	800a2ba <lwip_htonl>
 80144fa:	4603      	mov	r3, r0
 80144fc:	461a      	mov	r2, r3
 80144fe:	4629      	mov	r1, r5
 8014500:	4620      	mov	r0, r4
 8014502:	f000 f8db 	bl	80146bc <dhcp_option_long>
 8014506:	4603      	mov	r3, r0
 8014508:	81fb      	strh	r3, [r7, #14]

      LWIP_HOOK_DHCP_APPEND_OPTIONS(netif, dhcp, dhcp->state, msg_out, DHCP_RELEASE, &options_out_len);
      dhcp_option_trailer(options_out_len, msg_out->options, p_out);
 801450a:	89f8      	ldrh	r0, [r7, #14]
 801450c:	697b      	ldr	r3, [r7, #20]
 801450e:	33f0      	adds	r3, #240	; 0xf0
 8014510:	69ba      	ldr	r2, [r7, #24]
 8014512:	4619      	mov	r1, r3
 8014514:	f000 fdbe 	bl	8015094 <dhcp_option_trailer>

      udp_sendto_if(dhcp_pcb, p_out, &server_ip_addr, LWIP_IANA_PORT_DHCP_SERVER, netif);
 8014518:	4b13      	ldr	r3, [pc, #76]	; (8014568 <dhcp_release_and_stop+0x12c>)
 801451a:	6818      	ldr	r0, [r3, #0]
 801451c:	f107 0210 	add.w	r2, r7, #16
 8014520:	687b      	ldr	r3, [r7, #4]
 8014522:	9300      	str	r3, [sp, #0]
 8014524:	2343      	movs	r3, #67	; 0x43
 8014526:	69b9      	ldr	r1, [r7, #24]
 8014528:	f7fe fc2c 	bl	8012d84 <udp_sendto_if>
      pbuf_free(p_out);
 801452c:	69b8      	ldr	r0, [r7, #24]
 801452e:	f7f7 fd07 	bl	800bf40 <pbuf_free>
      LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_SERIOUS, ("dhcp_release: could not allocate DHCP request\n"));
    }
  }

  /* remove IP address from interface (prevents routing from selecting this interface) */
  netif_set_addr(netif, IP4_ADDR_ANY4, IP4_ADDR_ANY4, IP4_ADDR_ANY4);
 8014532:	4b0e      	ldr	r3, [pc, #56]	; (801456c <dhcp_release_and_stop+0x130>)
 8014534:	4a0d      	ldr	r2, [pc, #52]	; (801456c <dhcp_release_and_stop+0x130>)
 8014536:	490d      	ldr	r1, [pc, #52]	; (801456c <dhcp_release_and_stop+0x130>)
 8014538:	6878      	ldr	r0, [r7, #4]
 801453a:	f7f7 f821 	bl	800b580 <netif_set_addr>
    autoip_stop(netif);
    dhcp->autoip_coop_state = DHCP_AUTOIP_COOP_STATE_OFF;
  }
#endif /* LWIP_DHCP_AUTOIP_COOP */

  dhcp_set_state(dhcp, DHCP_STATE_OFF);
 801453e:	2100      	movs	r1, #0
 8014540:	69f8      	ldr	r0, [r7, #28]
 8014542:	f000 f815 	bl	8014570 <dhcp_set_state>

  if (dhcp->pcb_allocated != 0) {
 8014546:	69fb      	ldr	r3, [r7, #28]
 8014548:	791b      	ldrb	r3, [r3, #4]
 801454a:	2b00      	cmp	r3, #0
 801454c:	d008      	beq.n	8014560 <dhcp_release_and_stop+0x124>
    dhcp_dec_pcb_refcount(); /* free DHCP PCB if not needed any more */
 801454e:	f7fe ff65 	bl	801341c <dhcp_dec_pcb_refcount>
    dhcp->pcb_allocated = 0;
 8014552:	69fb      	ldr	r3, [r7, #28]
 8014554:	2200      	movs	r2, #0
 8014556:	711a      	strb	r2, [r3, #4]
 8014558:	e002      	b.n	8014560 <dhcp_release_and_stop+0x124>
    return;
 801455a:	bf00      	nop
 801455c:	e000      	b.n	8014560 <dhcp_release_and_stop+0x124>
    return;
 801455e:	bf00      	nop
  }
}
 8014560:	3720      	adds	r7, #32
 8014562:	46bd      	mov	sp, r7
 8014564:	bdb0      	pop	{r4, r5, r7, pc}
 8014566:	bf00      	nop
 8014568:	200089b0 	.word	0x200089b0
 801456c:	0801c2c4 	.word	0x0801c2c4

08014570 <dhcp_set_state>:
 *
 * If the state changed, reset the number of tries.
 */
static void
dhcp_set_state(struct dhcp *dhcp, u8_t new_state)
{
 8014570:	b480      	push	{r7}
 8014572:	b083      	sub	sp, #12
 8014574:	af00      	add	r7, sp, #0
 8014576:	6078      	str	r0, [r7, #4]
 8014578:	460b      	mov	r3, r1
 801457a:	70fb      	strb	r3, [r7, #3]
  if (new_state != dhcp->state) {
 801457c:	687b      	ldr	r3, [r7, #4]
 801457e:	795b      	ldrb	r3, [r3, #5]
 8014580:	78fa      	ldrb	r2, [r7, #3]
 8014582:	429a      	cmp	r2, r3
 8014584:	d008      	beq.n	8014598 <dhcp_set_state+0x28>
    dhcp->state = new_state;
 8014586:	687b      	ldr	r3, [r7, #4]
 8014588:	78fa      	ldrb	r2, [r7, #3]
 801458a:	715a      	strb	r2, [r3, #5]
    dhcp->tries = 0;
 801458c:	687b      	ldr	r3, [r7, #4]
 801458e:	2200      	movs	r2, #0
 8014590:	719a      	strb	r2, [r3, #6]
    dhcp->request_timeout = 0;
 8014592:	687b      	ldr	r3, [r7, #4]
 8014594:	2200      	movs	r2, #0
 8014596:	811a      	strh	r2, [r3, #8]
  }
}
 8014598:	bf00      	nop
 801459a:	370c      	adds	r7, #12
 801459c:	46bd      	mov	sp, r7
 801459e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80145a2:	4770      	bx	lr

080145a4 <dhcp_option>:
 * DHCP message.
 *
 */
static u16_t
dhcp_option(u16_t options_out_len, u8_t *options, u8_t option_type, u8_t option_len)
{
 80145a4:	b580      	push	{r7, lr}
 80145a6:	b082      	sub	sp, #8
 80145a8:	af00      	add	r7, sp, #0
 80145aa:	6039      	str	r1, [r7, #0]
 80145ac:	4611      	mov	r1, r2
 80145ae:	461a      	mov	r2, r3
 80145b0:	4603      	mov	r3, r0
 80145b2:	80fb      	strh	r3, [r7, #6]
 80145b4:	460b      	mov	r3, r1
 80145b6:	717b      	strb	r3, [r7, #5]
 80145b8:	4613      	mov	r3, r2
 80145ba:	713b      	strb	r3, [r7, #4]
  LWIP_ASSERT("dhcp_option: options_out_len + 2 + option_len <= DHCP_OPTIONS_LEN", options_out_len + 2U + option_len <= DHCP_OPTIONS_LEN);
 80145bc:	88fa      	ldrh	r2, [r7, #6]
 80145be:	793b      	ldrb	r3, [r7, #4]
 80145c0:	4413      	add	r3, r2
 80145c2:	3302      	adds	r3, #2
 80145c4:	2b44      	cmp	r3, #68	; 0x44
 80145c6:	d906      	bls.n	80145d6 <dhcp_option+0x32>
 80145c8:	4b0d      	ldr	r3, [pc, #52]	; (8014600 <dhcp_option+0x5c>)
 80145ca:	f240 529a 	movw	r2, #1434	; 0x59a
 80145ce:	490d      	ldr	r1, [pc, #52]	; (8014604 <dhcp_option+0x60>)
 80145d0:	480d      	ldr	r0, [pc, #52]	; (8014608 <dhcp_option+0x64>)
 80145d2:	f003 ff59 	bl	8018488 <iprintf>
  options[options_out_len++] = option_type;
 80145d6:	88fb      	ldrh	r3, [r7, #6]
 80145d8:	1c5a      	adds	r2, r3, #1
 80145da:	80fa      	strh	r2, [r7, #6]
 80145dc:	461a      	mov	r2, r3
 80145de:	683b      	ldr	r3, [r7, #0]
 80145e0:	4413      	add	r3, r2
 80145e2:	797a      	ldrb	r2, [r7, #5]
 80145e4:	701a      	strb	r2, [r3, #0]
  options[options_out_len++] = option_len;
 80145e6:	88fb      	ldrh	r3, [r7, #6]
 80145e8:	1c5a      	adds	r2, r3, #1
 80145ea:	80fa      	strh	r2, [r7, #6]
 80145ec:	461a      	mov	r2, r3
 80145ee:	683b      	ldr	r3, [r7, #0]
 80145f0:	4413      	add	r3, r2
 80145f2:	793a      	ldrb	r2, [r7, #4]
 80145f4:	701a      	strb	r2, [r3, #0]
  return options_out_len;
 80145f6:	88fb      	ldrh	r3, [r7, #6]
}
 80145f8:	4618      	mov	r0, r3
 80145fa:	3708      	adds	r7, #8
 80145fc:	46bd      	mov	sp, r7
 80145fe:	bd80      	pop	{r7, pc}
 8014600:	0801b6f4 	.word	0x0801b6f4
 8014604:	0801b888 	.word	0x0801b888
 8014608:	0801b754 	.word	0x0801b754

0801460c <dhcp_option_byte>:
 * Concatenate a single byte to the outgoing DHCP message.
 *
 */
static u16_t
dhcp_option_byte(u16_t options_out_len, u8_t *options, u8_t value)
{
 801460c:	b580      	push	{r7, lr}
 801460e:	b082      	sub	sp, #8
 8014610:	af00      	add	r7, sp, #0
 8014612:	4603      	mov	r3, r0
 8014614:	6039      	str	r1, [r7, #0]
 8014616:	80fb      	strh	r3, [r7, #6]
 8014618:	4613      	mov	r3, r2
 801461a:	717b      	strb	r3, [r7, #5]
  LWIP_ASSERT("dhcp_option_byte: options_out_len < DHCP_OPTIONS_LEN", options_out_len < DHCP_OPTIONS_LEN);
 801461c:	88fb      	ldrh	r3, [r7, #6]
 801461e:	2b43      	cmp	r3, #67	; 0x43
 8014620:	d906      	bls.n	8014630 <dhcp_option_byte+0x24>
 8014622:	4b0a      	ldr	r3, [pc, #40]	; (801464c <dhcp_option_byte+0x40>)
 8014624:	f240 52a6 	movw	r2, #1446	; 0x5a6
 8014628:	4909      	ldr	r1, [pc, #36]	; (8014650 <dhcp_option_byte+0x44>)
 801462a:	480a      	ldr	r0, [pc, #40]	; (8014654 <dhcp_option_byte+0x48>)
 801462c:	f003 ff2c 	bl	8018488 <iprintf>
  options[options_out_len++] = value;
 8014630:	88fb      	ldrh	r3, [r7, #6]
 8014632:	1c5a      	adds	r2, r3, #1
 8014634:	80fa      	strh	r2, [r7, #6]
 8014636:	461a      	mov	r2, r3
 8014638:	683b      	ldr	r3, [r7, #0]
 801463a:	4413      	add	r3, r2
 801463c:	797a      	ldrb	r2, [r7, #5]
 801463e:	701a      	strb	r2, [r3, #0]
  return options_out_len;
 8014640:	88fb      	ldrh	r3, [r7, #6]
}
 8014642:	4618      	mov	r0, r3
 8014644:	3708      	adds	r7, #8
 8014646:	46bd      	mov	sp, r7
 8014648:	bd80      	pop	{r7, pc}
 801464a:	bf00      	nop
 801464c:	0801b6f4 	.word	0x0801b6f4
 8014650:	0801b8cc 	.word	0x0801b8cc
 8014654:	0801b754 	.word	0x0801b754

08014658 <dhcp_option_short>:

static u16_t
dhcp_option_short(u16_t options_out_len, u8_t *options, u16_t value)
{
 8014658:	b580      	push	{r7, lr}
 801465a:	b082      	sub	sp, #8
 801465c:	af00      	add	r7, sp, #0
 801465e:	4603      	mov	r3, r0
 8014660:	6039      	str	r1, [r7, #0]
 8014662:	80fb      	strh	r3, [r7, #6]
 8014664:	4613      	mov	r3, r2
 8014666:	80bb      	strh	r3, [r7, #4]
  LWIP_ASSERT("dhcp_option_short: options_out_len + 2 <= DHCP_OPTIONS_LEN", options_out_len + 2U <= DHCP_OPTIONS_LEN);
 8014668:	88fb      	ldrh	r3, [r7, #6]
 801466a:	3302      	adds	r3, #2
 801466c:	2b44      	cmp	r3, #68	; 0x44
 801466e:	d906      	bls.n	801467e <dhcp_option_short+0x26>
 8014670:	4b0f      	ldr	r3, [pc, #60]	; (80146b0 <dhcp_option_short+0x58>)
 8014672:	f240 52ae 	movw	r2, #1454	; 0x5ae
 8014676:	490f      	ldr	r1, [pc, #60]	; (80146b4 <dhcp_option_short+0x5c>)
 8014678:	480f      	ldr	r0, [pc, #60]	; (80146b8 <dhcp_option_short+0x60>)
 801467a:	f003 ff05 	bl	8018488 <iprintf>
  options[options_out_len++] = (u8_t)((value & 0xff00U) >> 8);
 801467e:	88bb      	ldrh	r3, [r7, #4]
 8014680:	0a1b      	lsrs	r3, r3, #8
 8014682:	b29a      	uxth	r2, r3
 8014684:	88fb      	ldrh	r3, [r7, #6]
 8014686:	1c59      	adds	r1, r3, #1
 8014688:	80f9      	strh	r1, [r7, #6]
 801468a:	4619      	mov	r1, r3
 801468c:	683b      	ldr	r3, [r7, #0]
 801468e:	440b      	add	r3, r1
 8014690:	b2d2      	uxtb	r2, r2
 8014692:	701a      	strb	r2, [r3, #0]
  options[options_out_len++] = (u8_t) (value & 0x00ffU);
 8014694:	88fb      	ldrh	r3, [r7, #6]
 8014696:	1c5a      	adds	r2, r3, #1
 8014698:	80fa      	strh	r2, [r7, #6]
 801469a:	461a      	mov	r2, r3
 801469c:	683b      	ldr	r3, [r7, #0]
 801469e:	4413      	add	r3, r2
 80146a0:	88ba      	ldrh	r2, [r7, #4]
 80146a2:	b2d2      	uxtb	r2, r2
 80146a4:	701a      	strb	r2, [r3, #0]
  return options_out_len;
 80146a6:	88fb      	ldrh	r3, [r7, #6]
}
 80146a8:	4618      	mov	r0, r3
 80146aa:	3708      	adds	r7, #8
 80146ac:	46bd      	mov	sp, r7
 80146ae:	bd80      	pop	{r7, pc}
 80146b0:	0801b6f4 	.word	0x0801b6f4
 80146b4:	0801b904 	.word	0x0801b904
 80146b8:	0801b754 	.word	0x0801b754

080146bc <dhcp_option_long>:

static u16_t
dhcp_option_long(u16_t options_out_len, u8_t *options, u32_t value)
{
 80146bc:	b580      	push	{r7, lr}
 80146be:	b084      	sub	sp, #16
 80146c0:	af00      	add	r7, sp, #0
 80146c2:	4603      	mov	r3, r0
 80146c4:	60b9      	str	r1, [r7, #8]
 80146c6:	607a      	str	r2, [r7, #4]
 80146c8:	81fb      	strh	r3, [r7, #14]
  LWIP_ASSERT("dhcp_option_long: options_out_len + 4 <= DHCP_OPTIONS_LEN", options_out_len + 4U <= DHCP_OPTIONS_LEN);
 80146ca:	89fb      	ldrh	r3, [r7, #14]
 80146cc:	3304      	adds	r3, #4
 80146ce:	2b44      	cmp	r3, #68	; 0x44
 80146d0:	d906      	bls.n	80146e0 <dhcp_option_long+0x24>
 80146d2:	4b19      	ldr	r3, [pc, #100]	; (8014738 <dhcp_option_long+0x7c>)
 80146d4:	f240 52b7 	movw	r2, #1463	; 0x5b7
 80146d8:	4918      	ldr	r1, [pc, #96]	; (801473c <dhcp_option_long+0x80>)
 80146da:	4819      	ldr	r0, [pc, #100]	; (8014740 <dhcp_option_long+0x84>)
 80146dc:	f003 fed4 	bl	8018488 <iprintf>
  options[options_out_len++] = (u8_t)((value & 0xff000000UL) >> 24);
 80146e0:	687b      	ldr	r3, [r7, #4]
 80146e2:	0e1a      	lsrs	r2, r3, #24
 80146e4:	89fb      	ldrh	r3, [r7, #14]
 80146e6:	1c59      	adds	r1, r3, #1
 80146e8:	81f9      	strh	r1, [r7, #14]
 80146ea:	4619      	mov	r1, r3
 80146ec:	68bb      	ldr	r3, [r7, #8]
 80146ee:	440b      	add	r3, r1
 80146f0:	b2d2      	uxtb	r2, r2
 80146f2:	701a      	strb	r2, [r3, #0]
  options[options_out_len++] = (u8_t)((value & 0x00ff0000UL) >> 16);
 80146f4:	687b      	ldr	r3, [r7, #4]
 80146f6:	0c1a      	lsrs	r2, r3, #16
 80146f8:	89fb      	ldrh	r3, [r7, #14]
 80146fa:	1c59      	adds	r1, r3, #1
 80146fc:	81f9      	strh	r1, [r7, #14]
 80146fe:	4619      	mov	r1, r3
 8014700:	68bb      	ldr	r3, [r7, #8]
 8014702:	440b      	add	r3, r1
 8014704:	b2d2      	uxtb	r2, r2
 8014706:	701a      	strb	r2, [r3, #0]
  options[options_out_len++] = (u8_t)((value & 0x0000ff00UL) >> 8);
 8014708:	687b      	ldr	r3, [r7, #4]
 801470a:	0a1a      	lsrs	r2, r3, #8
 801470c:	89fb      	ldrh	r3, [r7, #14]
 801470e:	1c59      	adds	r1, r3, #1
 8014710:	81f9      	strh	r1, [r7, #14]
 8014712:	4619      	mov	r1, r3
 8014714:	68bb      	ldr	r3, [r7, #8]
 8014716:	440b      	add	r3, r1
 8014718:	b2d2      	uxtb	r2, r2
 801471a:	701a      	strb	r2, [r3, #0]
  options[options_out_len++] = (u8_t)((value & 0x000000ffUL));
 801471c:	89fb      	ldrh	r3, [r7, #14]
 801471e:	1c5a      	adds	r2, r3, #1
 8014720:	81fa      	strh	r2, [r7, #14]
 8014722:	461a      	mov	r2, r3
 8014724:	68bb      	ldr	r3, [r7, #8]
 8014726:	4413      	add	r3, r2
 8014728:	687a      	ldr	r2, [r7, #4]
 801472a:	b2d2      	uxtb	r2, r2
 801472c:	701a      	strb	r2, [r3, #0]
  return options_out_len;
 801472e:	89fb      	ldrh	r3, [r7, #14]
}
 8014730:	4618      	mov	r0, r3
 8014732:	3710      	adds	r7, #16
 8014734:	46bd      	mov	sp, r7
 8014736:	bd80      	pop	{r7, pc}
 8014738:	0801b6f4 	.word	0x0801b6f4
 801473c:	0801b940 	.word	0x0801b940
 8014740:	0801b754 	.word	0x0801b754

08014744 <dhcp_parse_reply>:
 * use that further on.
 *
 */
static err_t
dhcp_parse_reply(struct pbuf *p, struct dhcp *dhcp)
{
 8014744:	b580      	push	{r7, lr}
 8014746:	b090      	sub	sp, #64	; 0x40
 8014748:	af00      	add	r7, sp, #0
 801474a:	6078      	str	r0, [r7, #4]
 801474c:	6039      	str	r1, [r7, #0]
  u16_t offset;
  u16_t offset_max;
  u16_t options_idx;
  u16_t options_idx_max;
  struct pbuf *q;
  int parse_file_as_options = 0;
 801474e:	2300      	movs	r3, #0
 8014750:	62fb      	str	r3, [r7, #44]	; 0x2c
  int parse_sname_as_options = 0;
 8014752:	2300      	movs	r3, #0
 8014754:	62bb      	str	r3, [r7, #40]	; 0x28
#endif

  LWIP_UNUSED_ARG(dhcp);

  /* clear received options */
  dhcp_clear_all_options(dhcp);
 8014756:	220a      	movs	r2, #10
 8014758:	2100      	movs	r1, #0
 801475a:	48ba      	ldr	r0, [pc, #744]	; (8014a44 <dhcp_parse_reply+0x300>)
 801475c:	f003 fef9 	bl	8018552 <memset>
  /* check that beginning of dhcp_msg (up to and including chaddr) is in first pbuf */
  if (p->len < DHCP_SNAME_OFS) {
 8014760:	687b      	ldr	r3, [r7, #4]
 8014762:	895b      	ldrh	r3, [r3, #10]
 8014764:	2b2b      	cmp	r3, #43	; 0x2b
 8014766:	d802      	bhi.n	801476e <dhcp_parse_reply+0x2a>
    return ERR_BUF;
 8014768:	f06f 0301 	mvn.w	r3, #1
 801476c:	e2ea      	b.n	8014d44 <dhcp_parse_reply+0x600>
  }
  msg_in = (struct dhcp_msg *)p->payload;
 801476e:	687b      	ldr	r3, [r7, #4]
 8014770:	685b      	ldr	r3, [r3, #4]
 8014772:	61bb      	str	r3, [r7, #24]
#endif /* LWIP_DHCP_BOOTP_FILE */

  /* parse options */

  /* start with options field */
  options_idx = DHCP_OPTIONS_OFS;
 8014774:	23f0      	movs	r3, #240	; 0xf0
 8014776:	86fb      	strh	r3, [r7, #54]	; 0x36
  /* parse options to the end of the received packet */
  options_idx_max = p->tot_len;
 8014778:	687b      	ldr	r3, [r7, #4]
 801477a:	891b      	ldrh	r3, [r3, #8]
 801477c:	86bb      	strh	r3, [r7, #52]	; 0x34
again:
  q = p;
 801477e:	687b      	ldr	r3, [r7, #4]
 8014780:	633b      	str	r3, [r7, #48]	; 0x30
  while ((q != NULL) && (options_idx >= q->len)) {
 8014782:	e00c      	b.n	801479e <dhcp_parse_reply+0x5a>
    options_idx = (u16_t)(options_idx - q->len);
 8014784:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8014786:	895b      	ldrh	r3, [r3, #10]
 8014788:	8efa      	ldrh	r2, [r7, #54]	; 0x36
 801478a:	1ad3      	subs	r3, r2, r3
 801478c:	86fb      	strh	r3, [r7, #54]	; 0x36
    options_idx_max = (u16_t)(options_idx_max - q->len);
 801478e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8014790:	895b      	ldrh	r3, [r3, #10]
 8014792:	8eba      	ldrh	r2, [r7, #52]	; 0x34
 8014794:	1ad3      	subs	r3, r2, r3
 8014796:	86bb      	strh	r3, [r7, #52]	; 0x34
    q = q->next;
 8014798:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801479a:	681b      	ldr	r3, [r3, #0]
 801479c:	633b      	str	r3, [r7, #48]	; 0x30
  while ((q != NULL) && (options_idx >= q->len)) {
 801479e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80147a0:	2b00      	cmp	r3, #0
 80147a2:	d004      	beq.n	80147ae <dhcp_parse_reply+0x6a>
 80147a4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80147a6:	895b      	ldrh	r3, [r3, #10]
 80147a8:	8efa      	ldrh	r2, [r7, #54]	; 0x36
 80147aa:	429a      	cmp	r2, r3
 80147ac:	d2ea      	bcs.n	8014784 <dhcp_parse_reply+0x40>
  }
  if (q == NULL) {
 80147ae:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80147b0:	2b00      	cmp	r3, #0
 80147b2:	d102      	bne.n	80147ba <dhcp_parse_reply+0x76>
    return ERR_BUF;
 80147b4:	f06f 0301 	mvn.w	r3, #1
 80147b8:	e2c4      	b.n	8014d44 <dhcp_parse_reply+0x600>
  }
  offset = options_idx;
 80147ba:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 80147bc:	877b      	strh	r3, [r7, #58]	; 0x3a
  offset_max = options_idx_max;
 80147be:	8ebb      	ldrh	r3, [r7, #52]	; 0x34
 80147c0:	873b      	strh	r3, [r7, #56]	; 0x38
  options = (u8_t *)q->payload;
 80147c2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80147c4:	685b      	ldr	r3, [r3, #4]
 80147c6:	63fb      	str	r3, [r7, #60]	; 0x3c
  /* at least 1 byte to read and no end marker, then at least 3 bytes to read? */
  while ((q != NULL) && (offset < offset_max) && (options[offset] != DHCP_OPTION_END)) {
 80147c8:	e267      	b.n	8014c9a <dhcp_parse_reply+0x556>
    u8_t op = options[offset];
 80147ca:	8f7b      	ldrh	r3, [r7, #58]	; 0x3a
 80147cc:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 80147ce:	4413      	add	r3, r2
 80147d0:	781b      	ldrb	r3, [r3, #0]
 80147d2:	75fb      	strb	r3, [r7, #23]
    u8_t len;
    u8_t decode_len = 0;
 80147d4:	2300      	movs	r3, #0
 80147d6:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
    int decode_idx = -1;
 80147da:	f04f 33ff 	mov.w	r3, #4294967295
 80147de:	623b      	str	r3, [r7, #32]
    u16_t val_offset = (u16_t)(offset + 2);
 80147e0:	8f7b      	ldrh	r3, [r7, #58]	; 0x3a
 80147e2:	3302      	adds	r3, #2
 80147e4:	83fb      	strh	r3, [r7, #30]
    if (val_offset < offset) {
 80147e6:	8bfa      	ldrh	r2, [r7, #30]
 80147e8:	8f7b      	ldrh	r3, [r7, #58]	; 0x3a
 80147ea:	429a      	cmp	r2, r3
 80147ec:	d202      	bcs.n	80147f4 <dhcp_parse_reply+0xb0>
      /* overflow */
      return ERR_BUF;
 80147ee:	f06f 0301 	mvn.w	r3, #1
 80147f2:	e2a7      	b.n	8014d44 <dhcp_parse_reply+0x600>
    }
    /* len byte might be in the next pbuf */
    if ((offset + 1) < q->len) {
 80147f4:	8f7b      	ldrh	r3, [r7, #58]	; 0x3a
 80147f6:	3301      	adds	r3, #1
 80147f8:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80147fa:	8952      	ldrh	r2, [r2, #10]
 80147fc:	4293      	cmp	r3, r2
 80147fe:	da07      	bge.n	8014810 <dhcp_parse_reply+0xcc>
      len = options[offset + 1];
 8014800:	8f7b      	ldrh	r3, [r7, #58]	; 0x3a
 8014802:	3301      	adds	r3, #1
 8014804:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8014806:	4413      	add	r3, r2
 8014808:	781b      	ldrb	r3, [r3, #0]
 801480a:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 801480e:	e00b      	b.n	8014828 <dhcp_parse_reply+0xe4>
    } else {
      len = (q->next != NULL ? ((u8_t *)q->next->payload)[0] : 0);
 8014810:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8014812:	681b      	ldr	r3, [r3, #0]
 8014814:	2b00      	cmp	r3, #0
 8014816:	d004      	beq.n	8014822 <dhcp_parse_reply+0xde>
 8014818:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801481a:	681b      	ldr	r3, [r3, #0]
 801481c:	685b      	ldr	r3, [r3, #4]
 801481e:	781b      	ldrb	r3, [r3, #0]
 8014820:	e000      	b.n	8014824 <dhcp_parse_reply+0xe0>
 8014822:	2300      	movs	r3, #0
 8014824:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
    }
    /* LWIP_DEBUGF(DHCP_DEBUG, ("msg_offset=%"U16_F", q->len=%"U16_F, msg_offset, q->len)); */
    decode_len = len;
 8014828:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 801482c:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
    switch (op) {
 8014830:	7dfb      	ldrb	r3, [r7, #23]
 8014832:	2b3b      	cmp	r3, #59	; 0x3b
 8014834:	f200 815a 	bhi.w	8014aec <dhcp_parse_reply+0x3a8>
 8014838:	a201      	add	r2, pc, #4	; (adr r2, 8014840 <dhcp_parse_reply+0xfc>)
 801483a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 801483e:	bf00      	nop
 8014840:	08014931 	.word	0x08014931
 8014844:	08014941 	.word	0x08014941
 8014848:	08014aed 	.word	0x08014aed
 801484c:	08014963 	.word	0x08014963
 8014850:	08014aed 	.word	0x08014aed
 8014854:	08014aed 	.word	0x08014aed
 8014858:	0801498f 	.word	0x0801498f
 801485c:	08014aed 	.word	0x08014aed
 8014860:	08014aed 	.word	0x08014aed
 8014864:	08014aed 	.word	0x08014aed
 8014868:	08014aed 	.word	0x08014aed
 801486c:	08014aed 	.word	0x08014aed
 8014870:	08014aed 	.word	0x08014aed
 8014874:	08014aed 	.word	0x08014aed
 8014878:	08014aed 	.word	0x08014aed
 801487c:	08014aed 	.word	0x08014aed
 8014880:	08014aed 	.word	0x08014aed
 8014884:	08014aed 	.word	0x08014aed
 8014888:	08014aed 	.word	0x08014aed
 801488c:	08014aed 	.word	0x08014aed
 8014890:	08014aed 	.word	0x08014aed
 8014894:	08014aed 	.word	0x08014aed
 8014898:	08014aed 	.word	0x08014aed
 801489c:	08014aed 	.word	0x08014aed
 80148a0:	08014aed 	.word	0x08014aed
 80148a4:	08014aed 	.word	0x08014aed
 80148a8:	08014aed 	.word	0x08014aed
 80148ac:	08014aed 	.word	0x08014aed
 80148b0:	08014aed 	.word	0x08014aed
 80148b4:	08014aed 	.word	0x08014aed
 80148b8:	08014aed 	.word	0x08014aed
 80148bc:	08014aed 	.word	0x08014aed
 80148c0:	08014aed 	.word	0x08014aed
 80148c4:	08014aed 	.word	0x08014aed
 80148c8:	08014aed 	.word	0x08014aed
 80148cc:	08014aed 	.word	0x08014aed
 80148d0:	08014aed 	.word	0x08014aed
 80148d4:	08014aed 	.word	0x08014aed
 80148d8:	08014aed 	.word	0x08014aed
 80148dc:	08014aed 	.word	0x08014aed
 80148e0:	08014aed 	.word	0x08014aed
 80148e4:	08014aed 	.word	0x08014aed
 80148e8:	08014aed 	.word	0x08014aed
 80148ec:	08014aed 	.word	0x08014aed
 80148f0:	08014aed 	.word	0x08014aed
 80148f4:	08014aed 	.word	0x08014aed
 80148f8:	08014aed 	.word	0x08014aed
 80148fc:	08014aed 	.word	0x08014aed
 8014900:	08014aed 	.word	0x08014aed
 8014904:	08014aed 	.word	0x08014aed
 8014908:	08014aed 	.word	0x08014aed
 801490c:	080149e5 	.word	0x080149e5
 8014910:	08014a07 	.word	0x08014a07
 8014914:	08014a65 	.word	0x08014a65
 8014918:	08014a87 	.word	0x08014a87
 801491c:	08014aed 	.word	0x08014aed
 8014920:	08014aed 	.word	0x08014aed
 8014924:	08014aed 	.word	0x08014aed
 8014928:	08014aa9 	.word	0x08014aa9
 801492c:	08014acb 	.word	0x08014acb
      /* case(DHCP_OPTION_END): handled above */
      case (DHCP_OPTION_PAD):
        /* special option: no len encoded */
        decode_len = len = 0;
 8014930:	2300      	movs	r3, #0
 8014932:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 8014936:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 801493a:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
        /* will be increased below */
        break;
 801493e:	e0d9      	b.n	8014af4 <dhcp_parse_reply+0x3b0>
      case (DHCP_OPTION_SUBNET_MASK):
        LWIP_ERROR("len == 4", len == 4, return ERR_VAL;);
 8014940:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8014944:	2b04      	cmp	r3, #4
 8014946:	d009      	beq.n	801495c <dhcp_parse_reply+0x218>
 8014948:	4b3f      	ldr	r3, [pc, #252]	; (8014a48 <dhcp_parse_reply+0x304>)
 801494a:	f240 622e 	movw	r2, #1582	; 0x62e
 801494e:	493f      	ldr	r1, [pc, #252]	; (8014a4c <dhcp_parse_reply+0x308>)
 8014950:	483f      	ldr	r0, [pc, #252]	; (8014a50 <dhcp_parse_reply+0x30c>)
 8014952:	f003 fd99 	bl	8018488 <iprintf>
 8014956:	f06f 0305 	mvn.w	r3, #5
 801495a:	e1f3      	b.n	8014d44 <dhcp_parse_reply+0x600>
        decode_idx = DHCP_OPTION_IDX_SUBNET_MASK;
 801495c:	2306      	movs	r3, #6
 801495e:	623b      	str	r3, [r7, #32]
        break;
 8014960:	e0c8      	b.n	8014af4 <dhcp_parse_reply+0x3b0>
      case (DHCP_OPTION_ROUTER):
        decode_len = 4; /* only copy the first given router */
 8014962:	2304      	movs	r3, #4
 8014964:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
        LWIP_ERROR("len >= decode_len", len >= decode_len, return ERR_VAL;);
 8014968:	f897 2027 	ldrb.w	r2, [r7, #39]	; 0x27
 801496c:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 8014970:	429a      	cmp	r2, r3
 8014972:	d209      	bcs.n	8014988 <dhcp_parse_reply+0x244>
 8014974:	4b34      	ldr	r3, [pc, #208]	; (8014a48 <dhcp_parse_reply+0x304>)
 8014976:	f240 6233 	movw	r2, #1587	; 0x633
 801497a:	4936      	ldr	r1, [pc, #216]	; (8014a54 <dhcp_parse_reply+0x310>)
 801497c:	4834      	ldr	r0, [pc, #208]	; (8014a50 <dhcp_parse_reply+0x30c>)
 801497e:	f003 fd83 	bl	8018488 <iprintf>
 8014982:	f06f 0305 	mvn.w	r3, #5
 8014986:	e1dd      	b.n	8014d44 <dhcp_parse_reply+0x600>
        decode_idx = DHCP_OPTION_IDX_ROUTER;
 8014988:	2307      	movs	r3, #7
 801498a:	623b      	str	r3, [r7, #32]
        break;
 801498c:	e0b2      	b.n	8014af4 <dhcp_parse_reply+0x3b0>
#if LWIP_DHCP_PROVIDE_DNS_SERVERS
      case (DHCP_OPTION_DNS_SERVER):
        /* special case: there might be more than one server */
        LWIP_ERROR("len %% 4 == 0", len % 4 == 0, return ERR_VAL;);
 801498e:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8014992:	f003 0303 	and.w	r3, r3, #3
 8014996:	b2db      	uxtb	r3, r3
 8014998:	2b00      	cmp	r3, #0
 801499a:	d009      	beq.n	80149b0 <dhcp_parse_reply+0x26c>
 801499c:	4b2a      	ldr	r3, [pc, #168]	; (8014a48 <dhcp_parse_reply+0x304>)
 801499e:	f240 6239 	movw	r2, #1593	; 0x639
 80149a2:	492d      	ldr	r1, [pc, #180]	; (8014a58 <dhcp_parse_reply+0x314>)
 80149a4:	482a      	ldr	r0, [pc, #168]	; (8014a50 <dhcp_parse_reply+0x30c>)
 80149a6:	f003 fd6f 	bl	8018488 <iprintf>
 80149aa:	f06f 0305 	mvn.w	r3, #5
 80149ae:	e1c9      	b.n	8014d44 <dhcp_parse_reply+0x600>
        /* limit number of DNS servers */
        decode_len = LWIP_MIN(len, 4 * DNS_MAX_SERVERS);
 80149b0:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80149b4:	2b08      	cmp	r3, #8
 80149b6:	bf28      	it	cs
 80149b8:	2308      	movcs	r3, #8
 80149ba:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
        LWIP_ERROR("len >= decode_len", len >= decode_len, return ERR_VAL;);
 80149be:	f897 2027 	ldrb.w	r2, [r7, #39]	; 0x27
 80149c2:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 80149c6:	429a      	cmp	r2, r3
 80149c8:	d209      	bcs.n	80149de <dhcp_parse_reply+0x29a>
 80149ca:	4b1f      	ldr	r3, [pc, #124]	; (8014a48 <dhcp_parse_reply+0x304>)
 80149cc:	f240 623c 	movw	r2, #1596	; 0x63c
 80149d0:	4920      	ldr	r1, [pc, #128]	; (8014a54 <dhcp_parse_reply+0x310>)
 80149d2:	481f      	ldr	r0, [pc, #124]	; (8014a50 <dhcp_parse_reply+0x30c>)
 80149d4:	f003 fd58 	bl	8018488 <iprintf>
 80149d8:	f06f 0305 	mvn.w	r3, #5
 80149dc:	e1b2      	b.n	8014d44 <dhcp_parse_reply+0x600>
        decode_idx = DHCP_OPTION_IDX_DNS_SERVER;
 80149de:	2308      	movs	r3, #8
 80149e0:	623b      	str	r3, [r7, #32]
        break;
 80149e2:	e087      	b.n	8014af4 <dhcp_parse_reply+0x3b0>
#endif /* LWIP_DHCP_PROVIDE_DNS_SERVERS */
      case (DHCP_OPTION_LEASE_TIME):
        LWIP_ERROR("len == 4", len == 4, return ERR_VAL;);
 80149e4:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80149e8:	2b04      	cmp	r3, #4
 80149ea:	d009      	beq.n	8014a00 <dhcp_parse_reply+0x2bc>
 80149ec:	4b16      	ldr	r3, [pc, #88]	; (8014a48 <dhcp_parse_reply+0x304>)
 80149ee:	f240 6241 	movw	r2, #1601	; 0x641
 80149f2:	4916      	ldr	r1, [pc, #88]	; (8014a4c <dhcp_parse_reply+0x308>)
 80149f4:	4816      	ldr	r0, [pc, #88]	; (8014a50 <dhcp_parse_reply+0x30c>)
 80149f6:	f003 fd47 	bl	8018488 <iprintf>
 80149fa:	f06f 0305 	mvn.w	r3, #5
 80149fe:	e1a1      	b.n	8014d44 <dhcp_parse_reply+0x600>
        decode_idx = DHCP_OPTION_IDX_LEASE_TIME;
 8014a00:	2303      	movs	r3, #3
 8014a02:	623b      	str	r3, [r7, #32]
        break;
 8014a04:	e076      	b.n	8014af4 <dhcp_parse_reply+0x3b0>
        LWIP_ERROR("len >= decode_len", len >= decode_len, return ERR_VAL;);
        decode_idx = DHCP_OPTION_IDX_NTP_SERVER;
        break;
#endif /* LWIP_DHCP_GET_NTP_SRV*/
      case (DHCP_OPTION_OVERLOAD):
        LWIP_ERROR("len == 1", len == 1, return ERR_VAL;);
 8014a06:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8014a0a:	2b01      	cmp	r3, #1
 8014a0c:	d009      	beq.n	8014a22 <dhcp_parse_reply+0x2de>
 8014a0e:	4b0e      	ldr	r3, [pc, #56]	; (8014a48 <dhcp_parse_reply+0x304>)
 8014a10:	f240 624f 	movw	r2, #1615	; 0x64f
 8014a14:	4911      	ldr	r1, [pc, #68]	; (8014a5c <dhcp_parse_reply+0x318>)
 8014a16:	480e      	ldr	r0, [pc, #56]	; (8014a50 <dhcp_parse_reply+0x30c>)
 8014a18:	f003 fd36 	bl	8018488 <iprintf>
 8014a1c:	f06f 0305 	mvn.w	r3, #5
 8014a20:	e190      	b.n	8014d44 <dhcp_parse_reply+0x600>
        /* decode overload only in options, not in file/sname: invalid packet */
        LWIP_ERROR("overload in file/sname", options_idx == DHCP_OPTIONS_OFS, return ERR_VAL;);
 8014a22:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 8014a24:	2bf0      	cmp	r3, #240	; 0xf0
 8014a26:	d009      	beq.n	8014a3c <dhcp_parse_reply+0x2f8>
 8014a28:	4b07      	ldr	r3, [pc, #28]	; (8014a48 <dhcp_parse_reply+0x304>)
 8014a2a:	f240 6251 	movw	r2, #1617	; 0x651
 8014a2e:	490c      	ldr	r1, [pc, #48]	; (8014a60 <dhcp_parse_reply+0x31c>)
 8014a30:	4807      	ldr	r0, [pc, #28]	; (8014a50 <dhcp_parse_reply+0x30c>)
 8014a32:	f003 fd29 	bl	8018488 <iprintf>
 8014a36:	f06f 0305 	mvn.w	r3, #5
 8014a3a:	e183      	b.n	8014d44 <dhcp_parse_reply+0x600>
        decode_idx = DHCP_OPTION_IDX_OVERLOAD;
 8014a3c:	2300      	movs	r3, #0
 8014a3e:	623b      	str	r3, [r7, #32]
        break;
 8014a40:	e058      	b.n	8014af4 <dhcp_parse_reply+0x3b0>
 8014a42:	bf00      	nop
 8014a44:	200089a4 	.word	0x200089a4
 8014a48:	0801b6f4 	.word	0x0801b6f4
 8014a4c:	0801b97c 	.word	0x0801b97c
 8014a50:	0801b754 	.word	0x0801b754
 8014a54:	0801b988 	.word	0x0801b988
 8014a58:	0801b99c 	.word	0x0801b99c
 8014a5c:	0801b9ac 	.word	0x0801b9ac
 8014a60:	0801b9b8 	.word	0x0801b9b8
      case (DHCP_OPTION_MESSAGE_TYPE):
        LWIP_ERROR("len == 1", len == 1, return ERR_VAL;);
 8014a64:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8014a68:	2b01      	cmp	r3, #1
 8014a6a:	d009      	beq.n	8014a80 <dhcp_parse_reply+0x33c>
 8014a6c:	4b9d      	ldr	r3, [pc, #628]	; (8014ce4 <dhcp_parse_reply+0x5a0>)
 8014a6e:	f240 6255 	movw	r2, #1621	; 0x655
 8014a72:	499d      	ldr	r1, [pc, #628]	; (8014ce8 <dhcp_parse_reply+0x5a4>)
 8014a74:	489d      	ldr	r0, [pc, #628]	; (8014cec <dhcp_parse_reply+0x5a8>)
 8014a76:	f003 fd07 	bl	8018488 <iprintf>
 8014a7a:	f06f 0305 	mvn.w	r3, #5
 8014a7e:	e161      	b.n	8014d44 <dhcp_parse_reply+0x600>
        decode_idx = DHCP_OPTION_IDX_MSG_TYPE;
 8014a80:	2301      	movs	r3, #1
 8014a82:	623b      	str	r3, [r7, #32]
        break;
 8014a84:	e036      	b.n	8014af4 <dhcp_parse_reply+0x3b0>
      case (DHCP_OPTION_SERVER_ID):
        LWIP_ERROR("len == 4", len == 4, return ERR_VAL;);
 8014a86:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8014a8a:	2b04      	cmp	r3, #4
 8014a8c:	d009      	beq.n	8014aa2 <dhcp_parse_reply+0x35e>
 8014a8e:	4b95      	ldr	r3, [pc, #596]	; (8014ce4 <dhcp_parse_reply+0x5a0>)
 8014a90:	f240 6259 	movw	r2, #1625	; 0x659
 8014a94:	4996      	ldr	r1, [pc, #600]	; (8014cf0 <dhcp_parse_reply+0x5ac>)
 8014a96:	4895      	ldr	r0, [pc, #596]	; (8014cec <dhcp_parse_reply+0x5a8>)
 8014a98:	f003 fcf6 	bl	8018488 <iprintf>
 8014a9c:	f06f 0305 	mvn.w	r3, #5
 8014aa0:	e150      	b.n	8014d44 <dhcp_parse_reply+0x600>
        decode_idx = DHCP_OPTION_IDX_SERVER_ID;
 8014aa2:	2302      	movs	r3, #2
 8014aa4:	623b      	str	r3, [r7, #32]
        break;
 8014aa6:	e025      	b.n	8014af4 <dhcp_parse_reply+0x3b0>
      case (DHCP_OPTION_T1):
        LWIP_ERROR("len == 4", len == 4, return ERR_VAL;);
 8014aa8:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8014aac:	2b04      	cmp	r3, #4
 8014aae:	d009      	beq.n	8014ac4 <dhcp_parse_reply+0x380>
 8014ab0:	4b8c      	ldr	r3, [pc, #560]	; (8014ce4 <dhcp_parse_reply+0x5a0>)
 8014ab2:	f240 625d 	movw	r2, #1629	; 0x65d
 8014ab6:	498e      	ldr	r1, [pc, #568]	; (8014cf0 <dhcp_parse_reply+0x5ac>)
 8014ab8:	488c      	ldr	r0, [pc, #560]	; (8014cec <dhcp_parse_reply+0x5a8>)
 8014aba:	f003 fce5 	bl	8018488 <iprintf>
 8014abe:	f06f 0305 	mvn.w	r3, #5
 8014ac2:	e13f      	b.n	8014d44 <dhcp_parse_reply+0x600>
        decode_idx = DHCP_OPTION_IDX_T1;
 8014ac4:	2304      	movs	r3, #4
 8014ac6:	623b      	str	r3, [r7, #32]
        break;
 8014ac8:	e014      	b.n	8014af4 <dhcp_parse_reply+0x3b0>
      case (DHCP_OPTION_T2):
        LWIP_ERROR("len == 4", len == 4, return ERR_VAL;);
 8014aca:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8014ace:	2b04      	cmp	r3, #4
 8014ad0:	d009      	beq.n	8014ae6 <dhcp_parse_reply+0x3a2>
 8014ad2:	4b84      	ldr	r3, [pc, #528]	; (8014ce4 <dhcp_parse_reply+0x5a0>)
 8014ad4:	f240 6261 	movw	r2, #1633	; 0x661
 8014ad8:	4985      	ldr	r1, [pc, #532]	; (8014cf0 <dhcp_parse_reply+0x5ac>)
 8014ada:	4884      	ldr	r0, [pc, #528]	; (8014cec <dhcp_parse_reply+0x5a8>)
 8014adc:	f003 fcd4 	bl	8018488 <iprintf>
 8014ae0:	f06f 0305 	mvn.w	r3, #5
 8014ae4:	e12e      	b.n	8014d44 <dhcp_parse_reply+0x600>
        decode_idx = DHCP_OPTION_IDX_T2;
 8014ae6:	2305      	movs	r3, #5
 8014ae8:	623b      	str	r3, [r7, #32]
        break;
 8014aea:	e003      	b.n	8014af4 <dhcp_parse_reply+0x3b0>
      default:
        decode_len = 0;
 8014aec:	2300      	movs	r3, #0
 8014aee:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
        LWIP_DEBUGF(DHCP_DEBUG, ("skipping option %"U16_F" in options\n", (u16_t)op));
        LWIP_HOOK_DHCP_PARSE_OPTION(ip_current_netif(), dhcp, dhcp->state, msg_in,
                                    dhcp_option_given(dhcp, DHCP_OPTION_IDX_MSG_TYPE) ? (u8_t)dhcp_get_option_value(dhcp, DHCP_OPTION_IDX_MSG_TYPE) : 0,
                                    op, len, q, val_offset);
        break;
 8014af2:	bf00      	nop
    }
    if (op == DHCP_OPTION_PAD) {
 8014af4:	7dfb      	ldrb	r3, [r7, #23]
 8014af6:	2b00      	cmp	r3, #0
 8014af8:	d103      	bne.n	8014b02 <dhcp_parse_reply+0x3be>
      offset++;
 8014afa:	8f7b      	ldrh	r3, [r7, #58]	; 0x3a
 8014afc:	3301      	adds	r3, #1
 8014afe:	877b      	strh	r3, [r7, #58]	; 0x3a
 8014b00:	e0a1      	b.n	8014c46 <dhcp_parse_reply+0x502>
    } else {
      if (offset + len + 2 > 0xFFFF) {
 8014b02:	8f7a      	ldrh	r2, [r7, #58]	; 0x3a
 8014b04:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8014b08:	4413      	add	r3, r2
 8014b0a:	f64f 72fd 	movw	r2, #65533	; 0xfffd
 8014b0e:	4293      	cmp	r3, r2
 8014b10:	dd02      	ble.n	8014b18 <dhcp_parse_reply+0x3d4>
        /* overflow */
        return ERR_BUF;
 8014b12:	f06f 0301 	mvn.w	r3, #1
 8014b16:	e115      	b.n	8014d44 <dhcp_parse_reply+0x600>
      }
      offset = (u16_t)(offset + len + 2);
 8014b18:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8014b1c:	b29a      	uxth	r2, r3
 8014b1e:	8f7b      	ldrh	r3, [r7, #58]	; 0x3a
 8014b20:	4413      	add	r3, r2
 8014b22:	b29b      	uxth	r3, r3
 8014b24:	3302      	adds	r3, #2
 8014b26:	877b      	strh	r3, [r7, #58]	; 0x3a
      if (decode_len > 0) {
 8014b28:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 8014b2c:	2b00      	cmp	r3, #0
 8014b2e:	f000 808a 	beq.w	8014c46 <dhcp_parse_reply+0x502>
        u32_t value = 0;
 8014b32:	2300      	movs	r3, #0
 8014b34:	60bb      	str	r3, [r7, #8]
        u16_t copy_len;
decode_next:
        LWIP_ASSERT("check decode_idx", decode_idx >= 0 && decode_idx < DHCP_OPTION_IDX_MAX);
 8014b36:	6a3b      	ldr	r3, [r7, #32]
 8014b38:	2b00      	cmp	r3, #0
 8014b3a:	db02      	blt.n	8014b42 <dhcp_parse_reply+0x3fe>
 8014b3c:	6a3b      	ldr	r3, [r7, #32]
 8014b3e:	2b09      	cmp	r3, #9
 8014b40:	dd06      	ble.n	8014b50 <dhcp_parse_reply+0x40c>
 8014b42:	4b68      	ldr	r3, [pc, #416]	; (8014ce4 <dhcp_parse_reply+0x5a0>)
 8014b44:	f44f 62cf 	mov.w	r2, #1656	; 0x678
 8014b48:	496a      	ldr	r1, [pc, #424]	; (8014cf4 <dhcp_parse_reply+0x5b0>)
 8014b4a:	4868      	ldr	r0, [pc, #416]	; (8014cec <dhcp_parse_reply+0x5a8>)
 8014b4c:	f003 fc9c 	bl	8018488 <iprintf>
        if (!dhcp_option_given(dhcp, decode_idx)) {
 8014b50:	4a69      	ldr	r2, [pc, #420]	; (8014cf8 <dhcp_parse_reply+0x5b4>)
 8014b52:	6a3b      	ldr	r3, [r7, #32]
 8014b54:	4413      	add	r3, r2
 8014b56:	781b      	ldrb	r3, [r3, #0]
 8014b58:	2b00      	cmp	r3, #0
 8014b5a:	d174      	bne.n	8014c46 <dhcp_parse_reply+0x502>
          copy_len = LWIP_MIN(decode_len, 4);
 8014b5c:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 8014b60:	2b04      	cmp	r3, #4
 8014b62:	bf28      	it	cs
 8014b64:	2304      	movcs	r3, #4
 8014b66:	b2db      	uxtb	r3, r3
 8014b68:	82bb      	strh	r3, [r7, #20]
          if (pbuf_copy_partial(q, &value, copy_len, val_offset) != copy_len) {
 8014b6a:	8bfb      	ldrh	r3, [r7, #30]
 8014b6c:	8aba      	ldrh	r2, [r7, #20]
 8014b6e:	f107 0108 	add.w	r1, r7, #8
 8014b72:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8014b74:	f7f7 fbde 	bl	800c334 <pbuf_copy_partial>
 8014b78:	4603      	mov	r3, r0
 8014b7a:	461a      	mov	r2, r3
 8014b7c:	8abb      	ldrh	r3, [r7, #20]
 8014b7e:	4293      	cmp	r3, r2
 8014b80:	d002      	beq.n	8014b88 <dhcp_parse_reply+0x444>
            return ERR_BUF;
 8014b82:	f06f 0301 	mvn.w	r3, #1
 8014b86:	e0dd      	b.n	8014d44 <dhcp_parse_reply+0x600>
          }
          if (decode_len > 4) {
 8014b88:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 8014b8c:	2b04      	cmp	r3, #4
 8014b8e:	d933      	bls.n	8014bf8 <dhcp_parse_reply+0x4b4>
            /* decode more than one u32_t */
            u16_t next_val_offset;
            LWIP_ERROR("decode_len %% 4 == 0", decode_len % 4 == 0, return ERR_VAL;);
 8014b90:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 8014b94:	f003 0303 	and.w	r3, r3, #3
 8014b98:	b2db      	uxtb	r3, r3
 8014b9a:	2b00      	cmp	r3, #0
 8014b9c:	d009      	beq.n	8014bb2 <dhcp_parse_reply+0x46e>
 8014b9e:	4b51      	ldr	r3, [pc, #324]	; (8014ce4 <dhcp_parse_reply+0x5a0>)
 8014ba0:	f240 6281 	movw	r2, #1665	; 0x681
 8014ba4:	4955      	ldr	r1, [pc, #340]	; (8014cfc <dhcp_parse_reply+0x5b8>)
 8014ba6:	4851      	ldr	r0, [pc, #324]	; (8014cec <dhcp_parse_reply+0x5a8>)
 8014ba8:	f003 fc6e 	bl	8018488 <iprintf>
 8014bac:	f06f 0305 	mvn.w	r3, #5
 8014bb0:	e0c8      	b.n	8014d44 <dhcp_parse_reply+0x600>
            dhcp_got_option(dhcp, decode_idx);
 8014bb2:	4a51      	ldr	r2, [pc, #324]	; (8014cf8 <dhcp_parse_reply+0x5b4>)
 8014bb4:	6a3b      	ldr	r3, [r7, #32]
 8014bb6:	4413      	add	r3, r2
 8014bb8:	2201      	movs	r2, #1
 8014bba:	701a      	strb	r2, [r3, #0]
            dhcp_set_option_value(dhcp, decode_idx, lwip_htonl(value));
 8014bbc:	68bb      	ldr	r3, [r7, #8]
 8014bbe:	4618      	mov	r0, r3
 8014bc0:	f7f5 fb7b 	bl	800a2ba <lwip_htonl>
 8014bc4:	4602      	mov	r2, r0
 8014bc6:	494e      	ldr	r1, [pc, #312]	; (8014d00 <dhcp_parse_reply+0x5bc>)
 8014bc8:	6a3b      	ldr	r3, [r7, #32]
 8014bca:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
            decode_len = (u8_t)(decode_len - 4);
 8014bce:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 8014bd2:	3b04      	subs	r3, #4
 8014bd4:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
            next_val_offset = (u16_t)(val_offset + 4);
 8014bd8:	8bfb      	ldrh	r3, [r7, #30]
 8014bda:	3304      	adds	r3, #4
 8014bdc:	827b      	strh	r3, [r7, #18]
            if (next_val_offset < val_offset) {
 8014bde:	8a7a      	ldrh	r2, [r7, #18]
 8014be0:	8bfb      	ldrh	r3, [r7, #30]
 8014be2:	429a      	cmp	r2, r3
 8014be4:	d202      	bcs.n	8014bec <dhcp_parse_reply+0x4a8>
              /* overflow */
              return ERR_BUF;
 8014be6:	f06f 0301 	mvn.w	r3, #1
 8014bea:	e0ab      	b.n	8014d44 <dhcp_parse_reply+0x600>
            }
            val_offset = next_val_offset;
 8014bec:	8a7b      	ldrh	r3, [r7, #18]
 8014bee:	83fb      	strh	r3, [r7, #30]
            decode_idx++;
 8014bf0:	6a3b      	ldr	r3, [r7, #32]
 8014bf2:	3301      	adds	r3, #1
 8014bf4:	623b      	str	r3, [r7, #32]
            goto decode_next;
 8014bf6:	e79e      	b.n	8014b36 <dhcp_parse_reply+0x3f2>
          } else if (decode_len == 4) {
 8014bf8:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 8014bfc:	2b04      	cmp	r3, #4
 8014bfe:	d106      	bne.n	8014c0e <dhcp_parse_reply+0x4ca>
            value = lwip_ntohl(value);
 8014c00:	68bb      	ldr	r3, [r7, #8]
 8014c02:	4618      	mov	r0, r3
 8014c04:	f7f5 fb59 	bl	800a2ba <lwip_htonl>
 8014c08:	4603      	mov	r3, r0
 8014c0a:	60bb      	str	r3, [r7, #8]
 8014c0c:	e011      	b.n	8014c32 <dhcp_parse_reply+0x4ee>
          } else {
            LWIP_ERROR("invalid decode_len", decode_len == 1, return ERR_VAL;);
 8014c0e:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 8014c12:	2b01      	cmp	r3, #1
 8014c14:	d009      	beq.n	8014c2a <dhcp_parse_reply+0x4e6>
 8014c16:	4b33      	ldr	r3, [pc, #204]	; (8014ce4 <dhcp_parse_reply+0x5a0>)
 8014c18:	f44f 62d2 	mov.w	r2, #1680	; 0x690
 8014c1c:	4939      	ldr	r1, [pc, #228]	; (8014d04 <dhcp_parse_reply+0x5c0>)
 8014c1e:	4833      	ldr	r0, [pc, #204]	; (8014cec <dhcp_parse_reply+0x5a8>)
 8014c20:	f003 fc32 	bl	8018488 <iprintf>
 8014c24:	f06f 0305 	mvn.w	r3, #5
 8014c28:	e08c      	b.n	8014d44 <dhcp_parse_reply+0x600>
            value = ((u8_t *)&value)[0];
 8014c2a:	f107 0308 	add.w	r3, r7, #8
 8014c2e:	781b      	ldrb	r3, [r3, #0]
 8014c30:	60bb      	str	r3, [r7, #8]
          }
          dhcp_got_option(dhcp, decode_idx);
 8014c32:	4a31      	ldr	r2, [pc, #196]	; (8014cf8 <dhcp_parse_reply+0x5b4>)
 8014c34:	6a3b      	ldr	r3, [r7, #32]
 8014c36:	4413      	add	r3, r2
 8014c38:	2201      	movs	r2, #1
 8014c3a:	701a      	strb	r2, [r3, #0]
          dhcp_set_option_value(dhcp, decode_idx, value);
 8014c3c:	68ba      	ldr	r2, [r7, #8]
 8014c3e:	4930      	ldr	r1, [pc, #192]	; (8014d00 <dhcp_parse_reply+0x5bc>)
 8014c40:	6a3b      	ldr	r3, [r7, #32]
 8014c42:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
        }
      }
    }
    if (offset >= q->len) {
 8014c46:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8014c48:	895b      	ldrh	r3, [r3, #10]
 8014c4a:	8f7a      	ldrh	r2, [r7, #58]	; 0x3a
 8014c4c:	429a      	cmp	r2, r3
 8014c4e:	d324      	bcc.n	8014c9a <dhcp_parse_reply+0x556>
      offset = (u16_t)(offset - q->len);
 8014c50:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8014c52:	895b      	ldrh	r3, [r3, #10]
 8014c54:	8f7a      	ldrh	r2, [r7, #58]	; 0x3a
 8014c56:	1ad3      	subs	r3, r2, r3
 8014c58:	877b      	strh	r3, [r7, #58]	; 0x3a
      offset_max = (u16_t)(offset_max - q->len);
 8014c5a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8014c5c:	895b      	ldrh	r3, [r3, #10]
 8014c5e:	8f3a      	ldrh	r2, [r7, #56]	; 0x38
 8014c60:	1ad3      	subs	r3, r2, r3
 8014c62:	873b      	strh	r3, [r7, #56]	; 0x38
      if (offset < offset_max) {
 8014c64:	8f7a      	ldrh	r2, [r7, #58]	; 0x3a
 8014c66:	8f3b      	ldrh	r3, [r7, #56]	; 0x38
 8014c68:	429a      	cmp	r2, r3
 8014c6a:	d213      	bcs.n	8014c94 <dhcp_parse_reply+0x550>
        q = q->next;
 8014c6c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8014c6e:	681b      	ldr	r3, [r3, #0]
 8014c70:	633b      	str	r3, [r7, #48]	; 0x30
        LWIP_ERROR("next pbuf was null", q != NULL, return ERR_VAL;);
 8014c72:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8014c74:	2b00      	cmp	r3, #0
 8014c76:	d109      	bne.n	8014c8c <dhcp_parse_reply+0x548>
 8014c78:	4b1a      	ldr	r3, [pc, #104]	; (8014ce4 <dhcp_parse_reply+0x5a0>)
 8014c7a:	f240 629d 	movw	r2, #1693	; 0x69d
 8014c7e:	4922      	ldr	r1, [pc, #136]	; (8014d08 <dhcp_parse_reply+0x5c4>)
 8014c80:	481a      	ldr	r0, [pc, #104]	; (8014cec <dhcp_parse_reply+0x5a8>)
 8014c82:	f003 fc01 	bl	8018488 <iprintf>
 8014c86:	f06f 0305 	mvn.w	r3, #5
 8014c8a:	e05b      	b.n	8014d44 <dhcp_parse_reply+0x600>
        options = (u8_t *)q->payload;
 8014c8c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8014c8e:	685b      	ldr	r3, [r3, #4]
 8014c90:	63fb      	str	r3, [r7, #60]	; 0x3c
 8014c92:	e002      	b.n	8014c9a <dhcp_parse_reply+0x556>
      } else {
        /* We've run out of bytes, probably no end marker. Don't proceed. */
        return ERR_BUF;
 8014c94:	f06f 0301 	mvn.w	r3, #1
 8014c98:	e054      	b.n	8014d44 <dhcp_parse_reply+0x600>
  while ((q != NULL) && (offset < offset_max) && (options[offset] != DHCP_OPTION_END)) {
 8014c9a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8014c9c:	2b00      	cmp	r3, #0
 8014c9e:	d00a      	beq.n	8014cb6 <dhcp_parse_reply+0x572>
 8014ca0:	8f7a      	ldrh	r2, [r7, #58]	; 0x3a
 8014ca2:	8f3b      	ldrh	r3, [r7, #56]	; 0x38
 8014ca4:	429a      	cmp	r2, r3
 8014ca6:	d206      	bcs.n	8014cb6 <dhcp_parse_reply+0x572>
 8014ca8:	8f7b      	ldrh	r3, [r7, #58]	; 0x3a
 8014caa:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8014cac:	4413      	add	r3, r2
 8014cae:	781b      	ldrb	r3, [r3, #0]
 8014cb0:	2bff      	cmp	r3, #255	; 0xff
 8014cb2:	f47f ad8a 	bne.w	80147ca <dhcp_parse_reply+0x86>
      }
    }
  }
  /* is this an overloaded message? */
  if (dhcp_option_given(dhcp, DHCP_OPTION_IDX_OVERLOAD)) {
 8014cb6:	4b10      	ldr	r3, [pc, #64]	; (8014cf8 <dhcp_parse_reply+0x5b4>)
 8014cb8:	781b      	ldrb	r3, [r3, #0]
 8014cba:	2b00      	cmp	r3, #0
 8014cbc:	d02d      	beq.n	8014d1a <dhcp_parse_reply+0x5d6>
    u32_t overload = dhcp_get_option_value(dhcp, DHCP_OPTION_IDX_OVERLOAD);
 8014cbe:	4b10      	ldr	r3, [pc, #64]	; (8014d00 <dhcp_parse_reply+0x5bc>)
 8014cc0:	681b      	ldr	r3, [r3, #0]
 8014cc2:	60fb      	str	r3, [r7, #12]
    dhcp_clear_option(dhcp, DHCP_OPTION_IDX_OVERLOAD);
 8014cc4:	4b0c      	ldr	r3, [pc, #48]	; (8014cf8 <dhcp_parse_reply+0x5b4>)
 8014cc6:	2200      	movs	r2, #0
 8014cc8:	701a      	strb	r2, [r3, #0]
    if (overload == DHCP_OVERLOAD_FILE) {
 8014cca:	68fb      	ldr	r3, [r7, #12]
 8014ccc:	2b01      	cmp	r3, #1
 8014cce:	d102      	bne.n	8014cd6 <dhcp_parse_reply+0x592>
      parse_file_as_options = 1;
 8014cd0:	2301      	movs	r3, #1
 8014cd2:	62fb      	str	r3, [r7, #44]	; 0x2c
 8014cd4:	e021      	b.n	8014d1a <dhcp_parse_reply+0x5d6>
      LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("overloaded file field\n"));
    } else if (overload == DHCP_OVERLOAD_SNAME) {
 8014cd6:	68fb      	ldr	r3, [r7, #12]
 8014cd8:	2b02      	cmp	r3, #2
 8014cda:	d117      	bne.n	8014d0c <dhcp_parse_reply+0x5c8>
      parse_sname_as_options = 1;
 8014cdc:	2301      	movs	r3, #1
 8014cde:	62bb      	str	r3, [r7, #40]	; 0x28
 8014ce0:	e01b      	b.n	8014d1a <dhcp_parse_reply+0x5d6>
 8014ce2:	bf00      	nop
 8014ce4:	0801b6f4 	.word	0x0801b6f4
 8014ce8:	0801b9ac 	.word	0x0801b9ac
 8014cec:	0801b754 	.word	0x0801b754
 8014cf0:	0801b97c 	.word	0x0801b97c
 8014cf4:	0801b9d0 	.word	0x0801b9d0
 8014cf8:	200089a4 	.word	0x200089a4
 8014cfc:	0801b9e4 	.word	0x0801b9e4
 8014d00:	2000897c 	.word	0x2000897c
 8014d04:	0801b9fc 	.word	0x0801b9fc
 8014d08:	0801ba10 	.word	0x0801ba10
      LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("overloaded sname field\n"));
    } else if (overload == DHCP_OVERLOAD_SNAME_FILE) {
 8014d0c:	68fb      	ldr	r3, [r7, #12]
 8014d0e:	2b03      	cmp	r3, #3
 8014d10:	d103      	bne.n	8014d1a <dhcp_parse_reply+0x5d6>
      parse_sname_as_options = 1;
 8014d12:	2301      	movs	r3, #1
 8014d14:	62bb      	str	r3, [r7, #40]	; 0x28
      parse_file_as_options = 1;
 8014d16:	2301      	movs	r3, #1
 8014d18:	62fb      	str	r3, [r7, #44]	; 0x2c
      LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("overloaded sname and file field\n"));
    } else {
      LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("invalid overload option: %d\n", (int)overload));
    }
  }
  if (parse_file_as_options) {
 8014d1a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8014d1c:	2b00      	cmp	r3, #0
 8014d1e:	d006      	beq.n	8014d2e <dhcp_parse_reply+0x5ea>
    /* if both are overloaded, parse file first and then sname (RFC 2131 ch. 4.1) */
    parse_file_as_options = 0;
 8014d20:	2300      	movs	r3, #0
 8014d22:	62fb      	str	r3, [r7, #44]	; 0x2c
    options_idx = DHCP_FILE_OFS;
 8014d24:	236c      	movs	r3, #108	; 0x6c
 8014d26:	86fb      	strh	r3, [r7, #54]	; 0x36
    options_idx_max = DHCP_FILE_OFS + DHCP_FILE_LEN;
 8014d28:	23ec      	movs	r3, #236	; 0xec
 8014d2a:	86bb      	strh	r3, [r7, #52]	; 0x34
#if LWIP_DHCP_BOOTP_FILE
    file_overloaded = 1;
#endif
    goto again;
 8014d2c:	e527      	b.n	801477e <dhcp_parse_reply+0x3a>
  } else if (parse_sname_as_options) {
 8014d2e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8014d30:	2b00      	cmp	r3, #0
 8014d32:	d006      	beq.n	8014d42 <dhcp_parse_reply+0x5fe>
    parse_sname_as_options = 0;
 8014d34:	2300      	movs	r3, #0
 8014d36:	62bb      	str	r3, [r7, #40]	; 0x28
    options_idx = DHCP_SNAME_OFS;
 8014d38:	232c      	movs	r3, #44	; 0x2c
 8014d3a:	86fb      	strh	r3, [r7, #54]	; 0x36
    options_idx_max = DHCP_SNAME_OFS + DHCP_SNAME_LEN;
 8014d3c:	236c      	movs	r3, #108	; 0x6c
 8014d3e:	86bb      	strh	r3, [r7, #52]	; 0x34
    goto again;
 8014d40:	e51d      	b.n	801477e <dhcp_parse_reply+0x3a>
    }
    /* make sure the string is really NULL-terminated */
    dhcp->boot_file_name[DHCP_FILE_LEN-1] = 0;
  }
#endif /* LWIP_DHCP_BOOTP_FILE */ 
  return ERR_OK;
 8014d42:	2300      	movs	r3, #0
}
 8014d44:	4618      	mov	r0, r3
 8014d46:	3740      	adds	r7, #64	; 0x40
 8014d48:	46bd      	mov	sp, r7
 8014d4a:	bd80      	pop	{r7, pc}

08014d4c <dhcp_recv>:
/**
 * If an incoming DHCP message is in response to us, then trigger the state machine
 */
static void
dhcp_recv(void *arg, struct udp_pcb *pcb, struct pbuf *p, const ip_addr_t *addr, u16_t port)
{
 8014d4c:	b580      	push	{r7, lr}
 8014d4e:	b08a      	sub	sp, #40	; 0x28
 8014d50:	af00      	add	r7, sp, #0
 8014d52:	60f8      	str	r0, [r7, #12]
 8014d54:	60b9      	str	r1, [r7, #8]
 8014d56:	607a      	str	r2, [r7, #4]
 8014d58:	603b      	str	r3, [r7, #0]
  struct netif *netif = ip_current_input_netif();
 8014d5a:	4b60      	ldr	r3, [pc, #384]	; (8014edc <dhcp_recv+0x190>)
 8014d5c:	685b      	ldr	r3, [r3, #4]
 8014d5e:	623b      	str	r3, [r7, #32]
  struct dhcp *dhcp = netif_dhcp_data(netif);
 8014d60:	6a3b      	ldr	r3, [r7, #32]
 8014d62:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8014d64:	61fb      	str	r3, [r7, #28]
  struct dhcp_msg *reply_msg = (struct dhcp_msg *)p->payload;
 8014d66:	687b      	ldr	r3, [r7, #4]
 8014d68:	685b      	ldr	r3, [r3, #4]
 8014d6a:	61bb      	str	r3, [r7, #24]
  struct dhcp_msg *msg_in;

  LWIP_UNUSED_ARG(arg);

  /* Caught DHCP message from netif that does not have DHCP enabled? -> not interested */
  if ((dhcp == NULL) || (dhcp->pcb_allocated == 0)) {
 8014d6c:	69fb      	ldr	r3, [r7, #28]
 8014d6e:	2b00      	cmp	r3, #0
 8014d70:	f000 809d 	beq.w	8014eae <dhcp_recv+0x162>
 8014d74:	69fb      	ldr	r3, [r7, #28]
 8014d76:	791b      	ldrb	r3, [r3, #4]
 8014d78:	2b00      	cmp	r3, #0
 8014d7a:	f000 8098 	beq.w	8014eae <dhcp_recv+0x162>
  /* prevent warnings about unused arguments */
  LWIP_UNUSED_ARG(pcb);
  LWIP_UNUSED_ARG(addr);
  LWIP_UNUSED_ARG(port);

  if (p->len < DHCP_MIN_REPLY_LEN) {
 8014d7e:	687b      	ldr	r3, [r7, #4]
 8014d80:	895b      	ldrh	r3, [r3, #10]
 8014d82:	2b2b      	cmp	r3, #43	; 0x2b
 8014d84:	f240 8095 	bls.w	8014eb2 <dhcp_recv+0x166>
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_WARNING, ("DHCP reply message or pbuf too short\n"));
    goto free_pbuf_and_return;
  }

  if (reply_msg->op != DHCP_BOOTREPLY) {
 8014d88:	69bb      	ldr	r3, [r7, #24]
 8014d8a:	781b      	ldrb	r3, [r3, #0]
 8014d8c:	2b02      	cmp	r3, #2
 8014d8e:	f040 8092 	bne.w	8014eb6 <dhcp_recv+0x16a>
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_WARNING, ("not a DHCP reply message, but type %"U16_F"\n", (u16_t)reply_msg->op));
    goto free_pbuf_and_return;
  }
  /* iterate through hardware address and match against DHCP message */
  for (i = 0; i < netif->hwaddr_len && i < LWIP_MIN(DHCP_CHADDR_LEN, NETIF_MAX_HWADDR_LEN); i++) {
 8014d92:	2300      	movs	r3, #0
 8014d94:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 8014d98:	e012      	b.n	8014dc0 <dhcp_recv+0x74>
    if (netif->hwaddr[i] != reply_msg->chaddr[i]) {
 8014d9a:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8014d9e:	6a3a      	ldr	r2, [r7, #32]
 8014da0:	4413      	add	r3, r2
 8014da2:	f893 202a 	ldrb.w	r2, [r3, #42]	; 0x2a
 8014da6:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8014daa:	69b9      	ldr	r1, [r7, #24]
 8014dac:	440b      	add	r3, r1
 8014dae:	7f1b      	ldrb	r3, [r3, #28]
 8014db0:	429a      	cmp	r2, r3
 8014db2:	f040 8082 	bne.w	8014eba <dhcp_recv+0x16e>
  for (i = 0; i < netif->hwaddr_len && i < LWIP_MIN(DHCP_CHADDR_LEN, NETIF_MAX_HWADDR_LEN); i++) {
 8014db6:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8014dba:	3301      	adds	r3, #1
 8014dbc:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 8014dc0:	6a3b      	ldr	r3, [r7, #32]
 8014dc2:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8014dc6:	f897 2027 	ldrb.w	r2, [r7, #39]	; 0x27
 8014dca:	429a      	cmp	r2, r3
 8014dcc:	d203      	bcs.n	8014dd6 <dhcp_recv+0x8a>
 8014dce:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8014dd2:	2b05      	cmp	r3, #5
 8014dd4:	d9e1      	bls.n	8014d9a <dhcp_recv+0x4e>
                   (u16_t)i, (u16_t)netif->hwaddr[i], (u16_t)i, (u16_t)reply_msg->chaddr[i]));
      goto free_pbuf_and_return;
    }
  }
  /* match transaction ID against what we expected */
  if (lwip_ntohl(reply_msg->xid) != dhcp->xid) {
 8014dd6:	69bb      	ldr	r3, [r7, #24]
 8014dd8:	685b      	ldr	r3, [r3, #4]
 8014dda:	4618      	mov	r0, r3
 8014ddc:	f7f5 fa6d 	bl	800a2ba <lwip_htonl>
 8014de0:	4602      	mov	r2, r0
 8014de2:	69fb      	ldr	r3, [r7, #28]
 8014de4:	681b      	ldr	r3, [r3, #0]
 8014de6:	429a      	cmp	r2, r3
 8014de8:	d169      	bne.n	8014ebe <dhcp_recv+0x172>
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_WARNING,
                ("transaction id mismatch reply_msg->xid(%"X32_F")!=dhcp->xid(%"X32_F")\n", lwip_ntohl(reply_msg->xid), dhcp->xid));
    goto free_pbuf_and_return;
  }
  /* option fields could be unfold? */
  if (dhcp_parse_reply(p, dhcp) != ERR_OK) {
 8014dea:	69f9      	ldr	r1, [r7, #28]
 8014dec:	6878      	ldr	r0, [r7, #4]
 8014dee:	f7ff fca9 	bl	8014744 <dhcp_parse_reply>
 8014df2:	4603      	mov	r3, r0
 8014df4:	2b00      	cmp	r3, #0
 8014df6:	d164      	bne.n	8014ec2 <dhcp_recv+0x176>
    goto free_pbuf_and_return;
  }

  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("searching DHCP_OPTION_MESSAGE_TYPE\n"));
  /* obtain pointer to DHCP message type */
  if (!dhcp_option_given(dhcp, DHCP_OPTION_IDX_MSG_TYPE)) {
 8014df8:	4b39      	ldr	r3, [pc, #228]	; (8014ee0 <dhcp_recv+0x194>)
 8014dfa:	785b      	ldrb	r3, [r3, #1]
 8014dfc:	2b00      	cmp	r3, #0
 8014dfe:	d062      	beq.n	8014ec6 <dhcp_recv+0x17a>
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_WARNING, ("DHCP_OPTION_MESSAGE_TYPE option not found\n"));
    goto free_pbuf_and_return;
  }

  msg_in = (struct dhcp_msg *)p->payload;
 8014e00:	687b      	ldr	r3, [r7, #4]
 8014e02:	685b      	ldr	r3, [r3, #4]
 8014e04:	617b      	str	r3, [r7, #20]
  /* read DHCP message type */
  msg_type = (u8_t)dhcp_get_option_value(dhcp, DHCP_OPTION_IDX_MSG_TYPE);
 8014e06:	4b37      	ldr	r3, [pc, #220]	; (8014ee4 <dhcp_recv+0x198>)
 8014e08:	685b      	ldr	r3, [r3, #4]
 8014e0a:	74fb      	strb	r3, [r7, #19]
  /* message type is DHCP ACK? */
  if (msg_type == DHCP_ACK) {
 8014e0c:	7cfb      	ldrb	r3, [r7, #19]
 8014e0e:	2b05      	cmp	r3, #5
 8014e10:	d12a      	bne.n	8014e68 <dhcp_recv+0x11c>
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("DHCP_ACK received\n"));
    /* in requesting state? */
    if (dhcp->state == DHCP_STATE_REQUESTING) {
 8014e12:	69fb      	ldr	r3, [r7, #28]
 8014e14:	795b      	ldrb	r3, [r3, #5]
 8014e16:	2b01      	cmp	r3, #1
 8014e18:	d112      	bne.n	8014e40 <dhcp_recv+0xf4>
      dhcp_handle_ack(netif, msg_in);
 8014e1a:	6979      	ldr	r1, [r7, #20]
 8014e1c:	6a38      	ldr	r0, [r7, #32]
 8014e1e:	f7fe fdc7 	bl	80139b0 <dhcp_handle_ack>
#if DHCP_DOES_ARP_CHECK
      if ((netif->flags & NETIF_FLAG_ETHARP) != 0) {
 8014e22:	6a3b      	ldr	r3, [r7, #32]
 8014e24:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 8014e28:	f003 0308 	and.w	r3, r3, #8
 8014e2c:	2b00      	cmp	r3, #0
 8014e2e:	d003      	beq.n	8014e38 <dhcp_recv+0xec>
        /* check if the acknowledged lease address is already in use */
        dhcp_check(netif);
 8014e30:	6a38      	ldr	r0, [r7, #32]
 8014e32:	f7fe fb37 	bl	80134a4 <dhcp_check>
 8014e36:	e049      	b.n	8014ecc <dhcp_recv+0x180>
      } else {
        /* bind interface to the acknowledged lease address */
        dhcp_bind(netif);
 8014e38:	6a38      	ldr	r0, [r7, #32]
 8014e3a:	f7ff f837 	bl	8013eac <dhcp_bind>
 8014e3e:	e045      	b.n	8014ecc <dhcp_recv+0x180>
      /* bind interface to the acknowledged lease address */
      dhcp_bind(netif);
#endif
    }
    /* already bound to the given lease address? */
    else if ((dhcp->state == DHCP_STATE_REBOOTING) || (dhcp->state == DHCP_STATE_REBINDING) ||
 8014e40:	69fb      	ldr	r3, [r7, #28]
 8014e42:	795b      	ldrb	r3, [r3, #5]
 8014e44:	2b03      	cmp	r3, #3
 8014e46:	d007      	beq.n	8014e58 <dhcp_recv+0x10c>
 8014e48:	69fb      	ldr	r3, [r7, #28]
 8014e4a:	795b      	ldrb	r3, [r3, #5]
 8014e4c:	2b04      	cmp	r3, #4
 8014e4e:	d003      	beq.n	8014e58 <dhcp_recv+0x10c>
             (dhcp->state == DHCP_STATE_RENEWING)) {
 8014e50:	69fb      	ldr	r3, [r7, #28]
 8014e52:	795b      	ldrb	r3, [r3, #5]
    else if ((dhcp->state == DHCP_STATE_REBOOTING) || (dhcp->state == DHCP_STATE_REBINDING) ||
 8014e54:	2b05      	cmp	r3, #5
 8014e56:	d139      	bne.n	8014ecc <dhcp_recv+0x180>
      dhcp_handle_ack(netif, msg_in);
 8014e58:	6979      	ldr	r1, [r7, #20]
 8014e5a:	6a38      	ldr	r0, [r7, #32]
 8014e5c:	f7fe fda8 	bl	80139b0 <dhcp_handle_ack>
      dhcp_bind(netif);
 8014e60:	6a38      	ldr	r0, [r7, #32]
 8014e62:	f7ff f823 	bl	8013eac <dhcp_bind>
 8014e66:	e031      	b.n	8014ecc <dhcp_recv+0x180>
    }
  }
  /* received a DHCP_NAK in appropriate state? */
  else if ((msg_type == DHCP_NAK) &&
 8014e68:	7cfb      	ldrb	r3, [r7, #19]
 8014e6a:	2b06      	cmp	r3, #6
 8014e6c:	d113      	bne.n	8014e96 <dhcp_recv+0x14a>
           ((dhcp->state == DHCP_STATE_REBOOTING) || (dhcp->state == DHCP_STATE_REQUESTING) ||
 8014e6e:	69fb      	ldr	r3, [r7, #28]
 8014e70:	795b      	ldrb	r3, [r3, #5]
  else if ((msg_type == DHCP_NAK) &&
 8014e72:	2b03      	cmp	r3, #3
 8014e74:	d00b      	beq.n	8014e8e <dhcp_recv+0x142>
           ((dhcp->state == DHCP_STATE_REBOOTING) || (dhcp->state == DHCP_STATE_REQUESTING) ||
 8014e76:	69fb      	ldr	r3, [r7, #28]
 8014e78:	795b      	ldrb	r3, [r3, #5]
 8014e7a:	2b01      	cmp	r3, #1
 8014e7c:	d007      	beq.n	8014e8e <dhcp_recv+0x142>
            (dhcp->state == DHCP_STATE_REBINDING) || (dhcp->state == DHCP_STATE_RENEWING  ))) {
 8014e7e:	69fb      	ldr	r3, [r7, #28]
 8014e80:	795b      	ldrb	r3, [r3, #5]
           ((dhcp->state == DHCP_STATE_REBOOTING) || (dhcp->state == DHCP_STATE_REQUESTING) ||
 8014e82:	2b04      	cmp	r3, #4
 8014e84:	d003      	beq.n	8014e8e <dhcp_recv+0x142>
            (dhcp->state == DHCP_STATE_REBINDING) || (dhcp->state == DHCP_STATE_RENEWING  ))) {
 8014e86:	69fb      	ldr	r3, [r7, #28]
 8014e88:	795b      	ldrb	r3, [r3, #5]
 8014e8a:	2b05      	cmp	r3, #5
 8014e8c:	d103      	bne.n	8014e96 <dhcp_recv+0x14a>
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("DHCP_NAK received\n"));
    dhcp_handle_nak(netif);
 8014e8e:	6a38      	ldr	r0, [r7, #32]
 8014e90:	f7fe faee 	bl	8013470 <dhcp_handle_nak>
 8014e94:	e01a      	b.n	8014ecc <dhcp_recv+0x180>
  }
  /* received a DHCP_OFFER in DHCP_STATE_SELECTING state? */
  else if ((msg_type == DHCP_OFFER) && (dhcp->state == DHCP_STATE_SELECTING)) {
 8014e96:	7cfb      	ldrb	r3, [r7, #19]
 8014e98:	2b02      	cmp	r3, #2
 8014e9a:	d116      	bne.n	8014eca <dhcp_recv+0x17e>
 8014e9c:	69fb      	ldr	r3, [r7, #28]
 8014e9e:	795b      	ldrb	r3, [r3, #5]
 8014ea0:	2b06      	cmp	r3, #6
 8014ea2:	d112      	bne.n	8014eca <dhcp_recv+0x17e>
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("DHCP_OFFER received in DHCP_STATE_SELECTING state\n"));
    /* remember offered lease */
    dhcp_handle_offer(netif, msg_in);
 8014ea4:	6979      	ldr	r1, [r7, #20]
 8014ea6:	6a38      	ldr	r0, [r7, #32]
 8014ea8:	f7fe fb30 	bl	801350c <dhcp_handle_offer>
 8014eac:	e00e      	b.n	8014ecc <dhcp_recv+0x180>
    goto free_pbuf_and_return;
 8014eae:	bf00      	nop
 8014eb0:	e00c      	b.n	8014ecc <dhcp_recv+0x180>
    goto free_pbuf_and_return;
 8014eb2:	bf00      	nop
 8014eb4:	e00a      	b.n	8014ecc <dhcp_recv+0x180>
    goto free_pbuf_and_return;
 8014eb6:	bf00      	nop
 8014eb8:	e008      	b.n	8014ecc <dhcp_recv+0x180>
      goto free_pbuf_and_return;
 8014eba:	bf00      	nop
 8014ebc:	e006      	b.n	8014ecc <dhcp_recv+0x180>
    goto free_pbuf_and_return;
 8014ebe:	bf00      	nop
 8014ec0:	e004      	b.n	8014ecc <dhcp_recv+0x180>
    goto free_pbuf_and_return;
 8014ec2:	bf00      	nop
 8014ec4:	e002      	b.n	8014ecc <dhcp_recv+0x180>
    goto free_pbuf_and_return;
 8014ec6:	bf00      	nop
 8014ec8:	e000      	b.n	8014ecc <dhcp_recv+0x180>
  }

free_pbuf_and_return:
 8014eca:	bf00      	nop
  pbuf_free(p);
 8014ecc:	6878      	ldr	r0, [r7, #4]
 8014ece:	f7f7 f837 	bl	800bf40 <pbuf_free>
}
 8014ed2:	bf00      	nop
 8014ed4:	3728      	adds	r7, #40	; 0x28
 8014ed6:	46bd      	mov	sp, r7
 8014ed8:	bd80      	pop	{r7, pc}
 8014eda:	bf00      	nop
 8014edc:	2000537c 	.word	0x2000537c
 8014ee0:	200089a4 	.word	0x200089a4
 8014ee4:	2000897c 	.word	0x2000897c

08014ee8 <dhcp_create_msg>:
 * @param dhcp dhcp control struct
 * @param message_type message type of the request
 */
static struct pbuf *
dhcp_create_msg(struct netif *netif, struct dhcp *dhcp, u8_t message_type, u16_t *options_out_len)
{
 8014ee8:	b580      	push	{r7, lr}
 8014eea:	b088      	sub	sp, #32
 8014eec:	af00      	add	r7, sp, #0
 8014eee:	60f8      	str	r0, [r7, #12]
 8014ef0:	60b9      	str	r1, [r7, #8]
 8014ef2:	603b      	str	r3, [r7, #0]
 8014ef4:	4613      	mov	r3, r2
 8014ef6:	71fb      	strb	r3, [r7, #7]
  if (!xid_initialised) {
    xid = DHCP_GLOBAL_XID;
    xid_initialised = !xid_initialised;
  }
#endif
  LWIP_ERROR("dhcp_create_msg: netif != NULL", (netif != NULL), return NULL;);
 8014ef8:	68fb      	ldr	r3, [r7, #12]
 8014efa:	2b00      	cmp	r3, #0
 8014efc:	d108      	bne.n	8014f10 <dhcp_create_msg+0x28>
 8014efe:	4b5f      	ldr	r3, [pc, #380]	; (801507c <dhcp_create_msg+0x194>)
 8014f00:	f240 7269 	movw	r2, #1897	; 0x769
 8014f04:	495e      	ldr	r1, [pc, #376]	; (8015080 <dhcp_create_msg+0x198>)
 8014f06:	485f      	ldr	r0, [pc, #380]	; (8015084 <dhcp_create_msg+0x19c>)
 8014f08:	f003 fabe 	bl	8018488 <iprintf>
 8014f0c:	2300      	movs	r3, #0
 8014f0e:	e0b1      	b.n	8015074 <dhcp_create_msg+0x18c>
  LWIP_ERROR("dhcp_create_msg: dhcp != NULL", (dhcp != NULL), return NULL;);
 8014f10:	68bb      	ldr	r3, [r7, #8]
 8014f12:	2b00      	cmp	r3, #0
 8014f14:	d108      	bne.n	8014f28 <dhcp_create_msg+0x40>
 8014f16:	4b59      	ldr	r3, [pc, #356]	; (801507c <dhcp_create_msg+0x194>)
 8014f18:	f240 726a 	movw	r2, #1898	; 0x76a
 8014f1c:	495a      	ldr	r1, [pc, #360]	; (8015088 <dhcp_create_msg+0x1a0>)
 8014f1e:	4859      	ldr	r0, [pc, #356]	; (8015084 <dhcp_create_msg+0x19c>)
 8014f20:	f003 fab2 	bl	8018488 <iprintf>
 8014f24:	2300      	movs	r3, #0
 8014f26:	e0a5      	b.n	8015074 <dhcp_create_msg+0x18c>
  p_out = pbuf_alloc(PBUF_TRANSPORT, sizeof(struct dhcp_msg), PBUF_RAM);
 8014f28:	f44f 7220 	mov.w	r2, #640	; 0x280
 8014f2c:	f44f 719a 	mov.w	r1, #308	; 0x134
 8014f30:	2036      	movs	r0, #54	; 0x36
 8014f32:	f7f6 fd21 	bl	800b978 <pbuf_alloc>
 8014f36:	61b8      	str	r0, [r7, #24]
  if (p_out == NULL) {
 8014f38:	69bb      	ldr	r3, [r7, #24]
 8014f3a:	2b00      	cmp	r3, #0
 8014f3c:	d101      	bne.n	8014f42 <dhcp_create_msg+0x5a>
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_SERIOUS,
                ("dhcp_create_msg(): could not allocate pbuf\n"));
    return NULL;
 8014f3e:	2300      	movs	r3, #0
 8014f40:	e098      	b.n	8015074 <dhcp_create_msg+0x18c>
  }
  LWIP_ASSERT("dhcp_create_msg: check that first pbuf can hold struct dhcp_msg",
 8014f42:	69bb      	ldr	r3, [r7, #24]
 8014f44:	895b      	ldrh	r3, [r3, #10]
 8014f46:	f5b3 7f9a 	cmp.w	r3, #308	; 0x134
 8014f4a:	d206      	bcs.n	8014f5a <dhcp_create_msg+0x72>
 8014f4c:	4b4b      	ldr	r3, [pc, #300]	; (801507c <dhcp_create_msg+0x194>)
 8014f4e:	f240 7271 	movw	r2, #1905	; 0x771
 8014f52:	494e      	ldr	r1, [pc, #312]	; (801508c <dhcp_create_msg+0x1a4>)
 8014f54:	484b      	ldr	r0, [pc, #300]	; (8015084 <dhcp_create_msg+0x19c>)
 8014f56:	f003 fa97 	bl	8018488 <iprintf>
              (p_out->len >= sizeof(struct dhcp_msg)));

  /* DHCP_REQUEST should reuse 'xid' from DHCPOFFER */
  if ((message_type != DHCP_REQUEST) || (dhcp->state == DHCP_STATE_REBOOTING)) {
 8014f5a:	79fb      	ldrb	r3, [r7, #7]
 8014f5c:	2b03      	cmp	r3, #3
 8014f5e:	d103      	bne.n	8014f68 <dhcp_create_msg+0x80>
 8014f60:	68bb      	ldr	r3, [r7, #8]
 8014f62:	795b      	ldrb	r3, [r3, #5]
 8014f64:	2b03      	cmp	r3, #3
 8014f66:	d10d      	bne.n	8014f84 <dhcp_create_msg+0x9c>
    /* reuse transaction identifier in retransmissions */
    if (dhcp->tries == 0) {
 8014f68:	68bb      	ldr	r3, [r7, #8]
 8014f6a:	799b      	ldrb	r3, [r3, #6]
 8014f6c:	2b00      	cmp	r3, #0
 8014f6e:	d105      	bne.n	8014f7c <dhcp_create_msg+0x94>
#if DHCP_CREATE_RAND_XID && defined(LWIP_RAND)
      xid = LWIP_RAND();
 8014f70:	f003 f8fe 	bl	8018170 <rand>
 8014f74:	4603      	mov	r3, r0
 8014f76:	461a      	mov	r2, r3
 8014f78:	4b45      	ldr	r3, [pc, #276]	; (8015090 <dhcp_create_msg+0x1a8>)
 8014f7a:	601a      	str	r2, [r3, #0]
#else /* DHCP_CREATE_RAND_XID && defined(LWIP_RAND) */
      xid++;
#endif /* DHCP_CREATE_RAND_XID && defined(LWIP_RAND) */
    }
    dhcp->xid = xid;
 8014f7c:	4b44      	ldr	r3, [pc, #272]	; (8015090 <dhcp_create_msg+0x1a8>)
 8014f7e:	681a      	ldr	r2, [r3, #0]
 8014f80:	68bb      	ldr	r3, [r7, #8]
 8014f82:	601a      	str	r2, [r3, #0]
  }
  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE,
              ("transaction id xid(%"X32_F")\n", xid));

  msg_out = (struct dhcp_msg *)p_out->payload;
 8014f84:	69bb      	ldr	r3, [r7, #24]
 8014f86:	685b      	ldr	r3, [r3, #4]
 8014f88:	617b      	str	r3, [r7, #20]
  memset(msg_out, 0, sizeof(struct dhcp_msg));
 8014f8a:	f44f 729a 	mov.w	r2, #308	; 0x134
 8014f8e:	2100      	movs	r1, #0
 8014f90:	6978      	ldr	r0, [r7, #20]
 8014f92:	f003 fade 	bl	8018552 <memset>

  msg_out->op = DHCP_BOOTREQUEST;
 8014f96:	697b      	ldr	r3, [r7, #20]
 8014f98:	2201      	movs	r2, #1
 8014f9a:	701a      	strb	r2, [r3, #0]
  /* @todo: make link layer independent */
  msg_out->htype = LWIP_IANA_HWTYPE_ETHERNET;
 8014f9c:	697b      	ldr	r3, [r7, #20]
 8014f9e:	2201      	movs	r2, #1
 8014fa0:	705a      	strb	r2, [r3, #1]
  msg_out->hlen = netif->hwaddr_len;
 8014fa2:	68fb      	ldr	r3, [r7, #12]
 8014fa4:	f893 2030 	ldrb.w	r2, [r3, #48]	; 0x30
 8014fa8:	697b      	ldr	r3, [r7, #20]
 8014faa:	709a      	strb	r2, [r3, #2]
  msg_out->xid = lwip_htonl(dhcp->xid);
 8014fac:	68bb      	ldr	r3, [r7, #8]
 8014fae:	681b      	ldr	r3, [r3, #0]
 8014fb0:	4618      	mov	r0, r3
 8014fb2:	f7f5 f982 	bl	800a2ba <lwip_htonl>
 8014fb6:	4602      	mov	r2, r0
 8014fb8:	697b      	ldr	r3, [r7, #20]
 8014fba:	605a      	str	r2, [r3, #4]
  /* we don't need the broadcast flag since we can receive unicast traffic
     before being fully configured! */
  /* set ciaddr to netif->ip_addr based on message_type and state */
  if ((message_type == DHCP_INFORM) || (message_type == DHCP_DECLINE) || (message_type == DHCP_RELEASE) ||
 8014fbc:	79fb      	ldrb	r3, [r7, #7]
 8014fbe:	2b08      	cmp	r3, #8
 8014fc0:	d010      	beq.n	8014fe4 <dhcp_create_msg+0xfc>
 8014fc2:	79fb      	ldrb	r3, [r7, #7]
 8014fc4:	2b04      	cmp	r3, #4
 8014fc6:	d00d      	beq.n	8014fe4 <dhcp_create_msg+0xfc>
 8014fc8:	79fb      	ldrb	r3, [r7, #7]
 8014fca:	2b07      	cmp	r3, #7
 8014fcc:	d00a      	beq.n	8014fe4 <dhcp_create_msg+0xfc>
 8014fce:	79fb      	ldrb	r3, [r7, #7]
 8014fd0:	2b03      	cmp	r3, #3
 8014fd2:	d10c      	bne.n	8014fee <dhcp_create_msg+0x106>
      ((message_type == DHCP_REQUEST) && /* DHCP_STATE_BOUND not used for sending! */
       ((dhcp->state == DHCP_STATE_RENEWING) || dhcp->state == DHCP_STATE_REBINDING))) {
 8014fd4:	68bb      	ldr	r3, [r7, #8]
 8014fd6:	795b      	ldrb	r3, [r3, #5]
      ((message_type == DHCP_REQUEST) && /* DHCP_STATE_BOUND not used for sending! */
 8014fd8:	2b05      	cmp	r3, #5
 8014fda:	d003      	beq.n	8014fe4 <dhcp_create_msg+0xfc>
       ((dhcp->state == DHCP_STATE_RENEWING) || dhcp->state == DHCP_STATE_REBINDING))) {
 8014fdc:	68bb      	ldr	r3, [r7, #8]
 8014fde:	795b      	ldrb	r3, [r3, #5]
 8014fe0:	2b04      	cmp	r3, #4
 8014fe2:	d104      	bne.n	8014fee <dhcp_create_msg+0x106>
    ip4_addr_copy(msg_out->ciaddr, *netif_ip4_addr(netif));
 8014fe4:	68fb      	ldr	r3, [r7, #12]
 8014fe6:	3304      	adds	r3, #4
 8014fe8:	681a      	ldr	r2, [r3, #0]
 8014fea:	697b      	ldr	r3, [r7, #20]
 8014fec:	60da      	str	r2, [r3, #12]
  }
  for (i = 0; i < LWIP_MIN(DHCP_CHADDR_LEN, NETIF_MAX_HWADDR_LEN); i++) {
 8014fee:	2300      	movs	r3, #0
 8014ff0:	83fb      	strh	r3, [r7, #30]
 8014ff2:	e00c      	b.n	801500e <dhcp_create_msg+0x126>
    /* copy netif hardware address (padded with zeroes through memset already) */
    msg_out->chaddr[i] = netif->hwaddr[i];
 8014ff4:	8bfa      	ldrh	r2, [r7, #30]
 8014ff6:	8bfb      	ldrh	r3, [r7, #30]
 8014ff8:	68f9      	ldr	r1, [r7, #12]
 8014ffa:	440a      	add	r2, r1
 8014ffc:	f892 102a 	ldrb.w	r1, [r2, #42]	; 0x2a
 8015000:	697a      	ldr	r2, [r7, #20]
 8015002:	4413      	add	r3, r2
 8015004:	460a      	mov	r2, r1
 8015006:	771a      	strb	r2, [r3, #28]
  for (i = 0; i < LWIP_MIN(DHCP_CHADDR_LEN, NETIF_MAX_HWADDR_LEN); i++) {
 8015008:	8bfb      	ldrh	r3, [r7, #30]
 801500a:	3301      	adds	r3, #1
 801500c:	83fb      	strh	r3, [r7, #30]
 801500e:	8bfb      	ldrh	r3, [r7, #30]
 8015010:	2b05      	cmp	r3, #5
 8015012:	d9ef      	bls.n	8014ff4 <dhcp_create_msg+0x10c>
  }
  msg_out->cookie = PP_HTONL(DHCP_MAGIC_COOKIE);
 8015014:	697b      	ldr	r3, [r7, #20]
 8015016:	2200      	movs	r2, #0
 8015018:	f042 0263 	orr.w	r2, r2, #99	; 0x63
 801501c:	f883 20ec 	strb.w	r2, [r3, #236]	; 0xec
 8015020:	2200      	movs	r2, #0
 8015022:	f062 027d 	orn	r2, r2, #125	; 0x7d
 8015026:	f883 20ed 	strb.w	r2, [r3, #237]	; 0xed
 801502a:	2200      	movs	r2, #0
 801502c:	f042 0253 	orr.w	r2, r2, #83	; 0x53
 8015030:	f883 20ee 	strb.w	r2, [r3, #238]	; 0xee
 8015034:	2200      	movs	r2, #0
 8015036:	f042 0263 	orr.w	r2, r2, #99	; 0x63
 801503a:	f883 20ef 	strb.w	r2, [r3, #239]	; 0xef
  /* Add option MESSAGE_TYPE */
  options_out_len_loc = dhcp_option(0, msg_out->options, DHCP_OPTION_MESSAGE_TYPE, DHCP_OPTION_MESSAGE_TYPE_LEN);
 801503e:	697b      	ldr	r3, [r7, #20]
 8015040:	f103 01f0 	add.w	r1, r3, #240	; 0xf0
 8015044:	2301      	movs	r3, #1
 8015046:	2235      	movs	r2, #53	; 0x35
 8015048:	2000      	movs	r0, #0
 801504a:	f7ff faab 	bl	80145a4 <dhcp_option>
 801504e:	4603      	mov	r3, r0
 8015050:	827b      	strh	r3, [r7, #18]
  options_out_len_loc = dhcp_option_byte(options_out_len_loc, msg_out->options, message_type);
 8015052:	697b      	ldr	r3, [r7, #20]
 8015054:	f103 01f0 	add.w	r1, r3, #240	; 0xf0
 8015058:	79fa      	ldrb	r2, [r7, #7]
 801505a:	8a7b      	ldrh	r3, [r7, #18]
 801505c:	4618      	mov	r0, r3
 801505e:	f7ff fad5 	bl	801460c <dhcp_option_byte>
 8015062:	4603      	mov	r3, r0
 8015064:	827b      	strh	r3, [r7, #18]
  if (options_out_len) {
 8015066:	683b      	ldr	r3, [r7, #0]
 8015068:	2b00      	cmp	r3, #0
 801506a:	d002      	beq.n	8015072 <dhcp_create_msg+0x18a>
    *options_out_len = options_out_len_loc;
 801506c:	683b      	ldr	r3, [r7, #0]
 801506e:	8a7a      	ldrh	r2, [r7, #18]
 8015070:	801a      	strh	r2, [r3, #0]
  }
  return p_out;
 8015072:	69bb      	ldr	r3, [r7, #24]
}
 8015074:	4618      	mov	r0, r3
 8015076:	3720      	adds	r7, #32
 8015078:	46bd      	mov	sp, r7
 801507a:	bd80      	pop	{r7, pc}
 801507c:	0801b6f4 	.word	0x0801b6f4
 8015080:	0801ba24 	.word	0x0801ba24
 8015084:	0801b754 	.word	0x0801b754
 8015088:	0801ba44 	.word	0x0801ba44
 801508c:	0801ba64 	.word	0x0801ba64
 8015090:	200089b8 	.word	0x200089b8

08015094 <dhcp_option_trailer>:
 * Adds the END option to the DHCP message, and if
 * necessary, up to three padding bytes.
 */
static void
dhcp_option_trailer(u16_t options_out_len, u8_t *options, struct pbuf *p_out)
{
 8015094:	b580      	push	{r7, lr}
 8015096:	b084      	sub	sp, #16
 8015098:	af00      	add	r7, sp, #0
 801509a:	4603      	mov	r3, r0
 801509c:	60b9      	str	r1, [r7, #8]
 801509e:	607a      	str	r2, [r7, #4]
 80150a0:	81fb      	strh	r3, [r7, #14]
  options[options_out_len++] = DHCP_OPTION_END;
 80150a2:	89fb      	ldrh	r3, [r7, #14]
 80150a4:	1c5a      	adds	r2, r3, #1
 80150a6:	81fa      	strh	r2, [r7, #14]
 80150a8:	461a      	mov	r2, r3
 80150aa:	68bb      	ldr	r3, [r7, #8]
 80150ac:	4413      	add	r3, r2
 80150ae:	22ff      	movs	r2, #255	; 0xff
 80150b0:	701a      	strb	r2, [r3, #0]
  /* packet is too small, or not 4 byte aligned? */
  while (((options_out_len < DHCP_MIN_OPTIONS_LEN) || (options_out_len & 3)) &&
 80150b2:	e007      	b.n	80150c4 <dhcp_option_trailer+0x30>
         (options_out_len < DHCP_OPTIONS_LEN)) {
    /* add a fill/padding byte */
    options[options_out_len++] = 0;
 80150b4:	89fb      	ldrh	r3, [r7, #14]
 80150b6:	1c5a      	adds	r2, r3, #1
 80150b8:	81fa      	strh	r2, [r7, #14]
 80150ba:	461a      	mov	r2, r3
 80150bc:	68bb      	ldr	r3, [r7, #8]
 80150be:	4413      	add	r3, r2
 80150c0:	2200      	movs	r2, #0
 80150c2:	701a      	strb	r2, [r3, #0]
  while (((options_out_len < DHCP_MIN_OPTIONS_LEN) || (options_out_len & 3)) &&
 80150c4:	89fb      	ldrh	r3, [r7, #14]
 80150c6:	2b43      	cmp	r3, #67	; 0x43
 80150c8:	d904      	bls.n	80150d4 <dhcp_option_trailer+0x40>
 80150ca:	89fb      	ldrh	r3, [r7, #14]
 80150cc:	f003 0303 	and.w	r3, r3, #3
 80150d0:	2b00      	cmp	r3, #0
 80150d2:	d002      	beq.n	80150da <dhcp_option_trailer+0x46>
 80150d4:	89fb      	ldrh	r3, [r7, #14]
 80150d6:	2b43      	cmp	r3, #67	; 0x43
 80150d8:	d9ec      	bls.n	80150b4 <dhcp_option_trailer+0x20>
  }
  /* shrink the pbuf to the actual content length */
  pbuf_realloc(p_out, (u16_t)(sizeof(struct dhcp_msg) - DHCP_OPTIONS_LEN + options_out_len));
 80150da:	89fb      	ldrh	r3, [r7, #14]
 80150dc:	33f0      	adds	r3, #240	; 0xf0
 80150de:	b29b      	uxth	r3, r3
 80150e0:	4619      	mov	r1, r3
 80150e2:	6878      	ldr	r0, [r7, #4]
 80150e4:	f7f6 fda6 	bl	800bc34 <pbuf_realloc>
}
 80150e8:	bf00      	nop
 80150ea:	3710      	adds	r7, #16
 80150ec:	46bd      	mov	sp, r7
 80150ee:	bd80      	pop	{r7, pc}

080150f0 <dhcp_supplied_address>:
 * @return 1 if DHCP supplied netif->ip_addr (states BOUND or RENEWING),
 *         0 otherwise
 */
u8_t
dhcp_supplied_address(const struct netif *netif)
{
 80150f0:	b480      	push	{r7}
 80150f2:	b085      	sub	sp, #20
 80150f4:	af00      	add	r7, sp, #0
 80150f6:	6078      	str	r0, [r7, #4]
  if ((netif != NULL) && (netif_dhcp_data(netif) != NULL)) {
 80150f8:	687b      	ldr	r3, [r7, #4]
 80150fa:	2b00      	cmp	r3, #0
 80150fc:	d017      	beq.n	801512e <dhcp_supplied_address+0x3e>
 80150fe:	687b      	ldr	r3, [r7, #4]
 8015100:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8015102:	2b00      	cmp	r3, #0
 8015104:	d013      	beq.n	801512e <dhcp_supplied_address+0x3e>
    struct dhcp *dhcp = netif_dhcp_data(netif);
 8015106:	687b      	ldr	r3, [r7, #4]
 8015108:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801510a:	60fb      	str	r3, [r7, #12]
    return (dhcp->state == DHCP_STATE_BOUND) || (dhcp->state == DHCP_STATE_RENEWING) ||
 801510c:	68fb      	ldr	r3, [r7, #12]
 801510e:	795b      	ldrb	r3, [r3, #5]
 8015110:	2b0a      	cmp	r3, #10
 8015112:	d007      	beq.n	8015124 <dhcp_supplied_address+0x34>
 8015114:	68fb      	ldr	r3, [r7, #12]
 8015116:	795b      	ldrb	r3, [r3, #5]
 8015118:	2b05      	cmp	r3, #5
 801511a:	d003      	beq.n	8015124 <dhcp_supplied_address+0x34>
           (dhcp->state == DHCP_STATE_REBINDING);
 801511c:	68fb      	ldr	r3, [r7, #12]
 801511e:	795b      	ldrb	r3, [r3, #5]
    return (dhcp->state == DHCP_STATE_BOUND) || (dhcp->state == DHCP_STATE_RENEWING) ||
 8015120:	2b04      	cmp	r3, #4
 8015122:	d101      	bne.n	8015128 <dhcp_supplied_address+0x38>
 8015124:	2301      	movs	r3, #1
 8015126:	e000      	b.n	801512a <dhcp_supplied_address+0x3a>
 8015128:	2300      	movs	r3, #0
 801512a:	b2db      	uxtb	r3, r3
 801512c:	e000      	b.n	8015130 <dhcp_supplied_address+0x40>
  }
  return 0;
 801512e:	2300      	movs	r3, #0
}
 8015130:	4618      	mov	r0, r3
 8015132:	3714      	adds	r7, #20
 8015134:	46bd      	mov	sp, r7
 8015136:	f85d 7b04 	ldr.w	r7, [sp], #4
 801513a:	4770      	bx	lr

0801513c <etharp_free_entry>:
#endif /* ARP_QUEUEING */

/** Clean up ARP table entries */
static void
etharp_free_entry(int i)
{
 801513c:	b580      	push	{r7, lr}
 801513e:	b082      	sub	sp, #8
 8015140:	af00      	add	r7, sp, #0
 8015142:	6078      	str	r0, [r7, #4]
  /* remove from SNMP ARP index tree */
  mib2_remove_arp_entry(arp_table[i].netif, &arp_table[i].ipaddr);
  /* and empty packet queue */
  if (arp_table[i].q != NULL) {
 8015144:	4915      	ldr	r1, [pc, #84]	; (801519c <etharp_free_entry+0x60>)
 8015146:	687a      	ldr	r2, [r7, #4]
 8015148:	4613      	mov	r3, r2
 801514a:	005b      	lsls	r3, r3, #1
 801514c:	4413      	add	r3, r2
 801514e:	00db      	lsls	r3, r3, #3
 8015150:	440b      	add	r3, r1
 8015152:	681b      	ldr	r3, [r3, #0]
 8015154:	2b00      	cmp	r3, #0
 8015156:	d013      	beq.n	8015180 <etharp_free_entry+0x44>
    /* remove all queued packets */
    LWIP_DEBUGF(ETHARP_DEBUG, ("etharp_free_entry: freeing entry %"U16_F", packet queue %p.\n", (u16_t)i, (void *)(arp_table[i].q)));
    free_etharp_q(arp_table[i].q);
 8015158:	4910      	ldr	r1, [pc, #64]	; (801519c <etharp_free_entry+0x60>)
 801515a:	687a      	ldr	r2, [r7, #4]
 801515c:	4613      	mov	r3, r2
 801515e:	005b      	lsls	r3, r3, #1
 8015160:	4413      	add	r3, r2
 8015162:	00db      	lsls	r3, r3, #3
 8015164:	440b      	add	r3, r1
 8015166:	681b      	ldr	r3, [r3, #0]
 8015168:	4618      	mov	r0, r3
 801516a:	f7f6 fee9 	bl	800bf40 <pbuf_free>
    arp_table[i].q = NULL;
 801516e:	490b      	ldr	r1, [pc, #44]	; (801519c <etharp_free_entry+0x60>)
 8015170:	687a      	ldr	r2, [r7, #4]
 8015172:	4613      	mov	r3, r2
 8015174:	005b      	lsls	r3, r3, #1
 8015176:	4413      	add	r3, r2
 8015178:	00db      	lsls	r3, r3, #3
 801517a:	440b      	add	r3, r1
 801517c:	2200      	movs	r2, #0
 801517e:	601a      	str	r2, [r3, #0]
  }
  /* recycle entry for re-use */
  arp_table[i].state = ETHARP_STATE_EMPTY;
 8015180:	4906      	ldr	r1, [pc, #24]	; (801519c <etharp_free_entry+0x60>)
 8015182:	687a      	ldr	r2, [r7, #4]
 8015184:	4613      	mov	r3, r2
 8015186:	005b      	lsls	r3, r3, #1
 8015188:	4413      	add	r3, r2
 801518a:	00db      	lsls	r3, r3, #3
 801518c:	440b      	add	r3, r1
 801518e:	3314      	adds	r3, #20
 8015190:	2200      	movs	r2, #0
 8015192:	701a      	strb	r2, [r3, #0]
  arp_table[i].ctime = 0;
  arp_table[i].netif = NULL;
  ip4_addr_set_zero(&arp_table[i].ipaddr);
  arp_table[i].ethaddr = ethzero;
#endif /* LWIP_DEBUG */
}
 8015194:	bf00      	nop
 8015196:	3708      	adds	r7, #8
 8015198:	46bd      	mov	sp, r7
 801519a:	bd80      	pop	{r7, pc}
 801519c:	200089bc 	.word	0x200089bc

080151a0 <etharp_tmr>:
 * This function should be called every ARP_TMR_INTERVAL milliseconds (1 second),
 * in order to expire entries in the ARP table.
 */
void
etharp_tmr(void)
{
 80151a0:	b580      	push	{r7, lr}
 80151a2:	b082      	sub	sp, #8
 80151a4:	af00      	add	r7, sp, #0
  int i;

  LWIP_DEBUGF(ETHARP_DEBUG, ("etharp_timer\n"));
  /* remove expired entries from the ARP table */
  for (i = 0; i < ARP_TABLE_SIZE; ++i) {
 80151a6:	2300      	movs	r3, #0
 80151a8:	607b      	str	r3, [r7, #4]
 80151aa:	e096      	b.n	80152da <etharp_tmr+0x13a>
    u8_t state = arp_table[i].state;
 80151ac:	494f      	ldr	r1, [pc, #316]	; (80152ec <etharp_tmr+0x14c>)
 80151ae:	687a      	ldr	r2, [r7, #4]
 80151b0:	4613      	mov	r3, r2
 80151b2:	005b      	lsls	r3, r3, #1
 80151b4:	4413      	add	r3, r2
 80151b6:	00db      	lsls	r3, r3, #3
 80151b8:	440b      	add	r3, r1
 80151ba:	3314      	adds	r3, #20
 80151bc:	781b      	ldrb	r3, [r3, #0]
 80151be:	70fb      	strb	r3, [r7, #3]
    if (state != ETHARP_STATE_EMPTY
 80151c0:	78fb      	ldrb	r3, [r7, #3]
 80151c2:	2b00      	cmp	r3, #0
 80151c4:	f000 8086 	beq.w	80152d4 <etharp_tmr+0x134>
#if ETHARP_SUPPORT_STATIC_ENTRIES
        && (state != ETHARP_STATE_STATIC)
#endif /* ETHARP_SUPPORT_STATIC_ENTRIES */
       ) {
      arp_table[i].ctime++;
 80151c8:	4948      	ldr	r1, [pc, #288]	; (80152ec <etharp_tmr+0x14c>)
 80151ca:	687a      	ldr	r2, [r7, #4]
 80151cc:	4613      	mov	r3, r2
 80151ce:	005b      	lsls	r3, r3, #1
 80151d0:	4413      	add	r3, r2
 80151d2:	00db      	lsls	r3, r3, #3
 80151d4:	440b      	add	r3, r1
 80151d6:	3312      	adds	r3, #18
 80151d8:	881b      	ldrh	r3, [r3, #0]
 80151da:	3301      	adds	r3, #1
 80151dc:	b298      	uxth	r0, r3
 80151de:	4943      	ldr	r1, [pc, #268]	; (80152ec <etharp_tmr+0x14c>)
 80151e0:	687a      	ldr	r2, [r7, #4]
 80151e2:	4613      	mov	r3, r2
 80151e4:	005b      	lsls	r3, r3, #1
 80151e6:	4413      	add	r3, r2
 80151e8:	00db      	lsls	r3, r3, #3
 80151ea:	440b      	add	r3, r1
 80151ec:	3312      	adds	r3, #18
 80151ee:	4602      	mov	r2, r0
 80151f0:	801a      	strh	r2, [r3, #0]
      if ((arp_table[i].ctime >= ARP_MAXAGE) ||
 80151f2:	493e      	ldr	r1, [pc, #248]	; (80152ec <etharp_tmr+0x14c>)
 80151f4:	687a      	ldr	r2, [r7, #4]
 80151f6:	4613      	mov	r3, r2
 80151f8:	005b      	lsls	r3, r3, #1
 80151fa:	4413      	add	r3, r2
 80151fc:	00db      	lsls	r3, r3, #3
 80151fe:	440b      	add	r3, r1
 8015200:	3312      	adds	r3, #18
 8015202:	881b      	ldrh	r3, [r3, #0]
 8015204:	f5b3 7f96 	cmp.w	r3, #300	; 0x12c
 8015208:	d215      	bcs.n	8015236 <etharp_tmr+0x96>
          ((arp_table[i].state == ETHARP_STATE_PENDING)  &&
 801520a:	4938      	ldr	r1, [pc, #224]	; (80152ec <etharp_tmr+0x14c>)
 801520c:	687a      	ldr	r2, [r7, #4]
 801520e:	4613      	mov	r3, r2
 8015210:	005b      	lsls	r3, r3, #1
 8015212:	4413      	add	r3, r2
 8015214:	00db      	lsls	r3, r3, #3
 8015216:	440b      	add	r3, r1
 8015218:	3314      	adds	r3, #20
 801521a:	781b      	ldrb	r3, [r3, #0]
      if ((arp_table[i].ctime >= ARP_MAXAGE) ||
 801521c:	2b01      	cmp	r3, #1
 801521e:	d10e      	bne.n	801523e <etharp_tmr+0x9e>
           (arp_table[i].ctime >= ARP_MAXPENDING))) {
 8015220:	4932      	ldr	r1, [pc, #200]	; (80152ec <etharp_tmr+0x14c>)
 8015222:	687a      	ldr	r2, [r7, #4]
 8015224:	4613      	mov	r3, r2
 8015226:	005b      	lsls	r3, r3, #1
 8015228:	4413      	add	r3, r2
 801522a:	00db      	lsls	r3, r3, #3
 801522c:	440b      	add	r3, r1
 801522e:	3312      	adds	r3, #18
 8015230:	881b      	ldrh	r3, [r3, #0]
          ((arp_table[i].state == ETHARP_STATE_PENDING)  &&
 8015232:	2b04      	cmp	r3, #4
 8015234:	d903      	bls.n	801523e <etharp_tmr+0x9e>
        /* pending or stable entry has become old! */
        LWIP_DEBUGF(ETHARP_DEBUG, ("etharp_timer: expired %s entry %d.\n",
                                   arp_table[i].state >= ETHARP_STATE_STABLE ? "stable" : "pending", i));
        /* clean up entries that have just been expired */
        etharp_free_entry(i);
 8015236:	6878      	ldr	r0, [r7, #4]
 8015238:	f7ff ff80 	bl	801513c <etharp_free_entry>
 801523c:	e04a      	b.n	80152d4 <etharp_tmr+0x134>
      } else if (arp_table[i].state == ETHARP_STATE_STABLE_REREQUESTING_1) {
 801523e:	492b      	ldr	r1, [pc, #172]	; (80152ec <etharp_tmr+0x14c>)
 8015240:	687a      	ldr	r2, [r7, #4]
 8015242:	4613      	mov	r3, r2
 8015244:	005b      	lsls	r3, r3, #1
 8015246:	4413      	add	r3, r2
 8015248:	00db      	lsls	r3, r3, #3
 801524a:	440b      	add	r3, r1
 801524c:	3314      	adds	r3, #20
 801524e:	781b      	ldrb	r3, [r3, #0]
 8015250:	2b03      	cmp	r3, #3
 8015252:	d10a      	bne.n	801526a <etharp_tmr+0xca>
        /* Don't send more than one request every 2 seconds. */
        arp_table[i].state = ETHARP_STATE_STABLE_REREQUESTING_2;
 8015254:	4925      	ldr	r1, [pc, #148]	; (80152ec <etharp_tmr+0x14c>)
 8015256:	687a      	ldr	r2, [r7, #4]
 8015258:	4613      	mov	r3, r2
 801525a:	005b      	lsls	r3, r3, #1
 801525c:	4413      	add	r3, r2
 801525e:	00db      	lsls	r3, r3, #3
 8015260:	440b      	add	r3, r1
 8015262:	3314      	adds	r3, #20
 8015264:	2204      	movs	r2, #4
 8015266:	701a      	strb	r2, [r3, #0]
 8015268:	e034      	b.n	80152d4 <etharp_tmr+0x134>
      } else if (arp_table[i].state == ETHARP_STATE_STABLE_REREQUESTING_2) {
 801526a:	4920      	ldr	r1, [pc, #128]	; (80152ec <etharp_tmr+0x14c>)
 801526c:	687a      	ldr	r2, [r7, #4]
 801526e:	4613      	mov	r3, r2
 8015270:	005b      	lsls	r3, r3, #1
 8015272:	4413      	add	r3, r2
 8015274:	00db      	lsls	r3, r3, #3
 8015276:	440b      	add	r3, r1
 8015278:	3314      	adds	r3, #20
 801527a:	781b      	ldrb	r3, [r3, #0]
 801527c:	2b04      	cmp	r3, #4
 801527e:	d10a      	bne.n	8015296 <etharp_tmr+0xf6>
        /* Reset state to stable, so that the next transmitted packet will
           re-send an ARP request. */
        arp_table[i].state = ETHARP_STATE_STABLE;
 8015280:	491a      	ldr	r1, [pc, #104]	; (80152ec <etharp_tmr+0x14c>)
 8015282:	687a      	ldr	r2, [r7, #4]
 8015284:	4613      	mov	r3, r2
 8015286:	005b      	lsls	r3, r3, #1
 8015288:	4413      	add	r3, r2
 801528a:	00db      	lsls	r3, r3, #3
 801528c:	440b      	add	r3, r1
 801528e:	3314      	adds	r3, #20
 8015290:	2202      	movs	r2, #2
 8015292:	701a      	strb	r2, [r3, #0]
 8015294:	e01e      	b.n	80152d4 <etharp_tmr+0x134>
      } else if (arp_table[i].state == ETHARP_STATE_PENDING) {
 8015296:	4915      	ldr	r1, [pc, #84]	; (80152ec <etharp_tmr+0x14c>)
 8015298:	687a      	ldr	r2, [r7, #4]
 801529a:	4613      	mov	r3, r2
 801529c:	005b      	lsls	r3, r3, #1
 801529e:	4413      	add	r3, r2
 80152a0:	00db      	lsls	r3, r3, #3
 80152a2:	440b      	add	r3, r1
 80152a4:	3314      	adds	r3, #20
 80152a6:	781b      	ldrb	r3, [r3, #0]
 80152a8:	2b01      	cmp	r3, #1
 80152aa:	d113      	bne.n	80152d4 <etharp_tmr+0x134>
        /* still pending, resend an ARP query */
        etharp_request(arp_table[i].netif, &arp_table[i].ipaddr);
 80152ac:	490f      	ldr	r1, [pc, #60]	; (80152ec <etharp_tmr+0x14c>)
 80152ae:	687a      	ldr	r2, [r7, #4]
 80152b0:	4613      	mov	r3, r2
 80152b2:	005b      	lsls	r3, r3, #1
 80152b4:	4413      	add	r3, r2
 80152b6:	00db      	lsls	r3, r3, #3
 80152b8:	440b      	add	r3, r1
 80152ba:	3308      	adds	r3, #8
 80152bc:	6818      	ldr	r0, [r3, #0]
 80152be:	687a      	ldr	r2, [r7, #4]
 80152c0:	4613      	mov	r3, r2
 80152c2:	005b      	lsls	r3, r3, #1
 80152c4:	4413      	add	r3, r2
 80152c6:	00db      	lsls	r3, r3, #3
 80152c8:	4a08      	ldr	r2, [pc, #32]	; (80152ec <etharp_tmr+0x14c>)
 80152ca:	4413      	add	r3, r2
 80152cc:	3304      	adds	r3, #4
 80152ce:	4619      	mov	r1, r3
 80152d0:	f000 fe72 	bl	8015fb8 <etharp_request>
  for (i = 0; i < ARP_TABLE_SIZE; ++i) {
 80152d4:	687b      	ldr	r3, [r7, #4]
 80152d6:	3301      	adds	r3, #1
 80152d8:	607b      	str	r3, [r7, #4]
 80152da:	687b      	ldr	r3, [r7, #4]
 80152dc:	2b09      	cmp	r3, #9
 80152de:	f77f af65 	ble.w	80151ac <etharp_tmr+0xc>
      }
    }
  }
}
 80152e2:	bf00      	nop
 80152e4:	bf00      	nop
 80152e6:	3708      	adds	r7, #8
 80152e8:	46bd      	mov	sp, r7
 80152ea:	bd80      	pop	{r7, pc}
 80152ec:	200089bc 	.word	0x200089bc

080152f0 <etharp_find_entry>:
 * @return The ARP entry index that matched or is created, ERR_MEM if no
 * entry is found or could be recycled.
 */
static s16_t
etharp_find_entry(const ip4_addr_t *ipaddr, u8_t flags, struct netif *netif)
{
 80152f0:	b580      	push	{r7, lr}
 80152f2:	b08a      	sub	sp, #40	; 0x28
 80152f4:	af00      	add	r7, sp, #0
 80152f6:	60f8      	str	r0, [r7, #12]
 80152f8:	460b      	mov	r3, r1
 80152fa:	607a      	str	r2, [r7, #4]
 80152fc:	72fb      	strb	r3, [r7, #11]
  s16_t old_pending = ARP_TABLE_SIZE, old_stable = ARP_TABLE_SIZE;
 80152fe:	230a      	movs	r3, #10
 8015300:	84fb      	strh	r3, [r7, #38]	; 0x26
 8015302:	230a      	movs	r3, #10
 8015304:	84bb      	strh	r3, [r7, #36]	; 0x24
  s16_t empty = ARP_TABLE_SIZE;
 8015306:	230a      	movs	r3, #10
 8015308:	847b      	strh	r3, [r7, #34]	; 0x22
  s16_t i = 0;
 801530a:	2300      	movs	r3, #0
 801530c:	843b      	strh	r3, [r7, #32]
  /* oldest entry with packets on queue */
  s16_t old_queue = ARP_TABLE_SIZE;
 801530e:	230a      	movs	r3, #10
 8015310:	83fb      	strh	r3, [r7, #30]
  /* its age */
  u16_t age_queue = 0, age_pending = 0, age_stable = 0;
 8015312:	2300      	movs	r3, #0
 8015314:	83bb      	strh	r3, [r7, #28]
 8015316:	2300      	movs	r3, #0
 8015318:	837b      	strh	r3, [r7, #26]
 801531a:	2300      	movs	r3, #0
 801531c:	833b      	strh	r3, [r7, #24]
   * 4) remember the oldest pending entry with queued packets (if any)
   * 5) search for a matching IP entry, either pending or stable
   *    until 5 matches, or all entries are searched for.
   */

  for (i = 0; i < ARP_TABLE_SIZE; ++i) {
 801531e:	2300      	movs	r3, #0
 8015320:	843b      	strh	r3, [r7, #32]
 8015322:	e0ae      	b.n	8015482 <etharp_find_entry+0x192>
    u8_t state = arp_table[i].state;
 8015324:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 8015328:	49a6      	ldr	r1, [pc, #664]	; (80155c4 <etharp_find_entry+0x2d4>)
 801532a:	4613      	mov	r3, r2
 801532c:	005b      	lsls	r3, r3, #1
 801532e:	4413      	add	r3, r2
 8015330:	00db      	lsls	r3, r3, #3
 8015332:	440b      	add	r3, r1
 8015334:	3314      	adds	r3, #20
 8015336:	781b      	ldrb	r3, [r3, #0]
 8015338:	75fb      	strb	r3, [r7, #23]
    /* no empty entry found yet and now we do find one? */
    if ((empty == ARP_TABLE_SIZE) && (state == ETHARP_STATE_EMPTY)) {
 801533a:	f9b7 3022 	ldrsh.w	r3, [r7, #34]	; 0x22
 801533e:	2b0a      	cmp	r3, #10
 8015340:	d105      	bne.n	801534e <etharp_find_entry+0x5e>
 8015342:	7dfb      	ldrb	r3, [r7, #23]
 8015344:	2b00      	cmp	r3, #0
 8015346:	d102      	bne.n	801534e <etharp_find_entry+0x5e>
      LWIP_DEBUGF(ETHARP_DEBUG, ("etharp_find_entry: found empty entry %d\n", (int)i));
      /* remember first empty entry */
      empty = i;
 8015348:	8c3b      	ldrh	r3, [r7, #32]
 801534a:	847b      	strh	r3, [r7, #34]	; 0x22
 801534c:	e095      	b.n	801547a <etharp_find_entry+0x18a>
    } else if (state != ETHARP_STATE_EMPTY) {
 801534e:	7dfb      	ldrb	r3, [r7, #23]
 8015350:	2b00      	cmp	r3, #0
 8015352:	f000 8092 	beq.w	801547a <etharp_find_entry+0x18a>
      LWIP_ASSERT("state == ETHARP_STATE_PENDING || state >= ETHARP_STATE_STABLE",
 8015356:	7dfb      	ldrb	r3, [r7, #23]
 8015358:	2b01      	cmp	r3, #1
 801535a:	d009      	beq.n	8015370 <etharp_find_entry+0x80>
 801535c:	7dfb      	ldrb	r3, [r7, #23]
 801535e:	2b01      	cmp	r3, #1
 8015360:	d806      	bhi.n	8015370 <etharp_find_entry+0x80>
 8015362:	4b99      	ldr	r3, [pc, #612]	; (80155c8 <etharp_find_entry+0x2d8>)
 8015364:	f240 1223 	movw	r2, #291	; 0x123
 8015368:	4998      	ldr	r1, [pc, #608]	; (80155cc <etharp_find_entry+0x2dc>)
 801536a:	4899      	ldr	r0, [pc, #612]	; (80155d0 <etharp_find_entry+0x2e0>)
 801536c:	f003 f88c 	bl	8018488 <iprintf>
                  state == ETHARP_STATE_PENDING || state >= ETHARP_STATE_STABLE);
      /* if given, does IP address match IP address in ARP entry? */
      if (ipaddr && ip4_addr_cmp(ipaddr, &arp_table[i].ipaddr)
 8015370:	68fb      	ldr	r3, [r7, #12]
 8015372:	2b00      	cmp	r3, #0
 8015374:	d020      	beq.n	80153b8 <etharp_find_entry+0xc8>
 8015376:	68fb      	ldr	r3, [r7, #12]
 8015378:	6819      	ldr	r1, [r3, #0]
 801537a:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 801537e:	4891      	ldr	r0, [pc, #580]	; (80155c4 <etharp_find_entry+0x2d4>)
 8015380:	4613      	mov	r3, r2
 8015382:	005b      	lsls	r3, r3, #1
 8015384:	4413      	add	r3, r2
 8015386:	00db      	lsls	r3, r3, #3
 8015388:	4403      	add	r3, r0
 801538a:	3304      	adds	r3, #4
 801538c:	681b      	ldr	r3, [r3, #0]
 801538e:	4299      	cmp	r1, r3
 8015390:	d112      	bne.n	80153b8 <etharp_find_entry+0xc8>
#if ETHARP_TABLE_MATCH_NETIF
          && ((netif == NULL) || (netif == arp_table[i].netif))
 8015392:	687b      	ldr	r3, [r7, #4]
 8015394:	2b00      	cmp	r3, #0
 8015396:	d00c      	beq.n	80153b2 <etharp_find_entry+0xc2>
 8015398:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 801539c:	4989      	ldr	r1, [pc, #548]	; (80155c4 <etharp_find_entry+0x2d4>)
 801539e:	4613      	mov	r3, r2
 80153a0:	005b      	lsls	r3, r3, #1
 80153a2:	4413      	add	r3, r2
 80153a4:	00db      	lsls	r3, r3, #3
 80153a6:	440b      	add	r3, r1
 80153a8:	3308      	adds	r3, #8
 80153aa:	681b      	ldr	r3, [r3, #0]
 80153ac:	687a      	ldr	r2, [r7, #4]
 80153ae:	429a      	cmp	r2, r3
 80153b0:	d102      	bne.n	80153b8 <etharp_find_entry+0xc8>
#endif /* ETHARP_TABLE_MATCH_NETIF */
         ) {
        LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_find_entry: found matching entry %d\n", (int)i));
        /* found exact IP address match, simply bail out */
        return i;
 80153b2:	f9b7 3020 	ldrsh.w	r3, [r7, #32]
 80153b6:	e100      	b.n	80155ba <etharp_find_entry+0x2ca>
      }
      /* pending entry? */
      if (state == ETHARP_STATE_PENDING) {
 80153b8:	7dfb      	ldrb	r3, [r7, #23]
 80153ba:	2b01      	cmp	r3, #1
 80153bc:	d140      	bne.n	8015440 <etharp_find_entry+0x150>
        /* pending with queued packets? */
        if (arp_table[i].q != NULL) {
 80153be:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 80153c2:	4980      	ldr	r1, [pc, #512]	; (80155c4 <etharp_find_entry+0x2d4>)
 80153c4:	4613      	mov	r3, r2
 80153c6:	005b      	lsls	r3, r3, #1
 80153c8:	4413      	add	r3, r2
 80153ca:	00db      	lsls	r3, r3, #3
 80153cc:	440b      	add	r3, r1
 80153ce:	681b      	ldr	r3, [r3, #0]
 80153d0:	2b00      	cmp	r3, #0
 80153d2:	d01a      	beq.n	801540a <etharp_find_entry+0x11a>
          if (arp_table[i].ctime >= age_queue) {
 80153d4:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 80153d8:	497a      	ldr	r1, [pc, #488]	; (80155c4 <etharp_find_entry+0x2d4>)
 80153da:	4613      	mov	r3, r2
 80153dc:	005b      	lsls	r3, r3, #1
 80153de:	4413      	add	r3, r2
 80153e0:	00db      	lsls	r3, r3, #3
 80153e2:	440b      	add	r3, r1
 80153e4:	3312      	adds	r3, #18
 80153e6:	881b      	ldrh	r3, [r3, #0]
 80153e8:	8bba      	ldrh	r2, [r7, #28]
 80153ea:	429a      	cmp	r2, r3
 80153ec:	d845      	bhi.n	801547a <etharp_find_entry+0x18a>
            old_queue = i;
 80153ee:	8c3b      	ldrh	r3, [r7, #32]
 80153f0:	83fb      	strh	r3, [r7, #30]
            age_queue = arp_table[i].ctime;
 80153f2:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 80153f6:	4973      	ldr	r1, [pc, #460]	; (80155c4 <etharp_find_entry+0x2d4>)
 80153f8:	4613      	mov	r3, r2
 80153fa:	005b      	lsls	r3, r3, #1
 80153fc:	4413      	add	r3, r2
 80153fe:	00db      	lsls	r3, r3, #3
 8015400:	440b      	add	r3, r1
 8015402:	3312      	adds	r3, #18
 8015404:	881b      	ldrh	r3, [r3, #0]
 8015406:	83bb      	strh	r3, [r7, #28]
 8015408:	e037      	b.n	801547a <etharp_find_entry+0x18a>
          }
        } else
          /* pending without queued packets? */
        {
          if (arp_table[i].ctime >= age_pending) {
 801540a:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 801540e:	496d      	ldr	r1, [pc, #436]	; (80155c4 <etharp_find_entry+0x2d4>)
 8015410:	4613      	mov	r3, r2
 8015412:	005b      	lsls	r3, r3, #1
 8015414:	4413      	add	r3, r2
 8015416:	00db      	lsls	r3, r3, #3
 8015418:	440b      	add	r3, r1
 801541a:	3312      	adds	r3, #18
 801541c:	881b      	ldrh	r3, [r3, #0]
 801541e:	8b7a      	ldrh	r2, [r7, #26]
 8015420:	429a      	cmp	r2, r3
 8015422:	d82a      	bhi.n	801547a <etharp_find_entry+0x18a>
            old_pending = i;
 8015424:	8c3b      	ldrh	r3, [r7, #32]
 8015426:	84fb      	strh	r3, [r7, #38]	; 0x26
            age_pending = arp_table[i].ctime;
 8015428:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 801542c:	4965      	ldr	r1, [pc, #404]	; (80155c4 <etharp_find_entry+0x2d4>)
 801542e:	4613      	mov	r3, r2
 8015430:	005b      	lsls	r3, r3, #1
 8015432:	4413      	add	r3, r2
 8015434:	00db      	lsls	r3, r3, #3
 8015436:	440b      	add	r3, r1
 8015438:	3312      	adds	r3, #18
 801543a:	881b      	ldrh	r3, [r3, #0]
 801543c:	837b      	strh	r3, [r7, #26]
 801543e:	e01c      	b.n	801547a <etharp_find_entry+0x18a>
          }
        }
        /* stable entry? */
      } else if (state >= ETHARP_STATE_STABLE) {
 8015440:	7dfb      	ldrb	r3, [r7, #23]
 8015442:	2b01      	cmp	r3, #1
 8015444:	d919      	bls.n	801547a <etharp_find_entry+0x18a>
        /* don't record old_stable for static entries since they never expire */
        if (state < ETHARP_STATE_STATIC)
#endif /* ETHARP_SUPPORT_STATIC_ENTRIES */
        {
          /* remember entry with oldest stable entry in oldest, its age in maxtime */
          if (arp_table[i].ctime >= age_stable) {
 8015446:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 801544a:	495e      	ldr	r1, [pc, #376]	; (80155c4 <etharp_find_entry+0x2d4>)
 801544c:	4613      	mov	r3, r2
 801544e:	005b      	lsls	r3, r3, #1
 8015450:	4413      	add	r3, r2
 8015452:	00db      	lsls	r3, r3, #3
 8015454:	440b      	add	r3, r1
 8015456:	3312      	adds	r3, #18
 8015458:	881b      	ldrh	r3, [r3, #0]
 801545a:	8b3a      	ldrh	r2, [r7, #24]
 801545c:	429a      	cmp	r2, r3
 801545e:	d80c      	bhi.n	801547a <etharp_find_entry+0x18a>
            old_stable = i;
 8015460:	8c3b      	ldrh	r3, [r7, #32]
 8015462:	84bb      	strh	r3, [r7, #36]	; 0x24
            age_stable = arp_table[i].ctime;
 8015464:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 8015468:	4956      	ldr	r1, [pc, #344]	; (80155c4 <etharp_find_entry+0x2d4>)
 801546a:	4613      	mov	r3, r2
 801546c:	005b      	lsls	r3, r3, #1
 801546e:	4413      	add	r3, r2
 8015470:	00db      	lsls	r3, r3, #3
 8015472:	440b      	add	r3, r1
 8015474:	3312      	adds	r3, #18
 8015476:	881b      	ldrh	r3, [r3, #0]
 8015478:	833b      	strh	r3, [r7, #24]
  for (i = 0; i < ARP_TABLE_SIZE; ++i) {
 801547a:	8c3b      	ldrh	r3, [r7, #32]
 801547c:	3301      	adds	r3, #1
 801547e:	b29b      	uxth	r3, r3
 8015480:	843b      	strh	r3, [r7, #32]
 8015482:	f9b7 3020 	ldrsh.w	r3, [r7, #32]
 8015486:	2b09      	cmp	r3, #9
 8015488:	f77f af4c 	ble.w	8015324 <etharp_find_entry+0x34>
    }
  }
  /* { we have no match } => try to create a new entry */

  /* don't create new entry, only search? */
  if (((flags & ETHARP_FLAG_FIND_ONLY) != 0) ||
 801548c:	7afb      	ldrb	r3, [r7, #11]
 801548e:	f003 0302 	and.w	r3, r3, #2
 8015492:	2b00      	cmp	r3, #0
 8015494:	d108      	bne.n	80154a8 <etharp_find_entry+0x1b8>
 8015496:	f9b7 3022 	ldrsh.w	r3, [r7, #34]	; 0x22
 801549a:	2b0a      	cmp	r3, #10
 801549c:	d107      	bne.n	80154ae <etharp_find_entry+0x1be>
      /* or no empty entry found and not allowed to recycle? */
      ((empty == ARP_TABLE_SIZE) && ((flags & ETHARP_FLAG_TRY_HARD) == 0))) {
 801549e:	7afb      	ldrb	r3, [r7, #11]
 80154a0:	f003 0301 	and.w	r3, r3, #1
 80154a4:	2b00      	cmp	r3, #0
 80154a6:	d102      	bne.n	80154ae <etharp_find_entry+0x1be>
    LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_find_entry: no empty entry found and not allowed to recycle\n"));
    return (s16_t)ERR_MEM;
 80154a8:	f04f 33ff 	mov.w	r3, #4294967295
 80154ac:	e085      	b.n	80155ba <etharp_find_entry+0x2ca>
   *
   * { ETHARP_FLAG_TRY_HARD is set at this point }
   */

  /* 1) empty entry available? */
  if (empty < ARP_TABLE_SIZE) {
 80154ae:	f9b7 3022 	ldrsh.w	r3, [r7, #34]	; 0x22
 80154b2:	2b09      	cmp	r3, #9
 80154b4:	dc02      	bgt.n	80154bc <etharp_find_entry+0x1cc>
    i = empty;
 80154b6:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 80154b8:	843b      	strh	r3, [r7, #32]
 80154ba:	e039      	b.n	8015530 <etharp_find_entry+0x240>
    LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_find_entry: selecting empty entry %d\n", (int)i));
  } else {
    /* 2) found recyclable stable entry? */
    if (old_stable < ARP_TABLE_SIZE) {
 80154bc:	f9b7 3024 	ldrsh.w	r3, [r7, #36]	; 0x24
 80154c0:	2b09      	cmp	r3, #9
 80154c2:	dc14      	bgt.n	80154ee <etharp_find_entry+0x1fe>
      /* recycle oldest stable*/
      i = old_stable;
 80154c4:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 80154c6:	843b      	strh	r3, [r7, #32]
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_find_entry: selecting oldest stable entry %d\n", (int)i));
      /* no queued packets should exist on stable entries */
      LWIP_ASSERT("arp_table[i].q == NULL", arp_table[i].q == NULL);
 80154c8:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 80154cc:	493d      	ldr	r1, [pc, #244]	; (80155c4 <etharp_find_entry+0x2d4>)
 80154ce:	4613      	mov	r3, r2
 80154d0:	005b      	lsls	r3, r3, #1
 80154d2:	4413      	add	r3, r2
 80154d4:	00db      	lsls	r3, r3, #3
 80154d6:	440b      	add	r3, r1
 80154d8:	681b      	ldr	r3, [r3, #0]
 80154da:	2b00      	cmp	r3, #0
 80154dc:	d018      	beq.n	8015510 <etharp_find_entry+0x220>
 80154de:	4b3a      	ldr	r3, [pc, #232]	; (80155c8 <etharp_find_entry+0x2d8>)
 80154e0:	f240 126d 	movw	r2, #365	; 0x16d
 80154e4:	493b      	ldr	r1, [pc, #236]	; (80155d4 <etharp_find_entry+0x2e4>)
 80154e6:	483a      	ldr	r0, [pc, #232]	; (80155d0 <etharp_find_entry+0x2e0>)
 80154e8:	f002 ffce 	bl	8018488 <iprintf>
 80154ec:	e010      	b.n	8015510 <etharp_find_entry+0x220>
      /* 3) found recyclable pending entry without queued packets? */
    } else if (old_pending < ARP_TABLE_SIZE) {
 80154ee:	f9b7 3026 	ldrsh.w	r3, [r7, #38]	; 0x26
 80154f2:	2b09      	cmp	r3, #9
 80154f4:	dc02      	bgt.n	80154fc <etharp_find_entry+0x20c>
      /* recycle oldest pending */
      i = old_pending;
 80154f6:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 80154f8:	843b      	strh	r3, [r7, #32]
 80154fa:	e009      	b.n	8015510 <etharp_find_entry+0x220>
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_find_entry: selecting oldest pending entry %d (without queue)\n", (int)i));
      /* 4) found recyclable pending entry with queued packets? */
    } else if (old_queue < ARP_TABLE_SIZE) {
 80154fc:	f9b7 301e 	ldrsh.w	r3, [r7, #30]
 8015500:	2b09      	cmp	r3, #9
 8015502:	dc02      	bgt.n	801550a <etharp_find_entry+0x21a>
      /* recycle oldest pending (queued packets are free in etharp_free_entry) */
      i = old_queue;
 8015504:	8bfb      	ldrh	r3, [r7, #30]
 8015506:	843b      	strh	r3, [r7, #32]
 8015508:	e002      	b.n	8015510 <etharp_find_entry+0x220>
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_find_entry: selecting oldest pending entry %d, freeing packet queue %p\n", (int)i, (void *)(arp_table[i].q)));
      /* no empty or recyclable entries found */
    } else {
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_find_entry: no empty or recyclable entries found\n"));
      return (s16_t)ERR_MEM;
 801550a:	f04f 33ff 	mov.w	r3, #4294967295
 801550e:	e054      	b.n	80155ba <etharp_find_entry+0x2ca>
    }

    /* { empty or recyclable entry found } */
    LWIP_ASSERT("i < ARP_TABLE_SIZE", i < ARP_TABLE_SIZE);
 8015510:	f9b7 3020 	ldrsh.w	r3, [r7, #32]
 8015514:	2b09      	cmp	r3, #9
 8015516:	dd06      	ble.n	8015526 <etharp_find_entry+0x236>
 8015518:	4b2b      	ldr	r3, [pc, #172]	; (80155c8 <etharp_find_entry+0x2d8>)
 801551a:	f240 127f 	movw	r2, #383	; 0x17f
 801551e:	492e      	ldr	r1, [pc, #184]	; (80155d8 <etharp_find_entry+0x2e8>)
 8015520:	482b      	ldr	r0, [pc, #172]	; (80155d0 <etharp_find_entry+0x2e0>)
 8015522:	f002 ffb1 	bl	8018488 <iprintf>
    etharp_free_entry(i);
 8015526:	f9b7 3020 	ldrsh.w	r3, [r7, #32]
 801552a:	4618      	mov	r0, r3
 801552c:	f7ff fe06 	bl	801513c <etharp_free_entry>
  }

  LWIP_ASSERT("i < ARP_TABLE_SIZE", i < ARP_TABLE_SIZE);
 8015530:	f9b7 3020 	ldrsh.w	r3, [r7, #32]
 8015534:	2b09      	cmp	r3, #9
 8015536:	dd06      	ble.n	8015546 <etharp_find_entry+0x256>
 8015538:	4b23      	ldr	r3, [pc, #140]	; (80155c8 <etharp_find_entry+0x2d8>)
 801553a:	f240 1283 	movw	r2, #387	; 0x183
 801553e:	4926      	ldr	r1, [pc, #152]	; (80155d8 <etharp_find_entry+0x2e8>)
 8015540:	4823      	ldr	r0, [pc, #140]	; (80155d0 <etharp_find_entry+0x2e0>)
 8015542:	f002 ffa1 	bl	8018488 <iprintf>
  LWIP_ASSERT("arp_table[i].state == ETHARP_STATE_EMPTY",
 8015546:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 801554a:	491e      	ldr	r1, [pc, #120]	; (80155c4 <etharp_find_entry+0x2d4>)
 801554c:	4613      	mov	r3, r2
 801554e:	005b      	lsls	r3, r3, #1
 8015550:	4413      	add	r3, r2
 8015552:	00db      	lsls	r3, r3, #3
 8015554:	440b      	add	r3, r1
 8015556:	3314      	adds	r3, #20
 8015558:	781b      	ldrb	r3, [r3, #0]
 801555a:	2b00      	cmp	r3, #0
 801555c:	d006      	beq.n	801556c <etharp_find_entry+0x27c>
 801555e:	4b1a      	ldr	r3, [pc, #104]	; (80155c8 <etharp_find_entry+0x2d8>)
 8015560:	f44f 72c2 	mov.w	r2, #388	; 0x184
 8015564:	491d      	ldr	r1, [pc, #116]	; (80155dc <etharp_find_entry+0x2ec>)
 8015566:	481a      	ldr	r0, [pc, #104]	; (80155d0 <etharp_find_entry+0x2e0>)
 8015568:	f002 ff8e 	bl	8018488 <iprintf>
              arp_table[i].state == ETHARP_STATE_EMPTY);

  /* IP address given? */
  if (ipaddr != NULL) {
 801556c:	68fb      	ldr	r3, [r7, #12]
 801556e:	2b00      	cmp	r3, #0
 8015570:	d00b      	beq.n	801558a <etharp_find_entry+0x29a>
    /* set IP address */
    ip4_addr_copy(arp_table[i].ipaddr, *ipaddr);
 8015572:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 8015576:	68fb      	ldr	r3, [r7, #12]
 8015578:	6819      	ldr	r1, [r3, #0]
 801557a:	4812      	ldr	r0, [pc, #72]	; (80155c4 <etharp_find_entry+0x2d4>)
 801557c:	4613      	mov	r3, r2
 801557e:	005b      	lsls	r3, r3, #1
 8015580:	4413      	add	r3, r2
 8015582:	00db      	lsls	r3, r3, #3
 8015584:	4403      	add	r3, r0
 8015586:	3304      	adds	r3, #4
 8015588:	6019      	str	r1, [r3, #0]
  }
  arp_table[i].ctime = 0;
 801558a:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 801558e:	490d      	ldr	r1, [pc, #52]	; (80155c4 <etharp_find_entry+0x2d4>)
 8015590:	4613      	mov	r3, r2
 8015592:	005b      	lsls	r3, r3, #1
 8015594:	4413      	add	r3, r2
 8015596:	00db      	lsls	r3, r3, #3
 8015598:	440b      	add	r3, r1
 801559a:	3312      	adds	r3, #18
 801559c:	2200      	movs	r2, #0
 801559e:	801a      	strh	r2, [r3, #0]
#if ETHARP_TABLE_MATCH_NETIF
  arp_table[i].netif = netif;
 80155a0:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 80155a4:	4907      	ldr	r1, [pc, #28]	; (80155c4 <etharp_find_entry+0x2d4>)
 80155a6:	4613      	mov	r3, r2
 80155a8:	005b      	lsls	r3, r3, #1
 80155aa:	4413      	add	r3, r2
 80155ac:	00db      	lsls	r3, r3, #3
 80155ae:	440b      	add	r3, r1
 80155b0:	3308      	adds	r3, #8
 80155b2:	687a      	ldr	r2, [r7, #4]
 80155b4:	601a      	str	r2, [r3, #0]
#endif /* ETHARP_TABLE_MATCH_NETIF */
  return (s16_t)i;
 80155b6:	f9b7 3020 	ldrsh.w	r3, [r7, #32]
}
 80155ba:	4618      	mov	r0, r3
 80155bc:	3728      	adds	r7, #40	; 0x28
 80155be:	46bd      	mov	sp, r7
 80155c0:	bd80      	pop	{r7, pc}
 80155c2:	bf00      	nop
 80155c4:	200089bc 	.word	0x200089bc
 80155c8:	0801baa4 	.word	0x0801baa4
 80155cc:	0801badc 	.word	0x0801badc
 80155d0:	0801bb1c 	.word	0x0801bb1c
 80155d4:	0801bb44 	.word	0x0801bb44
 80155d8:	0801bb5c 	.word	0x0801bb5c
 80155dc:	0801bb70 	.word	0x0801bb70

080155e0 <etharp_update_arp_entry>:
 *
 * @see pbuf_free()
 */
static err_t
etharp_update_arp_entry(struct netif *netif, const ip4_addr_t *ipaddr, struct eth_addr *ethaddr, u8_t flags)
{
 80155e0:	b580      	push	{r7, lr}
 80155e2:	b088      	sub	sp, #32
 80155e4:	af02      	add	r7, sp, #8
 80155e6:	60f8      	str	r0, [r7, #12]
 80155e8:	60b9      	str	r1, [r7, #8]
 80155ea:	607a      	str	r2, [r7, #4]
 80155ec:	70fb      	strb	r3, [r7, #3]
  s16_t i;
  LWIP_ASSERT("netif->hwaddr_len == ETH_HWADDR_LEN", netif->hwaddr_len == ETH_HWADDR_LEN);
 80155ee:	68fb      	ldr	r3, [r7, #12]
 80155f0:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 80155f4:	2b06      	cmp	r3, #6
 80155f6:	d006      	beq.n	8015606 <etharp_update_arp_entry+0x26>
 80155f8:	4b48      	ldr	r3, [pc, #288]	; (801571c <etharp_update_arp_entry+0x13c>)
 80155fa:	f240 12a9 	movw	r2, #425	; 0x1a9
 80155fe:	4948      	ldr	r1, [pc, #288]	; (8015720 <etharp_update_arp_entry+0x140>)
 8015600:	4848      	ldr	r0, [pc, #288]	; (8015724 <etharp_update_arp_entry+0x144>)
 8015602:	f002 ff41 	bl	8018488 <iprintf>
  LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_update_arp_entry: %"U16_F".%"U16_F".%"U16_F".%"U16_F" - %02"X16_F":%02"X16_F":%02"X16_F":%02"X16_F":%02"X16_F":%02"X16_F"\n",
              ip4_addr1_16(ipaddr), ip4_addr2_16(ipaddr), ip4_addr3_16(ipaddr), ip4_addr4_16(ipaddr),
              (u16_t)ethaddr->addr[0], (u16_t)ethaddr->addr[1], (u16_t)ethaddr->addr[2],
              (u16_t)ethaddr->addr[3], (u16_t)ethaddr->addr[4], (u16_t)ethaddr->addr[5]));
  /* non-unicast address? */
  if (ip4_addr_isany(ipaddr) ||
 8015606:	68bb      	ldr	r3, [r7, #8]
 8015608:	2b00      	cmp	r3, #0
 801560a:	d012      	beq.n	8015632 <etharp_update_arp_entry+0x52>
 801560c:	68bb      	ldr	r3, [r7, #8]
 801560e:	681b      	ldr	r3, [r3, #0]
 8015610:	2b00      	cmp	r3, #0
 8015612:	d00e      	beq.n	8015632 <etharp_update_arp_entry+0x52>
      ip4_addr_isbroadcast(ipaddr, netif) ||
 8015614:	68bb      	ldr	r3, [r7, #8]
 8015616:	681b      	ldr	r3, [r3, #0]
 8015618:	68f9      	ldr	r1, [r7, #12]
 801561a:	4618      	mov	r0, r3
 801561c:	f001 f920 	bl	8016860 <ip4_addr_isbroadcast_u32>
 8015620:	4603      	mov	r3, r0
  if (ip4_addr_isany(ipaddr) ||
 8015622:	2b00      	cmp	r3, #0
 8015624:	d105      	bne.n	8015632 <etharp_update_arp_entry+0x52>
      ip4_addr_ismulticast(ipaddr)) {
 8015626:	68bb      	ldr	r3, [r7, #8]
 8015628:	681b      	ldr	r3, [r3, #0]
 801562a:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
      ip4_addr_isbroadcast(ipaddr, netif) ||
 801562e:	2be0      	cmp	r3, #224	; 0xe0
 8015630:	d102      	bne.n	8015638 <etharp_update_arp_entry+0x58>
    LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_update_arp_entry: will not add non-unicast IP address to ARP cache\n"));
    return ERR_ARG;
 8015632:	f06f 030f 	mvn.w	r3, #15
 8015636:	e06c      	b.n	8015712 <etharp_update_arp_entry+0x132>
  }
  /* find or create ARP entry */
  i = etharp_find_entry(ipaddr, flags, netif);
 8015638:	78fb      	ldrb	r3, [r7, #3]
 801563a:	68fa      	ldr	r2, [r7, #12]
 801563c:	4619      	mov	r1, r3
 801563e:	68b8      	ldr	r0, [r7, #8]
 8015640:	f7ff fe56 	bl	80152f0 <etharp_find_entry>
 8015644:	4603      	mov	r3, r0
 8015646:	82fb      	strh	r3, [r7, #22]
  /* bail out if no entry could be found */
  if (i < 0) {
 8015648:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
 801564c:	2b00      	cmp	r3, #0
 801564e:	da02      	bge.n	8015656 <etharp_update_arp_entry+0x76>
    return (err_t)i;
 8015650:	8afb      	ldrh	r3, [r7, #22]
 8015652:	b25b      	sxtb	r3, r3
 8015654:	e05d      	b.n	8015712 <etharp_update_arp_entry+0x132>
    return ERR_VAL;
  } else
#endif /* ETHARP_SUPPORT_STATIC_ENTRIES */
  {
    /* mark it stable */
    arp_table[i].state = ETHARP_STATE_STABLE;
 8015656:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 801565a:	4933      	ldr	r1, [pc, #204]	; (8015728 <etharp_update_arp_entry+0x148>)
 801565c:	4613      	mov	r3, r2
 801565e:	005b      	lsls	r3, r3, #1
 8015660:	4413      	add	r3, r2
 8015662:	00db      	lsls	r3, r3, #3
 8015664:	440b      	add	r3, r1
 8015666:	3314      	adds	r3, #20
 8015668:	2202      	movs	r2, #2
 801566a:	701a      	strb	r2, [r3, #0]
  }

  /* record network interface */
  arp_table[i].netif = netif;
 801566c:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 8015670:	492d      	ldr	r1, [pc, #180]	; (8015728 <etharp_update_arp_entry+0x148>)
 8015672:	4613      	mov	r3, r2
 8015674:	005b      	lsls	r3, r3, #1
 8015676:	4413      	add	r3, r2
 8015678:	00db      	lsls	r3, r3, #3
 801567a:	440b      	add	r3, r1
 801567c:	3308      	adds	r3, #8
 801567e:	68fa      	ldr	r2, [r7, #12]
 8015680:	601a      	str	r2, [r3, #0]
  /* insert in SNMP ARP index tree */
  mib2_add_arp_entry(netif, &arp_table[i].ipaddr);

  LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_update_arp_entry: updating stable entry %"S16_F"\n", i));
  /* update address */
  SMEMCPY(&arp_table[i].ethaddr, ethaddr, ETH_HWADDR_LEN);
 8015682:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 8015686:	4613      	mov	r3, r2
 8015688:	005b      	lsls	r3, r3, #1
 801568a:	4413      	add	r3, r2
 801568c:	00db      	lsls	r3, r3, #3
 801568e:	3308      	adds	r3, #8
 8015690:	4a25      	ldr	r2, [pc, #148]	; (8015728 <etharp_update_arp_entry+0x148>)
 8015692:	4413      	add	r3, r2
 8015694:	3304      	adds	r3, #4
 8015696:	2206      	movs	r2, #6
 8015698:	6879      	ldr	r1, [r7, #4]
 801569a:	4618      	mov	r0, r3
 801569c:	f002 ffe7 	bl	801866e <memcpy>
  /* reset time stamp */
  arp_table[i].ctime = 0;
 80156a0:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 80156a4:	4920      	ldr	r1, [pc, #128]	; (8015728 <etharp_update_arp_entry+0x148>)
 80156a6:	4613      	mov	r3, r2
 80156a8:	005b      	lsls	r3, r3, #1
 80156aa:	4413      	add	r3, r2
 80156ac:	00db      	lsls	r3, r3, #3
 80156ae:	440b      	add	r3, r1
 80156b0:	3312      	adds	r3, #18
 80156b2:	2200      	movs	r2, #0
 80156b4:	801a      	strh	r2, [r3, #0]
    /* get the packet pointer */
    p = q->p;
    /* now queue entry can be freed */
    memp_free(MEMP_ARP_QUEUE, q);
#else /* ARP_QUEUEING */
  if (arp_table[i].q != NULL) {
 80156b6:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 80156ba:	491b      	ldr	r1, [pc, #108]	; (8015728 <etharp_update_arp_entry+0x148>)
 80156bc:	4613      	mov	r3, r2
 80156be:	005b      	lsls	r3, r3, #1
 80156c0:	4413      	add	r3, r2
 80156c2:	00db      	lsls	r3, r3, #3
 80156c4:	440b      	add	r3, r1
 80156c6:	681b      	ldr	r3, [r3, #0]
 80156c8:	2b00      	cmp	r3, #0
 80156ca:	d021      	beq.n	8015710 <etharp_update_arp_entry+0x130>
    struct pbuf *p = arp_table[i].q;
 80156cc:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 80156d0:	4915      	ldr	r1, [pc, #84]	; (8015728 <etharp_update_arp_entry+0x148>)
 80156d2:	4613      	mov	r3, r2
 80156d4:	005b      	lsls	r3, r3, #1
 80156d6:	4413      	add	r3, r2
 80156d8:	00db      	lsls	r3, r3, #3
 80156da:	440b      	add	r3, r1
 80156dc:	681b      	ldr	r3, [r3, #0]
 80156de:	613b      	str	r3, [r7, #16]
    arp_table[i].q = NULL;
 80156e0:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 80156e4:	4910      	ldr	r1, [pc, #64]	; (8015728 <etharp_update_arp_entry+0x148>)
 80156e6:	4613      	mov	r3, r2
 80156e8:	005b      	lsls	r3, r3, #1
 80156ea:	4413      	add	r3, r2
 80156ec:	00db      	lsls	r3, r3, #3
 80156ee:	440b      	add	r3, r1
 80156f0:	2200      	movs	r2, #0
 80156f2:	601a      	str	r2, [r3, #0]
#endif /* ARP_QUEUEING */
    /* send the queued IP packet */
    ethernet_output(netif, p, (struct eth_addr *)(netif->hwaddr), ethaddr, ETHTYPE_IP);
 80156f4:	68fb      	ldr	r3, [r7, #12]
 80156f6:	f103 022a 	add.w	r2, r3, #42	; 0x2a
 80156fa:	f44f 6300 	mov.w	r3, #2048	; 0x800
 80156fe:	9300      	str	r3, [sp, #0]
 8015700:	687b      	ldr	r3, [r7, #4]
 8015702:	6939      	ldr	r1, [r7, #16]
 8015704:	68f8      	ldr	r0, [r7, #12]
 8015706:	f001 ffb9 	bl	801767c <ethernet_output>
    /* free the queued IP packet */
    pbuf_free(p);
 801570a:	6938      	ldr	r0, [r7, #16]
 801570c:	f7f6 fc18 	bl	800bf40 <pbuf_free>
  }
  return ERR_OK;
 8015710:	2300      	movs	r3, #0
}
 8015712:	4618      	mov	r0, r3
 8015714:	3718      	adds	r7, #24
 8015716:	46bd      	mov	sp, r7
 8015718:	bd80      	pop	{r7, pc}
 801571a:	bf00      	nop
 801571c:	0801baa4 	.word	0x0801baa4
 8015720:	0801bb9c 	.word	0x0801bb9c
 8015724:	0801bb1c 	.word	0x0801bb1c
 8015728:	200089bc 	.word	0x200089bc

0801572c <etharp_cleanup_netif>:
 *
 * @param netif points to a network interface
 */
void
etharp_cleanup_netif(struct netif *netif)
{
 801572c:	b580      	push	{r7, lr}
 801572e:	b084      	sub	sp, #16
 8015730:	af00      	add	r7, sp, #0
 8015732:	6078      	str	r0, [r7, #4]
  int i;

  for (i = 0; i < ARP_TABLE_SIZE; ++i) {
 8015734:	2300      	movs	r3, #0
 8015736:	60fb      	str	r3, [r7, #12]
 8015738:	e01e      	b.n	8015778 <etharp_cleanup_netif+0x4c>
    u8_t state = arp_table[i].state;
 801573a:	4913      	ldr	r1, [pc, #76]	; (8015788 <etharp_cleanup_netif+0x5c>)
 801573c:	68fa      	ldr	r2, [r7, #12]
 801573e:	4613      	mov	r3, r2
 8015740:	005b      	lsls	r3, r3, #1
 8015742:	4413      	add	r3, r2
 8015744:	00db      	lsls	r3, r3, #3
 8015746:	440b      	add	r3, r1
 8015748:	3314      	adds	r3, #20
 801574a:	781b      	ldrb	r3, [r3, #0]
 801574c:	72fb      	strb	r3, [r7, #11]
    if ((state != ETHARP_STATE_EMPTY) && (arp_table[i].netif == netif)) {
 801574e:	7afb      	ldrb	r3, [r7, #11]
 8015750:	2b00      	cmp	r3, #0
 8015752:	d00e      	beq.n	8015772 <etharp_cleanup_netif+0x46>
 8015754:	490c      	ldr	r1, [pc, #48]	; (8015788 <etharp_cleanup_netif+0x5c>)
 8015756:	68fa      	ldr	r2, [r7, #12]
 8015758:	4613      	mov	r3, r2
 801575a:	005b      	lsls	r3, r3, #1
 801575c:	4413      	add	r3, r2
 801575e:	00db      	lsls	r3, r3, #3
 8015760:	440b      	add	r3, r1
 8015762:	3308      	adds	r3, #8
 8015764:	681b      	ldr	r3, [r3, #0]
 8015766:	687a      	ldr	r2, [r7, #4]
 8015768:	429a      	cmp	r2, r3
 801576a:	d102      	bne.n	8015772 <etharp_cleanup_netif+0x46>
      etharp_free_entry(i);
 801576c:	68f8      	ldr	r0, [r7, #12]
 801576e:	f7ff fce5 	bl	801513c <etharp_free_entry>
  for (i = 0; i < ARP_TABLE_SIZE; ++i) {
 8015772:	68fb      	ldr	r3, [r7, #12]
 8015774:	3301      	adds	r3, #1
 8015776:	60fb      	str	r3, [r7, #12]
 8015778:	68fb      	ldr	r3, [r7, #12]
 801577a:	2b09      	cmp	r3, #9
 801577c:	dddd      	ble.n	801573a <etharp_cleanup_netif+0xe>
    }
  }
}
 801577e:	bf00      	nop
 8015780:	bf00      	nop
 8015782:	3710      	adds	r7, #16
 8015784:	46bd      	mov	sp, r7
 8015786:	bd80      	pop	{r7, pc}
 8015788:	200089bc 	.word	0x200089bc

0801578c <etharp_input>:
 *
 * @see pbuf_free()
 */
void
etharp_input(struct pbuf *p, struct netif *netif)
{
 801578c:	b5b0      	push	{r4, r5, r7, lr}
 801578e:	b08a      	sub	sp, #40	; 0x28
 8015790:	af04      	add	r7, sp, #16
 8015792:	6078      	str	r0, [r7, #4]
 8015794:	6039      	str	r1, [r7, #0]
  ip4_addr_t sipaddr, dipaddr;
  u8_t for_us;

  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("netif != NULL", (netif != NULL), return;);
 8015796:	683b      	ldr	r3, [r7, #0]
 8015798:	2b00      	cmp	r3, #0
 801579a:	d107      	bne.n	80157ac <etharp_input+0x20>
 801579c:	4b3f      	ldr	r3, [pc, #252]	; (801589c <etharp_input+0x110>)
 801579e:	f240 228a 	movw	r2, #650	; 0x28a
 80157a2:	493f      	ldr	r1, [pc, #252]	; (80158a0 <etharp_input+0x114>)
 80157a4:	483f      	ldr	r0, [pc, #252]	; (80158a4 <etharp_input+0x118>)
 80157a6:	f002 fe6f 	bl	8018488 <iprintf>
 80157aa:	e074      	b.n	8015896 <etharp_input+0x10a>

  hdr = (struct etharp_hdr *)p->payload;
 80157ac:	687b      	ldr	r3, [r7, #4]
 80157ae:	685b      	ldr	r3, [r3, #4]
 80157b0:	613b      	str	r3, [r7, #16]

  /* RFC 826 "Packet Reception": */
  if ((hdr->hwtype != PP_HTONS(LWIP_IANA_HWTYPE_ETHERNET)) ||
 80157b2:	693b      	ldr	r3, [r7, #16]
 80157b4:	881b      	ldrh	r3, [r3, #0]
 80157b6:	b29b      	uxth	r3, r3
 80157b8:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80157bc:	d10c      	bne.n	80157d8 <etharp_input+0x4c>
      (hdr->hwlen != ETH_HWADDR_LEN) ||
 80157be:	693b      	ldr	r3, [r7, #16]
 80157c0:	791b      	ldrb	r3, [r3, #4]
  if ((hdr->hwtype != PP_HTONS(LWIP_IANA_HWTYPE_ETHERNET)) ||
 80157c2:	2b06      	cmp	r3, #6
 80157c4:	d108      	bne.n	80157d8 <etharp_input+0x4c>
      (hdr->protolen != sizeof(ip4_addr_t)) ||
 80157c6:	693b      	ldr	r3, [r7, #16]
 80157c8:	795b      	ldrb	r3, [r3, #5]
      (hdr->hwlen != ETH_HWADDR_LEN) ||
 80157ca:	2b04      	cmp	r3, #4
 80157cc:	d104      	bne.n	80157d8 <etharp_input+0x4c>
      (hdr->proto != PP_HTONS(ETHTYPE_IP)))  {
 80157ce:	693b      	ldr	r3, [r7, #16]
 80157d0:	885b      	ldrh	r3, [r3, #2]
 80157d2:	b29b      	uxth	r3, r3
      (hdr->protolen != sizeof(ip4_addr_t)) ||
 80157d4:	2b08      	cmp	r3, #8
 80157d6:	d003      	beq.n	80157e0 <etharp_input+0x54>
    LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_WARNING,
                ("etharp_input: packet dropped, wrong hw type, hwlen, proto, protolen or ethernet type (%"U16_F"/%"U16_F"/%"U16_F"/%"U16_F")\n",
                 hdr->hwtype, (u16_t)hdr->hwlen, hdr->proto, (u16_t)hdr->protolen));
    ETHARP_STATS_INC(etharp.proterr);
    ETHARP_STATS_INC(etharp.drop);
    pbuf_free(p);
 80157d8:	6878      	ldr	r0, [r7, #4]
 80157da:	f7f6 fbb1 	bl	800bf40 <pbuf_free>
    return;
 80157de:	e05a      	b.n	8015896 <etharp_input+0x10a>
  autoip_arp_reply(netif, hdr);
#endif /* LWIP_AUTOIP */

  /* Copy struct ip4_addr_wordaligned to aligned ip4_addr, to support compilers without
   * structure packing (not using structure copy which breaks strict-aliasing rules). */
  IPADDR_WORDALIGNED_COPY_TO_IP4_ADDR_T(&sipaddr, &hdr->sipaddr);
 80157e0:	693b      	ldr	r3, [r7, #16]
 80157e2:	330e      	adds	r3, #14
 80157e4:	681b      	ldr	r3, [r3, #0]
 80157e6:	60fb      	str	r3, [r7, #12]
  IPADDR_WORDALIGNED_COPY_TO_IP4_ADDR_T(&dipaddr, &hdr->dipaddr);
 80157e8:	693b      	ldr	r3, [r7, #16]
 80157ea:	3318      	adds	r3, #24
 80157ec:	681b      	ldr	r3, [r3, #0]
 80157ee:	60bb      	str	r3, [r7, #8]

  /* this interface is not configured? */
  if (ip4_addr_isany_val(*netif_ip4_addr(netif))) {
 80157f0:	683b      	ldr	r3, [r7, #0]
 80157f2:	3304      	adds	r3, #4
 80157f4:	681b      	ldr	r3, [r3, #0]
 80157f6:	2b00      	cmp	r3, #0
 80157f8:	d102      	bne.n	8015800 <etharp_input+0x74>
    for_us = 0;
 80157fa:	2300      	movs	r3, #0
 80157fc:	75fb      	strb	r3, [r7, #23]
 80157fe:	e009      	b.n	8015814 <etharp_input+0x88>
  } else {
    /* ARP packet directed to us? */
    for_us = (u8_t)ip4_addr_cmp(&dipaddr, netif_ip4_addr(netif));
 8015800:	68ba      	ldr	r2, [r7, #8]
 8015802:	683b      	ldr	r3, [r7, #0]
 8015804:	3304      	adds	r3, #4
 8015806:	681b      	ldr	r3, [r3, #0]
 8015808:	429a      	cmp	r2, r3
 801580a:	bf0c      	ite	eq
 801580c:	2301      	moveq	r3, #1
 801580e:	2300      	movne	r3, #0
 8015810:	b2db      	uxtb	r3, r3
 8015812:	75fb      	strb	r3, [r7, #23]
  /* ARP message directed to us?
      -> add IP address in ARP cache; assume requester wants to talk to us,
         can result in directly sending the queued packets for this host.
     ARP message not directed to us?
      ->  update the source IP address in the cache, if present */
  etharp_update_arp_entry(netif, &sipaddr, &(hdr->shwaddr),
 8015814:	693b      	ldr	r3, [r7, #16]
 8015816:	f103 0208 	add.w	r2, r3, #8
 801581a:	7dfb      	ldrb	r3, [r7, #23]
 801581c:	2b00      	cmp	r3, #0
 801581e:	d001      	beq.n	8015824 <etharp_input+0x98>
 8015820:	2301      	movs	r3, #1
 8015822:	e000      	b.n	8015826 <etharp_input+0x9a>
 8015824:	2302      	movs	r3, #2
 8015826:	f107 010c 	add.w	r1, r7, #12
 801582a:	6838      	ldr	r0, [r7, #0]
 801582c:	f7ff fed8 	bl	80155e0 <etharp_update_arp_entry>
                          for_us ? ETHARP_FLAG_TRY_HARD : ETHARP_FLAG_FIND_ONLY);

  /* now act on the message itself */
  switch (hdr->opcode) {
 8015830:	693b      	ldr	r3, [r7, #16]
 8015832:	88db      	ldrh	r3, [r3, #6]
 8015834:	b29b      	uxth	r3, r3
 8015836:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 801583a:	d003      	beq.n	8015844 <etharp_input+0xb8>
 801583c:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8015840:	d01e      	beq.n	8015880 <etharp_input+0xf4>
#endif /* (LWIP_DHCP && DHCP_DOES_ARP_CHECK) */
      break;
    default:
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_input: ARP unknown opcode type %"S16_F"\n", lwip_htons(hdr->opcode)));
      ETHARP_STATS_INC(etharp.err);
      break;
 8015842:	e025      	b.n	8015890 <etharp_input+0x104>
      if (for_us) {
 8015844:	7dfb      	ldrb	r3, [r7, #23]
 8015846:	2b00      	cmp	r3, #0
 8015848:	d021      	beq.n	801588e <etharp_input+0x102>
                   (struct eth_addr *)netif->hwaddr, &hdr->shwaddr,
 801584a:	683b      	ldr	r3, [r7, #0]
 801584c:	f103 002a 	add.w	r0, r3, #42	; 0x2a
 8015850:	693b      	ldr	r3, [r7, #16]
 8015852:	f103 0408 	add.w	r4, r3, #8
                   (struct eth_addr *)netif->hwaddr, netif_ip4_addr(netif),
 8015856:	683b      	ldr	r3, [r7, #0]
 8015858:	f103 052a 	add.w	r5, r3, #42	; 0x2a
 801585c:	683b      	ldr	r3, [r7, #0]
 801585e:	3304      	adds	r3, #4
                   &hdr->shwaddr, &sipaddr,
 8015860:	693a      	ldr	r2, [r7, #16]
 8015862:	3208      	adds	r2, #8
        etharp_raw(netif,
 8015864:	2102      	movs	r1, #2
 8015866:	9103      	str	r1, [sp, #12]
 8015868:	f107 010c 	add.w	r1, r7, #12
 801586c:	9102      	str	r1, [sp, #8]
 801586e:	9201      	str	r2, [sp, #4]
 8015870:	9300      	str	r3, [sp, #0]
 8015872:	462b      	mov	r3, r5
 8015874:	4622      	mov	r2, r4
 8015876:	4601      	mov	r1, r0
 8015878:	6838      	ldr	r0, [r7, #0]
 801587a:	f000 faef 	bl	8015e5c <etharp_raw>
      break;
 801587e:	e006      	b.n	801588e <etharp_input+0x102>
      dhcp_arp_reply(netif, &sipaddr);
 8015880:	f107 030c 	add.w	r3, r7, #12
 8015884:	4619      	mov	r1, r3
 8015886:	6838      	ldr	r0, [r7, #0]
 8015888:	f7fe f9cc 	bl	8013c24 <dhcp_arp_reply>
      break;
 801588c:	e000      	b.n	8015890 <etharp_input+0x104>
      break;
 801588e:	bf00      	nop
  }
  /* free ARP packet */
  pbuf_free(p);
 8015890:	6878      	ldr	r0, [r7, #4]
 8015892:	f7f6 fb55 	bl	800bf40 <pbuf_free>
}
 8015896:	3718      	adds	r7, #24
 8015898:	46bd      	mov	sp, r7
 801589a:	bdb0      	pop	{r4, r5, r7, pc}
 801589c:	0801baa4 	.word	0x0801baa4
 80158a0:	0801bbf4 	.word	0x0801bbf4
 80158a4:	0801bb1c 	.word	0x0801bb1c

080158a8 <etharp_output_to_arp_index>:
/** Just a small helper function that sends a pbuf to an ethernet address
 * in the arp_table specified by the index 'arp_idx'.
 */
static err_t
etharp_output_to_arp_index(struct netif *netif, struct pbuf *q, netif_addr_idx_t arp_idx)
{
 80158a8:	b580      	push	{r7, lr}
 80158aa:	b086      	sub	sp, #24
 80158ac:	af02      	add	r7, sp, #8
 80158ae:	60f8      	str	r0, [r7, #12]
 80158b0:	60b9      	str	r1, [r7, #8]
 80158b2:	4613      	mov	r3, r2
 80158b4:	71fb      	strb	r3, [r7, #7]
  LWIP_ASSERT("arp_table[arp_idx].state >= ETHARP_STATE_STABLE",
 80158b6:	79fa      	ldrb	r2, [r7, #7]
 80158b8:	4944      	ldr	r1, [pc, #272]	; (80159cc <etharp_output_to_arp_index+0x124>)
 80158ba:	4613      	mov	r3, r2
 80158bc:	005b      	lsls	r3, r3, #1
 80158be:	4413      	add	r3, r2
 80158c0:	00db      	lsls	r3, r3, #3
 80158c2:	440b      	add	r3, r1
 80158c4:	3314      	adds	r3, #20
 80158c6:	781b      	ldrb	r3, [r3, #0]
 80158c8:	2b01      	cmp	r3, #1
 80158ca:	d806      	bhi.n	80158da <etharp_output_to_arp_index+0x32>
 80158cc:	4b40      	ldr	r3, [pc, #256]	; (80159d0 <etharp_output_to_arp_index+0x128>)
 80158ce:	f240 22ee 	movw	r2, #750	; 0x2ee
 80158d2:	4940      	ldr	r1, [pc, #256]	; (80159d4 <etharp_output_to_arp_index+0x12c>)
 80158d4:	4840      	ldr	r0, [pc, #256]	; (80159d8 <etharp_output_to_arp_index+0x130>)
 80158d6:	f002 fdd7 	bl	8018488 <iprintf>
              arp_table[arp_idx].state >= ETHARP_STATE_STABLE);
  /* if arp table entry is about to expire: re-request it,
     but only if its state is ETHARP_STATE_STABLE to prevent flooding the
     network with ARP requests if this address is used frequently. */
  if (arp_table[arp_idx].state == ETHARP_STATE_STABLE) {
 80158da:	79fa      	ldrb	r2, [r7, #7]
 80158dc:	493b      	ldr	r1, [pc, #236]	; (80159cc <etharp_output_to_arp_index+0x124>)
 80158de:	4613      	mov	r3, r2
 80158e0:	005b      	lsls	r3, r3, #1
 80158e2:	4413      	add	r3, r2
 80158e4:	00db      	lsls	r3, r3, #3
 80158e6:	440b      	add	r3, r1
 80158e8:	3314      	adds	r3, #20
 80158ea:	781b      	ldrb	r3, [r3, #0]
 80158ec:	2b02      	cmp	r3, #2
 80158ee:	d153      	bne.n	8015998 <etharp_output_to_arp_index+0xf0>
    if (arp_table[arp_idx].ctime >= ARP_AGE_REREQUEST_USED_BROADCAST) {
 80158f0:	79fa      	ldrb	r2, [r7, #7]
 80158f2:	4936      	ldr	r1, [pc, #216]	; (80159cc <etharp_output_to_arp_index+0x124>)
 80158f4:	4613      	mov	r3, r2
 80158f6:	005b      	lsls	r3, r3, #1
 80158f8:	4413      	add	r3, r2
 80158fa:	00db      	lsls	r3, r3, #3
 80158fc:	440b      	add	r3, r1
 80158fe:	3312      	adds	r3, #18
 8015900:	881b      	ldrh	r3, [r3, #0]
 8015902:	f5b3 7f8e 	cmp.w	r3, #284	; 0x11c
 8015906:	d919      	bls.n	801593c <etharp_output_to_arp_index+0x94>
      /* issue a standard request using broadcast */
      if (etharp_request(netif, &arp_table[arp_idx].ipaddr) == ERR_OK) {
 8015908:	79fa      	ldrb	r2, [r7, #7]
 801590a:	4613      	mov	r3, r2
 801590c:	005b      	lsls	r3, r3, #1
 801590e:	4413      	add	r3, r2
 8015910:	00db      	lsls	r3, r3, #3
 8015912:	4a2e      	ldr	r2, [pc, #184]	; (80159cc <etharp_output_to_arp_index+0x124>)
 8015914:	4413      	add	r3, r2
 8015916:	3304      	adds	r3, #4
 8015918:	4619      	mov	r1, r3
 801591a:	68f8      	ldr	r0, [r7, #12]
 801591c:	f000 fb4c 	bl	8015fb8 <etharp_request>
 8015920:	4603      	mov	r3, r0
 8015922:	2b00      	cmp	r3, #0
 8015924:	d138      	bne.n	8015998 <etharp_output_to_arp_index+0xf0>
        arp_table[arp_idx].state = ETHARP_STATE_STABLE_REREQUESTING_1;
 8015926:	79fa      	ldrb	r2, [r7, #7]
 8015928:	4928      	ldr	r1, [pc, #160]	; (80159cc <etharp_output_to_arp_index+0x124>)
 801592a:	4613      	mov	r3, r2
 801592c:	005b      	lsls	r3, r3, #1
 801592e:	4413      	add	r3, r2
 8015930:	00db      	lsls	r3, r3, #3
 8015932:	440b      	add	r3, r1
 8015934:	3314      	adds	r3, #20
 8015936:	2203      	movs	r2, #3
 8015938:	701a      	strb	r2, [r3, #0]
 801593a:	e02d      	b.n	8015998 <etharp_output_to_arp_index+0xf0>
      }
    } else if (arp_table[arp_idx].ctime >= ARP_AGE_REREQUEST_USED_UNICAST) {
 801593c:	79fa      	ldrb	r2, [r7, #7]
 801593e:	4923      	ldr	r1, [pc, #140]	; (80159cc <etharp_output_to_arp_index+0x124>)
 8015940:	4613      	mov	r3, r2
 8015942:	005b      	lsls	r3, r3, #1
 8015944:	4413      	add	r3, r2
 8015946:	00db      	lsls	r3, r3, #3
 8015948:	440b      	add	r3, r1
 801594a:	3312      	adds	r3, #18
 801594c:	881b      	ldrh	r3, [r3, #0]
 801594e:	f5b3 7f87 	cmp.w	r3, #270	; 0x10e
 8015952:	d321      	bcc.n	8015998 <etharp_output_to_arp_index+0xf0>
      /* issue a unicast request (for 15 seconds) to prevent unnecessary broadcast */
      if (etharp_request_dst(netif, &arp_table[arp_idx].ipaddr, &arp_table[arp_idx].ethaddr) == ERR_OK) {
 8015954:	79fa      	ldrb	r2, [r7, #7]
 8015956:	4613      	mov	r3, r2
 8015958:	005b      	lsls	r3, r3, #1
 801595a:	4413      	add	r3, r2
 801595c:	00db      	lsls	r3, r3, #3
 801595e:	4a1b      	ldr	r2, [pc, #108]	; (80159cc <etharp_output_to_arp_index+0x124>)
 8015960:	4413      	add	r3, r2
 8015962:	1d19      	adds	r1, r3, #4
 8015964:	79fa      	ldrb	r2, [r7, #7]
 8015966:	4613      	mov	r3, r2
 8015968:	005b      	lsls	r3, r3, #1
 801596a:	4413      	add	r3, r2
 801596c:	00db      	lsls	r3, r3, #3
 801596e:	3308      	adds	r3, #8
 8015970:	4a16      	ldr	r2, [pc, #88]	; (80159cc <etharp_output_to_arp_index+0x124>)
 8015972:	4413      	add	r3, r2
 8015974:	3304      	adds	r3, #4
 8015976:	461a      	mov	r2, r3
 8015978:	68f8      	ldr	r0, [r7, #12]
 801597a:	f000 fafb 	bl	8015f74 <etharp_request_dst>
 801597e:	4603      	mov	r3, r0
 8015980:	2b00      	cmp	r3, #0
 8015982:	d109      	bne.n	8015998 <etharp_output_to_arp_index+0xf0>
        arp_table[arp_idx].state = ETHARP_STATE_STABLE_REREQUESTING_1;
 8015984:	79fa      	ldrb	r2, [r7, #7]
 8015986:	4911      	ldr	r1, [pc, #68]	; (80159cc <etharp_output_to_arp_index+0x124>)
 8015988:	4613      	mov	r3, r2
 801598a:	005b      	lsls	r3, r3, #1
 801598c:	4413      	add	r3, r2
 801598e:	00db      	lsls	r3, r3, #3
 8015990:	440b      	add	r3, r1
 8015992:	3314      	adds	r3, #20
 8015994:	2203      	movs	r2, #3
 8015996:	701a      	strb	r2, [r3, #0]
      }
    }
  }

  return ethernet_output(netif, q, (struct eth_addr *)(netif->hwaddr), &arp_table[arp_idx].ethaddr, ETHTYPE_IP);
 8015998:	68fb      	ldr	r3, [r7, #12]
 801599a:	f103 012a 	add.w	r1, r3, #42	; 0x2a
 801599e:	79fa      	ldrb	r2, [r7, #7]
 80159a0:	4613      	mov	r3, r2
 80159a2:	005b      	lsls	r3, r3, #1
 80159a4:	4413      	add	r3, r2
 80159a6:	00db      	lsls	r3, r3, #3
 80159a8:	3308      	adds	r3, #8
 80159aa:	4a08      	ldr	r2, [pc, #32]	; (80159cc <etharp_output_to_arp_index+0x124>)
 80159ac:	4413      	add	r3, r2
 80159ae:	3304      	adds	r3, #4
 80159b0:	f44f 6200 	mov.w	r2, #2048	; 0x800
 80159b4:	9200      	str	r2, [sp, #0]
 80159b6:	460a      	mov	r2, r1
 80159b8:	68b9      	ldr	r1, [r7, #8]
 80159ba:	68f8      	ldr	r0, [r7, #12]
 80159bc:	f001 fe5e 	bl	801767c <ethernet_output>
 80159c0:	4603      	mov	r3, r0
}
 80159c2:	4618      	mov	r0, r3
 80159c4:	3710      	adds	r7, #16
 80159c6:	46bd      	mov	sp, r7
 80159c8:	bd80      	pop	{r7, pc}
 80159ca:	bf00      	nop
 80159cc:	200089bc 	.word	0x200089bc
 80159d0:	0801baa4 	.word	0x0801baa4
 80159d4:	0801bc14 	.word	0x0801bc14
 80159d8:	0801bb1c 	.word	0x0801bb1c

080159dc <etharp_output>:
 * - ERR_RTE No route to destination (no gateway to external networks),
 * or the return type of either etharp_query() or ethernet_output().
 */
err_t
etharp_output(struct netif *netif, struct pbuf *q, const ip4_addr_t *ipaddr)
{
 80159dc:	b580      	push	{r7, lr}
 80159de:	b08a      	sub	sp, #40	; 0x28
 80159e0:	af02      	add	r7, sp, #8
 80159e2:	60f8      	str	r0, [r7, #12]
 80159e4:	60b9      	str	r1, [r7, #8]
 80159e6:	607a      	str	r2, [r7, #4]
  const struct eth_addr *dest;
  struct eth_addr mcastaddr;
  const ip4_addr_t *dst_addr = ipaddr;
 80159e8:	687b      	ldr	r3, [r7, #4]
 80159ea:	61bb      	str	r3, [r7, #24]

  LWIP_ASSERT_CORE_LOCKED();
  LWIP_ASSERT("netif != NULL", netif != NULL);
 80159ec:	68fb      	ldr	r3, [r7, #12]
 80159ee:	2b00      	cmp	r3, #0
 80159f0:	d106      	bne.n	8015a00 <etharp_output+0x24>
 80159f2:	4b73      	ldr	r3, [pc, #460]	; (8015bc0 <etharp_output+0x1e4>)
 80159f4:	f240 321e 	movw	r2, #798	; 0x31e
 80159f8:	4972      	ldr	r1, [pc, #456]	; (8015bc4 <etharp_output+0x1e8>)
 80159fa:	4873      	ldr	r0, [pc, #460]	; (8015bc8 <etharp_output+0x1ec>)
 80159fc:	f002 fd44 	bl	8018488 <iprintf>
  LWIP_ASSERT("q != NULL", q != NULL);
 8015a00:	68bb      	ldr	r3, [r7, #8]
 8015a02:	2b00      	cmp	r3, #0
 8015a04:	d106      	bne.n	8015a14 <etharp_output+0x38>
 8015a06:	4b6e      	ldr	r3, [pc, #440]	; (8015bc0 <etharp_output+0x1e4>)
 8015a08:	f240 321f 	movw	r2, #799	; 0x31f
 8015a0c:	496f      	ldr	r1, [pc, #444]	; (8015bcc <etharp_output+0x1f0>)
 8015a0e:	486e      	ldr	r0, [pc, #440]	; (8015bc8 <etharp_output+0x1ec>)
 8015a10:	f002 fd3a 	bl	8018488 <iprintf>
  LWIP_ASSERT("ipaddr != NULL", ipaddr != NULL);
 8015a14:	687b      	ldr	r3, [r7, #4]
 8015a16:	2b00      	cmp	r3, #0
 8015a18:	d106      	bne.n	8015a28 <etharp_output+0x4c>
 8015a1a:	4b69      	ldr	r3, [pc, #420]	; (8015bc0 <etharp_output+0x1e4>)
 8015a1c:	f44f 7248 	mov.w	r2, #800	; 0x320
 8015a20:	496b      	ldr	r1, [pc, #428]	; (8015bd0 <etharp_output+0x1f4>)
 8015a22:	4869      	ldr	r0, [pc, #420]	; (8015bc8 <etharp_output+0x1ec>)
 8015a24:	f002 fd30 	bl	8018488 <iprintf>

  /* Determine on destination hardware address. Broadcasts and multicasts
   * are special, other IP addresses are looked up in the ARP table. */

  /* broadcast destination IP address? */
  if (ip4_addr_isbroadcast(ipaddr, netif)) {
 8015a28:	687b      	ldr	r3, [r7, #4]
 8015a2a:	681b      	ldr	r3, [r3, #0]
 8015a2c:	68f9      	ldr	r1, [r7, #12]
 8015a2e:	4618      	mov	r0, r3
 8015a30:	f000 ff16 	bl	8016860 <ip4_addr_isbroadcast_u32>
 8015a34:	4603      	mov	r3, r0
 8015a36:	2b00      	cmp	r3, #0
 8015a38:	d002      	beq.n	8015a40 <etharp_output+0x64>
    /* broadcast on Ethernet also */
    dest = (const struct eth_addr *)&ethbroadcast;
 8015a3a:	4b66      	ldr	r3, [pc, #408]	; (8015bd4 <etharp_output+0x1f8>)
 8015a3c:	61fb      	str	r3, [r7, #28]
 8015a3e:	e0af      	b.n	8015ba0 <etharp_output+0x1c4>
    /* multicast destination IP address? */
  } else if (ip4_addr_ismulticast(ipaddr)) {
 8015a40:	687b      	ldr	r3, [r7, #4]
 8015a42:	681b      	ldr	r3, [r3, #0]
 8015a44:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8015a48:	2be0      	cmp	r3, #224	; 0xe0
 8015a4a:	d118      	bne.n	8015a7e <etharp_output+0xa2>
    /* Hash IP multicast address to MAC address.*/
    mcastaddr.addr[0] = LL_IP4_MULTICAST_ADDR_0;
 8015a4c:	2301      	movs	r3, #1
 8015a4e:	743b      	strb	r3, [r7, #16]
    mcastaddr.addr[1] = LL_IP4_MULTICAST_ADDR_1;
 8015a50:	2300      	movs	r3, #0
 8015a52:	747b      	strb	r3, [r7, #17]
    mcastaddr.addr[2] = LL_IP4_MULTICAST_ADDR_2;
 8015a54:	235e      	movs	r3, #94	; 0x5e
 8015a56:	74bb      	strb	r3, [r7, #18]
    mcastaddr.addr[3] = ip4_addr2(ipaddr) & 0x7f;
 8015a58:	687b      	ldr	r3, [r7, #4]
 8015a5a:	3301      	adds	r3, #1
 8015a5c:	781b      	ldrb	r3, [r3, #0]
 8015a5e:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8015a62:	b2db      	uxtb	r3, r3
 8015a64:	74fb      	strb	r3, [r7, #19]
    mcastaddr.addr[4] = ip4_addr3(ipaddr);
 8015a66:	687b      	ldr	r3, [r7, #4]
 8015a68:	3302      	adds	r3, #2
 8015a6a:	781b      	ldrb	r3, [r3, #0]
 8015a6c:	753b      	strb	r3, [r7, #20]
    mcastaddr.addr[5] = ip4_addr4(ipaddr);
 8015a6e:	687b      	ldr	r3, [r7, #4]
 8015a70:	3303      	adds	r3, #3
 8015a72:	781b      	ldrb	r3, [r3, #0]
 8015a74:	757b      	strb	r3, [r7, #21]
    /* destination Ethernet address is multicast */
    dest = &mcastaddr;
 8015a76:	f107 0310 	add.w	r3, r7, #16
 8015a7a:	61fb      	str	r3, [r7, #28]
 8015a7c:	e090      	b.n	8015ba0 <etharp_output+0x1c4>
    /* unicast destination IP address? */
  } else {
    netif_addr_idx_t i;
    /* outside local network? if so, this can neither be a global broadcast nor
       a subnet broadcast. */
    if (!ip4_addr_netcmp(ipaddr, netif_ip4_addr(netif), netif_ip4_netmask(netif)) &&
 8015a7e:	687b      	ldr	r3, [r7, #4]
 8015a80:	681a      	ldr	r2, [r3, #0]
 8015a82:	68fb      	ldr	r3, [r7, #12]
 8015a84:	3304      	adds	r3, #4
 8015a86:	681b      	ldr	r3, [r3, #0]
 8015a88:	405a      	eors	r2, r3
 8015a8a:	68fb      	ldr	r3, [r7, #12]
 8015a8c:	3308      	adds	r3, #8
 8015a8e:	681b      	ldr	r3, [r3, #0]
 8015a90:	4013      	ands	r3, r2
 8015a92:	2b00      	cmp	r3, #0
 8015a94:	d012      	beq.n	8015abc <etharp_output+0xe0>
        !ip4_addr_islinklocal(ipaddr)) {
 8015a96:	687b      	ldr	r3, [r7, #4]
 8015a98:	681b      	ldr	r3, [r3, #0]
 8015a9a:	b29b      	uxth	r3, r3
    if (!ip4_addr_netcmp(ipaddr, netif_ip4_addr(netif), netif_ip4_netmask(netif)) &&
 8015a9c:	f64f 62a9 	movw	r2, #65193	; 0xfea9
 8015aa0:	4293      	cmp	r3, r2
 8015aa2:	d00b      	beq.n	8015abc <etharp_output+0xe0>
        dst_addr = LWIP_HOOK_ETHARP_GET_GW(netif, ipaddr);
        if (dst_addr == NULL)
#endif /* LWIP_HOOK_ETHARP_GET_GW */
        {
          /* interface has default gateway? */
          if (!ip4_addr_isany_val(*netif_ip4_gw(netif))) {
 8015aa4:	68fb      	ldr	r3, [r7, #12]
 8015aa6:	330c      	adds	r3, #12
 8015aa8:	681b      	ldr	r3, [r3, #0]
 8015aaa:	2b00      	cmp	r3, #0
 8015aac:	d003      	beq.n	8015ab6 <etharp_output+0xda>
            /* send to hardware address of default gateway IP address */
            dst_addr = netif_ip4_gw(netif);
 8015aae:	68fb      	ldr	r3, [r7, #12]
 8015ab0:	330c      	adds	r3, #12
 8015ab2:	61bb      	str	r3, [r7, #24]
 8015ab4:	e002      	b.n	8015abc <etharp_output+0xe0>
            /* no default gateway available */
          } else {
            /* no route to destination error (default gateway missing) */
            return ERR_RTE;
 8015ab6:	f06f 0303 	mvn.w	r3, #3
 8015aba:	e07d      	b.n	8015bb8 <etharp_output+0x1dc>
    if (netif->hints != NULL) {
      /* per-pcb cached entry was given */
      netif_addr_idx_t etharp_cached_entry = netif->hints->addr_hint;
      if (etharp_cached_entry < ARP_TABLE_SIZE) {
#endif /* LWIP_NETIF_HWADDRHINT */
        if ((arp_table[etharp_cached_entry].state >= ETHARP_STATE_STABLE) &&
 8015abc:	4b46      	ldr	r3, [pc, #280]	; (8015bd8 <etharp_output+0x1fc>)
 8015abe:	781b      	ldrb	r3, [r3, #0]
 8015ac0:	4619      	mov	r1, r3
 8015ac2:	4a46      	ldr	r2, [pc, #280]	; (8015bdc <etharp_output+0x200>)
 8015ac4:	460b      	mov	r3, r1
 8015ac6:	005b      	lsls	r3, r3, #1
 8015ac8:	440b      	add	r3, r1
 8015aca:	00db      	lsls	r3, r3, #3
 8015acc:	4413      	add	r3, r2
 8015ace:	3314      	adds	r3, #20
 8015ad0:	781b      	ldrb	r3, [r3, #0]
 8015ad2:	2b01      	cmp	r3, #1
 8015ad4:	d925      	bls.n	8015b22 <etharp_output+0x146>
#if ETHARP_TABLE_MATCH_NETIF
            (arp_table[etharp_cached_entry].netif == netif) &&
 8015ad6:	4b40      	ldr	r3, [pc, #256]	; (8015bd8 <etharp_output+0x1fc>)
 8015ad8:	781b      	ldrb	r3, [r3, #0]
 8015ada:	4619      	mov	r1, r3
 8015adc:	4a3f      	ldr	r2, [pc, #252]	; (8015bdc <etharp_output+0x200>)
 8015ade:	460b      	mov	r3, r1
 8015ae0:	005b      	lsls	r3, r3, #1
 8015ae2:	440b      	add	r3, r1
 8015ae4:	00db      	lsls	r3, r3, #3
 8015ae6:	4413      	add	r3, r2
 8015ae8:	3308      	adds	r3, #8
 8015aea:	681b      	ldr	r3, [r3, #0]
        if ((arp_table[etharp_cached_entry].state >= ETHARP_STATE_STABLE) &&
 8015aec:	68fa      	ldr	r2, [r7, #12]
 8015aee:	429a      	cmp	r2, r3
 8015af0:	d117      	bne.n	8015b22 <etharp_output+0x146>
#endif
            (ip4_addr_cmp(dst_addr, &arp_table[etharp_cached_entry].ipaddr))) {
 8015af2:	69bb      	ldr	r3, [r7, #24]
 8015af4:	681a      	ldr	r2, [r3, #0]
 8015af6:	4b38      	ldr	r3, [pc, #224]	; (8015bd8 <etharp_output+0x1fc>)
 8015af8:	781b      	ldrb	r3, [r3, #0]
 8015afa:	4618      	mov	r0, r3
 8015afc:	4937      	ldr	r1, [pc, #220]	; (8015bdc <etharp_output+0x200>)
 8015afe:	4603      	mov	r3, r0
 8015b00:	005b      	lsls	r3, r3, #1
 8015b02:	4403      	add	r3, r0
 8015b04:	00db      	lsls	r3, r3, #3
 8015b06:	440b      	add	r3, r1
 8015b08:	3304      	adds	r3, #4
 8015b0a:	681b      	ldr	r3, [r3, #0]
            (arp_table[etharp_cached_entry].netif == netif) &&
 8015b0c:	429a      	cmp	r2, r3
 8015b0e:	d108      	bne.n	8015b22 <etharp_output+0x146>
          /* the per-pcb-cached entry is stable and the right one! */
          ETHARP_STATS_INC(etharp.cachehit);
          return etharp_output_to_arp_index(netif, q, etharp_cached_entry);
 8015b10:	4b31      	ldr	r3, [pc, #196]	; (8015bd8 <etharp_output+0x1fc>)
 8015b12:	781b      	ldrb	r3, [r3, #0]
 8015b14:	461a      	mov	r2, r3
 8015b16:	68b9      	ldr	r1, [r7, #8]
 8015b18:	68f8      	ldr	r0, [r7, #12]
 8015b1a:	f7ff fec5 	bl	80158a8 <etharp_output_to_arp_index>
 8015b1e:	4603      	mov	r3, r0
 8015b20:	e04a      	b.n	8015bb8 <etharp_output+0x1dc>
    }
#endif /* LWIP_NETIF_HWADDRHINT */

    /* find stable entry: do this here since this is a critical path for
       throughput and etharp_find_entry() is kind of slow */
    for (i = 0; i < ARP_TABLE_SIZE; i++) {
 8015b22:	2300      	movs	r3, #0
 8015b24:	75fb      	strb	r3, [r7, #23]
 8015b26:	e031      	b.n	8015b8c <etharp_output+0x1b0>
      if ((arp_table[i].state >= ETHARP_STATE_STABLE) &&
 8015b28:	7dfa      	ldrb	r2, [r7, #23]
 8015b2a:	492c      	ldr	r1, [pc, #176]	; (8015bdc <etharp_output+0x200>)
 8015b2c:	4613      	mov	r3, r2
 8015b2e:	005b      	lsls	r3, r3, #1
 8015b30:	4413      	add	r3, r2
 8015b32:	00db      	lsls	r3, r3, #3
 8015b34:	440b      	add	r3, r1
 8015b36:	3314      	adds	r3, #20
 8015b38:	781b      	ldrb	r3, [r3, #0]
 8015b3a:	2b01      	cmp	r3, #1
 8015b3c:	d923      	bls.n	8015b86 <etharp_output+0x1aa>
#if ETHARP_TABLE_MATCH_NETIF
          (arp_table[i].netif == netif) &&
 8015b3e:	7dfa      	ldrb	r2, [r7, #23]
 8015b40:	4926      	ldr	r1, [pc, #152]	; (8015bdc <etharp_output+0x200>)
 8015b42:	4613      	mov	r3, r2
 8015b44:	005b      	lsls	r3, r3, #1
 8015b46:	4413      	add	r3, r2
 8015b48:	00db      	lsls	r3, r3, #3
 8015b4a:	440b      	add	r3, r1
 8015b4c:	3308      	adds	r3, #8
 8015b4e:	681b      	ldr	r3, [r3, #0]
      if ((arp_table[i].state >= ETHARP_STATE_STABLE) &&
 8015b50:	68fa      	ldr	r2, [r7, #12]
 8015b52:	429a      	cmp	r2, r3
 8015b54:	d117      	bne.n	8015b86 <etharp_output+0x1aa>
#endif
          (ip4_addr_cmp(dst_addr, &arp_table[i].ipaddr))) {
 8015b56:	69bb      	ldr	r3, [r7, #24]
 8015b58:	6819      	ldr	r1, [r3, #0]
 8015b5a:	7dfa      	ldrb	r2, [r7, #23]
 8015b5c:	481f      	ldr	r0, [pc, #124]	; (8015bdc <etharp_output+0x200>)
 8015b5e:	4613      	mov	r3, r2
 8015b60:	005b      	lsls	r3, r3, #1
 8015b62:	4413      	add	r3, r2
 8015b64:	00db      	lsls	r3, r3, #3
 8015b66:	4403      	add	r3, r0
 8015b68:	3304      	adds	r3, #4
 8015b6a:	681b      	ldr	r3, [r3, #0]
          (arp_table[i].netif == netif) &&
 8015b6c:	4299      	cmp	r1, r3
 8015b6e:	d10a      	bne.n	8015b86 <etharp_output+0x1aa>
        /* found an existing, stable entry */
        ETHARP_SET_ADDRHINT(netif, i);
 8015b70:	4a19      	ldr	r2, [pc, #100]	; (8015bd8 <etharp_output+0x1fc>)
 8015b72:	7dfb      	ldrb	r3, [r7, #23]
 8015b74:	7013      	strb	r3, [r2, #0]
        return etharp_output_to_arp_index(netif, q, i);
 8015b76:	7dfb      	ldrb	r3, [r7, #23]
 8015b78:	461a      	mov	r2, r3
 8015b7a:	68b9      	ldr	r1, [r7, #8]
 8015b7c:	68f8      	ldr	r0, [r7, #12]
 8015b7e:	f7ff fe93 	bl	80158a8 <etharp_output_to_arp_index>
 8015b82:	4603      	mov	r3, r0
 8015b84:	e018      	b.n	8015bb8 <etharp_output+0x1dc>
    for (i = 0; i < ARP_TABLE_SIZE; i++) {
 8015b86:	7dfb      	ldrb	r3, [r7, #23]
 8015b88:	3301      	adds	r3, #1
 8015b8a:	75fb      	strb	r3, [r7, #23]
 8015b8c:	7dfb      	ldrb	r3, [r7, #23]
 8015b8e:	2b09      	cmp	r3, #9
 8015b90:	d9ca      	bls.n	8015b28 <etharp_output+0x14c>
      }
    }
    /* no stable entry found, use the (slower) query function:
       queue on destination Ethernet address belonging to ipaddr */
    return etharp_query(netif, dst_addr, q);
 8015b92:	68ba      	ldr	r2, [r7, #8]
 8015b94:	69b9      	ldr	r1, [r7, #24]
 8015b96:	68f8      	ldr	r0, [r7, #12]
 8015b98:	f000 f822 	bl	8015be0 <etharp_query>
 8015b9c:	4603      	mov	r3, r0
 8015b9e:	e00b      	b.n	8015bb8 <etharp_output+0x1dc>
  }

  /* continuation for multicast/broadcast destinations */
  /* obtain source Ethernet address of the given interface */
  /* send packet directly on the link */
  return ethernet_output(netif, q, (struct eth_addr *)(netif->hwaddr), dest, ETHTYPE_IP);
 8015ba0:	68fb      	ldr	r3, [r7, #12]
 8015ba2:	f103 022a 	add.w	r2, r3, #42	; 0x2a
 8015ba6:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8015baa:	9300      	str	r3, [sp, #0]
 8015bac:	69fb      	ldr	r3, [r7, #28]
 8015bae:	68b9      	ldr	r1, [r7, #8]
 8015bb0:	68f8      	ldr	r0, [r7, #12]
 8015bb2:	f001 fd63 	bl	801767c <ethernet_output>
 8015bb6:	4603      	mov	r3, r0
}
 8015bb8:	4618      	mov	r0, r3
 8015bba:	3720      	adds	r7, #32
 8015bbc:	46bd      	mov	sp, r7
 8015bbe:	bd80      	pop	{r7, pc}
 8015bc0:	0801baa4 	.word	0x0801baa4
 8015bc4:	0801bbf4 	.word	0x0801bbf4
 8015bc8:	0801bb1c 	.word	0x0801bb1c
 8015bcc:	0801bc44 	.word	0x0801bc44
 8015bd0:	0801bbe4 	.word	0x0801bbe4
 8015bd4:	0801c2cc 	.word	0x0801c2cc
 8015bd8:	20008aac 	.word	0x20008aac
 8015bdc:	200089bc 	.word	0x200089bc

08015be0 <etharp_query>:
 * - ERR_ARG Non-unicast address given, those will not appear in ARP cache.
 *
 */
err_t
etharp_query(struct netif *netif, const ip4_addr_t *ipaddr, struct pbuf *q)
{
 8015be0:	b580      	push	{r7, lr}
 8015be2:	b08c      	sub	sp, #48	; 0x30
 8015be4:	af02      	add	r7, sp, #8
 8015be6:	60f8      	str	r0, [r7, #12]
 8015be8:	60b9      	str	r1, [r7, #8]
 8015bea:	607a      	str	r2, [r7, #4]
  struct eth_addr *srcaddr = (struct eth_addr *)netif->hwaddr;
 8015bec:	68fb      	ldr	r3, [r7, #12]
 8015bee:	332a      	adds	r3, #42	; 0x2a
 8015bf0:	617b      	str	r3, [r7, #20]
  err_t result = ERR_MEM;
 8015bf2:	23ff      	movs	r3, #255	; 0xff
 8015bf4:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  int is_new_entry = 0;
 8015bf8:	2300      	movs	r3, #0
 8015bfa:	623b      	str	r3, [r7, #32]
  s16_t i_err;
  netif_addr_idx_t i;

  /* non-unicast address? */
  if (ip4_addr_isbroadcast(ipaddr, netif) ||
 8015bfc:	68bb      	ldr	r3, [r7, #8]
 8015bfe:	681b      	ldr	r3, [r3, #0]
 8015c00:	68f9      	ldr	r1, [r7, #12]
 8015c02:	4618      	mov	r0, r3
 8015c04:	f000 fe2c 	bl	8016860 <ip4_addr_isbroadcast_u32>
 8015c08:	4603      	mov	r3, r0
 8015c0a:	2b00      	cmp	r3, #0
 8015c0c:	d10c      	bne.n	8015c28 <etharp_query+0x48>
      ip4_addr_ismulticast(ipaddr) ||
 8015c0e:	68bb      	ldr	r3, [r7, #8]
 8015c10:	681b      	ldr	r3, [r3, #0]
 8015c12:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
  if (ip4_addr_isbroadcast(ipaddr, netif) ||
 8015c16:	2be0      	cmp	r3, #224	; 0xe0
 8015c18:	d006      	beq.n	8015c28 <etharp_query+0x48>
      ip4_addr_ismulticast(ipaddr) ||
 8015c1a:	68bb      	ldr	r3, [r7, #8]
 8015c1c:	2b00      	cmp	r3, #0
 8015c1e:	d003      	beq.n	8015c28 <etharp_query+0x48>
      ip4_addr_isany(ipaddr)) {
 8015c20:	68bb      	ldr	r3, [r7, #8]
 8015c22:	681b      	ldr	r3, [r3, #0]
 8015c24:	2b00      	cmp	r3, #0
 8015c26:	d102      	bne.n	8015c2e <etharp_query+0x4e>
    LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_query: will not add non-unicast IP address to ARP cache\n"));
    return ERR_ARG;
 8015c28:	f06f 030f 	mvn.w	r3, #15
 8015c2c:	e101      	b.n	8015e32 <etharp_query+0x252>
  }

  /* find entry in ARP cache, ask to create entry if queueing packet */
  i_err = etharp_find_entry(ipaddr, ETHARP_FLAG_TRY_HARD, netif);
 8015c2e:	68fa      	ldr	r2, [r7, #12]
 8015c30:	2101      	movs	r1, #1
 8015c32:	68b8      	ldr	r0, [r7, #8]
 8015c34:	f7ff fb5c 	bl	80152f0 <etharp_find_entry>
 8015c38:	4603      	mov	r3, r0
 8015c3a:	827b      	strh	r3, [r7, #18]

  /* could not find or create entry? */
  if (i_err < 0) {
 8015c3c:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 8015c40:	2b00      	cmp	r3, #0
 8015c42:	da02      	bge.n	8015c4a <etharp_query+0x6a>
    LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_query: could not create ARP entry\n"));
    if (q) {
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_query: packet dropped\n"));
      ETHARP_STATS_INC(etharp.memerr);
    }
    return (err_t)i_err;
 8015c44:	8a7b      	ldrh	r3, [r7, #18]
 8015c46:	b25b      	sxtb	r3, r3
 8015c48:	e0f3      	b.n	8015e32 <etharp_query+0x252>
  }
  LWIP_ASSERT("type overflow", (size_t)i_err < NETIF_ADDR_IDX_MAX);
 8015c4a:	8a7b      	ldrh	r3, [r7, #18]
 8015c4c:	2b7e      	cmp	r3, #126	; 0x7e
 8015c4e:	d906      	bls.n	8015c5e <etharp_query+0x7e>
 8015c50:	4b7a      	ldr	r3, [pc, #488]	; (8015e3c <etharp_query+0x25c>)
 8015c52:	f240 32c1 	movw	r2, #961	; 0x3c1
 8015c56:	497a      	ldr	r1, [pc, #488]	; (8015e40 <etharp_query+0x260>)
 8015c58:	487a      	ldr	r0, [pc, #488]	; (8015e44 <etharp_query+0x264>)
 8015c5a:	f002 fc15 	bl	8018488 <iprintf>
  i = (netif_addr_idx_t)i_err;
 8015c5e:	8a7b      	ldrh	r3, [r7, #18]
 8015c60:	747b      	strb	r3, [r7, #17]

  /* mark a fresh entry as pending (we just sent a request) */
  if (arp_table[i].state == ETHARP_STATE_EMPTY) {
 8015c62:	7c7a      	ldrb	r2, [r7, #17]
 8015c64:	4978      	ldr	r1, [pc, #480]	; (8015e48 <etharp_query+0x268>)
 8015c66:	4613      	mov	r3, r2
 8015c68:	005b      	lsls	r3, r3, #1
 8015c6a:	4413      	add	r3, r2
 8015c6c:	00db      	lsls	r3, r3, #3
 8015c6e:	440b      	add	r3, r1
 8015c70:	3314      	adds	r3, #20
 8015c72:	781b      	ldrb	r3, [r3, #0]
 8015c74:	2b00      	cmp	r3, #0
 8015c76:	d115      	bne.n	8015ca4 <etharp_query+0xc4>
    is_new_entry = 1;
 8015c78:	2301      	movs	r3, #1
 8015c7a:	623b      	str	r3, [r7, #32]
    arp_table[i].state = ETHARP_STATE_PENDING;
 8015c7c:	7c7a      	ldrb	r2, [r7, #17]
 8015c7e:	4972      	ldr	r1, [pc, #456]	; (8015e48 <etharp_query+0x268>)
 8015c80:	4613      	mov	r3, r2
 8015c82:	005b      	lsls	r3, r3, #1
 8015c84:	4413      	add	r3, r2
 8015c86:	00db      	lsls	r3, r3, #3
 8015c88:	440b      	add	r3, r1
 8015c8a:	3314      	adds	r3, #20
 8015c8c:	2201      	movs	r2, #1
 8015c8e:	701a      	strb	r2, [r3, #0]
    /* record network interface for re-sending arp request in etharp_tmr */
    arp_table[i].netif = netif;
 8015c90:	7c7a      	ldrb	r2, [r7, #17]
 8015c92:	496d      	ldr	r1, [pc, #436]	; (8015e48 <etharp_query+0x268>)
 8015c94:	4613      	mov	r3, r2
 8015c96:	005b      	lsls	r3, r3, #1
 8015c98:	4413      	add	r3, r2
 8015c9a:	00db      	lsls	r3, r3, #3
 8015c9c:	440b      	add	r3, r1
 8015c9e:	3308      	adds	r3, #8
 8015ca0:	68fa      	ldr	r2, [r7, #12]
 8015ca2:	601a      	str	r2, [r3, #0]
  }

  /* { i is either a STABLE or (new or existing) PENDING entry } */
  LWIP_ASSERT("arp_table[i].state == PENDING or STABLE",
 8015ca4:	7c7a      	ldrb	r2, [r7, #17]
 8015ca6:	4968      	ldr	r1, [pc, #416]	; (8015e48 <etharp_query+0x268>)
 8015ca8:	4613      	mov	r3, r2
 8015caa:	005b      	lsls	r3, r3, #1
 8015cac:	4413      	add	r3, r2
 8015cae:	00db      	lsls	r3, r3, #3
 8015cb0:	440b      	add	r3, r1
 8015cb2:	3314      	adds	r3, #20
 8015cb4:	781b      	ldrb	r3, [r3, #0]
 8015cb6:	2b01      	cmp	r3, #1
 8015cb8:	d011      	beq.n	8015cde <etharp_query+0xfe>
 8015cba:	7c7a      	ldrb	r2, [r7, #17]
 8015cbc:	4962      	ldr	r1, [pc, #392]	; (8015e48 <etharp_query+0x268>)
 8015cbe:	4613      	mov	r3, r2
 8015cc0:	005b      	lsls	r3, r3, #1
 8015cc2:	4413      	add	r3, r2
 8015cc4:	00db      	lsls	r3, r3, #3
 8015cc6:	440b      	add	r3, r1
 8015cc8:	3314      	adds	r3, #20
 8015cca:	781b      	ldrb	r3, [r3, #0]
 8015ccc:	2b01      	cmp	r3, #1
 8015cce:	d806      	bhi.n	8015cde <etharp_query+0xfe>
 8015cd0:	4b5a      	ldr	r3, [pc, #360]	; (8015e3c <etharp_query+0x25c>)
 8015cd2:	f240 32cd 	movw	r2, #973	; 0x3cd
 8015cd6:	495d      	ldr	r1, [pc, #372]	; (8015e4c <etharp_query+0x26c>)
 8015cd8:	485a      	ldr	r0, [pc, #360]	; (8015e44 <etharp_query+0x264>)
 8015cda:	f002 fbd5 	bl	8018488 <iprintf>
              ((arp_table[i].state == ETHARP_STATE_PENDING) ||
               (arp_table[i].state >= ETHARP_STATE_STABLE)));

  /* do we have a new entry? or an implicit query request? */
  if (is_new_entry || (q == NULL)) {
 8015cde:	6a3b      	ldr	r3, [r7, #32]
 8015ce0:	2b00      	cmp	r3, #0
 8015ce2:	d102      	bne.n	8015cea <etharp_query+0x10a>
 8015ce4:	687b      	ldr	r3, [r7, #4]
 8015ce6:	2b00      	cmp	r3, #0
 8015ce8:	d10c      	bne.n	8015d04 <etharp_query+0x124>
    /* try to resolve it; send out ARP request */
    result = etharp_request(netif, ipaddr);
 8015cea:	68b9      	ldr	r1, [r7, #8]
 8015cec:	68f8      	ldr	r0, [r7, #12]
 8015cee:	f000 f963 	bl	8015fb8 <etharp_request>
 8015cf2:	4603      	mov	r3, r0
 8015cf4:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
      /* ARP request couldn't be sent */
      /* We don't re-send arp request in etharp_tmr, but we still queue packets,
         since this failure could be temporary, and the next packet calling
         etharp_query again could lead to sending the queued packets. */
    }
    if (q == NULL) {
 8015cf8:	687b      	ldr	r3, [r7, #4]
 8015cfa:	2b00      	cmp	r3, #0
 8015cfc:	d102      	bne.n	8015d04 <etharp_query+0x124>
      return result;
 8015cfe:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 8015d02:	e096      	b.n	8015e32 <etharp_query+0x252>
    }
  }

  /* packet given? */
  LWIP_ASSERT("q != NULL", q != NULL);
 8015d04:	687b      	ldr	r3, [r7, #4]
 8015d06:	2b00      	cmp	r3, #0
 8015d08:	d106      	bne.n	8015d18 <etharp_query+0x138>
 8015d0a:	4b4c      	ldr	r3, [pc, #304]	; (8015e3c <etharp_query+0x25c>)
 8015d0c:	f240 32e1 	movw	r2, #993	; 0x3e1
 8015d10:	494f      	ldr	r1, [pc, #316]	; (8015e50 <etharp_query+0x270>)
 8015d12:	484c      	ldr	r0, [pc, #304]	; (8015e44 <etharp_query+0x264>)
 8015d14:	f002 fbb8 	bl	8018488 <iprintf>
  /* stable entry? */
  if (arp_table[i].state >= ETHARP_STATE_STABLE) {
 8015d18:	7c7a      	ldrb	r2, [r7, #17]
 8015d1a:	494b      	ldr	r1, [pc, #300]	; (8015e48 <etharp_query+0x268>)
 8015d1c:	4613      	mov	r3, r2
 8015d1e:	005b      	lsls	r3, r3, #1
 8015d20:	4413      	add	r3, r2
 8015d22:	00db      	lsls	r3, r3, #3
 8015d24:	440b      	add	r3, r1
 8015d26:	3314      	adds	r3, #20
 8015d28:	781b      	ldrb	r3, [r3, #0]
 8015d2a:	2b01      	cmp	r3, #1
 8015d2c:	d917      	bls.n	8015d5e <etharp_query+0x17e>
    /* we have a valid IP->Ethernet address mapping */
    ETHARP_SET_ADDRHINT(netif, i);
 8015d2e:	4a49      	ldr	r2, [pc, #292]	; (8015e54 <etharp_query+0x274>)
 8015d30:	7c7b      	ldrb	r3, [r7, #17]
 8015d32:	7013      	strb	r3, [r2, #0]
    /* send the packet */
    result = ethernet_output(netif, q, srcaddr, &(arp_table[i].ethaddr), ETHTYPE_IP);
 8015d34:	7c7a      	ldrb	r2, [r7, #17]
 8015d36:	4613      	mov	r3, r2
 8015d38:	005b      	lsls	r3, r3, #1
 8015d3a:	4413      	add	r3, r2
 8015d3c:	00db      	lsls	r3, r3, #3
 8015d3e:	3308      	adds	r3, #8
 8015d40:	4a41      	ldr	r2, [pc, #260]	; (8015e48 <etharp_query+0x268>)
 8015d42:	4413      	add	r3, r2
 8015d44:	3304      	adds	r3, #4
 8015d46:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8015d4a:	9200      	str	r2, [sp, #0]
 8015d4c:	697a      	ldr	r2, [r7, #20]
 8015d4e:	6879      	ldr	r1, [r7, #4]
 8015d50:	68f8      	ldr	r0, [r7, #12]
 8015d52:	f001 fc93 	bl	801767c <ethernet_output>
 8015d56:	4603      	mov	r3, r0
 8015d58:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 8015d5c:	e067      	b.n	8015e2e <etharp_query+0x24e>
    /* pending entry? (either just created or already pending */
  } else if (arp_table[i].state == ETHARP_STATE_PENDING) {
 8015d5e:	7c7a      	ldrb	r2, [r7, #17]
 8015d60:	4939      	ldr	r1, [pc, #228]	; (8015e48 <etharp_query+0x268>)
 8015d62:	4613      	mov	r3, r2
 8015d64:	005b      	lsls	r3, r3, #1
 8015d66:	4413      	add	r3, r2
 8015d68:	00db      	lsls	r3, r3, #3
 8015d6a:	440b      	add	r3, r1
 8015d6c:	3314      	adds	r3, #20
 8015d6e:	781b      	ldrb	r3, [r3, #0]
 8015d70:	2b01      	cmp	r3, #1
 8015d72:	d15c      	bne.n	8015e2e <etharp_query+0x24e>
    /* entry is still pending, queue the given packet 'q' */
    struct pbuf *p;
    int copy_needed = 0;
 8015d74:	2300      	movs	r3, #0
 8015d76:	61bb      	str	r3, [r7, #24]
    /* IF q includes a pbuf that must be copied, copy the whole chain into a
     * new PBUF_RAM. See the definition of PBUF_NEEDS_COPY for details. */
    p = q;
 8015d78:	687b      	ldr	r3, [r7, #4]
 8015d7a:	61fb      	str	r3, [r7, #28]
    while (p) {
 8015d7c:	e01c      	b.n	8015db8 <etharp_query+0x1d8>
      LWIP_ASSERT("no packet queues allowed!", (p->len != p->tot_len) || (p->next == 0));
 8015d7e:	69fb      	ldr	r3, [r7, #28]
 8015d80:	895a      	ldrh	r2, [r3, #10]
 8015d82:	69fb      	ldr	r3, [r7, #28]
 8015d84:	891b      	ldrh	r3, [r3, #8]
 8015d86:	429a      	cmp	r2, r3
 8015d88:	d10a      	bne.n	8015da0 <etharp_query+0x1c0>
 8015d8a:	69fb      	ldr	r3, [r7, #28]
 8015d8c:	681b      	ldr	r3, [r3, #0]
 8015d8e:	2b00      	cmp	r3, #0
 8015d90:	d006      	beq.n	8015da0 <etharp_query+0x1c0>
 8015d92:	4b2a      	ldr	r3, [pc, #168]	; (8015e3c <etharp_query+0x25c>)
 8015d94:	f240 32f1 	movw	r2, #1009	; 0x3f1
 8015d98:	492f      	ldr	r1, [pc, #188]	; (8015e58 <etharp_query+0x278>)
 8015d9a:	482a      	ldr	r0, [pc, #168]	; (8015e44 <etharp_query+0x264>)
 8015d9c:	f002 fb74 	bl	8018488 <iprintf>
      if (PBUF_NEEDS_COPY(p)) {
 8015da0:	69fb      	ldr	r3, [r7, #28]
 8015da2:	7b1b      	ldrb	r3, [r3, #12]
 8015da4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8015da8:	2b00      	cmp	r3, #0
 8015daa:	d002      	beq.n	8015db2 <etharp_query+0x1d2>
        copy_needed = 1;
 8015dac:	2301      	movs	r3, #1
 8015dae:	61bb      	str	r3, [r7, #24]
        break;
 8015db0:	e005      	b.n	8015dbe <etharp_query+0x1de>
      }
      p = p->next;
 8015db2:	69fb      	ldr	r3, [r7, #28]
 8015db4:	681b      	ldr	r3, [r3, #0]
 8015db6:	61fb      	str	r3, [r7, #28]
    while (p) {
 8015db8:	69fb      	ldr	r3, [r7, #28]
 8015dba:	2b00      	cmp	r3, #0
 8015dbc:	d1df      	bne.n	8015d7e <etharp_query+0x19e>
    }
    if (copy_needed) {
 8015dbe:	69bb      	ldr	r3, [r7, #24]
 8015dc0:	2b00      	cmp	r3, #0
 8015dc2:	d007      	beq.n	8015dd4 <etharp_query+0x1f4>
      /* copy the whole packet into new pbufs */
      p = pbuf_clone(PBUF_LINK, PBUF_RAM, q);
 8015dc4:	687a      	ldr	r2, [r7, #4]
 8015dc6:	f44f 7120 	mov.w	r1, #640	; 0x280
 8015dca:	200e      	movs	r0, #14
 8015dcc:	f7f6 fc5c 	bl	800c688 <pbuf_clone>
 8015dd0:	61f8      	str	r0, [r7, #28]
 8015dd2:	e004      	b.n	8015dde <etharp_query+0x1fe>
    } else {
      /* referencing the old pbuf is enough */
      p = q;
 8015dd4:	687b      	ldr	r3, [r7, #4]
 8015dd6:	61fb      	str	r3, [r7, #28]
      pbuf_ref(p);
 8015dd8:	69f8      	ldr	r0, [r7, #28]
 8015dda:	f7f6 f951 	bl	800c080 <pbuf_ref>
    }
    /* packet could be taken over? */
    if (p != NULL) {
 8015dde:	69fb      	ldr	r3, [r7, #28]
 8015de0:	2b00      	cmp	r3, #0
 8015de2:	d021      	beq.n	8015e28 <etharp_query+0x248>
        LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_query: could not queue a copy of PBUF_REF packet %p (out of memory)\n", (void *)q));
        result = ERR_MEM;
      }
#else /* ARP_QUEUEING */
      /* always queue one packet per ARP request only, freeing a previously queued packet */
      if (arp_table[i].q != NULL) {
 8015de4:	7c7a      	ldrb	r2, [r7, #17]
 8015de6:	4918      	ldr	r1, [pc, #96]	; (8015e48 <etharp_query+0x268>)
 8015de8:	4613      	mov	r3, r2
 8015dea:	005b      	lsls	r3, r3, #1
 8015dec:	4413      	add	r3, r2
 8015dee:	00db      	lsls	r3, r3, #3
 8015df0:	440b      	add	r3, r1
 8015df2:	681b      	ldr	r3, [r3, #0]
 8015df4:	2b00      	cmp	r3, #0
 8015df6:	d00a      	beq.n	8015e0e <etharp_query+0x22e>
        LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_query: dropped previously queued packet %p for ARP entry %"U16_F"\n", (void *)q, (u16_t)i));
        pbuf_free(arp_table[i].q);
 8015df8:	7c7a      	ldrb	r2, [r7, #17]
 8015dfa:	4913      	ldr	r1, [pc, #76]	; (8015e48 <etharp_query+0x268>)
 8015dfc:	4613      	mov	r3, r2
 8015dfe:	005b      	lsls	r3, r3, #1
 8015e00:	4413      	add	r3, r2
 8015e02:	00db      	lsls	r3, r3, #3
 8015e04:	440b      	add	r3, r1
 8015e06:	681b      	ldr	r3, [r3, #0]
 8015e08:	4618      	mov	r0, r3
 8015e0a:	f7f6 f899 	bl	800bf40 <pbuf_free>
      }
      arp_table[i].q = p;
 8015e0e:	7c7a      	ldrb	r2, [r7, #17]
 8015e10:	490d      	ldr	r1, [pc, #52]	; (8015e48 <etharp_query+0x268>)
 8015e12:	4613      	mov	r3, r2
 8015e14:	005b      	lsls	r3, r3, #1
 8015e16:	4413      	add	r3, r2
 8015e18:	00db      	lsls	r3, r3, #3
 8015e1a:	440b      	add	r3, r1
 8015e1c:	69fa      	ldr	r2, [r7, #28]
 8015e1e:	601a      	str	r2, [r3, #0]
      result = ERR_OK;
 8015e20:	2300      	movs	r3, #0
 8015e22:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 8015e26:	e002      	b.n	8015e2e <etharp_query+0x24e>
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_query: queued packet %p on ARP entry %"U16_F"\n", (void *)q, (u16_t)i));
#endif /* ARP_QUEUEING */
    } else {
      ETHARP_STATS_INC(etharp.memerr);
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_query: could not queue a copy of PBUF_REF packet %p (out of memory)\n", (void *)q));
      result = ERR_MEM;
 8015e28:	23ff      	movs	r3, #255	; 0xff
 8015e2a:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
    }
  }
  return result;
 8015e2e:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
}
 8015e32:	4618      	mov	r0, r3
 8015e34:	3728      	adds	r7, #40	; 0x28
 8015e36:	46bd      	mov	sp, r7
 8015e38:	bd80      	pop	{r7, pc}
 8015e3a:	bf00      	nop
 8015e3c:	0801baa4 	.word	0x0801baa4
 8015e40:	0801bc50 	.word	0x0801bc50
 8015e44:	0801bb1c 	.word	0x0801bb1c
 8015e48:	200089bc 	.word	0x200089bc
 8015e4c:	0801bc60 	.word	0x0801bc60
 8015e50:	0801bc44 	.word	0x0801bc44
 8015e54:	20008aac 	.word	0x20008aac
 8015e58:	0801bc88 	.word	0x0801bc88

08015e5c <etharp_raw>:
etharp_raw(struct netif *netif, const struct eth_addr *ethsrc_addr,
           const struct eth_addr *ethdst_addr,
           const struct eth_addr *hwsrc_addr, const ip4_addr_t *ipsrc_addr,
           const struct eth_addr *hwdst_addr, const ip4_addr_t *ipdst_addr,
           const u16_t opcode)
{
 8015e5c:	b580      	push	{r7, lr}
 8015e5e:	b08a      	sub	sp, #40	; 0x28
 8015e60:	af02      	add	r7, sp, #8
 8015e62:	60f8      	str	r0, [r7, #12]
 8015e64:	60b9      	str	r1, [r7, #8]
 8015e66:	607a      	str	r2, [r7, #4]
 8015e68:	603b      	str	r3, [r7, #0]
  struct pbuf *p;
  err_t result = ERR_OK;
 8015e6a:	2300      	movs	r3, #0
 8015e6c:	77fb      	strb	r3, [r7, #31]
  struct etharp_hdr *hdr;

  LWIP_ASSERT("netif != NULL", netif != NULL);
 8015e6e:	68fb      	ldr	r3, [r7, #12]
 8015e70:	2b00      	cmp	r3, #0
 8015e72:	d106      	bne.n	8015e82 <etharp_raw+0x26>
 8015e74:	4b3a      	ldr	r3, [pc, #232]	; (8015f60 <etharp_raw+0x104>)
 8015e76:	f240 4257 	movw	r2, #1111	; 0x457
 8015e7a:	493a      	ldr	r1, [pc, #232]	; (8015f64 <etharp_raw+0x108>)
 8015e7c:	483a      	ldr	r0, [pc, #232]	; (8015f68 <etharp_raw+0x10c>)
 8015e7e:	f002 fb03 	bl	8018488 <iprintf>

  /* allocate a pbuf for the outgoing ARP request packet */
  p = pbuf_alloc(PBUF_LINK, SIZEOF_ETHARP_HDR, PBUF_RAM);
 8015e82:	f44f 7220 	mov.w	r2, #640	; 0x280
 8015e86:	211c      	movs	r1, #28
 8015e88:	200e      	movs	r0, #14
 8015e8a:	f7f5 fd75 	bl	800b978 <pbuf_alloc>
 8015e8e:	61b8      	str	r0, [r7, #24]
  /* could allocate a pbuf for an ARP request? */
  if (p == NULL) {
 8015e90:	69bb      	ldr	r3, [r7, #24]
 8015e92:	2b00      	cmp	r3, #0
 8015e94:	d102      	bne.n	8015e9c <etharp_raw+0x40>
    LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_SERIOUS,
                ("etharp_raw: could not allocate pbuf for ARP request.\n"));
    ETHARP_STATS_INC(etharp.memerr);
    return ERR_MEM;
 8015e96:	f04f 33ff 	mov.w	r3, #4294967295
 8015e9a:	e05d      	b.n	8015f58 <etharp_raw+0xfc>
  }
  LWIP_ASSERT("check that first pbuf can hold struct etharp_hdr",
 8015e9c:	69bb      	ldr	r3, [r7, #24]
 8015e9e:	895b      	ldrh	r3, [r3, #10]
 8015ea0:	2b1b      	cmp	r3, #27
 8015ea2:	d806      	bhi.n	8015eb2 <etharp_raw+0x56>
 8015ea4:	4b2e      	ldr	r3, [pc, #184]	; (8015f60 <etharp_raw+0x104>)
 8015ea6:	f240 4262 	movw	r2, #1122	; 0x462
 8015eaa:	4930      	ldr	r1, [pc, #192]	; (8015f6c <etharp_raw+0x110>)
 8015eac:	482e      	ldr	r0, [pc, #184]	; (8015f68 <etharp_raw+0x10c>)
 8015eae:	f002 faeb 	bl	8018488 <iprintf>
              (p->len >= SIZEOF_ETHARP_HDR));

  hdr = (struct etharp_hdr *)p->payload;
 8015eb2:	69bb      	ldr	r3, [r7, #24]
 8015eb4:	685b      	ldr	r3, [r3, #4]
 8015eb6:	617b      	str	r3, [r7, #20]
  LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_raw: sending raw ARP packet.\n"));
  hdr->opcode = lwip_htons(opcode);
 8015eb8:	8ebb      	ldrh	r3, [r7, #52]	; 0x34
 8015eba:	4618      	mov	r0, r3
 8015ebc:	f7f4 f9e8 	bl	800a290 <lwip_htons>
 8015ec0:	4603      	mov	r3, r0
 8015ec2:	461a      	mov	r2, r3
 8015ec4:	697b      	ldr	r3, [r7, #20]
 8015ec6:	80da      	strh	r2, [r3, #6]

  LWIP_ASSERT("netif->hwaddr_len must be the same as ETH_HWADDR_LEN for etharp!",
 8015ec8:	68fb      	ldr	r3, [r7, #12]
 8015eca:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8015ece:	2b06      	cmp	r3, #6
 8015ed0:	d006      	beq.n	8015ee0 <etharp_raw+0x84>
 8015ed2:	4b23      	ldr	r3, [pc, #140]	; (8015f60 <etharp_raw+0x104>)
 8015ed4:	f240 4269 	movw	r2, #1129	; 0x469
 8015ed8:	4925      	ldr	r1, [pc, #148]	; (8015f70 <etharp_raw+0x114>)
 8015eda:	4823      	ldr	r0, [pc, #140]	; (8015f68 <etharp_raw+0x10c>)
 8015edc:	f002 fad4 	bl	8018488 <iprintf>
              (netif->hwaddr_len == ETH_HWADDR_LEN));

  /* Write the ARP MAC-Addresses */
  SMEMCPY(&hdr->shwaddr, hwsrc_addr, ETH_HWADDR_LEN);
 8015ee0:	697b      	ldr	r3, [r7, #20]
 8015ee2:	3308      	adds	r3, #8
 8015ee4:	2206      	movs	r2, #6
 8015ee6:	6839      	ldr	r1, [r7, #0]
 8015ee8:	4618      	mov	r0, r3
 8015eea:	f002 fbc0 	bl	801866e <memcpy>
  SMEMCPY(&hdr->dhwaddr, hwdst_addr, ETH_HWADDR_LEN);
 8015eee:	697b      	ldr	r3, [r7, #20]
 8015ef0:	3312      	adds	r3, #18
 8015ef2:	2206      	movs	r2, #6
 8015ef4:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8015ef6:	4618      	mov	r0, r3
 8015ef8:	f002 fbb9 	bl	801866e <memcpy>
  /* Copy struct ip4_addr_wordaligned to aligned ip4_addr, to support compilers without
   * structure packing. */
  IPADDR_WORDALIGNED_COPY_FROM_IP4_ADDR_T(&hdr->sipaddr, ipsrc_addr);
 8015efc:	697b      	ldr	r3, [r7, #20]
 8015efe:	330e      	adds	r3, #14
 8015f00:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8015f02:	6812      	ldr	r2, [r2, #0]
 8015f04:	601a      	str	r2, [r3, #0]
  IPADDR_WORDALIGNED_COPY_FROM_IP4_ADDR_T(&hdr->dipaddr, ipdst_addr);
 8015f06:	697b      	ldr	r3, [r7, #20]
 8015f08:	3318      	adds	r3, #24
 8015f0a:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8015f0c:	6812      	ldr	r2, [r2, #0]
 8015f0e:	601a      	str	r2, [r3, #0]

  hdr->hwtype = PP_HTONS(LWIP_IANA_HWTYPE_ETHERNET);
 8015f10:	697b      	ldr	r3, [r7, #20]
 8015f12:	2200      	movs	r2, #0
 8015f14:	701a      	strb	r2, [r3, #0]
 8015f16:	2200      	movs	r2, #0
 8015f18:	f042 0201 	orr.w	r2, r2, #1
 8015f1c:	705a      	strb	r2, [r3, #1]
  hdr->proto = PP_HTONS(ETHTYPE_IP);
 8015f1e:	697b      	ldr	r3, [r7, #20]
 8015f20:	2200      	movs	r2, #0
 8015f22:	f042 0208 	orr.w	r2, r2, #8
 8015f26:	709a      	strb	r2, [r3, #2]
 8015f28:	2200      	movs	r2, #0
 8015f2a:	70da      	strb	r2, [r3, #3]
  /* set hwlen and protolen */
  hdr->hwlen = ETH_HWADDR_LEN;
 8015f2c:	697b      	ldr	r3, [r7, #20]
 8015f2e:	2206      	movs	r2, #6
 8015f30:	711a      	strb	r2, [r3, #4]
  hdr->protolen = sizeof(ip4_addr_t);
 8015f32:	697b      	ldr	r3, [r7, #20]
 8015f34:	2204      	movs	r2, #4
 8015f36:	715a      	strb	r2, [r3, #5]
  if (ip4_addr_islinklocal(ipsrc_addr)) {
    ethernet_output(netif, p, ethsrc_addr, &ethbroadcast, ETHTYPE_ARP);
  } else
#endif /* LWIP_AUTOIP */
  {
    ethernet_output(netif, p, ethsrc_addr, ethdst_addr, ETHTYPE_ARP);
 8015f38:	f640 0306 	movw	r3, #2054	; 0x806
 8015f3c:	9300      	str	r3, [sp, #0]
 8015f3e:	687b      	ldr	r3, [r7, #4]
 8015f40:	68ba      	ldr	r2, [r7, #8]
 8015f42:	69b9      	ldr	r1, [r7, #24]
 8015f44:	68f8      	ldr	r0, [r7, #12]
 8015f46:	f001 fb99 	bl	801767c <ethernet_output>
  }

  ETHARP_STATS_INC(etharp.xmit);
  /* free ARP query packet */
  pbuf_free(p);
 8015f4a:	69b8      	ldr	r0, [r7, #24]
 8015f4c:	f7f5 fff8 	bl	800bf40 <pbuf_free>
  p = NULL;
 8015f50:	2300      	movs	r3, #0
 8015f52:	61bb      	str	r3, [r7, #24]
  /* could not allocate pbuf for ARP request */

  return result;
 8015f54:	f997 301f 	ldrsb.w	r3, [r7, #31]
}
 8015f58:	4618      	mov	r0, r3
 8015f5a:	3720      	adds	r7, #32
 8015f5c:	46bd      	mov	sp, r7
 8015f5e:	bd80      	pop	{r7, pc}
 8015f60:	0801baa4 	.word	0x0801baa4
 8015f64:	0801bbf4 	.word	0x0801bbf4
 8015f68:	0801bb1c 	.word	0x0801bb1c
 8015f6c:	0801bca4 	.word	0x0801bca4
 8015f70:	0801bcd8 	.word	0x0801bcd8

08015f74 <etharp_request_dst>:
 *         ERR_MEM if the ARP packet couldn't be allocated
 *         any other err_t on failure
 */
static err_t
etharp_request_dst(struct netif *netif, const ip4_addr_t *ipaddr, const struct eth_addr *hw_dst_addr)
{
 8015f74:	b580      	push	{r7, lr}
 8015f76:	b088      	sub	sp, #32
 8015f78:	af04      	add	r7, sp, #16
 8015f7a:	60f8      	str	r0, [r7, #12]
 8015f7c:	60b9      	str	r1, [r7, #8]
 8015f7e:	607a      	str	r2, [r7, #4]
  return etharp_raw(netif, (struct eth_addr *)netif->hwaddr, hw_dst_addr,
 8015f80:	68fb      	ldr	r3, [r7, #12]
 8015f82:	f103 012a 	add.w	r1, r3, #42	; 0x2a
                    (struct eth_addr *)netif->hwaddr, netif_ip4_addr(netif), &ethzero,
 8015f86:	68fb      	ldr	r3, [r7, #12]
 8015f88:	f103 002a 	add.w	r0, r3, #42	; 0x2a
 8015f8c:	68fb      	ldr	r3, [r7, #12]
 8015f8e:	3304      	adds	r3, #4
  return etharp_raw(netif, (struct eth_addr *)netif->hwaddr, hw_dst_addr,
 8015f90:	2201      	movs	r2, #1
 8015f92:	9203      	str	r2, [sp, #12]
 8015f94:	68ba      	ldr	r2, [r7, #8]
 8015f96:	9202      	str	r2, [sp, #8]
 8015f98:	4a06      	ldr	r2, [pc, #24]	; (8015fb4 <etharp_request_dst+0x40>)
 8015f9a:	9201      	str	r2, [sp, #4]
 8015f9c:	9300      	str	r3, [sp, #0]
 8015f9e:	4603      	mov	r3, r0
 8015fa0:	687a      	ldr	r2, [r7, #4]
 8015fa2:	68f8      	ldr	r0, [r7, #12]
 8015fa4:	f7ff ff5a 	bl	8015e5c <etharp_raw>
 8015fa8:	4603      	mov	r3, r0
                    ipaddr, ARP_REQUEST);
}
 8015faa:	4618      	mov	r0, r3
 8015fac:	3710      	adds	r7, #16
 8015fae:	46bd      	mov	sp, r7
 8015fb0:	bd80      	pop	{r7, pc}
 8015fb2:	bf00      	nop
 8015fb4:	0801c2d4 	.word	0x0801c2d4

08015fb8 <etharp_request>:
 *         ERR_MEM if the ARP packet couldn't be allocated
 *         any other err_t on failure
 */
err_t
etharp_request(struct netif *netif, const ip4_addr_t *ipaddr)
{
 8015fb8:	b580      	push	{r7, lr}
 8015fba:	b082      	sub	sp, #8
 8015fbc:	af00      	add	r7, sp, #0
 8015fbe:	6078      	str	r0, [r7, #4]
 8015fc0:	6039      	str	r1, [r7, #0]
  LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_request: sending ARP request.\n"));
  return etharp_request_dst(netif, ipaddr, &ethbroadcast);
 8015fc2:	4a05      	ldr	r2, [pc, #20]	; (8015fd8 <etharp_request+0x20>)
 8015fc4:	6839      	ldr	r1, [r7, #0]
 8015fc6:	6878      	ldr	r0, [r7, #4]
 8015fc8:	f7ff ffd4 	bl	8015f74 <etharp_request_dst>
 8015fcc:	4603      	mov	r3, r0
}
 8015fce:	4618      	mov	r0, r3
 8015fd0:	3708      	adds	r7, #8
 8015fd2:	46bd      	mov	sp, r7
 8015fd4:	bd80      	pop	{r7, pc}
 8015fd6:	bf00      	nop
 8015fd8:	0801c2cc 	.word	0x0801c2cc

08015fdc <icmp_input>:
 * @param p the icmp echo request packet, p->payload pointing to the icmp header
 * @param inp the netif on which this packet was received
 */
void
icmp_input(struct pbuf *p, struct netif *inp)
{
 8015fdc:	b580      	push	{r7, lr}
 8015fde:	b08e      	sub	sp, #56	; 0x38
 8015fe0:	af04      	add	r7, sp, #16
 8015fe2:	6078      	str	r0, [r7, #4]
 8015fe4:	6039      	str	r1, [r7, #0]
  const ip4_addr_t *src;

  ICMP_STATS_INC(icmp.recv);
  MIB2_STATS_INC(mib2.icmpinmsgs);

  iphdr_in = ip4_current_header();
 8015fe6:	4b79      	ldr	r3, [pc, #484]	; (80161cc <icmp_input+0x1f0>)
 8015fe8:	689b      	ldr	r3, [r3, #8]
 8015fea:	627b      	str	r3, [r7, #36]	; 0x24
  hlen = IPH_HL_BYTES(iphdr_in);
 8015fec:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8015fee:	781b      	ldrb	r3, [r3, #0]
 8015ff0:	f003 030f 	and.w	r3, r3, #15
 8015ff4:	b2db      	uxtb	r3, r3
 8015ff6:	009b      	lsls	r3, r3, #2
 8015ff8:	b2db      	uxtb	r3, r3
 8015ffa:	847b      	strh	r3, [r7, #34]	; 0x22
  if (hlen < IP_HLEN) {
 8015ffc:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8015ffe:	2b13      	cmp	r3, #19
 8016000:	f240 80cd 	bls.w	801619e <icmp_input+0x1c2>
    LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: short IP header (%"S16_F" bytes) received\n", hlen));
    goto lenerr;
  }
  if (p->len < sizeof(u16_t) * 2) {
 8016004:	687b      	ldr	r3, [r7, #4]
 8016006:	895b      	ldrh	r3, [r3, #10]
 8016008:	2b03      	cmp	r3, #3
 801600a:	f240 80ca 	bls.w	80161a2 <icmp_input+0x1c6>
    LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: short ICMP (%"U16_F" bytes) received\n", p->tot_len));
    goto lenerr;
  }

  type = *((u8_t *)p->payload);
 801600e:	687b      	ldr	r3, [r7, #4]
 8016010:	685b      	ldr	r3, [r3, #4]
 8016012:	781b      	ldrb	r3, [r3, #0]
 8016014:	f887 3021 	strb.w	r3, [r7, #33]	; 0x21
#ifdef LWIP_DEBUG
  code = *(((u8_t *)p->payload) + 1);
  /* if debug is enabled but debug statement below is somehow disabled: */
  LWIP_UNUSED_ARG(code);
#endif /* LWIP_DEBUG */
  switch (type) {
 8016018:	f897 3021 	ldrb.w	r3, [r7, #33]	; 0x21
 801601c:	2b00      	cmp	r3, #0
 801601e:	f000 80b7 	beq.w	8016190 <icmp_input+0x1b4>
 8016022:	2b08      	cmp	r3, #8
 8016024:	f040 80b7 	bne.w	8016196 <icmp_input+0x1ba>
         (as obviously, an echo request has been sent, too). */
      MIB2_STATS_INC(mib2.icmpinechoreps);
      break;
    case ICMP_ECHO:
      MIB2_STATS_INC(mib2.icmpinechos);
      src = ip4_current_dest_addr();
 8016028:	4b69      	ldr	r3, [pc, #420]	; (80161d0 <icmp_input+0x1f4>)
 801602a:	61fb      	str	r3, [r7, #28]
      /* multicast destination address? */
      if (ip4_addr_ismulticast(ip4_current_dest_addr())) {
 801602c:	4b67      	ldr	r3, [pc, #412]	; (80161cc <icmp_input+0x1f0>)
 801602e:	695b      	ldr	r3, [r3, #20]
 8016030:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8016034:	2be0      	cmp	r3, #224	; 0xe0
 8016036:	f000 80bb 	beq.w	80161b0 <icmp_input+0x1d4>
        LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: Not echoing to multicast pings\n"));
        goto icmperr;
#endif /* LWIP_MULTICAST_PING */
      }
      /* broadcast destination address? */
      if (ip4_addr_isbroadcast(ip4_current_dest_addr(), ip_current_netif())) {
 801603a:	4b64      	ldr	r3, [pc, #400]	; (80161cc <icmp_input+0x1f0>)
 801603c:	695b      	ldr	r3, [r3, #20]
 801603e:	4a63      	ldr	r2, [pc, #396]	; (80161cc <icmp_input+0x1f0>)
 8016040:	6812      	ldr	r2, [r2, #0]
 8016042:	4611      	mov	r1, r2
 8016044:	4618      	mov	r0, r3
 8016046:	f000 fc0b 	bl	8016860 <ip4_addr_isbroadcast_u32>
 801604a:	4603      	mov	r3, r0
 801604c:	2b00      	cmp	r3, #0
 801604e:	f040 80b1 	bne.w	80161b4 <icmp_input+0x1d8>
        LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: Not echoing to broadcast pings\n"));
        goto icmperr;
#endif /* LWIP_BROADCAST_PING */
      }
      LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: ping\n"));
      if (p->tot_len < sizeof(struct icmp_echo_hdr)) {
 8016052:	687b      	ldr	r3, [r7, #4]
 8016054:	891b      	ldrh	r3, [r3, #8]
 8016056:	2b07      	cmp	r3, #7
 8016058:	f240 80a5 	bls.w	80161a6 <icmp_input+0x1ca>
          return;
        }
      }
#endif
#if LWIP_ICMP_ECHO_CHECK_INPUT_PBUF_LEN
      if (pbuf_add_header(p, hlen + PBUF_LINK_HLEN + PBUF_LINK_ENCAPSULATION_HLEN)) {
 801605c:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 801605e:	330e      	adds	r3, #14
 8016060:	4619      	mov	r1, r3
 8016062:	6878      	ldr	r0, [r7, #4]
 8016064:	f7f5 fed6 	bl	800be14 <pbuf_add_header>
 8016068:	4603      	mov	r3, r0
 801606a:	2b00      	cmp	r3, #0
 801606c:	d04b      	beq.n	8016106 <icmp_input+0x12a>
        /* p is not big enough to contain link headers
         * allocate a new one and copy p into it
         */
        struct pbuf *r;
        u16_t alloc_len = (u16_t)(p->tot_len + hlen);
 801606e:	687b      	ldr	r3, [r7, #4]
 8016070:	891a      	ldrh	r2, [r3, #8]
 8016072:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8016074:	4413      	add	r3, r2
 8016076:	837b      	strh	r3, [r7, #26]
        if (alloc_len < p->tot_len) {
 8016078:	687b      	ldr	r3, [r7, #4]
 801607a:	891b      	ldrh	r3, [r3, #8]
 801607c:	8b7a      	ldrh	r2, [r7, #26]
 801607e:	429a      	cmp	r2, r3
 8016080:	f0c0 809a 	bcc.w	80161b8 <icmp_input+0x1dc>
          LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: allocating new pbuf failed (tot_len overflow)\n"));
          goto icmperr;
        }
        /* allocate new packet buffer with space for link headers */
        r = pbuf_alloc(PBUF_LINK, alloc_len, PBUF_RAM);
 8016084:	8b7b      	ldrh	r3, [r7, #26]
 8016086:	f44f 7220 	mov.w	r2, #640	; 0x280
 801608a:	4619      	mov	r1, r3
 801608c:	200e      	movs	r0, #14
 801608e:	f7f5 fc73 	bl	800b978 <pbuf_alloc>
 8016092:	6178      	str	r0, [r7, #20]
        if (r == NULL) {
 8016094:	697b      	ldr	r3, [r7, #20]
 8016096:	2b00      	cmp	r3, #0
 8016098:	f000 8090 	beq.w	80161bc <icmp_input+0x1e0>
          LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: allocating new pbuf failed\n"));
          goto icmperr;
        }
        if (r->len < hlen + sizeof(struct icmp_echo_hdr)) {
 801609c:	697b      	ldr	r3, [r7, #20]
 801609e:	895b      	ldrh	r3, [r3, #10]
 80160a0:	461a      	mov	r2, r3
 80160a2:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 80160a4:	3308      	adds	r3, #8
 80160a6:	429a      	cmp	r2, r3
 80160a8:	d203      	bcs.n	80160b2 <icmp_input+0xd6>
          LWIP_DEBUGF(ICMP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("first pbuf cannot hold the ICMP header"));
          pbuf_free(r);
 80160aa:	6978      	ldr	r0, [r7, #20]
 80160ac:	f7f5 ff48 	bl	800bf40 <pbuf_free>
          goto icmperr;
 80160b0:	e085      	b.n	80161be <icmp_input+0x1e2>
        }
        /* copy the ip header */
        MEMCPY(r->payload, iphdr_in, hlen);
 80160b2:	697b      	ldr	r3, [r7, #20]
 80160b4:	685b      	ldr	r3, [r3, #4]
 80160b6:	8c7a      	ldrh	r2, [r7, #34]	; 0x22
 80160b8:	6a79      	ldr	r1, [r7, #36]	; 0x24
 80160ba:	4618      	mov	r0, r3
 80160bc:	f002 fad7 	bl	801866e <memcpy>
        /* switch r->payload back to icmp header (cannot fail) */
        if (pbuf_remove_header(r, hlen)) {
 80160c0:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 80160c2:	4619      	mov	r1, r3
 80160c4:	6978      	ldr	r0, [r7, #20]
 80160c6:	f7f5 feb5 	bl	800be34 <pbuf_remove_header>
 80160ca:	4603      	mov	r3, r0
 80160cc:	2b00      	cmp	r3, #0
 80160ce:	d009      	beq.n	80160e4 <icmp_input+0x108>
          LWIP_ASSERT("icmp_input: moving r->payload to icmp header failed\n", 0);
 80160d0:	4b40      	ldr	r3, [pc, #256]	; (80161d4 <icmp_input+0x1f8>)
 80160d2:	22b6      	movs	r2, #182	; 0xb6
 80160d4:	4940      	ldr	r1, [pc, #256]	; (80161d8 <icmp_input+0x1fc>)
 80160d6:	4841      	ldr	r0, [pc, #260]	; (80161dc <icmp_input+0x200>)
 80160d8:	f002 f9d6 	bl	8018488 <iprintf>
          pbuf_free(r);
 80160dc:	6978      	ldr	r0, [r7, #20]
 80160de:	f7f5 ff2f 	bl	800bf40 <pbuf_free>
          goto icmperr;
 80160e2:	e06c      	b.n	80161be <icmp_input+0x1e2>
        }
        /* copy the rest of the packet without ip header */
        if (pbuf_copy(r, p) != ERR_OK) {
 80160e4:	6879      	ldr	r1, [r7, #4]
 80160e6:	6978      	ldr	r0, [r7, #20]
 80160e8:	f7f6 f852 	bl	800c190 <pbuf_copy>
 80160ec:	4603      	mov	r3, r0
 80160ee:	2b00      	cmp	r3, #0
 80160f0:	d003      	beq.n	80160fa <icmp_input+0x11e>
          LWIP_DEBUGF(ICMP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("icmp_input: copying to new pbuf failed"));
          pbuf_free(r);
 80160f2:	6978      	ldr	r0, [r7, #20]
 80160f4:	f7f5 ff24 	bl	800bf40 <pbuf_free>
          goto icmperr;
 80160f8:	e061      	b.n	80161be <icmp_input+0x1e2>
        }
        /* free the original p */
        pbuf_free(p);
 80160fa:	6878      	ldr	r0, [r7, #4]
 80160fc:	f7f5 ff20 	bl	800bf40 <pbuf_free>
        /* we now have an identical copy of p that has room for link headers */
        p = r;
 8016100:	697b      	ldr	r3, [r7, #20]
 8016102:	607b      	str	r3, [r7, #4]
 8016104:	e00f      	b.n	8016126 <icmp_input+0x14a>
      } else {
        /* restore p->payload to point to icmp header (cannot fail) */
        if (pbuf_remove_header(p, hlen + PBUF_LINK_HLEN + PBUF_LINK_ENCAPSULATION_HLEN)) {
 8016106:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8016108:	330e      	adds	r3, #14
 801610a:	4619      	mov	r1, r3
 801610c:	6878      	ldr	r0, [r7, #4]
 801610e:	f7f5 fe91 	bl	800be34 <pbuf_remove_header>
 8016112:	4603      	mov	r3, r0
 8016114:	2b00      	cmp	r3, #0
 8016116:	d006      	beq.n	8016126 <icmp_input+0x14a>
          LWIP_ASSERT("icmp_input: restoring original p->payload failed\n", 0);
 8016118:	4b2e      	ldr	r3, [pc, #184]	; (80161d4 <icmp_input+0x1f8>)
 801611a:	22c7      	movs	r2, #199	; 0xc7
 801611c:	4930      	ldr	r1, [pc, #192]	; (80161e0 <icmp_input+0x204>)
 801611e:	482f      	ldr	r0, [pc, #188]	; (80161dc <icmp_input+0x200>)
 8016120:	f002 f9b2 	bl	8018488 <iprintf>
          goto icmperr;
 8016124:	e04b      	b.n	80161be <icmp_input+0x1e2>
      }
#endif /* LWIP_ICMP_ECHO_CHECK_INPUT_PBUF_LEN */
      /* At this point, all checks are OK. */
      /* We generate an answer by switching the dest and src ip addresses,
       * setting the icmp type to ECHO_RESPONSE and updating the checksum. */
      iecho = (struct icmp_echo_hdr *)p->payload;
 8016126:	687b      	ldr	r3, [r7, #4]
 8016128:	685b      	ldr	r3, [r3, #4]
 801612a:	613b      	str	r3, [r7, #16]
      if (pbuf_add_header(p, hlen)) {
 801612c:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 801612e:	4619      	mov	r1, r3
 8016130:	6878      	ldr	r0, [r7, #4]
 8016132:	f7f5 fe6f 	bl	800be14 <pbuf_add_header>
 8016136:	4603      	mov	r3, r0
 8016138:	2b00      	cmp	r3, #0
 801613a:	d12b      	bne.n	8016194 <icmp_input+0x1b8>
        LWIP_DEBUGF(ICMP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("Can't move over header in packet"));
      } else {
        err_t ret;
        struct ip_hdr *iphdr = (struct ip_hdr *)p->payload;
 801613c:	687b      	ldr	r3, [r7, #4]
 801613e:	685b      	ldr	r3, [r3, #4]
 8016140:	60fb      	str	r3, [r7, #12]
        ip4_addr_copy(iphdr->src, *src);
 8016142:	69fb      	ldr	r3, [r7, #28]
 8016144:	681a      	ldr	r2, [r3, #0]
 8016146:	68fb      	ldr	r3, [r7, #12]
 8016148:	60da      	str	r2, [r3, #12]
        ip4_addr_copy(iphdr->dest, *ip4_current_src_addr());
 801614a:	4b20      	ldr	r3, [pc, #128]	; (80161cc <icmp_input+0x1f0>)
 801614c:	691a      	ldr	r2, [r3, #16]
 801614e:	68fb      	ldr	r3, [r7, #12]
 8016150:	611a      	str	r2, [r3, #16]
        ICMPH_TYPE_SET(iecho, ICMP_ER);
 8016152:	693b      	ldr	r3, [r7, #16]
 8016154:	2200      	movs	r2, #0
 8016156:	701a      	strb	r2, [r3, #0]
        else {
          iecho->chksum = 0;
        }
#endif /* LWIP_CHECKSUM_CTRL_PER_NETIF */
#else /* CHECKSUM_GEN_ICMP */
        iecho->chksum = 0;
 8016158:	693b      	ldr	r3, [r7, #16]
 801615a:	2200      	movs	r2, #0
 801615c:	709a      	strb	r2, [r3, #2]
 801615e:	2200      	movs	r2, #0
 8016160:	70da      	strb	r2, [r3, #3]
#endif /* CHECKSUM_GEN_ICMP */

        /* Set the correct TTL and recalculate the header checksum. */
        IPH_TTL_SET(iphdr, ICMP_TTL);
 8016162:	68fb      	ldr	r3, [r7, #12]
 8016164:	22ff      	movs	r2, #255	; 0xff
 8016166:	721a      	strb	r2, [r3, #8]
        IPH_CHKSUM_SET(iphdr, 0);
 8016168:	68fb      	ldr	r3, [r7, #12]
 801616a:	2200      	movs	r2, #0
 801616c:	729a      	strb	r2, [r3, #10]
 801616e:	2200      	movs	r2, #0
 8016170:	72da      	strb	r2, [r3, #11]
        MIB2_STATS_INC(mib2.icmpoutmsgs);
        /* increase number of echo replies attempted to send */
        MIB2_STATS_INC(mib2.icmpoutechoreps);

        /* send an ICMP packet */
        ret = ip4_output_if(p, src, LWIP_IP_HDRINCL,
 8016172:	683b      	ldr	r3, [r7, #0]
 8016174:	9302      	str	r3, [sp, #8]
 8016176:	2301      	movs	r3, #1
 8016178:	9301      	str	r3, [sp, #4]
 801617a:	2300      	movs	r3, #0
 801617c:	9300      	str	r3, [sp, #0]
 801617e:	23ff      	movs	r3, #255	; 0xff
 8016180:	2200      	movs	r2, #0
 8016182:	69f9      	ldr	r1, [r7, #28]
 8016184:	6878      	ldr	r0, [r7, #4]
 8016186:	f000 fa93 	bl	80166b0 <ip4_output_if>
 801618a:	4603      	mov	r3, r0
 801618c:	72fb      	strb	r3, [r7, #11]
                            ICMP_TTL, 0, IP_PROTO_ICMP, inp);
        if (ret != ERR_OK) {
          LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: ip_output_if returned an error: %s\n", lwip_strerr(ret)));
        }
      }
      break;
 801618e:	e001      	b.n	8016194 <icmp_input+0x1b8>
      break;
 8016190:	bf00      	nop
 8016192:	e000      	b.n	8016196 <icmp_input+0x1ba>
      break;
 8016194:	bf00      	nop
      LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: ICMP type %"S16_F" code %"S16_F" not supported.\n",
                               (s16_t)type, (s16_t)code));
      ICMP_STATS_INC(icmp.proterr);
      ICMP_STATS_INC(icmp.drop);
  }
  pbuf_free(p);
 8016196:	6878      	ldr	r0, [r7, #4]
 8016198:	f7f5 fed2 	bl	800bf40 <pbuf_free>
  return;
 801619c:	e013      	b.n	80161c6 <icmp_input+0x1ea>
    goto lenerr;
 801619e:	bf00      	nop
 80161a0:	e002      	b.n	80161a8 <icmp_input+0x1cc>
    goto lenerr;
 80161a2:	bf00      	nop
 80161a4:	e000      	b.n	80161a8 <icmp_input+0x1cc>
        goto lenerr;
 80161a6:	bf00      	nop
lenerr:
  pbuf_free(p);
 80161a8:	6878      	ldr	r0, [r7, #4]
 80161aa:	f7f5 fec9 	bl	800bf40 <pbuf_free>
  ICMP_STATS_INC(icmp.lenerr);
  MIB2_STATS_INC(mib2.icmpinerrors);
  return;
 80161ae:	e00a      	b.n	80161c6 <icmp_input+0x1ea>
        goto icmperr;
 80161b0:	bf00      	nop
 80161b2:	e004      	b.n	80161be <icmp_input+0x1e2>
        goto icmperr;
 80161b4:	bf00      	nop
 80161b6:	e002      	b.n	80161be <icmp_input+0x1e2>
          goto icmperr;
 80161b8:	bf00      	nop
 80161ba:	e000      	b.n	80161be <icmp_input+0x1e2>
          goto icmperr;
 80161bc:	bf00      	nop
#if LWIP_ICMP_ECHO_CHECK_INPUT_PBUF_LEN || !LWIP_MULTICAST_PING || !LWIP_BROADCAST_PING
icmperr:
  pbuf_free(p);
 80161be:	6878      	ldr	r0, [r7, #4]
 80161c0:	f7f5 febe 	bl	800bf40 <pbuf_free>
  ICMP_STATS_INC(icmp.err);
  MIB2_STATS_INC(mib2.icmpinerrors);
  return;
 80161c4:	bf00      	nop
#endif /* LWIP_ICMP_ECHO_CHECK_INPUT_PBUF_LEN || !LWIP_MULTICAST_PING || !LWIP_BROADCAST_PING */
}
 80161c6:	3728      	adds	r7, #40	; 0x28
 80161c8:	46bd      	mov	sp, r7
 80161ca:	bd80      	pop	{r7, pc}
 80161cc:	2000537c 	.word	0x2000537c
 80161d0:	20005390 	.word	0x20005390
 80161d4:	0801bd1c 	.word	0x0801bd1c
 80161d8:	0801bd54 	.word	0x0801bd54
 80161dc:	0801bd8c 	.word	0x0801bd8c
 80161e0:	0801bdb4 	.word	0x0801bdb4

080161e4 <icmp_dest_unreach>:
 *          p->payload pointing to the IP header
 * @param t type of the 'unreachable' packet
 */
void
icmp_dest_unreach(struct pbuf *p, enum icmp_dur_type t)
{
 80161e4:	b580      	push	{r7, lr}
 80161e6:	b082      	sub	sp, #8
 80161e8:	af00      	add	r7, sp, #0
 80161ea:	6078      	str	r0, [r7, #4]
 80161ec:	460b      	mov	r3, r1
 80161ee:	70fb      	strb	r3, [r7, #3]
  MIB2_STATS_INC(mib2.icmpoutdestunreachs);
  icmp_send_response(p, ICMP_DUR, t);
 80161f0:	78fb      	ldrb	r3, [r7, #3]
 80161f2:	461a      	mov	r2, r3
 80161f4:	2103      	movs	r1, #3
 80161f6:	6878      	ldr	r0, [r7, #4]
 80161f8:	f000 f814 	bl	8016224 <icmp_send_response>
}
 80161fc:	bf00      	nop
 80161fe:	3708      	adds	r7, #8
 8016200:	46bd      	mov	sp, r7
 8016202:	bd80      	pop	{r7, pc}

08016204 <icmp_time_exceeded>:
 *          p->payload pointing to the IP header
 * @param t type of the 'time exceeded' packet
 */
void
icmp_time_exceeded(struct pbuf *p, enum icmp_te_type t)
{
 8016204:	b580      	push	{r7, lr}
 8016206:	b082      	sub	sp, #8
 8016208:	af00      	add	r7, sp, #0
 801620a:	6078      	str	r0, [r7, #4]
 801620c:	460b      	mov	r3, r1
 801620e:	70fb      	strb	r3, [r7, #3]
  MIB2_STATS_INC(mib2.icmpouttimeexcds);
  icmp_send_response(p, ICMP_TE, t);
 8016210:	78fb      	ldrb	r3, [r7, #3]
 8016212:	461a      	mov	r2, r3
 8016214:	210b      	movs	r1, #11
 8016216:	6878      	ldr	r0, [r7, #4]
 8016218:	f000 f804 	bl	8016224 <icmp_send_response>
}
 801621c:	bf00      	nop
 801621e:	3708      	adds	r7, #8
 8016220:	46bd      	mov	sp, r7
 8016222:	bd80      	pop	{r7, pc}

08016224 <icmp_send_response>:
 * @param type Type of the ICMP header
 * @param code Code of the ICMP header
 */
static void
icmp_send_response(struct pbuf *p, u8_t type, u8_t code)
{
 8016224:	b580      	push	{r7, lr}
 8016226:	b08c      	sub	sp, #48	; 0x30
 8016228:	af04      	add	r7, sp, #16
 801622a:	6078      	str	r0, [r7, #4]
 801622c:	460b      	mov	r3, r1
 801622e:	70fb      	strb	r3, [r7, #3]
 8016230:	4613      	mov	r3, r2
 8016232:	70bb      	strb	r3, [r7, #2]

  /* increase number of messages attempted to send */
  MIB2_STATS_INC(mib2.icmpoutmsgs);

  /* ICMP header + IP header + 8 bytes of data */
  q = pbuf_alloc(PBUF_IP, sizeof(struct icmp_echo_hdr) + IP_HLEN + ICMP_DEST_UNREACH_DATASIZE,
 8016234:	f44f 7220 	mov.w	r2, #640	; 0x280
 8016238:	2124      	movs	r1, #36	; 0x24
 801623a:	2022      	movs	r0, #34	; 0x22
 801623c:	f7f5 fb9c 	bl	800b978 <pbuf_alloc>
 8016240:	61f8      	str	r0, [r7, #28]
                 PBUF_RAM);
  if (q == NULL) {
 8016242:	69fb      	ldr	r3, [r7, #28]
 8016244:	2b00      	cmp	r3, #0
 8016246:	d04c      	beq.n	80162e2 <icmp_send_response+0xbe>
    LWIP_DEBUGF(ICMP_DEBUG, ("icmp_time_exceeded: failed to allocate pbuf for ICMP packet.\n"));
    MIB2_STATS_INC(mib2.icmpouterrors);
    return;
  }
  LWIP_ASSERT("check that first pbuf can hold icmp message",
 8016248:	69fb      	ldr	r3, [r7, #28]
 801624a:	895b      	ldrh	r3, [r3, #10]
 801624c:	2b23      	cmp	r3, #35	; 0x23
 801624e:	d806      	bhi.n	801625e <icmp_send_response+0x3a>
 8016250:	4b26      	ldr	r3, [pc, #152]	; (80162ec <icmp_send_response+0xc8>)
 8016252:	f44f 72b4 	mov.w	r2, #360	; 0x168
 8016256:	4926      	ldr	r1, [pc, #152]	; (80162f0 <icmp_send_response+0xcc>)
 8016258:	4826      	ldr	r0, [pc, #152]	; (80162f4 <icmp_send_response+0xd0>)
 801625a:	f002 f915 	bl	8018488 <iprintf>
              (q->len >= (sizeof(struct icmp_echo_hdr) + IP_HLEN + ICMP_DEST_UNREACH_DATASIZE)));

  iphdr = (struct ip_hdr *)p->payload;
 801625e:	687b      	ldr	r3, [r7, #4]
 8016260:	685b      	ldr	r3, [r3, #4]
 8016262:	61bb      	str	r3, [r7, #24]
  ip4_addr_debug_print_val(ICMP_DEBUG, iphdr->src);
  LWIP_DEBUGF(ICMP_DEBUG, (" to "));
  ip4_addr_debug_print_val(ICMP_DEBUG, iphdr->dest);
  LWIP_DEBUGF(ICMP_DEBUG, ("\n"));

  icmphdr = (struct icmp_echo_hdr *)q->payload;
 8016264:	69fb      	ldr	r3, [r7, #28]
 8016266:	685b      	ldr	r3, [r3, #4]
 8016268:	617b      	str	r3, [r7, #20]
  icmphdr->type = type;
 801626a:	697b      	ldr	r3, [r7, #20]
 801626c:	78fa      	ldrb	r2, [r7, #3]
 801626e:	701a      	strb	r2, [r3, #0]
  icmphdr->code = code;
 8016270:	697b      	ldr	r3, [r7, #20]
 8016272:	78ba      	ldrb	r2, [r7, #2]
 8016274:	705a      	strb	r2, [r3, #1]
  icmphdr->id = 0;
 8016276:	697b      	ldr	r3, [r7, #20]
 8016278:	2200      	movs	r2, #0
 801627a:	711a      	strb	r2, [r3, #4]
 801627c:	2200      	movs	r2, #0
 801627e:	715a      	strb	r2, [r3, #5]
  icmphdr->seqno = 0;
 8016280:	697b      	ldr	r3, [r7, #20]
 8016282:	2200      	movs	r2, #0
 8016284:	719a      	strb	r2, [r3, #6]
 8016286:	2200      	movs	r2, #0
 8016288:	71da      	strb	r2, [r3, #7]

  /* copy fields from original packet */
  SMEMCPY((u8_t *)q->payload + sizeof(struct icmp_echo_hdr), (u8_t *)p->payload,
 801628a:	69fb      	ldr	r3, [r7, #28]
 801628c:	685b      	ldr	r3, [r3, #4]
 801628e:	f103 0008 	add.w	r0, r3, #8
 8016292:	687b      	ldr	r3, [r7, #4]
 8016294:	685b      	ldr	r3, [r3, #4]
 8016296:	221c      	movs	r2, #28
 8016298:	4619      	mov	r1, r3
 801629a:	f002 f9e8 	bl	801866e <memcpy>
          IP_HLEN + ICMP_DEST_UNREACH_DATASIZE);

  ip4_addr_copy(iphdr_src, iphdr->src);
 801629e:	69bb      	ldr	r3, [r7, #24]
 80162a0:	68db      	ldr	r3, [r3, #12]
 80162a2:	60fb      	str	r3, [r7, #12]
    ip4_addr_t iphdr_dst;
    ip4_addr_copy(iphdr_dst, iphdr->dest);
    netif = ip4_route_src(&iphdr_dst, &iphdr_src);
  }
#else
  netif = ip4_route(&iphdr_src);
 80162a4:	f107 030c 	add.w	r3, r7, #12
 80162a8:	4618      	mov	r0, r3
 80162aa:	f000 f825 	bl	80162f8 <ip4_route>
 80162ae:	6138      	str	r0, [r7, #16]
#endif
  if (netif != NULL) {
 80162b0:	693b      	ldr	r3, [r7, #16]
 80162b2:	2b00      	cmp	r3, #0
 80162b4:	d011      	beq.n	80162da <icmp_send_response+0xb6>
    /* calculate checksum */
    icmphdr->chksum = 0;
 80162b6:	697b      	ldr	r3, [r7, #20]
 80162b8:	2200      	movs	r2, #0
 80162ba:	709a      	strb	r2, [r3, #2]
 80162bc:	2200      	movs	r2, #0
 80162be:	70da      	strb	r2, [r3, #3]
    IF__NETIF_CHECKSUM_ENABLED(netif, NETIF_CHECKSUM_GEN_ICMP) {
      icmphdr->chksum = inet_chksum(icmphdr, q->len);
    }
#endif
    ICMP_STATS_INC(icmp.xmit);
    ip4_output_if(q, NULL, &iphdr_src, ICMP_TTL, 0, IP_PROTO_ICMP, netif);
 80162c0:	f107 020c 	add.w	r2, r7, #12
 80162c4:	693b      	ldr	r3, [r7, #16]
 80162c6:	9302      	str	r3, [sp, #8]
 80162c8:	2301      	movs	r3, #1
 80162ca:	9301      	str	r3, [sp, #4]
 80162cc:	2300      	movs	r3, #0
 80162ce:	9300      	str	r3, [sp, #0]
 80162d0:	23ff      	movs	r3, #255	; 0xff
 80162d2:	2100      	movs	r1, #0
 80162d4:	69f8      	ldr	r0, [r7, #28]
 80162d6:	f000 f9eb 	bl	80166b0 <ip4_output_if>
  }
  pbuf_free(q);
 80162da:	69f8      	ldr	r0, [r7, #28]
 80162dc:	f7f5 fe30 	bl	800bf40 <pbuf_free>
 80162e0:	e000      	b.n	80162e4 <icmp_send_response+0xc0>
    return;
 80162e2:	bf00      	nop
}
 80162e4:	3720      	adds	r7, #32
 80162e6:	46bd      	mov	sp, r7
 80162e8:	bd80      	pop	{r7, pc}
 80162ea:	bf00      	nop
 80162ec:	0801bd1c 	.word	0x0801bd1c
 80162f0:	0801bde8 	.word	0x0801bde8
 80162f4:	0801bd8c 	.word	0x0801bd8c

080162f8 <ip4_route>:
 * @param dest the destination IP address for which to find the route
 * @return the netif on which to send to reach dest
 */
struct netif *
ip4_route(const ip4_addr_t *dest)
{
 80162f8:	b480      	push	{r7}
 80162fa:	b085      	sub	sp, #20
 80162fc:	af00      	add	r7, sp, #0
 80162fe:	6078      	str	r0, [r7, #4]

  /* bug #54569: in case LWIP_SINGLE_NETIF=1 and LWIP_DEBUGF() disabled, the following loop is optimized away */
  LWIP_UNUSED_ARG(dest);

  /* iterate through netifs */
  NETIF_FOREACH(netif) {
 8016300:	4b33      	ldr	r3, [pc, #204]	; (80163d0 <ip4_route+0xd8>)
 8016302:	681b      	ldr	r3, [r3, #0]
 8016304:	60fb      	str	r3, [r7, #12]
 8016306:	e036      	b.n	8016376 <ip4_route+0x7e>
    /* is the netif up, does it have a link and a valid address? */
    if (netif_is_up(netif) && netif_is_link_up(netif) && !ip4_addr_isany_val(*netif_ip4_addr(netif))) {
 8016308:	68fb      	ldr	r3, [r7, #12]
 801630a:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 801630e:	f003 0301 	and.w	r3, r3, #1
 8016312:	b2db      	uxtb	r3, r3
 8016314:	2b00      	cmp	r3, #0
 8016316:	d02b      	beq.n	8016370 <ip4_route+0x78>
 8016318:	68fb      	ldr	r3, [r7, #12]
 801631a:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 801631e:	089b      	lsrs	r3, r3, #2
 8016320:	f003 0301 	and.w	r3, r3, #1
 8016324:	b2db      	uxtb	r3, r3
 8016326:	2b00      	cmp	r3, #0
 8016328:	d022      	beq.n	8016370 <ip4_route+0x78>
 801632a:	68fb      	ldr	r3, [r7, #12]
 801632c:	3304      	adds	r3, #4
 801632e:	681b      	ldr	r3, [r3, #0]
 8016330:	2b00      	cmp	r3, #0
 8016332:	d01d      	beq.n	8016370 <ip4_route+0x78>
      /* network mask matches? */
      if (ip4_addr_netcmp(dest, netif_ip4_addr(netif), netif_ip4_netmask(netif))) {
 8016334:	687b      	ldr	r3, [r7, #4]
 8016336:	681a      	ldr	r2, [r3, #0]
 8016338:	68fb      	ldr	r3, [r7, #12]
 801633a:	3304      	adds	r3, #4
 801633c:	681b      	ldr	r3, [r3, #0]
 801633e:	405a      	eors	r2, r3
 8016340:	68fb      	ldr	r3, [r7, #12]
 8016342:	3308      	adds	r3, #8
 8016344:	681b      	ldr	r3, [r3, #0]
 8016346:	4013      	ands	r3, r2
 8016348:	2b00      	cmp	r3, #0
 801634a:	d101      	bne.n	8016350 <ip4_route+0x58>
        /* return netif on which to forward IP packet */
        return netif;
 801634c:	68fb      	ldr	r3, [r7, #12]
 801634e:	e038      	b.n	80163c2 <ip4_route+0xca>
      }
      /* gateway matches on a non broadcast interface? (i.e. peer in a point to point interface) */
      if (((netif->flags & NETIF_FLAG_BROADCAST) == 0) && ip4_addr_cmp(dest, netif_ip4_gw(netif))) {
 8016350:	68fb      	ldr	r3, [r7, #12]
 8016352:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 8016356:	f003 0302 	and.w	r3, r3, #2
 801635a:	2b00      	cmp	r3, #0
 801635c:	d108      	bne.n	8016370 <ip4_route+0x78>
 801635e:	687b      	ldr	r3, [r7, #4]
 8016360:	681a      	ldr	r2, [r3, #0]
 8016362:	68fb      	ldr	r3, [r7, #12]
 8016364:	330c      	adds	r3, #12
 8016366:	681b      	ldr	r3, [r3, #0]
 8016368:	429a      	cmp	r2, r3
 801636a:	d101      	bne.n	8016370 <ip4_route+0x78>
        /* return netif on which to forward IP packet */
        return netif;
 801636c:	68fb      	ldr	r3, [r7, #12]
 801636e:	e028      	b.n	80163c2 <ip4_route+0xca>
  NETIF_FOREACH(netif) {
 8016370:	68fb      	ldr	r3, [r7, #12]
 8016372:	681b      	ldr	r3, [r3, #0]
 8016374:	60fb      	str	r3, [r7, #12]
 8016376:	68fb      	ldr	r3, [r7, #12]
 8016378:	2b00      	cmp	r3, #0
 801637a:	d1c5      	bne.n	8016308 <ip4_route+0x10>
    return netif;
  }
#endif
#endif /* !LWIP_SINGLE_NETIF */

  if ((netif_default == NULL) || !netif_is_up(netif_default) || !netif_is_link_up(netif_default) ||
 801637c:	4b15      	ldr	r3, [pc, #84]	; (80163d4 <ip4_route+0xdc>)
 801637e:	681b      	ldr	r3, [r3, #0]
 8016380:	2b00      	cmp	r3, #0
 8016382:	d01a      	beq.n	80163ba <ip4_route+0xc2>
 8016384:	4b13      	ldr	r3, [pc, #76]	; (80163d4 <ip4_route+0xdc>)
 8016386:	681b      	ldr	r3, [r3, #0]
 8016388:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 801638c:	f003 0301 	and.w	r3, r3, #1
 8016390:	2b00      	cmp	r3, #0
 8016392:	d012      	beq.n	80163ba <ip4_route+0xc2>
 8016394:	4b0f      	ldr	r3, [pc, #60]	; (80163d4 <ip4_route+0xdc>)
 8016396:	681b      	ldr	r3, [r3, #0]
 8016398:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 801639c:	f003 0304 	and.w	r3, r3, #4
 80163a0:	2b00      	cmp	r3, #0
 80163a2:	d00a      	beq.n	80163ba <ip4_route+0xc2>
      ip4_addr_isany_val(*netif_ip4_addr(netif_default)) || ip4_addr_isloopback(dest)) {
 80163a4:	4b0b      	ldr	r3, [pc, #44]	; (80163d4 <ip4_route+0xdc>)
 80163a6:	681b      	ldr	r3, [r3, #0]
 80163a8:	3304      	adds	r3, #4
 80163aa:	681b      	ldr	r3, [r3, #0]
  if ((netif_default == NULL) || !netif_is_up(netif_default) || !netif_is_link_up(netif_default) ||
 80163ac:	2b00      	cmp	r3, #0
 80163ae:	d004      	beq.n	80163ba <ip4_route+0xc2>
      ip4_addr_isany_val(*netif_ip4_addr(netif_default)) || ip4_addr_isloopback(dest)) {
 80163b0:	687b      	ldr	r3, [r7, #4]
 80163b2:	681b      	ldr	r3, [r3, #0]
 80163b4:	b2db      	uxtb	r3, r3
 80163b6:	2b7f      	cmp	r3, #127	; 0x7f
 80163b8:	d101      	bne.n	80163be <ip4_route+0xc6>
       If this is not good enough for you, use LWIP_HOOK_IP4_ROUTE() */
    LWIP_DEBUGF(IP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("ip4_route: No route to %"U16_F".%"U16_F".%"U16_F".%"U16_F"\n",
                ip4_addr1_16(dest), ip4_addr2_16(dest), ip4_addr3_16(dest), ip4_addr4_16(dest)));
    IP_STATS_INC(ip.rterr);
    MIB2_STATS_INC(mib2.ipoutnoroutes);
    return NULL;
 80163ba:	2300      	movs	r3, #0
 80163bc:	e001      	b.n	80163c2 <ip4_route+0xca>
  }

  return netif_default;
 80163be:	4b05      	ldr	r3, [pc, #20]	; (80163d4 <ip4_route+0xdc>)
 80163c0:	681b      	ldr	r3, [r3, #0]
}
 80163c2:	4618      	mov	r0, r3
 80163c4:	3714      	adds	r7, #20
 80163c6:	46bd      	mov	sp, r7
 80163c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80163cc:	4770      	bx	lr
 80163ce:	bf00      	nop
 80163d0:	20008910 	.word	0x20008910
 80163d4:	20008914 	.word	0x20008914

080163d8 <ip4_input_accept>:
#endif /* IP_FORWARD */

/** Return true if the current input packet should be accepted on this netif */
static int
ip4_input_accept(struct netif *netif)
{
 80163d8:	b580      	push	{r7, lr}
 80163da:	b082      	sub	sp, #8
 80163dc:	af00      	add	r7, sp, #0
 80163de:	6078      	str	r0, [r7, #4]
                         ip4_addr_get_u32(ip4_current_dest_addr()) & ip4_addr_get_u32(netif_ip4_netmask(netif)),
                         ip4_addr_get_u32(netif_ip4_addr(netif)) & ip4_addr_get_u32(netif_ip4_netmask(netif)),
                         ip4_addr_get_u32(ip4_current_dest_addr()) & ~ip4_addr_get_u32(netif_ip4_netmask(netif))));

  /* interface is up and configured? */
  if ((netif_is_up(netif)) && (!ip4_addr_isany_val(*netif_ip4_addr(netif)))) {
 80163e0:	687b      	ldr	r3, [r7, #4]
 80163e2:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 80163e6:	f003 0301 	and.w	r3, r3, #1
 80163ea:	b2db      	uxtb	r3, r3
 80163ec:	2b00      	cmp	r3, #0
 80163ee:	d016      	beq.n	801641e <ip4_input_accept+0x46>
 80163f0:	687b      	ldr	r3, [r7, #4]
 80163f2:	3304      	adds	r3, #4
 80163f4:	681b      	ldr	r3, [r3, #0]
 80163f6:	2b00      	cmp	r3, #0
 80163f8:	d011      	beq.n	801641e <ip4_input_accept+0x46>
    /* unicast to this interface address? */
    if (ip4_addr_cmp(ip4_current_dest_addr(), netif_ip4_addr(netif)) ||
 80163fa:	4b0b      	ldr	r3, [pc, #44]	; (8016428 <ip4_input_accept+0x50>)
 80163fc:	695a      	ldr	r2, [r3, #20]
 80163fe:	687b      	ldr	r3, [r7, #4]
 8016400:	3304      	adds	r3, #4
 8016402:	681b      	ldr	r3, [r3, #0]
 8016404:	429a      	cmp	r2, r3
 8016406:	d008      	beq.n	801641a <ip4_input_accept+0x42>
        /* or broadcast on this interface network address? */
        ip4_addr_isbroadcast(ip4_current_dest_addr(), netif)
 8016408:	4b07      	ldr	r3, [pc, #28]	; (8016428 <ip4_input_accept+0x50>)
 801640a:	695b      	ldr	r3, [r3, #20]
 801640c:	6879      	ldr	r1, [r7, #4]
 801640e:	4618      	mov	r0, r3
 8016410:	f000 fa26 	bl	8016860 <ip4_addr_isbroadcast_u32>
 8016414:	4603      	mov	r3, r0
    if (ip4_addr_cmp(ip4_current_dest_addr(), netif_ip4_addr(netif)) ||
 8016416:	2b00      	cmp	r3, #0
 8016418:	d001      	beq.n	801641e <ip4_input_accept+0x46>
#endif /* LWIP_NETIF_LOOPBACK && !LWIP_HAVE_LOOPIF */
       ) {
      LWIP_DEBUGF(IP_DEBUG, ("ip4_input: packet accepted on interface %c%c\n",
                             netif->name[0], netif->name[1]));
      /* accept on this netif */
      return 1;
 801641a:	2301      	movs	r3, #1
 801641c:	e000      	b.n	8016420 <ip4_input_accept+0x48>
      /* accept on this netif */
      return 1;
    }
#endif /* LWIP_AUTOIP */
  }
  return 0;
 801641e:	2300      	movs	r3, #0
}
 8016420:	4618      	mov	r0, r3
 8016422:	3708      	adds	r7, #8
 8016424:	46bd      	mov	sp, r7
 8016426:	bd80      	pop	{r7, pc}
 8016428:	2000537c 	.word	0x2000537c

0801642c <ip4_input>:
 * @return ERR_OK if the packet was processed (could return ERR_* if it wasn't
 *         processed, but currently always returns ERR_OK)
 */
err_t
ip4_input(struct pbuf *p, struct netif *inp)
{
 801642c:	b580      	push	{r7, lr}
 801642e:	b088      	sub	sp, #32
 8016430:	af00      	add	r7, sp, #0
 8016432:	6078      	str	r0, [r7, #4]
 8016434:	6039      	str	r1, [r7, #0]
  const struct ip_hdr *iphdr;
  struct netif *netif;
  u16_t iphdr_hlen;
  u16_t iphdr_len;
#if IP_ACCEPT_LINK_LAYER_ADDRESSING || LWIP_IGMP
  int check_ip_src = 1;
 8016436:	2301      	movs	r3, #1
 8016438:	617b      	str	r3, [r7, #20]

  IP_STATS_INC(ip.recv);
  MIB2_STATS_INC(mib2.ipinreceives);

  /* identify the IP header */
  iphdr = (struct ip_hdr *)p->payload;
 801643a:	687b      	ldr	r3, [r7, #4]
 801643c:	685b      	ldr	r3, [r3, #4]
 801643e:	61fb      	str	r3, [r7, #28]
  if (IPH_V(iphdr) != 4) {
 8016440:	69fb      	ldr	r3, [r7, #28]
 8016442:	781b      	ldrb	r3, [r3, #0]
 8016444:	091b      	lsrs	r3, r3, #4
 8016446:	b2db      	uxtb	r3, r3
 8016448:	2b04      	cmp	r3, #4
 801644a:	d004      	beq.n	8016456 <ip4_input+0x2a>
    LWIP_DEBUGF(IP_DEBUG | LWIP_DBG_LEVEL_WARNING, ("IP packet dropped due to bad version number %"U16_F"\n", (u16_t)IPH_V(iphdr)));
    ip4_debug_print(p);
    pbuf_free(p);
 801644c:	6878      	ldr	r0, [r7, #4]
 801644e:	f7f5 fd77 	bl	800bf40 <pbuf_free>
    IP_STATS_INC(ip.err);
    IP_STATS_INC(ip.drop);
    MIB2_STATS_INC(mib2.ipinhdrerrors);
    return ERR_OK;
 8016452:	2300      	movs	r3, #0
 8016454:	e123      	b.n	801669e <ip4_input+0x272>
    return ERR_OK;
  }
#endif

  /* obtain IP header length in bytes */
  iphdr_hlen = IPH_HL_BYTES(iphdr);
 8016456:	69fb      	ldr	r3, [r7, #28]
 8016458:	781b      	ldrb	r3, [r3, #0]
 801645a:	f003 030f 	and.w	r3, r3, #15
 801645e:	b2db      	uxtb	r3, r3
 8016460:	009b      	lsls	r3, r3, #2
 8016462:	b2db      	uxtb	r3, r3
 8016464:	827b      	strh	r3, [r7, #18]
  /* obtain ip length in bytes */
  iphdr_len = lwip_ntohs(IPH_LEN(iphdr));
 8016466:	69fb      	ldr	r3, [r7, #28]
 8016468:	885b      	ldrh	r3, [r3, #2]
 801646a:	b29b      	uxth	r3, r3
 801646c:	4618      	mov	r0, r3
 801646e:	f7f3 ff0f 	bl	800a290 <lwip_htons>
 8016472:	4603      	mov	r3, r0
 8016474:	823b      	strh	r3, [r7, #16]

  /* Trim pbuf. This is especially required for packets < 60 bytes. */
  if (iphdr_len < p->tot_len) {
 8016476:	687b      	ldr	r3, [r7, #4]
 8016478:	891b      	ldrh	r3, [r3, #8]
 801647a:	8a3a      	ldrh	r2, [r7, #16]
 801647c:	429a      	cmp	r2, r3
 801647e:	d204      	bcs.n	801648a <ip4_input+0x5e>
    pbuf_realloc(p, iphdr_len);
 8016480:	8a3b      	ldrh	r3, [r7, #16]
 8016482:	4619      	mov	r1, r3
 8016484:	6878      	ldr	r0, [r7, #4]
 8016486:	f7f5 fbd5 	bl	800bc34 <pbuf_realloc>
  }

  /* header length exceeds first pbuf length, or ip length exceeds total pbuf length? */
  if ((iphdr_hlen > p->len) || (iphdr_len > p->tot_len) || (iphdr_hlen < IP_HLEN)) {
 801648a:	687b      	ldr	r3, [r7, #4]
 801648c:	895b      	ldrh	r3, [r3, #10]
 801648e:	8a7a      	ldrh	r2, [r7, #18]
 8016490:	429a      	cmp	r2, r3
 8016492:	d807      	bhi.n	80164a4 <ip4_input+0x78>
 8016494:	687b      	ldr	r3, [r7, #4]
 8016496:	891b      	ldrh	r3, [r3, #8]
 8016498:	8a3a      	ldrh	r2, [r7, #16]
 801649a:	429a      	cmp	r2, r3
 801649c:	d802      	bhi.n	80164a4 <ip4_input+0x78>
 801649e:	8a7b      	ldrh	r3, [r7, #18]
 80164a0:	2b13      	cmp	r3, #19
 80164a2:	d804      	bhi.n	80164ae <ip4_input+0x82>
      LWIP_DEBUGF(IP_DEBUG | LWIP_DBG_LEVEL_SERIOUS,
                  ("IP (len %"U16_F") is longer than pbuf (len %"U16_F"), IP packet dropped.\n",
                   iphdr_len, p->tot_len));
    }
    /* free (drop) packet pbufs */
    pbuf_free(p);
 80164a4:	6878      	ldr	r0, [r7, #4]
 80164a6:	f7f5 fd4b 	bl	800bf40 <pbuf_free>
    IP_STATS_INC(ip.lenerr);
    IP_STATS_INC(ip.drop);
    MIB2_STATS_INC(mib2.ipindiscards);
    return ERR_OK;
 80164aa:	2300      	movs	r3, #0
 80164ac:	e0f7      	b.n	801669e <ip4_input+0x272>
    }
  }
#endif

  /* copy IP addresses to aligned ip_addr_t */
  ip_addr_copy_from_ip4(ip_data.current_iphdr_dest, iphdr->dest);
 80164ae:	69fb      	ldr	r3, [r7, #28]
 80164b0:	691b      	ldr	r3, [r3, #16]
 80164b2:	4a7d      	ldr	r2, [pc, #500]	; (80166a8 <ip4_input+0x27c>)
 80164b4:	6153      	str	r3, [r2, #20]
  ip_addr_copy_from_ip4(ip_data.current_iphdr_src, iphdr->src);
 80164b6:	69fb      	ldr	r3, [r7, #28]
 80164b8:	68db      	ldr	r3, [r3, #12]
 80164ba:	4a7b      	ldr	r2, [pc, #492]	; (80166a8 <ip4_input+0x27c>)
 80164bc:	6113      	str	r3, [r2, #16]

  /* match packet against an interface, i.e. is this packet for us? */
  if (ip4_addr_ismulticast(ip4_current_dest_addr())) {
 80164be:	4b7a      	ldr	r3, [pc, #488]	; (80166a8 <ip4_input+0x27c>)
 80164c0:	695b      	ldr	r3, [r3, #20]
 80164c2:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80164c6:	2be0      	cmp	r3, #224	; 0xe0
 80164c8:	d112      	bne.n	80164f0 <ip4_input+0xc4>
      netif = inp;
    } else {
      netif = NULL;
    }
#else /* LWIP_IGMP */
    if ((netif_is_up(inp)) && (!ip4_addr_isany_val(*netif_ip4_addr(inp)))) {
 80164ca:	683b      	ldr	r3, [r7, #0]
 80164cc:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 80164d0:	f003 0301 	and.w	r3, r3, #1
 80164d4:	b2db      	uxtb	r3, r3
 80164d6:	2b00      	cmp	r3, #0
 80164d8:	d007      	beq.n	80164ea <ip4_input+0xbe>
 80164da:	683b      	ldr	r3, [r7, #0]
 80164dc:	3304      	adds	r3, #4
 80164de:	681b      	ldr	r3, [r3, #0]
 80164e0:	2b00      	cmp	r3, #0
 80164e2:	d002      	beq.n	80164ea <ip4_input+0xbe>
      netif = inp;
 80164e4:	683b      	ldr	r3, [r7, #0]
 80164e6:	61bb      	str	r3, [r7, #24]
 80164e8:	e02a      	b.n	8016540 <ip4_input+0x114>
    } else {
      netif = NULL;
 80164ea:	2300      	movs	r3, #0
 80164ec:	61bb      	str	r3, [r7, #24]
 80164ee:	e027      	b.n	8016540 <ip4_input+0x114>
    }
#endif /* LWIP_IGMP */
  } else {
    /* start trying with inp. if that's not acceptable, start walking the
       list of configured netifs. */
    if (ip4_input_accept(inp)) {
 80164f0:	6838      	ldr	r0, [r7, #0]
 80164f2:	f7ff ff71 	bl	80163d8 <ip4_input_accept>
 80164f6:	4603      	mov	r3, r0
 80164f8:	2b00      	cmp	r3, #0
 80164fa:	d002      	beq.n	8016502 <ip4_input+0xd6>
      netif = inp;
 80164fc:	683b      	ldr	r3, [r7, #0]
 80164fe:	61bb      	str	r3, [r7, #24]
 8016500:	e01e      	b.n	8016540 <ip4_input+0x114>
    } else {
      netif = NULL;
 8016502:	2300      	movs	r3, #0
 8016504:	61bb      	str	r3, [r7, #24]
#if !LWIP_NETIF_LOOPBACK || LWIP_HAVE_LOOPIF
      /* Packets sent to the loopback address must not be accepted on an
       * interface that does not have the loopback address assigned to it,
       * unless a non-loopback interface is used for loopback traffic. */
      if (!ip4_addr_isloopback(ip4_current_dest_addr()))
 8016506:	4b68      	ldr	r3, [pc, #416]	; (80166a8 <ip4_input+0x27c>)
 8016508:	695b      	ldr	r3, [r3, #20]
 801650a:	b2db      	uxtb	r3, r3
 801650c:	2b7f      	cmp	r3, #127	; 0x7f
 801650e:	d017      	beq.n	8016540 <ip4_input+0x114>
#endif /* !LWIP_NETIF_LOOPBACK || LWIP_HAVE_LOOPIF */
      {
#if !LWIP_SINGLE_NETIF
        NETIF_FOREACH(netif) {
 8016510:	4b66      	ldr	r3, [pc, #408]	; (80166ac <ip4_input+0x280>)
 8016512:	681b      	ldr	r3, [r3, #0]
 8016514:	61bb      	str	r3, [r7, #24]
 8016516:	e00e      	b.n	8016536 <ip4_input+0x10a>
          if (netif == inp) {
 8016518:	69ba      	ldr	r2, [r7, #24]
 801651a:	683b      	ldr	r3, [r7, #0]
 801651c:	429a      	cmp	r2, r3
 801651e:	d006      	beq.n	801652e <ip4_input+0x102>
            /* we checked that before already */
            continue;
          }
          if (ip4_input_accept(netif)) {
 8016520:	69b8      	ldr	r0, [r7, #24]
 8016522:	f7ff ff59 	bl	80163d8 <ip4_input_accept>
 8016526:	4603      	mov	r3, r0
 8016528:	2b00      	cmp	r3, #0
 801652a:	d108      	bne.n	801653e <ip4_input+0x112>
 801652c:	e000      	b.n	8016530 <ip4_input+0x104>
            continue;
 801652e:	bf00      	nop
        NETIF_FOREACH(netif) {
 8016530:	69bb      	ldr	r3, [r7, #24]
 8016532:	681b      	ldr	r3, [r3, #0]
 8016534:	61bb      	str	r3, [r7, #24]
 8016536:	69bb      	ldr	r3, [r7, #24]
 8016538:	2b00      	cmp	r3, #0
 801653a:	d1ed      	bne.n	8016518 <ip4_input+0xec>
 801653c:	e000      	b.n	8016540 <ip4_input+0x114>
            break;
 801653e:	bf00      	nop
   * If you want to accept private broadcast communication while a netif is down,
   * define LWIP_IP_ACCEPT_UDP_PORT(dst_port), e.g.:
   *
   * #define LWIP_IP_ACCEPT_UDP_PORT(dst_port) ((dst_port) == PP_NTOHS(12345))
   */
  if (netif == NULL) {
 8016540:	69bb      	ldr	r3, [r7, #24]
 8016542:	2b00      	cmp	r3, #0
 8016544:	d111      	bne.n	801656a <ip4_input+0x13e>
    /* remote port is DHCP server? */
    if (IPH_PROTO(iphdr) == IP_PROTO_UDP) {
 8016546:	69fb      	ldr	r3, [r7, #28]
 8016548:	7a5b      	ldrb	r3, [r3, #9]
 801654a:	2b11      	cmp	r3, #17
 801654c:	d10d      	bne.n	801656a <ip4_input+0x13e>
      const struct udp_hdr *udphdr = (const struct udp_hdr *)((const u8_t *)iphdr + iphdr_hlen);
 801654e:	8a7b      	ldrh	r3, [r7, #18]
 8016550:	69fa      	ldr	r2, [r7, #28]
 8016552:	4413      	add	r3, r2
 8016554:	60fb      	str	r3, [r7, #12]
      LWIP_DEBUGF(IP_DEBUG | LWIP_DBG_TRACE, ("ip4_input: UDP packet to DHCP client port %"U16_F"\n",
                                              lwip_ntohs(udphdr->dest)));
      if (IP_ACCEPT_LINK_LAYER_ADDRESSED_PORT(udphdr->dest)) {
 8016556:	68fb      	ldr	r3, [r7, #12]
 8016558:	885b      	ldrh	r3, [r3, #2]
 801655a:	b29b      	uxth	r3, r3
 801655c:	f5b3 4f88 	cmp.w	r3, #17408	; 0x4400
 8016560:	d103      	bne.n	801656a <ip4_input+0x13e>
        LWIP_DEBUGF(IP_DEBUG | LWIP_DBG_TRACE, ("ip4_input: DHCP packet accepted.\n"));
        netif = inp;
 8016562:	683b      	ldr	r3, [r7, #0]
 8016564:	61bb      	str	r3, [r7, #24]
        check_ip_src = 0;
 8016566:	2300      	movs	r3, #0
 8016568:	617b      	str	r3, [r7, #20]
  }
#endif /* IP_ACCEPT_LINK_LAYER_ADDRESSING */

  /* broadcast or multicast packet source address? Compliant with RFC 1122: 3.2.1.3 */
#if LWIP_IGMP || IP_ACCEPT_LINK_LAYER_ADDRESSING
  if (check_ip_src
 801656a:	697b      	ldr	r3, [r7, #20]
 801656c:	2b00      	cmp	r3, #0
 801656e:	d017      	beq.n	80165a0 <ip4_input+0x174>
#if IP_ACCEPT_LINK_LAYER_ADDRESSING
      /* DHCP servers need 0.0.0.0 to be allowed as source address (RFC 1.1.2.2: 3.2.1.3/a) */
      && !ip4_addr_isany_val(*ip4_current_src_addr())
 8016570:	4b4d      	ldr	r3, [pc, #308]	; (80166a8 <ip4_input+0x27c>)
 8016572:	691b      	ldr	r3, [r3, #16]
 8016574:	2b00      	cmp	r3, #0
 8016576:	d013      	beq.n	80165a0 <ip4_input+0x174>
#endif /* IP_ACCEPT_LINK_LAYER_ADDRESSING */
     )
#endif /* LWIP_IGMP || IP_ACCEPT_LINK_LAYER_ADDRESSING */
  {
    if ((ip4_addr_isbroadcast(ip4_current_src_addr(), inp)) ||
 8016578:	4b4b      	ldr	r3, [pc, #300]	; (80166a8 <ip4_input+0x27c>)
 801657a:	691b      	ldr	r3, [r3, #16]
 801657c:	6839      	ldr	r1, [r7, #0]
 801657e:	4618      	mov	r0, r3
 8016580:	f000 f96e 	bl	8016860 <ip4_addr_isbroadcast_u32>
 8016584:	4603      	mov	r3, r0
 8016586:	2b00      	cmp	r3, #0
 8016588:	d105      	bne.n	8016596 <ip4_input+0x16a>
        (ip4_addr_ismulticast(ip4_current_src_addr()))) {
 801658a:	4b47      	ldr	r3, [pc, #284]	; (80166a8 <ip4_input+0x27c>)
 801658c:	691b      	ldr	r3, [r3, #16]
 801658e:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
    if ((ip4_addr_isbroadcast(ip4_current_src_addr(), inp)) ||
 8016592:	2be0      	cmp	r3, #224	; 0xe0
 8016594:	d104      	bne.n	80165a0 <ip4_input+0x174>
      /* packet source is not valid */
      LWIP_DEBUGF(IP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_WARNING, ("ip4_input: packet source is not valid.\n"));
      /* free (drop) packet pbufs */
      pbuf_free(p);
 8016596:	6878      	ldr	r0, [r7, #4]
 8016598:	f7f5 fcd2 	bl	800bf40 <pbuf_free>
      IP_STATS_INC(ip.drop);
      MIB2_STATS_INC(mib2.ipinaddrerrors);
      MIB2_STATS_INC(mib2.ipindiscards);
      return ERR_OK;
 801659c:	2300      	movs	r3, #0
 801659e:	e07e      	b.n	801669e <ip4_input+0x272>
    }
  }

  /* packet not for us? */
  if (netif == NULL) {
 80165a0:	69bb      	ldr	r3, [r7, #24]
 80165a2:	2b00      	cmp	r3, #0
 80165a4:	d104      	bne.n	80165b0 <ip4_input+0x184>
    {
      IP_STATS_INC(ip.drop);
      MIB2_STATS_INC(mib2.ipinaddrerrors);
      MIB2_STATS_INC(mib2.ipindiscards);
    }
    pbuf_free(p);
 80165a6:	6878      	ldr	r0, [r7, #4]
 80165a8:	f7f5 fcca 	bl	800bf40 <pbuf_free>
    return ERR_OK;
 80165ac:	2300      	movs	r3, #0
 80165ae:	e076      	b.n	801669e <ip4_input+0x272>
  }
  /* packet consists of multiple fragments? */
  if ((IPH_OFFSET(iphdr) & PP_HTONS(IP_OFFMASK | IP_MF)) != 0) {
 80165b0:	69fb      	ldr	r3, [r7, #28]
 80165b2:	88db      	ldrh	r3, [r3, #6]
 80165b4:	b29b      	uxth	r3, r3
 80165b6:	461a      	mov	r2, r3
 80165b8:	f64f 733f 	movw	r3, #65343	; 0xff3f
 80165bc:	4013      	ands	r3, r2
 80165be:	2b00      	cmp	r3, #0
 80165c0:	d00b      	beq.n	80165da <ip4_input+0x1ae>
#if IP_REASSEMBLY /* packet fragment reassembly code present? */
    LWIP_DEBUGF(IP_DEBUG, ("IP packet is a fragment (id=0x%04"X16_F" tot_len=%"U16_F" len=%"U16_F" MF=%"U16_F" offset=%"U16_F"), calling ip4_reass()\n",
                           lwip_ntohs(IPH_ID(iphdr)), p->tot_len, lwip_ntohs(IPH_LEN(iphdr)), (u16_t)!!(IPH_OFFSET(iphdr) & PP_HTONS(IP_MF)), (u16_t)((lwip_ntohs(IPH_OFFSET(iphdr)) & IP_OFFMASK) * 8)));
    /* reassemble the packet*/
    p = ip4_reass(p);
 80165c2:	6878      	ldr	r0, [r7, #4]
 80165c4:	f000 fc92 	bl	8016eec <ip4_reass>
 80165c8:	6078      	str	r0, [r7, #4]
    /* packet not fully reassembled yet? */
    if (p == NULL) {
 80165ca:	687b      	ldr	r3, [r7, #4]
 80165cc:	2b00      	cmp	r3, #0
 80165ce:	d101      	bne.n	80165d4 <ip4_input+0x1a8>
      return ERR_OK;
 80165d0:	2300      	movs	r3, #0
 80165d2:	e064      	b.n	801669e <ip4_input+0x272>
    }
    iphdr = (const struct ip_hdr *)p->payload;
 80165d4:	687b      	ldr	r3, [r7, #4]
 80165d6:	685b      	ldr	r3, [r3, #4]
 80165d8:	61fb      	str	r3, [r7, #28]
  /* send to upper layers */
  LWIP_DEBUGF(IP_DEBUG, ("ip4_input: \n"));
  ip4_debug_print(p);
  LWIP_DEBUGF(IP_DEBUG, ("ip4_input: p->len %"U16_F" p->tot_len %"U16_F"\n", p->len, p->tot_len));

  ip_data.current_netif = netif;
 80165da:	4a33      	ldr	r2, [pc, #204]	; (80166a8 <ip4_input+0x27c>)
 80165dc:	69bb      	ldr	r3, [r7, #24]
 80165de:	6013      	str	r3, [r2, #0]
  ip_data.current_input_netif = inp;
 80165e0:	4a31      	ldr	r2, [pc, #196]	; (80166a8 <ip4_input+0x27c>)
 80165e2:	683b      	ldr	r3, [r7, #0]
 80165e4:	6053      	str	r3, [r2, #4]
  ip_data.current_ip4_header = iphdr;
 80165e6:	4a30      	ldr	r2, [pc, #192]	; (80166a8 <ip4_input+0x27c>)
 80165e8:	69fb      	ldr	r3, [r7, #28]
 80165ea:	6093      	str	r3, [r2, #8]
  ip_data.current_ip_header_tot_len = IPH_HL_BYTES(iphdr);
 80165ec:	69fb      	ldr	r3, [r7, #28]
 80165ee:	781b      	ldrb	r3, [r3, #0]
 80165f0:	f003 030f 	and.w	r3, r3, #15
 80165f4:	b2db      	uxtb	r3, r3
 80165f6:	009b      	lsls	r3, r3, #2
 80165f8:	b2db      	uxtb	r3, r3
 80165fa:	b29a      	uxth	r2, r3
 80165fc:	4b2a      	ldr	r3, [pc, #168]	; (80166a8 <ip4_input+0x27c>)
 80165fe:	819a      	strh	r2, [r3, #12]
  /* raw input did not eat the packet? */
  raw_status = raw_input(p, inp);
  if (raw_status != RAW_INPUT_EATEN)
#endif /* LWIP_RAW */
  {
    pbuf_remove_header(p, iphdr_hlen); /* Move to payload, no check necessary. */
 8016600:	8a7b      	ldrh	r3, [r7, #18]
 8016602:	4619      	mov	r1, r3
 8016604:	6878      	ldr	r0, [r7, #4]
 8016606:	f7f5 fc15 	bl	800be34 <pbuf_remove_header>

    switch (IPH_PROTO(iphdr)) {
 801660a:	69fb      	ldr	r3, [r7, #28]
 801660c:	7a5b      	ldrb	r3, [r3, #9]
 801660e:	2b11      	cmp	r3, #17
 8016610:	d006      	beq.n	8016620 <ip4_input+0x1f4>
 8016612:	2b11      	cmp	r3, #17
 8016614:	dc13      	bgt.n	801663e <ip4_input+0x212>
 8016616:	2b01      	cmp	r3, #1
 8016618:	d00c      	beq.n	8016634 <ip4_input+0x208>
 801661a:	2b06      	cmp	r3, #6
 801661c:	d005      	beq.n	801662a <ip4_input+0x1fe>
 801661e:	e00e      	b.n	801663e <ip4_input+0x212>
      case IP_PROTO_UDP:
#if LWIP_UDPLITE
      case IP_PROTO_UDPLITE:
#endif /* LWIP_UDPLITE */
        MIB2_STATS_INC(mib2.ipindelivers);
        udp_input(p, inp);
 8016620:	6839      	ldr	r1, [r7, #0]
 8016622:	6878      	ldr	r0, [r7, #4]
 8016624:	f7fc fa3e 	bl	8012aa4 <udp_input>
        break;
 8016628:	e026      	b.n	8016678 <ip4_input+0x24c>
#endif /* LWIP_UDP */
#if LWIP_TCP
      case IP_PROTO_TCP:
        MIB2_STATS_INC(mib2.ipindelivers);
        tcp_input(p, inp);
 801662a:	6839      	ldr	r1, [r7, #0]
 801662c:	6878      	ldr	r0, [r7, #4]
 801662e:	f7f7 fe27 	bl	800e280 <tcp_input>
        break;
 8016632:	e021      	b.n	8016678 <ip4_input+0x24c>
#endif /* LWIP_TCP */
#if LWIP_ICMP
      case IP_PROTO_ICMP:
        MIB2_STATS_INC(mib2.ipindelivers);
        icmp_input(p, inp);
 8016634:	6839      	ldr	r1, [r7, #0]
 8016636:	6878      	ldr	r0, [r7, #4]
 8016638:	f7ff fcd0 	bl	8015fdc <icmp_input>
        break;
 801663c:	e01c      	b.n	8016678 <ip4_input+0x24c>
        } else
#endif /* LWIP_RAW */
        {
#if LWIP_ICMP
          /* send ICMP destination protocol unreachable unless is was a broadcast */
          if (!ip4_addr_isbroadcast(ip4_current_dest_addr(), netif) &&
 801663e:	4b1a      	ldr	r3, [pc, #104]	; (80166a8 <ip4_input+0x27c>)
 8016640:	695b      	ldr	r3, [r3, #20]
 8016642:	69b9      	ldr	r1, [r7, #24]
 8016644:	4618      	mov	r0, r3
 8016646:	f000 f90b 	bl	8016860 <ip4_addr_isbroadcast_u32>
 801664a:	4603      	mov	r3, r0
 801664c:	2b00      	cmp	r3, #0
 801664e:	d10f      	bne.n	8016670 <ip4_input+0x244>
              !ip4_addr_ismulticast(ip4_current_dest_addr())) {
 8016650:	4b15      	ldr	r3, [pc, #84]	; (80166a8 <ip4_input+0x27c>)
 8016652:	695b      	ldr	r3, [r3, #20]
 8016654:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
          if (!ip4_addr_isbroadcast(ip4_current_dest_addr(), netif) &&
 8016658:	2be0      	cmp	r3, #224	; 0xe0
 801665a:	d009      	beq.n	8016670 <ip4_input+0x244>
            pbuf_header_force(p, (s16_t)iphdr_hlen); /* Move to ip header, no check necessary. */
 801665c:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 8016660:	4619      	mov	r1, r3
 8016662:	6878      	ldr	r0, [r7, #4]
 8016664:	f7f5 fc59 	bl	800bf1a <pbuf_header_force>
            icmp_dest_unreach(p, ICMP_DUR_PROTO);
 8016668:	2102      	movs	r1, #2
 801666a:	6878      	ldr	r0, [r7, #4]
 801666c:	f7ff fdba 	bl	80161e4 <icmp_dest_unreach>

          IP_STATS_INC(ip.proterr);
          IP_STATS_INC(ip.drop);
          MIB2_STATS_INC(mib2.ipinunknownprotos);
        }
        pbuf_free(p);
 8016670:	6878      	ldr	r0, [r7, #4]
 8016672:	f7f5 fc65 	bl	800bf40 <pbuf_free>
        break;
 8016676:	bf00      	nop
    }
  }

  /* @todo: this is not really necessary... */
  ip_data.current_netif = NULL;
 8016678:	4b0b      	ldr	r3, [pc, #44]	; (80166a8 <ip4_input+0x27c>)
 801667a:	2200      	movs	r2, #0
 801667c:	601a      	str	r2, [r3, #0]
  ip_data.current_input_netif = NULL;
 801667e:	4b0a      	ldr	r3, [pc, #40]	; (80166a8 <ip4_input+0x27c>)
 8016680:	2200      	movs	r2, #0
 8016682:	605a      	str	r2, [r3, #4]
  ip_data.current_ip4_header = NULL;
 8016684:	4b08      	ldr	r3, [pc, #32]	; (80166a8 <ip4_input+0x27c>)
 8016686:	2200      	movs	r2, #0
 8016688:	609a      	str	r2, [r3, #8]
  ip_data.current_ip_header_tot_len = 0;
 801668a:	4b07      	ldr	r3, [pc, #28]	; (80166a8 <ip4_input+0x27c>)
 801668c:	2200      	movs	r2, #0
 801668e:	819a      	strh	r2, [r3, #12]
  ip4_addr_set_any(ip4_current_src_addr());
 8016690:	4b05      	ldr	r3, [pc, #20]	; (80166a8 <ip4_input+0x27c>)
 8016692:	2200      	movs	r2, #0
 8016694:	611a      	str	r2, [r3, #16]
  ip4_addr_set_any(ip4_current_dest_addr());
 8016696:	4b04      	ldr	r3, [pc, #16]	; (80166a8 <ip4_input+0x27c>)
 8016698:	2200      	movs	r2, #0
 801669a:	615a      	str	r2, [r3, #20]

  return ERR_OK;
 801669c:	2300      	movs	r3, #0
}
 801669e:	4618      	mov	r0, r3
 80166a0:	3720      	adds	r7, #32
 80166a2:	46bd      	mov	sp, r7
 80166a4:	bd80      	pop	{r7, pc}
 80166a6:	bf00      	nop
 80166a8:	2000537c 	.word	0x2000537c
 80166ac:	20008910 	.word	0x20008910

080166b0 <ip4_output_if>:
 */
err_t
ip4_output_if(struct pbuf *p, const ip4_addr_t *src, const ip4_addr_t *dest,
              u8_t ttl, u8_t tos,
              u8_t proto, struct netif *netif)
{
 80166b0:	b580      	push	{r7, lr}
 80166b2:	b08a      	sub	sp, #40	; 0x28
 80166b4:	af04      	add	r7, sp, #16
 80166b6:	60f8      	str	r0, [r7, #12]
 80166b8:	60b9      	str	r1, [r7, #8]
 80166ba:	607a      	str	r2, [r7, #4]
 80166bc:	70fb      	strb	r3, [r7, #3]
ip4_output_if_opt(struct pbuf *p, const ip4_addr_t *src, const ip4_addr_t *dest,
                  u8_t ttl, u8_t tos, u8_t proto, struct netif *netif, void *ip_options,
                  u16_t optlen)
{
#endif /* IP_OPTIONS_SEND */
  const ip4_addr_t *src_used = src;
 80166be:	68bb      	ldr	r3, [r7, #8]
 80166c0:	617b      	str	r3, [r7, #20]
  if (dest != LWIP_IP_HDRINCL) {
 80166c2:	687b      	ldr	r3, [r7, #4]
 80166c4:	2b00      	cmp	r3, #0
 80166c6:	d009      	beq.n	80166dc <ip4_output_if+0x2c>
    if (ip4_addr_isany(src)) {
 80166c8:	68bb      	ldr	r3, [r7, #8]
 80166ca:	2b00      	cmp	r3, #0
 80166cc:	d003      	beq.n	80166d6 <ip4_output_if+0x26>
 80166ce:	68bb      	ldr	r3, [r7, #8]
 80166d0:	681b      	ldr	r3, [r3, #0]
 80166d2:	2b00      	cmp	r3, #0
 80166d4:	d102      	bne.n	80166dc <ip4_output_if+0x2c>
      src_used = netif_ip4_addr(netif);
 80166d6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80166d8:	3304      	adds	r3, #4
 80166da:	617b      	str	r3, [r7, #20]

#if IP_OPTIONS_SEND
  return ip4_output_if_opt_src(p, src_used, dest, ttl, tos, proto, netif,
                               ip_options, optlen);
#else /* IP_OPTIONS_SEND */
  return ip4_output_if_src(p, src_used, dest, ttl, tos, proto, netif);
 80166dc:	78fa      	ldrb	r2, [r7, #3]
 80166de:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80166e0:	9302      	str	r3, [sp, #8]
 80166e2:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 80166e6:	9301      	str	r3, [sp, #4]
 80166e8:	f897 3020 	ldrb.w	r3, [r7, #32]
 80166ec:	9300      	str	r3, [sp, #0]
 80166ee:	4613      	mov	r3, r2
 80166f0:	687a      	ldr	r2, [r7, #4]
 80166f2:	6979      	ldr	r1, [r7, #20]
 80166f4:	68f8      	ldr	r0, [r7, #12]
 80166f6:	f000 f805 	bl	8016704 <ip4_output_if_src>
 80166fa:	4603      	mov	r3, r0
#endif /* IP_OPTIONS_SEND */
}
 80166fc:	4618      	mov	r0, r3
 80166fe:	3718      	adds	r7, #24
 8016700:	46bd      	mov	sp, r7
 8016702:	bd80      	pop	{r7, pc}

08016704 <ip4_output_if_src>:
 */
err_t
ip4_output_if_src(struct pbuf *p, const ip4_addr_t *src, const ip4_addr_t *dest,
                  u8_t ttl, u8_t tos,
                  u8_t proto, struct netif *netif)
{
 8016704:	b580      	push	{r7, lr}
 8016706:	b088      	sub	sp, #32
 8016708:	af00      	add	r7, sp, #0
 801670a:	60f8      	str	r0, [r7, #12]
 801670c:	60b9      	str	r1, [r7, #8]
 801670e:	607a      	str	r2, [r7, #4]
 8016710:	70fb      	strb	r3, [r7, #3]
#if CHECKSUM_GEN_IP_INLINE
  u32_t chk_sum = 0;
#endif /* CHECKSUM_GEN_IP_INLINE */

  LWIP_ASSERT_CORE_LOCKED();
  LWIP_IP_CHECK_PBUF_REF_COUNT_FOR_TX(p);
 8016712:	68fb      	ldr	r3, [r7, #12]
 8016714:	7b9b      	ldrb	r3, [r3, #14]
 8016716:	2b01      	cmp	r3, #1
 8016718:	d006      	beq.n	8016728 <ip4_output_if_src+0x24>
 801671a:	4b4b      	ldr	r3, [pc, #300]	; (8016848 <ip4_output_if_src+0x144>)
 801671c:	f44f 7255 	mov.w	r2, #852	; 0x354
 8016720:	494a      	ldr	r1, [pc, #296]	; (801684c <ip4_output_if_src+0x148>)
 8016722:	484b      	ldr	r0, [pc, #300]	; (8016850 <ip4_output_if_src+0x14c>)
 8016724:	f001 feb0 	bl	8018488 <iprintf>

  MIB2_STATS_INC(mib2.ipoutrequests);

  /* Should the IP header be generated or is it already included in p? */
  if (dest != LWIP_IP_HDRINCL) {
 8016728:	687b      	ldr	r3, [r7, #4]
 801672a:	2b00      	cmp	r3, #0
 801672c:	d060      	beq.n	80167f0 <ip4_output_if_src+0xec>
    u16_t ip_hlen = IP_HLEN;
 801672e:	2314      	movs	r3, #20
 8016730:	837b      	strh	r3, [r7, #26]
      }
#endif /* CHECKSUM_GEN_IP_INLINE */
    }
#endif /* IP_OPTIONS_SEND */
    /* generate IP header */
    if (pbuf_add_header(p, IP_HLEN)) {
 8016732:	2114      	movs	r1, #20
 8016734:	68f8      	ldr	r0, [r7, #12]
 8016736:	f7f5 fb6d 	bl	800be14 <pbuf_add_header>
 801673a:	4603      	mov	r3, r0
 801673c:	2b00      	cmp	r3, #0
 801673e:	d002      	beq.n	8016746 <ip4_output_if_src+0x42>
      LWIP_DEBUGF(IP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("ip4_output: not enough room for IP header in pbuf\n"));

      IP_STATS_INC(ip.err);
      MIB2_STATS_INC(mib2.ipoutdiscards);
      return ERR_BUF;
 8016740:	f06f 0301 	mvn.w	r3, #1
 8016744:	e07c      	b.n	8016840 <ip4_output_if_src+0x13c>
    }

    iphdr = (struct ip_hdr *)p->payload;
 8016746:	68fb      	ldr	r3, [r7, #12]
 8016748:	685b      	ldr	r3, [r3, #4]
 801674a:	61fb      	str	r3, [r7, #28]
    LWIP_ASSERT("check that first pbuf can hold struct ip_hdr",
 801674c:	68fb      	ldr	r3, [r7, #12]
 801674e:	895b      	ldrh	r3, [r3, #10]
 8016750:	2b13      	cmp	r3, #19
 8016752:	d806      	bhi.n	8016762 <ip4_output_if_src+0x5e>
 8016754:	4b3c      	ldr	r3, [pc, #240]	; (8016848 <ip4_output_if_src+0x144>)
 8016756:	f44f 7262 	mov.w	r2, #904	; 0x388
 801675a:	493e      	ldr	r1, [pc, #248]	; (8016854 <ip4_output_if_src+0x150>)
 801675c:	483c      	ldr	r0, [pc, #240]	; (8016850 <ip4_output_if_src+0x14c>)
 801675e:	f001 fe93 	bl	8018488 <iprintf>
                (p->len >= sizeof(struct ip_hdr)));

    IPH_TTL_SET(iphdr, ttl);
 8016762:	69fb      	ldr	r3, [r7, #28]
 8016764:	78fa      	ldrb	r2, [r7, #3]
 8016766:	721a      	strb	r2, [r3, #8]
    IPH_PROTO_SET(iphdr, proto);
 8016768:	69fb      	ldr	r3, [r7, #28]
 801676a:	f897 202c 	ldrb.w	r2, [r7, #44]	; 0x2c
 801676e:	725a      	strb	r2, [r3, #9]
#if CHECKSUM_GEN_IP_INLINE
    chk_sum += PP_NTOHS(proto | (ttl << 8));
#endif /* CHECKSUM_GEN_IP_INLINE */

    /* dest cannot be NULL here */
    ip4_addr_copy(iphdr->dest, *dest);
 8016770:	687b      	ldr	r3, [r7, #4]
 8016772:	681a      	ldr	r2, [r3, #0]
 8016774:	69fb      	ldr	r3, [r7, #28]
 8016776:	611a      	str	r2, [r3, #16]
#if CHECKSUM_GEN_IP_INLINE
    chk_sum += ip4_addr_get_u32(&iphdr->dest) & 0xFFFF;
    chk_sum += ip4_addr_get_u32(&iphdr->dest) >> 16;
#endif /* CHECKSUM_GEN_IP_INLINE */

    IPH_VHL_SET(iphdr, 4, ip_hlen / 4);
 8016778:	8b7b      	ldrh	r3, [r7, #26]
 801677a:	089b      	lsrs	r3, r3, #2
 801677c:	b29b      	uxth	r3, r3
 801677e:	b2db      	uxtb	r3, r3
 8016780:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8016784:	b2da      	uxtb	r2, r3
 8016786:	69fb      	ldr	r3, [r7, #28]
 8016788:	701a      	strb	r2, [r3, #0]
    IPH_TOS_SET(iphdr, tos);
 801678a:	69fb      	ldr	r3, [r7, #28]
 801678c:	f897 2028 	ldrb.w	r2, [r7, #40]	; 0x28
 8016790:	705a      	strb	r2, [r3, #1]
#if CHECKSUM_GEN_IP_INLINE
    chk_sum += PP_NTOHS(tos | (iphdr->_v_hl << 8));
#endif /* CHECKSUM_GEN_IP_INLINE */
    IPH_LEN_SET(iphdr, lwip_htons(p->tot_len));
 8016792:	68fb      	ldr	r3, [r7, #12]
 8016794:	891b      	ldrh	r3, [r3, #8]
 8016796:	4618      	mov	r0, r3
 8016798:	f7f3 fd7a 	bl	800a290 <lwip_htons>
 801679c:	4603      	mov	r3, r0
 801679e:	461a      	mov	r2, r3
 80167a0:	69fb      	ldr	r3, [r7, #28]
 80167a2:	805a      	strh	r2, [r3, #2]
#if CHECKSUM_GEN_IP_INLINE
    chk_sum += iphdr->_len;
#endif /* CHECKSUM_GEN_IP_INLINE */
    IPH_OFFSET_SET(iphdr, 0);
 80167a4:	69fb      	ldr	r3, [r7, #28]
 80167a6:	2200      	movs	r2, #0
 80167a8:	719a      	strb	r2, [r3, #6]
 80167aa:	2200      	movs	r2, #0
 80167ac:	71da      	strb	r2, [r3, #7]
    IPH_ID_SET(iphdr, lwip_htons(ip_id));
 80167ae:	4b2a      	ldr	r3, [pc, #168]	; (8016858 <ip4_output_if_src+0x154>)
 80167b0:	881b      	ldrh	r3, [r3, #0]
 80167b2:	4618      	mov	r0, r3
 80167b4:	f7f3 fd6c 	bl	800a290 <lwip_htons>
 80167b8:	4603      	mov	r3, r0
 80167ba:	461a      	mov	r2, r3
 80167bc:	69fb      	ldr	r3, [r7, #28]
 80167be:	809a      	strh	r2, [r3, #4]
#if CHECKSUM_GEN_IP_INLINE
    chk_sum += iphdr->_id;
#endif /* CHECKSUM_GEN_IP_INLINE */
    ++ip_id;
 80167c0:	4b25      	ldr	r3, [pc, #148]	; (8016858 <ip4_output_if_src+0x154>)
 80167c2:	881b      	ldrh	r3, [r3, #0]
 80167c4:	3301      	adds	r3, #1
 80167c6:	b29a      	uxth	r2, r3
 80167c8:	4b23      	ldr	r3, [pc, #140]	; (8016858 <ip4_output_if_src+0x154>)
 80167ca:	801a      	strh	r2, [r3, #0]

    if (src == NULL) {
 80167cc:	68bb      	ldr	r3, [r7, #8]
 80167ce:	2b00      	cmp	r3, #0
 80167d0:	d104      	bne.n	80167dc <ip4_output_if_src+0xd8>
      ip4_addr_copy(iphdr->src, *IP4_ADDR_ANY4);
 80167d2:	4b22      	ldr	r3, [pc, #136]	; (801685c <ip4_output_if_src+0x158>)
 80167d4:	681a      	ldr	r2, [r3, #0]
 80167d6:	69fb      	ldr	r3, [r7, #28]
 80167d8:	60da      	str	r2, [r3, #12]
 80167da:	e003      	b.n	80167e4 <ip4_output_if_src+0xe0>
    } else {
      /* src cannot be NULL here */
      ip4_addr_copy(iphdr->src, *src);
 80167dc:	68bb      	ldr	r3, [r7, #8]
 80167de:	681a      	ldr	r2, [r3, #0]
 80167e0:	69fb      	ldr	r3, [r7, #28]
 80167e2:	60da      	str	r2, [r3, #12]
    else {
      IPH_CHKSUM_SET(iphdr, 0);
    }
#endif /* LWIP_CHECKSUM_CTRL_PER_NETIF*/
#else /* CHECKSUM_GEN_IP_INLINE */
    IPH_CHKSUM_SET(iphdr, 0);
 80167e4:	69fb      	ldr	r3, [r7, #28]
 80167e6:	2200      	movs	r2, #0
 80167e8:	729a      	strb	r2, [r3, #10]
 80167ea:	2200      	movs	r2, #0
 80167ec:	72da      	strb	r2, [r3, #11]
 80167ee:	e00f      	b.n	8016810 <ip4_output_if_src+0x10c>
    }
#endif /* CHECKSUM_GEN_IP */
#endif /* CHECKSUM_GEN_IP_INLINE */
  } else {
    /* IP header already included in p */
    if (p->len < IP_HLEN) {
 80167f0:	68fb      	ldr	r3, [r7, #12]
 80167f2:	895b      	ldrh	r3, [r3, #10]
 80167f4:	2b13      	cmp	r3, #19
 80167f6:	d802      	bhi.n	80167fe <ip4_output_if_src+0xfa>
      LWIP_DEBUGF(IP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("ip4_output: LWIP_IP_HDRINCL but pbuf is too short\n"));
      IP_STATS_INC(ip.err);
      MIB2_STATS_INC(mib2.ipoutdiscards);
      return ERR_BUF;
 80167f8:	f06f 0301 	mvn.w	r3, #1
 80167fc:	e020      	b.n	8016840 <ip4_output_if_src+0x13c>
    }
    iphdr = (struct ip_hdr *)p->payload;
 80167fe:	68fb      	ldr	r3, [r7, #12]
 8016800:	685b      	ldr	r3, [r3, #4]
 8016802:	61fb      	str	r3, [r7, #28]
    ip4_addr_copy(dest_addr, iphdr->dest);
 8016804:	69fb      	ldr	r3, [r7, #28]
 8016806:	691b      	ldr	r3, [r3, #16]
 8016808:	617b      	str	r3, [r7, #20]
    dest = &dest_addr;
 801680a:	f107 0314 	add.w	r3, r7, #20
 801680e:	607b      	str	r3, [r7, #4]
  }
#endif /* LWIP_MULTICAST_TX_OPTIONS */
#endif /* ENABLE_LOOPBACK */
#if IP_FRAG
  /* don't fragment if interface has mtu set to 0 [loopif] */
  if (netif->mtu && (p->tot_len > netif->mtu)) {
 8016810:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8016812:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8016814:	2b00      	cmp	r3, #0
 8016816:	d00c      	beq.n	8016832 <ip4_output_if_src+0x12e>
 8016818:	68fb      	ldr	r3, [r7, #12]
 801681a:	891a      	ldrh	r2, [r3, #8]
 801681c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801681e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8016820:	429a      	cmp	r2, r3
 8016822:	d906      	bls.n	8016832 <ip4_output_if_src+0x12e>
    return ip4_frag(p, netif, dest);
 8016824:	687a      	ldr	r2, [r7, #4]
 8016826:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8016828:	68f8      	ldr	r0, [r7, #12]
 801682a:	f000 fd53 	bl	80172d4 <ip4_frag>
 801682e:	4603      	mov	r3, r0
 8016830:	e006      	b.n	8016840 <ip4_output_if_src+0x13c>
  }
#endif /* IP_FRAG */

  LWIP_DEBUGF(IP_DEBUG, ("ip4_output_if: call netif->output()\n"));
  return netif->output(netif, p, dest);
 8016832:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8016834:	695b      	ldr	r3, [r3, #20]
 8016836:	687a      	ldr	r2, [r7, #4]
 8016838:	68f9      	ldr	r1, [r7, #12]
 801683a:	6b38      	ldr	r0, [r7, #48]	; 0x30
 801683c:	4798      	blx	r3
 801683e:	4603      	mov	r3, r0
}
 8016840:	4618      	mov	r0, r3
 8016842:	3720      	adds	r7, #32
 8016844:	46bd      	mov	sp, r7
 8016846:	bd80      	pop	{r7, pc}
 8016848:	0801be14 	.word	0x0801be14
 801684c:	0801be48 	.word	0x0801be48
 8016850:	0801be54 	.word	0x0801be54
 8016854:	0801be7c 	.word	0x0801be7c
 8016858:	20008aae 	.word	0x20008aae
 801685c:	0801c2c4 	.word	0x0801c2c4

08016860 <ip4_addr_isbroadcast_u32>:
 * @param netif the network interface against which the address is checked
 * @return returns non-zero if the address is a broadcast address
 */
u8_t
ip4_addr_isbroadcast_u32(u32_t addr, const struct netif *netif)
{
 8016860:	b480      	push	{r7}
 8016862:	b085      	sub	sp, #20
 8016864:	af00      	add	r7, sp, #0
 8016866:	6078      	str	r0, [r7, #4]
 8016868:	6039      	str	r1, [r7, #0]
  ip4_addr_t ipaddr;
  ip4_addr_set_u32(&ipaddr, addr);
 801686a:	687b      	ldr	r3, [r7, #4]
 801686c:	60fb      	str	r3, [r7, #12]

  /* all ones (broadcast) or all zeroes (old skool broadcast) */
  if ((~addr == IPADDR_ANY) ||
 801686e:	687b      	ldr	r3, [r7, #4]
 8016870:	f1b3 3fff 	cmp.w	r3, #4294967295
 8016874:	d002      	beq.n	801687c <ip4_addr_isbroadcast_u32+0x1c>
 8016876:	687b      	ldr	r3, [r7, #4]
 8016878:	2b00      	cmp	r3, #0
 801687a:	d101      	bne.n	8016880 <ip4_addr_isbroadcast_u32+0x20>
      (addr == IPADDR_ANY)) {
    return 1;
 801687c:	2301      	movs	r3, #1
 801687e:	e02a      	b.n	80168d6 <ip4_addr_isbroadcast_u32+0x76>
    /* no broadcast support on this network interface? */
  } else if ((netif->flags & NETIF_FLAG_BROADCAST) == 0) {
 8016880:	683b      	ldr	r3, [r7, #0]
 8016882:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 8016886:	f003 0302 	and.w	r3, r3, #2
 801688a:	2b00      	cmp	r3, #0
 801688c:	d101      	bne.n	8016892 <ip4_addr_isbroadcast_u32+0x32>
    /* the given address cannot be a broadcast address
     * nor can we check against any broadcast addresses */
    return 0;
 801688e:	2300      	movs	r3, #0
 8016890:	e021      	b.n	80168d6 <ip4_addr_isbroadcast_u32+0x76>
    /* address matches network interface address exactly? => no broadcast */
  } else if (addr == ip4_addr_get_u32(netif_ip4_addr(netif))) {
 8016892:	683b      	ldr	r3, [r7, #0]
 8016894:	3304      	adds	r3, #4
 8016896:	681b      	ldr	r3, [r3, #0]
 8016898:	687a      	ldr	r2, [r7, #4]
 801689a:	429a      	cmp	r2, r3
 801689c:	d101      	bne.n	80168a2 <ip4_addr_isbroadcast_u32+0x42>
    return 0;
 801689e:	2300      	movs	r3, #0
 80168a0:	e019      	b.n	80168d6 <ip4_addr_isbroadcast_u32+0x76>
    /*  on the same (sub) network... */
  } else if (ip4_addr_netcmp(&ipaddr, netif_ip4_addr(netif), netif_ip4_netmask(netif))
 80168a2:	68fa      	ldr	r2, [r7, #12]
 80168a4:	683b      	ldr	r3, [r7, #0]
 80168a6:	3304      	adds	r3, #4
 80168a8:	681b      	ldr	r3, [r3, #0]
 80168aa:	405a      	eors	r2, r3
 80168ac:	683b      	ldr	r3, [r7, #0]
 80168ae:	3308      	adds	r3, #8
 80168b0:	681b      	ldr	r3, [r3, #0]
 80168b2:	4013      	ands	r3, r2
 80168b4:	2b00      	cmp	r3, #0
 80168b6:	d10d      	bne.n	80168d4 <ip4_addr_isbroadcast_u32+0x74>
             /* ...and host identifier bits are all ones? =>... */
             && ((addr & ~ip4_addr_get_u32(netif_ip4_netmask(netif))) ==
 80168b8:	683b      	ldr	r3, [r7, #0]
 80168ba:	3308      	adds	r3, #8
 80168bc:	681b      	ldr	r3, [r3, #0]
 80168be:	43da      	mvns	r2, r3
 80168c0:	687b      	ldr	r3, [r7, #4]
 80168c2:	401a      	ands	r2, r3
                 (IPADDR_BROADCAST & ~ip4_addr_get_u32(netif_ip4_netmask(netif))))) {
 80168c4:	683b      	ldr	r3, [r7, #0]
 80168c6:	3308      	adds	r3, #8
 80168c8:	681b      	ldr	r3, [r3, #0]
 80168ca:	43db      	mvns	r3, r3
             && ((addr & ~ip4_addr_get_u32(netif_ip4_netmask(netif))) ==
 80168cc:	429a      	cmp	r2, r3
 80168ce:	d101      	bne.n	80168d4 <ip4_addr_isbroadcast_u32+0x74>
    /* => network broadcast address */
    return 1;
 80168d0:	2301      	movs	r3, #1
 80168d2:	e000      	b.n	80168d6 <ip4_addr_isbroadcast_u32+0x76>
  } else {
    return 0;
 80168d4:	2300      	movs	r3, #0
  }
}
 80168d6:	4618      	mov	r0, r3
 80168d8:	3714      	adds	r7, #20
 80168da:	46bd      	mov	sp, r7
 80168dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80168e0:	4770      	bx	lr
	...

080168e4 <ip_reass_tmr>:
 *
 * Should be called every 1000 msec (defined by IP_TMR_INTERVAL).
 */
void
ip_reass_tmr(void)
{
 80168e4:	b580      	push	{r7, lr}
 80168e6:	b084      	sub	sp, #16
 80168e8:	af00      	add	r7, sp, #0
  struct ip_reassdata *r, *prev = NULL;
 80168ea:	2300      	movs	r3, #0
 80168ec:	60bb      	str	r3, [r7, #8]

  r = reassdatagrams;
 80168ee:	4b12      	ldr	r3, [pc, #72]	; (8016938 <ip_reass_tmr+0x54>)
 80168f0:	681b      	ldr	r3, [r3, #0]
 80168f2:	60fb      	str	r3, [r7, #12]
  while (r != NULL) {
 80168f4:	e018      	b.n	8016928 <ip_reass_tmr+0x44>
    /* Decrement the timer. Once it reaches 0,
     * clean up the incomplete fragment assembly */
    if (r->timer > 0) {
 80168f6:	68fb      	ldr	r3, [r7, #12]
 80168f8:	7fdb      	ldrb	r3, [r3, #31]
 80168fa:	2b00      	cmp	r3, #0
 80168fc:	d00b      	beq.n	8016916 <ip_reass_tmr+0x32>
      r->timer--;
 80168fe:	68fb      	ldr	r3, [r7, #12]
 8016900:	7fdb      	ldrb	r3, [r3, #31]
 8016902:	3b01      	subs	r3, #1
 8016904:	b2da      	uxtb	r2, r3
 8016906:	68fb      	ldr	r3, [r7, #12]
 8016908:	77da      	strb	r2, [r3, #31]
      LWIP_DEBUGF(IP_REASS_DEBUG, ("ip_reass_tmr: timer dec %"U16_F"\n", (u16_t)r->timer));
      prev = r;
 801690a:	68fb      	ldr	r3, [r7, #12]
 801690c:	60bb      	str	r3, [r7, #8]
      r = r->next;
 801690e:	68fb      	ldr	r3, [r7, #12]
 8016910:	681b      	ldr	r3, [r3, #0]
 8016912:	60fb      	str	r3, [r7, #12]
 8016914:	e008      	b.n	8016928 <ip_reass_tmr+0x44>
    } else {
      /* reassembly timed out */
      struct ip_reassdata *tmp;
      LWIP_DEBUGF(IP_REASS_DEBUG, ("ip_reass_tmr: timer timed out\n"));
      tmp = r;
 8016916:	68fb      	ldr	r3, [r7, #12]
 8016918:	607b      	str	r3, [r7, #4]
      /* get the next pointer before freeing */
      r = r->next;
 801691a:	68fb      	ldr	r3, [r7, #12]
 801691c:	681b      	ldr	r3, [r3, #0]
 801691e:	60fb      	str	r3, [r7, #12]
      /* free the helper struct and all enqueued pbufs */
      ip_reass_free_complete_datagram(tmp, prev);
 8016920:	68b9      	ldr	r1, [r7, #8]
 8016922:	6878      	ldr	r0, [r7, #4]
 8016924:	f000 f80a 	bl	801693c <ip_reass_free_complete_datagram>
  while (r != NULL) {
 8016928:	68fb      	ldr	r3, [r7, #12]
 801692a:	2b00      	cmp	r3, #0
 801692c:	d1e3      	bne.n	80168f6 <ip_reass_tmr+0x12>
    }
  }
}
 801692e:	bf00      	nop
 8016930:	bf00      	nop
 8016932:	3710      	adds	r7, #16
 8016934:	46bd      	mov	sp, r7
 8016936:	bd80      	pop	{r7, pc}
 8016938:	20008ab0 	.word	0x20008ab0

0801693c <ip_reass_free_complete_datagram>:
 * @param prev the previous datagram in the linked list
 * @return the number of pbufs freed
 */
static int
ip_reass_free_complete_datagram(struct ip_reassdata *ipr, struct ip_reassdata *prev)
{
 801693c:	b580      	push	{r7, lr}
 801693e:	b088      	sub	sp, #32
 8016940:	af00      	add	r7, sp, #0
 8016942:	6078      	str	r0, [r7, #4]
 8016944:	6039      	str	r1, [r7, #0]
  u16_t pbufs_freed = 0;
 8016946:	2300      	movs	r3, #0
 8016948:	83fb      	strh	r3, [r7, #30]
  u16_t clen;
  struct pbuf *p;
  struct ip_reass_helper *iprh;

  LWIP_ASSERT("prev != ipr", prev != ipr);
 801694a:	683a      	ldr	r2, [r7, #0]
 801694c:	687b      	ldr	r3, [r7, #4]
 801694e:	429a      	cmp	r2, r3
 8016950:	d105      	bne.n	801695e <ip_reass_free_complete_datagram+0x22>
 8016952:	4b45      	ldr	r3, [pc, #276]	; (8016a68 <ip_reass_free_complete_datagram+0x12c>)
 8016954:	22ab      	movs	r2, #171	; 0xab
 8016956:	4945      	ldr	r1, [pc, #276]	; (8016a6c <ip_reass_free_complete_datagram+0x130>)
 8016958:	4845      	ldr	r0, [pc, #276]	; (8016a70 <ip_reass_free_complete_datagram+0x134>)
 801695a:	f001 fd95 	bl	8018488 <iprintf>
  if (prev != NULL) {
 801695e:	683b      	ldr	r3, [r7, #0]
 8016960:	2b00      	cmp	r3, #0
 8016962:	d00a      	beq.n	801697a <ip_reass_free_complete_datagram+0x3e>
    LWIP_ASSERT("prev->next == ipr", prev->next == ipr);
 8016964:	683b      	ldr	r3, [r7, #0]
 8016966:	681b      	ldr	r3, [r3, #0]
 8016968:	687a      	ldr	r2, [r7, #4]
 801696a:	429a      	cmp	r2, r3
 801696c:	d005      	beq.n	801697a <ip_reass_free_complete_datagram+0x3e>
 801696e:	4b3e      	ldr	r3, [pc, #248]	; (8016a68 <ip_reass_free_complete_datagram+0x12c>)
 8016970:	22ad      	movs	r2, #173	; 0xad
 8016972:	4940      	ldr	r1, [pc, #256]	; (8016a74 <ip_reass_free_complete_datagram+0x138>)
 8016974:	483e      	ldr	r0, [pc, #248]	; (8016a70 <ip_reass_free_complete_datagram+0x134>)
 8016976:	f001 fd87 	bl	8018488 <iprintf>
  }

  MIB2_STATS_INC(mib2.ipreasmfails);
#if LWIP_ICMP
  iprh = (struct ip_reass_helper *)ipr->p->payload;
 801697a:	687b      	ldr	r3, [r7, #4]
 801697c:	685b      	ldr	r3, [r3, #4]
 801697e:	685b      	ldr	r3, [r3, #4]
 8016980:	617b      	str	r3, [r7, #20]
  if (iprh->start == 0) {
 8016982:	697b      	ldr	r3, [r7, #20]
 8016984:	889b      	ldrh	r3, [r3, #4]
 8016986:	b29b      	uxth	r3, r3
 8016988:	2b00      	cmp	r3, #0
 801698a:	d12a      	bne.n	80169e2 <ip_reass_free_complete_datagram+0xa6>
    /* The first fragment was received, send ICMP time exceeded. */
    /* First, de-queue the first pbuf from r->p. */
    p = ipr->p;
 801698c:	687b      	ldr	r3, [r7, #4]
 801698e:	685b      	ldr	r3, [r3, #4]
 8016990:	61bb      	str	r3, [r7, #24]
    ipr->p = iprh->next_pbuf;
 8016992:	697b      	ldr	r3, [r7, #20]
 8016994:	681a      	ldr	r2, [r3, #0]
 8016996:	687b      	ldr	r3, [r7, #4]
 8016998:	605a      	str	r2, [r3, #4]
    /* Then, copy the original header into it. */
    SMEMCPY(p->payload, &ipr->iphdr, IP_HLEN);
 801699a:	69bb      	ldr	r3, [r7, #24]
 801699c:	6858      	ldr	r0, [r3, #4]
 801699e:	687b      	ldr	r3, [r7, #4]
 80169a0:	3308      	adds	r3, #8
 80169a2:	2214      	movs	r2, #20
 80169a4:	4619      	mov	r1, r3
 80169a6:	f001 fe62 	bl	801866e <memcpy>
    icmp_time_exceeded(p, ICMP_TE_FRAG);
 80169aa:	2101      	movs	r1, #1
 80169ac:	69b8      	ldr	r0, [r7, #24]
 80169ae:	f7ff fc29 	bl	8016204 <icmp_time_exceeded>
    clen = pbuf_clen(p);
 80169b2:	69b8      	ldr	r0, [r7, #24]
 80169b4:	f7f5 fb4c 	bl	800c050 <pbuf_clen>
 80169b8:	4603      	mov	r3, r0
 80169ba:	827b      	strh	r3, [r7, #18]
    LWIP_ASSERT("pbufs_freed + clen <= 0xffff", pbufs_freed + clen <= 0xffff);
 80169bc:	8bfa      	ldrh	r2, [r7, #30]
 80169be:	8a7b      	ldrh	r3, [r7, #18]
 80169c0:	4413      	add	r3, r2
 80169c2:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80169c6:	db05      	blt.n	80169d4 <ip_reass_free_complete_datagram+0x98>
 80169c8:	4b27      	ldr	r3, [pc, #156]	; (8016a68 <ip_reass_free_complete_datagram+0x12c>)
 80169ca:	22bc      	movs	r2, #188	; 0xbc
 80169cc:	492a      	ldr	r1, [pc, #168]	; (8016a78 <ip_reass_free_complete_datagram+0x13c>)
 80169ce:	4828      	ldr	r0, [pc, #160]	; (8016a70 <ip_reass_free_complete_datagram+0x134>)
 80169d0:	f001 fd5a 	bl	8018488 <iprintf>
    pbufs_freed = (u16_t)(pbufs_freed + clen);
 80169d4:	8bfa      	ldrh	r2, [r7, #30]
 80169d6:	8a7b      	ldrh	r3, [r7, #18]
 80169d8:	4413      	add	r3, r2
 80169da:	83fb      	strh	r3, [r7, #30]
    pbuf_free(p);
 80169dc:	69b8      	ldr	r0, [r7, #24]
 80169de:	f7f5 faaf 	bl	800bf40 <pbuf_free>
  }
#endif /* LWIP_ICMP */

  /* First, free all received pbufs.  The individual pbufs need to be released
     separately as they have not yet been chained */
  p = ipr->p;
 80169e2:	687b      	ldr	r3, [r7, #4]
 80169e4:	685b      	ldr	r3, [r3, #4]
 80169e6:	61bb      	str	r3, [r7, #24]
  while (p != NULL) {
 80169e8:	e01f      	b.n	8016a2a <ip_reass_free_complete_datagram+0xee>
    struct pbuf *pcur;
    iprh = (struct ip_reass_helper *)p->payload;
 80169ea:	69bb      	ldr	r3, [r7, #24]
 80169ec:	685b      	ldr	r3, [r3, #4]
 80169ee:	617b      	str	r3, [r7, #20]
    pcur = p;
 80169f0:	69bb      	ldr	r3, [r7, #24]
 80169f2:	60fb      	str	r3, [r7, #12]
    /* get the next pointer before freeing */
    p = iprh->next_pbuf;
 80169f4:	697b      	ldr	r3, [r7, #20]
 80169f6:	681b      	ldr	r3, [r3, #0]
 80169f8:	61bb      	str	r3, [r7, #24]
    clen = pbuf_clen(pcur);
 80169fa:	68f8      	ldr	r0, [r7, #12]
 80169fc:	f7f5 fb28 	bl	800c050 <pbuf_clen>
 8016a00:	4603      	mov	r3, r0
 8016a02:	827b      	strh	r3, [r7, #18]
    LWIP_ASSERT("pbufs_freed + clen <= 0xffff", pbufs_freed + clen <= 0xffff);
 8016a04:	8bfa      	ldrh	r2, [r7, #30]
 8016a06:	8a7b      	ldrh	r3, [r7, #18]
 8016a08:	4413      	add	r3, r2
 8016a0a:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8016a0e:	db05      	blt.n	8016a1c <ip_reass_free_complete_datagram+0xe0>
 8016a10:	4b15      	ldr	r3, [pc, #84]	; (8016a68 <ip_reass_free_complete_datagram+0x12c>)
 8016a12:	22cc      	movs	r2, #204	; 0xcc
 8016a14:	4918      	ldr	r1, [pc, #96]	; (8016a78 <ip_reass_free_complete_datagram+0x13c>)
 8016a16:	4816      	ldr	r0, [pc, #88]	; (8016a70 <ip_reass_free_complete_datagram+0x134>)
 8016a18:	f001 fd36 	bl	8018488 <iprintf>
    pbufs_freed = (u16_t)(pbufs_freed + clen);
 8016a1c:	8bfa      	ldrh	r2, [r7, #30]
 8016a1e:	8a7b      	ldrh	r3, [r7, #18]
 8016a20:	4413      	add	r3, r2
 8016a22:	83fb      	strh	r3, [r7, #30]
    pbuf_free(pcur);
 8016a24:	68f8      	ldr	r0, [r7, #12]
 8016a26:	f7f5 fa8b 	bl	800bf40 <pbuf_free>
  while (p != NULL) {
 8016a2a:	69bb      	ldr	r3, [r7, #24]
 8016a2c:	2b00      	cmp	r3, #0
 8016a2e:	d1dc      	bne.n	80169ea <ip_reass_free_complete_datagram+0xae>
  }
  /* Then, unchain the struct ip_reassdata from the list and free it. */
  ip_reass_dequeue_datagram(ipr, prev);
 8016a30:	6839      	ldr	r1, [r7, #0]
 8016a32:	6878      	ldr	r0, [r7, #4]
 8016a34:	f000 f8c2 	bl	8016bbc <ip_reass_dequeue_datagram>
  LWIP_ASSERT("ip_reass_pbufcount >= pbufs_freed", ip_reass_pbufcount >= pbufs_freed);
 8016a38:	4b10      	ldr	r3, [pc, #64]	; (8016a7c <ip_reass_free_complete_datagram+0x140>)
 8016a3a:	881b      	ldrh	r3, [r3, #0]
 8016a3c:	8bfa      	ldrh	r2, [r7, #30]
 8016a3e:	429a      	cmp	r2, r3
 8016a40:	d905      	bls.n	8016a4e <ip_reass_free_complete_datagram+0x112>
 8016a42:	4b09      	ldr	r3, [pc, #36]	; (8016a68 <ip_reass_free_complete_datagram+0x12c>)
 8016a44:	22d2      	movs	r2, #210	; 0xd2
 8016a46:	490e      	ldr	r1, [pc, #56]	; (8016a80 <ip_reass_free_complete_datagram+0x144>)
 8016a48:	4809      	ldr	r0, [pc, #36]	; (8016a70 <ip_reass_free_complete_datagram+0x134>)
 8016a4a:	f001 fd1d 	bl	8018488 <iprintf>
  ip_reass_pbufcount = (u16_t)(ip_reass_pbufcount - pbufs_freed);
 8016a4e:	4b0b      	ldr	r3, [pc, #44]	; (8016a7c <ip_reass_free_complete_datagram+0x140>)
 8016a50:	881a      	ldrh	r2, [r3, #0]
 8016a52:	8bfb      	ldrh	r3, [r7, #30]
 8016a54:	1ad3      	subs	r3, r2, r3
 8016a56:	b29a      	uxth	r2, r3
 8016a58:	4b08      	ldr	r3, [pc, #32]	; (8016a7c <ip_reass_free_complete_datagram+0x140>)
 8016a5a:	801a      	strh	r2, [r3, #0]

  return pbufs_freed;
 8016a5c:	8bfb      	ldrh	r3, [r7, #30]
}
 8016a5e:	4618      	mov	r0, r3
 8016a60:	3720      	adds	r7, #32
 8016a62:	46bd      	mov	sp, r7
 8016a64:	bd80      	pop	{r7, pc}
 8016a66:	bf00      	nop
 8016a68:	0801beac 	.word	0x0801beac
 8016a6c:	0801bee8 	.word	0x0801bee8
 8016a70:	0801bef4 	.word	0x0801bef4
 8016a74:	0801bf1c 	.word	0x0801bf1c
 8016a78:	0801bf30 	.word	0x0801bf30
 8016a7c:	20008ab4 	.word	0x20008ab4
 8016a80:	0801bf50 	.word	0x0801bf50

08016a84 <ip_reass_remove_oldest_datagram>:
 *        (used for freeing other datagrams if not enough space)
 * @return the number of pbufs freed
 */
static int
ip_reass_remove_oldest_datagram(struct ip_hdr *fraghdr, int pbufs_needed)
{
 8016a84:	b580      	push	{r7, lr}
 8016a86:	b08a      	sub	sp, #40	; 0x28
 8016a88:	af00      	add	r7, sp, #0
 8016a8a:	6078      	str	r0, [r7, #4]
 8016a8c:	6039      	str	r1, [r7, #0]
  /* @todo Can't we simply remove the last datagram in the
   *       linked list behind reassdatagrams?
   */
  struct ip_reassdata *r, *oldest, *prev, *oldest_prev;
  int pbufs_freed = 0, pbufs_freed_current;
 8016a8e:	2300      	movs	r3, #0
 8016a90:	617b      	str	r3, [r7, #20]
  int other_datagrams;

  /* Free datagrams until being allowed to enqueue 'pbufs_needed' pbufs,
   * but don't free the datagram that 'fraghdr' belongs to! */
  do {
    oldest = NULL;
 8016a92:	2300      	movs	r3, #0
 8016a94:	623b      	str	r3, [r7, #32]
    prev = NULL;
 8016a96:	2300      	movs	r3, #0
 8016a98:	61fb      	str	r3, [r7, #28]
    oldest_prev = NULL;
 8016a9a:	2300      	movs	r3, #0
 8016a9c:	61bb      	str	r3, [r7, #24]
    other_datagrams = 0;
 8016a9e:	2300      	movs	r3, #0
 8016aa0:	613b      	str	r3, [r7, #16]
    r = reassdatagrams;
 8016aa2:	4b28      	ldr	r3, [pc, #160]	; (8016b44 <ip_reass_remove_oldest_datagram+0xc0>)
 8016aa4:	681b      	ldr	r3, [r3, #0]
 8016aa6:	627b      	str	r3, [r7, #36]	; 0x24
    while (r != NULL) {
 8016aa8:	e030      	b.n	8016b0c <ip_reass_remove_oldest_datagram+0x88>
      if (!IP_ADDRESSES_AND_ID_MATCH(&r->iphdr, fraghdr)) {
 8016aaa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8016aac:	695a      	ldr	r2, [r3, #20]
 8016aae:	687b      	ldr	r3, [r7, #4]
 8016ab0:	68db      	ldr	r3, [r3, #12]
 8016ab2:	429a      	cmp	r2, r3
 8016ab4:	d10c      	bne.n	8016ad0 <ip_reass_remove_oldest_datagram+0x4c>
 8016ab6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8016ab8:	699a      	ldr	r2, [r3, #24]
 8016aba:	687b      	ldr	r3, [r7, #4]
 8016abc:	691b      	ldr	r3, [r3, #16]
 8016abe:	429a      	cmp	r2, r3
 8016ac0:	d106      	bne.n	8016ad0 <ip_reass_remove_oldest_datagram+0x4c>
 8016ac2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8016ac4:	899a      	ldrh	r2, [r3, #12]
 8016ac6:	687b      	ldr	r3, [r7, #4]
 8016ac8:	889b      	ldrh	r3, [r3, #4]
 8016aca:	b29b      	uxth	r3, r3
 8016acc:	429a      	cmp	r2, r3
 8016ace:	d014      	beq.n	8016afa <ip_reass_remove_oldest_datagram+0x76>
        /* Not the same datagram as fraghdr */
        other_datagrams++;
 8016ad0:	693b      	ldr	r3, [r7, #16]
 8016ad2:	3301      	adds	r3, #1
 8016ad4:	613b      	str	r3, [r7, #16]
        if (oldest == NULL) {
 8016ad6:	6a3b      	ldr	r3, [r7, #32]
 8016ad8:	2b00      	cmp	r3, #0
 8016ada:	d104      	bne.n	8016ae6 <ip_reass_remove_oldest_datagram+0x62>
          oldest = r;
 8016adc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8016ade:	623b      	str	r3, [r7, #32]
          oldest_prev = prev;
 8016ae0:	69fb      	ldr	r3, [r7, #28]
 8016ae2:	61bb      	str	r3, [r7, #24]
 8016ae4:	e009      	b.n	8016afa <ip_reass_remove_oldest_datagram+0x76>
        } else if (r->timer <= oldest->timer) {
 8016ae6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8016ae8:	7fda      	ldrb	r2, [r3, #31]
 8016aea:	6a3b      	ldr	r3, [r7, #32]
 8016aec:	7fdb      	ldrb	r3, [r3, #31]
 8016aee:	429a      	cmp	r2, r3
 8016af0:	d803      	bhi.n	8016afa <ip_reass_remove_oldest_datagram+0x76>
          /* older than the previous oldest */
          oldest = r;
 8016af2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8016af4:	623b      	str	r3, [r7, #32]
          oldest_prev = prev;
 8016af6:	69fb      	ldr	r3, [r7, #28]
 8016af8:	61bb      	str	r3, [r7, #24]
        }
      }
      if (r->next != NULL) {
 8016afa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8016afc:	681b      	ldr	r3, [r3, #0]
 8016afe:	2b00      	cmp	r3, #0
 8016b00:	d001      	beq.n	8016b06 <ip_reass_remove_oldest_datagram+0x82>
        prev = r;
 8016b02:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8016b04:	61fb      	str	r3, [r7, #28]
      }
      r = r->next;
 8016b06:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8016b08:	681b      	ldr	r3, [r3, #0]
 8016b0a:	627b      	str	r3, [r7, #36]	; 0x24
    while (r != NULL) {
 8016b0c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8016b0e:	2b00      	cmp	r3, #0
 8016b10:	d1cb      	bne.n	8016aaa <ip_reass_remove_oldest_datagram+0x26>
    }
    if (oldest != NULL) {
 8016b12:	6a3b      	ldr	r3, [r7, #32]
 8016b14:	2b00      	cmp	r3, #0
 8016b16:	d008      	beq.n	8016b2a <ip_reass_remove_oldest_datagram+0xa6>
      pbufs_freed_current = ip_reass_free_complete_datagram(oldest, oldest_prev);
 8016b18:	69b9      	ldr	r1, [r7, #24]
 8016b1a:	6a38      	ldr	r0, [r7, #32]
 8016b1c:	f7ff ff0e 	bl	801693c <ip_reass_free_complete_datagram>
 8016b20:	60f8      	str	r0, [r7, #12]
      pbufs_freed += pbufs_freed_current;
 8016b22:	697a      	ldr	r2, [r7, #20]
 8016b24:	68fb      	ldr	r3, [r7, #12]
 8016b26:	4413      	add	r3, r2
 8016b28:	617b      	str	r3, [r7, #20]
    }
  } while ((pbufs_freed < pbufs_needed) && (other_datagrams > 1));
 8016b2a:	697a      	ldr	r2, [r7, #20]
 8016b2c:	683b      	ldr	r3, [r7, #0]
 8016b2e:	429a      	cmp	r2, r3
 8016b30:	da02      	bge.n	8016b38 <ip_reass_remove_oldest_datagram+0xb4>
 8016b32:	693b      	ldr	r3, [r7, #16]
 8016b34:	2b01      	cmp	r3, #1
 8016b36:	dcac      	bgt.n	8016a92 <ip_reass_remove_oldest_datagram+0xe>
  return pbufs_freed;
 8016b38:	697b      	ldr	r3, [r7, #20]
}
 8016b3a:	4618      	mov	r0, r3
 8016b3c:	3728      	adds	r7, #40	; 0x28
 8016b3e:	46bd      	mov	sp, r7
 8016b40:	bd80      	pop	{r7, pc}
 8016b42:	bf00      	nop
 8016b44:	20008ab0 	.word	0x20008ab0

08016b48 <ip_reass_enqueue_new_datagram>:
 * @param clen number of pbufs needed to enqueue (used for freeing other datagrams if not enough space)
 * @return A pointer to the queue location into which the fragment was enqueued
 */
static struct ip_reassdata *
ip_reass_enqueue_new_datagram(struct ip_hdr *fraghdr, int clen)
{
 8016b48:	b580      	push	{r7, lr}
 8016b4a:	b084      	sub	sp, #16
 8016b4c:	af00      	add	r7, sp, #0
 8016b4e:	6078      	str	r0, [r7, #4]
 8016b50:	6039      	str	r1, [r7, #0]
#if ! IP_REASS_FREE_OLDEST
  LWIP_UNUSED_ARG(clen);
#endif

  /* No matching previous fragment found, allocate a new reassdata struct */
  ipr = (struct ip_reassdata *)memp_malloc(MEMP_REASSDATA);
 8016b52:	2004      	movs	r0, #4
 8016b54:	f7f4 fb02 	bl	800b15c <memp_malloc>
 8016b58:	60f8      	str	r0, [r7, #12]
  if (ipr == NULL) {
 8016b5a:	68fb      	ldr	r3, [r7, #12]
 8016b5c:	2b00      	cmp	r3, #0
 8016b5e:	d110      	bne.n	8016b82 <ip_reass_enqueue_new_datagram+0x3a>
#if IP_REASS_FREE_OLDEST
    if (ip_reass_remove_oldest_datagram(fraghdr, clen) >= clen) {
 8016b60:	6839      	ldr	r1, [r7, #0]
 8016b62:	6878      	ldr	r0, [r7, #4]
 8016b64:	f7ff ff8e 	bl	8016a84 <ip_reass_remove_oldest_datagram>
 8016b68:	4602      	mov	r2, r0
 8016b6a:	683b      	ldr	r3, [r7, #0]
 8016b6c:	4293      	cmp	r3, r2
 8016b6e:	dc03      	bgt.n	8016b78 <ip_reass_enqueue_new_datagram+0x30>
      ipr = (struct ip_reassdata *)memp_malloc(MEMP_REASSDATA);
 8016b70:	2004      	movs	r0, #4
 8016b72:	f7f4 faf3 	bl	800b15c <memp_malloc>
 8016b76:	60f8      	str	r0, [r7, #12]
    }
    if (ipr == NULL)
 8016b78:	68fb      	ldr	r3, [r7, #12]
 8016b7a:	2b00      	cmp	r3, #0
 8016b7c:	d101      	bne.n	8016b82 <ip_reass_enqueue_new_datagram+0x3a>
#endif /* IP_REASS_FREE_OLDEST */
    {
      IPFRAG_STATS_INC(ip_frag.memerr);
      LWIP_DEBUGF(IP_REASS_DEBUG, ("Failed to alloc reassdata struct\n"));
      return NULL;
 8016b7e:	2300      	movs	r3, #0
 8016b80:	e016      	b.n	8016bb0 <ip_reass_enqueue_new_datagram+0x68>
    }
  }
  memset(ipr, 0, sizeof(struct ip_reassdata));
 8016b82:	2220      	movs	r2, #32
 8016b84:	2100      	movs	r1, #0
 8016b86:	68f8      	ldr	r0, [r7, #12]
 8016b88:	f001 fce3 	bl	8018552 <memset>
  ipr->timer = IP_REASS_MAXAGE;
 8016b8c:	68fb      	ldr	r3, [r7, #12]
 8016b8e:	220f      	movs	r2, #15
 8016b90:	77da      	strb	r2, [r3, #31]

  /* enqueue the new structure to the front of the list */
  ipr->next = reassdatagrams;
 8016b92:	4b09      	ldr	r3, [pc, #36]	; (8016bb8 <ip_reass_enqueue_new_datagram+0x70>)
 8016b94:	681a      	ldr	r2, [r3, #0]
 8016b96:	68fb      	ldr	r3, [r7, #12]
 8016b98:	601a      	str	r2, [r3, #0]
  reassdatagrams = ipr;
 8016b9a:	4a07      	ldr	r2, [pc, #28]	; (8016bb8 <ip_reass_enqueue_new_datagram+0x70>)
 8016b9c:	68fb      	ldr	r3, [r7, #12]
 8016b9e:	6013      	str	r3, [r2, #0]
  /* copy the ip header for later tests and input */
  /* @todo: no ip options supported? */
  SMEMCPY(&(ipr->iphdr), fraghdr, IP_HLEN);
 8016ba0:	68fb      	ldr	r3, [r7, #12]
 8016ba2:	3308      	adds	r3, #8
 8016ba4:	2214      	movs	r2, #20
 8016ba6:	6879      	ldr	r1, [r7, #4]
 8016ba8:	4618      	mov	r0, r3
 8016baa:	f001 fd60 	bl	801866e <memcpy>
  return ipr;
 8016bae:	68fb      	ldr	r3, [r7, #12]
}
 8016bb0:	4618      	mov	r0, r3
 8016bb2:	3710      	adds	r7, #16
 8016bb4:	46bd      	mov	sp, r7
 8016bb6:	bd80      	pop	{r7, pc}
 8016bb8:	20008ab0 	.word	0x20008ab0

08016bbc <ip_reass_dequeue_datagram>:
 * Dequeues a datagram from the datagram queue. Doesn't deallocate the pbufs.
 * @param ipr points to the queue entry to dequeue
 */
static void
ip_reass_dequeue_datagram(struct ip_reassdata *ipr, struct ip_reassdata *prev)
{
 8016bbc:	b580      	push	{r7, lr}
 8016bbe:	b082      	sub	sp, #8
 8016bc0:	af00      	add	r7, sp, #0
 8016bc2:	6078      	str	r0, [r7, #4]
 8016bc4:	6039      	str	r1, [r7, #0]
  /* dequeue the reass struct  */
  if (reassdatagrams == ipr) {
 8016bc6:	4b10      	ldr	r3, [pc, #64]	; (8016c08 <ip_reass_dequeue_datagram+0x4c>)
 8016bc8:	681b      	ldr	r3, [r3, #0]
 8016bca:	687a      	ldr	r2, [r7, #4]
 8016bcc:	429a      	cmp	r2, r3
 8016bce:	d104      	bne.n	8016bda <ip_reass_dequeue_datagram+0x1e>
    /* it was the first in the list */
    reassdatagrams = ipr->next;
 8016bd0:	687b      	ldr	r3, [r7, #4]
 8016bd2:	681b      	ldr	r3, [r3, #0]
 8016bd4:	4a0c      	ldr	r2, [pc, #48]	; (8016c08 <ip_reass_dequeue_datagram+0x4c>)
 8016bd6:	6013      	str	r3, [r2, #0]
 8016bd8:	e00d      	b.n	8016bf6 <ip_reass_dequeue_datagram+0x3a>
  } else {
    /* it wasn't the first, so it must have a valid 'prev' */
    LWIP_ASSERT("sanity check linked list", prev != NULL);
 8016bda:	683b      	ldr	r3, [r7, #0]
 8016bdc:	2b00      	cmp	r3, #0
 8016bde:	d106      	bne.n	8016bee <ip_reass_dequeue_datagram+0x32>
 8016be0:	4b0a      	ldr	r3, [pc, #40]	; (8016c0c <ip_reass_dequeue_datagram+0x50>)
 8016be2:	f240 1245 	movw	r2, #325	; 0x145
 8016be6:	490a      	ldr	r1, [pc, #40]	; (8016c10 <ip_reass_dequeue_datagram+0x54>)
 8016be8:	480a      	ldr	r0, [pc, #40]	; (8016c14 <ip_reass_dequeue_datagram+0x58>)
 8016bea:	f001 fc4d 	bl	8018488 <iprintf>
    prev->next = ipr->next;
 8016bee:	687b      	ldr	r3, [r7, #4]
 8016bf0:	681a      	ldr	r2, [r3, #0]
 8016bf2:	683b      	ldr	r3, [r7, #0]
 8016bf4:	601a      	str	r2, [r3, #0]
  }

  /* now we can free the ip_reassdata struct */
  memp_free(MEMP_REASSDATA, ipr);
 8016bf6:	6879      	ldr	r1, [r7, #4]
 8016bf8:	2004      	movs	r0, #4
 8016bfa:	f7f4 fb1f 	bl	800b23c <memp_free>
}
 8016bfe:	bf00      	nop
 8016c00:	3708      	adds	r7, #8
 8016c02:	46bd      	mov	sp, r7
 8016c04:	bd80      	pop	{r7, pc}
 8016c06:	bf00      	nop
 8016c08:	20008ab0 	.word	0x20008ab0
 8016c0c:	0801beac 	.word	0x0801beac
 8016c10:	0801bf74 	.word	0x0801bf74
 8016c14:	0801bef4 	.word	0x0801bef4

08016c18 <ip_reass_chain_frag_into_datagram_and_validate>:
 * @param is_last is 1 if this pbuf has MF==0 (ipr->flags not updated yet)
 * @return see IP_REASS_VALIDATE_* defines
 */
static int
ip_reass_chain_frag_into_datagram_and_validate(struct ip_reassdata *ipr, struct pbuf *new_p, int is_last)
{
 8016c18:	b580      	push	{r7, lr}
 8016c1a:	b08c      	sub	sp, #48	; 0x30
 8016c1c:	af00      	add	r7, sp, #0
 8016c1e:	60f8      	str	r0, [r7, #12]
 8016c20:	60b9      	str	r1, [r7, #8]
 8016c22:	607a      	str	r2, [r7, #4]
  struct ip_reass_helper *iprh, *iprh_tmp, *iprh_prev = NULL;
 8016c24:	2300      	movs	r3, #0
 8016c26:	62bb      	str	r3, [r7, #40]	; 0x28
  struct pbuf *q;
  u16_t offset, len;
  u8_t hlen;
  struct ip_hdr *fraghdr;
  int valid = 1;
 8016c28:	2301      	movs	r3, #1
 8016c2a:	623b      	str	r3, [r7, #32]

  /* Extract length and fragment offset from current fragment */
  fraghdr = (struct ip_hdr *)new_p->payload;
 8016c2c:	68bb      	ldr	r3, [r7, #8]
 8016c2e:	685b      	ldr	r3, [r3, #4]
 8016c30:	61fb      	str	r3, [r7, #28]
  len = lwip_ntohs(IPH_LEN(fraghdr));
 8016c32:	69fb      	ldr	r3, [r7, #28]
 8016c34:	885b      	ldrh	r3, [r3, #2]
 8016c36:	b29b      	uxth	r3, r3
 8016c38:	4618      	mov	r0, r3
 8016c3a:	f7f3 fb29 	bl	800a290 <lwip_htons>
 8016c3e:	4603      	mov	r3, r0
 8016c40:	837b      	strh	r3, [r7, #26]
  hlen = IPH_HL_BYTES(fraghdr);
 8016c42:	69fb      	ldr	r3, [r7, #28]
 8016c44:	781b      	ldrb	r3, [r3, #0]
 8016c46:	f003 030f 	and.w	r3, r3, #15
 8016c4a:	b2db      	uxtb	r3, r3
 8016c4c:	009b      	lsls	r3, r3, #2
 8016c4e:	767b      	strb	r3, [r7, #25]
  if (hlen > len) {
 8016c50:	7e7b      	ldrb	r3, [r7, #25]
 8016c52:	b29b      	uxth	r3, r3
 8016c54:	8b7a      	ldrh	r2, [r7, #26]
 8016c56:	429a      	cmp	r2, r3
 8016c58:	d202      	bcs.n	8016c60 <ip_reass_chain_frag_into_datagram_and_validate+0x48>
    /* invalid datagram */
    return IP_REASS_VALIDATE_PBUF_DROPPED;
 8016c5a:	f04f 33ff 	mov.w	r3, #4294967295
 8016c5e:	e135      	b.n	8016ecc <ip_reass_chain_frag_into_datagram_and_validate+0x2b4>
  }
  len = (u16_t)(len - hlen);
 8016c60:	7e7b      	ldrb	r3, [r7, #25]
 8016c62:	b29b      	uxth	r3, r3
 8016c64:	8b7a      	ldrh	r2, [r7, #26]
 8016c66:	1ad3      	subs	r3, r2, r3
 8016c68:	837b      	strh	r3, [r7, #26]
  offset = IPH_OFFSET_BYTES(fraghdr);
 8016c6a:	69fb      	ldr	r3, [r7, #28]
 8016c6c:	88db      	ldrh	r3, [r3, #6]
 8016c6e:	b29b      	uxth	r3, r3
 8016c70:	4618      	mov	r0, r3
 8016c72:	f7f3 fb0d 	bl	800a290 <lwip_htons>
 8016c76:	4603      	mov	r3, r0
 8016c78:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8016c7c:	b29b      	uxth	r3, r3
 8016c7e:	00db      	lsls	r3, r3, #3
 8016c80:	82fb      	strh	r3, [r7, #22]
  /* overwrite the fragment's ip header from the pbuf with our helper struct,
   * and setup the embedded helper structure. */
  /* make sure the struct ip_reass_helper fits into the IP header */
  LWIP_ASSERT("sizeof(struct ip_reass_helper) <= IP_HLEN",
              sizeof(struct ip_reass_helper) <= IP_HLEN);
  iprh = (struct ip_reass_helper *)new_p->payload;
 8016c82:	68bb      	ldr	r3, [r7, #8]
 8016c84:	685b      	ldr	r3, [r3, #4]
 8016c86:	62fb      	str	r3, [r7, #44]	; 0x2c
  iprh->next_pbuf = NULL;
 8016c88:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8016c8a:	2200      	movs	r2, #0
 8016c8c:	701a      	strb	r2, [r3, #0]
 8016c8e:	2200      	movs	r2, #0
 8016c90:	705a      	strb	r2, [r3, #1]
 8016c92:	2200      	movs	r2, #0
 8016c94:	709a      	strb	r2, [r3, #2]
 8016c96:	2200      	movs	r2, #0
 8016c98:	70da      	strb	r2, [r3, #3]
  iprh->start = offset;
 8016c9a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8016c9c:	8afa      	ldrh	r2, [r7, #22]
 8016c9e:	809a      	strh	r2, [r3, #4]
  iprh->end = (u16_t)(offset + len);
 8016ca0:	8afa      	ldrh	r2, [r7, #22]
 8016ca2:	8b7b      	ldrh	r3, [r7, #26]
 8016ca4:	4413      	add	r3, r2
 8016ca6:	b29a      	uxth	r2, r3
 8016ca8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8016caa:	80da      	strh	r2, [r3, #6]
  if (iprh->end < offset) {
 8016cac:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8016cae:	88db      	ldrh	r3, [r3, #6]
 8016cb0:	b29b      	uxth	r3, r3
 8016cb2:	8afa      	ldrh	r2, [r7, #22]
 8016cb4:	429a      	cmp	r2, r3
 8016cb6:	d902      	bls.n	8016cbe <ip_reass_chain_frag_into_datagram_and_validate+0xa6>
    /* u16_t overflow, cannot handle this */
    return IP_REASS_VALIDATE_PBUF_DROPPED;
 8016cb8:	f04f 33ff 	mov.w	r3, #4294967295
 8016cbc:	e106      	b.n	8016ecc <ip_reass_chain_frag_into_datagram_and_validate+0x2b4>
  }

  /* Iterate through until we either get to the end of the list (append),
   * or we find one with a larger offset (insert). */
  for (q = ipr->p; q != NULL;) {
 8016cbe:	68fb      	ldr	r3, [r7, #12]
 8016cc0:	685b      	ldr	r3, [r3, #4]
 8016cc2:	627b      	str	r3, [r7, #36]	; 0x24
 8016cc4:	e068      	b.n	8016d98 <ip_reass_chain_frag_into_datagram_and_validate+0x180>
    iprh_tmp = (struct ip_reass_helper *)q->payload;
 8016cc6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8016cc8:	685b      	ldr	r3, [r3, #4]
 8016cca:	613b      	str	r3, [r7, #16]
    if (iprh->start < iprh_tmp->start) {
 8016ccc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8016cce:	889b      	ldrh	r3, [r3, #4]
 8016cd0:	b29a      	uxth	r2, r3
 8016cd2:	693b      	ldr	r3, [r7, #16]
 8016cd4:	889b      	ldrh	r3, [r3, #4]
 8016cd6:	b29b      	uxth	r3, r3
 8016cd8:	429a      	cmp	r2, r3
 8016cda:	d235      	bcs.n	8016d48 <ip_reass_chain_frag_into_datagram_and_validate+0x130>
      /* the new pbuf should be inserted before this */
      iprh->next_pbuf = q;
 8016cdc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8016cde:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8016ce0:	601a      	str	r2, [r3, #0]
      if (iprh_prev != NULL) {
 8016ce2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8016ce4:	2b00      	cmp	r3, #0
 8016ce6:	d020      	beq.n	8016d2a <ip_reass_chain_frag_into_datagram_and_validate+0x112>
        /* not the fragment with the lowest offset */
#if IP_REASS_CHECK_OVERLAP
        if ((iprh->start < iprh_prev->end) || (iprh->end > iprh_tmp->start)) {
 8016ce8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8016cea:	889b      	ldrh	r3, [r3, #4]
 8016cec:	b29a      	uxth	r2, r3
 8016cee:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8016cf0:	88db      	ldrh	r3, [r3, #6]
 8016cf2:	b29b      	uxth	r3, r3
 8016cf4:	429a      	cmp	r2, r3
 8016cf6:	d307      	bcc.n	8016d08 <ip_reass_chain_frag_into_datagram_and_validate+0xf0>
 8016cf8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8016cfa:	88db      	ldrh	r3, [r3, #6]
 8016cfc:	b29a      	uxth	r2, r3
 8016cfe:	693b      	ldr	r3, [r7, #16]
 8016d00:	889b      	ldrh	r3, [r3, #4]
 8016d02:	b29b      	uxth	r3, r3
 8016d04:	429a      	cmp	r2, r3
 8016d06:	d902      	bls.n	8016d0e <ip_reass_chain_frag_into_datagram_and_validate+0xf6>
          /* fragment overlaps with previous or following, throw away */
          return IP_REASS_VALIDATE_PBUF_DROPPED;
 8016d08:	f04f 33ff 	mov.w	r3, #4294967295
 8016d0c:	e0de      	b.n	8016ecc <ip_reass_chain_frag_into_datagram_and_validate+0x2b4>
        }
#endif /* IP_REASS_CHECK_OVERLAP */
        iprh_prev->next_pbuf = new_p;
 8016d0e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8016d10:	68ba      	ldr	r2, [r7, #8]
 8016d12:	601a      	str	r2, [r3, #0]
        if (iprh_prev->end != iprh->start) {
 8016d14:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8016d16:	88db      	ldrh	r3, [r3, #6]
 8016d18:	b29a      	uxth	r2, r3
 8016d1a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8016d1c:	889b      	ldrh	r3, [r3, #4]
 8016d1e:	b29b      	uxth	r3, r3
 8016d20:	429a      	cmp	r2, r3
 8016d22:	d03d      	beq.n	8016da0 <ip_reass_chain_frag_into_datagram_and_validate+0x188>
          /* There is a fragment missing between the current
           * and the previous fragment */
          valid = 0;
 8016d24:	2300      	movs	r3, #0
 8016d26:	623b      	str	r3, [r7, #32]
        }
#endif /* IP_REASS_CHECK_OVERLAP */
        /* fragment with the lowest offset */
        ipr->p = new_p;
      }
      break;
 8016d28:	e03a      	b.n	8016da0 <ip_reass_chain_frag_into_datagram_and_validate+0x188>
        if (iprh->end > iprh_tmp->start) {
 8016d2a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8016d2c:	88db      	ldrh	r3, [r3, #6]
 8016d2e:	b29a      	uxth	r2, r3
 8016d30:	693b      	ldr	r3, [r7, #16]
 8016d32:	889b      	ldrh	r3, [r3, #4]
 8016d34:	b29b      	uxth	r3, r3
 8016d36:	429a      	cmp	r2, r3
 8016d38:	d902      	bls.n	8016d40 <ip_reass_chain_frag_into_datagram_and_validate+0x128>
          return IP_REASS_VALIDATE_PBUF_DROPPED;
 8016d3a:	f04f 33ff 	mov.w	r3, #4294967295
 8016d3e:	e0c5      	b.n	8016ecc <ip_reass_chain_frag_into_datagram_and_validate+0x2b4>
        ipr->p = new_p;
 8016d40:	68fb      	ldr	r3, [r7, #12]
 8016d42:	68ba      	ldr	r2, [r7, #8]
 8016d44:	605a      	str	r2, [r3, #4]
      break;
 8016d46:	e02b      	b.n	8016da0 <ip_reass_chain_frag_into_datagram_and_validate+0x188>
    } else if (iprh->start == iprh_tmp->start) {
 8016d48:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8016d4a:	889b      	ldrh	r3, [r3, #4]
 8016d4c:	b29a      	uxth	r2, r3
 8016d4e:	693b      	ldr	r3, [r7, #16]
 8016d50:	889b      	ldrh	r3, [r3, #4]
 8016d52:	b29b      	uxth	r3, r3
 8016d54:	429a      	cmp	r2, r3
 8016d56:	d102      	bne.n	8016d5e <ip_reass_chain_frag_into_datagram_and_validate+0x146>
      /* received the same datagram twice: no need to keep the datagram */
      return IP_REASS_VALIDATE_PBUF_DROPPED;
 8016d58:	f04f 33ff 	mov.w	r3, #4294967295
 8016d5c:	e0b6      	b.n	8016ecc <ip_reass_chain_frag_into_datagram_and_validate+0x2b4>
#if IP_REASS_CHECK_OVERLAP
    } else if (iprh->start < iprh_tmp->end) {
 8016d5e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8016d60:	889b      	ldrh	r3, [r3, #4]
 8016d62:	b29a      	uxth	r2, r3
 8016d64:	693b      	ldr	r3, [r7, #16]
 8016d66:	88db      	ldrh	r3, [r3, #6]
 8016d68:	b29b      	uxth	r3, r3
 8016d6a:	429a      	cmp	r2, r3
 8016d6c:	d202      	bcs.n	8016d74 <ip_reass_chain_frag_into_datagram_and_validate+0x15c>
      /* overlap: no need to keep the new datagram */
      return IP_REASS_VALIDATE_PBUF_DROPPED;
 8016d6e:	f04f 33ff 	mov.w	r3, #4294967295
 8016d72:	e0ab      	b.n	8016ecc <ip_reass_chain_frag_into_datagram_and_validate+0x2b4>
#endif /* IP_REASS_CHECK_OVERLAP */
    } else {
      /* Check if the fragments received so far have no holes. */
      if (iprh_prev != NULL) {
 8016d74:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8016d76:	2b00      	cmp	r3, #0
 8016d78:	d009      	beq.n	8016d8e <ip_reass_chain_frag_into_datagram_and_validate+0x176>
        if (iprh_prev->end != iprh_tmp->start) {
 8016d7a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8016d7c:	88db      	ldrh	r3, [r3, #6]
 8016d7e:	b29a      	uxth	r2, r3
 8016d80:	693b      	ldr	r3, [r7, #16]
 8016d82:	889b      	ldrh	r3, [r3, #4]
 8016d84:	b29b      	uxth	r3, r3
 8016d86:	429a      	cmp	r2, r3
 8016d88:	d001      	beq.n	8016d8e <ip_reass_chain_frag_into_datagram_and_validate+0x176>
          /* There is a fragment missing between the current
           * and the previous fragment */
          valid = 0;
 8016d8a:	2300      	movs	r3, #0
 8016d8c:	623b      	str	r3, [r7, #32]
        }
      }
    }
    q = iprh_tmp->next_pbuf;
 8016d8e:	693b      	ldr	r3, [r7, #16]
 8016d90:	681b      	ldr	r3, [r3, #0]
 8016d92:	627b      	str	r3, [r7, #36]	; 0x24
    iprh_prev = iprh_tmp;
 8016d94:	693b      	ldr	r3, [r7, #16]
 8016d96:	62bb      	str	r3, [r7, #40]	; 0x28
  for (q = ipr->p; q != NULL;) {
 8016d98:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8016d9a:	2b00      	cmp	r3, #0
 8016d9c:	d193      	bne.n	8016cc6 <ip_reass_chain_frag_into_datagram_and_validate+0xae>
 8016d9e:	e000      	b.n	8016da2 <ip_reass_chain_frag_into_datagram_and_validate+0x18a>
      break;
 8016da0:	bf00      	nop
  }

  /* If q is NULL, then we made it to the end of the list. Determine what to do now */
  if (q == NULL) {
 8016da2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8016da4:	2b00      	cmp	r3, #0
 8016da6:	d12d      	bne.n	8016e04 <ip_reass_chain_frag_into_datagram_and_validate+0x1ec>
    if (iprh_prev != NULL) {
 8016da8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8016daa:	2b00      	cmp	r3, #0
 8016dac:	d01c      	beq.n	8016de8 <ip_reass_chain_frag_into_datagram_and_validate+0x1d0>
      /* this is (for now), the fragment with the highest offset:
       * chain it to the last fragment */
#if IP_REASS_CHECK_OVERLAP
      LWIP_ASSERT("check fragments don't overlap", iprh_prev->end <= iprh->start);
 8016dae:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8016db0:	88db      	ldrh	r3, [r3, #6]
 8016db2:	b29a      	uxth	r2, r3
 8016db4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8016db6:	889b      	ldrh	r3, [r3, #4]
 8016db8:	b29b      	uxth	r3, r3
 8016dba:	429a      	cmp	r2, r3
 8016dbc:	d906      	bls.n	8016dcc <ip_reass_chain_frag_into_datagram_and_validate+0x1b4>
 8016dbe:	4b45      	ldr	r3, [pc, #276]	; (8016ed4 <ip_reass_chain_frag_into_datagram_and_validate+0x2bc>)
 8016dc0:	f44f 72db 	mov.w	r2, #438	; 0x1b6
 8016dc4:	4944      	ldr	r1, [pc, #272]	; (8016ed8 <ip_reass_chain_frag_into_datagram_and_validate+0x2c0>)
 8016dc6:	4845      	ldr	r0, [pc, #276]	; (8016edc <ip_reass_chain_frag_into_datagram_and_validate+0x2c4>)
 8016dc8:	f001 fb5e 	bl	8018488 <iprintf>
#endif /* IP_REASS_CHECK_OVERLAP */
      iprh_prev->next_pbuf = new_p;
 8016dcc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8016dce:	68ba      	ldr	r2, [r7, #8]
 8016dd0:	601a      	str	r2, [r3, #0]
      if (iprh_prev->end != iprh->start) {
 8016dd2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8016dd4:	88db      	ldrh	r3, [r3, #6]
 8016dd6:	b29a      	uxth	r2, r3
 8016dd8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8016dda:	889b      	ldrh	r3, [r3, #4]
 8016ddc:	b29b      	uxth	r3, r3
 8016dde:	429a      	cmp	r2, r3
 8016de0:	d010      	beq.n	8016e04 <ip_reass_chain_frag_into_datagram_and_validate+0x1ec>
        valid = 0;
 8016de2:	2300      	movs	r3, #0
 8016de4:	623b      	str	r3, [r7, #32]
 8016de6:	e00d      	b.n	8016e04 <ip_reass_chain_frag_into_datagram_and_validate+0x1ec>
      }
    } else {
#if IP_REASS_CHECK_OVERLAP
      LWIP_ASSERT("no previous fragment, this must be the first fragment!",
 8016de8:	68fb      	ldr	r3, [r7, #12]
 8016dea:	685b      	ldr	r3, [r3, #4]
 8016dec:	2b00      	cmp	r3, #0
 8016dee:	d006      	beq.n	8016dfe <ip_reass_chain_frag_into_datagram_and_validate+0x1e6>
 8016df0:	4b38      	ldr	r3, [pc, #224]	; (8016ed4 <ip_reass_chain_frag_into_datagram_and_validate+0x2bc>)
 8016df2:	f44f 72df 	mov.w	r2, #446	; 0x1be
 8016df6:	493a      	ldr	r1, [pc, #232]	; (8016ee0 <ip_reass_chain_frag_into_datagram_and_validate+0x2c8>)
 8016df8:	4838      	ldr	r0, [pc, #224]	; (8016edc <ip_reass_chain_frag_into_datagram_and_validate+0x2c4>)
 8016dfa:	f001 fb45 	bl	8018488 <iprintf>
                  ipr->p == NULL);
#endif /* IP_REASS_CHECK_OVERLAP */
      /* this is the first fragment we ever received for this ip datagram */
      ipr->p = new_p;
 8016dfe:	68fb      	ldr	r3, [r7, #12]
 8016e00:	68ba      	ldr	r2, [r7, #8]
 8016e02:	605a      	str	r2, [r3, #4]
    }
  }

  /* At this point, the validation part begins: */
  /* If we already received the last fragment */
  if (is_last || ((ipr->flags & IP_REASS_FLAG_LASTFRAG) != 0)) {
 8016e04:	687b      	ldr	r3, [r7, #4]
 8016e06:	2b00      	cmp	r3, #0
 8016e08:	d105      	bne.n	8016e16 <ip_reass_chain_frag_into_datagram_and_validate+0x1fe>
 8016e0a:	68fb      	ldr	r3, [r7, #12]
 8016e0c:	7f9b      	ldrb	r3, [r3, #30]
 8016e0e:	f003 0301 	and.w	r3, r3, #1
 8016e12:	2b00      	cmp	r3, #0
 8016e14:	d059      	beq.n	8016eca <ip_reass_chain_frag_into_datagram_and_validate+0x2b2>
    /* and had no holes so far */
    if (valid) {
 8016e16:	6a3b      	ldr	r3, [r7, #32]
 8016e18:	2b00      	cmp	r3, #0
 8016e1a:	d04f      	beq.n	8016ebc <ip_reass_chain_frag_into_datagram_and_validate+0x2a4>
      /* then check if the rest of the fragments is here */
      /* Check if the queue starts with the first datagram */
      if ((ipr->p == NULL) || (((struct ip_reass_helper *)ipr->p->payload)->start != 0)) {
 8016e1c:	68fb      	ldr	r3, [r7, #12]
 8016e1e:	685b      	ldr	r3, [r3, #4]
 8016e20:	2b00      	cmp	r3, #0
 8016e22:	d006      	beq.n	8016e32 <ip_reass_chain_frag_into_datagram_and_validate+0x21a>
 8016e24:	68fb      	ldr	r3, [r7, #12]
 8016e26:	685b      	ldr	r3, [r3, #4]
 8016e28:	685b      	ldr	r3, [r3, #4]
 8016e2a:	889b      	ldrh	r3, [r3, #4]
 8016e2c:	b29b      	uxth	r3, r3
 8016e2e:	2b00      	cmp	r3, #0
 8016e30:	d002      	beq.n	8016e38 <ip_reass_chain_frag_into_datagram_and_validate+0x220>
        valid = 0;
 8016e32:	2300      	movs	r3, #0
 8016e34:	623b      	str	r3, [r7, #32]
 8016e36:	e041      	b.n	8016ebc <ip_reass_chain_frag_into_datagram_and_validate+0x2a4>
      } else {
        /* and check that there are no holes after this datagram */
        iprh_prev = iprh;
 8016e38:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8016e3a:	62bb      	str	r3, [r7, #40]	; 0x28
        q = iprh->next_pbuf;
 8016e3c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8016e3e:	681b      	ldr	r3, [r3, #0]
 8016e40:	627b      	str	r3, [r7, #36]	; 0x24
        while (q != NULL) {
 8016e42:	e012      	b.n	8016e6a <ip_reass_chain_frag_into_datagram_and_validate+0x252>
          iprh = (struct ip_reass_helper *)q->payload;
 8016e44:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8016e46:	685b      	ldr	r3, [r3, #4]
 8016e48:	62fb      	str	r3, [r7, #44]	; 0x2c
          if (iprh_prev->end != iprh->start) {
 8016e4a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8016e4c:	88db      	ldrh	r3, [r3, #6]
 8016e4e:	b29a      	uxth	r2, r3
 8016e50:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8016e52:	889b      	ldrh	r3, [r3, #4]
 8016e54:	b29b      	uxth	r3, r3
 8016e56:	429a      	cmp	r2, r3
 8016e58:	d002      	beq.n	8016e60 <ip_reass_chain_frag_into_datagram_and_validate+0x248>
            valid = 0;
 8016e5a:	2300      	movs	r3, #0
 8016e5c:	623b      	str	r3, [r7, #32]
            break;
 8016e5e:	e007      	b.n	8016e70 <ip_reass_chain_frag_into_datagram_and_validate+0x258>
          }
          iprh_prev = iprh;
 8016e60:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8016e62:	62bb      	str	r3, [r7, #40]	; 0x28
          q = iprh->next_pbuf;
 8016e64:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8016e66:	681b      	ldr	r3, [r3, #0]
 8016e68:	627b      	str	r3, [r7, #36]	; 0x24
        while (q != NULL) {
 8016e6a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8016e6c:	2b00      	cmp	r3, #0
 8016e6e:	d1e9      	bne.n	8016e44 <ip_reass_chain_frag_into_datagram_and_validate+0x22c>
        }
        /* if still valid, all fragments are received
         * (because to the MF==0 already arrived */
        if (valid) {
 8016e70:	6a3b      	ldr	r3, [r7, #32]
 8016e72:	2b00      	cmp	r3, #0
 8016e74:	d022      	beq.n	8016ebc <ip_reass_chain_frag_into_datagram_and_validate+0x2a4>
          LWIP_ASSERT("sanity check", ipr->p != NULL);
 8016e76:	68fb      	ldr	r3, [r7, #12]
 8016e78:	685b      	ldr	r3, [r3, #4]
 8016e7a:	2b00      	cmp	r3, #0
 8016e7c:	d106      	bne.n	8016e8c <ip_reass_chain_frag_into_datagram_and_validate+0x274>
 8016e7e:	4b15      	ldr	r3, [pc, #84]	; (8016ed4 <ip_reass_chain_frag_into_datagram_and_validate+0x2bc>)
 8016e80:	f240 12df 	movw	r2, #479	; 0x1df
 8016e84:	4917      	ldr	r1, [pc, #92]	; (8016ee4 <ip_reass_chain_frag_into_datagram_and_validate+0x2cc>)
 8016e86:	4815      	ldr	r0, [pc, #84]	; (8016edc <ip_reass_chain_frag_into_datagram_and_validate+0x2c4>)
 8016e88:	f001 fafe 	bl	8018488 <iprintf>
          LWIP_ASSERT("sanity check",
 8016e8c:	68fb      	ldr	r3, [r7, #12]
 8016e8e:	685b      	ldr	r3, [r3, #4]
 8016e90:	685b      	ldr	r3, [r3, #4]
 8016e92:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8016e94:	429a      	cmp	r2, r3
 8016e96:	d106      	bne.n	8016ea6 <ip_reass_chain_frag_into_datagram_and_validate+0x28e>
 8016e98:	4b0e      	ldr	r3, [pc, #56]	; (8016ed4 <ip_reass_chain_frag_into_datagram_and_validate+0x2bc>)
 8016e9a:	f44f 72f0 	mov.w	r2, #480	; 0x1e0
 8016e9e:	4911      	ldr	r1, [pc, #68]	; (8016ee4 <ip_reass_chain_frag_into_datagram_and_validate+0x2cc>)
 8016ea0:	480e      	ldr	r0, [pc, #56]	; (8016edc <ip_reass_chain_frag_into_datagram_and_validate+0x2c4>)
 8016ea2:	f001 faf1 	bl	8018488 <iprintf>
                      ((struct ip_reass_helper *)ipr->p->payload) != iprh);
          LWIP_ASSERT("validate_datagram:next_pbuf!=NULL",
 8016ea6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8016ea8:	681b      	ldr	r3, [r3, #0]
 8016eaa:	2b00      	cmp	r3, #0
 8016eac:	d006      	beq.n	8016ebc <ip_reass_chain_frag_into_datagram_and_validate+0x2a4>
 8016eae:	4b09      	ldr	r3, [pc, #36]	; (8016ed4 <ip_reass_chain_frag_into_datagram_and_validate+0x2bc>)
 8016eb0:	f44f 72f1 	mov.w	r2, #482	; 0x1e2
 8016eb4:	490c      	ldr	r1, [pc, #48]	; (8016ee8 <ip_reass_chain_frag_into_datagram_and_validate+0x2d0>)
 8016eb6:	4809      	ldr	r0, [pc, #36]	; (8016edc <ip_reass_chain_frag_into_datagram_and_validate+0x2c4>)
 8016eb8:	f001 fae6 	bl	8018488 <iprintf>
      }
    }
    /* If valid is 0 here, there are some fragments missing in the middle
     * (since MF == 0 has already arrived). Such datagrams simply time out if
     * no more fragments are received... */
    return valid ? IP_REASS_VALIDATE_TELEGRAM_FINISHED : IP_REASS_VALIDATE_PBUF_QUEUED;
 8016ebc:	6a3b      	ldr	r3, [r7, #32]
 8016ebe:	2b00      	cmp	r3, #0
 8016ec0:	bf14      	ite	ne
 8016ec2:	2301      	movne	r3, #1
 8016ec4:	2300      	moveq	r3, #0
 8016ec6:	b2db      	uxtb	r3, r3
 8016ec8:	e000      	b.n	8016ecc <ip_reass_chain_frag_into_datagram_and_validate+0x2b4>
  }
  /* If we come here, not all fragments were received, yet! */
  return IP_REASS_VALIDATE_PBUF_QUEUED; /* not yet valid! */
 8016eca:	2300      	movs	r3, #0
}
 8016ecc:	4618      	mov	r0, r3
 8016ece:	3730      	adds	r7, #48	; 0x30
 8016ed0:	46bd      	mov	sp, r7
 8016ed2:	bd80      	pop	{r7, pc}
 8016ed4:	0801beac 	.word	0x0801beac
 8016ed8:	0801bf90 	.word	0x0801bf90
 8016edc:	0801bef4 	.word	0x0801bef4
 8016ee0:	0801bfb0 	.word	0x0801bfb0
 8016ee4:	0801bfe8 	.word	0x0801bfe8
 8016ee8:	0801bff8 	.word	0x0801bff8

08016eec <ip4_reass>:
 * @param p points to a pbuf chain of the fragment
 * @return NULL if reassembly is incomplete, ? otherwise
 */
struct pbuf *
ip4_reass(struct pbuf *p)
{
 8016eec:	b580      	push	{r7, lr}
 8016eee:	b08e      	sub	sp, #56	; 0x38
 8016ef0:	af00      	add	r7, sp, #0
 8016ef2:	6078      	str	r0, [r7, #4]
  int is_last;

  IPFRAG_STATS_INC(ip_frag.recv);
  MIB2_STATS_INC(mib2.ipreasmreqds);

  fraghdr = (struct ip_hdr *)p->payload;
 8016ef4:	687b      	ldr	r3, [r7, #4]
 8016ef6:	685b      	ldr	r3, [r3, #4]
 8016ef8:	62bb      	str	r3, [r7, #40]	; 0x28

  if (IPH_HL_BYTES(fraghdr) != IP_HLEN) {
 8016efa:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8016efc:	781b      	ldrb	r3, [r3, #0]
 8016efe:	f003 030f 	and.w	r3, r3, #15
 8016f02:	b2db      	uxtb	r3, r3
 8016f04:	009b      	lsls	r3, r3, #2
 8016f06:	b2db      	uxtb	r3, r3
 8016f08:	2b14      	cmp	r3, #20
 8016f0a:	f040 8171 	bne.w	80171f0 <ip4_reass+0x304>
    LWIP_DEBUGF(IP_REASS_DEBUG, ("ip4_reass: IP options currently not supported!\n"));
    IPFRAG_STATS_INC(ip_frag.err);
    goto nullreturn;
  }

  offset = IPH_OFFSET_BYTES(fraghdr);
 8016f0e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8016f10:	88db      	ldrh	r3, [r3, #6]
 8016f12:	b29b      	uxth	r3, r3
 8016f14:	4618      	mov	r0, r3
 8016f16:	f7f3 f9bb 	bl	800a290 <lwip_htons>
 8016f1a:	4603      	mov	r3, r0
 8016f1c:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8016f20:	b29b      	uxth	r3, r3
 8016f22:	00db      	lsls	r3, r3, #3
 8016f24:	84fb      	strh	r3, [r7, #38]	; 0x26
  len = lwip_ntohs(IPH_LEN(fraghdr));
 8016f26:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8016f28:	885b      	ldrh	r3, [r3, #2]
 8016f2a:	b29b      	uxth	r3, r3
 8016f2c:	4618      	mov	r0, r3
 8016f2e:	f7f3 f9af 	bl	800a290 <lwip_htons>
 8016f32:	4603      	mov	r3, r0
 8016f34:	84bb      	strh	r3, [r7, #36]	; 0x24
  hlen = IPH_HL_BYTES(fraghdr);
 8016f36:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8016f38:	781b      	ldrb	r3, [r3, #0]
 8016f3a:	f003 030f 	and.w	r3, r3, #15
 8016f3e:	b2db      	uxtb	r3, r3
 8016f40:	009b      	lsls	r3, r3, #2
 8016f42:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
  if (hlen > len) {
 8016f46:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8016f4a:	b29b      	uxth	r3, r3
 8016f4c:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 8016f4e:	429a      	cmp	r2, r3
 8016f50:	f0c0 8150 	bcc.w	80171f4 <ip4_reass+0x308>
    /* invalid datagram */
    goto nullreturn;
  }
  len = (u16_t)(len - hlen);
 8016f54:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8016f58:	b29b      	uxth	r3, r3
 8016f5a:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 8016f5c:	1ad3      	subs	r3, r2, r3
 8016f5e:	84bb      	strh	r3, [r7, #36]	; 0x24

  /* Check if we are allowed to enqueue more datagrams. */
  clen = pbuf_clen(p);
 8016f60:	6878      	ldr	r0, [r7, #4]
 8016f62:	f7f5 f875 	bl	800c050 <pbuf_clen>
 8016f66:	4603      	mov	r3, r0
 8016f68:	843b      	strh	r3, [r7, #32]
  if ((ip_reass_pbufcount + clen) > IP_REASS_MAX_PBUFS) {
 8016f6a:	4b8c      	ldr	r3, [pc, #560]	; (801719c <ip4_reass+0x2b0>)
 8016f6c:	881b      	ldrh	r3, [r3, #0]
 8016f6e:	461a      	mov	r2, r3
 8016f70:	8c3b      	ldrh	r3, [r7, #32]
 8016f72:	4413      	add	r3, r2
 8016f74:	2b0a      	cmp	r3, #10
 8016f76:	dd10      	ble.n	8016f9a <ip4_reass+0xae>
#if IP_REASS_FREE_OLDEST
    if (!ip_reass_remove_oldest_datagram(fraghdr, clen) ||
 8016f78:	8c3b      	ldrh	r3, [r7, #32]
 8016f7a:	4619      	mov	r1, r3
 8016f7c:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8016f7e:	f7ff fd81 	bl	8016a84 <ip_reass_remove_oldest_datagram>
 8016f82:	4603      	mov	r3, r0
 8016f84:	2b00      	cmp	r3, #0
 8016f86:	f000 8137 	beq.w	80171f8 <ip4_reass+0x30c>
        ((ip_reass_pbufcount + clen) > IP_REASS_MAX_PBUFS))
 8016f8a:	4b84      	ldr	r3, [pc, #528]	; (801719c <ip4_reass+0x2b0>)
 8016f8c:	881b      	ldrh	r3, [r3, #0]
 8016f8e:	461a      	mov	r2, r3
 8016f90:	8c3b      	ldrh	r3, [r7, #32]
 8016f92:	4413      	add	r3, r2
    if (!ip_reass_remove_oldest_datagram(fraghdr, clen) ||
 8016f94:	2b0a      	cmp	r3, #10
 8016f96:	f300 812f 	bgt.w	80171f8 <ip4_reass+0x30c>
    }
  }

  /* Look for the datagram the fragment belongs to in the current datagram queue,
   * remembering the previous in the queue for later dequeueing. */
  for (ipr = reassdatagrams; ipr != NULL; ipr = ipr->next) {
 8016f9a:	4b81      	ldr	r3, [pc, #516]	; (80171a0 <ip4_reass+0x2b4>)
 8016f9c:	681b      	ldr	r3, [r3, #0]
 8016f9e:	633b      	str	r3, [r7, #48]	; 0x30
 8016fa0:	e015      	b.n	8016fce <ip4_reass+0xe2>
    /* Check if the incoming fragment matches the one currently present
       in the reassembly buffer. If so, we proceed with copying the
       fragment into the buffer. */
    if (IP_ADDRESSES_AND_ID_MATCH(&ipr->iphdr, fraghdr)) {
 8016fa2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8016fa4:	695a      	ldr	r2, [r3, #20]
 8016fa6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8016fa8:	68db      	ldr	r3, [r3, #12]
 8016faa:	429a      	cmp	r2, r3
 8016fac:	d10c      	bne.n	8016fc8 <ip4_reass+0xdc>
 8016fae:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8016fb0:	699a      	ldr	r2, [r3, #24]
 8016fb2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8016fb4:	691b      	ldr	r3, [r3, #16]
 8016fb6:	429a      	cmp	r2, r3
 8016fb8:	d106      	bne.n	8016fc8 <ip4_reass+0xdc>
 8016fba:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8016fbc:	899a      	ldrh	r2, [r3, #12]
 8016fbe:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8016fc0:	889b      	ldrh	r3, [r3, #4]
 8016fc2:	b29b      	uxth	r3, r3
 8016fc4:	429a      	cmp	r2, r3
 8016fc6:	d006      	beq.n	8016fd6 <ip4_reass+0xea>
  for (ipr = reassdatagrams; ipr != NULL; ipr = ipr->next) {
 8016fc8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8016fca:	681b      	ldr	r3, [r3, #0]
 8016fcc:	633b      	str	r3, [r7, #48]	; 0x30
 8016fce:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8016fd0:	2b00      	cmp	r3, #0
 8016fd2:	d1e6      	bne.n	8016fa2 <ip4_reass+0xb6>
 8016fd4:	e000      	b.n	8016fd8 <ip4_reass+0xec>
      LWIP_DEBUGF(IP_REASS_DEBUG, ("ip4_reass: matching previous fragment ID=%"X16_F"\n",
                                   lwip_ntohs(IPH_ID(fraghdr))));
      IPFRAG_STATS_INC(ip_frag.cachehit);
      break;
 8016fd6:	bf00      	nop
    }
  }

  if (ipr == NULL) {
 8016fd8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8016fda:	2b00      	cmp	r3, #0
 8016fdc:	d109      	bne.n	8016ff2 <ip4_reass+0x106>
    /* Enqueue a new datagram into the datagram queue */
    ipr = ip_reass_enqueue_new_datagram(fraghdr, clen);
 8016fde:	8c3b      	ldrh	r3, [r7, #32]
 8016fe0:	4619      	mov	r1, r3
 8016fe2:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8016fe4:	f7ff fdb0 	bl	8016b48 <ip_reass_enqueue_new_datagram>
 8016fe8:	6338      	str	r0, [r7, #48]	; 0x30
    /* Bail if unable to enqueue */
    if (ipr == NULL) {
 8016fea:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8016fec:	2b00      	cmp	r3, #0
 8016fee:	d11c      	bne.n	801702a <ip4_reass+0x13e>
      goto nullreturn;
 8016ff0:	e105      	b.n	80171fe <ip4_reass+0x312>
    }
  } else {
    if (((lwip_ntohs(IPH_OFFSET(fraghdr)) & IP_OFFMASK) == 0) &&
 8016ff2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8016ff4:	88db      	ldrh	r3, [r3, #6]
 8016ff6:	b29b      	uxth	r3, r3
 8016ff8:	4618      	mov	r0, r3
 8016ffa:	f7f3 f949 	bl	800a290 <lwip_htons>
 8016ffe:	4603      	mov	r3, r0
 8017000:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8017004:	2b00      	cmp	r3, #0
 8017006:	d110      	bne.n	801702a <ip4_reass+0x13e>
        ((lwip_ntohs(IPH_OFFSET(&ipr->iphdr)) & IP_OFFMASK) != 0)) {
 8017008:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801700a:	89db      	ldrh	r3, [r3, #14]
 801700c:	4618      	mov	r0, r3
 801700e:	f7f3 f93f 	bl	800a290 <lwip_htons>
 8017012:	4603      	mov	r3, r0
 8017014:	f3c3 030c 	ubfx	r3, r3, #0, #13
    if (((lwip_ntohs(IPH_OFFSET(fraghdr)) & IP_OFFMASK) == 0) &&
 8017018:	2b00      	cmp	r3, #0
 801701a:	d006      	beq.n	801702a <ip4_reass+0x13e>
      /* ipr->iphdr is not the header from the first fragment, but fraghdr is
       * -> copy fraghdr into ipr->iphdr since we want to have the header
       * of the first fragment (for ICMP time exceeded and later, for copying
       * all options, if supported)*/
      SMEMCPY(&ipr->iphdr, fraghdr, IP_HLEN);
 801701c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801701e:	3308      	adds	r3, #8
 8017020:	2214      	movs	r2, #20
 8017022:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8017024:	4618      	mov	r0, r3
 8017026:	f001 fb22 	bl	801866e <memcpy>

  /* At this point, we have either created a new entry or pointing
   * to an existing one */

  /* check for 'no more fragments', and update queue entry*/
  is_last = (IPH_OFFSET(fraghdr) & PP_NTOHS(IP_MF)) == 0;
 801702a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801702c:	88db      	ldrh	r3, [r3, #6]
 801702e:	b29b      	uxth	r3, r3
 8017030:	f003 0320 	and.w	r3, r3, #32
 8017034:	2b00      	cmp	r3, #0
 8017036:	bf0c      	ite	eq
 8017038:	2301      	moveq	r3, #1
 801703a:	2300      	movne	r3, #0
 801703c:	b2db      	uxtb	r3, r3
 801703e:	61fb      	str	r3, [r7, #28]
  if (is_last) {
 8017040:	69fb      	ldr	r3, [r7, #28]
 8017042:	2b00      	cmp	r3, #0
 8017044:	d00e      	beq.n	8017064 <ip4_reass+0x178>
    u16_t datagram_len = (u16_t)(offset + len);
 8017046:	8cfa      	ldrh	r2, [r7, #38]	; 0x26
 8017048:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 801704a:	4413      	add	r3, r2
 801704c:	837b      	strh	r3, [r7, #26]
    if ((datagram_len < offset) || (datagram_len > (0xFFFF - IP_HLEN))) {
 801704e:	8b7a      	ldrh	r2, [r7, #26]
 8017050:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 8017052:	429a      	cmp	r2, r3
 8017054:	f0c0 80a0 	bcc.w	8017198 <ip4_reass+0x2ac>
 8017058:	8b7b      	ldrh	r3, [r7, #26]
 801705a:	f64f 72eb 	movw	r2, #65515	; 0xffeb
 801705e:	4293      	cmp	r3, r2
 8017060:	f200 809a 	bhi.w	8017198 <ip4_reass+0x2ac>
      goto nullreturn_ipr;
    }
  }
  /* find the right place to insert this pbuf */
  /* @todo: trim pbufs if fragments are overlapping */
  valid = ip_reass_chain_frag_into_datagram_and_validate(ipr, p, is_last);
 8017064:	69fa      	ldr	r2, [r7, #28]
 8017066:	6879      	ldr	r1, [r7, #4]
 8017068:	6b38      	ldr	r0, [r7, #48]	; 0x30
 801706a:	f7ff fdd5 	bl	8016c18 <ip_reass_chain_frag_into_datagram_and_validate>
 801706e:	6178      	str	r0, [r7, #20]
  if (valid == IP_REASS_VALIDATE_PBUF_DROPPED) {
 8017070:	697b      	ldr	r3, [r7, #20]
 8017072:	f1b3 3fff 	cmp.w	r3, #4294967295
 8017076:	f000 809b 	beq.w	80171b0 <ip4_reass+0x2c4>
  /* if we come here, the pbuf has been enqueued */

  /* Track the current number of pbufs current 'in-flight', in order to limit
     the number of fragments that may be enqueued at any one time
     (overflow checked by testing against IP_REASS_MAX_PBUFS) */
  ip_reass_pbufcount = (u16_t)(ip_reass_pbufcount + clen);
 801707a:	4b48      	ldr	r3, [pc, #288]	; (801719c <ip4_reass+0x2b0>)
 801707c:	881a      	ldrh	r2, [r3, #0]
 801707e:	8c3b      	ldrh	r3, [r7, #32]
 8017080:	4413      	add	r3, r2
 8017082:	b29a      	uxth	r2, r3
 8017084:	4b45      	ldr	r3, [pc, #276]	; (801719c <ip4_reass+0x2b0>)
 8017086:	801a      	strh	r2, [r3, #0]
  if (is_last) {
 8017088:	69fb      	ldr	r3, [r7, #28]
 801708a:	2b00      	cmp	r3, #0
 801708c:	d00d      	beq.n	80170aa <ip4_reass+0x1be>
    u16_t datagram_len = (u16_t)(offset + len);
 801708e:	8cfa      	ldrh	r2, [r7, #38]	; 0x26
 8017090:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8017092:	4413      	add	r3, r2
 8017094:	827b      	strh	r3, [r7, #18]
    ipr->datagram_len = datagram_len;
 8017096:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8017098:	8a7a      	ldrh	r2, [r7, #18]
 801709a:	839a      	strh	r2, [r3, #28]
    ipr->flags |= IP_REASS_FLAG_LASTFRAG;
 801709c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801709e:	7f9b      	ldrb	r3, [r3, #30]
 80170a0:	f043 0301 	orr.w	r3, r3, #1
 80170a4:	b2da      	uxtb	r2, r3
 80170a6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80170a8:	779a      	strb	r2, [r3, #30]
    LWIP_DEBUGF(IP_REASS_DEBUG,
                ("ip4_reass: last fragment seen, total len %"S16_F"\n",
                 ipr->datagram_len));
  }

  if (valid == IP_REASS_VALIDATE_TELEGRAM_FINISHED) {
 80170aa:	697b      	ldr	r3, [r7, #20]
 80170ac:	2b01      	cmp	r3, #1
 80170ae:	d171      	bne.n	8017194 <ip4_reass+0x2a8>
    struct ip_reassdata *ipr_prev;
    /* the totally last fragment (flag more fragments = 0) was received at least
     * once AND all fragments are received */
    u16_t datagram_len = (u16_t)(ipr->datagram_len + IP_HLEN);
 80170b0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80170b2:	8b9b      	ldrh	r3, [r3, #28]
 80170b4:	3314      	adds	r3, #20
 80170b6:	823b      	strh	r3, [r7, #16]

    /* save the second pbuf before copying the header over the pointer */
    r = ((struct ip_reass_helper *)ipr->p->payload)->next_pbuf;
 80170b8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80170ba:	685b      	ldr	r3, [r3, #4]
 80170bc:	685b      	ldr	r3, [r3, #4]
 80170be:	681b      	ldr	r3, [r3, #0]
 80170c0:	637b      	str	r3, [r7, #52]	; 0x34

    /* copy the original ip header back to the first pbuf */
    fraghdr = (struct ip_hdr *)(ipr->p->payload);
 80170c2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80170c4:	685b      	ldr	r3, [r3, #4]
 80170c6:	685b      	ldr	r3, [r3, #4]
 80170c8:	62bb      	str	r3, [r7, #40]	; 0x28
    SMEMCPY(fraghdr, &ipr->iphdr, IP_HLEN);
 80170ca:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80170cc:	3308      	adds	r3, #8
 80170ce:	2214      	movs	r2, #20
 80170d0:	4619      	mov	r1, r3
 80170d2:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80170d4:	f001 facb 	bl	801866e <memcpy>
    IPH_LEN_SET(fraghdr, lwip_htons(datagram_len));
 80170d8:	8a3b      	ldrh	r3, [r7, #16]
 80170da:	4618      	mov	r0, r3
 80170dc:	f7f3 f8d8 	bl	800a290 <lwip_htons>
 80170e0:	4603      	mov	r3, r0
 80170e2:	461a      	mov	r2, r3
 80170e4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80170e6:	805a      	strh	r2, [r3, #2]
    IPH_OFFSET_SET(fraghdr, 0);
 80170e8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80170ea:	2200      	movs	r2, #0
 80170ec:	719a      	strb	r2, [r3, #6]
 80170ee:	2200      	movs	r2, #0
 80170f0:	71da      	strb	r2, [r3, #7]
    IPH_CHKSUM_SET(fraghdr, 0);
 80170f2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80170f4:	2200      	movs	r2, #0
 80170f6:	729a      	strb	r2, [r3, #10]
 80170f8:	2200      	movs	r2, #0
 80170fa:	72da      	strb	r2, [r3, #11]
    IF__NETIF_CHECKSUM_ENABLED(ip_current_input_netif(), NETIF_CHECKSUM_GEN_IP) {
      IPH_CHKSUM_SET(fraghdr, inet_chksum(fraghdr, IP_HLEN));
    }
#endif /* CHECKSUM_GEN_IP */

    p = ipr->p;
 80170fc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80170fe:	685b      	ldr	r3, [r3, #4]
 8017100:	607b      	str	r3, [r7, #4]

    /* chain together the pbufs contained within the reass_data list. */
    while (r != NULL) {
 8017102:	e00d      	b.n	8017120 <ip4_reass+0x234>
      iprh = (struct ip_reass_helper *)r->payload;
 8017104:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8017106:	685b      	ldr	r3, [r3, #4]
 8017108:	60fb      	str	r3, [r7, #12]

      /* hide the ip header for every succeeding fragment */
      pbuf_remove_header(r, IP_HLEN);
 801710a:	2114      	movs	r1, #20
 801710c:	6b78      	ldr	r0, [r7, #52]	; 0x34
 801710e:	f7f4 fe91 	bl	800be34 <pbuf_remove_header>
      pbuf_cat(p, r);
 8017112:	6b79      	ldr	r1, [r7, #52]	; 0x34
 8017114:	6878      	ldr	r0, [r7, #4]
 8017116:	f7f4 ffd5 	bl	800c0c4 <pbuf_cat>
      r = iprh->next_pbuf;
 801711a:	68fb      	ldr	r3, [r7, #12]
 801711c:	681b      	ldr	r3, [r3, #0]
 801711e:	637b      	str	r3, [r7, #52]	; 0x34
    while (r != NULL) {
 8017120:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8017122:	2b00      	cmp	r3, #0
 8017124:	d1ee      	bne.n	8017104 <ip4_reass+0x218>
    }

    /* find the previous entry in the linked list */
    if (ipr == reassdatagrams) {
 8017126:	4b1e      	ldr	r3, [pc, #120]	; (80171a0 <ip4_reass+0x2b4>)
 8017128:	681b      	ldr	r3, [r3, #0]
 801712a:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 801712c:	429a      	cmp	r2, r3
 801712e:	d102      	bne.n	8017136 <ip4_reass+0x24a>
      ipr_prev = NULL;
 8017130:	2300      	movs	r3, #0
 8017132:	62fb      	str	r3, [r7, #44]	; 0x2c
 8017134:	e010      	b.n	8017158 <ip4_reass+0x26c>
    } else {
      for (ipr_prev = reassdatagrams; ipr_prev != NULL; ipr_prev = ipr_prev->next) {
 8017136:	4b1a      	ldr	r3, [pc, #104]	; (80171a0 <ip4_reass+0x2b4>)
 8017138:	681b      	ldr	r3, [r3, #0]
 801713a:	62fb      	str	r3, [r7, #44]	; 0x2c
 801713c:	e007      	b.n	801714e <ip4_reass+0x262>
        if (ipr_prev->next == ipr) {
 801713e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8017140:	681b      	ldr	r3, [r3, #0]
 8017142:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8017144:	429a      	cmp	r2, r3
 8017146:	d006      	beq.n	8017156 <ip4_reass+0x26a>
      for (ipr_prev = reassdatagrams; ipr_prev != NULL; ipr_prev = ipr_prev->next) {
 8017148:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801714a:	681b      	ldr	r3, [r3, #0]
 801714c:	62fb      	str	r3, [r7, #44]	; 0x2c
 801714e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8017150:	2b00      	cmp	r3, #0
 8017152:	d1f4      	bne.n	801713e <ip4_reass+0x252>
 8017154:	e000      	b.n	8017158 <ip4_reass+0x26c>
          break;
 8017156:	bf00      	nop
        }
      }
    }

    /* release the sources allocate for the fragment queue entry */
    ip_reass_dequeue_datagram(ipr, ipr_prev);
 8017158:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 801715a:	6b38      	ldr	r0, [r7, #48]	; 0x30
 801715c:	f7ff fd2e 	bl	8016bbc <ip_reass_dequeue_datagram>

    /* and adjust the number of pbufs currently queued for reassembly. */
    clen = pbuf_clen(p);
 8017160:	6878      	ldr	r0, [r7, #4]
 8017162:	f7f4 ff75 	bl	800c050 <pbuf_clen>
 8017166:	4603      	mov	r3, r0
 8017168:	843b      	strh	r3, [r7, #32]
    LWIP_ASSERT("ip_reass_pbufcount >= clen", ip_reass_pbufcount >= clen);
 801716a:	4b0c      	ldr	r3, [pc, #48]	; (801719c <ip4_reass+0x2b0>)
 801716c:	881b      	ldrh	r3, [r3, #0]
 801716e:	8c3a      	ldrh	r2, [r7, #32]
 8017170:	429a      	cmp	r2, r3
 8017172:	d906      	bls.n	8017182 <ip4_reass+0x296>
 8017174:	4b0b      	ldr	r3, [pc, #44]	; (80171a4 <ip4_reass+0x2b8>)
 8017176:	f240 229b 	movw	r2, #667	; 0x29b
 801717a:	490b      	ldr	r1, [pc, #44]	; (80171a8 <ip4_reass+0x2bc>)
 801717c:	480b      	ldr	r0, [pc, #44]	; (80171ac <ip4_reass+0x2c0>)
 801717e:	f001 f983 	bl	8018488 <iprintf>
    ip_reass_pbufcount = (u16_t)(ip_reass_pbufcount - clen);
 8017182:	4b06      	ldr	r3, [pc, #24]	; (801719c <ip4_reass+0x2b0>)
 8017184:	881a      	ldrh	r2, [r3, #0]
 8017186:	8c3b      	ldrh	r3, [r7, #32]
 8017188:	1ad3      	subs	r3, r2, r3
 801718a:	b29a      	uxth	r2, r3
 801718c:	4b03      	ldr	r3, [pc, #12]	; (801719c <ip4_reass+0x2b0>)
 801718e:	801a      	strh	r2, [r3, #0]

    MIB2_STATS_INC(mib2.ipreasmoks);

    /* Return the pbuf chain */
    return p;
 8017190:	687b      	ldr	r3, [r7, #4]
 8017192:	e038      	b.n	8017206 <ip4_reass+0x31a>
  }
  /* the datagram is not (yet?) reassembled completely */
  LWIP_DEBUGF(IP_REASS_DEBUG, ("ip_reass_pbufcount: %d out\n", ip_reass_pbufcount));
  return NULL;
 8017194:	2300      	movs	r3, #0
 8017196:	e036      	b.n	8017206 <ip4_reass+0x31a>
      goto nullreturn_ipr;
 8017198:	bf00      	nop
 801719a:	e00a      	b.n	80171b2 <ip4_reass+0x2c6>
 801719c:	20008ab4 	.word	0x20008ab4
 80171a0:	20008ab0 	.word	0x20008ab0
 80171a4:	0801beac 	.word	0x0801beac
 80171a8:	0801c01c 	.word	0x0801c01c
 80171ac:	0801bef4 	.word	0x0801bef4
    goto nullreturn_ipr;
 80171b0:	bf00      	nop

nullreturn_ipr:
  LWIP_ASSERT("ipr != NULL", ipr != NULL);
 80171b2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80171b4:	2b00      	cmp	r3, #0
 80171b6:	d106      	bne.n	80171c6 <ip4_reass+0x2da>
 80171b8:	4b15      	ldr	r3, [pc, #84]	; (8017210 <ip4_reass+0x324>)
 80171ba:	f44f 722a 	mov.w	r2, #680	; 0x2a8
 80171be:	4915      	ldr	r1, [pc, #84]	; (8017214 <ip4_reass+0x328>)
 80171c0:	4815      	ldr	r0, [pc, #84]	; (8017218 <ip4_reass+0x32c>)
 80171c2:	f001 f961 	bl	8018488 <iprintf>
  if (ipr->p == NULL) {
 80171c6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80171c8:	685b      	ldr	r3, [r3, #4]
 80171ca:	2b00      	cmp	r3, #0
 80171cc:	d116      	bne.n	80171fc <ip4_reass+0x310>
    /* dropped pbuf after creating a new datagram entry: remove the entry, too */
    LWIP_ASSERT("not firstalthough just enqueued", ipr == reassdatagrams);
 80171ce:	4b13      	ldr	r3, [pc, #76]	; (801721c <ip4_reass+0x330>)
 80171d0:	681b      	ldr	r3, [r3, #0]
 80171d2:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80171d4:	429a      	cmp	r2, r3
 80171d6:	d006      	beq.n	80171e6 <ip4_reass+0x2fa>
 80171d8:	4b0d      	ldr	r3, [pc, #52]	; (8017210 <ip4_reass+0x324>)
 80171da:	f240 22ab 	movw	r2, #683	; 0x2ab
 80171de:	4910      	ldr	r1, [pc, #64]	; (8017220 <ip4_reass+0x334>)
 80171e0:	480d      	ldr	r0, [pc, #52]	; (8017218 <ip4_reass+0x32c>)
 80171e2:	f001 f951 	bl	8018488 <iprintf>
    ip_reass_dequeue_datagram(ipr, NULL);
 80171e6:	2100      	movs	r1, #0
 80171e8:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80171ea:	f7ff fce7 	bl	8016bbc <ip_reass_dequeue_datagram>
 80171ee:	e006      	b.n	80171fe <ip4_reass+0x312>
    goto nullreturn;
 80171f0:	bf00      	nop
 80171f2:	e004      	b.n	80171fe <ip4_reass+0x312>
    goto nullreturn;
 80171f4:	bf00      	nop
 80171f6:	e002      	b.n	80171fe <ip4_reass+0x312>
      goto nullreturn;
 80171f8:	bf00      	nop
 80171fa:	e000      	b.n	80171fe <ip4_reass+0x312>
  }

nullreturn:
 80171fc:	bf00      	nop
  LWIP_DEBUGF(IP_REASS_DEBUG, ("ip4_reass: nullreturn\n"));
  IPFRAG_STATS_INC(ip_frag.drop);
  pbuf_free(p);
 80171fe:	6878      	ldr	r0, [r7, #4]
 8017200:	f7f4 fe9e 	bl	800bf40 <pbuf_free>
  return NULL;
 8017204:	2300      	movs	r3, #0
}
 8017206:	4618      	mov	r0, r3
 8017208:	3738      	adds	r7, #56	; 0x38
 801720a:	46bd      	mov	sp, r7
 801720c:	bd80      	pop	{r7, pc}
 801720e:	bf00      	nop
 8017210:	0801beac 	.word	0x0801beac
 8017214:	0801c038 	.word	0x0801c038
 8017218:	0801bef4 	.word	0x0801bef4
 801721c:	20008ab0 	.word	0x20008ab0
 8017220:	0801c044 	.word	0x0801c044

08017224 <ip_frag_alloc_pbuf_custom_ref>:
#if IP_FRAG
#if !LWIP_NETIF_TX_SINGLE_PBUF
/** Allocate a new struct pbuf_custom_ref */
static struct pbuf_custom_ref *
ip_frag_alloc_pbuf_custom_ref(void)
{
 8017224:	b580      	push	{r7, lr}
 8017226:	af00      	add	r7, sp, #0
  return (struct pbuf_custom_ref *)memp_malloc(MEMP_FRAG_PBUF);
 8017228:	2005      	movs	r0, #5
 801722a:	f7f3 ff97 	bl	800b15c <memp_malloc>
 801722e:	4603      	mov	r3, r0
}
 8017230:	4618      	mov	r0, r3
 8017232:	bd80      	pop	{r7, pc}

08017234 <ip_frag_free_pbuf_custom_ref>:

/** Free a struct pbuf_custom_ref */
static void
ip_frag_free_pbuf_custom_ref(struct pbuf_custom_ref *p)
{
 8017234:	b580      	push	{r7, lr}
 8017236:	b082      	sub	sp, #8
 8017238:	af00      	add	r7, sp, #0
 801723a:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("p != NULL", p != NULL);
 801723c:	687b      	ldr	r3, [r7, #4]
 801723e:	2b00      	cmp	r3, #0
 8017240:	d106      	bne.n	8017250 <ip_frag_free_pbuf_custom_ref+0x1c>
 8017242:	4b07      	ldr	r3, [pc, #28]	; (8017260 <ip_frag_free_pbuf_custom_ref+0x2c>)
 8017244:	f44f 7231 	mov.w	r2, #708	; 0x2c4
 8017248:	4906      	ldr	r1, [pc, #24]	; (8017264 <ip_frag_free_pbuf_custom_ref+0x30>)
 801724a:	4807      	ldr	r0, [pc, #28]	; (8017268 <ip_frag_free_pbuf_custom_ref+0x34>)
 801724c:	f001 f91c 	bl	8018488 <iprintf>
  memp_free(MEMP_FRAG_PBUF, p);
 8017250:	6879      	ldr	r1, [r7, #4]
 8017252:	2005      	movs	r0, #5
 8017254:	f7f3 fff2 	bl	800b23c <memp_free>
}
 8017258:	bf00      	nop
 801725a:	3708      	adds	r7, #8
 801725c:	46bd      	mov	sp, r7
 801725e:	bd80      	pop	{r7, pc}
 8017260:	0801beac 	.word	0x0801beac
 8017264:	0801c064 	.word	0x0801c064
 8017268:	0801bef4 	.word	0x0801bef4

0801726c <ipfrag_free_pbuf_custom>:

/** Free-callback function to free a 'struct pbuf_custom_ref', called by
 * pbuf_free. */
static void
ipfrag_free_pbuf_custom(struct pbuf *p)
{
 801726c:	b580      	push	{r7, lr}
 801726e:	b084      	sub	sp, #16
 8017270:	af00      	add	r7, sp, #0
 8017272:	6078      	str	r0, [r7, #4]
  struct pbuf_custom_ref *pcr = (struct pbuf_custom_ref *)p;
 8017274:	687b      	ldr	r3, [r7, #4]
 8017276:	60fb      	str	r3, [r7, #12]
  LWIP_ASSERT("pcr != NULL", pcr != NULL);
 8017278:	68fb      	ldr	r3, [r7, #12]
 801727a:	2b00      	cmp	r3, #0
 801727c:	d106      	bne.n	801728c <ipfrag_free_pbuf_custom+0x20>
 801727e:	4b11      	ldr	r3, [pc, #68]	; (80172c4 <ipfrag_free_pbuf_custom+0x58>)
 8017280:	f240 22ce 	movw	r2, #718	; 0x2ce
 8017284:	4910      	ldr	r1, [pc, #64]	; (80172c8 <ipfrag_free_pbuf_custom+0x5c>)
 8017286:	4811      	ldr	r0, [pc, #68]	; (80172cc <ipfrag_free_pbuf_custom+0x60>)
 8017288:	f001 f8fe 	bl	8018488 <iprintf>
  LWIP_ASSERT("pcr == p", (void *)pcr == (void *)p);
 801728c:	68fa      	ldr	r2, [r7, #12]
 801728e:	687b      	ldr	r3, [r7, #4]
 8017290:	429a      	cmp	r2, r3
 8017292:	d006      	beq.n	80172a2 <ipfrag_free_pbuf_custom+0x36>
 8017294:	4b0b      	ldr	r3, [pc, #44]	; (80172c4 <ipfrag_free_pbuf_custom+0x58>)
 8017296:	f240 22cf 	movw	r2, #719	; 0x2cf
 801729a:	490d      	ldr	r1, [pc, #52]	; (80172d0 <ipfrag_free_pbuf_custom+0x64>)
 801729c:	480b      	ldr	r0, [pc, #44]	; (80172cc <ipfrag_free_pbuf_custom+0x60>)
 801729e:	f001 f8f3 	bl	8018488 <iprintf>
  if (pcr->original != NULL) {
 80172a2:	68fb      	ldr	r3, [r7, #12]
 80172a4:	695b      	ldr	r3, [r3, #20]
 80172a6:	2b00      	cmp	r3, #0
 80172a8:	d004      	beq.n	80172b4 <ipfrag_free_pbuf_custom+0x48>
    pbuf_free(pcr->original);
 80172aa:	68fb      	ldr	r3, [r7, #12]
 80172ac:	695b      	ldr	r3, [r3, #20]
 80172ae:	4618      	mov	r0, r3
 80172b0:	f7f4 fe46 	bl	800bf40 <pbuf_free>
  }
  ip_frag_free_pbuf_custom_ref(pcr);
 80172b4:	68f8      	ldr	r0, [r7, #12]
 80172b6:	f7ff ffbd 	bl	8017234 <ip_frag_free_pbuf_custom_ref>
}
 80172ba:	bf00      	nop
 80172bc:	3710      	adds	r7, #16
 80172be:	46bd      	mov	sp, r7
 80172c0:	bd80      	pop	{r7, pc}
 80172c2:	bf00      	nop
 80172c4:	0801beac 	.word	0x0801beac
 80172c8:	0801c070 	.word	0x0801c070
 80172cc:	0801bef4 	.word	0x0801bef4
 80172d0:	0801c07c 	.word	0x0801c07c

080172d4 <ip4_frag>:
 *
 * @return ERR_OK if sent successfully, err_t otherwise
 */
err_t
ip4_frag(struct pbuf *p, struct netif *netif, const ip4_addr_t *dest)
{
 80172d4:	b580      	push	{r7, lr}
 80172d6:	b094      	sub	sp, #80	; 0x50
 80172d8:	af02      	add	r7, sp, #8
 80172da:	60f8      	str	r0, [r7, #12]
 80172dc:	60b9      	str	r1, [r7, #8]
 80172de:	607a      	str	r2, [r7, #4]
  struct pbuf *rambuf;
#if !LWIP_NETIF_TX_SINGLE_PBUF
  struct pbuf *newpbuf;
  u16_t newpbuflen = 0;
 80172e0:	2300      	movs	r3, #0
 80172e2:	f8a7 3046 	strh.w	r3, [r7, #70]	; 0x46
  u16_t left_to_copy;
#endif
  struct ip_hdr *original_iphdr;
  struct ip_hdr *iphdr;
  const u16_t nfb = (u16_t)((netif->mtu - IP_HLEN) / 8);
 80172e6:	68bb      	ldr	r3, [r7, #8]
 80172e8:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80172ea:	3b14      	subs	r3, #20
 80172ec:	2b00      	cmp	r3, #0
 80172ee:	da00      	bge.n	80172f2 <ip4_frag+0x1e>
 80172f0:	3307      	adds	r3, #7
 80172f2:	10db      	asrs	r3, r3, #3
 80172f4:	877b      	strh	r3, [r7, #58]	; 0x3a
  u16_t left, fragsize;
  u16_t ofo;
  int last;
  u16_t poff = IP_HLEN;
 80172f6:	2314      	movs	r3, #20
 80172f8:	87fb      	strh	r3, [r7, #62]	; 0x3e
  u16_t tmp;
  int mf_set;

  original_iphdr = (struct ip_hdr *)p->payload;
 80172fa:	68fb      	ldr	r3, [r7, #12]
 80172fc:	685b      	ldr	r3, [r3, #4]
 80172fe:	637b      	str	r3, [r7, #52]	; 0x34
  iphdr = original_iphdr;
 8017300:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8017302:	633b      	str	r3, [r7, #48]	; 0x30
  if (IPH_HL_BYTES(iphdr) != IP_HLEN) {
 8017304:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8017306:	781b      	ldrb	r3, [r3, #0]
 8017308:	f003 030f 	and.w	r3, r3, #15
 801730c:	b2db      	uxtb	r3, r3
 801730e:	009b      	lsls	r3, r3, #2
 8017310:	b2db      	uxtb	r3, r3
 8017312:	2b14      	cmp	r3, #20
 8017314:	d002      	beq.n	801731c <ip4_frag+0x48>
    /* ip4_frag() does not support IP options */
    return ERR_VAL;
 8017316:	f06f 0305 	mvn.w	r3, #5
 801731a:	e110      	b.n	801753e <ip4_frag+0x26a>
  }
  LWIP_ERROR("ip4_frag(): pbuf too short", p->len >= IP_HLEN, return ERR_VAL);
 801731c:	68fb      	ldr	r3, [r7, #12]
 801731e:	895b      	ldrh	r3, [r3, #10]
 8017320:	2b13      	cmp	r3, #19
 8017322:	d809      	bhi.n	8017338 <ip4_frag+0x64>
 8017324:	4b88      	ldr	r3, [pc, #544]	; (8017548 <ip4_frag+0x274>)
 8017326:	f44f 723f 	mov.w	r2, #764	; 0x2fc
 801732a:	4988      	ldr	r1, [pc, #544]	; (801754c <ip4_frag+0x278>)
 801732c:	4888      	ldr	r0, [pc, #544]	; (8017550 <ip4_frag+0x27c>)
 801732e:	f001 f8ab 	bl	8018488 <iprintf>
 8017332:	f06f 0305 	mvn.w	r3, #5
 8017336:	e102      	b.n	801753e <ip4_frag+0x26a>

  /* Save original offset */
  tmp = lwip_ntohs(IPH_OFFSET(iphdr));
 8017338:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801733a:	88db      	ldrh	r3, [r3, #6]
 801733c:	b29b      	uxth	r3, r3
 801733e:	4618      	mov	r0, r3
 8017340:	f7f2 ffa6 	bl	800a290 <lwip_htons>
 8017344:	4603      	mov	r3, r0
 8017346:	87bb      	strh	r3, [r7, #60]	; 0x3c
  ofo = tmp & IP_OFFMASK;
 8017348:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 801734a:	f3c3 030c 	ubfx	r3, r3, #0, #13
 801734e:	f8a7 3040 	strh.w	r3, [r7, #64]	; 0x40
  /* already fragmented? if so, the last fragment we create must have MF, too */
  mf_set = tmp & IP_MF;
 8017352:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 8017354:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8017358:	62fb      	str	r3, [r7, #44]	; 0x2c

  left = (u16_t)(p->tot_len - IP_HLEN);
 801735a:	68fb      	ldr	r3, [r7, #12]
 801735c:	891b      	ldrh	r3, [r3, #8]
 801735e:	3b14      	subs	r3, #20
 8017360:	f8a7 3042 	strh.w	r3, [r7, #66]	; 0x42

  while (left) {
 8017364:	e0e1      	b.n	801752a <ip4_frag+0x256>
    /* Fill this fragment */
    fragsize = LWIP_MIN(left, (u16_t)(nfb * 8));
 8017366:	8f7b      	ldrh	r3, [r7, #58]	; 0x3a
 8017368:	00db      	lsls	r3, r3, #3
 801736a:	b29b      	uxth	r3, r3
 801736c:	f8b7 2042 	ldrh.w	r2, [r7, #66]	; 0x42
 8017370:	4293      	cmp	r3, r2
 8017372:	bf28      	it	cs
 8017374:	4613      	movcs	r3, r2
 8017376:	857b      	strh	r3, [r7, #42]	; 0x2a
    /* When not using a static buffer, create a chain of pbufs.
     * The first will be a PBUF_RAM holding the link and IP header.
     * The rest will be PBUF_REFs mirroring the pbuf chain to be fragged,
     * but limited to the size of an mtu.
     */
    rambuf = pbuf_alloc(PBUF_LINK, IP_HLEN, PBUF_RAM);
 8017378:	f44f 7220 	mov.w	r2, #640	; 0x280
 801737c:	2114      	movs	r1, #20
 801737e:	200e      	movs	r0, #14
 8017380:	f7f4 fafa 	bl	800b978 <pbuf_alloc>
 8017384:	6278      	str	r0, [r7, #36]	; 0x24
    if (rambuf == NULL) {
 8017386:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8017388:	2b00      	cmp	r3, #0
 801738a:	f000 80d5 	beq.w	8017538 <ip4_frag+0x264>
      goto memerr;
    }
    LWIP_ASSERT("this needs a pbuf in one piece!",
 801738e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8017390:	895b      	ldrh	r3, [r3, #10]
 8017392:	2b13      	cmp	r3, #19
 8017394:	d806      	bhi.n	80173a4 <ip4_frag+0xd0>
 8017396:	4b6c      	ldr	r3, [pc, #432]	; (8017548 <ip4_frag+0x274>)
 8017398:	f44f 7249 	mov.w	r2, #804	; 0x324
 801739c:	496d      	ldr	r1, [pc, #436]	; (8017554 <ip4_frag+0x280>)
 801739e:	486c      	ldr	r0, [pc, #432]	; (8017550 <ip4_frag+0x27c>)
 80173a0:	f001 f872 	bl	8018488 <iprintf>
                (rambuf->len >= (IP_HLEN)));
    SMEMCPY(rambuf->payload, original_iphdr, IP_HLEN);
 80173a4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80173a6:	685b      	ldr	r3, [r3, #4]
 80173a8:	2214      	movs	r2, #20
 80173aa:	6b79      	ldr	r1, [r7, #52]	; 0x34
 80173ac:	4618      	mov	r0, r3
 80173ae:	f001 f95e 	bl	801866e <memcpy>
    iphdr = (struct ip_hdr *)rambuf->payload;
 80173b2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80173b4:	685b      	ldr	r3, [r3, #4]
 80173b6:	633b      	str	r3, [r7, #48]	; 0x30

    left_to_copy = fragsize;
 80173b8:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 80173ba:	f8a7 3044 	strh.w	r3, [r7, #68]	; 0x44
    while (left_to_copy) {
 80173be:	e064      	b.n	801748a <ip4_frag+0x1b6>
      struct pbuf_custom_ref *pcr;
      u16_t plen = (u16_t)(p->len - poff);
 80173c0:	68fb      	ldr	r3, [r7, #12]
 80173c2:	895a      	ldrh	r2, [r3, #10]
 80173c4:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 80173c6:	1ad3      	subs	r3, r2, r3
 80173c8:	83fb      	strh	r3, [r7, #30]
      LWIP_ASSERT("p->len >= poff", p->len >= poff);
 80173ca:	68fb      	ldr	r3, [r7, #12]
 80173cc:	895b      	ldrh	r3, [r3, #10]
 80173ce:	8ffa      	ldrh	r2, [r7, #62]	; 0x3e
 80173d0:	429a      	cmp	r2, r3
 80173d2:	d906      	bls.n	80173e2 <ip4_frag+0x10e>
 80173d4:	4b5c      	ldr	r3, [pc, #368]	; (8017548 <ip4_frag+0x274>)
 80173d6:	f240 322d 	movw	r2, #813	; 0x32d
 80173da:	495f      	ldr	r1, [pc, #380]	; (8017558 <ip4_frag+0x284>)
 80173dc:	485c      	ldr	r0, [pc, #368]	; (8017550 <ip4_frag+0x27c>)
 80173de:	f001 f853 	bl	8018488 <iprintf>
      newpbuflen = LWIP_MIN(left_to_copy, plen);
 80173e2:	8bfa      	ldrh	r2, [r7, #30]
 80173e4:	f8b7 3044 	ldrh.w	r3, [r7, #68]	; 0x44
 80173e8:	4293      	cmp	r3, r2
 80173ea:	bf28      	it	cs
 80173ec:	4613      	movcs	r3, r2
 80173ee:	f8a7 3046 	strh.w	r3, [r7, #70]	; 0x46
      /* Is this pbuf already empty? */
      if (!newpbuflen) {
 80173f2:	f8b7 3046 	ldrh.w	r3, [r7, #70]	; 0x46
 80173f6:	2b00      	cmp	r3, #0
 80173f8:	d105      	bne.n	8017406 <ip4_frag+0x132>
        poff = 0;
 80173fa:	2300      	movs	r3, #0
 80173fc:	87fb      	strh	r3, [r7, #62]	; 0x3e
        p = p->next;
 80173fe:	68fb      	ldr	r3, [r7, #12]
 8017400:	681b      	ldr	r3, [r3, #0]
 8017402:	60fb      	str	r3, [r7, #12]
        continue;
 8017404:	e041      	b.n	801748a <ip4_frag+0x1b6>
      }
      pcr = ip_frag_alloc_pbuf_custom_ref();
 8017406:	f7ff ff0d 	bl	8017224 <ip_frag_alloc_pbuf_custom_ref>
 801740a:	61b8      	str	r0, [r7, #24]
      if (pcr == NULL) {
 801740c:	69bb      	ldr	r3, [r7, #24]
 801740e:	2b00      	cmp	r3, #0
 8017410:	d103      	bne.n	801741a <ip4_frag+0x146>
        pbuf_free(rambuf);
 8017412:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8017414:	f7f4 fd94 	bl	800bf40 <pbuf_free>
        goto memerr;
 8017418:	e08f      	b.n	801753a <ip4_frag+0x266>
      }
      /* Mirror this pbuf, although we might not need all of it. */
      newpbuf = pbuf_alloced_custom(PBUF_RAW, newpbuflen, PBUF_REF, &pcr->pc,
 801741a:	69b8      	ldr	r0, [r7, #24]
                                    (u8_t *)p->payload + poff, newpbuflen);
 801741c:	68fb      	ldr	r3, [r7, #12]
 801741e:	685a      	ldr	r2, [r3, #4]
      newpbuf = pbuf_alloced_custom(PBUF_RAW, newpbuflen, PBUF_REF, &pcr->pc,
 8017420:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 8017422:	4413      	add	r3, r2
 8017424:	f8b7 1046 	ldrh.w	r1, [r7, #70]	; 0x46
 8017428:	f8b7 2046 	ldrh.w	r2, [r7, #70]	; 0x46
 801742c:	9201      	str	r2, [sp, #4]
 801742e:	9300      	str	r3, [sp, #0]
 8017430:	4603      	mov	r3, r0
 8017432:	2241      	movs	r2, #65	; 0x41
 8017434:	2000      	movs	r0, #0
 8017436:	f7f4 fbc9 	bl	800bbcc <pbuf_alloced_custom>
 801743a:	6178      	str	r0, [r7, #20]
      if (newpbuf == NULL) {
 801743c:	697b      	ldr	r3, [r7, #20]
 801743e:	2b00      	cmp	r3, #0
 8017440:	d106      	bne.n	8017450 <ip4_frag+0x17c>
        ip_frag_free_pbuf_custom_ref(pcr);
 8017442:	69b8      	ldr	r0, [r7, #24]
 8017444:	f7ff fef6 	bl	8017234 <ip_frag_free_pbuf_custom_ref>
        pbuf_free(rambuf);
 8017448:	6a78      	ldr	r0, [r7, #36]	; 0x24
 801744a:	f7f4 fd79 	bl	800bf40 <pbuf_free>
        goto memerr;
 801744e:	e074      	b.n	801753a <ip4_frag+0x266>
      }
      pbuf_ref(p);
 8017450:	68f8      	ldr	r0, [r7, #12]
 8017452:	f7f4 fe15 	bl	800c080 <pbuf_ref>
      pcr->original = p;
 8017456:	69bb      	ldr	r3, [r7, #24]
 8017458:	68fa      	ldr	r2, [r7, #12]
 801745a:	615a      	str	r2, [r3, #20]
      pcr->pc.custom_free_function = ipfrag_free_pbuf_custom;
 801745c:	69bb      	ldr	r3, [r7, #24]
 801745e:	4a3f      	ldr	r2, [pc, #252]	; (801755c <ip4_frag+0x288>)
 8017460:	611a      	str	r2, [r3, #16]

      /* Add it to end of rambuf's chain, but using pbuf_cat, not pbuf_chain
       * so that it is removed when pbuf_dechain is later called on rambuf.
       */
      pbuf_cat(rambuf, newpbuf);
 8017462:	6979      	ldr	r1, [r7, #20]
 8017464:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8017466:	f7f4 fe2d 	bl	800c0c4 <pbuf_cat>
      left_to_copy = (u16_t)(left_to_copy - newpbuflen);
 801746a:	f8b7 2044 	ldrh.w	r2, [r7, #68]	; 0x44
 801746e:	f8b7 3046 	ldrh.w	r3, [r7, #70]	; 0x46
 8017472:	1ad3      	subs	r3, r2, r3
 8017474:	f8a7 3044 	strh.w	r3, [r7, #68]	; 0x44
      if (left_to_copy) {
 8017478:	f8b7 3044 	ldrh.w	r3, [r7, #68]	; 0x44
 801747c:	2b00      	cmp	r3, #0
 801747e:	d004      	beq.n	801748a <ip4_frag+0x1b6>
        poff = 0;
 8017480:	2300      	movs	r3, #0
 8017482:	87fb      	strh	r3, [r7, #62]	; 0x3e
        p = p->next;
 8017484:	68fb      	ldr	r3, [r7, #12]
 8017486:	681b      	ldr	r3, [r3, #0]
 8017488:	60fb      	str	r3, [r7, #12]
    while (left_to_copy) {
 801748a:	f8b7 3044 	ldrh.w	r3, [r7, #68]	; 0x44
 801748e:	2b00      	cmp	r3, #0
 8017490:	d196      	bne.n	80173c0 <ip4_frag+0xec>
      }
    }
    poff = (u16_t)(poff + newpbuflen);
 8017492:	8ffa      	ldrh	r2, [r7, #62]	; 0x3e
 8017494:	f8b7 3046 	ldrh.w	r3, [r7, #70]	; 0x46
 8017498:	4413      	add	r3, r2
 801749a:	87fb      	strh	r3, [r7, #62]	; 0x3e
#endif /* LWIP_NETIF_TX_SINGLE_PBUF */

    /* Correct header */
    last = (left <= netif->mtu - IP_HLEN);
 801749c:	68bb      	ldr	r3, [r7, #8]
 801749e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80174a0:	f1a3 0213 	sub.w	r2, r3, #19
 80174a4:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 80174a8:	429a      	cmp	r2, r3
 80174aa:	bfcc      	ite	gt
 80174ac:	2301      	movgt	r3, #1
 80174ae:	2300      	movle	r3, #0
 80174b0:	b2db      	uxtb	r3, r3
 80174b2:	623b      	str	r3, [r7, #32]

    /* Set new offset and MF flag */
    tmp = (IP_OFFMASK & (ofo));
 80174b4:	f8b7 3040 	ldrh.w	r3, [r7, #64]	; 0x40
 80174b8:	f3c3 030c 	ubfx	r3, r3, #0, #13
 80174bc:	87bb      	strh	r3, [r7, #60]	; 0x3c
    if (!last || mf_set) {
 80174be:	6a3b      	ldr	r3, [r7, #32]
 80174c0:	2b00      	cmp	r3, #0
 80174c2:	d002      	beq.n	80174ca <ip4_frag+0x1f6>
 80174c4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80174c6:	2b00      	cmp	r3, #0
 80174c8:	d003      	beq.n	80174d2 <ip4_frag+0x1fe>
      /* the last fragment has MF set if the input frame had it */
      tmp = tmp | IP_MF;
 80174ca:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 80174cc:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 80174d0:	87bb      	strh	r3, [r7, #60]	; 0x3c
    }
    IPH_OFFSET_SET(iphdr, lwip_htons(tmp));
 80174d2:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 80174d4:	4618      	mov	r0, r3
 80174d6:	f7f2 fedb 	bl	800a290 <lwip_htons>
 80174da:	4603      	mov	r3, r0
 80174dc:	461a      	mov	r2, r3
 80174de:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80174e0:	80da      	strh	r2, [r3, #6]
    IPH_LEN_SET(iphdr, lwip_htons((u16_t)(fragsize + IP_HLEN)));
 80174e2:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 80174e4:	3314      	adds	r3, #20
 80174e6:	b29b      	uxth	r3, r3
 80174e8:	4618      	mov	r0, r3
 80174ea:	f7f2 fed1 	bl	800a290 <lwip_htons>
 80174ee:	4603      	mov	r3, r0
 80174f0:	461a      	mov	r2, r3
 80174f2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80174f4:	805a      	strh	r2, [r3, #2]
    IPH_CHKSUM_SET(iphdr, 0);
 80174f6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80174f8:	2200      	movs	r2, #0
 80174fa:	729a      	strb	r2, [r3, #10]
 80174fc:	2200      	movs	r2, #0
 80174fe:	72da      	strb	r2, [r3, #11]
#endif /* CHECKSUM_GEN_IP */

    /* No need for separate header pbuf - we allowed room for it in rambuf
     * when allocated.
     */
    netif->output(netif, rambuf, dest);
 8017500:	68bb      	ldr	r3, [r7, #8]
 8017502:	695b      	ldr	r3, [r3, #20]
 8017504:	687a      	ldr	r2, [r7, #4]
 8017506:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8017508:	68b8      	ldr	r0, [r7, #8]
 801750a:	4798      	blx	r3
     * recreate it next time round the loop. If we're lucky the hardware
     * will have already sent the packet, the free will really free, and
     * there will be zero memory penalty.
     */

    pbuf_free(rambuf);
 801750c:	6a78      	ldr	r0, [r7, #36]	; 0x24
 801750e:	f7f4 fd17 	bl	800bf40 <pbuf_free>
    left = (u16_t)(left - fragsize);
 8017512:	f8b7 2042 	ldrh.w	r2, [r7, #66]	; 0x42
 8017516:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 8017518:	1ad3      	subs	r3, r2, r3
 801751a:	f8a7 3042 	strh.w	r3, [r7, #66]	; 0x42
    ofo = (u16_t)(ofo + nfb);
 801751e:	f8b7 2040 	ldrh.w	r2, [r7, #64]	; 0x40
 8017522:	8f7b      	ldrh	r3, [r7, #58]	; 0x3a
 8017524:	4413      	add	r3, r2
 8017526:	f8a7 3040 	strh.w	r3, [r7, #64]	; 0x40
  while (left) {
 801752a:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 801752e:	2b00      	cmp	r3, #0
 8017530:	f47f af19 	bne.w	8017366 <ip4_frag+0x92>
  }
  MIB2_STATS_INC(mib2.ipfragoks);
  return ERR_OK;
 8017534:	2300      	movs	r3, #0
 8017536:	e002      	b.n	801753e <ip4_frag+0x26a>
      goto memerr;
 8017538:	bf00      	nop
memerr:
  MIB2_STATS_INC(mib2.ipfragfails);
  return ERR_MEM;
 801753a:	f04f 33ff 	mov.w	r3, #4294967295
}
 801753e:	4618      	mov	r0, r3
 8017540:	3748      	adds	r7, #72	; 0x48
 8017542:	46bd      	mov	sp, r7
 8017544:	bd80      	pop	{r7, pc}
 8017546:	bf00      	nop
 8017548:	0801beac 	.word	0x0801beac
 801754c:	0801c088 	.word	0x0801c088
 8017550:	0801bef4 	.word	0x0801bef4
 8017554:	0801c0a4 	.word	0x0801c0a4
 8017558:	0801c0c4 	.word	0x0801c0c4
 801755c:	0801726d 	.word	0x0801726d

08017560 <ethernet_input>:
 * @see ETHARP_SUPPORT_VLAN
 * @see LWIP_HOOK_VLAN_CHECK
 */
err_t
ethernet_input(struct pbuf *p, struct netif *netif)
{
 8017560:	b580      	push	{r7, lr}
 8017562:	b086      	sub	sp, #24
 8017564:	af00      	add	r7, sp, #0
 8017566:	6078      	str	r0, [r7, #4]
 8017568:	6039      	str	r1, [r7, #0]
  struct eth_hdr *ethhdr;
  u16_t type;
#if LWIP_ARP || ETHARP_SUPPORT_VLAN || LWIP_IPV6
  u16_t next_hdr_offset = SIZEOF_ETH_HDR;
 801756a:	230e      	movs	r3, #14
 801756c:	82fb      	strh	r3, [r7, #22]
#endif /* LWIP_ARP || ETHARP_SUPPORT_VLAN */

  LWIP_ASSERT_CORE_LOCKED();

  if (p->len <= SIZEOF_ETH_HDR) {
 801756e:	687b      	ldr	r3, [r7, #4]
 8017570:	895b      	ldrh	r3, [r3, #10]
 8017572:	2b0e      	cmp	r3, #14
 8017574:	d96e      	bls.n	8017654 <ethernet_input+0xf4>
    ETHARP_STATS_INC(etharp.drop);
    MIB2_STATS_NETIF_INC(netif, ifinerrors);
    goto free_and_return;
  }

  if (p->if_idx == NETIF_NO_INDEX) {
 8017576:	687b      	ldr	r3, [r7, #4]
 8017578:	7bdb      	ldrb	r3, [r3, #15]
 801757a:	2b00      	cmp	r3, #0
 801757c:	d106      	bne.n	801758c <ethernet_input+0x2c>
    p->if_idx = netif_get_index(netif);
 801757e:	683b      	ldr	r3, [r7, #0]
 8017580:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 8017584:	3301      	adds	r3, #1
 8017586:	b2da      	uxtb	r2, r3
 8017588:	687b      	ldr	r3, [r7, #4]
 801758a:	73da      	strb	r2, [r3, #15]
  }

  /* points to packet payload, which starts with an Ethernet header */
  ethhdr = (struct eth_hdr *)p->payload;
 801758c:	687b      	ldr	r3, [r7, #4]
 801758e:	685b      	ldr	r3, [r3, #4]
 8017590:	613b      	str	r3, [r7, #16]
               (unsigned char)ethhdr->dest.addr[3], (unsigned char)ethhdr->dest.addr[4], (unsigned char)ethhdr->dest.addr[5],
               (unsigned char)ethhdr->src.addr[0],  (unsigned char)ethhdr->src.addr[1],  (unsigned char)ethhdr->src.addr[2],
               (unsigned char)ethhdr->src.addr[3],  (unsigned char)ethhdr->src.addr[4],  (unsigned char)ethhdr->src.addr[5],
               lwip_htons(ethhdr->type)));

  type = ethhdr->type;
 8017592:	693b      	ldr	r3, [r7, #16]
 8017594:	7b1a      	ldrb	r2, [r3, #12]
 8017596:	7b5b      	ldrb	r3, [r3, #13]
 8017598:	021b      	lsls	r3, r3, #8
 801759a:	4313      	orrs	r3, r2
 801759c:	81fb      	strh	r3, [r7, #14]

#if LWIP_ARP_FILTER_NETIF
  netif = LWIP_ARP_FILTER_NETIF_FN(p, netif, lwip_htons(type));
#endif /* LWIP_ARP_FILTER_NETIF*/

  if (ethhdr->dest.addr[0] & 1) {
 801759e:	693b      	ldr	r3, [r7, #16]
 80175a0:	781b      	ldrb	r3, [r3, #0]
 80175a2:	f003 0301 	and.w	r3, r3, #1
 80175a6:	2b00      	cmp	r3, #0
 80175a8:	d023      	beq.n	80175f2 <ethernet_input+0x92>
    /* this might be a multicast or broadcast packet */
    if (ethhdr->dest.addr[0] == LL_IP4_MULTICAST_ADDR_0) {
 80175aa:	693b      	ldr	r3, [r7, #16]
 80175ac:	781b      	ldrb	r3, [r3, #0]
 80175ae:	2b01      	cmp	r3, #1
 80175b0:	d10f      	bne.n	80175d2 <ethernet_input+0x72>
#if LWIP_IPV4
      if ((ethhdr->dest.addr[1] == LL_IP4_MULTICAST_ADDR_1) &&
 80175b2:	693b      	ldr	r3, [r7, #16]
 80175b4:	785b      	ldrb	r3, [r3, #1]
 80175b6:	2b00      	cmp	r3, #0
 80175b8:	d11b      	bne.n	80175f2 <ethernet_input+0x92>
          (ethhdr->dest.addr[2] == LL_IP4_MULTICAST_ADDR_2)) {
 80175ba:	693b      	ldr	r3, [r7, #16]
 80175bc:	789b      	ldrb	r3, [r3, #2]
      if ((ethhdr->dest.addr[1] == LL_IP4_MULTICAST_ADDR_1) &&
 80175be:	2b5e      	cmp	r3, #94	; 0x5e
 80175c0:	d117      	bne.n	80175f2 <ethernet_input+0x92>
        /* mark the pbuf as link-layer multicast */
        p->flags |= PBUF_FLAG_LLMCAST;
 80175c2:	687b      	ldr	r3, [r7, #4]
 80175c4:	7b5b      	ldrb	r3, [r3, #13]
 80175c6:	f043 0310 	orr.w	r3, r3, #16
 80175ca:	b2da      	uxtb	r2, r3
 80175cc:	687b      	ldr	r3, [r7, #4]
 80175ce:	735a      	strb	r2, [r3, #13]
 80175d0:	e00f      	b.n	80175f2 <ethernet_input+0x92>
             (ethhdr->dest.addr[1] == LL_IP6_MULTICAST_ADDR_1)) {
      /* mark the pbuf as link-layer multicast */
      p->flags |= PBUF_FLAG_LLMCAST;
    }
#endif /* LWIP_IPV6 */
    else if (eth_addr_cmp(&ethhdr->dest, &ethbroadcast)) {
 80175d2:	693b      	ldr	r3, [r7, #16]
 80175d4:	2206      	movs	r2, #6
 80175d6:	4928      	ldr	r1, [pc, #160]	; (8017678 <ethernet_input+0x118>)
 80175d8:	4618      	mov	r0, r3
 80175da:	f000 ffaa 	bl	8018532 <memcmp>
 80175de:	4603      	mov	r3, r0
 80175e0:	2b00      	cmp	r3, #0
 80175e2:	d106      	bne.n	80175f2 <ethernet_input+0x92>
      /* mark the pbuf as link-layer broadcast */
      p->flags |= PBUF_FLAG_LLBCAST;
 80175e4:	687b      	ldr	r3, [r7, #4]
 80175e6:	7b5b      	ldrb	r3, [r3, #13]
 80175e8:	f043 0308 	orr.w	r3, r3, #8
 80175ec:	b2da      	uxtb	r2, r3
 80175ee:	687b      	ldr	r3, [r7, #4]
 80175f0:	735a      	strb	r2, [r3, #13]
    }
  }

  switch (type) {
 80175f2:	89fb      	ldrh	r3, [r7, #14]
 80175f4:	2b08      	cmp	r3, #8
 80175f6:	d003      	beq.n	8017600 <ethernet_input+0xa0>
 80175f8:	f5b3 6fc1 	cmp.w	r3, #1544	; 0x608
 80175fc:	d014      	beq.n	8017628 <ethernet_input+0xc8>
      }
#endif
      ETHARP_STATS_INC(etharp.proterr);
      ETHARP_STATS_INC(etharp.drop);
      MIB2_STATS_NETIF_INC(netif, ifinunknownprotos);
      goto free_and_return;
 80175fe:	e032      	b.n	8017666 <ethernet_input+0x106>
      if (!(netif->flags & NETIF_FLAG_ETHARP)) {
 8017600:	683b      	ldr	r3, [r7, #0]
 8017602:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 8017606:	f003 0308 	and.w	r3, r3, #8
 801760a:	2b00      	cmp	r3, #0
 801760c:	d024      	beq.n	8017658 <ethernet_input+0xf8>
      if (pbuf_remove_header(p, next_hdr_offset)) {
 801760e:	8afb      	ldrh	r3, [r7, #22]
 8017610:	4619      	mov	r1, r3
 8017612:	6878      	ldr	r0, [r7, #4]
 8017614:	f7f4 fc0e 	bl	800be34 <pbuf_remove_header>
 8017618:	4603      	mov	r3, r0
 801761a:	2b00      	cmp	r3, #0
 801761c:	d11e      	bne.n	801765c <ethernet_input+0xfc>
        ip4_input(p, netif);
 801761e:	6839      	ldr	r1, [r7, #0]
 8017620:	6878      	ldr	r0, [r7, #4]
 8017622:	f7fe ff03 	bl	801642c <ip4_input>
      break;
 8017626:	e013      	b.n	8017650 <ethernet_input+0xf0>
      if (!(netif->flags & NETIF_FLAG_ETHARP)) {
 8017628:	683b      	ldr	r3, [r7, #0]
 801762a:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 801762e:	f003 0308 	and.w	r3, r3, #8
 8017632:	2b00      	cmp	r3, #0
 8017634:	d014      	beq.n	8017660 <ethernet_input+0x100>
      if (pbuf_remove_header(p, next_hdr_offset)) {
 8017636:	8afb      	ldrh	r3, [r7, #22]
 8017638:	4619      	mov	r1, r3
 801763a:	6878      	ldr	r0, [r7, #4]
 801763c:	f7f4 fbfa 	bl	800be34 <pbuf_remove_header>
 8017640:	4603      	mov	r3, r0
 8017642:	2b00      	cmp	r3, #0
 8017644:	d10e      	bne.n	8017664 <ethernet_input+0x104>
        etharp_input(p, netif);
 8017646:	6839      	ldr	r1, [r7, #0]
 8017648:	6878      	ldr	r0, [r7, #4]
 801764a:	f7fe f89f 	bl	801578c <etharp_input>
      break;
 801764e:	bf00      	nop
  }

  /* This means the pbuf is freed or consumed,
     so the caller doesn't have to free it again */
  return ERR_OK;
 8017650:	2300      	movs	r3, #0
 8017652:	e00c      	b.n	801766e <ethernet_input+0x10e>
    goto free_and_return;
 8017654:	bf00      	nop
 8017656:	e006      	b.n	8017666 <ethernet_input+0x106>
        goto free_and_return;
 8017658:	bf00      	nop
 801765a:	e004      	b.n	8017666 <ethernet_input+0x106>
        goto free_and_return;
 801765c:	bf00      	nop
 801765e:	e002      	b.n	8017666 <ethernet_input+0x106>
        goto free_and_return;
 8017660:	bf00      	nop
 8017662:	e000      	b.n	8017666 <ethernet_input+0x106>
        goto free_and_return;
 8017664:	bf00      	nop

free_and_return:
  pbuf_free(p);
 8017666:	6878      	ldr	r0, [r7, #4]
 8017668:	f7f4 fc6a 	bl	800bf40 <pbuf_free>
  return ERR_OK;
 801766c:	2300      	movs	r3, #0
}
 801766e:	4618      	mov	r0, r3
 8017670:	3718      	adds	r7, #24
 8017672:	46bd      	mov	sp, r7
 8017674:	bd80      	pop	{r7, pc}
 8017676:	bf00      	nop
 8017678:	0801c2cc 	.word	0x0801c2cc

0801767c <ethernet_output>:
 * @return ERR_OK if the packet was sent, any other err_t on failure
 */
err_t
ethernet_output(struct netif * netif, struct pbuf * p,
                const struct eth_addr * src, const struct eth_addr * dst,
                u16_t eth_type) {
 801767c:	b580      	push	{r7, lr}
 801767e:	b086      	sub	sp, #24
 8017680:	af00      	add	r7, sp, #0
 8017682:	60f8      	str	r0, [r7, #12]
 8017684:	60b9      	str	r1, [r7, #8]
 8017686:	607a      	str	r2, [r7, #4]
 8017688:	603b      	str	r3, [r7, #0]
  struct eth_hdr *ethhdr;
  u16_t eth_type_be = lwip_htons(eth_type);
 801768a:	8c3b      	ldrh	r3, [r7, #32]
 801768c:	4618      	mov	r0, r3
 801768e:	f7f2 fdff 	bl	800a290 <lwip_htons>
 8017692:	4603      	mov	r3, r0
 8017694:	82fb      	strh	r3, [r7, #22]

    eth_type_be = PP_HTONS(ETHTYPE_VLAN);
  } else
#endif /* ETHARP_SUPPORT_VLAN && defined(LWIP_HOOK_VLAN_SET) */
  {
    if (pbuf_add_header(p, SIZEOF_ETH_HDR) != 0) {
 8017696:	210e      	movs	r1, #14
 8017698:	68b8      	ldr	r0, [r7, #8]
 801769a:	f7f4 fbbb 	bl	800be14 <pbuf_add_header>
 801769e:	4603      	mov	r3, r0
 80176a0:	2b00      	cmp	r3, #0
 80176a2:	d125      	bne.n	80176f0 <ethernet_output+0x74>
    }
  }

  LWIP_ASSERT_CORE_LOCKED();

  ethhdr = (struct eth_hdr *)p->payload;
 80176a4:	68bb      	ldr	r3, [r7, #8]
 80176a6:	685b      	ldr	r3, [r3, #4]
 80176a8:	613b      	str	r3, [r7, #16]
  ethhdr->type = eth_type_be;
 80176aa:	693b      	ldr	r3, [r7, #16]
 80176ac:	8afa      	ldrh	r2, [r7, #22]
 80176ae:	819a      	strh	r2, [r3, #12]
  SMEMCPY(&ethhdr->dest, dst, ETH_HWADDR_LEN);
 80176b0:	693b      	ldr	r3, [r7, #16]
 80176b2:	2206      	movs	r2, #6
 80176b4:	6839      	ldr	r1, [r7, #0]
 80176b6:	4618      	mov	r0, r3
 80176b8:	f000 ffd9 	bl	801866e <memcpy>
  SMEMCPY(&ethhdr->src,  src, ETH_HWADDR_LEN);
 80176bc:	693b      	ldr	r3, [r7, #16]
 80176be:	3306      	adds	r3, #6
 80176c0:	2206      	movs	r2, #6
 80176c2:	6879      	ldr	r1, [r7, #4]
 80176c4:	4618      	mov	r0, r3
 80176c6:	f000 ffd2 	bl	801866e <memcpy>

  LWIP_ASSERT("netif->hwaddr_len must be 6 for ethernet_output!",
 80176ca:	68fb      	ldr	r3, [r7, #12]
 80176cc:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 80176d0:	2b06      	cmp	r3, #6
 80176d2:	d006      	beq.n	80176e2 <ethernet_output+0x66>
 80176d4:	4b0a      	ldr	r3, [pc, #40]	; (8017700 <ethernet_output+0x84>)
 80176d6:	f44f 7299 	mov.w	r2, #306	; 0x132
 80176da:	490a      	ldr	r1, [pc, #40]	; (8017704 <ethernet_output+0x88>)
 80176dc:	480a      	ldr	r0, [pc, #40]	; (8017708 <ethernet_output+0x8c>)
 80176de:	f000 fed3 	bl	8018488 <iprintf>
              (netif->hwaddr_len == ETH_HWADDR_LEN));
  LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE,
              ("ethernet_output: sending packet %p\n", (void *)p));

  /* send the packet */
  return netif->linkoutput(netif, p);
 80176e2:	68fb      	ldr	r3, [r7, #12]
 80176e4:	699b      	ldr	r3, [r3, #24]
 80176e6:	68b9      	ldr	r1, [r7, #8]
 80176e8:	68f8      	ldr	r0, [r7, #12]
 80176ea:	4798      	blx	r3
 80176ec:	4603      	mov	r3, r0
 80176ee:	e002      	b.n	80176f6 <ethernet_output+0x7a>
      goto pbuf_header_failed;
 80176f0:	bf00      	nop

pbuf_header_failed:
  LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_SERIOUS,
              ("ethernet_output: could not allocate room for header.\n"));
  LINK_STATS_INC(link.lenerr);
  return ERR_BUF;
 80176f2:	f06f 0301 	mvn.w	r3, #1
}
 80176f6:	4618      	mov	r0, r3
 80176f8:	3718      	adds	r7, #24
 80176fa:	46bd      	mov	sp, r7
 80176fc:	bd80      	pop	{r7, pc}
 80176fe:	bf00      	nop
 8017700:	0801c0d4 	.word	0x0801c0d4
 8017704:	0801c10c 	.word	0x0801c10c
 8017708:	0801c140 	.word	0x0801c140

0801770c <MX_USB_DEVICE_Init>:
/**
  * Init USB device Library, add supported class and start the library
  * @retval None
  */
void MX_USB_DEVICE_Init(void)
{
 801770c:	b580      	push	{r7, lr}
 801770e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_DEVICE_Init_PreTreatment */

  /* USER CODE END USB_DEVICE_Init_PreTreatment */

  /* Init Device Library, add supported class and start the library. */
  if (USBD_Init(&hUsbDeviceFS, &FS_Desc, DEVICE_FS) != USBD_OK)
 8017710:	2200      	movs	r2, #0
 8017712:	4912      	ldr	r1, [pc, #72]	; (801775c <MX_USB_DEVICE_Init+0x50>)
 8017714:	4812      	ldr	r0, [pc, #72]	; (8017760 <MX_USB_DEVICE_Init+0x54>)
 8017716:	f7f1 fab7 	bl	8008c88 <USBD_Init>
 801771a:	4603      	mov	r3, r0
 801771c:	2b00      	cmp	r3, #0
 801771e:	d001      	beq.n	8017724 <MX_USB_DEVICE_Init+0x18>
  {
    Error_Handler();
 8017720:	f7e9 f858 	bl	80007d4 <Error_Handler>
  }
  if (USBD_RegisterClass(&hUsbDeviceFS, &USBD_CDC) != USBD_OK)
 8017724:	490f      	ldr	r1, [pc, #60]	; (8017764 <MX_USB_DEVICE_Init+0x58>)
 8017726:	480e      	ldr	r0, [pc, #56]	; (8017760 <MX_USB_DEVICE_Init+0x54>)
 8017728:	f7f1 fade 	bl	8008ce8 <USBD_RegisterClass>
 801772c:	4603      	mov	r3, r0
 801772e:	2b00      	cmp	r3, #0
 8017730:	d001      	beq.n	8017736 <MX_USB_DEVICE_Init+0x2a>
  {
    Error_Handler();
 8017732:	f7e9 f84f 	bl	80007d4 <Error_Handler>
  }
  if (USBD_CDC_RegisterInterface(&hUsbDeviceFS, &USBD_Interface_fops_FS) != USBD_OK)
 8017736:	490c      	ldr	r1, [pc, #48]	; (8017768 <MX_USB_DEVICE_Init+0x5c>)
 8017738:	4809      	ldr	r0, [pc, #36]	; (8017760 <MX_USB_DEVICE_Init+0x54>)
 801773a:	f7f1 f9d5 	bl	8008ae8 <USBD_CDC_RegisterInterface>
 801773e:	4603      	mov	r3, r0
 8017740:	2b00      	cmp	r3, #0
 8017742:	d001      	beq.n	8017748 <MX_USB_DEVICE_Init+0x3c>
  {
    Error_Handler();
 8017744:	f7e9 f846 	bl	80007d4 <Error_Handler>
  }
  if (USBD_Start(&hUsbDeviceFS) != USBD_OK)
 8017748:	4805      	ldr	r0, [pc, #20]	; (8017760 <MX_USB_DEVICE_Init+0x54>)
 801774a:	f7f1 fb03 	bl	8008d54 <USBD_Start>
 801774e:	4603      	mov	r3, r0
 8017750:	2b00      	cmp	r3, #0
 8017752:	d001      	beq.n	8017758 <MX_USB_DEVICE_Init+0x4c>
  {
    Error_Handler();
 8017754:	f7e9 f83e 	bl	80007d4 <Error_Handler>
  }

  /* USER CODE BEGIN USB_DEVICE_Init_PostTreatment */

  /* USER CODE END USB_DEVICE_Init_PostTreatment */
}
 8017758:	bf00      	nop
 801775a:	bd80      	pop	{r7, pc}
 801775c:	200000cc 	.word	0x200000cc
 8017760:	20008ab8 	.word	0x20008ab8
 8017764:	2000002c 	.word	0x2000002c
 8017768:	200000b8 	.word	0x200000b8

0801776c <CDC_Init_FS>:
/**
  * @brief  Initializes the CDC media low layer over the FS USB IP
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Init_FS(void)
{
 801776c:	b580      	push	{r7, lr}
 801776e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 3 */
  /* Set Application Buffers */
  USBD_CDC_SetTxBuffer(&hUsbDeviceFS, UserTxBufferFS, 0);
 8017770:	2200      	movs	r2, #0
 8017772:	4905      	ldr	r1, [pc, #20]	; (8017788 <CDC_Init_FS+0x1c>)
 8017774:	4805      	ldr	r0, [pc, #20]	; (801778c <CDC_Init_FS+0x20>)
 8017776:	f7f1 f9d1 	bl	8008b1c <USBD_CDC_SetTxBuffer>
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, UserRxBufferFS);
 801777a:	4905      	ldr	r1, [pc, #20]	; (8017790 <CDC_Init_FS+0x24>)
 801777c:	4803      	ldr	r0, [pc, #12]	; (801778c <CDC_Init_FS+0x20>)
 801777e:	f7f1 f9ef 	bl	8008b60 <USBD_CDC_SetRxBuffer>
  return (USBD_OK);
 8017782:	2300      	movs	r3, #0
  /* USER CODE END 3 */
}
 8017784:	4618      	mov	r0, r3
 8017786:	bd80      	pop	{r7, pc}
 8017788:	20009594 	.word	0x20009594
 801778c:	20008ab8 	.word	0x20008ab8
 8017790:	20008d94 	.word	0x20008d94

08017794 <CDC_DeInit_FS>:
/**
  * @brief  DeInitializes the CDC media low layer
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_DeInit_FS(void)
{
 8017794:	b480      	push	{r7}
 8017796:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 4 */
  return (USBD_OK);
 8017798:	2300      	movs	r3, #0
  /* USER CODE END 4 */
}
 801779a:	4618      	mov	r0, r3
 801779c:	46bd      	mov	sp, r7
 801779e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80177a2:	4770      	bx	lr

080177a4 <CDC_Control_FS>:
  * @param  pbuf: Buffer containing command data (request parameters)
  * @param  length: Number of data to be sent (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Control_FS(uint8_t cmd, uint8_t* pbuf, uint16_t length)
{
 80177a4:	b480      	push	{r7}
 80177a6:	b083      	sub	sp, #12
 80177a8:	af00      	add	r7, sp, #0
 80177aa:	4603      	mov	r3, r0
 80177ac:	6039      	str	r1, [r7, #0]
 80177ae:	71fb      	strb	r3, [r7, #7]
 80177b0:	4613      	mov	r3, r2
 80177b2:	80bb      	strh	r3, [r7, #4]
  /* USER CODE BEGIN 5 */
  switch(cmd)
 80177b4:	79fb      	ldrb	r3, [r7, #7]
 80177b6:	2b23      	cmp	r3, #35	; 0x23
 80177b8:	d84a      	bhi.n	8017850 <CDC_Control_FS+0xac>
 80177ba:	a201      	add	r2, pc, #4	; (adr r2, 80177c0 <CDC_Control_FS+0x1c>)
 80177bc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80177c0:	08017851 	.word	0x08017851
 80177c4:	08017851 	.word	0x08017851
 80177c8:	08017851 	.word	0x08017851
 80177cc:	08017851 	.word	0x08017851
 80177d0:	08017851 	.word	0x08017851
 80177d4:	08017851 	.word	0x08017851
 80177d8:	08017851 	.word	0x08017851
 80177dc:	08017851 	.word	0x08017851
 80177e0:	08017851 	.word	0x08017851
 80177e4:	08017851 	.word	0x08017851
 80177e8:	08017851 	.word	0x08017851
 80177ec:	08017851 	.word	0x08017851
 80177f0:	08017851 	.word	0x08017851
 80177f4:	08017851 	.word	0x08017851
 80177f8:	08017851 	.word	0x08017851
 80177fc:	08017851 	.word	0x08017851
 8017800:	08017851 	.word	0x08017851
 8017804:	08017851 	.word	0x08017851
 8017808:	08017851 	.word	0x08017851
 801780c:	08017851 	.word	0x08017851
 8017810:	08017851 	.word	0x08017851
 8017814:	08017851 	.word	0x08017851
 8017818:	08017851 	.word	0x08017851
 801781c:	08017851 	.word	0x08017851
 8017820:	08017851 	.word	0x08017851
 8017824:	08017851 	.word	0x08017851
 8017828:	08017851 	.word	0x08017851
 801782c:	08017851 	.word	0x08017851
 8017830:	08017851 	.word	0x08017851
 8017834:	08017851 	.word	0x08017851
 8017838:	08017851 	.word	0x08017851
 801783c:	08017851 	.word	0x08017851
 8017840:	08017851 	.word	0x08017851
 8017844:	08017851 	.word	0x08017851
 8017848:	08017851 	.word	0x08017851
 801784c:	08017851 	.word	0x08017851
    case CDC_SEND_BREAK:

    break;

  default:
    break;
 8017850:	bf00      	nop
  }

  return (USBD_OK);
 8017852:	2300      	movs	r3, #0
  /* USER CODE END 5 */
}
 8017854:	4618      	mov	r0, r3
 8017856:	370c      	adds	r7, #12
 8017858:	46bd      	mov	sp, r7
 801785a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801785e:	4770      	bx	lr

08017860 <CDC_Receive_FS>:
  * @param  Buf: Buffer of data to be received
  * @param  Len: Number of data received (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Receive_FS(uint8_t* Buf, uint32_t *Len)
{
 8017860:	b580      	push	{r7, lr}
 8017862:	b082      	sub	sp, #8
 8017864:	af00      	add	r7, sp, #0
 8017866:	6078      	str	r0, [r7, #4]
 8017868:	6039      	str	r1, [r7, #0]
  /* USER CODE BEGIN 6 */
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, &Buf[0]);
 801786a:	6879      	ldr	r1, [r7, #4]
 801786c:	480c      	ldr	r0, [pc, #48]	; (80178a0 <CDC_Receive_FS+0x40>)
 801786e:	f7f1 f977 	bl	8008b60 <USBD_CDC_SetRxBuffer>
  USBD_CDC_ReceivePacket(&hUsbDeviceFS);
 8017872:	480b      	ldr	r0, [pc, #44]	; (80178a0 <CDC_Receive_FS+0x40>)
 8017874:	f7f1 f9d2 	bl	8008c1c <USBD_CDC_ReceivePacket>
  memcpy(UserRxBufferFS, Buf, *Len);
 8017878:	683b      	ldr	r3, [r7, #0]
 801787a:	681b      	ldr	r3, [r3, #0]
 801787c:	461a      	mov	r2, r3
 801787e:	6879      	ldr	r1, [r7, #4]
 8017880:	4808      	ldr	r0, [pc, #32]	; (80178a4 <CDC_Receive_FS+0x44>)
 8017882:	f000 fef4 	bl	801866e <memcpy>
  byteNum++;
 8017886:	4b08      	ldr	r3, [pc, #32]	; (80178a8 <CDC_Receive_FS+0x48>)
 8017888:	681b      	ldr	r3, [r3, #0]
 801788a:	3301      	adds	r3, #1
 801788c:	4a06      	ldr	r2, [pc, #24]	; (80178a8 <CDC_Receive_FS+0x48>)
 801788e:	6013      	str	r3, [r2, #0]
  wr = 1;
 8017890:	4b06      	ldr	r3, [pc, #24]	; (80178ac <CDC_Receive_FS+0x4c>)
 8017892:	2201      	movs	r2, #1
 8017894:	701a      	strb	r2, [r3, #0]
  return (USBD_OK);
 8017896:	2300      	movs	r3, #0
  /* USER CODE END 6 */
}
 8017898:	4618      	mov	r0, r3
 801789a:	3708      	adds	r7, #8
 801789c:	46bd      	mov	sp, r7
 801789e:	bd80      	pop	{r7, pc}
 80178a0:	20008ab8 	.word	0x20008ab8
 80178a4:	20008d94 	.word	0x20008d94
 80178a8:	2000029c 	.word	0x2000029c
 80178ac:	200002a0 	.word	0x200002a0

080178b0 <CDC_Transmit_FS>:
  * @param  Buf: Buffer of data to be sent
  * @param  Len: Number of data to be sent (in bytes)
  * @retval USBD_OK if all operations are OK else USBD_FAIL or USBD_BUSY
  */
uint8_t CDC_Transmit_FS(uint8_t* Buf, uint16_t Len)
{
 80178b0:	b580      	push	{r7, lr}
 80178b2:	b084      	sub	sp, #16
 80178b4:	af00      	add	r7, sp, #0
 80178b6:	6078      	str	r0, [r7, #4]
 80178b8:	460b      	mov	r3, r1
 80178ba:	807b      	strh	r3, [r7, #2]
  uint8_t result = USBD_OK;
 80178bc:	2300      	movs	r3, #0
 80178be:	73fb      	strb	r3, [r7, #15]
  /* USER CODE BEGIN 7 */
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef*)hUsbDeviceFS.pClassData;
 80178c0:	4b0d      	ldr	r3, [pc, #52]	; (80178f8 <CDC_Transmit_FS+0x48>)
 80178c2:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 80178c6:	60bb      	str	r3, [r7, #8]
  if (hcdc->TxState != 0){
 80178c8:	68bb      	ldr	r3, [r7, #8]
 80178ca:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 80178ce:	2b00      	cmp	r3, #0
 80178d0:	d001      	beq.n	80178d6 <CDC_Transmit_FS+0x26>
    return USBD_BUSY;
 80178d2:	2301      	movs	r3, #1
 80178d4:	e00b      	b.n	80178ee <CDC_Transmit_FS+0x3e>
  }
  USBD_CDC_SetTxBuffer(&hUsbDeviceFS, Buf, Len);
 80178d6:	887b      	ldrh	r3, [r7, #2]
 80178d8:	461a      	mov	r2, r3
 80178da:	6879      	ldr	r1, [r7, #4]
 80178dc:	4806      	ldr	r0, [pc, #24]	; (80178f8 <CDC_Transmit_FS+0x48>)
 80178de:	f7f1 f91d 	bl	8008b1c <USBD_CDC_SetTxBuffer>
  result = USBD_CDC_TransmitPacket(&hUsbDeviceFS);
 80178e2:	4805      	ldr	r0, [pc, #20]	; (80178f8 <CDC_Transmit_FS+0x48>)
 80178e4:	f7f1 f95a 	bl	8008b9c <USBD_CDC_TransmitPacket>
 80178e8:	4603      	mov	r3, r0
 80178ea:	73fb      	strb	r3, [r7, #15]
  /* USER CODE END 7 */
  return result;
 80178ec:	7bfb      	ldrb	r3, [r7, #15]
}
 80178ee:	4618      	mov	r0, r3
 80178f0:	3710      	adds	r7, #16
 80178f2:	46bd      	mov	sp, r7
 80178f4:	bd80      	pop	{r7, pc}
 80178f6:	bf00      	nop
 80178f8:	20008ab8 	.word	0x20008ab8

080178fc <CDC_TransmitCplt_FS>:
  * @param  Buf: Buffer of data to be received
  * @param  Len: Number of data received (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_TransmitCplt_FS(uint8_t *Buf, uint32_t *Len, uint8_t epnum)
{
 80178fc:	b480      	push	{r7}
 80178fe:	b087      	sub	sp, #28
 8017900:	af00      	add	r7, sp, #0
 8017902:	60f8      	str	r0, [r7, #12]
 8017904:	60b9      	str	r1, [r7, #8]
 8017906:	4613      	mov	r3, r2
 8017908:	71fb      	strb	r3, [r7, #7]
  uint8_t result = USBD_OK;
 801790a:	2300      	movs	r3, #0
 801790c:	75fb      	strb	r3, [r7, #23]
  /* USER CODE BEGIN 13 */
  UNUSED(Buf);
  UNUSED(Len);
  UNUSED(epnum);
  /* USER CODE END 13 */
  return result;
 801790e:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 8017912:	4618      	mov	r0, r3
 8017914:	371c      	adds	r7, #28
 8017916:	46bd      	mov	sp, r7
 8017918:	f85d 7b04 	ldr.w	r7, [sp], #4
 801791c:	4770      	bx	lr
	...

08017920 <USBD_FS_DeviceDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_DeviceDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8017920:	b480      	push	{r7}
 8017922:	b083      	sub	sp, #12
 8017924:	af00      	add	r7, sp, #0
 8017926:	4603      	mov	r3, r0
 8017928:	6039      	str	r1, [r7, #0]
 801792a:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_FS_DeviceDesc);
 801792c:	683b      	ldr	r3, [r7, #0]
 801792e:	2212      	movs	r2, #18
 8017930:	801a      	strh	r2, [r3, #0]
  return USBD_FS_DeviceDesc;
 8017932:	4b03      	ldr	r3, [pc, #12]	; (8017940 <USBD_FS_DeviceDescriptor+0x20>)
}
 8017934:	4618      	mov	r0, r3
 8017936:	370c      	adds	r7, #12
 8017938:	46bd      	mov	sp, r7
 801793a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801793e:	4770      	bx	lr
 8017940:	200000e8 	.word	0x200000e8

08017944 <USBD_FS_LangIDStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_LangIDStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8017944:	b480      	push	{r7}
 8017946:	b083      	sub	sp, #12
 8017948:	af00      	add	r7, sp, #0
 801794a:	4603      	mov	r3, r0
 801794c:	6039      	str	r1, [r7, #0]
 801794e:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_LangIDDesc);
 8017950:	683b      	ldr	r3, [r7, #0]
 8017952:	2204      	movs	r2, #4
 8017954:	801a      	strh	r2, [r3, #0]
  return USBD_LangIDDesc;
 8017956:	4b03      	ldr	r3, [pc, #12]	; (8017964 <USBD_FS_LangIDStrDescriptor+0x20>)
}
 8017958:	4618      	mov	r0, r3
 801795a:	370c      	adds	r7, #12
 801795c:	46bd      	mov	sp, r7
 801795e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8017962:	4770      	bx	lr
 8017964:	200000fc 	.word	0x200000fc

08017968 <USBD_FS_ProductStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ProductStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8017968:	b580      	push	{r7, lr}
 801796a:	b082      	sub	sp, #8
 801796c:	af00      	add	r7, sp, #0
 801796e:	4603      	mov	r3, r0
 8017970:	6039      	str	r1, [r7, #0]
 8017972:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 8017974:	79fb      	ldrb	r3, [r7, #7]
 8017976:	2b00      	cmp	r3, #0
 8017978:	d105      	bne.n	8017986 <USBD_FS_ProductStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 801797a:	683a      	ldr	r2, [r7, #0]
 801797c:	4907      	ldr	r1, [pc, #28]	; (801799c <USBD_FS_ProductStrDescriptor+0x34>)
 801797e:	4808      	ldr	r0, [pc, #32]	; (80179a0 <USBD_FS_ProductStrDescriptor+0x38>)
 8017980:	f7f2 fb9a 	bl	800a0b8 <USBD_GetString>
 8017984:	e004      	b.n	8017990 <USBD_FS_ProductStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 8017986:	683a      	ldr	r2, [r7, #0]
 8017988:	4904      	ldr	r1, [pc, #16]	; (801799c <USBD_FS_ProductStrDescriptor+0x34>)
 801798a:	4805      	ldr	r0, [pc, #20]	; (80179a0 <USBD_FS_ProductStrDescriptor+0x38>)
 801798c:	f7f2 fb94 	bl	800a0b8 <USBD_GetString>
  }
  return USBD_StrDesc;
 8017990:	4b02      	ldr	r3, [pc, #8]	; (801799c <USBD_FS_ProductStrDescriptor+0x34>)
}
 8017992:	4618      	mov	r0, r3
 8017994:	3708      	adds	r7, #8
 8017996:	46bd      	mov	sp, r7
 8017998:	bd80      	pop	{r7, pc}
 801799a:	bf00      	nop
 801799c:	20009d94 	.word	0x20009d94
 80179a0:	0801c168 	.word	0x0801c168

080179a4 <USBD_FS_ManufacturerStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ManufacturerStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 80179a4:	b580      	push	{r7, lr}
 80179a6:	b082      	sub	sp, #8
 80179a8:	af00      	add	r7, sp, #0
 80179aa:	4603      	mov	r3, r0
 80179ac:	6039      	str	r1, [r7, #0]
 80179ae:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  USBD_GetString((uint8_t *)USBD_MANUFACTURER_STRING, USBD_StrDesc, length);
 80179b0:	683a      	ldr	r2, [r7, #0]
 80179b2:	4904      	ldr	r1, [pc, #16]	; (80179c4 <USBD_FS_ManufacturerStrDescriptor+0x20>)
 80179b4:	4804      	ldr	r0, [pc, #16]	; (80179c8 <USBD_FS_ManufacturerStrDescriptor+0x24>)
 80179b6:	f7f2 fb7f 	bl	800a0b8 <USBD_GetString>
  return USBD_StrDesc;
 80179ba:	4b02      	ldr	r3, [pc, #8]	; (80179c4 <USBD_FS_ManufacturerStrDescriptor+0x20>)
}
 80179bc:	4618      	mov	r0, r3
 80179be:	3708      	adds	r7, #8
 80179c0:	46bd      	mov	sp, r7
 80179c2:	bd80      	pop	{r7, pc}
 80179c4:	20009d94 	.word	0x20009d94
 80179c8:	0801c180 	.word	0x0801c180

080179cc <USBD_FS_SerialStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_SerialStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 80179cc:	b580      	push	{r7, lr}
 80179ce:	b082      	sub	sp, #8
 80179d0:	af00      	add	r7, sp, #0
 80179d2:	4603      	mov	r3, r0
 80179d4:	6039      	str	r1, [r7, #0]
 80179d6:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = USB_SIZ_STRING_SERIAL;
 80179d8:	683b      	ldr	r3, [r7, #0]
 80179da:	221a      	movs	r2, #26
 80179dc:	801a      	strh	r2, [r3, #0]

  /* Update the serial number string descriptor with the data from the unique
   * ID */
  Get_SerialNum();
 80179de:	f000 f843 	bl	8017a68 <Get_SerialNum>
  /* USER CODE BEGIN USBD_FS_SerialStrDescriptor */

  /* USER CODE END USBD_FS_SerialStrDescriptor */
  return (uint8_t *) USBD_StringSerial;
 80179e2:	4b02      	ldr	r3, [pc, #8]	; (80179ec <USBD_FS_SerialStrDescriptor+0x20>)
}
 80179e4:	4618      	mov	r0, r3
 80179e6:	3708      	adds	r7, #8
 80179e8:	46bd      	mov	sp, r7
 80179ea:	bd80      	pop	{r7, pc}
 80179ec:	20000100 	.word	0x20000100

080179f0 <USBD_FS_ConfigStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ConfigStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 80179f0:	b580      	push	{r7, lr}
 80179f2:	b082      	sub	sp, #8
 80179f4:	af00      	add	r7, sp, #0
 80179f6:	4603      	mov	r3, r0
 80179f8:	6039      	str	r1, [r7, #0]
 80179fa:	71fb      	strb	r3, [r7, #7]
  if(speed == USBD_SPEED_HIGH)
 80179fc:	79fb      	ldrb	r3, [r7, #7]
 80179fe:	2b00      	cmp	r3, #0
 8017a00:	d105      	bne.n	8017a0e <USBD_FS_ConfigStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 8017a02:	683a      	ldr	r2, [r7, #0]
 8017a04:	4907      	ldr	r1, [pc, #28]	; (8017a24 <USBD_FS_ConfigStrDescriptor+0x34>)
 8017a06:	4808      	ldr	r0, [pc, #32]	; (8017a28 <USBD_FS_ConfigStrDescriptor+0x38>)
 8017a08:	f7f2 fb56 	bl	800a0b8 <USBD_GetString>
 8017a0c:	e004      	b.n	8017a18 <USBD_FS_ConfigStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 8017a0e:	683a      	ldr	r2, [r7, #0]
 8017a10:	4904      	ldr	r1, [pc, #16]	; (8017a24 <USBD_FS_ConfigStrDescriptor+0x34>)
 8017a12:	4805      	ldr	r0, [pc, #20]	; (8017a28 <USBD_FS_ConfigStrDescriptor+0x38>)
 8017a14:	f7f2 fb50 	bl	800a0b8 <USBD_GetString>
  }
  return USBD_StrDesc;
 8017a18:	4b02      	ldr	r3, [pc, #8]	; (8017a24 <USBD_FS_ConfigStrDescriptor+0x34>)
}
 8017a1a:	4618      	mov	r0, r3
 8017a1c:	3708      	adds	r7, #8
 8017a1e:	46bd      	mov	sp, r7
 8017a20:	bd80      	pop	{r7, pc}
 8017a22:	bf00      	nop
 8017a24:	20009d94 	.word	0x20009d94
 8017a28:	0801c194 	.word	0x0801c194

08017a2c <USBD_FS_InterfaceStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_InterfaceStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8017a2c:	b580      	push	{r7, lr}
 8017a2e:	b082      	sub	sp, #8
 8017a30:	af00      	add	r7, sp, #0
 8017a32:	4603      	mov	r3, r0
 8017a34:	6039      	str	r1, [r7, #0]
 8017a36:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 8017a38:	79fb      	ldrb	r3, [r7, #7]
 8017a3a:	2b00      	cmp	r3, #0
 8017a3c:	d105      	bne.n	8017a4a <USBD_FS_InterfaceStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 8017a3e:	683a      	ldr	r2, [r7, #0]
 8017a40:	4907      	ldr	r1, [pc, #28]	; (8017a60 <USBD_FS_InterfaceStrDescriptor+0x34>)
 8017a42:	4808      	ldr	r0, [pc, #32]	; (8017a64 <USBD_FS_InterfaceStrDescriptor+0x38>)
 8017a44:	f7f2 fb38 	bl	800a0b8 <USBD_GetString>
 8017a48:	e004      	b.n	8017a54 <USBD_FS_InterfaceStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 8017a4a:	683a      	ldr	r2, [r7, #0]
 8017a4c:	4904      	ldr	r1, [pc, #16]	; (8017a60 <USBD_FS_InterfaceStrDescriptor+0x34>)
 8017a4e:	4805      	ldr	r0, [pc, #20]	; (8017a64 <USBD_FS_InterfaceStrDescriptor+0x38>)
 8017a50:	f7f2 fb32 	bl	800a0b8 <USBD_GetString>
  }
  return USBD_StrDesc;
 8017a54:	4b02      	ldr	r3, [pc, #8]	; (8017a60 <USBD_FS_InterfaceStrDescriptor+0x34>)
}
 8017a56:	4618      	mov	r0, r3
 8017a58:	3708      	adds	r7, #8
 8017a5a:	46bd      	mov	sp, r7
 8017a5c:	bd80      	pop	{r7, pc}
 8017a5e:	bf00      	nop
 8017a60:	20009d94 	.word	0x20009d94
 8017a64:	0801c1a0 	.word	0x0801c1a0

08017a68 <Get_SerialNum>:
  * @brief  Create the serial number string descriptor
  * @param  None
  * @retval None
  */
static void Get_SerialNum(void)
{
 8017a68:	b580      	push	{r7, lr}
 8017a6a:	b084      	sub	sp, #16
 8017a6c:	af00      	add	r7, sp, #0
  uint32_t deviceserial0;
  uint32_t deviceserial1;
  uint32_t deviceserial2;

  deviceserial0 = *(uint32_t *) DEVICE_ID1;
 8017a6e:	4b0f      	ldr	r3, [pc, #60]	; (8017aac <Get_SerialNum+0x44>)
 8017a70:	681b      	ldr	r3, [r3, #0]
 8017a72:	60fb      	str	r3, [r7, #12]
  deviceserial1 = *(uint32_t *) DEVICE_ID2;
 8017a74:	4b0e      	ldr	r3, [pc, #56]	; (8017ab0 <Get_SerialNum+0x48>)
 8017a76:	681b      	ldr	r3, [r3, #0]
 8017a78:	60bb      	str	r3, [r7, #8]
  deviceserial2 = *(uint32_t *) DEVICE_ID3;
 8017a7a:	4b0e      	ldr	r3, [pc, #56]	; (8017ab4 <Get_SerialNum+0x4c>)
 8017a7c:	681b      	ldr	r3, [r3, #0]
 8017a7e:	607b      	str	r3, [r7, #4]

  deviceserial0 += deviceserial2;
 8017a80:	68fa      	ldr	r2, [r7, #12]
 8017a82:	687b      	ldr	r3, [r7, #4]
 8017a84:	4413      	add	r3, r2
 8017a86:	60fb      	str	r3, [r7, #12]

  if (deviceserial0 != 0)
 8017a88:	68fb      	ldr	r3, [r7, #12]
 8017a8a:	2b00      	cmp	r3, #0
 8017a8c:	d009      	beq.n	8017aa2 <Get_SerialNum+0x3a>
  {
    IntToUnicode(deviceserial0, &USBD_StringSerial[2], 8);
 8017a8e:	2208      	movs	r2, #8
 8017a90:	4909      	ldr	r1, [pc, #36]	; (8017ab8 <Get_SerialNum+0x50>)
 8017a92:	68f8      	ldr	r0, [r7, #12]
 8017a94:	f000 f814 	bl	8017ac0 <IntToUnicode>
    IntToUnicode(deviceserial1, &USBD_StringSerial[18], 4);
 8017a98:	2204      	movs	r2, #4
 8017a9a:	4908      	ldr	r1, [pc, #32]	; (8017abc <Get_SerialNum+0x54>)
 8017a9c:	68b8      	ldr	r0, [r7, #8]
 8017a9e:	f000 f80f 	bl	8017ac0 <IntToUnicode>
  }
}
 8017aa2:	bf00      	nop
 8017aa4:	3710      	adds	r7, #16
 8017aa6:	46bd      	mov	sp, r7
 8017aa8:	bd80      	pop	{r7, pc}
 8017aaa:	bf00      	nop
 8017aac:	1fff7a10 	.word	0x1fff7a10
 8017ab0:	1fff7a14 	.word	0x1fff7a14
 8017ab4:	1fff7a18 	.word	0x1fff7a18
 8017ab8:	20000102 	.word	0x20000102
 8017abc:	20000112 	.word	0x20000112

08017ac0 <IntToUnicode>:
  * @param  pbuf: pointer to the buffer
  * @param  len: buffer length
  * @retval None
  */
static void IntToUnicode(uint32_t value, uint8_t * pbuf, uint8_t len)
{
 8017ac0:	b480      	push	{r7}
 8017ac2:	b087      	sub	sp, #28
 8017ac4:	af00      	add	r7, sp, #0
 8017ac6:	60f8      	str	r0, [r7, #12]
 8017ac8:	60b9      	str	r1, [r7, #8]
 8017aca:	4613      	mov	r3, r2
 8017acc:	71fb      	strb	r3, [r7, #7]
  uint8_t idx = 0;
 8017ace:	2300      	movs	r3, #0
 8017ad0:	75fb      	strb	r3, [r7, #23]

  for (idx = 0; idx < len; idx++)
 8017ad2:	2300      	movs	r3, #0
 8017ad4:	75fb      	strb	r3, [r7, #23]
 8017ad6:	e027      	b.n	8017b28 <IntToUnicode+0x68>
  {
    if (((value >> 28)) < 0xA)
 8017ad8:	68fb      	ldr	r3, [r7, #12]
 8017ada:	0f1b      	lsrs	r3, r3, #28
 8017adc:	2b09      	cmp	r3, #9
 8017ade:	d80b      	bhi.n	8017af8 <IntToUnicode+0x38>
    {
      pbuf[2 * idx] = (value >> 28) + '0';
 8017ae0:	68fb      	ldr	r3, [r7, #12]
 8017ae2:	0f1b      	lsrs	r3, r3, #28
 8017ae4:	b2da      	uxtb	r2, r3
 8017ae6:	7dfb      	ldrb	r3, [r7, #23]
 8017ae8:	005b      	lsls	r3, r3, #1
 8017aea:	4619      	mov	r1, r3
 8017aec:	68bb      	ldr	r3, [r7, #8]
 8017aee:	440b      	add	r3, r1
 8017af0:	3230      	adds	r2, #48	; 0x30
 8017af2:	b2d2      	uxtb	r2, r2
 8017af4:	701a      	strb	r2, [r3, #0]
 8017af6:	e00a      	b.n	8017b0e <IntToUnicode+0x4e>
    }
    else
    {
      pbuf[2 * idx] = (value >> 28) + 'A' - 10;
 8017af8:	68fb      	ldr	r3, [r7, #12]
 8017afa:	0f1b      	lsrs	r3, r3, #28
 8017afc:	b2da      	uxtb	r2, r3
 8017afe:	7dfb      	ldrb	r3, [r7, #23]
 8017b00:	005b      	lsls	r3, r3, #1
 8017b02:	4619      	mov	r1, r3
 8017b04:	68bb      	ldr	r3, [r7, #8]
 8017b06:	440b      	add	r3, r1
 8017b08:	3237      	adds	r2, #55	; 0x37
 8017b0a:	b2d2      	uxtb	r2, r2
 8017b0c:	701a      	strb	r2, [r3, #0]
    }

    value = value << 4;
 8017b0e:	68fb      	ldr	r3, [r7, #12]
 8017b10:	011b      	lsls	r3, r3, #4
 8017b12:	60fb      	str	r3, [r7, #12]

    pbuf[2 * idx + 1] = 0;
 8017b14:	7dfb      	ldrb	r3, [r7, #23]
 8017b16:	005b      	lsls	r3, r3, #1
 8017b18:	3301      	adds	r3, #1
 8017b1a:	68ba      	ldr	r2, [r7, #8]
 8017b1c:	4413      	add	r3, r2
 8017b1e:	2200      	movs	r2, #0
 8017b20:	701a      	strb	r2, [r3, #0]
  for (idx = 0; idx < len; idx++)
 8017b22:	7dfb      	ldrb	r3, [r7, #23]
 8017b24:	3301      	adds	r3, #1
 8017b26:	75fb      	strb	r3, [r7, #23]
 8017b28:	7dfa      	ldrb	r2, [r7, #23]
 8017b2a:	79fb      	ldrb	r3, [r7, #7]
 8017b2c:	429a      	cmp	r2, r3
 8017b2e:	d3d3      	bcc.n	8017ad8 <IntToUnicode+0x18>
  }
}
 8017b30:	bf00      	nop
 8017b32:	bf00      	nop
 8017b34:	371c      	adds	r7, #28
 8017b36:	46bd      	mov	sp, r7
 8017b38:	f85d 7b04 	ldr.w	r7, [sp], #4
 8017b3c:	4770      	bx	lr
	...

08017b40 <HAL_PCD_MspInit>:
                       LL Driver Callbacks (PCD -> USB Device Library)
*******************************************************************************/
/* MSP Init */

void HAL_PCD_MspInit(PCD_HandleTypeDef* pcdHandle)
{
 8017b40:	b580      	push	{r7, lr}
 8017b42:	b08a      	sub	sp, #40	; 0x28
 8017b44:	af00      	add	r7, sp, #0
 8017b46:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8017b48:	f107 0314 	add.w	r3, r7, #20
 8017b4c:	2200      	movs	r2, #0
 8017b4e:	601a      	str	r2, [r3, #0]
 8017b50:	605a      	str	r2, [r3, #4]
 8017b52:	609a      	str	r2, [r3, #8]
 8017b54:	60da      	str	r2, [r3, #12]
 8017b56:	611a      	str	r2, [r3, #16]
  if(pcdHandle->Instance==USB_OTG_FS)
 8017b58:	687b      	ldr	r3, [r7, #4]
 8017b5a:	681b      	ldr	r3, [r3, #0]
 8017b5c:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8017b60:	d13a      	bne.n	8017bd8 <HAL_PCD_MspInit+0x98>
  {
  /* USER CODE BEGIN USB_OTG_FS_MspInit 0 */

  /* USER CODE END USB_OTG_FS_MspInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8017b62:	2300      	movs	r3, #0
 8017b64:	613b      	str	r3, [r7, #16]
 8017b66:	4b1e      	ldr	r3, [pc, #120]	; (8017be0 <HAL_PCD_MspInit+0xa0>)
 8017b68:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8017b6a:	4a1d      	ldr	r2, [pc, #116]	; (8017be0 <HAL_PCD_MspInit+0xa0>)
 8017b6c:	f043 0301 	orr.w	r3, r3, #1
 8017b70:	6313      	str	r3, [r2, #48]	; 0x30
 8017b72:	4b1b      	ldr	r3, [pc, #108]	; (8017be0 <HAL_PCD_MspInit+0xa0>)
 8017b74:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8017b76:	f003 0301 	and.w	r3, r3, #1
 8017b7a:	613b      	str	r3, [r7, #16]
 8017b7c:	693b      	ldr	r3, [r7, #16]
    /**USB_OTG_FS GPIO Configuration
    PA11     ------> USB_OTG_FS_DM
    PA12     ------> USB_OTG_FS_DP
    */
    GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_12;
 8017b7e:	f44f 53c0 	mov.w	r3, #6144	; 0x1800
 8017b82:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8017b84:	2302      	movs	r3, #2
 8017b86:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8017b88:	2300      	movs	r3, #0
 8017b8a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8017b8c:	2303      	movs	r3, #3
 8017b8e:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 8017b90:	230a      	movs	r3, #10
 8017b92:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8017b94:	f107 0314 	add.w	r3, r7, #20
 8017b98:	4619      	mov	r1, r3
 8017b9a:	4812      	ldr	r0, [pc, #72]	; (8017be4 <HAL_PCD_MspInit+0xa4>)
 8017b9c:	f7eb fbb4 	bl	8003308 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_OTG_FS_CLK_ENABLE();
 8017ba0:	4b0f      	ldr	r3, [pc, #60]	; (8017be0 <HAL_PCD_MspInit+0xa0>)
 8017ba2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8017ba4:	4a0e      	ldr	r2, [pc, #56]	; (8017be0 <HAL_PCD_MspInit+0xa0>)
 8017ba6:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8017baa:	6353      	str	r3, [r2, #52]	; 0x34
 8017bac:	2300      	movs	r3, #0
 8017bae:	60fb      	str	r3, [r7, #12]
 8017bb0:	4b0b      	ldr	r3, [pc, #44]	; (8017be0 <HAL_PCD_MspInit+0xa0>)
 8017bb2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8017bb4:	4a0a      	ldr	r2, [pc, #40]	; (8017be0 <HAL_PCD_MspInit+0xa0>)
 8017bb6:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8017bba:	6453      	str	r3, [r2, #68]	; 0x44
 8017bbc:	4b08      	ldr	r3, [pc, #32]	; (8017be0 <HAL_PCD_MspInit+0xa0>)
 8017bbe:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8017bc0:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8017bc4:	60fb      	str	r3, [r7, #12]
 8017bc6:	68fb      	ldr	r3, [r7, #12]

    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(OTG_FS_IRQn, 0, 0);
 8017bc8:	2200      	movs	r2, #0
 8017bca:	2100      	movs	r1, #0
 8017bcc:	2043      	movs	r0, #67	; 0x43
 8017bce:	f7e9 fe2e 	bl	800182e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(OTG_FS_IRQn);
 8017bd2:	2043      	movs	r0, #67	; 0x43
 8017bd4:	f7e9 fe47 	bl	8001866 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USB_OTG_FS_MspInit 1 */

  /* USER CODE END USB_OTG_FS_MspInit 1 */
  }
}
 8017bd8:	bf00      	nop
 8017bda:	3728      	adds	r7, #40	; 0x28
 8017bdc:	46bd      	mov	sp, r7
 8017bde:	bd80      	pop	{r7, pc}
 8017be0:	40023800 	.word	0x40023800
 8017be4:	40020000 	.word	0x40020000

08017be8 <HAL_PCD_SetupStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8017be8:	b580      	push	{r7, lr}
 8017bea:	b082      	sub	sp, #8
 8017bec:	af00      	add	r7, sp, #0
 8017bee:	6078      	str	r0, [r7, #4]
  USBD_LL_SetupStage((USBD_HandleTypeDef*)hpcd->pData, (uint8_t *)hpcd->Setup);
 8017bf0:	687b      	ldr	r3, [r7, #4]
 8017bf2:	f8d3 24e0 	ldr.w	r2, [r3, #1248]	; 0x4e0
 8017bf6:	687b      	ldr	r3, [r7, #4]
 8017bf8:	f203 439c 	addw	r3, r3, #1180	; 0x49c
 8017bfc:	4619      	mov	r1, r3
 8017bfe:	4610      	mov	r0, r2
 8017c00:	f7f1 f8f5 	bl	8008dee <USBD_LL_SetupStage>
}
 8017c04:	bf00      	nop
 8017c06:	3708      	adds	r7, #8
 8017c08:	46bd      	mov	sp, r7
 8017c0a:	bd80      	pop	{r7, pc}

08017c0c <HAL_PCD_DataOutStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8017c0c:	b580      	push	{r7, lr}
 8017c0e:	b082      	sub	sp, #8
 8017c10:	af00      	add	r7, sp, #0
 8017c12:	6078      	str	r0, [r7, #4]
 8017c14:	460b      	mov	r3, r1
 8017c16:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataOutStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->OUT_ep[epnum].xfer_buff);
 8017c18:	687b      	ldr	r3, [r7, #4]
 8017c1a:	f8d3 04e0 	ldr.w	r0, [r3, #1248]	; 0x4e0
 8017c1e:	78fa      	ldrb	r2, [r7, #3]
 8017c20:	6879      	ldr	r1, [r7, #4]
 8017c22:	4613      	mov	r3, r2
 8017c24:	00db      	lsls	r3, r3, #3
 8017c26:	4413      	add	r3, r2
 8017c28:	009b      	lsls	r3, r3, #2
 8017c2a:	440b      	add	r3, r1
 8017c2c:	f503 7318 	add.w	r3, r3, #608	; 0x260
 8017c30:	681a      	ldr	r2, [r3, #0]
 8017c32:	78fb      	ldrb	r3, [r7, #3]
 8017c34:	4619      	mov	r1, r3
 8017c36:	f7f1 f92f 	bl	8008e98 <USBD_LL_DataOutStage>
}
 8017c3a:	bf00      	nop
 8017c3c:	3708      	adds	r7, #8
 8017c3e:	46bd      	mov	sp, r7
 8017c40:	bd80      	pop	{r7, pc}

08017c42 <HAL_PCD_DataInStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8017c42:	b580      	push	{r7, lr}
 8017c44:	b082      	sub	sp, #8
 8017c46:	af00      	add	r7, sp, #0
 8017c48:	6078      	str	r0, [r7, #4]
 8017c4a:	460b      	mov	r3, r1
 8017c4c:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataInStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->IN_ep[epnum].xfer_buff);
 8017c4e:	687b      	ldr	r3, [r7, #4]
 8017c50:	f8d3 04e0 	ldr.w	r0, [r3, #1248]	; 0x4e0
 8017c54:	78fa      	ldrb	r2, [r7, #3]
 8017c56:	6879      	ldr	r1, [r7, #4]
 8017c58:	4613      	mov	r3, r2
 8017c5a:	00db      	lsls	r3, r3, #3
 8017c5c:	4413      	add	r3, r2
 8017c5e:	009b      	lsls	r3, r3, #2
 8017c60:	440b      	add	r3, r1
 8017c62:	3320      	adds	r3, #32
 8017c64:	681a      	ldr	r2, [r3, #0]
 8017c66:	78fb      	ldrb	r3, [r7, #3]
 8017c68:	4619      	mov	r1, r3
 8017c6a:	f7f1 f9c8 	bl	8008ffe <USBD_LL_DataInStage>
}
 8017c6e:	bf00      	nop
 8017c70:	3708      	adds	r7, #8
 8017c72:	46bd      	mov	sp, r7
 8017c74:	bd80      	pop	{r7, pc}

08017c76 <HAL_PCD_SOFCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8017c76:	b580      	push	{r7, lr}
 8017c78:	b082      	sub	sp, #8
 8017c7a:	af00      	add	r7, sp, #0
 8017c7c:	6078      	str	r0, [r7, #4]
  USBD_LL_SOF((USBD_HandleTypeDef*)hpcd->pData);
 8017c7e:	687b      	ldr	r3, [r7, #4]
 8017c80:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	; 0x4e0
 8017c84:	4618      	mov	r0, r3
 8017c86:	f7f1 fb02 	bl	800928e <USBD_LL_SOF>
}
 8017c8a:	bf00      	nop
 8017c8c:	3708      	adds	r7, #8
 8017c8e:	46bd      	mov	sp, r7
 8017c90:	bd80      	pop	{r7, pc}

08017c92 <HAL_PCD_ResetCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8017c92:	b580      	push	{r7, lr}
 8017c94:	b084      	sub	sp, #16
 8017c96:	af00      	add	r7, sp, #0
 8017c98:	6078      	str	r0, [r7, #4]
  USBD_SpeedTypeDef speed = USBD_SPEED_FULL;
 8017c9a:	2301      	movs	r3, #1
 8017c9c:	73fb      	strb	r3, [r7, #15]

  if ( hpcd->Init.speed == PCD_SPEED_HIGH)
 8017c9e:	687b      	ldr	r3, [r7, #4]
 8017ca0:	79db      	ldrb	r3, [r3, #7]
 8017ca2:	2b00      	cmp	r3, #0
 8017ca4:	d102      	bne.n	8017cac <HAL_PCD_ResetCallback+0x1a>
  {
    speed = USBD_SPEED_HIGH;
 8017ca6:	2300      	movs	r3, #0
 8017ca8:	73fb      	strb	r3, [r7, #15]
 8017caa:	e008      	b.n	8017cbe <HAL_PCD_ResetCallback+0x2c>
  }
  else if ( hpcd->Init.speed == PCD_SPEED_FULL)
 8017cac:	687b      	ldr	r3, [r7, #4]
 8017cae:	79db      	ldrb	r3, [r3, #7]
 8017cb0:	2b02      	cmp	r3, #2
 8017cb2:	d102      	bne.n	8017cba <HAL_PCD_ResetCallback+0x28>
  {
    speed = USBD_SPEED_FULL;
 8017cb4:	2301      	movs	r3, #1
 8017cb6:	73fb      	strb	r3, [r7, #15]
 8017cb8:	e001      	b.n	8017cbe <HAL_PCD_ResetCallback+0x2c>
  }
  else
  {
    Error_Handler();
 8017cba:	f7e8 fd8b 	bl	80007d4 <Error_Handler>
  }
    /* Set Speed. */
  USBD_LL_SetSpeed((USBD_HandleTypeDef*)hpcd->pData, speed);
 8017cbe:	687b      	ldr	r3, [r7, #4]
 8017cc0:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	; 0x4e0
 8017cc4:	7bfa      	ldrb	r2, [r7, #15]
 8017cc6:	4611      	mov	r1, r2
 8017cc8:	4618      	mov	r0, r3
 8017cca:	f7f1 fa9c 	bl	8009206 <USBD_LL_SetSpeed>

  /* Reset Device. */
  USBD_LL_Reset((USBD_HandleTypeDef*)hpcd->pData);
 8017cce:	687b      	ldr	r3, [r7, #4]
 8017cd0:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	; 0x4e0
 8017cd4:	4618      	mov	r0, r3
 8017cd6:	f7f1 fa44 	bl	8009162 <USBD_LL_Reset>
}
 8017cda:	bf00      	nop
 8017cdc:	3710      	adds	r7, #16
 8017cde:	46bd      	mov	sp, r7
 8017ce0:	bd80      	pop	{r7, pc}
	...

08017ce4 <HAL_PCD_SuspendCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8017ce4:	b580      	push	{r7, lr}
 8017ce6:	b082      	sub	sp, #8
 8017ce8:	af00      	add	r7, sp, #0
 8017cea:	6078      	str	r0, [r7, #4]
  /* Inform USB library that core enters in suspend Mode. */
  USBD_LL_Suspend((USBD_HandleTypeDef*)hpcd->pData);
 8017cec:	687b      	ldr	r3, [r7, #4]
 8017cee:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	; 0x4e0
 8017cf2:	4618      	mov	r0, r3
 8017cf4:	f7f1 fa97 	bl	8009226 <USBD_LL_Suspend>
  __HAL_PCD_GATE_PHYCLOCK(hpcd);
 8017cf8:	687b      	ldr	r3, [r7, #4]
 8017cfa:	681b      	ldr	r3, [r3, #0]
 8017cfc:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8017d00:	681b      	ldr	r3, [r3, #0]
 8017d02:	687a      	ldr	r2, [r7, #4]
 8017d04:	6812      	ldr	r2, [r2, #0]
 8017d06:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 8017d0a:	f043 0301 	orr.w	r3, r3, #1
 8017d0e:	6013      	str	r3, [r2, #0]
  /* Enter in STOP mode. */
  /* USER CODE BEGIN 2 */
  if (hpcd->Init.low_power_enable)
 8017d10:	687b      	ldr	r3, [r7, #4]
 8017d12:	7adb      	ldrb	r3, [r3, #11]
 8017d14:	2b00      	cmp	r3, #0
 8017d16:	d005      	beq.n	8017d24 <HAL_PCD_SuspendCallback+0x40>
  {
    /* Set SLEEPDEEP bit and SleepOnExit of Cortex System Control Register. */
    SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 8017d18:	4b04      	ldr	r3, [pc, #16]	; (8017d2c <HAL_PCD_SuspendCallback+0x48>)
 8017d1a:	691b      	ldr	r3, [r3, #16]
 8017d1c:	4a03      	ldr	r2, [pc, #12]	; (8017d2c <HAL_PCD_SuspendCallback+0x48>)
 8017d1e:	f043 0306 	orr.w	r3, r3, #6
 8017d22:	6113      	str	r3, [r2, #16]
  }
  /* USER CODE END 2 */
}
 8017d24:	bf00      	nop
 8017d26:	3708      	adds	r7, #8
 8017d28:	46bd      	mov	sp, r7
 8017d2a:	bd80      	pop	{r7, pc}
 8017d2c:	e000ed00 	.word	0xe000ed00

08017d30 <HAL_PCD_ResumeCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8017d30:	b580      	push	{r7, lr}
 8017d32:	b082      	sub	sp, #8
 8017d34:	af00      	add	r7, sp, #0
 8017d36:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 3 */

  /* USER CODE END 3 */
  USBD_LL_Resume((USBD_HandleTypeDef*)hpcd->pData);
 8017d38:	687b      	ldr	r3, [r7, #4]
 8017d3a:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	; 0x4e0
 8017d3e:	4618      	mov	r0, r3
 8017d40:	f7f1 fa8d 	bl	800925e <USBD_LL_Resume>
}
 8017d44:	bf00      	nop
 8017d46:	3708      	adds	r7, #8
 8017d48:	46bd      	mov	sp, r7
 8017d4a:	bd80      	pop	{r7, pc}

08017d4c <HAL_PCD_ISOOUTIncompleteCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ISOOUTIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_ISOOUTIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8017d4c:	b580      	push	{r7, lr}
 8017d4e:	b082      	sub	sp, #8
 8017d50:	af00      	add	r7, sp, #0
 8017d52:	6078      	str	r0, [r7, #4]
 8017d54:	460b      	mov	r3, r1
 8017d56:	70fb      	strb	r3, [r7, #3]
  USBD_LL_IsoOUTIncomplete((USBD_HandleTypeDef*)hpcd->pData, epnum);
 8017d58:	687b      	ldr	r3, [r7, #4]
 8017d5a:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	; 0x4e0
 8017d5e:	78fa      	ldrb	r2, [r7, #3]
 8017d60:	4611      	mov	r1, r2
 8017d62:	4618      	mov	r0, r3
 8017d64:	f7f1 fae5 	bl	8009332 <USBD_LL_IsoOUTIncomplete>
}
 8017d68:	bf00      	nop
 8017d6a:	3708      	adds	r7, #8
 8017d6c:	46bd      	mov	sp, r7
 8017d6e:	bd80      	pop	{r7, pc}

08017d70 <HAL_PCD_ISOINIncompleteCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ISOINIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_ISOINIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8017d70:	b580      	push	{r7, lr}
 8017d72:	b082      	sub	sp, #8
 8017d74:	af00      	add	r7, sp, #0
 8017d76:	6078      	str	r0, [r7, #4]
 8017d78:	460b      	mov	r3, r1
 8017d7a:	70fb      	strb	r3, [r7, #3]
  USBD_LL_IsoINIncomplete((USBD_HandleTypeDef*)hpcd->pData, epnum);
 8017d7c:	687b      	ldr	r3, [r7, #4]
 8017d7e:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	; 0x4e0
 8017d82:	78fa      	ldrb	r2, [r7, #3]
 8017d84:	4611      	mov	r1, r2
 8017d86:	4618      	mov	r0, r3
 8017d88:	f7f1 faa1 	bl	80092ce <USBD_LL_IsoINIncomplete>
}
 8017d8c:	bf00      	nop
 8017d8e:	3708      	adds	r7, #8
 8017d90:	46bd      	mov	sp, r7
 8017d92:	bd80      	pop	{r7, pc}

08017d94 <HAL_PCD_ConnectCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ConnectCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ConnectCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8017d94:	b580      	push	{r7, lr}
 8017d96:	b082      	sub	sp, #8
 8017d98:	af00      	add	r7, sp, #0
 8017d9a:	6078      	str	r0, [r7, #4]
  USBD_LL_DevConnected((USBD_HandleTypeDef*)hpcd->pData);
 8017d9c:	687b      	ldr	r3, [r7, #4]
 8017d9e:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	; 0x4e0
 8017da2:	4618      	mov	r0, r3
 8017da4:	f7f1 faf7 	bl	8009396 <USBD_LL_DevConnected>
}
 8017da8:	bf00      	nop
 8017daa:	3708      	adds	r7, #8
 8017dac:	46bd      	mov	sp, r7
 8017dae:	bd80      	pop	{r7, pc}

08017db0 <HAL_PCD_DisconnectCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DisconnectCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_DisconnectCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8017db0:	b580      	push	{r7, lr}
 8017db2:	b082      	sub	sp, #8
 8017db4:	af00      	add	r7, sp, #0
 8017db6:	6078      	str	r0, [r7, #4]
  USBD_LL_DevDisconnected((USBD_HandleTypeDef*)hpcd->pData);
 8017db8:	687b      	ldr	r3, [r7, #4]
 8017dba:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	; 0x4e0
 8017dbe:	4618      	mov	r0, r3
 8017dc0:	f7f1 faf4 	bl	80093ac <USBD_LL_DevDisconnected>
}
 8017dc4:	bf00      	nop
 8017dc6:	3708      	adds	r7, #8
 8017dc8:	46bd      	mov	sp, r7
 8017dca:	bd80      	pop	{r7, pc}

08017dcc <USBD_LL_Init>:
  * @brief  Initializes the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Init(USBD_HandleTypeDef *pdev)
{
 8017dcc:	b580      	push	{r7, lr}
 8017dce:	b082      	sub	sp, #8
 8017dd0:	af00      	add	r7, sp, #0
 8017dd2:	6078      	str	r0, [r7, #4]
  /* Init USB Ip. */
  if (pdev->id == DEVICE_FS) {
 8017dd4:	687b      	ldr	r3, [r7, #4]
 8017dd6:	781b      	ldrb	r3, [r3, #0]
 8017dd8:	2b00      	cmp	r3, #0
 8017dda:	d13c      	bne.n	8017e56 <USBD_LL_Init+0x8a>
  /* Link the driver to the stack. */
  hpcd_USB_OTG_FS.pData = pdev;
 8017ddc:	4a20      	ldr	r2, [pc, #128]	; (8017e60 <USBD_LL_Init+0x94>)
 8017dde:	687b      	ldr	r3, [r7, #4]
 8017de0:	f8c2 34e0 	str.w	r3, [r2, #1248]	; 0x4e0
  pdev->pData = &hpcd_USB_OTG_FS;
 8017de4:	687b      	ldr	r3, [r7, #4]
 8017de6:	4a1e      	ldr	r2, [pc, #120]	; (8017e60 <USBD_LL_Init+0x94>)
 8017de8:	f8c3 22c8 	str.w	r2, [r3, #712]	; 0x2c8

  hpcd_USB_OTG_FS.Instance = USB_OTG_FS;
 8017dec:	4b1c      	ldr	r3, [pc, #112]	; (8017e60 <USBD_LL_Init+0x94>)
 8017dee:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
 8017df2:	601a      	str	r2, [r3, #0]
  hpcd_USB_OTG_FS.Init.dev_endpoints = 4;
 8017df4:	4b1a      	ldr	r3, [pc, #104]	; (8017e60 <USBD_LL_Init+0x94>)
 8017df6:	2204      	movs	r2, #4
 8017df8:	711a      	strb	r2, [r3, #4]
  hpcd_USB_OTG_FS.Init.speed = PCD_SPEED_FULL;
 8017dfa:	4b19      	ldr	r3, [pc, #100]	; (8017e60 <USBD_LL_Init+0x94>)
 8017dfc:	2202      	movs	r2, #2
 8017dfe:	71da      	strb	r2, [r3, #7]
  hpcd_USB_OTG_FS.Init.dma_enable = DISABLE;
 8017e00:	4b17      	ldr	r3, [pc, #92]	; (8017e60 <USBD_LL_Init+0x94>)
 8017e02:	2200      	movs	r2, #0
 8017e04:	719a      	strb	r2, [r3, #6]
  hpcd_USB_OTG_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 8017e06:	4b16      	ldr	r3, [pc, #88]	; (8017e60 <USBD_LL_Init+0x94>)
 8017e08:	2202      	movs	r2, #2
 8017e0a:	725a      	strb	r2, [r3, #9]
  hpcd_USB_OTG_FS.Init.Sof_enable = DISABLE;
 8017e0c:	4b14      	ldr	r3, [pc, #80]	; (8017e60 <USBD_LL_Init+0x94>)
 8017e0e:	2200      	movs	r2, #0
 8017e10:	729a      	strb	r2, [r3, #10]
  hpcd_USB_OTG_FS.Init.low_power_enable = DISABLE;
 8017e12:	4b13      	ldr	r3, [pc, #76]	; (8017e60 <USBD_LL_Init+0x94>)
 8017e14:	2200      	movs	r2, #0
 8017e16:	72da      	strb	r2, [r3, #11]
  hpcd_USB_OTG_FS.Init.lpm_enable = DISABLE;
 8017e18:	4b11      	ldr	r3, [pc, #68]	; (8017e60 <USBD_LL_Init+0x94>)
 8017e1a:	2200      	movs	r2, #0
 8017e1c:	731a      	strb	r2, [r3, #12]
  hpcd_USB_OTG_FS.Init.vbus_sensing_enable = DISABLE;
 8017e1e:	4b10      	ldr	r3, [pc, #64]	; (8017e60 <USBD_LL_Init+0x94>)
 8017e20:	2200      	movs	r2, #0
 8017e22:	739a      	strb	r2, [r3, #14]
  hpcd_USB_OTG_FS.Init.use_dedicated_ep1 = DISABLE;
 8017e24:	4b0e      	ldr	r3, [pc, #56]	; (8017e60 <USBD_LL_Init+0x94>)
 8017e26:	2200      	movs	r2, #0
 8017e28:	73da      	strb	r2, [r3, #15]
  if (HAL_PCD_Init(&hpcd_USB_OTG_FS) != HAL_OK)
 8017e2a:	480d      	ldr	r0, [pc, #52]	; (8017e60 <USBD_LL_Init+0x94>)
 8017e2c:	f7eb fc08 	bl	8003640 <HAL_PCD_Init>
 8017e30:	4603      	mov	r3, r0
 8017e32:	2b00      	cmp	r3, #0
 8017e34:	d001      	beq.n	8017e3a <USBD_LL_Init+0x6e>
  {
    Error_Handler( );
 8017e36:	f7e8 fccd 	bl	80007d4 <Error_Handler>
  HAL_PCD_RegisterDataOutStageCallback(&hpcd_USB_OTG_FS, PCD_DataOutStageCallback);
  HAL_PCD_RegisterDataInStageCallback(&hpcd_USB_OTG_FS, PCD_DataInStageCallback);
  HAL_PCD_RegisterIsoOutIncpltCallback(&hpcd_USB_OTG_FS, PCD_ISOOUTIncompleteCallback);
  HAL_PCD_RegisterIsoInIncpltCallback(&hpcd_USB_OTG_FS, PCD_ISOINIncompleteCallback);
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
  HAL_PCDEx_SetRxFiFo(&hpcd_USB_OTG_FS, 0x80);
 8017e3a:	2180      	movs	r1, #128	; 0x80
 8017e3c:	4808      	ldr	r0, [pc, #32]	; (8017e60 <USBD_LL_Init+0x94>)
 8017e3e:	f7ec fe34 	bl	8004aaa <HAL_PCDEx_SetRxFiFo>
  HAL_PCDEx_SetTxFiFo(&hpcd_USB_OTG_FS, 0, 0x40);
 8017e42:	2240      	movs	r2, #64	; 0x40
 8017e44:	2100      	movs	r1, #0
 8017e46:	4806      	ldr	r0, [pc, #24]	; (8017e60 <USBD_LL_Init+0x94>)
 8017e48:	f7ec fde8 	bl	8004a1c <HAL_PCDEx_SetTxFiFo>
  HAL_PCDEx_SetTxFiFo(&hpcd_USB_OTG_FS, 1, 0x80);
 8017e4c:	2280      	movs	r2, #128	; 0x80
 8017e4e:	2101      	movs	r1, #1
 8017e50:	4803      	ldr	r0, [pc, #12]	; (8017e60 <USBD_LL_Init+0x94>)
 8017e52:	f7ec fde3 	bl	8004a1c <HAL_PCDEx_SetTxFiFo>
  }
  return USBD_OK;
 8017e56:	2300      	movs	r3, #0
}
 8017e58:	4618      	mov	r0, r3
 8017e5a:	3708      	adds	r7, #8
 8017e5c:	46bd      	mov	sp, r7
 8017e5e:	bd80      	pop	{r7, pc}
 8017e60:	20009f94 	.word	0x20009f94

08017e64 <USBD_LL_Start>:
  * @brief  Starts the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Start(USBD_HandleTypeDef *pdev)
{
 8017e64:	b580      	push	{r7, lr}
 8017e66:	b084      	sub	sp, #16
 8017e68:	af00      	add	r7, sp, #0
 8017e6a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8017e6c:	2300      	movs	r3, #0
 8017e6e:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8017e70:	2300      	movs	r3, #0
 8017e72:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_Start(pdev->pData);
 8017e74:	687b      	ldr	r3, [r7, #4]
 8017e76:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 8017e7a:	4618      	mov	r0, r3
 8017e7c:	f7eb fcef 	bl	800385e <HAL_PCD_Start>
 8017e80:	4603      	mov	r3, r0
 8017e82:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8017e84:	7bfb      	ldrb	r3, [r7, #15]
 8017e86:	4618      	mov	r0, r3
 8017e88:	f000 f942 	bl	8018110 <USBD_Get_USB_Status>
 8017e8c:	4603      	mov	r3, r0
 8017e8e:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8017e90:	7bbb      	ldrb	r3, [r7, #14]
}
 8017e92:	4618      	mov	r0, r3
 8017e94:	3710      	adds	r7, #16
 8017e96:	46bd      	mov	sp, r7
 8017e98:	bd80      	pop	{r7, pc}

08017e9a <USBD_LL_OpenEP>:
  * @param  ep_type: Endpoint type
  * @param  ep_mps: Endpoint max packet size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_OpenEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t ep_type, uint16_t ep_mps)
{
 8017e9a:	b580      	push	{r7, lr}
 8017e9c:	b084      	sub	sp, #16
 8017e9e:	af00      	add	r7, sp, #0
 8017ea0:	6078      	str	r0, [r7, #4]
 8017ea2:	4608      	mov	r0, r1
 8017ea4:	4611      	mov	r1, r2
 8017ea6:	461a      	mov	r2, r3
 8017ea8:	4603      	mov	r3, r0
 8017eaa:	70fb      	strb	r3, [r7, #3]
 8017eac:	460b      	mov	r3, r1
 8017eae:	70bb      	strb	r3, [r7, #2]
 8017eb0:	4613      	mov	r3, r2
 8017eb2:	803b      	strh	r3, [r7, #0]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8017eb4:	2300      	movs	r3, #0
 8017eb6:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8017eb8:	2300      	movs	r3, #0
 8017eba:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Open(pdev->pData, ep_addr, ep_mps, ep_type);
 8017ebc:	687b      	ldr	r3, [r7, #4]
 8017ebe:	f8d3 02c8 	ldr.w	r0, [r3, #712]	; 0x2c8
 8017ec2:	78bb      	ldrb	r3, [r7, #2]
 8017ec4:	883a      	ldrh	r2, [r7, #0]
 8017ec6:	78f9      	ldrb	r1, [r7, #3]
 8017ec8:	f7ec f9c3 	bl	8004252 <HAL_PCD_EP_Open>
 8017ecc:	4603      	mov	r3, r0
 8017ece:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8017ed0:	7bfb      	ldrb	r3, [r7, #15]
 8017ed2:	4618      	mov	r0, r3
 8017ed4:	f000 f91c 	bl	8018110 <USBD_Get_USB_Status>
 8017ed8:	4603      	mov	r3, r0
 8017eda:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8017edc:	7bbb      	ldrb	r3, [r7, #14]
}
 8017ede:	4618      	mov	r0, r3
 8017ee0:	3710      	adds	r7, #16
 8017ee2:	46bd      	mov	sp, r7
 8017ee4:	bd80      	pop	{r7, pc}

08017ee6 <USBD_LL_CloseEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_CloseEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8017ee6:	b580      	push	{r7, lr}
 8017ee8:	b084      	sub	sp, #16
 8017eea:	af00      	add	r7, sp, #0
 8017eec:	6078      	str	r0, [r7, #4]
 8017eee:	460b      	mov	r3, r1
 8017ef0:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8017ef2:	2300      	movs	r3, #0
 8017ef4:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8017ef6:	2300      	movs	r3, #0
 8017ef8:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Close(pdev->pData, ep_addr);
 8017efa:	687b      	ldr	r3, [r7, #4]
 8017efc:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 8017f00:	78fa      	ldrb	r2, [r7, #3]
 8017f02:	4611      	mov	r1, r2
 8017f04:	4618      	mov	r0, r3
 8017f06:	f7ec fa0e 	bl	8004326 <HAL_PCD_EP_Close>
 8017f0a:	4603      	mov	r3, r0
 8017f0c:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8017f0e:	7bfb      	ldrb	r3, [r7, #15]
 8017f10:	4618      	mov	r0, r3
 8017f12:	f000 f8fd 	bl	8018110 <USBD_Get_USB_Status>
 8017f16:	4603      	mov	r3, r0
 8017f18:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8017f1a:	7bbb      	ldrb	r3, [r7, #14]
}
 8017f1c:	4618      	mov	r0, r3
 8017f1e:	3710      	adds	r7, #16
 8017f20:	46bd      	mov	sp, r7
 8017f22:	bd80      	pop	{r7, pc}

08017f24 <USBD_LL_StallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_StallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8017f24:	b580      	push	{r7, lr}
 8017f26:	b084      	sub	sp, #16
 8017f28:	af00      	add	r7, sp, #0
 8017f2a:	6078      	str	r0, [r7, #4]
 8017f2c:	460b      	mov	r3, r1
 8017f2e:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8017f30:	2300      	movs	r3, #0
 8017f32:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8017f34:	2300      	movs	r3, #0
 8017f36:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_SetStall(pdev->pData, ep_addr);
 8017f38:	687b      	ldr	r3, [r7, #4]
 8017f3a:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 8017f3e:	78fa      	ldrb	r2, [r7, #3]
 8017f40:	4611      	mov	r1, r2
 8017f42:	4618      	mov	r0, r3
 8017f44:	f7ec fac6 	bl	80044d4 <HAL_PCD_EP_SetStall>
 8017f48:	4603      	mov	r3, r0
 8017f4a:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8017f4c:	7bfb      	ldrb	r3, [r7, #15]
 8017f4e:	4618      	mov	r0, r3
 8017f50:	f000 f8de 	bl	8018110 <USBD_Get_USB_Status>
 8017f54:	4603      	mov	r3, r0
 8017f56:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8017f58:	7bbb      	ldrb	r3, [r7, #14]
}
 8017f5a:	4618      	mov	r0, r3
 8017f5c:	3710      	adds	r7, #16
 8017f5e:	46bd      	mov	sp, r7
 8017f60:	bd80      	pop	{r7, pc}

08017f62 <USBD_LL_ClearStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_ClearStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8017f62:	b580      	push	{r7, lr}
 8017f64:	b084      	sub	sp, #16
 8017f66:	af00      	add	r7, sp, #0
 8017f68:	6078      	str	r0, [r7, #4]
 8017f6a:	460b      	mov	r3, r1
 8017f6c:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8017f6e:	2300      	movs	r3, #0
 8017f70:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8017f72:	2300      	movs	r3, #0
 8017f74:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_ClrStall(pdev->pData, ep_addr);
 8017f76:	687b      	ldr	r3, [r7, #4]
 8017f78:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 8017f7c:	78fa      	ldrb	r2, [r7, #3]
 8017f7e:	4611      	mov	r1, r2
 8017f80:	4618      	mov	r0, r3
 8017f82:	f7ec fb0a 	bl	800459a <HAL_PCD_EP_ClrStall>
 8017f86:	4603      	mov	r3, r0
 8017f88:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8017f8a:	7bfb      	ldrb	r3, [r7, #15]
 8017f8c:	4618      	mov	r0, r3
 8017f8e:	f000 f8bf 	bl	8018110 <USBD_Get_USB_Status>
 8017f92:	4603      	mov	r3, r0
 8017f94:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8017f96:	7bbb      	ldrb	r3, [r7, #14]
}
 8017f98:	4618      	mov	r0, r3
 8017f9a:	3710      	adds	r7, #16
 8017f9c:	46bd      	mov	sp, r7
 8017f9e:	bd80      	pop	{r7, pc}

08017fa0 <USBD_LL_IsStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Stall (1: Yes, 0: No)
  */
uint8_t USBD_LL_IsStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8017fa0:	b480      	push	{r7}
 8017fa2:	b085      	sub	sp, #20
 8017fa4:	af00      	add	r7, sp, #0
 8017fa6:	6078      	str	r0, [r7, #4]
 8017fa8:	460b      	mov	r3, r1
 8017faa:	70fb      	strb	r3, [r7, #3]
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef*) pdev->pData;
 8017fac:	687b      	ldr	r3, [r7, #4]
 8017fae:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 8017fb2:	60fb      	str	r3, [r7, #12]

  if((ep_addr & 0x80) == 0x80)
 8017fb4:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8017fb8:	2b00      	cmp	r3, #0
 8017fba:	da0b      	bge.n	8017fd4 <USBD_LL_IsStallEP+0x34>
  {
    return hpcd->IN_ep[ep_addr & 0x7F].is_stall;
 8017fbc:	78fb      	ldrb	r3, [r7, #3]
 8017fbe:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8017fc2:	68f9      	ldr	r1, [r7, #12]
 8017fc4:	4613      	mov	r3, r2
 8017fc6:	00db      	lsls	r3, r3, #3
 8017fc8:	4413      	add	r3, r2
 8017fca:	009b      	lsls	r3, r3, #2
 8017fcc:	440b      	add	r3, r1
 8017fce:	3316      	adds	r3, #22
 8017fd0:	781b      	ldrb	r3, [r3, #0]
 8017fd2:	e00b      	b.n	8017fec <USBD_LL_IsStallEP+0x4c>
  }
  else
  {
    return hpcd->OUT_ep[ep_addr & 0x7F].is_stall;
 8017fd4:	78fb      	ldrb	r3, [r7, #3]
 8017fd6:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8017fda:	68f9      	ldr	r1, [r7, #12]
 8017fdc:	4613      	mov	r3, r2
 8017fde:	00db      	lsls	r3, r3, #3
 8017fe0:	4413      	add	r3, r2
 8017fe2:	009b      	lsls	r3, r3, #2
 8017fe4:	440b      	add	r3, r1
 8017fe6:	f203 2356 	addw	r3, r3, #598	; 0x256
 8017fea:	781b      	ldrb	r3, [r3, #0]
  }
}
 8017fec:	4618      	mov	r0, r3
 8017fee:	3714      	adds	r7, #20
 8017ff0:	46bd      	mov	sp, r7
 8017ff2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8017ff6:	4770      	bx	lr

08017ff8 <USBD_LL_SetUSBAddress>:
  * @param  pdev: Device handle
  * @param  dev_addr: Device address
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_SetUSBAddress(USBD_HandleTypeDef *pdev, uint8_t dev_addr)
{
 8017ff8:	b580      	push	{r7, lr}
 8017ffa:	b084      	sub	sp, #16
 8017ffc:	af00      	add	r7, sp, #0
 8017ffe:	6078      	str	r0, [r7, #4]
 8018000:	460b      	mov	r3, r1
 8018002:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8018004:	2300      	movs	r3, #0
 8018006:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8018008:	2300      	movs	r3, #0
 801800a:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_SetAddress(pdev->pData, dev_addr);
 801800c:	687b      	ldr	r3, [r7, #4]
 801800e:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 8018012:	78fa      	ldrb	r2, [r7, #3]
 8018014:	4611      	mov	r1, r2
 8018016:	4618      	mov	r0, r3
 8018018:	f7ec f8f7 	bl	800420a <HAL_PCD_SetAddress>
 801801c:	4603      	mov	r3, r0
 801801e:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8018020:	7bfb      	ldrb	r3, [r7, #15]
 8018022:	4618      	mov	r0, r3
 8018024:	f000 f874 	bl	8018110 <USBD_Get_USB_Status>
 8018028:	4603      	mov	r3, r0
 801802a:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 801802c:	7bbb      	ldrb	r3, [r7, #14]
}
 801802e:	4618      	mov	r0, r3
 8018030:	3710      	adds	r7, #16
 8018032:	46bd      	mov	sp, r7
 8018034:	bd80      	pop	{r7, pc}

08018036 <USBD_LL_Transmit>:
  * @param  pbuf: Pointer to data to be sent
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Transmit(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 8018036:	b580      	push	{r7, lr}
 8018038:	b086      	sub	sp, #24
 801803a:	af00      	add	r7, sp, #0
 801803c:	60f8      	str	r0, [r7, #12]
 801803e:	607a      	str	r2, [r7, #4]
 8018040:	603b      	str	r3, [r7, #0]
 8018042:	460b      	mov	r3, r1
 8018044:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8018046:	2300      	movs	r3, #0
 8018048:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 801804a:	2300      	movs	r3, #0
 801804c:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Transmit(pdev->pData, ep_addr, pbuf, size);
 801804e:	68fb      	ldr	r3, [r7, #12]
 8018050:	f8d3 02c8 	ldr.w	r0, [r3, #712]	; 0x2c8
 8018054:	7af9      	ldrb	r1, [r7, #11]
 8018056:	683b      	ldr	r3, [r7, #0]
 8018058:	687a      	ldr	r2, [r7, #4]
 801805a:	f7ec fa01 	bl	8004460 <HAL_PCD_EP_Transmit>
 801805e:	4603      	mov	r3, r0
 8018060:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8018062:	7dfb      	ldrb	r3, [r7, #23]
 8018064:	4618      	mov	r0, r3
 8018066:	f000 f853 	bl	8018110 <USBD_Get_USB_Status>
 801806a:	4603      	mov	r3, r0
 801806c:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 801806e:	7dbb      	ldrb	r3, [r7, #22]
}
 8018070:	4618      	mov	r0, r3
 8018072:	3718      	adds	r7, #24
 8018074:	46bd      	mov	sp, r7
 8018076:	bd80      	pop	{r7, pc}

08018078 <USBD_LL_PrepareReceive>:
  * @param  pbuf: Pointer to data to be received
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_PrepareReceive(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 8018078:	b580      	push	{r7, lr}
 801807a:	b086      	sub	sp, #24
 801807c:	af00      	add	r7, sp, #0
 801807e:	60f8      	str	r0, [r7, #12]
 8018080:	607a      	str	r2, [r7, #4]
 8018082:	603b      	str	r3, [r7, #0]
 8018084:	460b      	mov	r3, r1
 8018086:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8018088:	2300      	movs	r3, #0
 801808a:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 801808c:	2300      	movs	r3, #0
 801808e:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Receive(pdev->pData, ep_addr, pbuf, size);
 8018090:	68fb      	ldr	r3, [r7, #12]
 8018092:	f8d3 02c8 	ldr.w	r0, [r3, #712]	; 0x2c8
 8018096:	7af9      	ldrb	r1, [r7, #11]
 8018098:	683b      	ldr	r3, [r7, #0]
 801809a:	687a      	ldr	r2, [r7, #4]
 801809c:	f7ec f98d 	bl	80043ba <HAL_PCD_EP_Receive>
 80180a0:	4603      	mov	r3, r0
 80180a2:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 80180a4:	7dfb      	ldrb	r3, [r7, #23]
 80180a6:	4618      	mov	r0, r3
 80180a8:	f000 f832 	bl	8018110 <USBD_Get_USB_Status>
 80180ac:	4603      	mov	r3, r0
 80180ae:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 80180b0:	7dbb      	ldrb	r3, [r7, #22]
}
 80180b2:	4618      	mov	r0, r3
 80180b4:	3718      	adds	r7, #24
 80180b6:	46bd      	mov	sp, r7
 80180b8:	bd80      	pop	{r7, pc}

080180ba <USBD_LL_GetRxDataSize>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Received Data Size
  */
uint32_t USBD_LL_GetRxDataSize(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 80180ba:	b580      	push	{r7, lr}
 80180bc:	b082      	sub	sp, #8
 80180be:	af00      	add	r7, sp, #0
 80180c0:	6078      	str	r0, [r7, #4]
 80180c2:	460b      	mov	r3, r1
 80180c4:	70fb      	strb	r3, [r7, #3]
  return HAL_PCD_EP_GetRxCount((PCD_HandleTypeDef*) pdev->pData, ep_addr);
 80180c6:	687b      	ldr	r3, [r7, #4]
 80180c8:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 80180cc:	78fa      	ldrb	r2, [r7, #3]
 80180ce:	4611      	mov	r1, r2
 80180d0:	4618      	mov	r0, r3
 80180d2:	f7ec f9ad 	bl	8004430 <HAL_PCD_EP_GetRxCount>
 80180d6:	4603      	mov	r3, r0
}
 80180d8:	4618      	mov	r0, r3
 80180da:	3708      	adds	r7, #8
 80180dc:	46bd      	mov	sp, r7
 80180de:	bd80      	pop	{r7, pc}

080180e0 <USBD_static_malloc>:
  * @brief  Static single allocation.
  * @param  size: Size of allocated memory
  * @retval None
  */
void *USBD_static_malloc(uint32_t size)
{
 80180e0:	b480      	push	{r7}
 80180e2:	b083      	sub	sp, #12
 80180e4:	af00      	add	r7, sp, #0
 80180e6:	6078      	str	r0, [r7, #4]
  static uint32_t mem[(sizeof(USBD_CDC_HandleTypeDef)/4)+1];/* On 32-bit boundary */
  return mem;
 80180e8:	4b03      	ldr	r3, [pc, #12]	; (80180f8 <USBD_static_malloc+0x18>)
}
 80180ea:	4618      	mov	r0, r3
 80180ec:	370c      	adds	r7, #12
 80180ee:	46bd      	mov	sp, r7
 80180f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80180f4:	4770      	bx	lr
 80180f6:	bf00      	nop
 80180f8:	2000a478 	.word	0x2000a478

080180fc <USBD_static_free>:
  * @brief  Dummy memory free
  * @param  p: Pointer to allocated  memory address
  * @retval None
  */
void USBD_static_free(void *p)
{
 80180fc:	b480      	push	{r7}
 80180fe:	b083      	sub	sp, #12
 8018100:	af00      	add	r7, sp, #0
 8018102:	6078      	str	r0, [r7, #4]

}
 8018104:	bf00      	nop
 8018106:	370c      	adds	r7, #12
 8018108:	46bd      	mov	sp, r7
 801810a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801810e:	4770      	bx	lr

08018110 <USBD_Get_USB_Status>:
  * @brief  Returns the USB status depending on the HAL status:
  * @param  hal_status: HAL status
  * @retval USB status
  */
USBD_StatusTypeDef USBD_Get_USB_Status(HAL_StatusTypeDef hal_status)
{
 8018110:	b480      	push	{r7}
 8018112:	b085      	sub	sp, #20
 8018114:	af00      	add	r7, sp, #0
 8018116:	4603      	mov	r3, r0
 8018118:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef usb_status = USBD_OK;
 801811a:	2300      	movs	r3, #0
 801811c:	73fb      	strb	r3, [r7, #15]

  switch (hal_status)
 801811e:	79fb      	ldrb	r3, [r7, #7]
 8018120:	2b03      	cmp	r3, #3
 8018122:	d817      	bhi.n	8018154 <USBD_Get_USB_Status+0x44>
 8018124:	a201      	add	r2, pc, #4	; (adr r2, 801812c <USBD_Get_USB_Status+0x1c>)
 8018126:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 801812a:	bf00      	nop
 801812c:	0801813d 	.word	0x0801813d
 8018130:	08018143 	.word	0x08018143
 8018134:	08018149 	.word	0x08018149
 8018138:	0801814f 	.word	0x0801814f
  {
    case HAL_OK :
      usb_status = USBD_OK;
 801813c:	2300      	movs	r3, #0
 801813e:	73fb      	strb	r3, [r7, #15]
    break;
 8018140:	e00b      	b.n	801815a <USBD_Get_USB_Status+0x4a>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 8018142:	2303      	movs	r3, #3
 8018144:	73fb      	strb	r3, [r7, #15]
    break;
 8018146:	e008      	b.n	801815a <USBD_Get_USB_Status+0x4a>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 8018148:	2301      	movs	r3, #1
 801814a:	73fb      	strb	r3, [r7, #15]
    break;
 801814c:	e005      	b.n	801815a <USBD_Get_USB_Status+0x4a>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 801814e:	2303      	movs	r3, #3
 8018150:	73fb      	strb	r3, [r7, #15]
    break;
 8018152:	e002      	b.n	801815a <USBD_Get_USB_Status+0x4a>
    default :
      usb_status = USBD_FAIL;
 8018154:	2303      	movs	r3, #3
 8018156:	73fb      	strb	r3, [r7, #15]
    break;
 8018158:	bf00      	nop
  }
  return usb_status;
 801815a:	7bfb      	ldrb	r3, [r7, #15]
}
 801815c:	4618      	mov	r0, r3
 801815e:	3714      	adds	r7, #20
 8018160:	46bd      	mov	sp, r7
 8018162:	f85d 7b04 	ldr.w	r7, [sp], #4
 8018166:	4770      	bx	lr

08018168 <atoi>:
 8018168:	220a      	movs	r2, #10
 801816a:	2100      	movs	r1, #0
 801816c:	f000 b8c0 	b.w	80182f0 <strtol>

08018170 <rand>:
 8018170:	4b16      	ldr	r3, [pc, #88]	; (80181cc <rand+0x5c>)
 8018172:	b510      	push	{r4, lr}
 8018174:	681c      	ldr	r4, [r3, #0]
 8018176:	6b23      	ldr	r3, [r4, #48]	; 0x30
 8018178:	b9b3      	cbnz	r3, 80181a8 <rand+0x38>
 801817a:	2018      	movs	r0, #24
 801817c:	f000 faf0 	bl	8018760 <malloc>
 8018180:	4602      	mov	r2, r0
 8018182:	6320      	str	r0, [r4, #48]	; 0x30
 8018184:	b920      	cbnz	r0, 8018190 <rand+0x20>
 8018186:	4b12      	ldr	r3, [pc, #72]	; (80181d0 <rand+0x60>)
 8018188:	4812      	ldr	r0, [pc, #72]	; (80181d4 <rand+0x64>)
 801818a:	2152      	movs	r1, #82	; 0x52
 801818c:	f000 fa7e 	bl	801868c <__assert_func>
 8018190:	4911      	ldr	r1, [pc, #68]	; (80181d8 <rand+0x68>)
 8018192:	4b12      	ldr	r3, [pc, #72]	; (80181dc <rand+0x6c>)
 8018194:	e9c0 1300 	strd	r1, r3, [r0]
 8018198:	4b11      	ldr	r3, [pc, #68]	; (80181e0 <rand+0x70>)
 801819a:	6083      	str	r3, [r0, #8]
 801819c:	230b      	movs	r3, #11
 801819e:	8183      	strh	r3, [r0, #12]
 80181a0:	2100      	movs	r1, #0
 80181a2:	2001      	movs	r0, #1
 80181a4:	e9c2 0104 	strd	r0, r1, [r2, #16]
 80181a8:	6b21      	ldr	r1, [r4, #48]	; 0x30
 80181aa:	480e      	ldr	r0, [pc, #56]	; (80181e4 <rand+0x74>)
 80181ac:	690b      	ldr	r3, [r1, #16]
 80181ae:	694c      	ldr	r4, [r1, #20]
 80181b0:	4a0d      	ldr	r2, [pc, #52]	; (80181e8 <rand+0x78>)
 80181b2:	4358      	muls	r0, r3
 80181b4:	fb02 0004 	mla	r0, r2, r4, r0
 80181b8:	fba3 3202 	umull	r3, r2, r3, r2
 80181bc:	3301      	adds	r3, #1
 80181be:	eb40 0002 	adc.w	r0, r0, r2
 80181c2:	e9c1 3004 	strd	r3, r0, [r1, #16]
 80181c6:	f020 4000 	bic.w	r0, r0, #2147483648	; 0x80000000
 80181ca:	bd10      	pop	{r4, pc}
 80181cc:	20000174 	.word	0x20000174
 80181d0:	0801c2da 	.word	0x0801c2da
 80181d4:	0801c2f1 	.word	0x0801c2f1
 80181d8:	abcd330e 	.word	0xabcd330e
 80181dc:	e66d1234 	.word	0xe66d1234
 80181e0:	0005deec 	.word	0x0005deec
 80181e4:	5851f42d 	.word	0x5851f42d
 80181e8:	4c957f2d 	.word	0x4c957f2d

080181ec <_strtol_l.constprop.0>:
 80181ec:	2b01      	cmp	r3, #1
 80181ee:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80181f2:	d001      	beq.n	80181f8 <_strtol_l.constprop.0+0xc>
 80181f4:	2b24      	cmp	r3, #36	; 0x24
 80181f6:	d906      	bls.n	8018206 <_strtol_l.constprop.0+0x1a>
 80181f8:	f000 fa0c 	bl	8018614 <__errno>
 80181fc:	2316      	movs	r3, #22
 80181fe:	6003      	str	r3, [r0, #0]
 8018200:	2000      	movs	r0, #0
 8018202:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8018206:	f8df c0e4 	ldr.w	ip, [pc, #228]	; 80182ec <_strtol_l.constprop.0+0x100>
 801820a:	460d      	mov	r5, r1
 801820c:	462e      	mov	r6, r5
 801820e:	f815 4b01 	ldrb.w	r4, [r5], #1
 8018212:	f81c 7004 	ldrb.w	r7, [ip, r4]
 8018216:	f017 0708 	ands.w	r7, r7, #8
 801821a:	d1f7      	bne.n	801820c <_strtol_l.constprop.0+0x20>
 801821c:	2c2d      	cmp	r4, #45	; 0x2d
 801821e:	d132      	bne.n	8018286 <_strtol_l.constprop.0+0x9a>
 8018220:	782c      	ldrb	r4, [r5, #0]
 8018222:	2701      	movs	r7, #1
 8018224:	1cb5      	adds	r5, r6, #2
 8018226:	2b00      	cmp	r3, #0
 8018228:	d05b      	beq.n	80182e2 <_strtol_l.constprop.0+0xf6>
 801822a:	2b10      	cmp	r3, #16
 801822c:	d109      	bne.n	8018242 <_strtol_l.constprop.0+0x56>
 801822e:	2c30      	cmp	r4, #48	; 0x30
 8018230:	d107      	bne.n	8018242 <_strtol_l.constprop.0+0x56>
 8018232:	782c      	ldrb	r4, [r5, #0]
 8018234:	f004 04df 	and.w	r4, r4, #223	; 0xdf
 8018238:	2c58      	cmp	r4, #88	; 0x58
 801823a:	d14d      	bne.n	80182d8 <_strtol_l.constprop.0+0xec>
 801823c:	786c      	ldrb	r4, [r5, #1]
 801823e:	2310      	movs	r3, #16
 8018240:	3502      	adds	r5, #2
 8018242:	f107 4800 	add.w	r8, r7, #2147483648	; 0x80000000
 8018246:	f108 38ff 	add.w	r8, r8, #4294967295
 801824a:	f04f 0e00 	mov.w	lr, #0
 801824e:	fbb8 f9f3 	udiv	r9, r8, r3
 8018252:	4676      	mov	r6, lr
 8018254:	fb03 8a19 	mls	sl, r3, r9, r8
 8018258:	f1a4 0c30 	sub.w	ip, r4, #48	; 0x30
 801825c:	f1bc 0f09 	cmp.w	ip, #9
 8018260:	d816      	bhi.n	8018290 <_strtol_l.constprop.0+0xa4>
 8018262:	4664      	mov	r4, ip
 8018264:	42a3      	cmp	r3, r4
 8018266:	dd24      	ble.n	80182b2 <_strtol_l.constprop.0+0xc6>
 8018268:	f1be 3fff 	cmp.w	lr, #4294967295
 801826c:	d008      	beq.n	8018280 <_strtol_l.constprop.0+0x94>
 801826e:	45b1      	cmp	r9, r6
 8018270:	d31c      	bcc.n	80182ac <_strtol_l.constprop.0+0xc0>
 8018272:	d101      	bne.n	8018278 <_strtol_l.constprop.0+0x8c>
 8018274:	45a2      	cmp	sl, r4
 8018276:	db19      	blt.n	80182ac <_strtol_l.constprop.0+0xc0>
 8018278:	fb06 4603 	mla	r6, r6, r3, r4
 801827c:	f04f 0e01 	mov.w	lr, #1
 8018280:	f815 4b01 	ldrb.w	r4, [r5], #1
 8018284:	e7e8      	b.n	8018258 <_strtol_l.constprop.0+0x6c>
 8018286:	2c2b      	cmp	r4, #43	; 0x2b
 8018288:	bf04      	itt	eq
 801828a:	782c      	ldrbeq	r4, [r5, #0]
 801828c:	1cb5      	addeq	r5, r6, #2
 801828e:	e7ca      	b.n	8018226 <_strtol_l.constprop.0+0x3a>
 8018290:	f1a4 0c41 	sub.w	ip, r4, #65	; 0x41
 8018294:	f1bc 0f19 	cmp.w	ip, #25
 8018298:	d801      	bhi.n	801829e <_strtol_l.constprop.0+0xb2>
 801829a:	3c37      	subs	r4, #55	; 0x37
 801829c:	e7e2      	b.n	8018264 <_strtol_l.constprop.0+0x78>
 801829e:	f1a4 0c61 	sub.w	ip, r4, #97	; 0x61
 80182a2:	f1bc 0f19 	cmp.w	ip, #25
 80182a6:	d804      	bhi.n	80182b2 <_strtol_l.constprop.0+0xc6>
 80182a8:	3c57      	subs	r4, #87	; 0x57
 80182aa:	e7db      	b.n	8018264 <_strtol_l.constprop.0+0x78>
 80182ac:	f04f 3eff 	mov.w	lr, #4294967295
 80182b0:	e7e6      	b.n	8018280 <_strtol_l.constprop.0+0x94>
 80182b2:	f1be 3fff 	cmp.w	lr, #4294967295
 80182b6:	d105      	bne.n	80182c4 <_strtol_l.constprop.0+0xd8>
 80182b8:	2322      	movs	r3, #34	; 0x22
 80182ba:	6003      	str	r3, [r0, #0]
 80182bc:	4646      	mov	r6, r8
 80182be:	b942      	cbnz	r2, 80182d2 <_strtol_l.constprop.0+0xe6>
 80182c0:	4630      	mov	r0, r6
 80182c2:	e79e      	b.n	8018202 <_strtol_l.constprop.0+0x16>
 80182c4:	b107      	cbz	r7, 80182c8 <_strtol_l.constprop.0+0xdc>
 80182c6:	4276      	negs	r6, r6
 80182c8:	2a00      	cmp	r2, #0
 80182ca:	d0f9      	beq.n	80182c0 <_strtol_l.constprop.0+0xd4>
 80182cc:	f1be 0f00 	cmp.w	lr, #0
 80182d0:	d000      	beq.n	80182d4 <_strtol_l.constprop.0+0xe8>
 80182d2:	1e69      	subs	r1, r5, #1
 80182d4:	6011      	str	r1, [r2, #0]
 80182d6:	e7f3      	b.n	80182c0 <_strtol_l.constprop.0+0xd4>
 80182d8:	2430      	movs	r4, #48	; 0x30
 80182da:	2b00      	cmp	r3, #0
 80182dc:	d1b1      	bne.n	8018242 <_strtol_l.constprop.0+0x56>
 80182de:	2308      	movs	r3, #8
 80182e0:	e7af      	b.n	8018242 <_strtol_l.constprop.0+0x56>
 80182e2:	2c30      	cmp	r4, #48	; 0x30
 80182e4:	d0a5      	beq.n	8018232 <_strtol_l.constprop.0+0x46>
 80182e6:	230a      	movs	r3, #10
 80182e8:	e7ab      	b.n	8018242 <_strtol_l.constprop.0+0x56>
 80182ea:	bf00      	nop
 80182ec:	0801c34a 	.word	0x0801c34a

080182f0 <strtol>:
 80182f0:	4613      	mov	r3, r2
 80182f2:	460a      	mov	r2, r1
 80182f4:	4601      	mov	r1, r0
 80182f6:	4802      	ldr	r0, [pc, #8]	; (8018300 <strtol+0x10>)
 80182f8:	6800      	ldr	r0, [r0, #0]
 80182fa:	f7ff bf77 	b.w	80181ec <_strtol_l.constprop.0>
 80182fe:	bf00      	nop
 8018300:	20000174 	.word	0x20000174

08018304 <std>:
 8018304:	2300      	movs	r3, #0
 8018306:	b510      	push	{r4, lr}
 8018308:	4604      	mov	r4, r0
 801830a:	e9c0 3300 	strd	r3, r3, [r0]
 801830e:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8018312:	6083      	str	r3, [r0, #8]
 8018314:	8181      	strh	r1, [r0, #12]
 8018316:	6643      	str	r3, [r0, #100]	; 0x64
 8018318:	81c2      	strh	r2, [r0, #14]
 801831a:	6183      	str	r3, [r0, #24]
 801831c:	4619      	mov	r1, r3
 801831e:	2208      	movs	r2, #8
 8018320:	305c      	adds	r0, #92	; 0x5c
 8018322:	f000 f916 	bl	8018552 <memset>
 8018326:	4b0d      	ldr	r3, [pc, #52]	; (801835c <std+0x58>)
 8018328:	6263      	str	r3, [r4, #36]	; 0x24
 801832a:	4b0d      	ldr	r3, [pc, #52]	; (8018360 <std+0x5c>)
 801832c:	62a3      	str	r3, [r4, #40]	; 0x28
 801832e:	4b0d      	ldr	r3, [pc, #52]	; (8018364 <std+0x60>)
 8018330:	62e3      	str	r3, [r4, #44]	; 0x2c
 8018332:	4b0d      	ldr	r3, [pc, #52]	; (8018368 <std+0x64>)
 8018334:	6323      	str	r3, [r4, #48]	; 0x30
 8018336:	4b0d      	ldr	r3, [pc, #52]	; (801836c <std+0x68>)
 8018338:	6224      	str	r4, [r4, #32]
 801833a:	429c      	cmp	r4, r3
 801833c:	d006      	beq.n	801834c <std+0x48>
 801833e:	f103 0268 	add.w	r2, r3, #104	; 0x68
 8018342:	4294      	cmp	r4, r2
 8018344:	d002      	beq.n	801834c <std+0x48>
 8018346:	33d0      	adds	r3, #208	; 0xd0
 8018348:	429c      	cmp	r4, r3
 801834a:	d105      	bne.n	8018358 <std+0x54>
 801834c:	f104 0058 	add.w	r0, r4, #88	; 0x58
 8018350:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8018354:	f000 b988 	b.w	8018668 <__retarget_lock_init_recursive>
 8018358:	bd10      	pop	{r4, pc}
 801835a:	bf00      	nop
 801835c:	080184ad 	.word	0x080184ad
 8018360:	080184cf 	.word	0x080184cf
 8018364:	08018507 	.word	0x08018507
 8018368:	0801852b 	.word	0x0801852b
 801836c:	2000a698 	.word	0x2000a698

08018370 <stdio_exit_handler>:
 8018370:	4a02      	ldr	r2, [pc, #8]	; (801837c <stdio_exit_handler+0xc>)
 8018372:	4903      	ldr	r1, [pc, #12]	; (8018380 <stdio_exit_handler+0x10>)
 8018374:	4803      	ldr	r0, [pc, #12]	; (8018384 <stdio_exit_handler+0x14>)
 8018376:	f000 b869 	b.w	801844c <_fwalk_sglue>
 801837a:	bf00      	nop
 801837c:	2000011c 	.word	0x2000011c
 8018380:	08018f7d 	.word	0x08018f7d
 8018384:	20000128 	.word	0x20000128

08018388 <cleanup_stdio>:
 8018388:	6841      	ldr	r1, [r0, #4]
 801838a:	4b0c      	ldr	r3, [pc, #48]	; (80183bc <cleanup_stdio+0x34>)
 801838c:	4299      	cmp	r1, r3
 801838e:	b510      	push	{r4, lr}
 8018390:	4604      	mov	r4, r0
 8018392:	d001      	beq.n	8018398 <cleanup_stdio+0x10>
 8018394:	f000 fdf2 	bl	8018f7c <_fflush_r>
 8018398:	68a1      	ldr	r1, [r4, #8]
 801839a:	4b09      	ldr	r3, [pc, #36]	; (80183c0 <cleanup_stdio+0x38>)
 801839c:	4299      	cmp	r1, r3
 801839e:	d002      	beq.n	80183a6 <cleanup_stdio+0x1e>
 80183a0:	4620      	mov	r0, r4
 80183a2:	f000 fdeb 	bl	8018f7c <_fflush_r>
 80183a6:	68e1      	ldr	r1, [r4, #12]
 80183a8:	4b06      	ldr	r3, [pc, #24]	; (80183c4 <cleanup_stdio+0x3c>)
 80183aa:	4299      	cmp	r1, r3
 80183ac:	d004      	beq.n	80183b8 <cleanup_stdio+0x30>
 80183ae:	4620      	mov	r0, r4
 80183b0:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80183b4:	f000 bde2 	b.w	8018f7c <_fflush_r>
 80183b8:	bd10      	pop	{r4, pc}
 80183ba:	bf00      	nop
 80183bc:	2000a698 	.word	0x2000a698
 80183c0:	2000a700 	.word	0x2000a700
 80183c4:	2000a768 	.word	0x2000a768

080183c8 <global_stdio_init.part.0>:
 80183c8:	b510      	push	{r4, lr}
 80183ca:	4b0b      	ldr	r3, [pc, #44]	; (80183f8 <global_stdio_init.part.0+0x30>)
 80183cc:	4c0b      	ldr	r4, [pc, #44]	; (80183fc <global_stdio_init.part.0+0x34>)
 80183ce:	4a0c      	ldr	r2, [pc, #48]	; (8018400 <global_stdio_init.part.0+0x38>)
 80183d0:	601a      	str	r2, [r3, #0]
 80183d2:	4620      	mov	r0, r4
 80183d4:	2200      	movs	r2, #0
 80183d6:	2104      	movs	r1, #4
 80183d8:	f7ff ff94 	bl	8018304 <std>
 80183dc:	f104 0068 	add.w	r0, r4, #104	; 0x68
 80183e0:	2201      	movs	r2, #1
 80183e2:	2109      	movs	r1, #9
 80183e4:	f7ff ff8e 	bl	8018304 <std>
 80183e8:	f104 00d0 	add.w	r0, r4, #208	; 0xd0
 80183ec:	2202      	movs	r2, #2
 80183ee:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80183f2:	2112      	movs	r1, #18
 80183f4:	f7ff bf86 	b.w	8018304 <std>
 80183f8:	2000a7d0 	.word	0x2000a7d0
 80183fc:	2000a698 	.word	0x2000a698
 8018400:	08018371 	.word	0x08018371

08018404 <__sfp_lock_acquire>:
 8018404:	4801      	ldr	r0, [pc, #4]	; (801840c <__sfp_lock_acquire+0x8>)
 8018406:	f000 b930 	b.w	801866a <__retarget_lock_acquire_recursive>
 801840a:	bf00      	nop
 801840c:	2000a7d9 	.word	0x2000a7d9

08018410 <__sfp_lock_release>:
 8018410:	4801      	ldr	r0, [pc, #4]	; (8018418 <__sfp_lock_release+0x8>)
 8018412:	f000 b92b 	b.w	801866c <__retarget_lock_release_recursive>
 8018416:	bf00      	nop
 8018418:	2000a7d9 	.word	0x2000a7d9

0801841c <__sinit>:
 801841c:	b510      	push	{r4, lr}
 801841e:	4604      	mov	r4, r0
 8018420:	f7ff fff0 	bl	8018404 <__sfp_lock_acquire>
 8018424:	6a23      	ldr	r3, [r4, #32]
 8018426:	b11b      	cbz	r3, 8018430 <__sinit+0x14>
 8018428:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 801842c:	f7ff bff0 	b.w	8018410 <__sfp_lock_release>
 8018430:	4b04      	ldr	r3, [pc, #16]	; (8018444 <__sinit+0x28>)
 8018432:	6223      	str	r3, [r4, #32]
 8018434:	4b04      	ldr	r3, [pc, #16]	; (8018448 <__sinit+0x2c>)
 8018436:	681b      	ldr	r3, [r3, #0]
 8018438:	2b00      	cmp	r3, #0
 801843a:	d1f5      	bne.n	8018428 <__sinit+0xc>
 801843c:	f7ff ffc4 	bl	80183c8 <global_stdio_init.part.0>
 8018440:	e7f2      	b.n	8018428 <__sinit+0xc>
 8018442:	bf00      	nop
 8018444:	08018389 	.word	0x08018389
 8018448:	2000a7d0 	.word	0x2000a7d0

0801844c <_fwalk_sglue>:
 801844c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8018450:	4607      	mov	r7, r0
 8018452:	4688      	mov	r8, r1
 8018454:	4614      	mov	r4, r2
 8018456:	2600      	movs	r6, #0
 8018458:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 801845c:	f1b9 0901 	subs.w	r9, r9, #1
 8018460:	d505      	bpl.n	801846e <_fwalk_sglue+0x22>
 8018462:	6824      	ldr	r4, [r4, #0]
 8018464:	2c00      	cmp	r4, #0
 8018466:	d1f7      	bne.n	8018458 <_fwalk_sglue+0xc>
 8018468:	4630      	mov	r0, r6
 801846a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 801846e:	89ab      	ldrh	r3, [r5, #12]
 8018470:	2b01      	cmp	r3, #1
 8018472:	d907      	bls.n	8018484 <_fwalk_sglue+0x38>
 8018474:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8018478:	3301      	adds	r3, #1
 801847a:	d003      	beq.n	8018484 <_fwalk_sglue+0x38>
 801847c:	4629      	mov	r1, r5
 801847e:	4638      	mov	r0, r7
 8018480:	47c0      	blx	r8
 8018482:	4306      	orrs	r6, r0
 8018484:	3568      	adds	r5, #104	; 0x68
 8018486:	e7e9      	b.n	801845c <_fwalk_sglue+0x10>

08018488 <iprintf>:
 8018488:	b40f      	push	{r0, r1, r2, r3}
 801848a:	b507      	push	{r0, r1, r2, lr}
 801848c:	4906      	ldr	r1, [pc, #24]	; (80184a8 <iprintf+0x20>)
 801848e:	ab04      	add	r3, sp, #16
 8018490:	6808      	ldr	r0, [r1, #0]
 8018492:	f853 2b04 	ldr.w	r2, [r3], #4
 8018496:	6881      	ldr	r1, [r0, #8]
 8018498:	9301      	str	r3, [sp, #4]
 801849a:	f000 fa3f 	bl	801891c <_vfiprintf_r>
 801849e:	b003      	add	sp, #12
 80184a0:	f85d eb04 	ldr.w	lr, [sp], #4
 80184a4:	b004      	add	sp, #16
 80184a6:	4770      	bx	lr
 80184a8:	20000174 	.word	0x20000174

080184ac <__sread>:
 80184ac:	b510      	push	{r4, lr}
 80184ae:	460c      	mov	r4, r1
 80184b0:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80184b4:	f000 f88a 	bl	80185cc <_read_r>
 80184b8:	2800      	cmp	r0, #0
 80184ba:	bfab      	itete	ge
 80184bc:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 80184be:	89a3      	ldrhlt	r3, [r4, #12]
 80184c0:	181b      	addge	r3, r3, r0
 80184c2:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 80184c6:	bfac      	ite	ge
 80184c8:	6563      	strge	r3, [r4, #84]	; 0x54
 80184ca:	81a3      	strhlt	r3, [r4, #12]
 80184cc:	bd10      	pop	{r4, pc}

080184ce <__swrite>:
 80184ce:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80184d2:	461f      	mov	r7, r3
 80184d4:	898b      	ldrh	r3, [r1, #12]
 80184d6:	05db      	lsls	r3, r3, #23
 80184d8:	4605      	mov	r5, r0
 80184da:	460c      	mov	r4, r1
 80184dc:	4616      	mov	r6, r2
 80184de:	d505      	bpl.n	80184ec <__swrite+0x1e>
 80184e0:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80184e4:	2302      	movs	r3, #2
 80184e6:	2200      	movs	r2, #0
 80184e8:	f000 f85e 	bl	80185a8 <_lseek_r>
 80184ec:	89a3      	ldrh	r3, [r4, #12]
 80184ee:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 80184f2:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 80184f6:	81a3      	strh	r3, [r4, #12]
 80184f8:	4632      	mov	r2, r6
 80184fa:	463b      	mov	r3, r7
 80184fc:	4628      	mov	r0, r5
 80184fe:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8018502:	f000 b875 	b.w	80185f0 <_write_r>

08018506 <__sseek>:
 8018506:	b510      	push	{r4, lr}
 8018508:	460c      	mov	r4, r1
 801850a:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 801850e:	f000 f84b 	bl	80185a8 <_lseek_r>
 8018512:	1c43      	adds	r3, r0, #1
 8018514:	89a3      	ldrh	r3, [r4, #12]
 8018516:	bf15      	itete	ne
 8018518:	6560      	strne	r0, [r4, #84]	; 0x54
 801851a:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 801851e:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 8018522:	81a3      	strheq	r3, [r4, #12]
 8018524:	bf18      	it	ne
 8018526:	81a3      	strhne	r3, [r4, #12]
 8018528:	bd10      	pop	{r4, pc}

0801852a <__sclose>:
 801852a:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 801852e:	f000 b82b 	b.w	8018588 <_close_r>

08018532 <memcmp>:
 8018532:	b510      	push	{r4, lr}
 8018534:	3901      	subs	r1, #1
 8018536:	4402      	add	r2, r0
 8018538:	4290      	cmp	r0, r2
 801853a:	d101      	bne.n	8018540 <memcmp+0xe>
 801853c:	2000      	movs	r0, #0
 801853e:	e005      	b.n	801854c <memcmp+0x1a>
 8018540:	7803      	ldrb	r3, [r0, #0]
 8018542:	f811 4f01 	ldrb.w	r4, [r1, #1]!
 8018546:	42a3      	cmp	r3, r4
 8018548:	d001      	beq.n	801854e <memcmp+0x1c>
 801854a:	1b18      	subs	r0, r3, r4
 801854c:	bd10      	pop	{r4, pc}
 801854e:	3001      	adds	r0, #1
 8018550:	e7f2      	b.n	8018538 <memcmp+0x6>

08018552 <memset>:
 8018552:	4402      	add	r2, r0
 8018554:	4603      	mov	r3, r0
 8018556:	4293      	cmp	r3, r2
 8018558:	d100      	bne.n	801855c <memset+0xa>
 801855a:	4770      	bx	lr
 801855c:	f803 1b01 	strb.w	r1, [r3], #1
 8018560:	e7f9      	b.n	8018556 <memset+0x4>

08018562 <strncpy>:
 8018562:	b510      	push	{r4, lr}
 8018564:	3901      	subs	r1, #1
 8018566:	4603      	mov	r3, r0
 8018568:	b132      	cbz	r2, 8018578 <strncpy+0x16>
 801856a:	f811 4f01 	ldrb.w	r4, [r1, #1]!
 801856e:	f803 4b01 	strb.w	r4, [r3], #1
 8018572:	3a01      	subs	r2, #1
 8018574:	2c00      	cmp	r4, #0
 8018576:	d1f7      	bne.n	8018568 <strncpy+0x6>
 8018578:	441a      	add	r2, r3
 801857a:	2100      	movs	r1, #0
 801857c:	4293      	cmp	r3, r2
 801857e:	d100      	bne.n	8018582 <strncpy+0x20>
 8018580:	bd10      	pop	{r4, pc}
 8018582:	f803 1b01 	strb.w	r1, [r3], #1
 8018586:	e7f9      	b.n	801857c <strncpy+0x1a>

08018588 <_close_r>:
 8018588:	b538      	push	{r3, r4, r5, lr}
 801858a:	4d06      	ldr	r5, [pc, #24]	; (80185a4 <_close_r+0x1c>)
 801858c:	2300      	movs	r3, #0
 801858e:	4604      	mov	r4, r0
 8018590:	4608      	mov	r0, r1
 8018592:	602b      	str	r3, [r5, #0]
 8018594:	f7e8 fab1 	bl	8000afa <_close>
 8018598:	1c43      	adds	r3, r0, #1
 801859a:	d102      	bne.n	80185a2 <_close_r+0x1a>
 801859c:	682b      	ldr	r3, [r5, #0]
 801859e:	b103      	cbz	r3, 80185a2 <_close_r+0x1a>
 80185a0:	6023      	str	r3, [r4, #0]
 80185a2:	bd38      	pop	{r3, r4, r5, pc}
 80185a4:	2000a7d4 	.word	0x2000a7d4

080185a8 <_lseek_r>:
 80185a8:	b538      	push	{r3, r4, r5, lr}
 80185aa:	4d07      	ldr	r5, [pc, #28]	; (80185c8 <_lseek_r+0x20>)
 80185ac:	4604      	mov	r4, r0
 80185ae:	4608      	mov	r0, r1
 80185b0:	4611      	mov	r1, r2
 80185b2:	2200      	movs	r2, #0
 80185b4:	602a      	str	r2, [r5, #0]
 80185b6:	461a      	mov	r2, r3
 80185b8:	f7e8 fac6 	bl	8000b48 <_lseek>
 80185bc:	1c43      	adds	r3, r0, #1
 80185be:	d102      	bne.n	80185c6 <_lseek_r+0x1e>
 80185c0:	682b      	ldr	r3, [r5, #0]
 80185c2:	b103      	cbz	r3, 80185c6 <_lseek_r+0x1e>
 80185c4:	6023      	str	r3, [r4, #0]
 80185c6:	bd38      	pop	{r3, r4, r5, pc}
 80185c8:	2000a7d4 	.word	0x2000a7d4

080185cc <_read_r>:
 80185cc:	b538      	push	{r3, r4, r5, lr}
 80185ce:	4d07      	ldr	r5, [pc, #28]	; (80185ec <_read_r+0x20>)
 80185d0:	4604      	mov	r4, r0
 80185d2:	4608      	mov	r0, r1
 80185d4:	4611      	mov	r1, r2
 80185d6:	2200      	movs	r2, #0
 80185d8:	602a      	str	r2, [r5, #0]
 80185da:	461a      	mov	r2, r3
 80185dc:	f7e8 fa54 	bl	8000a88 <_read>
 80185e0:	1c43      	adds	r3, r0, #1
 80185e2:	d102      	bne.n	80185ea <_read_r+0x1e>
 80185e4:	682b      	ldr	r3, [r5, #0]
 80185e6:	b103      	cbz	r3, 80185ea <_read_r+0x1e>
 80185e8:	6023      	str	r3, [r4, #0]
 80185ea:	bd38      	pop	{r3, r4, r5, pc}
 80185ec:	2000a7d4 	.word	0x2000a7d4

080185f0 <_write_r>:
 80185f0:	b538      	push	{r3, r4, r5, lr}
 80185f2:	4d07      	ldr	r5, [pc, #28]	; (8018610 <_write_r+0x20>)
 80185f4:	4604      	mov	r4, r0
 80185f6:	4608      	mov	r0, r1
 80185f8:	4611      	mov	r1, r2
 80185fa:	2200      	movs	r2, #0
 80185fc:	602a      	str	r2, [r5, #0]
 80185fe:	461a      	mov	r2, r3
 8018600:	f7e8 fa5f 	bl	8000ac2 <_write>
 8018604:	1c43      	adds	r3, r0, #1
 8018606:	d102      	bne.n	801860e <_write_r+0x1e>
 8018608:	682b      	ldr	r3, [r5, #0]
 801860a:	b103      	cbz	r3, 801860e <_write_r+0x1e>
 801860c:	6023      	str	r3, [r4, #0]
 801860e:	bd38      	pop	{r3, r4, r5, pc}
 8018610:	2000a7d4 	.word	0x2000a7d4

08018614 <__errno>:
 8018614:	4b01      	ldr	r3, [pc, #4]	; (801861c <__errno+0x8>)
 8018616:	6818      	ldr	r0, [r3, #0]
 8018618:	4770      	bx	lr
 801861a:	bf00      	nop
 801861c:	20000174 	.word	0x20000174

08018620 <__libc_init_array>:
 8018620:	b570      	push	{r4, r5, r6, lr}
 8018622:	4d0d      	ldr	r5, [pc, #52]	; (8018658 <__libc_init_array+0x38>)
 8018624:	4c0d      	ldr	r4, [pc, #52]	; (801865c <__libc_init_array+0x3c>)
 8018626:	1b64      	subs	r4, r4, r5
 8018628:	10a4      	asrs	r4, r4, #2
 801862a:	2600      	movs	r6, #0
 801862c:	42a6      	cmp	r6, r4
 801862e:	d109      	bne.n	8018644 <__libc_init_array+0x24>
 8018630:	4d0b      	ldr	r5, [pc, #44]	; (8018660 <__libc_init_array+0x40>)
 8018632:	4c0c      	ldr	r4, [pc, #48]	; (8018664 <__libc_init_array+0x44>)
 8018634:	f000 fe52 	bl	80192dc <_init>
 8018638:	1b64      	subs	r4, r4, r5
 801863a:	10a4      	asrs	r4, r4, #2
 801863c:	2600      	movs	r6, #0
 801863e:	42a6      	cmp	r6, r4
 8018640:	d105      	bne.n	801864e <__libc_init_array+0x2e>
 8018642:	bd70      	pop	{r4, r5, r6, pc}
 8018644:	f855 3b04 	ldr.w	r3, [r5], #4
 8018648:	4798      	blx	r3
 801864a:	3601      	adds	r6, #1
 801864c:	e7ee      	b.n	801862c <__libc_init_array+0xc>
 801864e:	f855 3b04 	ldr.w	r3, [r5], #4
 8018652:	4798      	blx	r3
 8018654:	3601      	adds	r6, #1
 8018656:	e7f2      	b.n	801863e <__libc_init_array+0x1e>
 8018658:	0801c4c4 	.word	0x0801c4c4
 801865c:	0801c4c4 	.word	0x0801c4c4
 8018660:	0801c4c4 	.word	0x0801c4c4
 8018664:	0801c4c8 	.word	0x0801c4c8

08018668 <__retarget_lock_init_recursive>:
 8018668:	4770      	bx	lr

0801866a <__retarget_lock_acquire_recursive>:
 801866a:	4770      	bx	lr

0801866c <__retarget_lock_release_recursive>:
 801866c:	4770      	bx	lr

0801866e <memcpy>:
 801866e:	440a      	add	r2, r1
 8018670:	4291      	cmp	r1, r2
 8018672:	f100 33ff 	add.w	r3, r0, #4294967295
 8018676:	d100      	bne.n	801867a <memcpy+0xc>
 8018678:	4770      	bx	lr
 801867a:	b510      	push	{r4, lr}
 801867c:	f811 4b01 	ldrb.w	r4, [r1], #1
 8018680:	f803 4f01 	strb.w	r4, [r3, #1]!
 8018684:	4291      	cmp	r1, r2
 8018686:	d1f9      	bne.n	801867c <memcpy+0xe>
 8018688:	bd10      	pop	{r4, pc}
	...

0801868c <__assert_func>:
 801868c:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 801868e:	4614      	mov	r4, r2
 8018690:	461a      	mov	r2, r3
 8018692:	4b09      	ldr	r3, [pc, #36]	; (80186b8 <__assert_func+0x2c>)
 8018694:	681b      	ldr	r3, [r3, #0]
 8018696:	4605      	mov	r5, r0
 8018698:	68d8      	ldr	r0, [r3, #12]
 801869a:	b14c      	cbz	r4, 80186b0 <__assert_func+0x24>
 801869c:	4b07      	ldr	r3, [pc, #28]	; (80186bc <__assert_func+0x30>)
 801869e:	9100      	str	r1, [sp, #0]
 80186a0:	e9cd 3401 	strd	r3, r4, [sp, #4]
 80186a4:	4906      	ldr	r1, [pc, #24]	; (80186c0 <__assert_func+0x34>)
 80186a6:	462b      	mov	r3, r5
 80186a8:	f000 fc90 	bl	8018fcc <fiprintf>
 80186ac:	f000 fd46 	bl	801913c <abort>
 80186b0:	4b04      	ldr	r3, [pc, #16]	; (80186c4 <__assert_func+0x38>)
 80186b2:	461c      	mov	r4, r3
 80186b4:	e7f3      	b.n	801869e <__assert_func+0x12>
 80186b6:	bf00      	nop
 80186b8:	20000174 	.word	0x20000174
 80186bc:	0801c44a 	.word	0x0801c44a
 80186c0:	0801c457 	.word	0x0801c457
 80186c4:	0801c485 	.word	0x0801c485

080186c8 <_free_r>:
 80186c8:	b537      	push	{r0, r1, r2, r4, r5, lr}
 80186ca:	2900      	cmp	r1, #0
 80186cc:	d044      	beq.n	8018758 <_free_r+0x90>
 80186ce:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80186d2:	9001      	str	r0, [sp, #4]
 80186d4:	2b00      	cmp	r3, #0
 80186d6:	f1a1 0404 	sub.w	r4, r1, #4
 80186da:	bfb8      	it	lt
 80186dc:	18e4      	addlt	r4, r4, r3
 80186de:	f000 f8e7 	bl	80188b0 <__malloc_lock>
 80186e2:	4a1e      	ldr	r2, [pc, #120]	; (801875c <_free_r+0x94>)
 80186e4:	9801      	ldr	r0, [sp, #4]
 80186e6:	6813      	ldr	r3, [r2, #0]
 80186e8:	b933      	cbnz	r3, 80186f8 <_free_r+0x30>
 80186ea:	6063      	str	r3, [r4, #4]
 80186ec:	6014      	str	r4, [r2, #0]
 80186ee:	b003      	add	sp, #12
 80186f0:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 80186f4:	f000 b8e2 	b.w	80188bc <__malloc_unlock>
 80186f8:	42a3      	cmp	r3, r4
 80186fa:	d908      	bls.n	801870e <_free_r+0x46>
 80186fc:	6825      	ldr	r5, [r4, #0]
 80186fe:	1961      	adds	r1, r4, r5
 8018700:	428b      	cmp	r3, r1
 8018702:	bf01      	itttt	eq
 8018704:	6819      	ldreq	r1, [r3, #0]
 8018706:	685b      	ldreq	r3, [r3, #4]
 8018708:	1949      	addeq	r1, r1, r5
 801870a:	6021      	streq	r1, [r4, #0]
 801870c:	e7ed      	b.n	80186ea <_free_r+0x22>
 801870e:	461a      	mov	r2, r3
 8018710:	685b      	ldr	r3, [r3, #4]
 8018712:	b10b      	cbz	r3, 8018718 <_free_r+0x50>
 8018714:	42a3      	cmp	r3, r4
 8018716:	d9fa      	bls.n	801870e <_free_r+0x46>
 8018718:	6811      	ldr	r1, [r2, #0]
 801871a:	1855      	adds	r5, r2, r1
 801871c:	42a5      	cmp	r5, r4
 801871e:	d10b      	bne.n	8018738 <_free_r+0x70>
 8018720:	6824      	ldr	r4, [r4, #0]
 8018722:	4421      	add	r1, r4
 8018724:	1854      	adds	r4, r2, r1
 8018726:	42a3      	cmp	r3, r4
 8018728:	6011      	str	r1, [r2, #0]
 801872a:	d1e0      	bne.n	80186ee <_free_r+0x26>
 801872c:	681c      	ldr	r4, [r3, #0]
 801872e:	685b      	ldr	r3, [r3, #4]
 8018730:	6053      	str	r3, [r2, #4]
 8018732:	440c      	add	r4, r1
 8018734:	6014      	str	r4, [r2, #0]
 8018736:	e7da      	b.n	80186ee <_free_r+0x26>
 8018738:	d902      	bls.n	8018740 <_free_r+0x78>
 801873a:	230c      	movs	r3, #12
 801873c:	6003      	str	r3, [r0, #0]
 801873e:	e7d6      	b.n	80186ee <_free_r+0x26>
 8018740:	6825      	ldr	r5, [r4, #0]
 8018742:	1961      	adds	r1, r4, r5
 8018744:	428b      	cmp	r3, r1
 8018746:	bf04      	itt	eq
 8018748:	6819      	ldreq	r1, [r3, #0]
 801874a:	685b      	ldreq	r3, [r3, #4]
 801874c:	6063      	str	r3, [r4, #4]
 801874e:	bf04      	itt	eq
 8018750:	1949      	addeq	r1, r1, r5
 8018752:	6021      	streq	r1, [r4, #0]
 8018754:	6054      	str	r4, [r2, #4]
 8018756:	e7ca      	b.n	80186ee <_free_r+0x26>
 8018758:	b003      	add	sp, #12
 801875a:	bd30      	pop	{r4, r5, pc}
 801875c:	2000a7dc 	.word	0x2000a7dc

08018760 <malloc>:
 8018760:	4b02      	ldr	r3, [pc, #8]	; (801876c <malloc+0xc>)
 8018762:	4601      	mov	r1, r0
 8018764:	6818      	ldr	r0, [r3, #0]
 8018766:	f000 b823 	b.w	80187b0 <_malloc_r>
 801876a:	bf00      	nop
 801876c:	20000174 	.word	0x20000174

08018770 <sbrk_aligned>:
 8018770:	b570      	push	{r4, r5, r6, lr}
 8018772:	4e0e      	ldr	r6, [pc, #56]	; (80187ac <sbrk_aligned+0x3c>)
 8018774:	460c      	mov	r4, r1
 8018776:	6831      	ldr	r1, [r6, #0]
 8018778:	4605      	mov	r5, r0
 801877a:	b911      	cbnz	r1, 8018782 <sbrk_aligned+0x12>
 801877c:	f000 fcce 	bl	801911c <_sbrk_r>
 8018780:	6030      	str	r0, [r6, #0]
 8018782:	4621      	mov	r1, r4
 8018784:	4628      	mov	r0, r5
 8018786:	f000 fcc9 	bl	801911c <_sbrk_r>
 801878a:	1c43      	adds	r3, r0, #1
 801878c:	d00a      	beq.n	80187a4 <sbrk_aligned+0x34>
 801878e:	1cc4      	adds	r4, r0, #3
 8018790:	f024 0403 	bic.w	r4, r4, #3
 8018794:	42a0      	cmp	r0, r4
 8018796:	d007      	beq.n	80187a8 <sbrk_aligned+0x38>
 8018798:	1a21      	subs	r1, r4, r0
 801879a:	4628      	mov	r0, r5
 801879c:	f000 fcbe 	bl	801911c <_sbrk_r>
 80187a0:	3001      	adds	r0, #1
 80187a2:	d101      	bne.n	80187a8 <sbrk_aligned+0x38>
 80187a4:	f04f 34ff 	mov.w	r4, #4294967295
 80187a8:	4620      	mov	r0, r4
 80187aa:	bd70      	pop	{r4, r5, r6, pc}
 80187ac:	2000a7e0 	.word	0x2000a7e0

080187b0 <_malloc_r>:
 80187b0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80187b4:	1ccd      	adds	r5, r1, #3
 80187b6:	f025 0503 	bic.w	r5, r5, #3
 80187ba:	3508      	adds	r5, #8
 80187bc:	2d0c      	cmp	r5, #12
 80187be:	bf38      	it	cc
 80187c0:	250c      	movcc	r5, #12
 80187c2:	2d00      	cmp	r5, #0
 80187c4:	4607      	mov	r7, r0
 80187c6:	db01      	blt.n	80187cc <_malloc_r+0x1c>
 80187c8:	42a9      	cmp	r1, r5
 80187ca:	d905      	bls.n	80187d8 <_malloc_r+0x28>
 80187cc:	230c      	movs	r3, #12
 80187ce:	603b      	str	r3, [r7, #0]
 80187d0:	2600      	movs	r6, #0
 80187d2:	4630      	mov	r0, r6
 80187d4:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80187d8:	f8df 80d0 	ldr.w	r8, [pc, #208]	; 80188ac <_malloc_r+0xfc>
 80187dc:	f000 f868 	bl	80188b0 <__malloc_lock>
 80187e0:	f8d8 3000 	ldr.w	r3, [r8]
 80187e4:	461c      	mov	r4, r3
 80187e6:	bb5c      	cbnz	r4, 8018840 <_malloc_r+0x90>
 80187e8:	4629      	mov	r1, r5
 80187ea:	4638      	mov	r0, r7
 80187ec:	f7ff ffc0 	bl	8018770 <sbrk_aligned>
 80187f0:	1c43      	adds	r3, r0, #1
 80187f2:	4604      	mov	r4, r0
 80187f4:	d155      	bne.n	80188a2 <_malloc_r+0xf2>
 80187f6:	f8d8 4000 	ldr.w	r4, [r8]
 80187fa:	4626      	mov	r6, r4
 80187fc:	2e00      	cmp	r6, #0
 80187fe:	d145      	bne.n	801888c <_malloc_r+0xdc>
 8018800:	2c00      	cmp	r4, #0
 8018802:	d048      	beq.n	8018896 <_malloc_r+0xe6>
 8018804:	6823      	ldr	r3, [r4, #0]
 8018806:	4631      	mov	r1, r6
 8018808:	4638      	mov	r0, r7
 801880a:	eb04 0903 	add.w	r9, r4, r3
 801880e:	f000 fc85 	bl	801911c <_sbrk_r>
 8018812:	4581      	cmp	r9, r0
 8018814:	d13f      	bne.n	8018896 <_malloc_r+0xe6>
 8018816:	6821      	ldr	r1, [r4, #0]
 8018818:	1a6d      	subs	r5, r5, r1
 801881a:	4629      	mov	r1, r5
 801881c:	4638      	mov	r0, r7
 801881e:	f7ff ffa7 	bl	8018770 <sbrk_aligned>
 8018822:	3001      	adds	r0, #1
 8018824:	d037      	beq.n	8018896 <_malloc_r+0xe6>
 8018826:	6823      	ldr	r3, [r4, #0]
 8018828:	442b      	add	r3, r5
 801882a:	6023      	str	r3, [r4, #0]
 801882c:	f8d8 3000 	ldr.w	r3, [r8]
 8018830:	2b00      	cmp	r3, #0
 8018832:	d038      	beq.n	80188a6 <_malloc_r+0xf6>
 8018834:	685a      	ldr	r2, [r3, #4]
 8018836:	42a2      	cmp	r2, r4
 8018838:	d12b      	bne.n	8018892 <_malloc_r+0xe2>
 801883a:	2200      	movs	r2, #0
 801883c:	605a      	str	r2, [r3, #4]
 801883e:	e00f      	b.n	8018860 <_malloc_r+0xb0>
 8018840:	6822      	ldr	r2, [r4, #0]
 8018842:	1b52      	subs	r2, r2, r5
 8018844:	d41f      	bmi.n	8018886 <_malloc_r+0xd6>
 8018846:	2a0b      	cmp	r2, #11
 8018848:	d917      	bls.n	801887a <_malloc_r+0xca>
 801884a:	1961      	adds	r1, r4, r5
 801884c:	42a3      	cmp	r3, r4
 801884e:	6025      	str	r5, [r4, #0]
 8018850:	bf18      	it	ne
 8018852:	6059      	strne	r1, [r3, #4]
 8018854:	6863      	ldr	r3, [r4, #4]
 8018856:	bf08      	it	eq
 8018858:	f8c8 1000 	streq.w	r1, [r8]
 801885c:	5162      	str	r2, [r4, r5]
 801885e:	604b      	str	r3, [r1, #4]
 8018860:	4638      	mov	r0, r7
 8018862:	f104 060b 	add.w	r6, r4, #11
 8018866:	f000 f829 	bl	80188bc <__malloc_unlock>
 801886a:	f026 0607 	bic.w	r6, r6, #7
 801886e:	1d23      	adds	r3, r4, #4
 8018870:	1af2      	subs	r2, r6, r3
 8018872:	d0ae      	beq.n	80187d2 <_malloc_r+0x22>
 8018874:	1b9b      	subs	r3, r3, r6
 8018876:	50a3      	str	r3, [r4, r2]
 8018878:	e7ab      	b.n	80187d2 <_malloc_r+0x22>
 801887a:	42a3      	cmp	r3, r4
 801887c:	6862      	ldr	r2, [r4, #4]
 801887e:	d1dd      	bne.n	801883c <_malloc_r+0x8c>
 8018880:	f8c8 2000 	str.w	r2, [r8]
 8018884:	e7ec      	b.n	8018860 <_malloc_r+0xb0>
 8018886:	4623      	mov	r3, r4
 8018888:	6864      	ldr	r4, [r4, #4]
 801888a:	e7ac      	b.n	80187e6 <_malloc_r+0x36>
 801888c:	4634      	mov	r4, r6
 801888e:	6876      	ldr	r6, [r6, #4]
 8018890:	e7b4      	b.n	80187fc <_malloc_r+0x4c>
 8018892:	4613      	mov	r3, r2
 8018894:	e7cc      	b.n	8018830 <_malloc_r+0x80>
 8018896:	230c      	movs	r3, #12
 8018898:	603b      	str	r3, [r7, #0]
 801889a:	4638      	mov	r0, r7
 801889c:	f000 f80e 	bl	80188bc <__malloc_unlock>
 80188a0:	e797      	b.n	80187d2 <_malloc_r+0x22>
 80188a2:	6025      	str	r5, [r4, #0]
 80188a4:	e7dc      	b.n	8018860 <_malloc_r+0xb0>
 80188a6:	605b      	str	r3, [r3, #4]
 80188a8:	deff      	udf	#255	; 0xff
 80188aa:	bf00      	nop
 80188ac:	2000a7dc 	.word	0x2000a7dc

080188b0 <__malloc_lock>:
 80188b0:	4801      	ldr	r0, [pc, #4]	; (80188b8 <__malloc_lock+0x8>)
 80188b2:	f7ff beda 	b.w	801866a <__retarget_lock_acquire_recursive>
 80188b6:	bf00      	nop
 80188b8:	2000a7d8 	.word	0x2000a7d8

080188bc <__malloc_unlock>:
 80188bc:	4801      	ldr	r0, [pc, #4]	; (80188c4 <__malloc_unlock+0x8>)
 80188be:	f7ff bed5 	b.w	801866c <__retarget_lock_release_recursive>
 80188c2:	bf00      	nop
 80188c4:	2000a7d8 	.word	0x2000a7d8

080188c8 <__sfputc_r>:
 80188c8:	6893      	ldr	r3, [r2, #8]
 80188ca:	3b01      	subs	r3, #1
 80188cc:	2b00      	cmp	r3, #0
 80188ce:	b410      	push	{r4}
 80188d0:	6093      	str	r3, [r2, #8]
 80188d2:	da08      	bge.n	80188e6 <__sfputc_r+0x1e>
 80188d4:	6994      	ldr	r4, [r2, #24]
 80188d6:	42a3      	cmp	r3, r4
 80188d8:	db01      	blt.n	80188de <__sfputc_r+0x16>
 80188da:	290a      	cmp	r1, #10
 80188dc:	d103      	bne.n	80188e6 <__sfputc_r+0x1e>
 80188de:	f85d 4b04 	ldr.w	r4, [sp], #4
 80188e2:	f000 bb85 	b.w	8018ff0 <__swbuf_r>
 80188e6:	6813      	ldr	r3, [r2, #0]
 80188e8:	1c58      	adds	r0, r3, #1
 80188ea:	6010      	str	r0, [r2, #0]
 80188ec:	7019      	strb	r1, [r3, #0]
 80188ee:	4608      	mov	r0, r1
 80188f0:	f85d 4b04 	ldr.w	r4, [sp], #4
 80188f4:	4770      	bx	lr

080188f6 <__sfputs_r>:
 80188f6:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80188f8:	4606      	mov	r6, r0
 80188fa:	460f      	mov	r7, r1
 80188fc:	4614      	mov	r4, r2
 80188fe:	18d5      	adds	r5, r2, r3
 8018900:	42ac      	cmp	r4, r5
 8018902:	d101      	bne.n	8018908 <__sfputs_r+0x12>
 8018904:	2000      	movs	r0, #0
 8018906:	e007      	b.n	8018918 <__sfputs_r+0x22>
 8018908:	f814 1b01 	ldrb.w	r1, [r4], #1
 801890c:	463a      	mov	r2, r7
 801890e:	4630      	mov	r0, r6
 8018910:	f7ff ffda 	bl	80188c8 <__sfputc_r>
 8018914:	1c43      	adds	r3, r0, #1
 8018916:	d1f3      	bne.n	8018900 <__sfputs_r+0xa>
 8018918:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

0801891c <_vfiprintf_r>:
 801891c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8018920:	460d      	mov	r5, r1
 8018922:	b09d      	sub	sp, #116	; 0x74
 8018924:	4614      	mov	r4, r2
 8018926:	4698      	mov	r8, r3
 8018928:	4606      	mov	r6, r0
 801892a:	b118      	cbz	r0, 8018934 <_vfiprintf_r+0x18>
 801892c:	6a03      	ldr	r3, [r0, #32]
 801892e:	b90b      	cbnz	r3, 8018934 <_vfiprintf_r+0x18>
 8018930:	f7ff fd74 	bl	801841c <__sinit>
 8018934:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8018936:	07d9      	lsls	r1, r3, #31
 8018938:	d405      	bmi.n	8018946 <_vfiprintf_r+0x2a>
 801893a:	89ab      	ldrh	r3, [r5, #12]
 801893c:	059a      	lsls	r2, r3, #22
 801893e:	d402      	bmi.n	8018946 <_vfiprintf_r+0x2a>
 8018940:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8018942:	f7ff fe92 	bl	801866a <__retarget_lock_acquire_recursive>
 8018946:	89ab      	ldrh	r3, [r5, #12]
 8018948:	071b      	lsls	r3, r3, #28
 801894a:	d501      	bpl.n	8018950 <_vfiprintf_r+0x34>
 801894c:	692b      	ldr	r3, [r5, #16]
 801894e:	b99b      	cbnz	r3, 8018978 <_vfiprintf_r+0x5c>
 8018950:	4629      	mov	r1, r5
 8018952:	4630      	mov	r0, r6
 8018954:	f000 fb8a 	bl	801906c <__swsetup_r>
 8018958:	b170      	cbz	r0, 8018978 <_vfiprintf_r+0x5c>
 801895a:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 801895c:	07dc      	lsls	r4, r3, #31
 801895e:	d504      	bpl.n	801896a <_vfiprintf_r+0x4e>
 8018960:	f04f 30ff 	mov.w	r0, #4294967295
 8018964:	b01d      	add	sp, #116	; 0x74
 8018966:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801896a:	89ab      	ldrh	r3, [r5, #12]
 801896c:	0598      	lsls	r0, r3, #22
 801896e:	d4f7      	bmi.n	8018960 <_vfiprintf_r+0x44>
 8018970:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8018972:	f7ff fe7b 	bl	801866c <__retarget_lock_release_recursive>
 8018976:	e7f3      	b.n	8018960 <_vfiprintf_r+0x44>
 8018978:	2300      	movs	r3, #0
 801897a:	9309      	str	r3, [sp, #36]	; 0x24
 801897c:	2320      	movs	r3, #32
 801897e:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8018982:	f8cd 800c 	str.w	r8, [sp, #12]
 8018986:	2330      	movs	r3, #48	; 0x30
 8018988:	f8df 81b0 	ldr.w	r8, [pc, #432]	; 8018b3c <_vfiprintf_r+0x220>
 801898c:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8018990:	f04f 0901 	mov.w	r9, #1
 8018994:	4623      	mov	r3, r4
 8018996:	469a      	mov	sl, r3
 8018998:	f813 2b01 	ldrb.w	r2, [r3], #1
 801899c:	b10a      	cbz	r2, 80189a2 <_vfiprintf_r+0x86>
 801899e:	2a25      	cmp	r2, #37	; 0x25
 80189a0:	d1f9      	bne.n	8018996 <_vfiprintf_r+0x7a>
 80189a2:	ebba 0b04 	subs.w	fp, sl, r4
 80189a6:	d00b      	beq.n	80189c0 <_vfiprintf_r+0xa4>
 80189a8:	465b      	mov	r3, fp
 80189aa:	4622      	mov	r2, r4
 80189ac:	4629      	mov	r1, r5
 80189ae:	4630      	mov	r0, r6
 80189b0:	f7ff ffa1 	bl	80188f6 <__sfputs_r>
 80189b4:	3001      	adds	r0, #1
 80189b6:	f000 80a9 	beq.w	8018b0c <_vfiprintf_r+0x1f0>
 80189ba:	9a09      	ldr	r2, [sp, #36]	; 0x24
 80189bc:	445a      	add	r2, fp
 80189be:	9209      	str	r2, [sp, #36]	; 0x24
 80189c0:	f89a 3000 	ldrb.w	r3, [sl]
 80189c4:	2b00      	cmp	r3, #0
 80189c6:	f000 80a1 	beq.w	8018b0c <_vfiprintf_r+0x1f0>
 80189ca:	2300      	movs	r3, #0
 80189cc:	f04f 32ff 	mov.w	r2, #4294967295
 80189d0:	e9cd 2305 	strd	r2, r3, [sp, #20]
 80189d4:	f10a 0a01 	add.w	sl, sl, #1
 80189d8:	9304      	str	r3, [sp, #16]
 80189da:	9307      	str	r3, [sp, #28]
 80189dc:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 80189e0:	931a      	str	r3, [sp, #104]	; 0x68
 80189e2:	4654      	mov	r4, sl
 80189e4:	2205      	movs	r2, #5
 80189e6:	f814 1b01 	ldrb.w	r1, [r4], #1
 80189ea:	4854      	ldr	r0, [pc, #336]	; (8018b3c <_vfiprintf_r+0x220>)
 80189ec:	f7e7 fbf8 	bl	80001e0 <memchr>
 80189f0:	9a04      	ldr	r2, [sp, #16]
 80189f2:	b9d8      	cbnz	r0, 8018a2c <_vfiprintf_r+0x110>
 80189f4:	06d1      	lsls	r1, r2, #27
 80189f6:	bf44      	itt	mi
 80189f8:	2320      	movmi	r3, #32
 80189fa:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 80189fe:	0713      	lsls	r3, r2, #28
 8018a00:	bf44      	itt	mi
 8018a02:	232b      	movmi	r3, #43	; 0x2b
 8018a04:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8018a08:	f89a 3000 	ldrb.w	r3, [sl]
 8018a0c:	2b2a      	cmp	r3, #42	; 0x2a
 8018a0e:	d015      	beq.n	8018a3c <_vfiprintf_r+0x120>
 8018a10:	9a07      	ldr	r2, [sp, #28]
 8018a12:	4654      	mov	r4, sl
 8018a14:	2000      	movs	r0, #0
 8018a16:	f04f 0c0a 	mov.w	ip, #10
 8018a1a:	4621      	mov	r1, r4
 8018a1c:	f811 3b01 	ldrb.w	r3, [r1], #1
 8018a20:	3b30      	subs	r3, #48	; 0x30
 8018a22:	2b09      	cmp	r3, #9
 8018a24:	d94d      	bls.n	8018ac2 <_vfiprintf_r+0x1a6>
 8018a26:	b1b0      	cbz	r0, 8018a56 <_vfiprintf_r+0x13a>
 8018a28:	9207      	str	r2, [sp, #28]
 8018a2a:	e014      	b.n	8018a56 <_vfiprintf_r+0x13a>
 8018a2c:	eba0 0308 	sub.w	r3, r0, r8
 8018a30:	fa09 f303 	lsl.w	r3, r9, r3
 8018a34:	4313      	orrs	r3, r2
 8018a36:	9304      	str	r3, [sp, #16]
 8018a38:	46a2      	mov	sl, r4
 8018a3a:	e7d2      	b.n	80189e2 <_vfiprintf_r+0xc6>
 8018a3c:	9b03      	ldr	r3, [sp, #12]
 8018a3e:	1d19      	adds	r1, r3, #4
 8018a40:	681b      	ldr	r3, [r3, #0]
 8018a42:	9103      	str	r1, [sp, #12]
 8018a44:	2b00      	cmp	r3, #0
 8018a46:	bfbb      	ittet	lt
 8018a48:	425b      	neglt	r3, r3
 8018a4a:	f042 0202 	orrlt.w	r2, r2, #2
 8018a4e:	9307      	strge	r3, [sp, #28]
 8018a50:	9307      	strlt	r3, [sp, #28]
 8018a52:	bfb8      	it	lt
 8018a54:	9204      	strlt	r2, [sp, #16]
 8018a56:	7823      	ldrb	r3, [r4, #0]
 8018a58:	2b2e      	cmp	r3, #46	; 0x2e
 8018a5a:	d10c      	bne.n	8018a76 <_vfiprintf_r+0x15a>
 8018a5c:	7863      	ldrb	r3, [r4, #1]
 8018a5e:	2b2a      	cmp	r3, #42	; 0x2a
 8018a60:	d134      	bne.n	8018acc <_vfiprintf_r+0x1b0>
 8018a62:	9b03      	ldr	r3, [sp, #12]
 8018a64:	1d1a      	adds	r2, r3, #4
 8018a66:	681b      	ldr	r3, [r3, #0]
 8018a68:	9203      	str	r2, [sp, #12]
 8018a6a:	2b00      	cmp	r3, #0
 8018a6c:	bfb8      	it	lt
 8018a6e:	f04f 33ff 	movlt.w	r3, #4294967295
 8018a72:	3402      	adds	r4, #2
 8018a74:	9305      	str	r3, [sp, #20]
 8018a76:	f8df a0d4 	ldr.w	sl, [pc, #212]	; 8018b4c <_vfiprintf_r+0x230>
 8018a7a:	7821      	ldrb	r1, [r4, #0]
 8018a7c:	2203      	movs	r2, #3
 8018a7e:	4650      	mov	r0, sl
 8018a80:	f7e7 fbae 	bl	80001e0 <memchr>
 8018a84:	b138      	cbz	r0, 8018a96 <_vfiprintf_r+0x17a>
 8018a86:	9b04      	ldr	r3, [sp, #16]
 8018a88:	eba0 000a 	sub.w	r0, r0, sl
 8018a8c:	2240      	movs	r2, #64	; 0x40
 8018a8e:	4082      	lsls	r2, r0
 8018a90:	4313      	orrs	r3, r2
 8018a92:	3401      	adds	r4, #1
 8018a94:	9304      	str	r3, [sp, #16]
 8018a96:	f814 1b01 	ldrb.w	r1, [r4], #1
 8018a9a:	4829      	ldr	r0, [pc, #164]	; (8018b40 <_vfiprintf_r+0x224>)
 8018a9c:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8018aa0:	2206      	movs	r2, #6
 8018aa2:	f7e7 fb9d 	bl	80001e0 <memchr>
 8018aa6:	2800      	cmp	r0, #0
 8018aa8:	d03f      	beq.n	8018b2a <_vfiprintf_r+0x20e>
 8018aaa:	4b26      	ldr	r3, [pc, #152]	; (8018b44 <_vfiprintf_r+0x228>)
 8018aac:	bb1b      	cbnz	r3, 8018af6 <_vfiprintf_r+0x1da>
 8018aae:	9b03      	ldr	r3, [sp, #12]
 8018ab0:	3307      	adds	r3, #7
 8018ab2:	f023 0307 	bic.w	r3, r3, #7
 8018ab6:	3308      	adds	r3, #8
 8018ab8:	9303      	str	r3, [sp, #12]
 8018aba:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8018abc:	443b      	add	r3, r7
 8018abe:	9309      	str	r3, [sp, #36]	; 0x24
 8018ac0:	e768      	b.n	8018994 <_vfiprintf_r+0x78>
 8018ac2:	fb0c 3202 	mla	r2, ip, r2, r3
 8018ac6:	460c      	mov	r4, r1
 8018ac8:	2001      	movs	r0, #1
 8018aca:	e7a6      	b.n	8018a1a <_vfiprintf_r+0xfe>
 8018acc:	2300      	movs	r3, #0
 8018ace:	3401      	adds	r4, #1
 8018ad0:	9305      	str	r3, [sp, #20]
 8018ad2:	4619      	mov	r1, r3
 8018ad4:	f04f 0c0a 	mov.w	ip, #10
 8018ad8:	4620      	mov	r0, r4
 8018ada:	f810 2b01 	ldrb.w	r2, [r0], #1
 8018ade:	3a30      	subs	r2, #48	; 0x30
 8018ae0:	2a09      	cmp	r2, #9
 8018ae2:	d903      	bls.n	8018aec <_vfiprintf_r+0x1d0>
 8018ae4:	2b00      	cmp	r3, #0
 8018ae6:	d0c6      	beq.n	8018a76 <_vfiprintf_r+0x15a>
 8018ae8:	9105      	str	r1, [sp, #20]
 8018aea:	e7c4      	b.n	8018a76 <_vfiprintf_r+0x15a>
 8018aec:	fb0c 2101 	mla	r1, ip, r1, r2
 8018af0:	4604      	mov	r4, r0
 8018af2:	2301      	movs	r3, #1
 8018af4:	e7f0      	b.n	8018ad8 <_vfiprintf_r+0x1bc>
 8018af6:	ab03      	add	r3, sp, #12
 8018af8:	9300      	str	r3, [sp, #0]
 8018afa:	462a      	mov	r2, r5
 8018afc:	4b12      	ldr	r3, [pc, #72]	; (8018b48 <_vfiprintf_r+0x22c>)
 8018afe:	a904      	add	r1, sp, #16
 8018b00:	4630      	mov	r0, r6
 8018b02:	f3af 8000 	nop.w
 8018b06:	4607      	mov	r7, r0
 8018b08:	1c78      	adds	r0, r7, #1
 8018b0a:	d1d6      	bne.n	8018aba <_vfiprintf_r+0x19e>
 8018b0c:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8018b0e:	07d9      	lsls	r1, r3, #31
 8018b10:	d405      	bmi.n	8018b1e <_vfiprintf_r+0x202>
 8018b12:	89ab      	ldrh	r3, [r5, #12]
 8018b14:	059a      	lsls	r2, r3, #22
 8018b16:	d402      	bmi.n	8018b1e <_vfiprintf_r+0x202>
 8018b18:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8018b1a:	f7ff fda7 	bl	801866c <__retarget_lock_release_recursive>
 8018b1e:	89ab      	ldrh	r3, [r5, #12]
 8018b20:	065b      	lsls	r3, r3, #25
 8018b22:	f53f af1d 	bmi.w	8018960 <_vfiprintf_r+0x44>
 8018b26:	9809      	ldr	r0, [sp, #36]	; 0x24
 8018b28:	e71c      	b.n	8018964 <_vfiprintf_r+0x48>
 8018b2a:	ab03      	add	r3, sp, #12
 8018b2c:	9300      	str	r3, [sp, #0]
 8018b2e:	462a      	mov	r2, r5
 8018b30:	4b05      	ldr	r3, [pc, #20]	; (8018b48 <_vfiprintf_r+0x22c>)
 8018b32:	a904      	add	r1, sp, #16
 8018b34:	4630      	mov	r0, r6
 8018b36:	f000 f879 	bl	8018c2c <_printf_i>
 8018b3a:	e7e4      	b.n	8018b06 <_vfiprintf_r+0x1ea>
 8018b3c:	0801c486 	.word	0x0801c486
 8018b40:	0801c490 	.word	0x0801c490
 8018b44:	00000000 	.word	0x00000000
 8018b48:	080188f7 	.word	0x080188f7
 8018b4c:	0801c48c 	.word	0x0801c48c

08018b50 <_printf_common>:
 8018b50:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8018b54:	4616      	mov	r6, r2
 8018b56:	4699      	mov	r9, r3
 8018b58:	688a      	ldr	r2, [r1, #8]
 8018b5a:	690b      	ldr	r3, [r1, #16]
 8018b5c:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8018b60:	4293      	cmp	r3, r2
 8018b62:	bfb8      	it	lt
 8018b64:	4613      	movlt	r3, r2
 8018b66:	6033      	str	r3, [r6, #0]
 8018b68:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8018b6c:	4607      	mov	r7, r0
 8018b6e:	460c      	mov	r4, r1
 8018b70:	b10a      	cbz	r2, 8018b76 <_printf_common+0x26>
 8018b72:	3301      	adds	r3, #1
 8018b74:	6033      	str	r3, [r6, #0]
 8018b76:	6823      	ldr	r3, [r4, #0]
 8018b78:	0699      	lsls	r1, r3, #26
 8018b7a:	bf42      	ittt	mi
 8018b7c:	6833      	ldrmi	r3, [r6, #0]
 8018b7e:	3302      	addmi	r3, #2
 8018b80:	6033      	strmi	r3, [r6, #0]
 8018b82:	6825      	ldr	r5, [r4, #0]
 8018b84:	f015 0506 	ands.w	r5, r5, #6
 8018b88:	d106      	bne.n	8018b98 <_printf_common+0x48>
 8018b8a:	f104 0a19 	add.w	sl, r4, #25
 8018b8e:	68e3      	ldr	r3, [r4, #12]
 8018b90:	6832      	ldr	r2, [r6, #0]
 8018b92:	1a9b      	subs	r3, r3, r2
 8018b94:	42ab      	cmp	r3, r5
 8018b96:	dc26      	bgt.n	8018be6 <_printf_common+0x96>
 8018b98:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8018b9c:	1e13      	subs	r3, r2, #0
 8018b9e:	6822      	ldr	r2, [r4, #0]
 8018ba0:	bf18      	it	ne
 8018ba2:	2301      	movne	r3, #1
 8018ba4:	0692      	lsls	r2, r2, #26
 8018ba6:	d42b      	bmi.n	8018c00 <_printf_common+0xb0>
 8018ba8:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8018bac:	4649      	mov	r1, r9
 8018bae:	4638      	mov	r0, r7
 8018bb0:	47c0      	blx	r8
 8018bb2:	3001      	adds	r0, #1
 8018bb4:	d01e      	beq.n	8018bf4 <_printf_common+0xa4>
 8018bb6:	6823      	ldr	r3, [r4, #0]
 8018bb8:	6922      	ldr	r2, [r4, #16]
 8018bba:	f003 0306 	and.w	r3, r3, #6
 8018bbe:	2b04      	cmp	r3, #4
 8018bc0:	bf02      	ittt	eq
 8018bc2:	68e5      	ldreq	r5, [r4, #12]
 8018bc4:	6833      	ldreq	r3, [r6, #0]
 8018bc6:	1aed      	subeq	r5, r5, r3
 8018bc8:	68a3      	ldr	r3, [r4, #8]
 8018bca:	bf0c      	ite	eq
 8018bcc:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8018bd0:	2500      	movne	r5, #0
 8018bd2:	4293      	cmp	r3, r2
 8018bd4:	bfc4      	itt	gt
 8018bd6:	1a9b      	subgt	r3, r3, r2
 8018bd8:	18ed      	addgt	r5, r5, r3
 8018bda:	2600      	movs	r6, #0
 8018bdc:	341a      	adds	r4, #26
 8018bde:	42b5      	cmp	r5, r6
 8018be0:	d11a      	bne.n	8018c18 <_printf_common+0xc8>
 8018be2:	2000      	movs	r0, #0
 8018be4:	e008      	b.n	8018bf8 <_printf_common+0xa8>
 8018be6:	2301      	movs	r3, #1
 8018be8:	4652      	mov	r2, sl
 8018bea:	4649      	mov	r1, r9
 8018bec:	4638      	mov	r0, r7
 8018bee:	47c0      	blx	r8
 8018bf0:	3001      	adds	r0, #1
 8018bf2:	d103      	bne.n	8018bfc <_printf_common+0xac>
 8018bf4:	f04f 30ff 	mov.w	r0, #4294967295
 8018bf8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8018bfc:	3501      	adds	r5, #1
 8018bfe:	e7c6      	b.n	8018b8e <_printf_common+0x3e>
 8018c00:	18e1      	adds	r1, r4, r3
 8018c02:	1c5a      	adds	r2, r3, #1
 8018c04:	2030      	movs	r0, #48	; 0x30
 8018c06:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8018c0a:	4422      	add	r2, r4
 8018c0c:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8018c10:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8018c14:	3302      	adds	r3, #2
 8018c16:	e7c7      	b.n	8018ba8 <_printf_common+0x58>
 8018c18:	2301      	movs	r3, #1
 8018c1a:	4622      	mov	r2, r4
 8018c1c:	4649      	mov	r1, r9
 8018c1e:	4638      	mov	r0, r7
 8018c20:	47c0      	blx	r8
 8018c22:	3001      	adds	r0, #1
 8018c24:	d0e6      	beq.n	8018bf4 <_printf_common+0xa4>
 8018c26:	3601      	adds	r6, #1
 8018c28:	e7d9      	b.n	8018bde <_printf_common+0x8e>
	...

08018c2c <_printf_i>:
 8018c2c:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8018c30:	7e0f      	ldrb	r7, [r1, #24]
 8018c32:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8018c34:	2f78      	cmp	r7, #120	; 0x78
 8018c36:	4691      	mov	r9, r2
 8018c38:	4680      	mov	r8, r0
 8018c3a:	460c      	mov	r4, r1
 8018c3c:	469a      	mov	sl, r3
 8018c3e:	f101 0243 	add.w	r2, r1, #67	; 0x43
 8018c42:	d807      	bhi.n	8018c54 <_printf_i+0x28>
 8018c44:	2f62      	cmp	r7, #98	; 0x62
 8018c46:	d80a      	bhi.n	8018c5e <_printf_i+0x32>
 8018c48:	2f00      	cmp	r7, #0
 8018c4a:	f000 80d4 	beq.w	8018df6 <_printf_i+0x1ca>
 8018c4e:	2f58      	cmp	r7, #88	; 0x58
 8018c50:	f000 80c0 	beq.w	8018dd4 <_printf_i+0x1a8>
 8018c54:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8018c58:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8018c5c:	e03a      	b.n	8018cd4 <_printf_i+0xa8>
 8018c5e:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8018c62:	2b15      	cmp	r3, #21
 8018c64:	d8f6      	bhi.n	8018c54 <_printf_i+0x28>
 8018c66:	a101      	add	r1, pc, #4	; (adr r1, 8018c6c <_printf_i+0x40>)
 8018c68:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8018c6c:	08018cc5 	.word	0x08018cc5
 8018c70:	08018cd9 	.word	0x08018cd9
 8018c74:	08018c55 	.word	0x08018c55
 8018c78:	08018c55 	.word	0x08018c55
 8018c7c:	08018c55 	.word	0x08018c55
 8018c80:	08018c55 	.word	0x08018c55
 8018c84:	08018cd9 	.word	0x08018cd9
 8018c88:	08018c55 	.word	0x08018c55
 8018c8c:	08018c55 	.word	0x08018c55
 8018c90:	08018c55 	.word	0x08018c55
 8018c94:	08018c55 	.word	0x08018c55
 8018c98:	08018ddd 	.word	0x08018ddd
 8018c9c:	08018d05 	.word	0x08018d05
 8018ca0:	08018d97 	.word	0x08018d97
 8018ca4:	08018c55 	.word	0x08018c55
 8018ca8:	08018c55 	.word	0x08018c55
 8018cac:	08018dff 	.word	0x08018dff
 8018cb0:	08018c55 	.word	0x08018c55
 8018cb4:	08018d05 	.word	0x08018d05
 8018cb8:	08018c55 	.word	0x08018c55
 8018cbc:	08018c55 	.word	0x08018c55
 8018cc0:	08018d9f 	.word	0x08018d9f
 8018cc4:	682b      	ldr	r3, [r5, #0]
 8018cc6:	1d1a      	adds	r2, r3, #4
 8018cc8:	681b      	ldr	r3, [r3, #0]
 8018cca:	602a      	str	r2, [r5, #0]
 8018ccc:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8018cd0:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8018cd4:	2301      	movs	r3, #1
 8018cd6:	e09f      	b.n	8018e18 <_printf_i+0x1ec>
 8018cd8:	6820      	ldr	r0, [r4, #0]
 8018cda:	682b      	ldr	r3, [r5, #0]
 8018cdc:	0607      	lsls	r7, r0, #24
 8018cde:	f103 0104 	add.w	r1, r3, #4
 8018ce2:	6029      	str	r1, [r5, #0]
 8018ce4:	d501      	bpl.n	8018cea <_printf_i+0xbe>
 8018ce6:	681e      	ldr	r6, [r3, #0]
 8018ce8:	e003      	b.n	8018cf2 <_printf_i+0xc6>
 8018cea:	0646      	lsls	r6, r0, #25
 8018cec:	d5fb      	bpl.n	8018ce6 <_printf_i+0xba>
 8018cee:	f9b3 6000 	ldrsh.w	r6, [r3]
 8018cf2:	2e00      	cmp	r6, #0
 8018cf4:	da03      	bge.n	8018cfe <_printf_i+0xd2>
 8018cf6:	232d      	movs	r3, #45	; 0x2d
 8018cf8:	4276      	negs	r6, r6
 8018cfa:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8018cfe:	485a      	ldr	r0, [pc, #360]	; (8018e68 <_printf_i+0x23c>)
 8018d00:	230a      	movs	r3, #10
 8018d02:	e012      	b.n	8018d2a <_printf_i+0xfe>
 8018d04:	682b      	ldr	r3, [r5, #0]
 8018d06:	6820      	ldr	r0, [r4, #0]
 8018d08:	1d19      	adds	r1, r3, #4
 8018d0a:	6029      	str	r1, [r5, #0]
 8018d0c:	0605      	lsls	r5, r0, #24
 8018d0e:	d501      	bpl.n	8018d14 <_printf_i+0xe8>
 8018d10:	681e      	ldr	r6, [r3, #0]
 8018d12:	e002      	b.n	8018d1a <_printf_i+0xee>
 8018d14:	0641      	lsls	r1, r0, #25
 8018d16:	d5fb      	bpl.n	8018d10 <_printf_i+0xe4>
 8018d18:	881e      	ldrh	r6, [r3, #0]
 8018d1a:	4853      	ldr	r0, [pc, #332]	; (8018e68 <_printf_i+0x23c>)
 8018d1c:	2f6f      	cmp	r7, #111	; 0x6f
 8018d1e:	bf0c      	ite	eq
 8018d20:	2308      	moveq	r3, #8
 8018d22:	230a      	movne	r3, #10
 8018d24:	2100      	movs	r1, #0
 8018d26:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8018d2a:	6865      	ldr	r5, [r4, #4]
 8018d2c:	60a5      	str	r5, [r4, #8]
 8018d2e:	2d00      	cmp	r5, #0
 8018d30:	bfa2      	ittt	ge
 8018d32:	6821      	ldrge	r1, [r4, #0]
 8018d34:	f021 0104 	bicge.w	r1, r1, #4
 8018d38:	6021      	strge	r1, [r4, #0]
 8018d3a:	b90e      	cbnz	r6, 8018d40 <_printf_i+0x114>
 8018d3c:	2d00      	cmp	r5, #0
 8018d3e:	d04b      	beq.n	8018dd8 <_printf_i+0x1ac>
 8018d40:	4615      	mov	r5, r2
 8018d42:	fbb6 f1f3 	udiv	r1, r6, r3
 8018d46:	fb03 6711 	mls	r7, r3, r1, r6
 8018d4a:	5dc7      	ldrb	r7, [r0, r7]
 8018d4c:	f805 7d01 	strb.w	r7, [r5, #-1]!
 8018d50:	4637      	mov	r7, r6
 8018d52:	42bb      	cmp	r3, r7
 8018d54:	460e      	mov	r6, r1
 8018d56:	d9f4      	bls.n	8018d42 <_printf_i+0x116>
 8018d58:	2b08      	cmp	r3, #8
 8018d5a:	d10b      	bne.n	8018d74 <_printf_i+0x148>
 8018d5c:	6823      	ldr	r3, [r4, #0]
 8018d5e:	07de      	lsls	r6, r3, #31
 8018d60:	d508      	bpl.n	8018d74 <_printf_i+0x148>
 8018d62:	6923      	ldr	r3, [r4, #16]
 8018d64:	6861      	ldr	r1, [r4, #4]
 8018d66:	4299      	cmp	r1, r3
 8018d68:	bfde      	ittt	le
 8018d6a:	2330      	movle	r3, #48	; 0x30
 8018d6c:	f805 3c01 	strble.w	r3, [r5, #-1]
 8018d70:	f105 35ff 	addle.w	r5, r5, #4294967295
 8018d74:	1b52      	subs	r2, r2, r5
 8018d76:	6122      	str	r2, [r4, #16]
 8018d78:	f8cd a000 	str.w	sl, [sp]
 8018d7c:	464b      	mov	r3, r9
 8018d7e:	aa03      	add	r2, sp, #12
 8018d80:	4621      	mov	r1, r4
 8018d82:	4640      	mov	r0, r8
 8018d84:	f7ff fee4 	bl	8018b50 <_printf_common>
 8018d88:	3001      	adds	r0, #1
 8018d8a:	d14a      	bne.n	8018e22 <_printf_i+0x1f6>
 8018d8c:	f04f 30ff 	mov.w	r0, #4294967295
 8018d90:	b004      	add	sp, #16
 8018d92:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8018d96:	6823      	ldr	r3, [r4, #0]
 8018d98:	f043 0320 	orr.w	r3, r3, #32
 8018d9c:	6023      	str	r3, [r4, #0]
 8018d9e:	4833      	ldr	r0, [pc, #204]	; (8018e6c <_printf_i+0x240>)
 8018da0:	2778      	movs	r7, #120	; 0x78
 8018da2:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 8018da6:	6823      	ldr	r3, [r4, #0]
 8018da8:	6829      	ldr	r1, [r5, #0]
 8018daa:	061f      	lsls	r7, r3, #24
 8018dac:	f851 6b04 	ldr.w	r6, [r1], #4
 8018db0:	d402      	bmi.n	8018db8 <_printf_i+0x18c>
 8018db2:	065f      	lsls	r7, r3, #25
 8018db4:	bf48      	it	mi
 8018db6:	b2b6      	uxthmi	r6, r6
 8018db8:	07df      	lsls	r7, r3, #31
 8018dba:	bf48      	it	mi
 8018dbc:	f043 0320 	orrmi.w	r3, r3, #32
 8018dc0:	6029      	str	r1, [r5, #0]
 8018dc2:	bf48      	it	mi
 8018dc4:	6023      	strmi	r3, [r4, #0]
 8018dc6:	b91e      	cbnz	r6, 8018dd0 <_printf_i+0x1a4>
 8018dc8:	6823      	ldr	r3, [r4, #0]
 8018dca:	f023 0320 	bic.w	r3, r3, #32
 8018dce:	6023      	str	r3, [r4, #0]
 8018dd0:	2310      	movs	r3, #16
 8018dd2:	e7a7      	b.n	8018d24 <_printf_i+0xf8>
 8018dd4:	4824      	ldr	r0, [pc, #144]	; (8018e68 <_printf_i+0x23c>)
 8018dd6:	e7e4      	b.n	8018da2 <_printf_i+0x176>
 8018dd8:	4615      	mov	r5, r2
 8018dda:	e7bd      	b.n	8018d58 <_printf_i+0x12c>
 8018ddc:	682b      	ldr	r3, [r5, #0]
 8018dde:	6826      	ldr	r6, [r4, #0]
 8018de0:	6961      	ldr	r1, [r4, #20]
 8018de2:	1d18      	adds	r0, r3, #4
 8018de4:	6028      	str	r0, [r5, #0]
 8018de6:	0635      	lsls	r5, r6, #24
 8018de8:	681b      	ldr	r3, [r3, #0]
 8018dea:	d501      	bpl.n	8018df0 <_printf_i+0x1c4>
 8018dec:	6019      	str	r1, [r3, #0]
 8018dee:	e002      	b.n	8018df6 <_printf_i+0x1ca>
 8018df0:	0670      	lsls	r0, r6, #25
 8018df2:	d5fb      	bpl.n	8018dec <_printf_i+0x1c0>
 8018df4:	8019      	strh	r1, [r3, #0]
 8018df6:	2300      	movs	r3, #0
 8018df8:	6123      	str	r3, [r4, #16]
 8018dfa:	4615      	mov	r5, r2
 8018dfc:	e7bc      	b.n	8018d78 <_printf_i+0x14c>
 8018dfe:	682b      	ldr	r3, [r5, #0]
 8018e00:	1d1a      	adds	r2, r3, #4
 8018e02:	602a      	str	r2, [r5, #0]
 8018e04:	681d      	ldr	r5, [r3, #0]
 8018e06:	6862      	ldr	r2, [r4, #4]
 8018e08:	2100      	movs	r1, #0
 8018e0a:	4628      	mov	r0, r5
 8018e0c:	f7e7 f9e8 	bl	80001e0 <memchr>
 8018e10:	b108      	cbz	r0, 8018e16 <_printf_i+0x1ea>
 8018e12:	1b40      	subs	r0, r0, r5
 8018e14:	6060      	str	r0, [r4, #4]
 8018e16:	6863      	ldr	r3, [r4, #4]
 8018e18:	6123      	str	r3, [r4, #16]
 8018e1a:	2300      	movs	r3, #0
 8018e1c:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8018e20:	e7aa      	b.n	8018d78 <_printf_i+0x14c>
 8018e22:	6923      	ldr	r3, [r4, #16]
 8018e24:	462a      	mov	r2, r5
 8018e26:	4649      	mov	r1, r9
 8018e28:	4640      	mov	r0, r8
 8018e2a:	47d0      	blx	sl
 8018e2c:	3001      	adds	r0, #1
 8018e2e:	d0ad      	beq.n	8018d8c <_printf_i+0x160>
 8018e30:	6823      	ldr	r3, [r4, #0]
 8018e32:	079b      	lsls	r3, r3, #30
 8018e34:	d413      	bmi.n	8018e5e <_printf_i+0x232>
 8018e36:	68e0      	ldr	r0, [r4, #12]
 8018e38:	9b03      	ldr	r3, [sp, #12]
 8018e3a:	4298      	cmp	r0, r3
 8018e3c:	bfb8      	it	lt
 8018e3e:	4618      	movlt	r0, r3
 8018e40:	e7a6      	b.n	8018d90 <_printf_i+0x164>
 8018e42:	2301      	movs	r3, #1
 8018e44:	4632      	mov	r2, r6
 8018e46:	4649      	mov	r1, r9
 8018e48:	4640      	mov	r0, r8
 8018e4a:	47d0      	blx	sl
 8018e4c:	3001      	adds	r0, #1
 8018e4e:	d09d      	beq.n	8018d8c <_printf_i+0x160>
 8018e50:	3501      	adds	r5, #1
 8018e52:	68e3      	ldr	r3, [r4, #12]
 8018e54:	9903      	ldr	r1, [sp, #12]
 8018e56:	1a5b      	subs	r3, r3, r1
 8018e58:	42ab      	cmp	r3, r5
 8018e5a:	dcf2      	bgt.n	8018e42 <_printf_i+0x216>
 8018e5c:	e7eb      	b.n	8018e36 <_printf_i+0x20a>
 8018e5e:	2500      	movs	r5, #0
 8018e60:	f104 0619 	add.w	r6, r4, #25
 8018e64:	e7f5      	b.n	8018e52 <_printf_i+0x226>
 8018e66:	bf00      	nop
 8018e68:	0801c497 	.word	0x0801c497
 8018e6c:	0801c4a8 	.word	0x0801c4a8

08018e70 <__sflush_r>:
 8018e70:	898a      	ldrh	r2, [r1, #12]
 8018e72:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8018e76:	4605      	mov	r5, r0
 8018e78:	0710      	lsls	r0, r2, #28
 8018e7a:	460c      	mov	r4, r1
 8018e7c:	d458      	bmi.n	8018f30 <__sflush_r+0xc0>
 8018e7e:	684b      	ldr	r3, [r1, #4]
 8018e80:	2b00      	cmp	r3, #0
 8018e82:	dc05      	bgt.n	8018e90 <__sflush_r+0x20>
 8018e84:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 8018e86:	2b00      	cmp	r3, #0
 8018e88:	dc02      	bgt.n	8018e90 <__sflush_r+0x20>
 8018e8a:	2000      	movs	r0, #0
 8018e8c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8018e90:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8018e92:	2e00      	cmp	r6, #0
 8018e94:	d0f9      	beq.n	8018e8a <__sflush_r+0x1a>
 8018e96:	2300      	movs	r3, #0
 8018e98:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 8018e9c:	682f      	ldr	r7, [r5, #0]
 8018e9e:	6a21      	ldr	r1, [r4, #32]
 8018ea0:	602b      	str	r3, [r5, #0]
 8018ea2:	d032      	beq.n	8018f0a <__sflush_r+0x9a>
 8018ea4:	6d60      	ldr	r0, [r4, #84]	; 0x54
 8018ea6:	89a3      	ldrh	r3, [r4, #12]
 8018ea8:	075a      	lsls	r2, r3, #29
 8018eaa:	d505      	bpl.n	8018eb8 <__sflush_r+0x48>
 8018eac:	6863      	ldr	r3, [r4, #4]
 8018eae:	1ac0      	subs	r0, r0, r3
 8018eb0:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8018eb2:	b10b      	cbz	r3, 8018eb8 <__sflush_r+0x48>
 8018eb4:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8018eb6:	1ac0      	subs	r0, r0, r3
 8018eb8:	2300      	movs	r3, #0
 8018eba:	4602      	mov	r2, r0
 8018ebc:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8018ebe:	6a21      	ldr	r1, [r4, #32]
 8018ec0:	4628      	mov	r0, r5
 8018ec2:	47b0      	blx	r6
 8018ec4:	1c43      	adds	r3, r0, #1
 8018ec6:	89a3      	ldrh	r3, [r4, #12]
 8018ec8:	d106      	bne.n	8018ed8 <__sflush_r+0x68>
 8018eca:	6829      	ldr	r1, [r5, #0]
 8018ecc:	291d      	cmp	r1, #29
 8018ece:	d82b      	bhi.n	8018f28 <__sflush_r+0xb8>
 8018ed0:	4a29      	ldr	r2, [pc, #164]	; (8018f78 <__sflush_r+0x108>)
 8018ed2:	410a      	asrs	r2, r1
 8018ed4:	07d6      	lsls	r6, r2, #31
 8018ed6:	d427      	bmi.n	8018f28 <__sflush_r+0xb8>
 8018ed8:	2200      	movs	r2, #0
 8018eda:	6062      	str	r2, [r4, #4]
 8018edc:	04d9      	lsls	r1, r3, #19
 8018ede:	6922      	ldr	r2, [r4, #16]
 8018ee0:	6022      	str	r2, [r4, #0]
 8018ee2:	d504      	bpl.n	8018eee <__sflush_r+0x7e>
 8018ee4:	1c42      	adds	r2, r0, #1
 8018ee6:	d101      	bne.n	8018eec <__sflush_r+0x7c>
 8018ee8:	682b      	ldr	r3, [r5, #0]
 8018eea:	b903      	cbnz	r3, 8018eee <__sflush_r+0x7e>
 8018eec:	6560      	str	r0, [r4, #84]	; 0x54
 8018eee:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8018ef0:	602f      	str	r7, [r5, #0]
 8018ef2:	2900      	cmp	r1, #0
 8018ef4:	d0c9      	beq.n	8018e8a <__sflush_r+0x1a>
 8018ef6:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8018efa:	4299      	cmp	r1, r3
 8018efc:	d002      	beq.n	8018f04 <__sflush_r+0x94>
 8018efe:	4628      	mov	r0, r5
 8018f00:	f7ff fbe2 	bl	80186c8 <_free_r>
 8018f04:	2000      	movs	r0, #0
 8018f06:	6360      	str	r0, [r4, #52]	; 0x34
 8018f08:	e7c0      	b.n	8018e8c <__sflush_r+0x1c>
 8018f0a:	2301      	movs	r3, #1
 8018f0c:	4628      	mov	r0, r5
 8018f0e:	47b0      	blx	r6
 8018f10:	1c41      	adds	r1, r0, #1
 8018f12:	d1c8      	bne.n	8018ea6 <__sflush_r+0x36>
 8018f14:	682b      	ldr	r3, [r5, #0]
 8018f16:	2b00      	cmp	r3, #0
 8018f18:	d0c5      	beq.n	8018ea6 <__sflush_r+0x36>
 8018f1a:	2b1d      	cmp	r3, #29
 8018f1c:	d001      	beq.n	8018f22 <__sflush_r+0xb2>
 8018f1e:	2b16      	cmp	r3, #22
 8018f20:	d101      	bne.n	8018f26 <__sflush_r+0xb6>
 8018f22:	602f      	str	r7, [r5, #0]
 8018f24:	e7b1      	b.n	8018e8a <__sflush_r+0x1a>
 8018f26:	89a3      	ldrh	r3, [r4, #12]
 8018f28:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8018f2c:	81a3      	strh	r3, [r4, #12]
 8018f2e:	e7ad      	b.n	8018e8c <__sflush_r+0x1c>
 8018f30:	690f      	ldr	r7, [r1, #16]
 8018f32:	2f00      	cmp	r7, #0
 8018f34:	d0a9      	beq.n	8018e8a <__sflush_r+0x1a>
 8018f36:	0793      	lsls	r3, r2, #30
 8018f38:	680e      	ldr	r6, [r1, #0]
 8018f3a:	bf08      	it	eq
 8018f3c:	694b      	ldreq	r3, [r1, #20]
 8018f3e:	600f      	str	r7, [r1, #0]
 8018f40:	bf18      	it	ne
 8018f42:	2300      	movne	r3, #0
 8018f44:	eba6 0807 	sub.w	r8, r6, r7
 8018f48:	608b      	str	r3, [r1, #8]
 8018f4a:	f1b8 0f00 	cmp.w	r8, #0
 8018f4e:	dd9c      	ble.n	8018e8a <__sflush_r+0x1a>
 8018f50:	6a21      	ldr	r1, [r4, #32]
 8018f52:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 8018f54:	4643      	mov	r3, r8
 8018f56:	463a      	mov	r2, r7
 8018f58:	4628      	mov	r0, r5
 8018f5a:	47b0      	blx	r6
 8018f5c:	2800      	cmp	r0, #0
 8018f5e:	dc06      	bgt.n	8018f6e <__sflush_r+0xfe>
 8018f60:	89a3      	ldrh	r3, [r4, #12]
 8018f62:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8018f66:	81a3      	strh	r3, [r4, #12]
 8018f68:	f04f 30ff 	mov.w	r0, #4294967295
 8018f6c:	e78e      	b.n	8018e8c <__sflush_r+0x1c>
 8018f6e:	4407      	add	r7, r0
 8018f70:	eba8 0800 	sub.w	r8, r8, r0
 8018f74:	e7e9      	b.n	8018f4a <__sflush_r+0xda>
 8018f76:	bf00      	nop
 8018f78:	dfbffffe 	.word	0xdfbffffe

08018f7c <_fflush_r>:
 8018f7c:	b538      	push	{r3, r4, r5, lr}
 8018f7e:	690b      	ldr	r3, [r1, #16]
 8018f80:	4605      	mov	r5, r0
 8018f82:	460c      	mov	r4, r1
 8018f84:	b913      	cbnz	r3, 8018f8c <_fflush_r+0x10>
 8018f86:	2500      	movs	r5, #0
 8018f88:	4628      	mov	r0, r5
 8018f8a:	bd38      	pop	{r3, r4, r5, pc}
 8018f8c:	b118      	cbz	r0, 8018f96 <_fflush_r+0x1a>
 8018f8e:	6a03      	ldr	r3, [r0, #32]
 8018f90:	b90b      	cbnz	r3, 8018f96 <_fflush_r+0x1a>
 8018f92:	f7ff fa43 	bl	801841c <__sinit>
 8018f96:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8018f9a:	2b00      	cmp	r3, #0
 8018f9c:	d0f3      	beq.n	8018f86 <_fflush_r+0xa>
 8018f9e:	6e62      	ldr	r2, [r4, #100]	; 0x64
 8018fa0:	07d0      	lsls	r0, r2, #31
 8018fa2:	d404      	bmi.n	8018fae <_fflush_r+0x32>
 8018fa4:	0599      	lsls	r1, r3, #22
 8018fa6:	d402      	bmi.n	8018fae <_fflush_r+0x32>
 8018fa8:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8018faa:	f7ff fb5e 	bl	801866a <__retarget_lock_acquire_recursive>
 8018fae:	4628      	mov	r0, r5
 8018fb0:	4621      	mov	r1, r4
 8018fb2:	f7ff ff5d 	bl	8018e70 <__sflush_r>
 8018fb6:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8018fb8:	07da      	lsls	r2, r3, #31
 8018fba:	4605      	mov	r5, r0
 8018fbc:	d4e4      	bmi.n	8018f88 <_fflush_r+0xc>
 8018fbe:	89a3      	ldrh	r3, [r4, #12]
 8018fc0:	059b      	lsls	r3, r3, #22
 8018fc2:	d4e1      	bmi.n	8018f88 <_fflush_r+0xc>
 8018fc4:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8018fc6:	f7ff fb51 	bl	801866c <__retarget_lock_release_recursive>
 8018fca:	e7dd      	b.n	8018f88 <_fflush_r+0xc>

08018fcc <fiprintf>:
 8018fcc:	b40e      	push	{r1, r2, r3}
 8018fce:	b503      	push	{r0, r1, lr}
 8018fd0:	4601      	mov	r1, r0
 8018fd2:	ab03      	add	r3, sp, #12
 8018fd4:	4805      	ldr	r0, [pc, #20]	; (8018fec <fiprintf+0x20>)
 8018fd6:	f853 2b04 	ldr.w	r2, [r3], #4
 8018fda:	6800      	ldr	r0, [r0, #0]
 8018fdc:	9301      	str	r3, [sp, #4]
 8018fde:	f7ff fc9d 	bl	801891c <_vfiprintf_r>
 8018fe2:	b002      	add	sp, #8
 8018fe4:	f85d eb04 	ldr.w	lr, [sp], #4
 8018fe8:	b003      	add	sp, #12
 8018fea:	4770      	bx	lr
 8018fec:	20000174 	.word	0x20000174

08018ff0 <__swbuf_r>:
 8018ff0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8018ff2:	460e      	mov	r6, r1
 8018ff4:	4614      	mov	r4, r2
 8018ff6:	4605      	mov	r5, r0
 8018ff8:	b118      	cbz	r0, 8019002 <__swbuf_r+0x12>
 8018ffa:	6a03      	ldr	r3, [r0, #32]
 8018ffc:	b90b      	cbnz	r3, 8019002 <__swbuf_r+0x12>
 8018ffe:	f7ff fa0d 	bl	801841c <__sinit>
 8019002:	69a3      	ldr	r3, [r4, #24]
 8019004:	60a3      	str	r3, [r4, #8]
 8019006:	89a3      	ldrh	r3, [r4, #12]
 8019008:	071a      	lsls	r2, r3, #28
 801900a:	d525      	bpl.n	8019058 <__swbuf_r+0x68>
 801900c:	6923      	ldr	r3, [r4, #16]
 801900e:	b31b      	cbz	r3, 8019058 <__swbuf_r+0x68>
 8019010:	6823      	ldr	r3, [r4, #0]
 8019012:	6922      	ldr	r2, [r4, #16]
 8019014:	1a98      	subs	r0, r3, r2
 8019016:	6963      	ldr	r3, [r4, #20]
 8019018:	b2f6      	uxtb	r6, r6
 801901a:	4283      	cmp	r3, r0
 801901c:	4637      	mov	r7, r6
 801901e:	dc04      	bgt.n	801902a <__swbuf_r+0x3a>
 8019020:	4621      	mov	r1, r4
 8019022:	4628      	mov	r0, r5
 8019024:	f7ff ffaa 	bl	8018f7c <_fflush_r>
 8019028:	b9e0      	cbnz	r0, 8019064 <__swbuf_r+0x74>
 801902a:	68a3      	ldr	r3, [r4, #8]
 801902c:	3b01      	subs	r3, #1
 801902e:	60a3      	str	r3, [r4, #8]
 8019030:	6823      	ldr	r3, [r4, #0]
 8019032:	1c5a      	adds	r2, r3, #1
 8019034:	6022      	str	r2, [r4, #0]
 8019036:	701e      	strb	r6, [r3, #0]
 8019038:	6962      	ldr	r2, [r4, #20]
 801903a:	1c43      	adds	r3, r0, #1
 801903c:	429a      	cmp	r2, r3
 801903e:	d004      	beq.n	801904a <__swbuf_r+0x5a>
 8019040:	89a3      	ldrh	r3, [r4, #12]
 8019042:	07db      	lsls	r3, r3, #31
 8019044:	d506      	bpl.n	8019054 <__swbuf_r+0x64>
 8019046:	2e0a      	cmp	r6, #10
 8019048:	d104      	bne.n	8019054 <__swbuf_r+0x64>
 801904a:	4621      	mov	r1, r4
 801904c:	4628      	mov	r0, r5
 801904e:	f7ff ff95 	bl	8018f7c <_fflush_r>
 8019052:	b938      	cbnz	r0, 8019064 <__swbuf_r+0x74>
 8019054:	4638      	mov	r0, r7
 8019056:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8019058:	4621      	mov	r1, r4
 801905a:	4628      	mov	r0, r5
 801905c:	f000 f806 	bl	801906c <__swsetup_r>
 8019060:	2800      	cmp	r0, #0
 8019062:	d0d5      	beq.n	8019010 <__swbuf_r+0x20>
 8019064:	f04f 37ff 	mov.w	r7, #4294967295
 8019068:	e7f4      	b.n	8019054 <__swbuf_r+0x64>
	...

0801906c <__swsetup_r>:
 801906c:	b538      	push	{r3, r4, r5, lr}
 801906e:	4b2a      	ldr	r3, [pc, #168]	; (8019118 <__swsetup_r+0xac>)
 8019070:	4605      	mov	r5, r0
 8019072:	6818      	ldr	r0, [r3, #0]
 8019074:	460c      	mov	r4, r1
 8019076:	b118      	cbz	r0, 8019080 <__swsetup_r+0x14>
 8019078:	6a03      	ldr	r3, [r0, #32]
 801907a:	b90b      	cbnz	r3, 8019080 <__swsetup_r+0x14>
 801907c:	f7ff f9ce 	bl	801841c <__sinit>
 8019080:	89a3      	ldrh	r3, [r4, #12]
 8019082:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8019086:	0718      	lsls	r0, r3, #28
 8019088:	d422      	bmi.n	80190d0 <__swsetup_r+0x64>
 801908a:	06d9      	lsls	r1, r3, #27
 801908c:	d407      	bmi.n	801909e <__swsetup_r+0x32>
 801908e:	2309      	movs	r3, #9
 8019090:	602b      	str	r3, [r5, #0]
 8019092:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 8019096:	81a3      	strh	r3, [r4, #12]
 8019098:	f04f 30ff 	mov.w	r0, #4294967295
 801909c:	e034      	b.n	8019108 <__swsetup_r+0x9c>
 801909e:	0758      	lsls	r0, r3, #29
 80190a0:	d512      	bpl.n	80190c8 <__swsetup_r+0x5c>
 80190a2:	6b61      	ldr	r1, [r4, #52]	; 0x34
 80190a4:	b141      	cbz	r1, 80190b8 <__swsetup_r+0x4c>
 80190a6:	f104 0344 	add.w	r3, r4, #68	; 0x44
 80190aa:	4299      	cmp	r1, r3
 80190ac:	d002      	beq.n	80190b4 <__swsetup_r+0x48>
 80190ae:	4628      	mov	r0, r5
 80190b0:	f7ff fb0a 	bl	80186c8 <_free_r>
 80190b4:	2300      	movs	r3, #0
 80190b6:	6363      	str	r3, [r4, #52]	; 0x34
 80190b8:	89a3      	ldrh	r3, [r4, #12]
 80190ba:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 80190be:	81a3      	strh	r3, [r4, #12]
 80190c0:	2300      	movs	r3, #0
 80190c2:	6063      	str	r3, [r4, #4]
 80190c4:	6923      	ldr	r3, [r4, #16]
 80190c6:	6023      	str	r3, [r4, #0]
 80190c8:	89a3      	ldrh	r3, [r4, #12]
 80190ca:	f043 0308 	orr.w	r3, r3, #8
 80190ce:	81a3      	strh	r3, [r4, #12]
 80190d0:	6923      	ldr	r3, [r4, #16]
 80190d2:	b94b      	cbnz	r3, 80190e8 <__swsetup_r+0x7c>
 80190d4:	89a3      	ldrh	r3, [r4, #12]
 80190d6:	f403 7320 	and.w	r3, r3, #640	; 0x280
 80190da:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80190de:	d003      	beq.n	80190e8 <__swsetup_r+0x7c>
 80190e0:	4621      	mov	r1, r4
 80190e2:	4628      	mov	r0, r5
 80190e4:	f000 f857 	bl	8019196 <__smakebuf_r>
 80190e8:	89a0      	ldrh	r0, [r4, #12]
 80190ea:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 80190ee:	f010 0301 	ands.w	r3, r0, #1
 80190f2:	d00a      	beq.n	801910a <__swsetup_r+0x9e>
 80190f4:	2300      	movs	r3, #0
 80190f6:	60a3      	str	r3, [r4, #8]
 80190f8:	6963      	ldr	r3, [r4, #20]
 80190fa:	425b      	negs	r3, r3
 80190fc:	61a3      	str	r3, [r4, #24]
 80190fe:	6923      	ldr	r3, [r4, #16]
 8019100:	b943      	cbnz	r3, 8019114 <__swsetup_r+0xa8>
 8019102:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 8019106:	d1c4      	bne.n	8019092 <__swsetup_r+0x26>
 8019108:	bd38      	pop	{r3, r4, r5, pc}
 801910a:	0781      	lsls	r1, r0, #30
 801910c:	bf58      	it	pl
 801910e:	6963      	ldrpl	r3, [r4, #20]
 8019110:	60a3      	str	r3, [r4, #8]
 8019112:	e7f4      	b.n	80190fe <__swsetup_r+0x92>
 8019114:	2000      	movs	r0, #0
 8019116:	e7f7      	b.n	8019108 <__swsetup_r+0x9c>
 8019118:	20000174 	.word	0x20000174

0801911c <_sbrk_r>:
 801911c:	b538      	push	{r3, r4, r5, lr}
 801911e:	4d06      	ldr	r5, [pc, #24]	; (8019138 <_sbrk_r+0x1c>)
 8019120:	2300      	movs	r3, #0
 8019122:	4604      	mov	r4, r0
 8019124:	4608      	mov	r0, r1
 8019126:	602b      	str	r3, [r5, #0]
 8019128:	f7e7 fd1c 	bl	8000b64 <_sbrk>
 801912c:	1c43      	adds	r3, r0, #1
 801912e:	d102      	bne.n	8019136 <_sbrk_r+0x1a>
 8019130:	682b      	ldr	r3, [r5, #0]
 8019132:	b103      	cbz	r3, 8019136 <_sbrk_r+0x1a>
 8019134:	6023      	str	r3, [r4, #0]
 8019136:	bd38      	pop	{r3, r4, r5, pc}
 8019138:	2000a7d4 	.word	0x2000a7d4

0801913c <abort>:
 801913c:	b508      	push	{r3, lr}
 801913e:	2006      	movs	r0, #6
 8019140:	f000 f88e 	bl	8019260 <raise>
 8019144:	2001      	movs	r0, #1
 8019146:	f7e7 fc95 	bl	8000a74 <_exit>

0801914a <__swhatbuf_r>:
 801914a:	b570      	push	{r4, r5, r6, lr}
 801914c:	460c      	mov	r4, r1
 801914e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8019152:	2900      	cmp	r1, #0
 8019154:	b096      	sub	sp, #88	; 0x58
 8019156:	4615      	mov	r5, r2
 8019158:	461e      	mov	r6, r3
 801915a:	da0d      	bge.n	8019178 <__swhatbuf_r+0x2e>
 801915c:	89a3      	ldrh	r3, [r4, #12]
 801915e:	f013 0f80 	tst.w	r3, #128	; 0x80
 8019162:	f04f 0100 	mov.w	r1, #0
 8019166:	bf0c      	ite	eq
 8019168:	f44f 6380 	moveq.w	r3, #1024	; 0x400
 801916c:	2340      	movne	r3, #64	; 0x40
 801916e:	2000      	movs	r0, #0
 8019170:	6031      	str	r1, [r6, #0]
 8019172:	602b      	str	r3, [r5, #0]
 8019174:	b016      	add	sp, #88	; 0x58
 8019176:	bd70      	pop	{r4, r5, r6, pc}
 8019178:	466a      	mov	r2, sp
 801917a:	f000 f879 	bl	8019270 <_fstat_r>
 801917e:	2800      	cmp	r0, #0
 8019180:	dbec      	blt.n	801915c <__swhatbuf_r+0x12>
 8019182:	9901      	ldr	r1, [sp, #4]
 8019184:	f401 4170 	and.w	r1, r1, #61440	; 0xf000
 8019188:	f5a1 5300 	sub.w	r3, r1, #8192	; 0x2000
 801918c:	4259      	negs	r1, r3
 801918e:	4159      	adcs	r1, r3
 8019190:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8019194:	e7eb      	b.n	801916e <__swhatbuf_r+0x24>

08019196 <__smakebuf_r>:
 8019196:	898b      	ldrh	r3, [r1, #12]
 8019198:	b573      	push	{r0, r1, r4, r5, r6, lr}
 801919a:	079d      	lsls	r5, r3, #30
 801919c:	4606      	mov	r6, r0
 801919e:	460c      	mov	r4, r1
 80191a0:	d507      	bpl.n	80191b2 <__smakebuf_r+0x1c>
 80191a2:	f104 0347 	add.w	r3, r4, #71	; 0x47
 80191a6:	6023      	str	r3, [r4, #0]
 80191a8:	6123      	str	r3, [r4, #16]
 80191aa:	2301      	movs	r3, #1
 80191ac:	6163      	str	r3, [r4, #20]
 80191ae:	b002      	add	sp, #8
 80191b0:	bd70      	pop	{r4, r5, r6, pc}
 80191b2:	ab01      	add	r3, sp, #4
 80191b4:	466a      	mov	r2, sp
 80191b6:	f7ff ffc8 	bl	801914a <__swhatbuf_r>
 80191ba:	9900      	ldr	r1, [sp, #0]
 80191bc:	4605      	mov	r5, r0
 80191be:	4630      	mov	r0, r6
 80191c0:	f7ff faf6 	bl	80187b0 <_malloc_r>
 80191c4:	b948      	cbnz	r0, 80191da <__smakebuf_r+0x44>
 80191c6:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80191ca:	059a      	lsls	r2, r3, #22
 80191cc:	d4ef      	bmi.n	80191ae <__smakebuf_r+0x18>
 80191ce:	f023 0303 	bic.w	r3, r3, #3
 80191d2:	f043 0302 	orr.w	r3, r3, #2
 80191d6:	81a3      	strh	r3, [r4, #12]
 80191d8:	e7e3      	b.n	80191a2 <__smakebuf_r+0xc>
 80191da:	89a3      	ldrh	r3, [r4, #12]
 80191dc:	6020      	str	r0, [r4, #0]
 80191de:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80191e2:	81a3      	strh	r3, [r4, #12]
 80191e4:	9b00      	ldr	r3, [sp, #0]
 80191e6:	6163      	str	r3, [r4, #20]
 80191e8:	9b01      	ldr	r3, [sp, #4]
 80191ea:	6120      	str	r0, [r4, #16]
 80191ec:	b15b      	cbz	r3, 8019206 <__smakebuf_r+0x70>
 80191ee:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 80191f2:	4630      	mov	r0, r6
 80191f4:	f000 f84e 	bl	8019294 <_isatty_r>
 80191f8:	b128      	cbz	r0, 8019206 <__smakebuf_r+0x70>
 80191fa:	89a3      	ldrh	r3, [r4, #12]
 80191fc:	f023 0303 	bic.w	r3, r3, #3
 8019200:	f043 0301 	orr.w	r3, r3, #1
 8019204:	81a3      	strh	r3, [r4, #12]
 8019206:	89a3      	ldrh	r3, [r4, #12]
 8019208:	431d      	orrs	r5, r3
 801920a:	81a5      	strh	r5, [r4, #12]
 801920c:	e7cf      	b.n	80191ae <__smakebuf_r+0x18>

0801920e <_raise_r>:
 801920e:	291f      	cmp	r1, #31
 8019210:	b538      	push	{r3, r4, r5, lr}
 8019212:	4604      	mov	r4, r0
 8019214:	460d      	mov	r5, r1
 8019216:	d904      	bls.n	8019222 <_raise_r+0x14>
 8019218:	2316      	movs	r3, #22
 801921a:	6003      	str	r3, [r0, #0]
 801921c:	f04f 30ff 	mov.w	r0, #4294967295
 8019220:	bd38      	pop	{r3, r4, r5, pc}
 8019222:	6bc2      	ldr	r2, [r0, #60]	; 0x3c
 8019224:	b112      	cbz	r2, 801922c <_raise_r+0x1e>
 8019226:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 801922a:	b94b      	cbnz	r3, 8019240 <_raise_r+0x32>
 801922c:	4620      	mov	r0, r4
 801922e:	f000 f853 	bl	80192d8 <_getpid_r>
 8019232:	462a      	mov	r2, r5
 8019234:	4601      	mov	r1, r0
 8019236:	4620      	mov	r0, r4
 8019238:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 801923c:	f000 b83a 	b.w	80192b4 <_kill_r>
 8019240:	2b01      	cmp	r3, #1
 8019242:	d00a      	beq.n	801925a <_raise_r+0x4c>
 8019244:	1c59      	adds	r1, r3, #1
 8019246:	d103      	bne.n	8019250 <_raise_r+0x42>
 8019248:	2316      	movs	r3, #22
 801924a:	6003      	str	r3, [r0, #0]
 801924c:	2001      	movs	r0, #1
 801924e:	e7e7      	b.n	8019220 <_raise_r+0x12>
 8019250:	2400      	movs	r4, #0
 8019252:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 8019256:	4628      	mov	r0, r5
 8019258:	4798      	blx	r3
 801925a:	2000      	movs	r0, #0
 801925c:	e7e0      	b.n	8019220 <_raise_r+0x12>
	...

08019260 <raise>:
 8019260:	4b02      	ldr	r3, [pc, #8]	; (801926c <raise+0xc>)
 8019262:	4601      	mov	r1, r0
 8019264:	6818      	ldr	r0, [r3, #0]
 8019266:	f7ff bfd2 	b.w	801920e <_raise_r>
 801926a:	bf00      	nop
 801926c:	20000174 	.word	0x20000174

08019270 <_fstat_r>:
 8019270:	b538      	push	{r3, r4, r5, lr}
 8019272:	4d07      	ldr	r5, [pc, #28]	; (8019290 <_fstat_r+0x20>)
 8019274:	2300      	movs	r3, #0
 8019276:	4604      	mov	r4, r0
 8019278:	4608      	mov	r0, r1
 801927a:	4611      	mov	r1, r2
 801927c:	602b      	str	r3, [r5, #0]
 801927e:	f7e7 fc48 	bl	8000b12 <_fstat>
 8019282:	1c43      	adds	r3, r0, #1
 8019284:	d102      	bne.n	801928c <_fstat_r+0x1c>
 8019286:	682b      	ldr	r3, [r5, #0]
 8019288:	b103      	cbz	r3, 801928c <_fstat_r+0x1c>
 801928a:	6023      	str	r3, [r4, #0]
 801928c:	bd38      	pop	{r3, r4, r5, pc}
 801928e:	bf00      	nop
 8019290:	2000a7d4 	.word	0x2000a7d4

08019294 <_isatty_r>:
 8019294:	b538      	push	{r3, r4, r5, lr}
 8019296:	4d06      	ldr	r5, [pc, #24]	; (80192b0 <_isatty_r+0x1c>)
 8019298:	2300      	movs	r3, #0
 801929a:	4604      	mov	r4, r0
 801929c:	4608      	mov	r0, r1
 801929e:	602b      	str	r3, [r5, #0]
 80192a0:	f7e7 fc47 	bl	8000b32 <_isatty>
 80192a4:	1c43      	adds	r3, r0, #1
 80192a6:	d102      	bne.n	80192ae <_isatty_r+0x1a>
 80192a8:	682b      	ldr	r3, [r5, #0]
 80192aa:	b103      	cbz	r3, 80192ae <_isatty_r+0x1a>
 80192ac:	6023      	str	r3, [r4, #0]
 80192ae:	bd38      	pop	{r3, r4, r5, pc}
 80192b0:	2000a7d4 	.word	0x2000a7d4

080192b4 <_kill_r>:
 80192b4:	b538      	push	{r3, r4, r5, lr}
 80192b6:	4d07      	ldr	r5, [pc, #28]	; (80192d4 <_kill_r+0x20>)
 80192b8:	2300      	movs	r3, #0
 80192ba:	4604      	mov	r4, r0
 80192bc:	4608      	mov	r0, r1
 80192be:	4611      	mov	r1, r2
 80192c0:	602b      	str	r3, [r5, #0]
 80192c2:	f7e7 fbc5 	bl	8000a50 <_kill>
 80192c6:	1c43      	adds	r3, r0, #1
 80192c8:	d102      	bne.n	80192d0 <_kill_r+0x1c>
 80192ca:	682b      	ldr	r3, [r5, #0]
 80192cc:	b103      	cbz	r3, 80192d0 <_kill_r+0x1c>
 80192ce:	6023      	str	r3, [r4, #0]
 80192d0:	bd38      	pop	{r3, r4, r5, pc}
 80192d2:	bf00      	nop
 80192d4:	2000a7d4 	.word	0x2000a7d4

080192d8 <_getpid_r>:
 80192d8:	f7e7 bbb2 	b.w	8000a40 <_getpid>

080192dc <_init>:
 80192dc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80192de:	bf00      	nop
 80192e0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80192e2:	bc08      	pop	{r3}
 80192e4:	469e      	mov	lr, r3
 80192e6:	4770      	bx	lr

080192e8 <_fini>:
 80192e8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80192ea:	bf00      	nop
 80192ec:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80192ee:	bc08      	pop	{r3}
 80192f0:	469e      	mov	lr, r3
 80192f2:	4770      	bx	lr
